{"version":3,"file":"js/vender~2044162d.4725bbc3.js","mappings":"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","sources":["webpack:///../../../node_modules/cesium/Source/DataSources/GeometryVisualizer.js","webpack:///../../../node_modules/cesium/Source/DataSources/GpxDataSource.js","webpack:///../../../node_modules/cesium/Source/DataSources/GridMaterialProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/GroundGeometryUpdater.js","webpack:///../../../node_modules/cesium/Source/DataSources/ImageMaterialProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/KmlCamera.js","webpack:///../../../node_modules/cesium/Source/DataSources/KmlDataSource.js","webpack:///../../../node_modules/cesium/Source/DataSources/KmlLookAt.js","webpack:///../../../node_modules/cesium/Source/DataSources/KmlTour.js","webpack:///../../../node_modules/cesium/Source/DataSources/KmlTourFlyTo.js","webpack:///../../../node_modules/cesium/Source/DataSources/KmlTourWait.js","webpack:///../../../node_modules/cesium/Source/DataSources/LabelGraphics.js","webpack:///../../../node_modules/cesium/Source/DataSources/LabelVisualizer.js","webpack:///../../../node_modules/cesium/Source/DataSources/MaterialProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/ModelGraphics.js","webpack:///../../../node_modules/cesium/Source/DataSources/ModelVisualizer.js","webpack:///../../../node_modules/cesium/Source/DataSources/NodeTransformationProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/PathGraphics.js","webpack:///../../../node_modules/cesium/Source/DataSources/PathVisualizer.js","webpack:///../../../node_modules/cesium/Source/DataSources/PlaneGeometryUpdater.js","webpack:///../../../node_modules/cesium/Source/DataSources/PlaneGraphics.js","webpack:///../../../node_modules/cesium/Source/DataSources/PointGraphics.js","webpack:///../../../node_modules/cesium/Source/DataSources/PointVisualizer.js","webpack:///../../../node_modules/cesium/Source/DataSources/PolygonGeometryUpdater.js","webpack:///../../../node_modules/cesium/Source/DataSources/PolygonGraphics.js","webpack:///../../../node_modules/cesium/Source/DataSources/PolylineArrowMaterialProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/PolylineDashMaterialProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/PolylineGeometryUpdater.js","webpack:///../../../node_modules/cesium/Source/DataSources/PolylineGlowMaterialProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/PolylineGraphics.js","webpack:///../../../node_modules/cesium/Source/DataSources/PolylineOutlineMaterialProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/PolylineVisualizer.js","webpack:///../../../node_modules/cesium/Source/DataSources/PolylineVolumeGeometryUpdater.js","webpack:///../../../node_modules/cesium/Source/DataSources/PolylineVolumeGraphics.js","webpack:///../../../node_modules/cesium/Source/DataSources/PositionProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/PositionPropertyArray.js","webpack:///../../../node_modules/cesium/Source/DataSources/Property.js","webpack:///../../../node_modules/cesium/Source/DataSources/PropertyArray.js","webpack:///../../../node_modules/cesium/Source/DataSources/PropertyBag.js","webpack:///../../../node_modules/cesium/Source/DataSources/RectangleGeometryUpdater.js","webpack:///../../../node_modules/cesium/Source/DataSources/RectangleGraphics.js","webpack:///../../../node_modules/cesium/Source/DataSources/ReferenceProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/Rotation.js"],"sourcesContent":["import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport Event from \"../Core/Event.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport ClassificationType from \"../Scene/ClassificationType.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ShadowMode from \"../Scene/ShadowMode.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport BoxGeometryUpdater from \"./BoxGeometryUpdater.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport CorridorGeometryUpdater from \"./CorridorGeometryUpdater.js\";\nimport CylinderGeometryUpdater from \"./CylinderGeometryUpdater.js\";\nimport DynamicGeometryBatch from \"./DynamicGeometryBatch.js\";\nimport EllipseGeometryUpdater from \"./EllipseGeometryUpdater.js\";\nimport EllipsoidGeometryUpdater from \"./EllipsoidGeometryUpdater.js\";\nimport Entity from \"./Entity.js\";\nimport PlaneGeometryUpdater from \"./PlaneGeometryUpdater.js\";\nimport PolygonGeometryUpdater from \"./PolygonGeometryUpdater.js\";\nimport PolylineVolumeGeometryUpdater from \"./PolylineVolumeGeometryUpdater.js\";\nimport RectangleGeometryUpdater from \"./RectangleGeometryUpdater.js\";\nimport StaticGeometryColorBatch from \"./StaticGeometryColorBatch.js\";\nimport StaticGeometryPerMaterialBatch from \"./StaticGeometryPerMaterialBatch.js\";\nimport StaticGroundGeometryColorBatch from \"./StaticGroundGeometryColorBatch.js\";\nimport StaticGroundGeometryPerMaterialBatch from \"./StaticGroundGeometryPerMaterialBatch.js\";\nimport StaticOutlineGeometryBatch from \"./StaticOutlineGeometryBatch.js\";\nimport WallGeometryUpdater from \"./WallGeometryUpdater.js\";\n\nconst emptyArray = [];\n\nconst geometryUpdaters = [\n  BoxGeometryUpdater,\n  CylinderGeometryUpdater,\n  CorridorGeometryUpdater,\n  EllipseGeometryUpdater,\n  EllipsoidGeometryUpdater,\n  PlaneGeometryUpdater,\n  PolygonGeometryUpdater,\n  PolylineVolumeGeometryUpdater,\n  RectangleGeometryUpdater,\n  WallGeometryUpdater,\n];\n\nfunction GeometryUpdaterSet(entity, scene) {\n  this.entity = entity;\n  this.scene = scene;\n  const updaters = new Array(geometryUpdaters.length);\n  const geometryChanged = new Event();\n  function raiseEvent(geometry) {\n    geometryChanged.raiseEvent(geometry);\n  }\n  const eventHelper = new EventHelper();\n  for (let i = 0; i < updaters.length; i++) {\n    const updater = new geometryUpdaters[i](entity, scene);\n    eventHelper.add(updater.geometryChanged, raiseEvent);\n    updaters[i] = updater;\n  }\n  this.updaters = updaters;\n  this.geometryChanged = geometryChanged;\n  this.eventHelper = eventHelper;\n\n  this._removeEntitySubscription = entity.definitionChanged.addEventListener(\n    GeometryUpdaterSet.prototype._onEntityPropertyChanged,\n    this\n  );\n}\n\nGeometryUpdaterSet.prototype._onEntityPropertyChanged = function (\n  entity,\n  propertyName,\n  newValue,\n  oldValue\n) {\n  const updaters = this.updaters;\n  for (let i = 0; i < updaters.length; i++) {\n    updaters[i]._onEntityPropertyChanged(\n      entity,\n      propertyName,\n      newValue,\n      oldValue\n    );\n  }\n};\n\nGeometryUpdaterSet.prototype.forEach = function (callback) {\n  const updaters = this.updaters;\n  for (let i = 0; i < updaters.length; i++) {\n    callback(updaters[i]);\n  }\n};\n\nGeometryUpdaterSet.prototype.destroy = function () {\n  this.eventHelper.removeAll();\n  const updaters = this.updaters;\n  for (let i = 0; i < updaters.length; i++) {\n    updaters[i].destroy();\n  }\n  this._removeEntitySubscription();\n  destroyObject(this);\n};\n\n/**\n * A general purpose visualizer for geometry represented by {@link Primitive} instances.\n * @alias GeometryVisualizer\n * @constructor\n *\n * @param {Scene} scene The scene the primitives will be rendered in.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n * @param {PrimitiveCollection} [primitives=scene.primitives] A collection to add primitives related to the entities\n * @param {PrimitiveCollection} [groundPrimitives=scene.groundPrimitives] A collection to add ground primitives related to the entities\n */\nfunction GeometryVisualizer(\n  scene,\n  entityCollection,\n  primitives,\n  groundPrimitives\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"scene\", scene);\n  Check.defined(\"entityCollection\", entityCollection);\n  //>>includeEnd('debug');\n\n  primitives = defaultValue(primitives, scene.primitives);\n  groundPrimitives = defaultValue(groundPrimitives, scene.groundPrimitives);\n\n  this._scene = scene;\n  this._primitives = primitives;\n  this._groundPrimitives = groundPrimitives;\n  this._entityCollection = undefined;\n  this._addedObjects = new AssociativeArray();\n  this._removedObjects = new AssociativeArray();\n  this._changedObjects = new AssociativeArray();\n\n  const numberOfShadowModes = ShadowMode.NUMBER_OF_SHADOW_MODES;\n  this._outlineBatches = new Array(numberOfShadowModes * 2);\n  this._closedColorBatches = new Array(numberOfShadowModes * 2);\n  this._closedMaterialBatches = new Array(numberOfShadowModes * 2);\n  this._openColorBatches = new Array(numberOfShadowModes * 2);\n  this._openMaterialBatches = new Array(numberOfShadowModes * 2);\n\n  const supportsMaterialsforEntitiesOnTerrain = Entity.supportsMaterialsforEntitiesOnTerrain(\n    scene\n  );\n  this._supportsMaterialsforEntitiesOnTerrain = supportsMaterialsforEntitiesOnTerrain;\n\n  let i;\n  for (i = 0; i < numberOfShadowModes; ++i) {\n    this._outlineBatches[i] = new StaticOutlineGeometryBatch(\n      primitives,\n      scene,\n      i,\n      false\n    );\n    this._outlineBatches[\n      numberOfShadowModes + i\n    ] = new StaticOutlineGeometryBatch(primitives, scene, i, true);\n\n    this._closedColorBatches[i] = new StaticGeometryColorBatch(\n      primitives,\n      PerInstanceColorAppearance,\n      undefined,\n      true,\n      i,\n      true\n    );\n    this._closedColorBatches[\n      numberOfShadowModes + i\n    ] = new StaticGeometryColorBatch(\n      primitives,\n      PerInstanceColorAppearance,\n      undefined,\n      true,\n      i,\n      false\n    );\n\n    this._closedMaterialBatches[i] = new StaticGeometryPerMaterialBatch(\n      primitives,\n      MaterialAppearance,\n      undefined,\n      true,\n      i,\n      true\n    );\n    this._closedMaterialBatches[\n      numberOfShadowModes + i\n    ] = new StaticGeometryPerMaterialBatch(\n      primitives,\n      MaterialAppearance,\n      undefined,\n      true,\n      i,\n      false\n    );\n\n    this._openColorBatches[i] = new StaticGeometryColorBatch(\n      primitives,\n      PerInstanceColorAppearance,\n      undefined,\n      false,\n      i,\n      true\n    );\n    this._openColorBatches[\n      numberOfShadowModes + i\n    ] = new StaticGeometryColorBatch(\n      primitives,\n      PerInstanceColorAppearance,\n      undefined,\n      false,\n      i,\n      false\n    );\n\n    this._openMaterialBatches[i] = new StaticGeometryPerMaterialBatch(\n      primitives,\n      MaterialAppearance,\n      undefined,\n      false,\n      i,\n      true\n    );\n    this._openMaterialBatches[\n      numberOfShadowModes + i\n    ] = new StaticGeometryPerMaterialBatch(\n      primitives,\n      MaterialAppearance,\n      undefined,\n      false,\n      i,\n      false\n    );\n  }\n\n  const numberOfClassificationTypes =\n    ClassificationType.NUMBER_OF_CLASSIFICATION_TYPES;\n  const groundColorBatches = new Array(numberOfClassificationTypes);\n  const groundMaterialBatches = [];\n  if (supportsMaterialsforEntitiesOnTerrain) {\n    for (i = 0; i < numberOfClassificationTypes; ++i) {\n      groundMaterialBatches.push(\n        new StaticGroundGeometryPerMaterialBatch(\n          groundPrimitives,\n          i,\n          MaterialAppearance\n        )\n      );\n      groundColorBatches[i] = new StaticGroundGeometryColorBatch(\n        groundPrimitives,\n        i\n      );\n    }\n  } else {\n    for (i = 0; i < numberOfClassificationTypes; ++i) {\n      groundColorBatches[i] = new StaticGroundGeometryColorBatch(\n        groundPrimitives,\n        i\n      );\n    }\n  }\n\n  this._groundColorBatches = groundColorBatches;\n  this._groundMaterialBatches = groundMaterialBatches;\n\n  this._dynamicBatch = new DynamicGeometryBatch(primitives, groundPrimitives);\n\n  this._batches = this._outlineBatches.concat(\n    this._closedColorBatches,\n    this._closedMaterialBatches,\n    this._openColorBatches,\n    this._openMaterialBatches,\n    this._groundColorBatches,\n    this._groundMaterialBatches,\n    this._dynamicBatch\n  );\n\n  this._subscriptions = new AssociativeArray();\n  this._updaterSets = new AssociativeArray();\n\n  this._entityCollection = entityCollection;\n  entityCollection.collectionChanged.addEventListener(\n    GeometryVisualizer.prototype._onCollectionChanged,\n    this\n  );\n  this._onCollectionChanged(\n    entityCollection,\n    entityCollection.values,\n    emptyArray\n  );\n}\n\n/**\n * Updates all of the primitives created by this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} True if the visualizer successfully updated to the provided time,\n * false if the visualizer is waiting for asynchronous primitives to be created.\n */\nGeometryVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  //>>includeEnd('debug');\n\n  const addedObjects = this._addedObjects;\n  const added = addedObjects.values;\n  const removedObjects = this._removedObjects;\n  const removed = removedObjects.values;\n  const changedObjects = this._changedObjects;\n  const changed = changedObjects.values;\n\n  let i;\n  let entity;\n  let id;\n  let updaterSet;\n  const that = this;\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n    id = entity.id;\n    updaterSet = this._updaterSets.get(id);\n\n    //If in a single update, an entity gets removed and a new instance\n    //re-added with the same id, the updater no longer tracks the\n    //correct entity, we need to both remove the old one and\n    //add the new one, which is done by pushing the entity\n    //onto the removed/added lists.\n    if (updaterSet.entity === entity) {\n      updaterSet.forEach(function (updater) {\n        that._removeUpdater(updater);\n        that._insertUpdaterIntoBatch(time, updater);\n      });\n    } else {\n      removed.push(entity);\n      added.push(entity);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    id = entity.id;\n    updaterSet = this._updaterSets.get(id);\n    updaterSet.forEach(this._removeUpdater.bind(this));\n    updaterSet.destroy();\n    this._updaterSets.remove(id);\n    this._subscriptions.get(id)();\n    this._subscriptions.remove(id);\n  }\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    id = entity.id;\n    updaterSet = new GeometryUpdaterSet(entity, this._scene);\n    this._updaterSets.set(id, updaterSet);\n    updaterSet.forEach(function (updater) {\n      that._insertUpdaterIntoBatch(time, updater);\n    });\n    this._subscriptions.set(\n      id,\n      updaterSet.geometryChanged.addEventListener(\n        GeometryVisualizer._onGeometryChanged,\n        this\n      )\n    );\n  }\n\n  addedObjects.removeAll();\n  removedObjects.removeAll();\n  changedObjects.removeAll();\n\n  let isUpdated = true;\n  const batches = this._batches;\n  const length = batches.length;\n  for (i = 0; i < length; i++) {\n    isUpdated = batches[i].update(time) && isUpdated;\n  }\n\n  return isUpdated;\n};\n\nconst getBoundingSphereArrayScratch = [];\nconst getBoundingSphereBoundingSphereScratch = new BoundingSphere();\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nGeometryVisualizer.prototype.getBoundingSphere = function (entity, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"entity\", entity);\n  Check.defined(\"result\", result);\n  //>>includeEnd('debug');\n\n  const boundingSpheres = getBoundingSphereArrayScratch;\n  const tmp = getBoundingSphereBoundingSphereScratch;\n\n  let count = 0;\n  let state = BoundingSphereState.DONE;\n  const batches = this._batches;\n  const batchesLength = batches.length;\n\n  const id = entity.id;\n  const updaters = this._updaterSets.get(id).updaters;\n\n  for (let j = 0; j < updaters.length; j++) {\n    const updater = updaters[j];\n    for (let i = 0; i < batchesLength; i++) {\n      state = batches[i].getBoundingSphere(updater, tmp);\n      if (state === BoundingSphereState.PENDING) {\n        return BoundingSphereState.PENDING;\n      } else if (state === BoundingSphereState.DONE) {\n        boundingSpheres[count] = BoundingSphere.clone(\n          tmp,\n          boundingSpheres[count]\n        );\n        count++;\n      }\n    }\n  }\n\n  if (count === 0) {\n    return BoundingSphereState.FAILED;\n  }\n\n  boundingSpheres.length = count;\n  BoundingSphere.fromBoundingSpheres(boundingSpheres, result);\n  return BoundingSphereState.DONE;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nGeometryVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nGeometryVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(\n    GeometryVisualizer.prototype._onCollectionChanged,\n    this\n  );\n  this._addedObjects.removeAll();\n  this._removedObjects.removeAll();\n\n  let i;\n  const batches = this._batches;\n  let length = batches.length;\n  for (i = 0; i < length; i++) {\n    batches[i].removeAllPrimitives();\n  }\n\n  const subscriptions = this._subscriptions.values;\n  length = subscriptions.length;\n  for (i = 0; i < length; i++) {\n    subscriptions[i]();\n  }\n  this._subscriptions.removeAll();\n\n  const updaterSets = this._updaterSets.values;\n  length = updaterSets.length;\n  for (i = 0; i < length; i++) {\n    updaterSets[i].destroy();\n  }\n  this._updaterSets.removeAll();\n  return destroyObject(this);\n};\n\n/**\n * @private\n */\nGeometryVisualizer.prototype._removeUpdater = function (updater) {\n  //We don't keep track of which batch an updater is in, so just remove it from all of them.\n  const batches = this._batches;\n  const length = batches.length;\n  for (let i = 0; i < length; i++) {\n    batches[i].remove(updater);\n  }\n};\n\n/**\n * @private\n */\nGeometryVisualizer.prototype._insertUpdaterIntoBatch = function (\n  time,\n  updater\n) {\n  if (updater.isDynamic) {\n    this._dynamicBatch.add(time, updater);\n    return;\n  }\n\n  let shadows;\n  if (updater.outlineEnabled || updater.fillEnabled) {\n    shadows = updater.shadowsProperty.getValue(time);\n  }\n\n  const numberOfShadowModes = ShadowMode.NUMBER_OF_SHADOW_MODES;\n  if (updater.outlineEnabled) {\n    if (defined(updater.terrainOffsetProperty)) {\n      this._outlineBatches[numberOfShadowModes + shadows].add(time, updater);\n    } else {\n      this._outlineBatches[shadows].add(time, updater);\n    }\n  }\n\n  if (updater.fillEnabled) {\n    if (updater.onTerrain) {\n      const classificationType = updater.classificationTypeProperty.getValue(\n        time\n      );\n      if (updater.fillMaterialProperty instanceof ColorMaterialProperty) {\n        this._groundColorBatches[classificationType].add(time, updater);\n      } else {\n        // If unsupported, updater will not be on terrain.\n        this._groundMaterialBatches[classificationType].add(time, updater);\n      }\n    } else if (updater.isClosed) {\n      if (updater.fillMaterialProperty instanceof ColorMaterialProperty) {\n        if (defined(updater.terrainOffsetProperty)) {\n          this._closedColorBatches[numberOfShadowModes + shadows].add(\n            time,\n            updater\n          );\n        } else {\n          this._closedColorBatches[shadows].add(time, updater);\n        }\n      } else if (defined(updater.terrainOffsetProperty)) {\n        this._closedMaterialBatches[numberOfShadowModes + shadows].add(\n          time,\n          updater\n        );\n      } else {\n        this._closedMaterialBatches[shadows].add(time, updater);\n      }\n    } else if (updater.fillMaterialProperty instanceof ColorMaterialProperty) {\n      if (defined(updater.terrainOffsetProperty)) {\n        this._openColorBatches[numberOfShadowModes + shadows].add(\n          time,\n          updater\n        );\n      } else {\n        this._openColorBatches[shadows].add(time, updater);\n      }\n    } else if (defined(updater.terrainOffsetProperty)) {\n      this._openMaterialBatches[numberOfShadowModes + shadows].add(\n        time,\n        updater\n      );\n    } else {\n      this._openMaterialBatches[shadows].add(time, updater);\n    }\n  }\n};\n\n/**\n * @private\n */\nGeometryVisualizer._onGeometryChanged = function (updater) {\n  const removedObjects = this._removedObjects;\n  const changedObjects = this._changedObjects;\n\n  const entity = updater.entity;\n  const id = entity.id;\n\n  if (!defined(removedObjects.get(id)) && !defined(changedObjects.get(id))) {\n    changedObjects.set(id, entity);\n  }\n};\n\n/**\n * @private\n */\nGeometryVisualizer.prototype._onCollectionChanged = function (\n  entityCollection,\n  added,\n  removed\n) {\n  const addedObjects = this._addedObjects;\n  const removedObjects = this._removedObjects;\n  const changedObjects = this._changedObjects;\n\n  let i;\n  let id;\n  let entity;\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    id = entity.id;\n    if (!addedObjects.remove(id)) {\n      removedObjects.set(id, entity);\n      changedObjects.remove(id);\n    }\n  }\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    id = entity.id;\n    if (removedObjects.remove(id)) {\n      changedObjects.set(id, entity);\n    } else {\n      addedObjects.set(id, entity);\n    }\n  }\n};\nexport default GeometryVisualizer;\n","import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport ClockRange from \"../Core/ClockRange.js\";\nimport ClockStep from \"../Core/ClockStep.js\";\nimport Color from \"../Core/Color.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defer from \"../Core/defer.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport PinBuilder from \"../Core/PinBuilder.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TimeInterval from \"../Core/TimeInterval.js\";\nimport TimeIntervalCollection from \"../Core/TimeIntervalCollection.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport HorizontalOrigin from \"../Scene/HorizontalOrigin.js\";\nimport LabelStyle from \"../Scene/LabelStyle.js\";\nimport VerticalOrigin from \"../Scene/VerticalOrigin.js\";\nimport Autolinker from \"../ThirdParty/Autolinker.js\";\nimport BillboardGraphics from \"./BillboardGraphics.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport DataSource from \"./DataSource.js\";\nimport DataSourceClock from \"./DataSourceClock.js\";\nimport EntityCluster from \"./EntityCluster.js\";\nimport EntityCollection from \"./EntityCollection.js\";\nimport LabelGraphics from \"./LabelGraphics.js\";\nimport PolylineGraphics from \"./PolylineGraphics.js\";\nimport PolylineOutlineMaterialProperty from \"./PolylineOutlineMaterialProperty.js\";\nimport SampledPositionProperty from \"./SampledPositionProperty.js\";\n\nlet parser;\nif (typeof DOMParser !== \"undefined\") {\n  parser = new DOMParser();\n}\n\nconst autolinker = new Autolinker({\n  stripPrefix: false,\n  email: false,\n  replaceFn: function (linker, match) {\n    if (!match.protocolUrlMatch) {\n      // Prevent matching of non-explicit urls.\n      // i.e. foo.id won't match but http://foo.id will\n      return false;\n    }\n  },\n});\n\nconst BILLBOARD_SIZE = 32;\nconst BILLBOARD_NEAR_DISTANCE = 2414016;\nconst BILLBOARD_NEAR_RATIO = 1.0;\nconst BILLBOARD_FAR_DISTANCE = 1.6093e7;\nconst BILLBOARD_FAR_RATIO = 0.1;\n\nconst gpxNamespaces = [null, undefined, \"http://www.topografix.com/GPX/1/1\"];\nconst namespaces = {\n  gpx: gpxNamespaces,\n};\n\nfunction readBlobAsText(blob) {\n  const deferred = defer();\n  const reader = new FileReader();\n  reader.addEventListener(\"load\", function () {\n    deferred.resolve(reader.result);\n  });\n  reader.addEventListener(\"error\", function () {\n    deferred.reject(reader.error);\n  });\n  reader.readAsText(blob);\n  return deferred.promise;\n}\n\nfunction getOrCreateEntity(node, entityCollection) {\n  let id = queryStringAttribute(node, \"id\");\n  id = defined(id) ? id : createGuid();\n  const entity = entityCollection.getOrCreateEntity(id);\n  return entity;\n}\n\nfunction readCoordinateFromNode(node) {\n  const longitude = queryNumericAttribute(node, \"lon\");\n  const latitude = queryNumericAttribute(node, \"lat\");\n  const elevation = queryNumericValue(node, \"ele\", namespaces.gpx);\n  return Cartesian3.fromDegrees(longitude, latitude, elevation);\n}\n\nfunction queryNumericAttribute(node, attributeName) {\n  if (!defined(node)) {\n    return undefined;\n  }\n\n  const value = node.getAttribute(attributeName);\n  if (value !== null) {\n    const result = parseFloat(value);\n    return !isNaN(result) ? result : undefined;\n  }\n  return undefined;\n}\n\nfunction queryStringAttribute(node, attributeName) {\n  if (!defined(node)) {\n    return undefined;\n  }\n  const value = node.getAttribute(attributeName);\n  return value !== null ? value : undefined;\n}\n\nfunction queryFirstNode(node, tagName, namespace) {\n  if (!defined(node)) {\n    return undefined;\n  }\n  const childNodes = node.childNodes;\n  const length = childNodes.length;\n  for (let q = 0; q < length; q++) {\n    const child = childNodes[q];\n    if (\n      child.localName === tagName &&\n      namespace.indexOf(child.namespaceURI) !== -1\n    ) {\n      return child;\n    }\n  }\n  return undefined;\n}\n\nfunction queryNodes(node, tagName, namespace) {\n  if (!defined(node)) {\n    return undefined;\n  }\n  const result = [];\n  const childNodes = node.getElementsByTagName(tagName);\n  const length = childNodes.length;\n  for (let q = 0; q < length; q++) {\n    const child = childNodes[q];\n    if (\n      child.localName === tagName &&\n      namespace.indexOf(child.namespaceURI) !== -1\n    ) {\n      result.push(child);\n    }\n  }\n  return result;\n}\n\nfunction queryNumericValue(node, tagName, namespace) {\n  const resultNode = queryFirstNode(node, tagName, namespace);\n  if (defined(resultNode)) {\n    const result = parseFloat(resultNode.textContent);\n    return !isNaN(result) ? result : undefined;\n  }\n  return undefined;\n}\n\nfunction queryStringValue(node, tagName, namespace) {\n  const result = queryFirstNode(node, tagName, namespace);\n  if (defined(result)) {\n    return result.textContent.trim();\n  }\n  return undefined;\n}\n\nfunction createDefaultBillboard(image) {\n  const billboard = new BillboardGraphics();\n  billboard.width = BILLBOARD_SIZE;\n  billboard.height = BILLBOARD_SIZE;\n  billboard.scaleByDistance = new NearFarScalar(\n    BILLBOARD_NEAR_DISTANCE,\n    BILLBOARD_NEAR_RATIO,\n    BILLBOARD_FAR_DISTANCE,\n    BILLBOARD_FAR_RATIO\n  );\n  billboard.pixelOffsetScaleByDistance = new NearFarScalar(\n    BILLBOARD_NEAR_DISTANCE,\n    BILLBOARD_NEAR_RATIO,\n    BILLBOARD_FAR_DISTANCE,\n    BILLBOARD_FAR_RATIO\n  );\n  billboard.verticalOrigin = new ConstantProperty(VerticalOrigin.BOTTOM);\n  billboard.image = image;\n  return billboard;\n}\n\nfunction createDefaultLabel() {\n  const label = new LabelGraphics();\n  label.translucencyByDistance = new NearFarScalar(3000000, 1.0, 5000000, 0.0);\n  label.pixelOffset = new Cartesian2(17, 0);\n  label.horizontalOrigin = HorizontalOrigin.LEFT;\n  label.font = \"16px sans-serif\";\n  label.style = LabelStyle.FILL_AND_OUTLINE;\n  return label;\n}\n\nfunction createDefaultPolyline(color) {\n  const polyline = new PolylineGraphics();\n  polyline.width = 4;\n  polyline.material = new PolylineOutlineMaterialProperty();\n  polyline.material.color = defined(color) ? color : Color.RED;\n  polyline.material.outlineWidth = 2;\n  polyline.material.outlineColor = Color.BLACK;\n  return polyline;\n}\n\n// This is a list of the Optional Description Information:\n//  <cmt> GPS comment of the waypoint\n//  <desc> Descriptive description of the waypoint\n//  <src> Source of the waypoint data\n//  <type> Type (category) of waypoint\nconst descriptiveInfoTypes = {\n  time: {\n    text: \"Time\",\n    tag: \"time\",\n  },\n  comment: {\n    text: \"Comment\",\n    tag: \"cmt\",\n  },\n  description: {\n    text: \"Description\",\n    tag: \"desc\",\n  },\n  source: {\n    text: \"Source\",\n    tag: \"src\",\n  },\n  number: {\n    text: \"GPS track/route number\",\n    tag: \"number\",\n  },\n  type: {\n    text: \"Type\",\n    tag: \"type\",\n  },\n};\n\nlet scratchDiv;\nif (typeof document !== \"undefined\") {\n  scratchDiv = document.createElement(\"div\");\n}\nfunction processDescription(node, entity) {\n  let i;\n\n  let text = \"\";\n  const infoTypeNames = Object.keys(descriptiveInfoTypes);\n  const length = infoTypeNames.length;\n  for (i = 0; i < length; i++) {\n    const infoTypeName = infoTypeNames[i];\n    const infoType = descriptiveInfoTypes[infoTypeName];\n    infoType.value = defaultValue(\n      queryStringValue(node, infoType.tag, namespaces.gpx),\n      \"\"\n    );\n    if (defined(infoType.value) && infoType.value !== \"\") {\n      text = `${text}<p>${infoType.text}: ${infoType.value}</p>`;\n    }\n  }\n\n  if (!defined(text) || text === \"\") {\n    // No description\n    return;\n  }\n\n  // Turns non-explicit links into clickable links.\n  text = autolinker.link(text);\n\n  // Use a temporary div to manipulate the links\n  // so that they open in a new window.\n  scratchDiv.innerHTML = text;\n  const links = scratchDiv.querySelectorAll(\"a\");\n\n  for (i = 0; i < links.length; i++) {\n    links[i].setAttribute(\"target\", \"_blank\");\n  }\n\n  const background = Color.WHITE;\n  const foreground = Color.BLACK;\n  let tmp = '<div class=\"cesium-infoBox-description-lighter\" style=\"';\n  tmp += \"overflow:auto;\";\n  tmp += \"word-wrap:break-word;\";\n  tmp += `background-color:${background.toCssColorString()};`;\n  tmp += `color:${foreground.toCssColorString()};`;\n  tmp += '\">';\n  tmp += `${scratchDiv.innerHTML}</div>`;\n  scratchDiv.innerHTML = \"\";\n\n  // return the final HTML as the description.\n  return tmp;\n}\n\nfunction processWpt(dataSource, geometryNode, entityCollection, options) {\n  const position = readCoordinateFromNode(geometryNode);\n\n  const entity = getOrCreateEntity(geometryNode, entityCollection);\n  entity.position = position;\n\n  // Get billboard image\n  const image = defined(options.waypointImage)\n    ? options.waypointImage\n    : dataSource._pinBuilder.fromMakiIconId(\n        \"marker\",\n        Color.RED,\n        BILLBOARD_SIZE\n      );\n  entity.billboard = createDefaultBillboard(image);\n\n  const name = queryStringValue(geometryNode, \"name\", namespaces.gpx);\n  entity.name = name;\n  entity.label = createDefaultLabel();\n  entity.label.text = name;\n  entity.description = processDescription(geometryNode, entity);\n\n  if (options.clampToGround) {\n    entity.billboard.heightReference = HeightReference.CLAMP_TO_GROUND;\n    entity.label.heightReference = HeightReference.CLAMP_TO_GROUND;\n  }\n}\n\n// rte represents route - an ordered list of waypoints representing a series of turn points leading to a destination\nfunction processRte(dataSource, geometryNode, entityCollection, options) {\n  const entity = getOrCreateEntity(geometryNode, entityCollection);\n  entity.description = processDescription(geometryNode, entity);\n\n  // a list of waypoint\n  const routePoints = queryNodes(geometryNode, \"rtept\", namespaces.gpx);\n  const coordinateTuples = new Array(routePoints.length);\n  for (let i = 0; i < routePoints.length; i++) {\n    processWpt(dataSource, routePoints[i], entityCollection, options);\n    coordinateTuples[i] = readCoordinateFromNode(routePoints[i]);\n  }\n  entity.polyline = createDefaultPolyline(options.routeColor);\n  if (options.clampToGround) {\n    entity.polyline.clampToGround = true;\n  }\n  entity.polyline.positions = coordinateTuples;\n}\n\n// trk represents a track - an ordered list of points describing a path.\nfunction processTrk(dataSource, geometryNode, entityCollection, options) {\n  const entity = getOrCreateEntity(geometryNode, entityCollection);\n  entity.description = processDescription(geometryNode, entity);\n\n  const trackSegs = queryNodes(geometryNode, \"trkseg\", namespaces.gpx);\n  let positions = [];\n  let times = [];\n  let trackSegInfo;\n  let isTimeDynamic = true;\n  const property = new SampledPositionProperty();\n  for (let i = 0; i < trackSegs.length; i++) {\n    trackSegInfo = processTrkSeg(trackSegs[i]);\n    positions = positions.concat(trackSegInfo.positions);\n    if (trackSegInfo.times.length > 0) {\n      times = times.concat(trackSegInfo.times);\n      property.addSamples(times, positions);\n      // if one track segment is non dynamic the whole track must also be\n      isTimeDynamic = isTimeDynamic && true;\n    } else {\n      isTimeDynamic = false;\n    }\n  }\n  if (isTimeDynamic) {\n    // Assign billboard image\n    const image = defined(options.waypointImage)\n      ? options.waypointImage\n      : dataSource._pinBuilder.fromMakiIconId(\n          \"marker\",\n          Color.RED,\n          BILLBOARD_SIZE\n        );\n    entity.billboard = createDefaultBillboard(image);\n    entity.position = property;\n    if (options.clampToGround) {\n      entity.billboard.heightReference = HeightReference.CLAMP_TO_GROUND;\n    }\n    entity.availability = new TimeIntervalCollection();\n    entity.availability.addInterval(\n      new TimeInterval({\n        start: times[0],\n        stop: times[times.length - 1],\n      })\n    );\n  }\n  entity.polyline = createDefaultPolyline(options.trackColor);\n  entity.polyline.positions = positions;\n  if (options.clampToGround) {\n    entity.polyline.clampToGround = true;\n  }\n}\n\nfunction processTrkSeg(node) {\n  const result = {\n    positions: [],\n    times: [],\n  };\n  const trackPoints = queryNodes(node, \"trkpt\", namespaces.gpx);\n  let time;\n  for (let i = 0; i < trackPoints.length; i++) {\n    const position = readCoordinateFromNode(trackPoints[i]);\n    result.positions.push(position);\n\n    time = queryStringValue(trackPoints[i], \"time\", namespaces.gpx);\n    if (defined(time)) {\n      result.times.push(JulianDate.fromIso8601(time));\n    }\n  }\n  return result;\n}\n\n// Processes a metadataType node and returns a metadata object\n// {@link http://www.topografix.com/gpx/1/1/#type_metadataType|GPX Schema}\nfunction processMetadata(node) {\n  const metadataNode = queryFirstNode(node, \"metadata\", namespaces.gpx);\n  if (defined(metadataNode)) {\n    const metadata = {\n      name: queryStringValue(metadataNode, \"name\", namespaces.gpx),\n      desc: queryStringValue(metadataNode, \"desc\", namespaces.gpx),\n      author: getPerson(metadataNode),\n      copyright: getCopyright(metadataNode),\n      link: getLink(metadataNode),\n      time: queryStringValue(metadataNode, \"time\", namespaces.gpx),\n      keywords: queryStringValue(metadataNode, \"keywords\", namespaces.gpx),\n      bounds: getBounds(metadataNode),\n    };\n    if (\n      defined(metadata.name) ||\n      defined(metadata.desc) ||\n      defined(metadata.author) ||\n      defined(metadata.copyright) ||\n      defined(metadata.link) ||\n      defined(metadata.time) ||\n      defined(metadata.keywords) ||\n      defined(metadata.bounds)\n    ) {\n      return metadata;\n    }\n  }\n  return undefined;\n}\n\n// Receives a XML node and returns a personType object, refer to\n// {@link http://www.topografix.com/gpx/1/1/#type_personType|GPX Schema}\nfunction getPerson(node) {\n  const personNode = queryFirstNode(node, \"author\", namespaces.gpx);\n  if (defined(personNode)) {\n    const person = {\n      name: queryStringValue(personNode, \"name\", namespaces.gpx),\n      email: getEmail(personNode),\n      link: getLink(personNode),\n    };\n    if (defined(person.name) || defined(person.email) || defined(person.link)) {\n      return person;\n    }\n  }\n  return undefined;\n}\n\n// Receives a XML node and returns an email address (from emailType), refer to\n// {@link http://www.topografix.com/gpx/1/1/#type_emailType|GPX Schema}\nfunction getEmail(node) {\n  const emailNode = queryFirstNode(node, \"email\", namespaces.gpx);\n  if (defined(emailNode)) {\n    const id = queryStringValue(emailNode, \"id\", namespaces.gpx);\n    const domain = queryStringValue(emailNode, \"domain\", namespaces.gpx);\n    return `${id}@${domain}`;\n  }\n  return undefined;\n}\n\n// Receives a XML node and returns a linkType object, refer to\n// {@link http://www.topografix.com/gpx/1/1/#type_linkType|GPX Schema}\nfunction getLink(node) {\n  const linkNode = queryFirstNode(node, \"link\", namespaces.gpx);\n  if (defined(linkNode)) {\n    const link = {\n      href: queryStringAttribute(linkNode, \"href\"),\n      text: queryStringValue(linkNode, \"text\", namespaces.gpx),\n      mimeType: queryStringValue(linkNode, \"type\", namespaces.gpx),\n    };\n    if (defined(link.href) || defined(link.text) || defined(link.mimeType)) {\n      return link;\n    }\n  }\n  return undefined;\n}\n\n// Receives a XML node and returns a copyrightType object, refer to\n// {@link http://www.topografix.com/gpx/1/1/#type_copyrightType|GPX Schema}\nfunction getCopyright(node) {\n  const copyrightNode = queryFirstNode(node, \"copyright\", namespaces.gpx);\n  if (defined(copyrightNode)) {\n    const copyright = {\n      author: queryStringAttribute(copyrightNode, \"author\"),\n      year: queryStringValue(copyrightNode, \"year\", namespaces.gpx),\n      license: queryStringValue(copyrightNode, \"license\", namespaces.gpx),\n    };\n    if (\n      defined(copyright.author) ||\n      defined(copyright.year) ||\n      defined(copyright.license)\n    ) {\n      return copyright;\n    }\n  }\n  return undefined;\n}\n\n// Receives a XML node and returns a boundsType object, refer to\n// {@link http://www.topografix.com/gpx/1/1/#type_boundsType|GPX Schema}\nfunction getBounds(node) {\n  const boundsNode = queryFirstNode(node, \"bounds\", namespaces.gpx);\n  if (defined(boundsNode)) {\n    const bounds = {\n      minLat: queryNumericValue(boundsNode, \"minlat\", namespaces.gpx),\n      maxLat: queryNumericValue(boundsNode, \"maxlat\", namespaces.gpx),\n      minLon: queryNumericValue(boundsNode, \"minlon\", namespaces.gpx),\n      maxLon: queryNumericValue(boundsNode, \"maxlon\", namespaces.gpx),\n    };\n    if (\n      defined(bounds.minLat) ||\n      defined(bounds.maxLat) ||\n      defined(bounds.minLon) ||\n      defined(bounds.maxLon)\n    ) {\n      return bounds;\n    }\n  }\n  return undefined;\n}\n\nconst complexTypes = {\n  wpt: processWpt,\n  rte: processRte,\n  trk: processTrk,\n};\n\nfunction processGpx(dataSource, node, entityCollection, options) {\n  const complexTypeNames = Object.keys(complexTypes);\n  const complexTypeNamesLength = complexTypeNames.length;\n\n  for (let i = 0; i < complexTypeNamesLength; i++) {\n    const typeName = complexTypeNames[i];\n    const processComplexTypeNode = complexTypes[typeName];\n\n    const childNodes = node.childNodes;\n    const length = childNodes.length;\n    for (let q = 0; q < length; q++) {\n      const child = childNodes[q];\n      if (\n        child.localName === typeName &&\n        namespaces.gpx.indexOf(child.namespaceURI) !== -1\n      ) {\n        processComplexTypeNode(dataSource, child, entityCollection, options);\n      }\n    }\n  }\n}\n\nfunction loadGpx(dataSource, gpx, options) {\n  const entityCollection = dataSource._entityCollection;\n\n  entityCollection.removeAll();\n\n  const element = gpx.documentElement;\n  const version = queryStringAttribute(element, \"version\");\n  const creator = queryStringAttribute(element, \"creator\");\n\n  let name;\n  const metadata = processMetadata(element);\n  if (defined(metadata)) {\n    name = metadata.name;\n  }\n\n  if (element.localName === \"gpx\") {\n    processGpx(dataSource, element, entityCollection, options);\n  } else {\n    console.log(`GPX - Unsupported node: ${element.localName}`);\n  }\n\n  let clock;\n  const availability = entityCollection.computeAvailability();\n\n  let start = availability.start;\n  let stop = availability.stop;\n  const isMinStart = JulianDate.equals(start, Iso8601.MINIMUM_VALUE);\n  const isMaxStop = JulianDate.equals(stop, Iso8601.MAXIMUM_VALUE);\n  if (!isMinStart || !isMaxStop) {\n    let date;\n\n    // If start is min time just start at midnight this morning, local time\n    if (isMinStart) {\n      date = new Date();\n      date.setHours(0, 0, 0, 0);\n      start = JulianDate.fromDate(date);\n    }\n\n    // If stop is max value just stop at midnight tonight, local time\n    if (isMaxStop) {\n      date = new Date();\n      date.setHours(24, 0, 0, 0);\n      stop = JulianDate.fromDate(date);\n    }\n\n    clock = new DataSourceClock();\n    clock.startTime = start;\n    clock.stopTime = stop;\n    clock.currentTime = JulianDate.clone(start);\n    clock.clockRange = ClockRange.LOOP_STOP;\n    clock.clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n    clock.multiplier = Math.round(\n      Math.min(\n        Math.max(JulianDate.secondsDifference(stop, start) / 60, 1),\n        3.15569e7\n      )\n    );\n  }\n  let changed = false;\n  if (dataSource._name !== name) {\n    dataSource._name = name;\n    changed = true;\n  }\n\n  if (dataSource._creator !== creator) {\n    dataSource._creator = creator;\n    changed = true;\n  }\n\n  if (metadataChanged(dataSource._metadata, metadata)) {\n    dataSource._metadata = metadata;\n    changed = true;\n  }\n\n  if (dataSource._version !== version) {\n    dataSource._version = version;\n    changed = true;\n  }\n\n  if (clock !== dataSource._clock) {\n    changed = true;\n    dataSource._clock = clock;\n  }\n\n  if (changed) {\n    dataSource._changed.raiseEvent(dataSource);\n  }\n\n  DataSource.setLoading(dataSource, false);\n  return dataSource;\n}\n\nfunction metadataChanged(old, current) {\n  if (!defined(old) && !defined(current)) {\n    return false;\n  } else if (defined(old) && defined(current)) {\n    if (\n      old.name !== current.name ||\n      old.dec !== current.desc ||\n      old.src !== current.src ||\n      old.author !== current.author ||\n      old.copyright !== current.copyright ||\n      old.link !== current.link ||\n      old.time !== current.time ||\n      old.bounds !== current.bounds\n    ) {\n      return true;\n    }\n    return false;\n  }\n  return true;\n}\n\nfunction load(dataSource, entityCollection, data, options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  let promise = data;\n  if (typeof data === \"string\" || data instanceof Resource) {\n    data = Resource.createIfNeeded(data);\n    promise = data.fetchBlob();\n\n    // Add resource credits to our list of credits to display\n    const resourceCredits = dataSource._resourceCredits;\n    const credits = data.credits;\n    if (defined(credits)) {\n      const length = credits.length;\n      for (let i = 0; i < length; i++) {\n        resourceCredits.push(credits[i]);\n      }\n    }\n  }\n\n  return Promise.resolve(promise)\n    .then(function (dataToLoad) {\n      if (dataToLoad instanceof Blob) {\n        return readBlobAsText(dataToLoad).then(function (text) {\n          // There's no official way to validate if a parse was successful.\n          // The following check detects the error on various browsers.\n          // IE raises an exception\n          let gpx;\n          let error;\n          try {\n            gpx = parser.parseFromString(text, \"application/xml\");\n          } catch (e) {\n            error = e.toString();\n          }\n\n          // The parse succeeds on Chrome and Firefox, but the error\n          // handling is different in each.\n          if (\n            defined(error) ||\n            gpx.body ||\n            gpx.documentElement.tagName === \"parsererror\"\n          ) {\n            // Firefox has error information as the firstChild nodeValue.\n            let msg = defined(error)\n              ? error\n              : gpx.documentElement.firstChild.nodeValue;\n\n            // Chrome has it in the body text.\n            if (!msg) {\n              msg = gpx.body.innerText;\n            }\n\n            // Return the error\n            throw new RuntimeError(msg);\n          }\n          return loadGpx(dataSource, gpx, options);\n        });\n      }\n      return loadGpx(dataSource, dataToLoad, options);\n    })\n    .catch(function (error) {\n      dataSource._error.raiseEvent(dataSource, error);\n      console.log(error);\n      return Promise.reject(error);\n    });\n}\n\n/**\n * A {@link DataSource} which processes the GPS Exchange Format (GPX).\n *\n * @alias GpxDataSource\n * @constructor\n *\n * @see {@link http://www.topografix.com/gpx.asp|Topografix GPX Standard}\n * @see {@link http://www.topografix.com/gpx/1/1/|Topografix GPX Documentation}\n *\n * @demo {@link http://sandcastle.cesium.com/index.html?src=GPX.html}\n *\n * @example\n * const viewer = new Cesium.Viewer('cesiumContainer');\n * viewer.dataSources.add(Cesium.GpxDataSource.load('../../SampleData/track.gpx'));\n */\nfunction GpxDataSource() {\n  this._changed = new Event();\n  this._error = new Event();\n  this._loading = new Event();\n  this._clock = undefined;\n  this._entityCollection = new EntityCollection();\n  this._entityCluster = new EntityCluster();\n  this._name = undefined;\n  this._version = undefined;\n  this._creator = undefined;\n  this._metadata = undefined;\n  this._isLoading = false;\n  this._pinBuilder = new PinBuilder();\n}\n\n/**\n * Creates a Promise to a new instance loaded with the provided GPX data.\n *\n * @param {String|Document|Blob} data A url, parsed GPX document, or Blob containing binary GPX data.\n * @param {Object} [options] An object with the following properties:\n * @param {Boolean} [options.clampToGround] True if the symbols should be rendered at the same height as the terrain\n * @param {String} [options.waypointImage] Image to use for waypoint billboards.\n * @param {String} [options.trackImage] Image to use for track billboards.\n * @param {String} [options.trackColor] Color to use for track lines.\n * @param {String} [options.routeColor] Color to use for route lines.\n * @returns {Promise.<GpxDataSource>} A promise that will resolve to a new GpxDataSource instance once the gpx is loaded.\n */\nGpxDataSource.load = function (data, options) {\n  return new GpxDataSource().load(data, options);\n};\n\nObject.defineProperties(GpxDataSource.prototype, {\n  /**\n   * Gets a human-readable name for this instance.\n   * This will be automatically be set to the GPX document name on load.\n   * @memberof GpxDataSource.prototype\n   * @type {String}\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n  /**\n   * Gets the version of the GPX Schema in use.\n   * @memberof GpxDataSource.prototype\n   * @type {String}\n   */\n  version: {\n    get: function () {\n      return this._version;\n    },\n  },\n  /**\n   * Gets the creator of the GPX document.\n   * @memberof GpxDataSource.prototype\n   * @type {String}\n   */\n  creator: {\n    get: function () {\n      return this._creator;\n    },\n  },\n  /**\n   * Gets an object containing metadata about the GPX file.\n   * @memberof GpxDataSource.prototype\n   * @type {Object}\n   */\n  metadata: {\n    get: function () {\n      return this._metadata;\n    },\n  },\n  /**\n   * Gets the clock settings defined by the loaded GPX. This represents the total\n   * availability interval for all time-dynamic data. If the GPX does not contain\n   * time-dynamic data, this value is undefined.\n   * @memberof GpxDataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    get: function () {\n      return this._clock;\n    },\n  },\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof GpxDataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: function () {\n      return this._entityCollection;\n    },\n  },\n  /**\n   * Gets a value indicating if the data source is currently loading data.\n   * @memberof GpxDataSource.prototype\n   * @type {Boolean}\n   */\n  isLoading: {\n    get: function () {\n      return this._isLoading;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof GpxDataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: function () {\n      return this._changed;\n    },\n  },\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof GpxDataSource.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: function () {\n      return this._error;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the data source either starts or stops loading.\n   * @memberof GpxDataSource.prototype\n   * @type {Event}\n   */\n  loadingEvent: {\n    get: function () {\n      return this._loading;\n    },\n  },\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof GpxDataSource.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._entityCollection.show;\n    },\n    set: function (value) {\n      this._entityCollection.show = value;\n    },\n  },\n\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof GpxDataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: function () {\n      return this._entityCluster;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value must be defined.\");\n      }\n      //>>includeEnd('debug');\n      this._entityCluster = value;\n    },\n  },\n});\n\n/**\n * Updates the data source to the provided time.  This function is optional and\n * is not required to be implemented.  It is provided for data sources which\n * retrieve data based on the current animation time or scene state.\n * If implemented, update will be called by {@link DataSourceDisplay} once a frame.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {Boolean} True if this data source is ready to be displayed at the provided time, false otherwise.\n */\nGpxDataSource.prototype.update = function (time) {\n  return true;\n};\n\n/**\n * Asynchronously loads the provided GPX data, replacing any existing data.\n *\n * @param {String|Document|Blob} data A url, parsed GPX document, or Blob containing binary GPX data or a parsed GPX document.\n * @param {Object} [options] An object with the following properties:\n * @param {Boolean} [options.clampToGround] True if the symbols should be rendered at the same height as the terrain\n * @param {String} [options.waypointImage] Image to use for waypoint billboards.\n * @param {String} [options.trackImage] Image to use for track billboards.\n * @param {String} [options.trackColor] Color to use for track lines.\n * @param {String} [options.routeColor] Color to use for route lines.\n * @returns {Promise.<GpxDataSource>} A promise that will resolve to this instances once the GPX is loaded.\n */\nGpxDataSource.prototype.load = function (data, options) {\n  if (!defined(data)) {\n    throw new DeveloperError(\"data is required.\");\n  }\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  DataSource.setLoading(this, true);\n  const oldName = this._name;\n  const that = this;\n  return load(this, this._entityCollection, data, options)\n    .then(function () {\n      let clock;\n\n      const availability = that._entityCollection.computeAvailability();\n\n      let start = availability.start;\n      let stop = availability.stop;\n      const isMinStart = JulianDate.equals(start, Iso8601.MINIMUM_VALUE);\n      const isMaxStop = JulianDate.equals(stop, Iso8601.MAXIMUM_VALUE);\n      if (!isMinStart || !isMaxStop) {\n        let date;\n\n        // If start is min time just start at midnight this morning, local time\n        if (isMinStart) {\n          date = new Date();\n          date.setHours(0, 0, 0, 0);\n          start = JulianDate.fromDate(date);\n        }\n\n        // If stop is max value just stop at midnight tonight, local time\n        if (isMaxStop) {\n          date = new Date();\n          date.setHours(24, 0, 0, 0);\n          stop = JulianDate.fromDate(date);\n        }\n\n        clock = new DataSourceClock();\n        clock.startTime = start;\n        clock.stopTime = stop;\n        clock.currentTime = JulianDate.clone(start);\n        clock.clockRange = ClockRange.LOOP_STOP;\n        clock.clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n        clock.multiplier = Math.round(\n          Math.min(\n            Math.max(JulianDate.secondsDifference(stop, start) / 60, 1),\n            3.15569e7\n          )\n        );\n      }\n\n      let changed = false;\n      if (clock !== that._clock) {\n        that._clock = clock;\n        changed = true;\n      }\n\n      if (oldName !== that._name) {\n        changed = true;\n      }\n\n      if (changed) {\n        that._changed.raiseEvent(that);\n      }\n\n      DataSource.setLoading(that, false);\n\n      return that;\n    })\n    .catch(function (error) {\n      DataSource.setLoading(that, false);\n      that._error.raiseEvent(that, error);\n      console.log(error);\n      return Promise.reject(error);\n    });\n};\n\nexport default GpxDataSource;\n","import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nconst defaultColor = Color.WHITE;\nconst defaultCellAlpha = 0.1;\nconst defaultLineCount = new Cartesian2(8, 8);\nconst defaultLineOffset = new Cartesian2(0, 0);\nconst defaultLineThickness = new Cartesian2(1, 1);\n\n/**\n * A {@link MaterialProperty} that maps to grid {@link Material} uniforms.\n * @alias GridMaterialProperty\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property|Color} [options.color=Color.WHITE] A Property specifying the grid {@link Color}.\n * @param {Property|Number} [options.cellAlpha=0.1] A numeric Property specifying cell alpha values.\n * @param {Property|Cartesian2} [options.lineCount=new Cartesian2(8, 8)] A {@link Cartesian2} Property specifying the number of grid lines along each axis.\n * @param {Property|Cartesian2} [options.lineThickness=new Cartesian2(1.0, 1.0)] A {@link Cartesian2} Property specifying the thickness of grid lines along each axis.\n * @param {Property|Cartesian2} [options.lineOffset=new Cartesian2(0.0, 0.0)] A {@link Cartesian2} Property specifying starting offset of grid lines along each axis.\n *\n * @constructor\n */\nfunction GridMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._cellAlpha = undefined;\n  this._cellAlphaSubscription = undefined;\n  this._lineCount = undefined;\n  this._lineCountSubscription = undefined;\n  this._lineThickness = undefined;\n  this._lineThicknessSubscription = undefined;\n  this._lineOffset = undefined;\n  this._lineOffsetSubscription = undefined;\n\n  this.color = options.color;\n  this.cellAlpha = options.cellAlpha;\n  this.lineCount = options.lineCount;\n  this.lineThickness = options.lineThickness;\n  this.lineOffset = options.lineOffset;\n}\n\nObject.defineProperties(GridMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof GridMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._color) &&\n        Property.isConstant(this._cellAlpha) &&\n        Property.isConstant(this._lineCount) &&\n        Property.isConstant(this._lineThickness) &&\n        Property.isConstant(this._lineOffset)\n      );\n    },\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof GridMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the Property specifying the grid {@link Color}.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the numeric Property specifying cell alpha values.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default 0.1\n   */\n  cellAlpha: createPropertyDescriptor(\"cellAlpha\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the number of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(8.0, 8.0)\n   */\n  lineCount: createPropertyDescriptor(\"lineCount\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the thickness of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(1.0, 1.0)\n   */\n  lineThickness: createPropertyDescriptor(\"lineThickness\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the starting offset of grid lines along each axis.\n   * @memberof GridMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(0.0, 0.0)\n   */\n  lineOffset: createPropertyDescriptor(\"lineOffset\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nGridMaterialProperty.prototype.getType = function (time) {\n  return \"Grid\";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nGridMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n  result.color = Property.getValueOrClonedDefault(\n    this._color,\n    time,\n    defaultColor,\n    result.color\n  );\n  result.cellAlpha = Property.getValueOrDefault(\n    this._cellAlpha,\n    time,\n    defaultCellAlpha\n  );\n  result.lineCount = Property.getValueOrClonedDefault(\n    this._lineCount,\n    time,\n    defaultLineCount,\n    result.lineCount\n  );\n  result.lineThickness = Property.getValueOrClonedDefault(\n    this._lineThickness,\n    time,\n    defaultLineThickness,\n    result.lineThickness\n  );\n  result.lineOffset = Property.getValueOrClonedDefault(\n    this._lineOffset,\n    time,\n    defaultLineOffset,\n    result.lineOffset\n  );\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nGridMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof GridMaterialProperty && //\n      Property.equals(this._color, other._color) && //\n      Property.equals(this._cellAlpha, other._cellAlpha) && //\n      Property.equals(this._lineCount, other._lineCount) && //\n      Property.equals(this._lineThickness, other._lineThickness) && //\n      Property.equals(this._lineOffset, other._lineOffset))\n  );\n};\nexport default GridMaterialProperty;\n","import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport GeometryOffsetAttribute from \"../Core/GeometryOffsetAttribute.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\nimport GroundPrimitive from \"../Scene/GroundPrimitive.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport CallbackProperty from \"./CallbackProperty.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport TerrainOffsetProperty from \"./TerrainOffsetProperty.js\";\n\nconst defaultZIndex = new ConstantProperty(0);\n\n/**\n * An abstract class for updating ground geometry entities.\n * @constructor\n * @alias GroundGeometryUpdater\n * @param {Object} options An object with the following properties:\n * @param {Entity} options.entity The entity containing the geometry to be visualized.\n * @param {Scene} options.scene The scene where visualization is taking place.\n * @param {Object} options.geometryOptions Options for the geometry\n * @param {String} options.geometryPropertyName The geometry property name\n * @param {String[]} options.observedPropertyNames The entity properties this geometry cares about\n */\nfunction GroundGeometryUpdater(options) {\n  GeometryUpdater.call(this, options);\n\n  this._zIndex = 0;\n  this._terrainOffsetProperty = undefined;\n}\n\nif (defined(Object.create)) {\n  GroundGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n  GroundGeometryUpdater.prototype.constructor = GroundGeometryUpdater;\n}\n\nObject.defineProperties(GroundGeometryUpdater.prototype, {\n  /**\n   * Gets the zindex\n   * @type {Number}\n   * @memberof GroundGeometryUpdater.prototype\n   * @readonly\n   */\n  zIndex: {\n    get: function () {\n      return this._zIndex;\n    },\n  },\n\n  /**\n   * Gets the terrain offset property\n   * @type {TerrainOffsetProperty}\n   * @memberof GroundGeometryUpdater.prototype\n   * @readonly\n   * @private\n   */\n  terrainOffsetProperty: {\n    get: function () {\n      return this._terrainOffsetProperty;\n    },\n  },\n});\n\nGroundGeometryUpdater.prototype._isOnTerrain = function (entity, geometry) {\n  return (\n    this._fillEnabled &&\n    !defined(geometry.height) &&\n    !defined(geometry.extrudedHeight) &&\n    GroundPrimitive.isSupported(this._scene)\n  );\n};\n\nGroundGeometryUpdater.prototype._getIsClosed = function (options) {\n  const height = options.height;\n  const extrudedHeight = options.extrudedHeight;\n  return height === 0 || (defined(extrudedHeight) && extrudedHeight !== height);\n};\n\nGroundGeometryUpdater.prototype._computeCenter =\n  DeveloperError.throwInstantiationError;\n\nGroundGeometryUpdater.prototype._onEntityPropertyChanged = function (\n  entity,\n  propertyName,\n  newValue,\n  oldValue\n) {\n  GeometryUpdater.prototype._onEntityPropertyChanged.call(\n    this,\n    entity,\n    propertyName,\n    newValue,\n    oldValue\n  );\n  if (this._observedPropertyNames.indexOf(propertyName) === -1) {\n    return;\n  }\n\n  const geometry = this._entity[this._geometryPropertyName];\n  if (!defined(geometry)) {\n    return;\n  }\n  if (\n    defined(geometry.zIndex) &&\n    (defined(geometry.height) || defined(geometry.extrudedHeight))\n  ) {\n    oneTimeWarning(oneTimeWarning.geometryZIndex);\n  }\n\n  this._zIndex = defaultValue(geometry.zIndex, defaultZIndex);\n\n  if (defined(this._terrainOffsetProperty)) {\n    this._terrainOffsetProperty.destroy();\n    this._terrainOffsetProperty = undefined;\n  }\n\n  const heightReferenceProperty = geometry.heightReference;\n  const extrudedHeightReferenceProperty = geometry.extrudedHeightReference;\n\n  if (\n    defined(heightReferenceProperty) ||\n    defined(extrudedHeightReferenceProperty)\n  ) {\n    const centerPosition = new CallbackProperty(\n      this._computeCenter.bind(this),\n      !this._dynamic\n    );\n    this._terrainOffsetProperty = new TerrainOffsetProperty(\n      this._scene,\n      centerPosition,\n      heightReferenceProperty,\n      extrudedHeightReferenceProperty\n    );\n  }\n};\n\n/**\n * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nGroundGeometryUpdater.prototype.destroy = function () {\n  if (defined(this._terrainOffsetProperty)) {\n    this._terrainOffsetProperty.destroy();\n    this._terrainOffsetProperty = undefined;\n  }\n\n  GeometryUpdater.prototype.destroy.call(this);\n};\n\n/**\n * @private\n */\nGroundGeometryUpdater.getGeometryHeight = function (height, heightReference) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"heightReference\", heightReference);\n  //>>includeEnd('debug');\n  if (!defined(height)) {\n    if (heightReference !== HeightReference.NONE) {\n      oneTimeWarning(oneTimeWarning.geometryHeightReference);\n    }\n    return;\n  }\n\n  if (heightReference !== HeightReference.CLAMP_TO_GROUND) {\n    return height;\n  }\n  return 0.0;\n};\n\n/**\n * @private\n */\nGroundGeometryUpdater.getGeometryExtrudedHeight = function (\n  extrudedHeight,\n  extrudedHeightReference\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"extrudedHeightReference\", extrudedHeightReference);\n  //>>includeEnd('debug');\n  if (!defined(extrudedHeight)) {\n    if (extrudedHeightReference !== HeightReference.NONE) {\n      oneTimeWarning(oneTimeWarning.geometryExtrudedHeightReference);\n    }\n    return;\n  }\n  if (extrudedHeightReference !== HeightReference.CLAMP_TO_GROUND) {\n    return extrudedHeight;\n  }\n\n  return GroundGeometryUpdater.CLAMP_TO_GROUND;\n};\n\n/**\n * @private\n */\nGroundGeometryUpdater.CLAMP_TO_GROUND = \"clamp\";\n\n/**\n * @private\n */\nGroundGeometryUpdater.computeGeometryOffsetAttribute = function (\n  height,\n  heightReference,\n  extrudedHeight,\n  extrudedHeightReference\n) {\n  if (!defined(height) || !defined(heightReference)) {\n    heightReference = HeightReference.NONE;\n  }\n  if (!defined(extrudedHeight) || !defined(extrudedHeightReference)) {\n    extrudedHeightReference = HeightReference.NONE;\n  }\n  let n = 0;\n  if (heightReference !== HeightReference.NONE) {\n    n++;\n  }\n  if (extrudedHeightReference === HeightReference.RELATIVE_TO_GROUND) {\n    n++;\n  }\n  if (n === 2) {\n    return GeometryOffsetAttribute.ALL;\n  }\n  if (n === 1) {\n    return GeometryOffsetAttribute.TOP;\n  }\n\n  return undefined;\n};\nexport default GroundGeometryUpdater;\n","import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nconst defaultRepeat = new Cartesian2(1, 1);\nconst defaultTransparent = false;\nconst defaultColor = Color.WHITE;\n\n/**\n * A {@link MaterialProperty} that maps to image {@link Material} uniforms.\n * @alias ImageMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property|String|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [options.image] A Property specifying the Image, URL, Canvas, or Video.\n * @param {Property|Cartesian2} [options.repeat=new Cartesian2(1.0, 1.0)] A {@link Cartesian2} Property specifying the number of times the image repeats in each direction.\n * @param {Property|Color} [options.color=Color.WHITE] The color applied to the image\n * @param {Property|Boolean} [options.transparent=false] Set to true when the image has transparency (for example, when a png has transparent sections)\n */\nfunction ImageMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._image = undefined;\n  this._imageSubscription = undefined;\n  this._repeat = undefined;\n  this._repeatSubscription = undefined;\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._transparent = undefined;\n  this._transparentSubscription = undefined;\n\n  this.image = options.image;\n  this.repeat = options.repeat;\n  this.color = options.color;\n  this.transparent = options.transparent;\n}\n\nObject.defineProperties(ImageMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof ImageMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._image) && Property.isConstant(this._repeat)\n      );\n    },\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof ImageMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the Property specifying Image, URL, Canvas, or Video to use.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  image: createPropertyDescriptor(\"image\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the number of times the image repeats in each direction.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(1, 1)\n   */\n  repeat: createPropertyDescriptor(\"repeat\"),\n\n  /**\n   * Gets or sets the Color Property specifying the desired color applied to the image.\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the Boolean Property specifying whether the image has transparency\n   * @memberof ImageMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  transparent: createPropertyDescriptor(\"transparent\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nImageMaterialProperty.prototype.getType = function (time) {\n  return \"Image\";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nImageMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n\n  result.image = Property.getValueOrUndefined(this._image, time);\n  result.repeat = Property.getValueOrClonedDefault(\n    this._repeat,\n    time,\n    defaultRepeat,\n    result.repeat\n  );\n  result.color = Property.getValueOrClonedDefault(\n    this._color,\n    time,\n    defaultColor,\n    result.color\n  );\n  if (Property.getValueOrDefault(this._transparent, time, defaultTransparent)) {\n    result.color.alpha = Math.min(0.99, result.color.alpha);\n  }\n\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nImageMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (other instanceof ImageMaterialProperty &&\n      Property.equals(this._image, other._image) &&\n      Property.equals(this._repeat, other._repeat) &&\n      Property.equals(this._color, other._color) &&\n      Property.equals(this._transparent, other._transparent))\n  );\n};\nexport default ImageMaterialProperty;\n","/**\n * Representation of <Camera> from KML\n * @alias KmlCamera\n * @constructor\n *\n * @param {Cartesian3} position camera position\n * @param {HeadingPitchRoll} headingPitchRoll camera orientation\n */\nfunction KmlCamera(position, headingPitchRoll) {\n  this.position = position;\n  this.headingPitchRoll = headingPitchRoll;\n}\nexport default KmlCamera;\n","import ArcType from \"../Core/ArcType.js\";\nimport AssociativeArray from \"../Core/AssociativeArray.js\";\nimport BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport buildModuleUrl from \"../Core/buildModuleUrl.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport ClockRange from \"../Core/ClockRange.js\";\nimport ClockStep from \"../Core/ClockStep.js\";\nimport clone from \"../Core/clone.js\";\nimport Color from \"../Core/Color.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defer from \"../Core/defer.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport Event from \"../Core/Event.js\";\nimport getExtensionFromUri from \"../Core/getExtensionFromUri.js\";\nimport getFilenameFromUri from \"../Core/getFilenameFromUri.js\";\nimport getTimestamp from \"../Core/getTimestamp.js\";\nimport HeadingPitchRange from \"../Core/HeadingPitchRange.js\";\nimport HeadingPitchRoll from \"../Core/HeadingPitchRoll.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport objectToQuery from \"../Core/objectToQuery.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\nimport PinBuilder from \"../Core/PinBuilder.js\";\nimport PolygonHierarchy from \"../Core/PolygonHierarchy.js\";\nimport queryToObject from \"../Core/queryToObject.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TimeInterval from \"../Core/TimeInterval.js\";\nimport TimeIntervalCollection from \"../Core/TimeIntervalCollection.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport HorizontalOrigin from \"../Scene/HorizontalOrigin.js\";\nimport LabelStyle from \"../Scene/LabelStyle.js\";\nimport SceneMode from \"../Scene/SceneMode.js\";\nimport Autolinker from \"../ThirdParty/Autolinker.js\";\nimport Uri from \"../ThirdParty/Uri.js\";\nimport zip from \"../ThirdParty/zip.js\";\nimport getElement from \"../Widgets/getElement.js\";\nimport BillboardGraphics from \"./BillboardGraphics.js\";\nimport CompositePositionProperty from \"./CompositePositionProperty.js\";\nimport DataSource from \"./DataSource.js\";\nimport DataSourceClock from \"./DataSourceClock.js\";\nimport Entity from \"./Entity.js\";\nimport EntityCluster from \"./EntityCluster.js\";\nimport EntityCollection from \"./EntityCollection.js\";\nimport KmlCamera from \"./KmlCamera.js\";\nimport KmlLookAt from \"./KmlLookAt.js\";\nimport KmlTour from \"./KmlTour.js\";\nimport KmlTourFlyTo from \"./KmlTourFlyTo.js\";\nimport KmlTourWait from \"./KmlTourWait.js\";\nimport LabelGraphics from \"./LabelGraphics.js\";\nimport PathGraphics from \"./PathGraphics.js\";\nimport PolygonGraphics from \"./PolygonGraphics.js\";\nimport PolylineGraphics from \"./PolylineGraphics.js\";\nimport PositionPropertyArray from \"./PositionPropertyArray.js\";\nimport RectangleGraphics from \"./RectangleGraphics.js\";\nimport ReferenceProperty from \"./ReferenceProperty.js\";\nimport SampledPositionProperty from \"./SampledPositionProperty.js\";\nimport ScaledPositionProperty from \"./ScaledPositionProperty.js\";\nimport TimeIntervalCollectionProperty from \"./TimeIntervalCollectionProperty.js\";\nimport WallGraphics from \"./WallGraphics.js\";\n\n//This is by no means an exhaustive list of MIME types.\n//The purpose of this list is to be able to accurately identify content embedded\n//in KMZ files. Eventually, we can make this configurable by the end user so they can add\n//there own content types if they have KMZ files that require it.\nconst MimeTypes = {\n  avi: \"video/x-msvideo\",\n  bmp: \"image/bmp\",\n  bz2: \"application/x-bzip2\",\n  chm: \"application/vnd.ms-htmlhelp\",\n  css: \"text/css\",\n  csv: \"text/csv\",\n  doc: \"application/msword\",\n  dvi: \"application/x-dvi\",\n  eps: \"application/postscript\",\n  flv: \"video/x-flv\",\n  gif: \"image/gif\",\n  gz: \"application/x-gzip\",\n  htm: \"text/html\",\n  html: \"text/html\",\n  ico: \"image/vnd.microsoft.icon\",\n  jnlp: \"application/x-java-jnlp-file\",\n  jpeg: \"image/jpeg\",\n  jpg: \"image/jpeg\",\n  m3u: \"audio/x-mpegurl\",\n  m4v: \"video/mp4\",\n  mathml: \"application/mathml+xml\",\n  mid: \"audio/midi\",\n  midi: \"audio/midi\",\n  mov: \"video/quicktime\",\n  mp3: \"audio/mpeg\",\n  mp4: \"video/mp4\",\n  mp4v: \"video/mp4\",\n  mpeg: \"video/mpeg\",\n  mpg: \"video/mpeg\",\n  odp: \"application/vnd.oasis.opendocument.presentation\",\n  ods: \"application/vnd.oasis.opendocument.spreadsheet\",\n  odt: \"application/vnd.oasis.opendocument.text\",\n  ogg: \"application/ogg\",\n  pdf: \"application/pdf\",\n  png: \"image/png\",\n  pps: \"application/vnd.ms-powerpoint\",\n  ppt: \"application/vnd.ms-powerpoint\",\n  ps: \"application/postscript\",\n  qt: \"video/quicktime\",\n  rdf: \"application/rdf+xml\",\n  rss: \"application/rss+xml\",\n  rtf: \"application/rtf\",\n  svg: \"image/svg+xml\",\n  swf: \"application/x-shockwave-flash\",\n  text: \"text/plain\",\n  tif: \"image/tiff\",\n  tiff: \"image/tiff\",\n  txt: \"text/plain\",\n  wav: \"audio/x-wav\",\n  wma: \"audio/x-ms-wma\",\n  wmv: \"video/x-ms-wmv\",\n  xml: \"application/xml\",\n  zip: \"application/zip\",\n\n  detectFromFilename: function (filename) {\n    let ext = filename.toLowerCase();\n    ext = getExtensionFromUri(ext);\n    return MimeTypes[ext];\n  },\n};\n\nlet parser;\nif (typeof DOMParser !== \"undefined\") {\n  parser = new DOMParser();\n}\n\nconst autolinker = new Autolinker({\n  stripPrefix: false,\n  email: false,\n  replaceFn: function (match) {\n    if (!match.protocolUrlMatch) {\n      //Prevent matching of non-explicit urls.\n      //i.e. foo.id won't match but http://foo.id will\n      return false;\n    }\n  },\n});\n\nconst BILLBOARD_SIZE = 32;\n\nconst BILLBOARD_NEAR_DISTANCE = 2414016;\nconst BILLBOARD_NEAR_RATIO = 1.0;\nconst BILLBOARD_FAR_DISTANCE = 1.6093e7;\nconst BILLBOARD_FAR_RATIO = 0.1;\n\nconst kmlNamespaces = [\n  null,\n  undefined,\n  \"http://www.opengis.net/kml/2.2\",\n  \"http://earth.google.com/kml/2.2\",\n  \"http://earth.google.com/kml/2.1\",\n  \"http://earth.google.com/kml/2.0\",\n];\nconst gxNamespaces = [\"http://www.google.com/kml/ext/2.2\"];\nconst atomNamespaces = [\"http://www.w3.org/2005/Atom\"];\nconst namespaces = {\n  kml: kmlNamespaces,\n  gx: gxNamespaces,\n  atom: atomNamespaces,\n  kmlgx: kmlNamespaces.concat(gxNamespaces),\n};\n\n// Ensure Specs/Data/KML/unsupported.kml is kept up to date with these supported types\nconst featureTypes = {\n  Document: processDocument,\n  Folder: processFolder,\n  Placemark: processPlacemark,\n  NetworkLink: processNetworkLink,\n  GroundOverlay: processGroundOverlay,\n  PhotoOverlay: processUnsupportedFeature,\n  ScreenOverlay: processScreenOverlay,\n  Tour: processTour,\n};\n\nfunction DeferredLoading(dataSource) {\n  this._dataSource = dataSource;\n  this._deferred = defer();\n  this._stack = [];\n  this._promises = [];\n  this._timeoutSet = false;\n  this._used = false;\n\n  this._started = 0;\n  this._timeThreshold = 1000; // Initial load is 1 second\n}\n\nObject.defineProperties(DeferredLoading.prototype, {\n  dataSource: {\n    get: function () {\n      return this._dataSource;\n    },\n  },\n});\n\nDeferredLoading.prototype.addNodes = function (nodes, processingData) {\n  this._stack.push({\n    nodes: nodes,\n    index: 0,\n    processingData: processingData,\n  });\n  this._used = true;\n};\n\nDeferredLoading.prototype.addPromise = function (promise) {\n  this._promises.push(promise);\n};\n\nDeferredLoading.prototype.wait = function () {\n  // Case where we had a non-document/folder as the root\n  const deferred = this._deferred;\n  if (!this._used) {\n    deferred.resolve();\n  }\n\n  return Promise.all([deferred.promise, Promise.all(this._promises)]);\n};\n\nDeferredLoading.prototype.process = function () {\n  const isFirstCall = this._stack.length === 1;\n  if (isFirstCall) {\n    this._started = KmlDataSource._getTimestamp();\n  }\n\n  return this._process(isFirstCall);\n};\n\nDeferredLoading.prototype._giveUpTime = function () {\n  if (this._timeoutSet) {\n    // Timeout was already set so just return\n    return;\n  }\n\n  this._timeoutSet = true;\n  this._timeThreshold = 50; // After the first load lower threshold to 0.5 seconds\n  const that = this;\n  setTimeout(function () {\n    that._timeoutSet = false;\n    that._started = KmlDataSource._getTimestamp();\n    that._process(true);\n  }, 0);\n};\n\nDeferredLoading.prototype._nextNode = function () {\n  const stack = this._stack;\n  const top = stack[stack.length - 1];\n  const index = top.index;\n  const nodes = top.nodes;\n  if (index === nodes.length) {\n    return;\n  }\n  ++top.index;\n\n  return nodes[index];\n};\n\nDeferredLoading.prototype._pop = function () {\n  const stack = this._stack;\n  stack.pop();\n\n  // Return false if we are done\n  if (stack.length === 0) {\n    this._deferred.resolve();\n    return false;\n  }\n\n  return true;\n};\n\nDeferredLoading.prototype._process = function (isFirstCall) {\n  const dataSource = this.dataSource;\n  const processingData = this._stack[this._stack.length - 1].processingData;\n\n  let child = this._nextNode();\n  while (defined(child)) {\n    const featureProcessor = featureTypes[child.localName];\n    if (\n      defined(featureProcessor) &&\n      (namespaces.kml.indexOf(child.namespaceURI) !== -1 ||\n        namespaces.gx.indexOf(child.namespaceURI) !== -1)\n    ) {\n      featureProcessor(dataSource, child, processingData, this);\n\n      // Give up time and continue loading later\n      if (\n        this._timeoutSet ||\n        KmlDataSource._getTimestamp() > this._started + this._timeThreshold\n      ) {\n        this._giveUpTime();\n        return;\n      }\n    }\n\n    child = this._nextNode();\n  }\n\n  // If we are a recursive call from a subfolder, just return so the parent folder can continue processing\n  // If we aren't then make another call to processNodes because there is stuff still left in the queue\n  if (this._pop() && isFirstCall) {\n    this._process(true);\n  }\n};\n\nfunction isZipFile(blob) {\n  const magicBlob = blob.slice(0, Math.min(4, blob.size));\n  const deferred = defer();\n  const reader = new FileReader();\n  reader.addEventListener(\"load\", function () {\n    deferred.resolve(\n      new DataView(reader.result).getUint32(0, false) === 0x504b0304\n    );\n  });\n  reader.addEventListener(\"error\", function () {\n    deferred.reject(reader.error);\n  });\n  reader.readAsArrayBuffer(magicBlob);\n  return deferred.promise;\n}\n\nfunction readBlobAsText(blob) {\n  const deferred = defer();\n  const reader = new FileReader();\n  reader.addEventListener(\"load\", function () {\n    deferred.resolve(reader.result);\n  });\n  reader.addEventListener(\"error\", function () {\n    deferred.reject(reader.error);\n  });\n  reader.readAsText(blob);\n  return deferred.promise;\n}\n\nfunction insertNamespaces(text) {\n  const namespaceMap = {\n    xsi: \"http://www.w3.org/2001/XMLSchema-instance\",\n  };\n  let firstPart, lastPart, reg, declaration;\n\n  for (const key in namespaceMap) {\n    if (namespaceMap.hasOwnProperty(key)) {\n      reg = RegExp(`[< ]${key}:`);\n      declaration = `xmlns:${key}=`;\n      if (reg.test(text) && text.indexOf(declaration) === -1) {\n        if (!defined(firstPart)) {\n          firstPart = text.substr(0, text.indexOf(\"<kml\") + 4);\n          lastPart = text.substr(firstPart.length);\n        }\n        firstPart += ` ${declaration}\"${namespaceMap[key]}\"`;\n      }\n    }\n  }\n\n  if (defined(firstPart)) {\n    text = firstPart + lastPart;\n  }\n\n  return text;\n}\n\nfunction removeDuplicateNamespaces(text) {\n  let index = text.indexOf(\"xmlns:\");\n  const endDeclaration = text.indexOf(\">\", index);\n  let namespace, startIndex, endIndex;\n\n  while (index !== -1 && index < endDeclaration) {\n    namespace = text.slice(index, text.indexOf('\"', index));\n    startIndex = index;\n    index = text.indexOf(namespace, index + 1);\n    if (index !== -1) {\n      endIndex = text.indexOf('\"', text.indexOf('\"', index) + 1);\n      text = text.slice(0, index - 1) + text.slice(endIndex + 1, text.length);\n      index = text.indexOf(\"xmlns:\", startIndex - 1);\n    } else {\n      index = text.indexOf(\"xmlns:\", startIndex + 1);\n    }\n  }\n\n  return text;\n}\n\nfunction loadXmlFromZip(entry, uriResolver) {\n  return Promise.resolve(entry.getData(new zip.TextWriter())).then(function (\n    text\n  ) {\n    text = insertNamespaces(text);\n    text = removeDuplicateNamespaces(text);\n    uriResolver.kml = parser.parseFromString(text, \"application/xml\");\n  });\n}\n\nfunction loadDataUriFromZip(entry, uriResolver) {\n  const mimeType = defaultValue(\n    MimeTypes.detectFromFilename(entry.filename),\n    \"application/octet-stream\"\n  );\n  return Promise.resolve(entry.getData(new zip.Data64URIWriter(mimeType))).then(\n    function (dataUri) {\n      uriResolver[entry.filename] = dataUri;\n    }\n  );\n}\n\nfunction embedDataUris(div, elementType, attributeName, uriResolver) {\n  const keys = uriResolver.keys;\n  const baseUri = new Uri(\".\");\n  const elements = div.querySelectorAll(elementType);\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    const value = element.getAttribute(attributeName);\n    const relativeUri = new Uri(value);\n    const uri = relativeUri.absoluteTo(baseUri).toString();\n    const index = keys.indexOf(uri);\n    if (index !== -1) {\n      const key = keys[index];\n      element.setAttribute(attributeName, uriResolver[key]);\n      if (elementType === \"a\" && element.getAttribute(\"download\") === null) {\n        element.setAttribute(\"download\", key);\n      }\n    }\n  }\n}\n\nfunction applyBasePath(div, elementType, attributeName, sourceResource) {\n  const elements = div.querySelectorAll(elementType);\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    const value = element.getAttribute(attributeName);\n    const resource = resolveHref(value, sourceResource);\n    element.setAttribute(attributeName, resource.url);\n  }\n}\n\n// an optional context is passed to allow for some malformed kmls (those with multiple geometries with same ids) to still parse\n// correctly, as they do in Google Earth.\nfunction createEntity(node, entityCollection, context) {\n  let id = queryStringAttribute(node, \"id\");\n  id = defined(id) && id.length !== 0 ? id : createGuid();\n  if (defined(context)) {\n    id = context + id;\n  }\n\n  // If we have a duplicate ID just generate one.\n  // This isn't valid KML but Google Earth handles this case.\n  let entity = entityCollection.getById(id);\n  if (defined(entity)) {\n    id = createGuid();\n    if (defined(context)) {\n      id = context + id;\n    }\n  }\n\n  entity = entityCollection.add(new Entity({ id: id }));\n  if (!defined(entity.kml)) {\n    entity.addProperty(\"kml\");\n    entity.kml = new KmlFeatureData();\n  }\n  return entity;\n}\n\nfunction isExtrudable(altitudeMode, gxAltitudeMode) {\n  return (\n    altitudeMode === \"absolute\" ||\n    altitudeMode === \"relativeToGround\" ||\n    gxAltitudeMode === \"relativeToSeaFloor\"\n  );\n}\n\nfunction readCoordinate(value, ellipsoid) {\n  //Google Earth treats empty or missing coordinates as 0.\n  if (!defined(value)) {\n    return Cartesian3.fromDegrees(0, 0, 0, ellipsoid);\n  }\n\n  const digits = value.match(/[^\\s,\\n]+/g);\n  if (!defined(digits)) {\n    return Cartesian3.fromDegrees(0, 0, 0, ellipsoid);\n  }\n\n  let longitude = parseFloat(digits[0]);\n  let latitude = parseFloat(digits[1]);\n  let height = parseFloat(digits[2]);\n\n  longitude = isNaN(longitude) ? 0.0 : longitude;\n  latitude = isNaN(latitude) ? 0.0 : latitude;\n  height = isNaN(height) ? 0.0 : height;\n\n  return Cartesian3.fromDegrees(longitude, latitude, height, ellipsoid);\n}\n\nfunction readCoordinates(element, ellipsoid) {\n  if (!defined(element)) {\n    return undefined;\n  }\n\n  const tuples = element.textContent.match(/[^\\s\\n]+/g);\n  if (!defined(tuples)) {\n    return undefined;\n  }\n\n  const length = tuples.length;\n  const result = new Array(length);\n  let resultIndex = 0;\n  for (let i = 0; i < length; i++) {\n    result[resultIndex++] = readCoordinate(tuples[i], ellipsoid);\n  }\n  return result;\n}\n\nfunction queryNumericAttribute(node, attributeName) {\n  if (!defined(node)) {\n    return undefined;\n  }\n\n  const value = node.getAttribute(attributeName);\n  if (value !== null) {\n    const result = parseFloat(value);\n    return !isNaN(result) ? result : undefined;\n  }\n  return undefined;\n}\n\nfunction queryStringAttribute(node, attributeName) {\n  if (!defined(node)) {\n    return undefined;\n  }\n  const value = node.getAttribute(attributeName);\n  return value !== null ? value : undefined;\n}\n\nfunction queryFirstNode(node, tagName, namespace) {\n  if (!defined(node)) {\n    return undefined;\n  }\n  const childNodes = node.childNodes;\n  const length = childNodes.length;\n  for (let q = 0; q < length; q++) {\n    const child = childNodes[q];\n    if (\n      child.localName === tagName &&\n      namespace.indexOf(child.namespaceURI) !== -1\n    ) {\n      return child;\n    }\n  }\n  return undefined;\n}\n\nfunction queryNodes(node, tagName, namespace) {\n  if (!defined(node)) {\n    return undefined;\n  }\n  const result = [];\n  const childNodes = node.getElementsByTagNameNS(\"*\", tagName);\n  const length = childNodes.length;\n  for (let q = 0; q < length; q++) {\n    const child = childNodes[q];\n    if (\n      child.localName === tagName &&\n      namespace.indexOf(child.namespaceURI) !== -1\n    ) {\n      result.push(child);\n    }\n  }\n  return result;\n}\n\nfunction queryChildNodes(node, tagName, namespace) {\n  if (!defined(node)) {\n    return [];\n  }\n  const result = [];\n  const childNodes = node.childNodes;\n  const length = childNodes.length;\n  for (let q = 0; q < length; q++) {\n    const child = childNodes[q];\n    if (\n      child.localName === tagName &&\n      namespace.indexOf(child.namespaceURI) !== -1\n    ) {\n      result.push(child);\n    }\n  }\n  return result;\n}\n\nfunction queryNumericValue(node, tagName, namespace) {\n  const resultNode = queryFirstNode(node, tagName, namespace);\n  if (defined(resultNode)) {\n    const result = parseFloat(resultNode.textContent);\n    return !isNaN(result) ? result : undefined;\n  }\n  return undefined;\n}\n\nfunction queryStringValue(node, tagName, namespace) {\n  const result = queryFirstNode(node, tagName, namespace);\n  if (defined(result)) {\n    return result.textContent.trim();\n  }\n  return undefined;\n}\n\nfunction queryBooleanValue(node, tagName, namespace) {\n  const result = queryFirstNode(node, tagName, namespace);\n  if (defined(result)) {\n    const value = result.textContent.trim();\n    return value === \"1\" || /^true$/i.test(value);\n  }\n  return undefined;\n}\n\nfunction resolveHref(href, sourceResource, uriResolver) {\n  if (!defined(href)) {\n    return undefined;\n  }\n\n  let resource;\n  if (defined(uriResolver)) {\n    // To resolve issues with KML sources defined in Windows style paths.\n    href = href.replace(/\\\\/g, \"/\");\n    let blob = uriResolver[href];\n    if (defined(blob)) {\n      resource = new Resource({\n        url: blob,\n      });\n    } else {\n      // Needed for multiple levels of KML files in a KMZ\n      const baseUri = new Uri(sourceResource.getUrlComponent());\n      const uri = new Uri(href);\n      blob = uriResolver[uri.absoluteTo(baseUri)];\n      if (defined(blob)) {\n        resource = new Resource({\n          url: blob,\n        });\n      }\n    }\n  }\n\n  if (!defined(resource)) {\n    resource = sourceResource.getDerivedResource({\n      url: href,\n    });\n  }\n\n  return resource;\n}\n\nconst colorOptions = {\n  maximumRed: undefined,\n  red: undefined,\n  maximumGreen: undefined,\n  green: undefined,\n  maximumBlue: undefined,\n  blue: undefined,\n};\n\nfunction parseColorString(value, isRandom) {\n  if (!defined(value) || /^\\s*$/gm.test(value)) {\n    return undefined;\n  }\n\n  if (value[0] === \"#\") {\n    value = value.substring(1);\n  }\n\n  const alpha = parseInt(value.substring(0, 2), 16) / 255.0;\n  const blue = parseInt(value.substring(2, 4), 16) / 255.0;\n  const green = parseInt(value.substring(4, 6), 16) / 255.0;\n  const red = parseInt(value.substring(6, 8), 16) / 255.0;\n\n  if (!isRandom) {\n    return new Color(red, green, blue, alpha);\n  }\n\n  if (red > 0) {\n    colorOptions.maximumRed = red;\n    colorOptions.red = undefined;\n  } else {\n    colorOptions.maximumRed = undefined;\n    colorOptions.red = 0;\n  }\n  if (green > 0) {\n    colorOptions.maximumGreen = green;\n    colorOptions.green = undefined;\n  } else {\n    colorOptions.maximumGreen = undefined;\n    colorOptions.green = 0;\n  }\n  if (blue > 0) {\n    colorOptions.maximumBlue = blue;\n    colorOptions.blue = undefined;\n  } else {\n    colorOptions.maximumBlue = undefined;\n    colorOptions.blue = 0;\n  }\n  colorOptions.alpha = alpha;\n  return Color.fromRandom(colorOptions);\n}\n\nfunction queryColorValue(node, tagName, namespace) {\n  const value = queryStringValue(node, tagName, namespace);\n  if (!defined(value)) {\n    return undefined;\n  }\n  return parseColorString(\n    value,\n    queryStringValue(node, \"colorMode\", namespace) === \"random\"\n  );\n}\n\nfunction processTimeStamp(featureNode) {\n  const node = queryFirstNode(featureNode, \"TimeStamp\", namespaces.kmlgx);\n  const whenString = queryStringValue(node, \"when\", namespaces.kmlgx);\n\n  if (!defined(node) || !defined(whenString) || whenString.length === 0) {\n    return undefined;\n  }\n\n  //According to the KML spec, a TimeStamp represents a \"single moment in time\"\n  //However, since Cesium animates much differently than Google Earth, that doesn't\n  //Make much sense here.  Instead, we use the TimeStamp as the moment the feature\n  //comes into existence.  This works much better and gives a similar feel to\n  //GE's experience.\n  const when = JulianDate.fromIso8601(whenString);\n  const result = new TimeIntervalCollection();\n  result.addInterval(\n    new TimeInterval({\n      start: when,\n      stop: Iso8601.MAXIMUM_VALUE,\n    })\n  );\n  return result;\n}\n\nfunction processTimeSpan(featureNode) {\n  const node = queryFirstNode(featureNode, \"TimeSpan\", namespaces.kmlgx);\n  if (!defined(node)) {\n    return undefined;\n  }\n  let result;\n\n  const beginNode = queryFirstNode(node, \"begin\", namespaces.kmlgx);\n  let beginDate = defined(beginNode)\n    ? JulianDate.fromIso8601(beginNode.textContent)\n    : undefined;\n\n  const endNode = queryFirstNode(node, \"end\", namespaces.kmlgx);\n  let endDate = defined(endNode)\n    ? JulianDate.fromIso8601(endNode.textContent)\n    : undefined;\n\n  if (defined(beginDate) && defined(endDate)) {\n    if (JulianDate.lessThan(endDate, beginDate)) {\n      const tmp = beginDate;\n      beginDate = endDate;\n      endDate = tmp;\n    }\n    result = new TimeIntervalCollection();\n    result.addInterval(\n      new TimeInterval({\n        start: beginDate,\n        stop: endDate,\n      })\n    );\n  } else if (defined(beginDate)) {\n    result = new TimeIntervalCollection();\n    result.addInterval(\n      new TimeInterval({\n        start: beginDate,\n        stop: Iso8601.MAXIMUM_VALUE,\n      })\n    );\n  } else if (defined(endDate)) {\n    result = new TimeIntervalCollection();\n    result.addInterval(\n      new TimeInterval({\n        start: Iso8601.MINIMUM_VALUE,\n        stop: endDate,\n      })\n    );\n  }\n\n  return result;\n}\n\nfunction createDefaultBillboard() {\n  const billboard = new BillboardGraphics();\n  billboard.width = BILLBOARD_SIZE;\n  billboard.height = BILLBOARD_SIZE;\n  billboard.scaleByDistance = new NearFarScalar(\n    BILLBOARD_NEAR_DISTANCE,\n    BILLBOARD_NEAR_RATIO,\n    BILLBOARD_FAR_DISTANCE,\n    BILLBOARD_FAR_RATIO\n  );\n  billboard.pixelOffsetScaleByDistance = new NearFarScalar(\n    BILLBOARD_NEAR_DISTANCE,\n    BILLBOARD_NEAR_RATIO,\n    BILLBOARD_FAR_DISTANCE,\n    BILLBOARD_FAR_RATIO\n  );\n  return billboard;\n}\n\nfunction createDefaultPolygon() {\n  const polygon = new PolygonGraphics();\n  polygon.outline = true;\n  polygon.outlineColor = Color.WHITE;\n  return polygon;\n}\n\nfunction createDefaultLabel() {\n  const label = new LabelGraphics();\n  label.translucencyByDistance = new NearFarScalar(3000000, 1.0, 5000000, 0.0);\n  label.pixelOffset = new Cartesian2(17, 0);\n  label.horizontalOrigin = HorizontalOrigin.LEFT;\n  label.font = \"16px sans-serif\";\n  label.style = LabelStyle.FILL_AND_OUTLINE;\n  return label;\n}\n\nfunction getIconHref(\n  iconNode,\n  dataSource,\n  sourceResource,\n  uriResolver,\n  canRefresh\n) {\n  let href = queryStringValue(iconNode, \"href\", namespaces.kml);\n  if (!defined(href) || href.length === 0) {\n    return undefined;\n  }\n\n  if (href.indexOf(\"root://icons/palette-\") === 0) {\n    const palette = href.charAt(21);\n\n    // Get the icon number\n    let x = defaultValue(queryNumericValue(iconNode, \"x\", namespaces.gx), 0);\n    let y = defaultValue(queryNumericValue(iconNode, \"y\", namespaces.gx), 0);\n    x = Math.min(x / 32, 7);\n    y = 7 - Math.min(y / 32, 7);\n    const iconNum = 8 * y + x;\n\n    href = `https://maps.google.com/mapfiles/kml/pal${palette}/icon${iconNum}.png`;\n  }\n\n  const hrefResource = resolveHref(href, sourceResource, uriResolver);\n\n  if (canRefresh) {\n    const refreshMode = queryStringValue(\n      iconNode,\n      \"refreshMode\",\n      namespaces.kml\n    );\n    const viewRefreshMode = queryStringValue(\n      iconNode,\n      \"viewRefreshMode\",\n      namespaces.kml\n    );\n    if (refreshMode === \"onInterval\" || refreshMode === \"onExpire\") {\n      oneTimeWarning(\n        `kml-refreshMode-${refreshMode}`,\n        `KML - Unsupported Icon refreshMode: ${refreshMode}`\n      );\n    } else if (viewRefreshMode === \"onStop\" || viewRefreshMode === \"onRegion\") {\n      oneTimeWarning(\n        `kml-refreshMode-${viewRefreshMode}`,\n        `KML - Unsupported Icon viewRefreshMode: ${viewRefreshMode}`\n      );\n    }\n\n    const viewBoundScale = defaultValue(\n      queryStringValue(iconNode, \"viewBoundScale\", namespaces.kml),\n      1.0\n    );\n    const defaultViewFormat =\n      viewRefreshMode === \"onStop\"\n        ? \"BBOX=[bboxWest],[bboxSouth],[bboxEast],[bboxNorth]\"\n        : \"\";\n    const viewFormat = defaultValue(\n      queryStringValue(iconNode, \"viewFormat\", namespaces.kml),\n      defaultViewFormat\n    );\n    const httpQuery = queryStringValue(iconNode, \"httpQuery\", namespaces.kml);\n    if (defined(viewFormat)) {\n      hrefResource.setQueryParameters(queryToObject(cleanupString(viewFormat)));\n    }\n    if (defined(httpQuery)) {\n      hrefResource.setQueryParameters(queryToObject(cleanupString(httpQuery)));\n    }\n\n    const ellipsoid = dataSource._ellipsoid;\n    processNetworkLinkQueryString(\n      hrefResource,\n      dataSource.camera,\n      dataSource.canvas,\n      viewBoundScale,\n      dataSource._lastCameraView.bbox,\n      ellipsoid\n    );\n\n    return hrefResource;\n  }\n\n  return hrefResource;\n}\n\nfunction processBillboardIcon(\n  dataSource,\n  node,\n  targetEntity,\n  sourceResource,\n  uriResolver\n) {\n  let scale = queryNumericValue(node, \"scale\", namespaces.kml);\n  const heading = queryNumericValue(node, \"heading\", namespaces.kml);\n  const color = queryColorValue(node, \"color\", namespaces.kml);\n\n  const iconNode = queryFirstNode(node, \"Icon\", namespaces.kml);\n  let icon = getIconHref(\n    iconNode,\n    dataSource,\n    sourceResource,\n    uriResolver,\n    false\n  );\n\n  // If icon tags are present but blank, we do not want to show an icon\n  if (defined(iconNode) && !defined(icon)) {\n    icon = false;\n  }\n\n  const x = queryNumericValue(iconNode, \"x\", namespaces.gx);\n  const y = queryNumericValue(iconNode, \"y\", namespaces.gx);\n  const w = queryNumericValue(iconNode, \"w\", namespaces.gx);\n  const h = queryNumericValue(iconNode, \"h\", namespaces.gx);\n\n  const hotSpotNode = queryFirstNode(node, \"hotSpot\", namespaces.kml);\n  const hotSpotX = queryNumericAttribute(hotSpotNode, \"x\");\n  const hotSpotY = queryNumericAttribute(hotSpotNode, \"y\");\n  const hotSpotXUnit = queryStringAttribute(hotSpotNode, \"xunits\");\n  const hotSpotYUnit = queryStringAttribute(hotSpotNode, \"yunits\");\n\n  let billboard = targetEntity.billboard;\n  if (!defined(billboard)) {\n    billboard = createDefaultBillboard();\n    targetEntity.billboard = billboard;\n  }\n\n  billboard.image = icon;\n  billboard.scale = scale;\n  billboard.color = color;\n\n  if (defined(x) || defined(y) || defined(w) || defined(h)) {\n    billboard.imageSubRegion = new BoundingRectangle(x, y, w, h);\n  }\n\n  //GE treats a heading of zero as no heading\n  //You can still point north using a 360 degree angle (or any multiple of 360)\n  if (defined(heading) && heading !== 0) {\n    billboard.rotation = CesiumMath.toRadians(-heading);\n    billboard.alignedAxis = Cartesian3.UNIT_Z;\n  }\n\n  //Hotpot is the KML equivalent of pixel offset\n  //The hotspot origin is the lower left, but we leave\n  //our billboard origin at the center and simply\n  //modify the pixel offset to take this into account\n  scale = defaultValue(scale, 1.0);\n\n  let xOffset;\n  let yOffset;\n  if (defined(hotSpotX)) {\n    if (hotSpotXUnit === \"pixels\") {\n      xOffset = -hotSpotX * scale;\n    } else if (hotSpotXUnit === \"insetPixels\") {\n      xOffset = (hotSpotX - BILLBOARD_SIZE) * scale;\n    } else if (hotSpotXUnit === \"fraction\") {\n      xOffset = -hotSpotX * BILLBOARD_SIZE * scale;\n    }\n    xOffset += BILLBOARD_SIZE * 0.5 * scale;\n  }\n\n  if (defined(hotSpotY)) {\n    if (hotSpotYUnit === \"pixels\") {\n      yOffset = hotSpotY * scale;\n    } else if (hotSpotYUnit === \"insetPixels\") {\n      yOffset = (-hotSpotY + BILLBOARD_SIZE) * scale;\n    } else if (hotSpotYUnit === \"fraction\") {\n      yOffset = hotSpotY * BILLBOARD_SIZE * scale;\n    }\n\n    yOffset -= BILLBOARD_SIZE * 0.5 * scale;\n  }\n\n  if (defined(xOffset) || defined(yOffset)) {\n    billboard.pixelOffset = new Cartesian2(xOffset, yOffset);\n  }\n}\n\nfunction applyStyle(\n  dataSource,\n  styleNode,\n  targetEntity,\n  sourceResource,\n  uriResolver\n) {\n  for (let i = 0, len = styleNode.childNodes.length; i < len; i++) {\n    const node = styleNode.childNodes.item(i);\n    if (node.localName === \"IconStyle\") {\n      processBillboardIcon(\n        dataSource,\n        node,\n        targetEntity,\n        sourceResource,\n        uriResolver\n      );\n    } else if (node.localName === \"LabelStyle\") {\n      let label = targetEntity.label;\n      if (!defined(label)) {\n        label = createDefaultLabel();\n        targetEntity.label = label;\n      }\n      label.scale = defaultValue(\n        queryNumericValue(node, \"scale\", namespaces.kml),\n        label.scale\n      );\n      label.fillColor = defaultValue(\n        queryColorValue(node, \"color\", namespaces.kml),\n        label.fillColor\n      );\n      label.text = targetEntity.name;\n    } else if (node.localName === \"LineStyle\") {\n      let polyline = targetEntity.polyline;\n      if (!defined(polyline)) {\n        polyline = new PolylineGraphics();\n        targetEntity.polyline = polyline;\n      }\n      polyline.width = queryNumericValue(node, \"width\", namespaces.kml);\n      polyline.material = queryColorValue(node, \"color\", namespaces.kml);\n      if (defined(queryColorValue(node, \"outerColor\", namespaces.gx))) {\n        oneTimeWarning(\n          \"kml-gx:outerColor\",\n          \"KML - gx:outerColor is not supported in a LineStyle\"\n        );\n      }\n      if (defined(queryNumericValue(node, \"outerWidth\", namespaces.gx))) {\n        oneTimeWarning(\n          \"kml-gx:outerWidth\",\n          \"KML - gx:outerWidth is not supported in a LineStyle\"\n        );\n      }\n      if (defined(queryNumericValue(node, \"physicalWidth\", namespaces.gx))) {\n        oneTimeWarning(\n          \"kml-gx:physicalWidth\",\n          \"KML - gx:physicalWidth is not supported in a LineStyle\"\n        );\n      }\n      if (defined(queryBooleanValue(node, \"labelVisibility\", namespaces.gx))) {\n        oneTimeWarning(\n          \"kml-gx:labelVisibility\",\n          \"KML - gx:labelVisibility is not supported in a LineStyle\"\n        );\n      }\n    } else if (node.localName === \"PolyStyle\") {\n      let polygon = targetEntity.polygon;\n      if (!defined(polygon)) {\n        polygon = createDefaultPolygon();\n        targetEntity.polygon = polygon;\n      }\n      polygon.material = defaultValue(\n        queryColorValue(node, \"color\", namespaces.kml),\n        polygon.material\n      );\n      polygon.fill = defaultValue(\n        queryBooleanValue(node, \"fill\", namespaces.kml),\n        polygon.fill\n      );\n      polygon.outline = defaultValue(\n        queryBooleanValue(node, \"outline\", namespaces.kml),\n        polygon.outline\n      );\n    } else if (node.localName === \"BalloonStyle\") {\n      const bgColor = defaultValue(\n        parseColorString(queryStringValue(node, \"bgColor\", namespaces.kml)),\n        Color.WHITE\n      );\n      const textColor = defaultValue(\n        parseColorString(queryStringValue(node, \"textColor\", namespaces.kml)),\n        Color.BLACK\n      );\n      const text = queryStringValue(node, \"text\", namespaces.kml);\n\n      //This is purely an internal property used in style processing,\n      //it never ends up on the final entity.\n      targetEntity.addProperty(\"balloonStyle\");\n      targetEntity.balloonStyle = {\n        bgColor: bgColor,\n        textColor: textColor,\n        text: text,\n      };\n    } else if (node.localName === \"ListStyle\") {\n      const listItemType = queryStringValue(\n        node,\n        \"listItemType\",\n        namespaces.kml\n      );\n      if (listItemType === \"radioFolder\" || listItemType === \"checkOffOnly\") {\n        oneTimeWarning(\n          `kml-listStyle-${listItemType}`,\n          `KML - Unsupported ListStyle with listItemType: ${listItemType}`\n        );\n      }\n    }\n  }\n}\n\n//Processes and merges any inline styles for the provided node into the provided entity.\nfunction computeFinalStyle(\n  dataSource,\n  placeMark,\n  styleCollection,\n  sourceResource,\n  uriResolver\n) {\n  const result = new Entity();\n  let styleEntity;\n\n  //Google earth seems to always use the last inline Style/StyleMap only\n  let styleIndex = -1;\n  const childNodes = placeMark.childNodes;\n  const length = childNodes.length;\n  for (let q = 0; q < length; q++) {\n    const child = childNodes[q];\n    if (child.localName === \"Style\" || child.localName === \"StyleMap\") {\n      styleIndex = q;\n    }\n  }\n\n  if (styleIndex !== -1) {\n    const inlineStyleNode = childNodes[styleIndex];\n    if (inlineStyleNode.localName === \"Style\") {\n      applyStyle(\n        dataSource,\n        inlineStyleNode,\n        result,\n        sourceResource,\n        uriResolver\n      );\n    } else {\n      // StyleMap\n      const pairs = queryChildNodes(inlineStyleNode, \"Pair\", namespaces.kml);\n      for (let p = 0; p < pairs.length; p++) {\n        const pair = pairs[p];\n        const key = queryStringValue(pair, \"key\", namespaces.kml);\n        if (key === \"normal\") {\n          const styleUrl = queryStringValue(pair, \"styleUrl\", namespaces.kml);\n          if (defined(styleUrl)) {\n            styleEntity = styleCollection.getById(styleUrl);\n            if (!defined(styleEntity)) {\n              styleEntity = styleCollection.getById(`#${styleUrl}`);\n            }\n            if (defined(styleEntity)) {\n              result.merge(styleEntity);\n            }\n          } else {\n            const node = queryFirstNode(pair, \"Style\", namespaces.kml);\n            applyStyle(dataSource, node, result, sourceResource, uriResolver);\n          }\n        } else {\n          oneTimeWarning(\n            `kml-styleMap-${key}`,\n            `KML - Unsupported StyleMap key: ${key}`\n          );\n        }\n      }\n    }\n  }\n\n  //Google earth seems to always use the first external style only.\n  const externalStyle = queryStringValue(placeMark, \"styleUrl\", namespaces.kml);\n  if (defined(externalStyle)) {\n    let id = externalStyle;\n    if (externalStyle[0] !== \"#\" && externalStyle.indexOf(\"#\") !== -1) {\n      const tokens = externalStyle.split(\"#\");\n      const uri = tokens[0];\n      const resource = sourceResource.getDerivedResource({\n        url: uri,\n      });\n\n      id = `${resource.getUrlComponent()}#${tokens[1]}`;\n    }\n\n    styleEntity = styleCollection.getById(id);\n    if (!defined(styleEntity)) {\n      styleEntity = styleCollection.getById(`#${id}`);\n    }\n    if (defined(styleEntity)) {\n      result.merge(styleEntity);\n    }\n  }\n\n  return result;\n}\n\n//Asynchronously processes an external style file.\nfunction processExternalStyles(dataSource, resource, styleCollection) {\n  return resource.fetchXML().then(function (styleKml) {\n    return processStyles(dataSource, styleKml, styleCollection, resource, true);\n  });\n}\n\n//Processes all shared and external styles and stores\n//their id into the provided styleCollection.\n//Returns an array of promises that will resolve when\n//each style is loaded.\nfunction processStyles(\n  dataSource,\n  kml,\n  styleCollection,\n  sourceResource,\n  isExternal,\n  uriResolver\n) {\n  let i;\n  let id;\n  let styleEntity;\n\n  let node;\n  const styleNodes = queryNodes(kml, \"Style\", namespaces.kml);\n  if (defined(styleNodes)) {\n    const styleNodesLength = styleNodes.length;\n    for (i = 0; i < styleNodesLength; i++) {\n      node = styleNodes[i];\n      id = queryStringAttribute(node, \"id\");\n      if (defined(id)) {\n        id = `#${id}`;\n        if (isExternal && defined(sourceResource)) {\n          id = sourceResource.getUrlComponent() + id;\n        }\n        if (!defined(styleCollection.getById(id))) {\n          styleEntity = new Entity({\n            id: id,\n          });\n          styleCollection.add(styleEntity);\n          applyStyle(\n            dataSource,\n            node,\n            styleEntity,\n            sourceResource,\n            uriResolver\n          );\n        }\n      }\n    }\n  }\n\n  const styleMaps = queryNodes(kml, \"StyleMap\", namespaces.kml);\n  if (defined(styleMaps)) {\n    const styleMapsLength = styleMaps.length;\n    for (i = 0; i < styleMapsLength; i++) {\n      const styleMap = styleMaps[i];\n      id = queryStringAttribute(styleMap, \"id\");\n      if (defined(id)) {\n        const pairs = queryChildNodes(styleMap, \"Pair\", namespaces.kml);\n        for (let p = 0; p < pairs.length; p++) {\n          const pair = pairs[p];\n          const key = queryStringValue(pair, \"key\", namespaces.kml);\n          if (key === \"normal\") {\n            id = `#${id}`;\n            if (isExternal && defined(sourceResource)) {\n              id = sourceResource.getUrlComponent() + id;\n            }\n            if (!defined(styleCollection.getById(id))) {\n              styleEntity = styleCollection.getOrCreateEntity(id);\n\n              let styleUrl = queryStringValue(pair, \"styleUrl\", namespaces.kml);\n              if (defined(styleUrl)) {\n                if (styleUrl[0] !== \"#\") {\n                  styleUrl = `#${styleUrl}`;\n                }\n\n                if (isExternal && defined(sourceResource)) {\n                  styleUrl = sourceResource.getUrlComponent() + styleUrl;\n                }\n                const base = styleCollection.getById(styleUrl);\n\n                if (defined(base)) {\n                  styleEntity.merge(base);\n                }\n              } else {\n                node = queryFirstNode(pair, \"Style\", namespaces.kml);\n                applyStyle(\n                  dataSource,\n                  node,\n                  styleEntity,\n                  sourceResource,\n                  uriResolver\n                );\n              }\n            }\n          } else {\n            oneTimeWarning(\n              `kml-styleMap-${key}`,\n              `KML - Unsupported StyleMap key: ${key}`\n            );\n          }\n        }\n      }\n    }\n  }\n\n  const promises = [];\n  const styleUrlNodes = kml.getElementsByTagName(\"styleUrl\");\n  const styleUrlNodesLength = styleUrlNodes.length;\n  for (i = 0; i < styleUrlNodesLength; i++) {\n    const styleReference = styleUrlNodes[i].textContent;\n    if (styleReference[0] !== \"#\") {\n      //According to the spec, all local styles should start with a #\n      //and everything else is an external style that has a # seperating\n      //the URL of the document and the style.  However, Google Earth\n      //also accepts styleUrls without a # as meaning a local style.\n      const tokens = styleReference.split(\"#\");\n      if (tokens.length === 2) {\n        const uri = tokens[0];\n        const resource = sourceResource.getDerivedResource({\n          url: uri,\n        });\n\n        promises.push(\n          processExternalStyles(dataSource, resource, styleCollection)\n        );\n      }\n    }\n  }\n\n  return promises;\n}\n\nfunction createDropLine(entityCollection, entity, styleEntity) {\n  const entityPosition = new ReferenceProperty(entityCollection, entity.id, [\n    \"position\",\n  ]);\n  const surfacePosition = new ScaledPositionProperty(entity.position);\n  entity.polyline = defined(styleEntity.polyline)\n    ? styleEntity.polyline.clone()\n    : new PolylineGraphics();\n  entity.polyline.positions = new PositionPropertyArray([\n    entityPosition,\n    surfacePosition,\n  ]);\n}\n\nfunction heightReferenceFromAltitudeMode(altitudeMode, gxAltitudeMode) {\n  if (\n    (!defined(altitudeMode) && !defined(gxAltitudeMode)) ||\n    altitudeMode === \"clampToGround\"\n  ) {\n    return HeightReference.CLAMP_TO_GROUND;\n  }\n\n  if (altitudeMode === \"relativeToGround\") {\n    return HeightReference.RELATIVE_TO_GROUND;\n  }\n\n  if (altitudeMode === \"absolute\") {\n    return HeightReference.NONE;\n  }\n\n  if (gxAltitudeMode === \"clampToSeaFloor\") {\n    oneTimeWarning(\n      \"kml-gx:altitudeMode-clampToSeaFloor\",\n      \"KML - <gx:altitudeMode>:clampToSeaFloor is currently not supported, using <kml:altitudeMode>:clampToGround.\"\n    );\n    return HeightReference.CLAMP_TO_GROUND;\n  }\n\n  if (gxAltitudeMode === \"relativeToSeaFloor\") {\n    oneTimeWarning(\n      \"kml-gx:altitudeMode-relativeToSeaFloor\",\n      \"KML - <gx:altitudeMode>:relativeToSeaFloor is currently not supported, using <kml:altitudeMode>:relativeToGround.\"\n    );\n    return HeightReference.RELATIVE_TO_GROUND;\n  }\n\n  if (defined(altitudeMode)) {\n    oneTimeWarning(\n      \"kml-altitudeMode-unknown\",\n      `KML - Unknown <kml:altitudeMode>:${altitudeMode}, using <kml:altitudeMode>:CLAMP_TO_GROUND.`\n    );\n  } else {\n    oneTimeWarning(\n      \"kml-gx:altitudeMode-unknown\",\n      `KML - Unknown <gx:altitudeMode>:${gxAltitudeMode}, using <kml:altitudeMode>:CLAMP_TO_GROUND.`\n    );\n  }\n\n  // Clamp to ground is the default\n  return HeightReference.CLAMP_TO_GROUND;\n}\n\nfunction createPositionPropertyFromAltitudeMode(\n  property,\n  altitudeMode,\n  gxAltitudeMode\n) {\n  if (\n    gxAltitudeMode === \"relativeToSeaFloor\" ||\n    altitudeMode === \"absolute\" ||\n    altitudeMode === \"relativeToGround\"\n  ) {\n    //Just return the ellipsoid referenced property until we support MSL\n    return property;\n  }\n\n  if (\n    (defined(altitudeMode) && altitudeMode !== \"clampToGround\") || //\n    (defined(gxAltitudeMode) && gxAltitudeMode !== \"clampToSeaFloor\")\n  ) {\n    oneTimeWarning(\n      \"kml-altitudeMode-unknown\",\n      `KML - Unknown altitudeMode: ${defaultValue(\n        altitudeMode,\n        gxAltitudeMode\n      )}`\n    );\n  }\n\n  // Clamp to ground is the default\n  return new ScaledPositionProperty(property);\n}\n\nfunction createPositionPropertyArrayFromAltitudeMode(\n  properties,\n  altitudeMode,\n  gxAltitudeMode,\n  ellipsoid\n) {\n  if (!defined(properties)) {\n    return undefined;\n  }\n\n  if (\n    gxAltitudeMode === \"relativeToSeaFloor\" ||\n    altitudeMode === \"absolute\" ||\n    altitudeMode === \"relativeToGround\"\n  ) {\n    //Just return the ellipsoid referenced property until we support MSL\n    return properties;\n  }\n\n  if (\n    (defined(altitudeMode) && altitudeMode !== \"clampToGround\") || //\n    (defined(gxAltitudeMode) && gxAltitudeMode !== \"clampToSeaFloor\")\n  ) {\n    oneTimeWarning(\n      \"kml-altitudeMode-unknown\",\n      `KML - Unknown altitudeMode: ${defaultValue(\n        altitudeMode,\n        gxAltitudeMode\n      )}`\n    );\n  }\n\n  // Clamp to ground is the default\n  const propertiesLength = properties.length;\n  for (let i = 0; i < propertiesLength; i++) {\n    const property = properties[i];\n    ellipsoid.scaleToGeodeticSurface(property, property);\n  }\n  return properties;\n}\n\nfunction processPositionGraphics(\n  dataSource,\n  entity,\n  styleEntity,\n  heightReference\n) {\n  let label = entity.label;\n  if (!defined(label)) {\n    label = defined(styleEntity.label)\n      ? styleEntity.label.clone()\n      : createDefaultLabel();\n    entity.label = label;\n  }\n  label.text = entity.name;\n\n  let billboard = entity.billboard;\n  if (!defined(billboard)) {\n    billboard = defined(styleEntity.billboard)\n      ? styleEntity.billboard.clone()\n      : createDefaultBillboard();\n    entity.billboard = billboard;\n  }\n\n  if (!defined(billboard.image)) {\n    billboard.image = dataSource._pinBuilder.fromColor(Color.YELLOW, 64);\n\n    // If there were empty <Icon> tags in the KML, then billboard.image was set to false above\n    // However, in this case, the false value would have been converted to a property afterwards\n    // Thus, we check if billboard.image is defined with value of false\n  } else if (!billboard.image.getValue()) {\n    billboard.image = undefined;\n  }\n\n  let scale = 1.0;\n  if (defined(billboard.scale)) {\n    scale = billboard.scale.getValue();\n    if (scale !== 0) {\n      label.pixelOffset = new Cartesian2(scale * 16 + 1, 0);\n    } else {\n      //Minor tweaks to better match Google Earth.\n      label.pixelOffset = undefined;\n      label.horizontalOrigin = undefined;\n    }\n  }\n\n  if (defined(heightReference) && dataSource._clampToGround) {\n    billboard.heightReference = heightReference;\n    label.heightReference = heightReference;\n  }\n}\n\nfunction processPathGraphics(entity, styleEntity) {\n  let path = entity.path;\n  if (!defined(path)) {\n    path = new PathGraphics();\n    path.leadTime = 0;\n    entity.path = path;\n  }\n\n  const polyline = styleEntity.polyline;\n  if (defined(polyline)) {\n    path.material = polyline.material;\n    path.width = polyline.width;\n  }\n}\n\nfunction processPoint(\n  dataSource,\n  entityCollection,\n  geometryNode,\n  entity,\n  styleEntity\n) {\n  const coordinatesString = queryStringValue(\n    geometryNode,\n    \"coordinates\",\n    namespaces.kml\n  );\n  const altitudeMode = queryStringValue(\n    geometryNode,\n    \"altitudeMode\",\n    namespaces.kml\n  );\n  const gxAltitudeMode = queryStringValue(\n    geometryNode,\n    \"altitudeMode\",\n    namespaces.gx\n  );\n  const extrude = queryBooleanValue(geometryNode, \"extrude\", namespaces.kml);\n  const ellipsoid = dataSource._ellipsoid;\n  const position = readCoordinate(coordinatesString, ellipsoid);\n\n  entity.position = position;\n  processPositionGraphics(\n    dataSource,\n    entity,\n    styleEntity,\n    heightReferenceFromAltitudeMode(altitudeMode, gxAltitudeMode)\n  );\n\n  if (extrude && isExtrudable(altitudeMode, gxAltitudeMode)) {\n    createDropLine(entityCollection, entity, styleEntity);\n  }\n\n  return true;\n}\n\nfunction processLineStringOrLinearRing(\n  dataSource,\n  entityCollection,\n  geometryNode,\n  entity,\n  styleEntity\n) {\n  const coordinatesNode = queryFirstNode(\n    geometryNode,\n    \"coordinates\",\n    namespaces.kml\n  );\n  const altitudeMode = queryStringValue(\n    geometryNode,\n    \"altitudeMode\",\n    namespaces.kml\n  );\n  const gxAltitudeMode = queryStringValue(\n    geometryNode,\n    \"altitudeMode\",\n    namespaces.gx\n  );\n  const extrude = queryBooleanValue(geometryNode, \"extrude\", namespaces.kml);\n  const tessellate = queryBooleanValue(\n    geometryNode,\n    \"tessellate\",\n    namespaces.kml\n  );\n  const canExtrude = isExtrudable(altitudeMode, gxAltitudeMode);\n  const zIndex = queryNumericValue(geometryNode, \"drawOrder\", namespaces.gx);\n\n  const ellipsoid = dataSource._ellipsoid;\n  const coordinates = readCoordinates(coordinatesNode, ellipsoid);\n  let polyline = styleEntity.polyline;\n  if (canExtrude && extrude) {\n    const wall = new WallGraphics();\n    entity.wall = wall;\n    wall.positions = coordinates;\n    const polygon = styleEntity.polygon;\n\n    if (defined(polygon)) {\n      wall.fill = polygon.fill;\n      wall.material = polygon.material;\n    }\n\n    //Always outline walls so they show up in 2D.\n    wall.outline = true;\n    if (defined(polyline)) {\n      wall.outlineColor = defined(polyline.material)\n        ? polyline.material.color\n        : Color.WHITE;\n      wall.outlineWidth = polyline.width;\n    } else if (defined(polygon)) {\n      wall.outlineColor = defined(polygon.material)\n        ? polygon.material.color\n        : Color.WHITE;\n    }\n  } else if (dataSource._clampToGround && !canExtrude && tessellate) {\n    const polylineGraphics = new PolylineGraphics();\n    polylineGraphics.clampToGround = true;\n    entity.polyline = polylineGraphics;\n    polylineGraphics.positions = coordinates;\n    if (defined(polyline)) {\n      polylineGraphics.material = defined(polyline.material)\n        ? polyline.material.color.getValue(Iso8601.MINIMUM_VALUE)\n        : Color.WHITE;\n      polylineGraphics.width = defaultValue(polyline.width, 1.0);\n    } else {\n      polylineGraphics.material = Color.WHITE;\n      polylineGraphics.width = 1.0;\n    }\n    polylineGraphics.zIndex = zIndex;\n  } else {\n    if (defined(zIndex)) {\n      oneTimeWarning(\n        \"kml-gx:drawOrder\",\n        \"KML - gx:drawOrder is not supported in LineStrings when clampToGround is false\"\n      );\n    }\n    if (dataSource._clampToGround && !tessellate) {\n      oneTimeWarning(\n        \"kml-line-tesselate\",\n        \"Ignoring clampToGround for KML lines without the tessellate flag.\"\n      );\n    }\n\n    polyline = defined(polyline) ? polyline.clone() : new PolylineGraphics();\n    entity.polyline = polyline;\n    polyline.positions = createPositionPropertyArrayFromAltitudeMode(\n      coordinates,\n      altitudeMode,\n      gxAltitudeMode,\n      ellipsoid\n    );\n    if (!tessellate || canExtrude) {\n      polyline.arcType = ArcType.NONE;\n    }\n  }\n\n  return true;\n}\n\nfunction processPolygon(\n  dataSource,\n  entityCollection,\n  geometryNode,\n  entity,\n  styleEntity\n) {\n  const outerBoundaryIsNode = queryFirstNode(\n    geometryNode,\n    \"outerBoundaryIs\",\n    namespaces.kml\n  );\n  let linearRingNode = queryFirstNode(\n    outerBoundaryIsNode,\n    \"LinearRing\",\n    namespaces.kml\n  );\n  let coordinatesNode = queryFirstNode(\n    linearRingNode,\n    \"coordinates\",\n    namespaces.kml\n  );\n  const ellipsoid = dataSource._ellipsoid;\n  let coordinates = readCoordinates(coordinatesNode, ellipsoid);\n  const extrude = queryBooleanValue(geometryNode, \"extrude\", namespaces.kml);\n  const altitudeMode = queryStringValue(\n    geometryNode,\n    \"altitudeMode\",\n    namespaces.kml\n  );\n  const gxAltitudeMode = queryStringValue(\n    geometryNode,\n    \"altitudeMode\",\n    namespaces.gx\n  );\n  const canExtrude = isExtrudable(altitudeMode, gxAltitudeMode);\n\n  const polygon = defined(styleEntity.polygon)\n    ? styleEntity.polygon.clone()\n    : createDefaultPolygon();\n\n  const polyline = styleEntity.polyline;\n  if (defined(polyline)) {\n    polygon.outlineColor = defined(polyline.material)\n      ? polyline.material.color\n      : Color.WHITE;\n    polygon.outlineWidth = polyline.width;\n  }\n  entity.polygon = polygon;\n\n  if (canExtrude) {\n    polygon.perPositionHeight = true;\n    polygon.extrudedHeight = extrude ? 0 : undefined;\n  } else if (!dataSource._clampToGround) {\n    polygon.height = 0;\n  }\n\n  if (defined(coordinates)) {\n    const hierarchy = new PolygonHierarchy(coordinates);\n    const innerBoundaryIsNodes = queryChildNodes(\n      geometryNode,\n      \"innerBoundaryIs\",\n      namespaces.kml\n    );\n    for (let j = 0; j < innerBoundaryIsNodes.length; j++) {\n      linearRingNode = queryChildNodes(\n        innerBoundaryIsNodes[j],\n        \"LinearRing\",\n        namespaces.kml\n      );\n      for (let k = 0; k < linearRingNode.length; k++) {\n        coordinatesNode = queryFirstNode(\n          linearRingNode[k],\n          \"coordinates\",\n          namespaces.kml\n        );\n        coordinates = readCoordinates(coordinatesNode, ellipsoid);\n        if (defined(coordinates)) {\n          hierarchy.holes.push(new PolygonHierarchy(coordinates));\n        }\n      }\n    }\n    polygon.hierarchy = hierarchy;\n  }\n\n  return true;\n}\n\nfunction processTrack(\n  dataSource,\n  entityCollection,\n  geometryNode,\n  entity,\n  styleEntity\n) {\n  const altitudeMode = queryStringValue(\n    geometryNode,\n    \"altitudeMode\",\n    namespaces.kml\n  );\n  const gxAltitudeMode = queryStringValue(\n    geometryNode,\n    \"altitudeMode\",\n    namespaces.gx\n  );\n  const coordNodes = queryChildNodes(geometryNode, \"coord\", namespaces.gx);\n  const angleNodes = queryChildNodes(geometryNode, \"angles\", namespaces.gx);\n  const timeNodes = queryChildNodes(geometryNode, \"when\", namespaces.kml);\n  const extrude = queryBooleanValue(geometryNode, \"extrude\", namespaces.kml);\n  const canExtrude = isExtrudable(altitudeMode, gxAltitudeMode);\n  const ellipsoid = dataSource._ellipsoid;\n\n  if (angleNodes.length > 0) {\n    oneTimeWarning(\n      \"kml-gx:angles\",\n      \"KML - gx:angles are not supported in gx:Tracks\"\n    );\n  }\n\n  const length = Math.min(coordNodes.length, timeNodes.length);\n  const coordinates = [];\n  const times = [];\n  for (let i = 0; i < length; i++) {\n    const position = readCoordinate(coordNodes[i].textContent, ellipsoid);\n    coordinates.push(position);\n    times.push(JulianDate.fromIso8601(timeNodes[i].textContent));\n  }\n  const property = new SampledPositionProperty();\n  property.addSamples(times, coordinates);\n  entity.position = property;\n  processPositionGraphics(\n    dataSource,\n    entity,\n    styleEntity,\n    heightReferenceFromAltitudeMode(altitudeMode, gxAltitudeMode)\n  );\n  processPathGraphics(entity, styleEntity);\n\n  entity.availability = new TimeIntervalCollection();\n\n  if (timeNodes.length > 0) {\n    entity.availability.addInterval(\n      new TimeInterval({\n        start: times[0],\n        stop: times[times.length - 1],\n      })\n    );\n  }\n\n  if (canExtrude && extrude) {\n    createDropLine(entityCollection, entity, styleEntity);\n  }\n\n  return true;\n}\n\nfunction addToMultiTrack(\n  times,\n  positions,\n  composite,\n  availability,\n  dropShowProperty,\n  extrude,\n  altitudeMode,\n  gxAltitudeMode,\n  includeEndPoints\n) {\n  const start = times[0];\n  const stop = times[times.length - 1];\n\n  const data = new SampledPositionProperty();\n  data.addSamples(times, positions);\n\n  composite.intervals.addInterval(\n    new TimeInterval({\n      start: start,\n      stop: stop,\n      isStartIncluded: includeEndPoints,\n      isStopIncluded: includeEndPoints,\n      data: createPositionPropertyFromAltitudeMode(\n        data,\n        altitudeMode,\n        gxAltitudeMode\n      ),\n    })\n  );\n  availability.addInterval(\n    new TimeInterval({\n      start: start,\n      stop: stop,\n      isStartIncluded: includeEndPoints,\n      isStopIncluded: includeEndPoints,\n    })\n  );\n  dropShowProperty.intervals.addInterval(\n    new TimeInterval({\n      start: start,\n      stop: stop,\n      isStartIncluded: includeEndPoints,\n      isStopIncluded: includeEndPoints,\n      data: extrude,\n    })\n  );\n}\n\nfunction processMultiTrack(\n  dataSource,\n  entityCollection,\n  geometryNode,\n  entity,\n  styleEntity\n) {\n  // Multitrack options do not work in GE as detailed in the spec,\n  // rather than altitudeMode being at the MultiTrack level,\n  // GE just defers all settings to the underlying track.\n\n  const interpolate = queryBooleanValue(\n    geometryNode,\n    \"interpolate\",\n    namespaces.gx\n  );\n  const trackNodes = queryChildNodes(geometryNode, \"Track\", namespaces.gx);\n\n  let times;\n  let lastStop;\n  let lastStopPosition;\n  let needDropLine = false;\n  const dropShowProperty = new TimeIntervalCollectionProperty();\n  const availability = new TimeIntervalCollection();\n  const composite = new CompositePositionProperty();\n  const ellipsoid = dataSource._ellipsoid;\n  for (let i = 0, len = trackNodes.length; i < len; i++) {\n    const trackNode = trackNodes[i];\n    const timeNodes = queryChildNodes(trackNode, \"when\", namespaces.kml);\n    const coordNodes = queryChildNodes(trackNode, \"coord\", namespaces.gx);\n    const altitudeMode = queryStringValue(\n      trackNode,\n      \"altitudeMode\",\n      namespaces.kml\n    );\n    const gxAltitudeMode = queryStringValue(\n      trackNode,\n      \"altitudeMode\",\n      namespaces.gx\n    );\n    const canExtrude = isExtrudable(altitudeMode, gxAltitudeMode);\n    const extrude = queryBooleanValue(trackNode, \"extrude\", namespaces.kml);\n\n    const length = Math.min(coordNodes.length, timeNodes.length);\n\n    const positions = [];\n    times = [];\n    for (let x = 0; x < length; x++) {\n      const position = readCoordinate(coordNodes[x].textContent, ellipsoid);\n      positions.push(position);\n      times.push(JulianDate.fromIso8601(timeNodes[x].textContent));\n    }\n\n    if (interpolate) {\n      //If we are interpolating, then we need to fill in the end of\n      //the last track and the beginning of this one with a sampled\n      //property.  From testing in Google Earth, this property\n      //is never extruded and always absolute.\n      if (defined(lastStop)) {\n        addToMultiTrack(\n          [lastStop, times[0]],\n          [lastStopPosition, positions[0]],\n          composite,\n          availability,\n          dropShowProperty,\n          false,\n          \"absolute\",\n          undefined,\n          false\n        );\n      }\n      lastStop = times[length - 1];\n      lastStopPosition = positions[positions.length - 1];\n    }\n\n    addToMultiTrack(\n      times,\n      positions,\n      composite,\n      availability,\n      dropShowProperty,\n      canExtrude && extrude,\n      altitudeMode,\n      gxAltitudeMode,\n      true\n    );\n    needDropLine = needDropLine || (canExtrude && extrude);\n  }\n\n  entity.availability = availability;\n  entity.position = composite;\n  processPositionGraphics(dataSource, entity, styleEntity);\n  processPathGraphics(entity, styleEntity);\n  if (needDropLine) {\n    createDropLine(entityCollection, entity, styleEntity);\n    entity.polyline.show = dropShowProperty;\n  }\n\n  return true;\n}\n\nconst geometryTypes = {\n  Point: processPoint,\n  LineString: processLineStringOrLinearRing,\n  LinearRing: processLineStringOrLinearRing,\n  Polygon: processPolygon,\n  Track: processTrack,\n  MultiTrack: processMultiTrack,\n  MultiGeometry: processMultiGeometry,\n  Model: processUnsupportedGeometry,\n};\n\nfunction processMultiGeometry(\n  dataSource,\n  entityCollection,\n  geometryNode,\n  entity,\n  styleEntity,\n  context\n) {\n  const childNodes = geometryNode.childNodes;\n  let hasGeometry = false;\n  for (let i = 0, len = childNodes.length; i < len; i++) {\n    const childNode = childNodes.item(i);\n    const geometryProcessor = geometryTypes[childNode.localName];\n    if (defined(geometryProcessor)) {\n      const childEntity = createEntity(childNode, entityCollection, context);\n      childEntity.parent = entity;\n      childEntity.name = entity.name;\n      childEntity.availability = entity.availability;\n      childEntity.description = entity.description;\n      childEntity.kml = entity.kml;\n      if (\n        geometryProcessor(\n          dataSource,\n          entityCollection,\n          childNode,\n          childEntity,\n          styleEntity\n        )\n      ) {\n        hasGeometry = true;\n      }\n    }\n  }\n\n  return hasGeometry;\n}\n\nfunction processUnsupportedGeometry(\n  dataSource,\n  entityCollection,\n  geometryNode,\n  entity,\n  styleEntity\n) {\n  oneTimeWarning(\n    \"kml-unsupportedGeometry\",\n    `KML - Unsupported geometry: ${geometryNode.localName}`\n  );\n  return false;\n}\n\nfunction processExtendedData(node, entity) {\n  const extendedDataNode = queryFirstNode(node, \"ExtendedData\", namespaces.kml);\n\n  if (!defined(extendedDataNode)) {\n    return undefined;\n  }\n\n  if (defined(queryFirstNode(extendedDataNode, \"SchemaData\", namespaces.kml))) {\n    oneTimeWarning(\"kml-schemaData\", \"KML - SchemaData is unsupported\");\n  }\n  if (defined(queryStringAttribute(extendedDataNode, \"xmlns:prefix\"))) {\n    oneTimeWarning(\n      \"kml-extendedData\",\n      \"KML - ExtendedData with xmlns:prefix is unsupported\"\n    );\n  }\n\n  const result = {};\n  const dataNodes = queryChildNodes(extendedDataNode, \"Data\", namespaces.kml);\n  if (defined(dataNodes)) {\n    const length = dataNodes.length;\n    for (let i = 0; i < length; i++) {\n      const dataNode = dataNodes[i];\n      const name = queryStringAttribute(dataNode, \"name\");\n      if (defined(name)) {\n        result[name] = {\n          displayName: queryStringValue(\n            dataNode,\n            \"displayName\",\n            namespaces.kml\n          ),\n          value: queryStringValue(dataNode, \"value\", namespaces.kml),\n        };\n      }\n    }\n  }\n  entity.kml.extendedData = result;\n}\n\nlet scratchDiv;\nif (typeof document !== \"undefined\") {\n  scratchDiv = document.createElement(\"div\");\n}\n\nfunction processDescription(\n  node,\n  entity,\n  styleEntity,\n  uriResolver,\n  sourceResource\n) {\n  let i;\n  let key;\n  let keys;\n\n  const kmlData = entity.kml;\n  const extendedData = kmlData.extendedData;\n  const description = queryStringValue(node, \"description\", namespaces.kml);\n\n  const balloonStyle = defaultValue(\n    entity.balloonStyle,\n    styleEntity.balloonStyle\n  );\n\n  let background = Color.WHITE;\n  let foreground = Color.BLACK;\n  let text = description;\n\n  if (defined(balloonStyle)) {\n    background = defaultValue(balloonStyle.bgColor, Color.WHITE);\n    foreground = defaultValue(balloonStyle.textColor, Color.BLACK);\n    text = defaultValue(balloonStyle.text, description);\n  }\n\n  let value;\n  if (defined(text)) {\n    text = text.replace(\"$[name]\", defaultValue(entity.name, \"\"));\n    text = text.replace(\"$[description]\", defaultValue(description, \"\"));\n    text = text.replace(\"$[address]\", defaultValue(kmlData.address, \"\"));\n    text = text.replace(\"$[Snippet]\", defaultValue(kmlData.snippet, \"\"));\n    text = text.replace(\"$[id]\", entity.id);\n\n    //While not explicitly defined by the OGC spec, in Google Earth\n    //The appearance of geDirections adds the directions to/from links\n    //We simply replace this string with nothing.\n    text = text.replace(\"$[geDirections]\", \"\");\n\n    if (defined(extendedData)) {\n      const matches = text.match(/\\$\\[.+?\\]/g);\n      if (matches !== null) {\n        for (i = 0; i < matches.length; i++) {\n          const token = matches[i];\n          let propertyName = token.substr(2, token.length - 3);\n          const isDisplayName = /\\/displayName$/.test(propertyName);\n          propertyName = propertyName.replace(/\\/displayName$/, \"\");\n\n          value = extendedData[propertyName];\n          if (defined(value)) {\n            value = isDisplayName ? value.displayName : value.value;\n          }\n          if (defined(value)) {\n            text = text.replace(token, defaultValue(value, \"\"));\n          }\n        }\n      }\n    }\n  } else if (defined(extendedData)) {\n    //If no description exists, build a table out of the extended data\n    keys = Object.keys(extendedData);\n    if (keys.length > 0) {\n      text =\n        '<table class=\"cesium-infoBox-defaultTable cesium-infoBox-defaultTable-lighter\"><tbody>';\n      for (i = 0; i < keys.length; i++) {\n        key = keys[i];\n        value = extendedData[key];\n        text += `<tr><th>${defaultValue(\n          value.displayName,\n          key\n        )}</th><td>${defaultValue(value.value, \"\")}</td></tr>`;\n      }\n      text += \"</tbody></table>\";\n    }\n  }\n\n  if (!defined(text)) {\n    //No description\n    return;\n  }\n\n  //Turns non-explicit links into clickable links.\n  text = autolinker.link(text);\n\n  //Use a temporary div to manipulate the links\n  //so that they open in a new window.\n  scratchDiv.innerHTML = text;\n  const links = scratchDiv.querySelectorAll(\"a\");\n  for (i = 0; i < links.length; i++) {\n    links[i].setAttribute(\"target\", \"_blank\");\n  }\n\n  //Rewrite any KMZ embedded urls\n  if (defined(uriResolver) && uriResolver.keys.length > 1) {\n    embedDataUris(scratchDiv, \"a\", \"href\", uriResolver);\n    embedDataUris(scratchDiv, \"link\", \"href\", uriResolver);\n    embedDataUris(scratchDiv, \"area\", \"href\", uriResolver);\n    embedDataUris(scratchDiv, \"img\", \"src\", uriResolver);\n    embedDataUris(scratchDiv, \"iframe\", \"src\", uriResolver);\n    embedDataUris(scratchDiv, \"video\", \"src\", uriResolver);\n    embedDataUris(scratchDiv, \"audio\", \"src\", uriResolver);\n    embedDataUris(scratchDiv, \"source\", \"src\", uriResolver);\n    embedDataUris(scratchDiv, \"track\", \"src\", uriResolver);\n    embedDataUris(scratchDiv, \"input\", \"src\", uriResolver);\n    embedDataUris(scratchDiv, \"embed\", \"src\", uriResolver);\n    embedDataUris(scratchDiv, \"script\", \"src\", uriResolver);\n    embedDataUris(scratchDiv, \"video\", \"poster\", uriResolver);\n  }\n\n  //Make relative urls absolute using the sourceResource\n  applyBasePath(scratchDiv, \"a\", \"href\", sourceResource);\n  applyBasePath(scratchDiv, \"link\", \"href\", sourceResource);\n  applyBasePath(scratchDiv, \"area\", \"href\", sourceResource);\n  applyBasePath(scratchDiv, \"img\", \"src\", sourceResource);\n  applyBasePath(scratchDiv, \"iframe\", \"src\", sourceResource);\n  applyBasePath(scratchDiv, \"video\", \"src\", sourceResource);\n  applyBasePath(scratchDiv, \"audio\", \"src\", sourceResource);\n  applyBasePath(scratchDiv, \"source\", \"src\", sourceResource);\n  applyBasePath(scratchDiv, \"track\", \"src\", sourceResource);\n  applyBasePath(scratchDiv, \"input\", \"src\", sourceResource);\n  applyBasePath(scratchDiv, \"embed\", \"src\", sourceResource);\n  applyBasePath(scratchDiv, \"script\", \"src\", sourceResource);\n  applyBasePath(scratchDiv, \"video\", \"poster\", sourceResource);\n\n  let tmp = '<div class=\"cesium-infoBox-description-lighter\" style=\"';\n  tmp += \"overflow:auto;\";\n  tmp += \"word-wrap:break-word;\";\n  tmp += `background-color:${background.toCssColorString()};`;\n  tmp += `color:${foreground.toCssColorString()};`;\n  tmp += '\">';\n  tmp += `${scratchDiv.innerHTML}</div>`;\n  scratchDiv.innerHTML = \"\";\n\n  //Set the final HTML as the description.\n  entity.description = tmp;\n}\n\nfunction processFeature(dataSource, featureNode, processingData) {\n  const entityCollection = processingData.entityCollection;\n  const parent = processingData.parentEntity;\n  const sourceResource = processingData.sourceResource;\n  const uriResolver = processingData.uriResolver;\n\n  const entity = createEntity(\n    featureNode,\n    entityCollection,\n    processingData.context\n  );\n  const kmlData = entity.kml;\n  const styleEntity = computeFinalStyle(\n    dataSource,\n    featureNode,\n    processingData.styleCollection,\n    sourceResource,\n    uriResolver\n  );\n\n  const name = queryStringValue(featureNode, \"name\", namespaces.kml);\n  entity.name = name;\n  entity.parent = parent;\n\n  let availability = processTimeSpan(featureNode);\n  if (!defined(availability)) {\n    availability = processTimeStamp(featureNode);\n  }\n  entity.availability = availability;\n\n  mergeAvailabilityWithParent(entity);\n\n  // Per KML spec \"A Feature is visible only if it and all its ancestors are visible.\"\n  function ancestryIsVisible(parentEntity) {\n    if (!parentEntity) {\n      return true;\n    }\n    return parentEntity.show && ancestryIsVisible(parentEntity.parent);\n  }\n\n  const visibility = queryBooleanValue(\n    featureNode,\n    \"visibility\",\n    namespaces.kml\n  );\n  entity.show = ancestryIsVisible(parent) && defaultValue(visibility, true);\n  //const open = queryBooleanValue(featureNode, 'open', namespaces.kml);\n\n  const authorNode = queryFirstNode(featureNode, \"author\", namespaces.atom);\n  const author = kmlData.author;\n  author.name = queryStringValue(authorNode, \"name\", namespaces.atom);\n  author.uri = queryStringValue(authorNode, \"uri\", namespaces.atom);\n  author.email = queryStringValue(authorNode, \"email\", namespaces.atom);\n\n  const linkNode = queryFirstNode(featureNode, \"link\", namespaces.atom);\n  const link = kmlData.link;\n  link.href = queryStringAttribute(linkNode, \"href\");\n  link.hreflang = queryStringAttribute(linkNode, \"hreflang\");\n  link.rel = queryStringAttribute(linkNode, \"rel\");\n  link.type = queryStringAttribute(linkNode, \"type\");\n  link.title = queryStringAttribute(linkNode, \"title\");\n  link.length = queryStringAttribute(linkNode, \"length\");\n\n  kmlData.address = queryStringValue(featureNode, \"address\", namespaces.kml);\n  kmlData.phoneNumber = queryStringValue(\n    featureNode,\n    \"phoneNumber\",\n    namespaces.kml\n  );\n  kmlData.snippet = queryStringValue(featureNode, \"Snippet\", namespaces.kml);\n\n  processExtendedData(featureNode, entity);\n  processDescription(\n    featureNode,\n    entity,\n    styleEntity,\n    uriResolver,\n    sourceResource\n  );\n\n  const ellipsoid = dataSource._ellipsoid;\n  processLookAt(featureNode, entity, ellipsoid);\n  processCamera(featureNode, entity, ellipsoid);\n\n  if (defined(queryFirstNode(featureNode, \"Region\", namespaces.kml))) {\n    oneTimeWarning(\"kml-region\", \"KML - Placemark Regions are unsupported\");\n  }\n\n  return {\n    entity: entity,\n    styleEntity: styleEntity,\n  };\n}\n\nfunction processDocument(dataSource, node, processingData, deferredLoading) {\n  deferredLoading.addNodes(node.childNodes, processingData);\n  deferredLoading.process();\n}\n\nfunction processFolder(dataSource, node, processingData, deferredLoading) {\n  const r = processFeature(dataSource, node, processingData);\n  const newProcessingData = clone(processingData);\n  newProcessingData.parentEntity = r.entity;\n  processDocument(dataSource, node, newProcessingData, deferredLoading);\n}\n\nfunction processPlacemark(\n  dataSource,\n  placemark,\n  processingData,\n  deferredLoading\n) {\n  const r = processFeature(dataSource, placemark, processingData);\n  const entity = r.entity;\n  const styleEntity = r.styleEntity;\n\n  let hasGeometry = false;\n  const childNodes = placemark.childNodes;\n  for (let i = 0, len = childNodes.length; i < len && !hasGeometry; i++) {\n    const childNode = childNodes.item(i);\n    const geometryProcessor = geometryTypes[childNode.localName];\n    if (defined(geometryProcessor)) {\n      // pass the placemark entity id as a context for case of defining multiple child entities together to handle case\n      // where some malformed kmls reuse the same id across placemarks, which works in GE, but is not technically to spec.\n      geometryProcessor(\n        dataSource,\n        processingData.entityCollection,\n        childNode,\n        entity,\n        styleEntity,\n        entity.id\n      );\n      hasGeometry = true;\n    }\n  }\n\n  if (!hasGeometry) {\n    entity.merge(styleEntity);\n    processPositionGraphics(dataSource, entity, styleEntity);\n  }\n}\n\nconst playlistNodeProcessors = {\n  FlyTo: processTourFlyTo,\n  Wait: processTourWait,\n  SoundCue: processTourUnsupportedNode,\n  AnimatedUpdate: processTourUnsupportedNode,\n  TourControl: processTourUnsupportedNode,\n};\n\nfunction processTour(dataSource, node, processingData, deferredLoading) {\n  const name = queryStringValue(node, \"name\", namespaces.kml);\n  const id = queryStringAttribute(node, \"id\");\n  const tour = new KmlTour(name, id);\n\n  const playlistNode = queryFirstNode(node, \"Playlist\", namespaces.gx);\n  if (playlistNode) {\n    const ellipsoid = dataSource._ellipsoid;\n    const childNodes = playlistNode.childNodes;\n    for (let i = 0; i < childNodes.length; i++) {\n      const entryNode = childNodes[i];\n      if (entryNode.localName) {\n        const playlistNodeProcessor =\n          playlistNodeProcessors[entryNode.localName];\n        if (playlistNodeProcessor) {\n          playlistNodeProcessor(tour, entryNode, ellipsoid);\n        } else {\n          console.log(\n            `Unknown KML Tour playlist entry type ${entryNode.localName}`\n          );\n        }\n      }\n    }\n  }\n\n  dataSource._kmlTours.push(tour);\n}\n\nfunction processTourUnsupportedNode(tour, entryNode) {\n  oneTimeWarning(`KML Tour unsupported node ${entryNode.localName}`);\n}\n\nfunction processTourWait(tour, entryNode) {\n  const duration = queryNumericValue(entryNode, \"duration\", namespaces.gx);\n  tour.addPlaylistEntry(new KmlTourWait(duration));\n}\n\nfunction processTourFlyTo(tour, entryNode, ellipsoid) {\n  const duration = queryNumericValue(entryNode, \"duration\", namespaces.gx);\n  const flyToMode = queryStringValue(entryNode, \"flyToMode\", namespaces.gx);\n\n  const t = { kml: {} };\n\n  processLookAt(entryNode, t, ellipsoid);\n  processCamera(entryNode, t, ellipsoid);\n\n  const view = t.kml.lookAt || t.kml.camera;\n\n  const flyto = new KmlTourFlyTo(duration, flyToMode, view);\n  tour.addPlaylistEntry(flyto);\n}\n\nfunction processCamera(featureNode, entity, ellipsoid) {\n  const camera = queryFirstNode(featureNode, \"Camera\", namespaces.kml);\n  if (defined(camera)) {\n    const lon = defaultValue(\n      queryNumericValue(camera, \"longitude\", namespaces.kml),\n      0.0\n    );\n    const lat = defaultValue(\n      queryNumericValue(camera, \"latitude\", namespaces.kml),\n      0.0\n    );\n    const altitude = defaultValue(\n      queryNumericValue(camera, \"altitude\", namespaces.kml),\n      0.0\n    );\n\n    const heading = defaultValue(\n      queryNumericValue(camera, \"heading\", namespaces.kml),\n      0.0\n    );\n    const tilt = defaultValue(\n      queryNumericValue(camera, \"tilt\", namespaces.kml),\n      0.0\n    );\n    const roll = defaultValue(\n      queryNumericValue(camera, \"roll\", namespaces.kml),\n      0.0\n    );\n\n    const position = Cartesian3.fromDegrees(lon, lat, altitude, ellipsoid);\n    const hpr = HeadingPitchRoll.fromDegrees(heading, tilt - 90.0, roll);\n\n    entity.kml.camera = new KmlCamera(position, hpr);\n  }\n}\n\nfunction processLookAt(featureNode, entity, ellipsoid) {\n  const lookAt = queryFirstNode(featureNode, \"LookAt\", namespaces.kml);\n  if (defined(lookAt)) {\n    const lon = defaultValue(\n      queryNumericValue(lookAt, \"longitude\", namespaces.kml),\n      0.0\n    );\n    const lat = defaultValue(\n      queryNumericValue(lookAt, \"latitude\", namespaces.kml),\n      0.0\n    );\n    const altitude = defaultValue(\n      queryNumericValue(lookAt, \"altitude\", namespaces.kml),\n      0.0\n    );\n    let heading = queryNumericValue(lookAt, \"heading\", namespaces.kml);\n    let tilt = queryNumericValue(lookAt, \"tilt\", namespaces.kml);\n    const range = defaultValue(\n      queryNumericValue(lookAt, \"range\", namespaces.kml),\n      0.0\n    );\n\n    tilt = CesiumMath.toRadians(defaultValue(tilt, 0.0));\n    heading = CesiumMath.toRadians(defaultValue(heading, 0.0));\n\n    const hpr = new HeadingPitchRange(\n      heading,\n      tilt - CesiumMath.PI_OVER_TWO,\n      range\n    );\n    const viewPoint = Cartesian3.fromDegrees(lon, lat, altitude, ellipsoid);\n\n    entity.kml.lookAt = new KmlLookAt(viewPoint, hpr);\n  }\n}\n\nfunction processScreenOverlay(\n  dataSource,\n  screenOverlayNode,\n  processingData,\n  deferredLoading\n) {\n  const screenOverlay = processingData.screenOverlayContainer;\n  if (!defined(screenOverlay)) {\n    return undefined;\n  }\n\n  const sourceResource = processingData.sourceResource;\n  const uriResolver = processingData.uriResolver;\n\n  const iconNode = queryFirstNode(screenOverlayNode, \"Icon\", namespaces.kml);\n  const icon = getIconHref(\n    iconNode,\n    dataSource,\n    sourceResource,\n    uriResolver,\n    false\n  );\n\n  if (!defined(icon)) {\n    return undefined;\n  }\n\n  const img = document.createElement(\"img\");\n  dataSource._screenOverlays.push(img);\n\n  img.src = icon.url;\n  img.onload = function () {\n    const styles = [\"position: absolute\"];\n\n    const screenXY = queryFirstNode(\n      screenOverlayNode,\n      \"screenXY\",\n      namespaces.kml\n    );\n    const overlayXY = queryFirstNode(\n      screenOverlayNode,\n      \"overlayXY\",\n      namespaces.kml\n    );\n    const size = queryFirstNode(screenOverlayNode, \"size\", namespaces.kml);\n\n    let x, y;\n    let xUnit, yUnit;\n    let xStyle, yStyle;\n\n    if (defined(size)) {\n      x = queryNumericAttribute(size, \"x\");\n      y = queryNumericAttribute(size, \"y\");\n      xUnit = queryStringAttribute(size, \"xunits\");\n      yUnit = queryStringAttribute(size, \"yunits\");\n\n      if (defined(x) && x !== -1 && x !== 0) {\n        if (xUnit === \"fraction\") {\n          xStyle = `width: ${Math.floor(x * 100)}%`;\n        } else if (xUnit === \"pixels\") {\n          xStyle = `width: ${x}px`;\n        }\n\n        styles.push(xStyle);\n      }\n\n      if (defined(y) && y !== -1 && y !== 0) {\n        if (yUnit === \"fraction\") {\n          yStyle = `height: ${Math.floor(y * 100)}%`;\n        } else if (yUnit === \"pixels\") {\n          yStyle = `height: ${y}px`;\n        }\n\n        styles.push(yStyle);\n      }\n    }\n\n    // set the interim style so the width/height properties get calculated\n    img.style = styles.join(\";\");\n\n    let xOrigin = 0;\n    let yOrigin = img.height;\n\n    if (defined(overlayXY)) {\n      x = queryNumericAttribute(overlayXY, \"x\");\n      y = queryNumericAttribute(overlayXY, \"y\");\n      xUnit = queryStringAttribute(overlayXY, \"xunits\");\n      yUnit = queryStringAttribute(overlayXY, \"yunits\");\n\n      if (defined(x)) {\n        if (xUnit === \"fraction\") {\n          xOrigin = x * img.width;\n        } else if (xUnit === \"pixels\") {\n          xOrigin = x;\n        } else if (xUnit === \"insetPixels\") {\n          xOrigin = x;\n        }\n      }\n\n      if (defined(y)) {\n        if (yUnit === \"fraction\") {\n          yOrigin = y * img.height;\n        } else if (yUnit === \"pixels\") {\n          yOrigin = y;\n        } else if (yUnit === \"insetPixels\") {\n          yOrigin = y;\n        }\n      }\n    }\n\n    if (defined(screenXY)) {\n      x = queryNumericAttribute(screenXY, \"x\");\n      y = queryNumericAttribute(screenXY, \"y\");\n      xUnit = queryStringAttribute(screenXY, \"xunits\");\n      yUnit = queryStringAttribute(screenXY, \"yunits\");\n\n      if (defined(x)) {\n        if (xUnit === \"fraction\") {\n          xStyle = `${\"left: \" + \"calc(\"}${Math.floor(\n            x * 100\n          )}% - ${xOrigin}px)`;\n        } else if (xUnit === \"pixels\") {\n          xStyle = `left: ${x - xOrigin}px`;\n        } else if (xUnit === \"insetPixels\") {\n          xStyle = `right: ${x - xOrigin}px`;\n        }\n\n        styles.push(xStyle);\n      }\n\n      if (defined(y)) {\n        if (yUnit === \"fraction\") {\n          yStyle = `${\"bottom: \" + \"calc(\"}${Math.floor(\n            y * 100\n          )}% - ${yOrigin}px)`;\n        } else if (yUnit === \"pixels\") {\n          yStyle = `bottom: ${y - yOrigin}px`;\n        } else if (yUnit === \"insetPixels\") {\n          yStyle = `top: ${y - yOrigin}px`;\n        }\n\n        styles.push(yStyle);\n      }\n    }\n\n    img.style = styles.join(\";\");\n  };\n\n  screenOverlay.appendChild(img);\n}\n\nfunction processGroundOverlay(\n  dataSource,\n  groundOverlay,\n  processingData,\n  deferredLoading\n) {\n  const r = processFeature(dataSource, groundOverlay, processingData);\n  const entity = r.entity;\n\n  let geometry;\n  let isLatLonQuad = false;\n\n  const ellipsoid = dataSource._ellipsoid;\n  const positions = readCoordinates(\n    queryFirstNode(groundOverlay, \"LatLonQuad\", namespaces.gx),\n    ellipsoid\n  );\n  const zIndex = queryNumericValue(groundOverlay, \"drawOrder\", namespaces.kml);\n  if (defined(positions)) {\n    geometry = createDefaultPolygon();\n    geometry.hierarchy = new PolygonHierarchy(positions);\n    geometry.zIndex = zIndex;\n    entity.polygon = geometry;\n    isLatLonQuad = true;\n  } else {\n    geometry = new RectangleGraphics();\n    geometry.zIndex = zIndex;\n    entity.rectangle = geometry;\n\n    const latLonBox = queryFirstNode(\n      groundOverlay,\n      \"LatLonBox\",\n      namespaces.kml\n    );\n    if (defined(latLonBox)) {\n      let west = queryNumericValue(latLonBox, \"west\", namespaces.kml);\n      let south = queryNumericValue(latLonBox, \"south\", namespaces.kml);\n      let east = queryNumericValue(latLonBox, \"east\", namespaces.kml);\n      let north = queryNumericValue(latLonBox, \"north\", namespaces.kml);\n\n      if (defined(west)) {\n        west = CesiumMath.negativePiToPi(CesiumMath.toRadians(west));\n      }\n      if (defined(south)) {\n        south = CesiumMath.clampToLatitudeRange(CesiumMath.toRadians(south));\n      }\n      if (defined(east)) {\n        east = CesiumMath.negativePiToPi(CesiumMath.toRadians(east));\n      }\n      if (defined(north)) {\n        north = CesiumMath.clampToLatitudeRange(CesiumMath.toRadians(north));\n      }\n      geometry.coordinates = new Rectangle(west, south, east, north);\n\n      const rotation = queryNumericValue(latLonBox, \"rotation\", namespaces.kml);\n      if (defined(rotation)) {\n        const rotationRadians = CesiumMath.toRadians(rotation);\n        geometry.rotation = rotationRadians;\n        geometry.stRotation = rotationRadians;\n      }\n    }\n  }\n\n  const iconNode = queryFirstNode(groundOverlay, \"Icon\", namespaces.kml);\n  const href = getIconHref(\n    iconNode,\n    dataSource,\n    processingData.sourceResource,\n    processingData.uriResolver,\n    true\n  );\n  if (defined(href)) {\n    if (isLatLonQuad) {\n      oneTimeWarning(\n        \"kml-gx:LatLonQuad\",\n        \"KML - gx:LatLonQuad Icon does not support texture projection.\"\n      );\n    }\n    const x = queryNumericValue(iconNode, \"x\", namespaces.gx);\n    const y = queryNumericValue(iconNode, \"y\", namespaces.gx);\n    const w = queryNumericValue(iconNode, \"w\", namespaces.gx);\n    const h = queryNumericValue(iconNode, \"h\", namespaces.gx);\n\n    if (defined(x) || defined(y) || defined(w) || defined(h)) {\n      oneTimeWarning(\n        \"kml-groundOverlay-xywh\",\n        \"KML - gx:x, gx:y, gx:w, gx:h aren't supported for GroundOverlays\"\n      );\n    }\n\n    geometry.material = href;\n    geometry.material.color = queryColorValue(\n      groundOverlay,\n      \"color\",\n      namespaces.kml\n    );\n    geometry.material.transparent = true;\n  } else {\n    geometry.material = queryColorValue(groundOverlay, \"color\", namespaces.kml);\n  }\n\n  let altitudeMode = queryStringValue(\n    groundOverlay,\n    \"altitudeMode\",\n    namespaces.kml\n  );\n\n  if (defined(altitudeMode)) {\n    if (altitudeMode === \"absolute\") {\n      //Use height above ellipsoid until we support MSL.\n      geometry.height = queryNumericValue(\n        groundOverlay,\n        \"altitude\",\n        namespaces.kml\n      );\n      geometry.zIndex = undefined;\n    } else if (altitudeMode !== \"clampToGround\") {\n      oneTimeWarning(\n        \"kml-altitudeMode-unknown\",\n        `KML - Unknown altitudeMode: ${altitudeMode}`\n      );\n    }\n    // else just use the default of 0 until we support 'clampToGround'\n  } else {\n    altitudeMode = queryStringValue(\n      groundOverlay,\n      \"altitudeMode\",\n      namespaces.gx\n    );\n    if (altitudeMode === \"relativeToSeaFloor\") {\n      oneTimeWarning(\n        \"kml-altitudeMode-relativeToSeaFloor\",\n        \"KML - altitudeMode relativeToSeaFloor is currently not supported, treating as absolute.\"\n      );\n      geometry.height = queryNumericValue(\n        groundOverlay,\n        \"altitude\",\n        namespaces.kml\n      );\n      geometry.zIndex = undefined;\n    } else if (altitudeMode === \"clampToSeaFloor\") {\n      oneTimeWarning(\n        \"kml-altitudeMode-clampToSeaFloor\",\n        \"KML - altitudeMode clampToSeaFloor is currently not supported, treating as clampToGround.\"\n      );\n    } else if (defined(altitudeMode)) {\n      oneTimeWarning(\n        \"kml-altitudeMode-unknown\",\n        `KML - Unknown altitudeMode: ${altitudeMode}`\n      );\n    }\n  }\n}\n\nfunction processUnsupportedFeature(\n  dataSource,\n  node,\n  processingData,\n  deferredLoading\n) {\n  dataSource._unsupportedNode.raiseEvent(\n    dataSource,\n    processingData.parentEntity,\n    node,\n    processingData.entityCollection,\n    processingData.styleCollection,\n    processingData.sourceResource,\n    processingData.uriResolver\n  );\n  oneTimeWarning(\n    `kml-unsupportedFeature-${node.nodeName}`,\n    `KML - Unsupported feature: ${node.nodeName}`\n  );\n}\n\nconst RefreshMode = {\n  INTERVAL: 0,\n  EXPIRE: 1,\n  STOP: 2,\n};\n\nfunction cleanupString(s) {\n  if (!defined(s) || s.length === 0) {\n    return \"\";\n  }\n\n  const sFirst = s[0];\n  if (sFirst === \"&\" || sFirst === \"?\") {\n    s = s.substring(1);\n  }\n\n  return s;\n}\n\nconst zeroRectangle = new Rectangle();\nconst scratchCartographic = new Cartographic();\nconst scratchCartesian2 = new Cartesian2();\nconst scratchCartesian3 = new Cartesian3();\n\nfunction processNetworkLinkQueryString(\n  resource,\n  camera,\n  canvas,\n  viewBoundScale,\n  bbox,\n  ellipsoid\n) {\n  function fixLatitude(value) {\n    if (value < -CesiumMath.PI_OVER_TWO) {\n      return -CesiumMath.PI_OVER_TWO;\n    } else if (value > CesiumMath.PI_OVER_TWO) {\n      return CesiumMath.PI_OVER_TWO;\n    }\n    return value;\n  }\n\n  function fixLongitude(value) {\n    if (value > CesiumMath.PI) {\n      return value - CesiumMath.TWO_PI;\n    } else if (value < -CesiumMath.PI) {\n      return value + CesiumMath.TWO_PI;\n    }\n\n    return value;\n  }\n\n  let queryString = objectToQuery(resource.queryParameters);\n\n  // objectToQuery escapes [ and ], so fix that\n  queryString = queryString.replace(/%5B/g, \"[\").replace(/%5D/g, \"]\");\n\n  if (defined(camera) && camera._mode !== SceneMode.MORPHING) {\n    let centerCartesian;\n    let centerCartographic;\n\n    bbox = defaultValue(bbox, zeroRectangle);\n    if (defined(canvas)) {\n      scratchCartesian2.x = canvas.clientWidth * 0.5;\n      scratchCartesian2.y = canvas.clientHeight * 0.5;\n      centerCartesian = camera.pickEllipsoid(\n        scratchCartesian2,\n        ellipsoid,\n        scratchCartesian3\n      );\n    }\n\n    if (defined(centerCartesian)) {\n      centerCartographic = ellipsoid.cartesianToCartographic(\n        centerCartesian,\n        scratchCartographic\n      );\n    } else {\n      centerCartographic = Rectangle.center(bbox, scratchCartographic);\n      centerCartesian = ellipsoid.cartographicToCartesian(centerCartographic);\n    }\n\n    if (\n      defined(viewBoundScale) &&\n      !CesiumMath.equalsEpsilon(viewBoundScale, 1.0, CesiumMath.EPSILON9)\n    ) {\n      const newHalfWidth = bbox.width * viewBoundScale * 0.5;\n      const newHalfHeight = bbox.height * viewBoundScale * 0.5;\n      bbox = new Rectangle(\n        fixLongitude(centerCartographic.longitude - newHalfWidth),\n        fixLatitude(centerCartographic.latitude - newHalfHeight),\n        fixLongitude(centerCartographic.longitude + newHalfWidth),\n        fixLatitude(centerCartographic.latitude + newHalfHeight)\n      );\n    }\n\n    queryString = queryString.replace(\n      \"[bboxWest]\",\n      CesiumMath.toDegrees(bbox.west).toString()\n    );\n    queryString = queryString.replace(\n      \"[bboxSouth]\",\n      CesiumMath.toDegrees(bbox.south).toString()\n    );\n    queryString = queryString.replace(\n      \"[bboxEast]\",\n      CesiumMath.toDegrees(bbox.east).toString()\n    );\n    queryString = queryString.replace(\n      \"[bboxNorth]\",\n      CesiumMath.toDegrees(bbox.north).toString()\n    );\n\n    const lon = CesiumMath.toDegrees(centerCartographic.longitude).toString();\n    const lat = CesiumMath.toDegrees(centerCartographic.latitude).toString();\n    queryString = queryString.replace(\"[lookatLon]\", lon);\n    queryString = queryString.replace(\"[lookatLat]\", lat);\n    queryString = queryString.replace(\n      \"[lookatTilt]\",\n      CesiumMath.toDegrees(camera.pitch).toString()\n    );\n    queryString = queryString.replace(\n      \"[lookatHeading]\",\n      CesiumMath.toDegrees(camera.heading).toString()\n    );\n    queryString = queryString.replace(\n      \"[lookatRange]\",\n      Cartesian3.distance(camera.positionWC, centerCartesian)\n    );\n    queryString = queryString.replace(\"[lookatTerrainLon]\", lon);\n    queryString = queryString.replace(\"[lookatTerrainLat]\", lat);\n    queryString = queryString.replace(\n      \"[lookatTerrainAlt]\",\n      centerCartographic.height.toString()\n    );\n\n    ellipsoid.cartesianToCartographic(camera.positionWC, scratchCartographic);\n    queryString = queryString.replace(\n      \"[cameraLon]\",\n      CesiumMath.toDegrees(scratchCartographic.longitude).toString()\n    );\n    queryString = queryString.replace(\n      \"[cameraLat]\",\n      CesiumMath.toDegrees(scratchCartographic.latitude).toString()\n    );\n    queryString = queryString.replace(\n      \"[cameraAlt]\",\n      CesiumMath.toDegrees(scratchCartographic.height).toString()\n    );\n\n    const frustum = camera.frustum;\n    const aspectRatio = frustum.aspectRatio;\n    let horizFov = \"\";\n    let vertFov = \"\";\n    if (defined(aspectRatio)) {\n      const fov = CesiumMath.toDegrees(frustum.fov);\n      if (aspectRatio > 1.0) {\n        horizFov = fov;\n        vertFov = fov / aspectRatio;\n      } else {\n        vertFov = fov;\n        horizFov = fov * aspectRatio;\n      }\n    }\n    queryString = queryString.replace(\"[horizFov]\", horizFov.toString());\n    queryString = queryString.replace(\"[vertFov]\", vertFov.toString());\n  } else {\n    queryString = queryString.replace(\"[bboxWest]\", \"-180\");\n    queryString = queryString.replace(\"[bboxSouth]\", \"-90\");\n    queryString = queryString.replace(\"[bboxEast]\", \"180\");\n    queryString = queryString.replace(\"[bboxNorth]\", \"90\");\n\n    queryString = queryString.replace(\"[lookatLon]\", \"\");\n    queryString = queryString.replace(\"[lookatLat]\", \"\");\n    queryString = queryString.replace(\"[lookatRange]\", \"\");\n    queryString = queryString.replace(\"[lookatTilt]\", \"\");\n    queryString = queryString.replace(\"[lookatHeading]\", \"\");\n    queryString = queryString.replace(\"[lookatTerrainLon]\", \"\");\n    queryString = queryString.replace(\"[lookatTerrainLat]\", \"\");\n    queryString = queryString.replace(\"[lookatTerrainAlt]\", \"\");\n\n    queryString = queryString.replace(\"[cameraLon]\", \"\");\n    queryString = queryString.replace(\"[cameraLat]\", \"\");\n    queryString = queryString.replace(\"[cameraAlt]\", \"\");\n    queryString = queryString.replace(\"[horizFov]\", \"\");\n    queryString = queryString.replace(\"[vertFov]\", \"\");\n  }\n\n  if (defined(canvas)) {\n    queryString = queryString.replace(\"[horizPixels]\", canvas.clientWidth);\n    queryString = queryString.replace(\"[vertPixels]\", canvas.clientHeight);\n  } else {\n    queryString = queryString.replace(\"[horizPixels]\", \"\");\n    queryString = queryString.replace(\"[vertPixels]\", \"\");\n  }\n\n  queryString = queryString.replace(\"[terrainEnabled]\", \"1\");\n  queryString = queryString.replace(\"[clientVersion]\", \"1\");\n  queryString = queryString.replace(\"[kmlVersion]\", \"2.2\");\n  queryString = queryString.replace(\"[clientName]\", \"Cesium\");\n  queryString = queryString.replace(\"[language]\", \"English\");\n\n  resource.setQueryParameters(queryToObject(queryString));\n}\n\nfunction processNetworkLink(dataSource, node, processingData, deferredLoading) {\n  const r = processFeature(dataSource, node, processingData);\n  const networkEntity = r.entity;\n\n  const sourceResource = processingData.sourceResource;\n  const uriResolver = processingData.uriResolver;\n\n  let link = queryFirstNode(node, \"Link\", namespaces.kml);\n\n  if (!defined(link)) {\n    link = queryFirstNode(node, \"Url\", namespaces.kml);\n  }\n  if (defined(link)) {\n    let href = queryStringValue(link, \"href\", namespaces.kml);\n    let viewRefreshMode;\n    let viewBoundScale;\n    if (defined(href)) {\n      let newSourceUri = href;\n      href = resolveHref(href, sourceResource, processingData.uriResolver);\n\n      // We need to pass in the original path if resolveHref returns a data uri because the network link\n      //  references a document in a KMZ archive\n      if (/^data:/.test(href.getUrlComponent())) {\n        // So if sourceUri isn't the kmz file, then its another kml in the archive, so resolve it\n        if (!/\\.kmz/i.test(sourceResource.getUrlComponent())) {\n          newSourceUri = sourceResource.getDerivedResource({\n            url: newSourceUri,\n          });\n        }\n      } else {\n        newSourceUri = href.clone(); // Not a data uri so use the fully qualified uri\n        viewRefreshMode = queryStringValue(\n          link,\n          \"viewRefreshMode\",\n          namespaces.kml\n        );\n        viewBoundScale = defaultValue(\n          queryStringValue(link, \"viewBoundScale\", namespaces.kml),\n          1.0\n        );\n        const defaultViewFormat =\n          viewRefreshMode === \"onStop\"\n            ? \"BBOX=[bboxWest],[bboxSouth],[bboxEast],[bboxNorth]\"\n            : \"\";\n        const viewFormat = defaultValue(\n          queryStringValue(link, \"viewFormat\", namespaces.kml),\n          defaultViewFormat\n        );\n        const httpQuery = queryStringValue(link, \"httpQuery\", namespaces.kml);\n        if (defined(viewFormat)) {\n          href.setQueryParameters(queryToObject(cleanupString(viewFormat)));\n        }\n        if (defined(httpQuery)) {\n          href.setQueryParameters(queryToObject(cleanupString(httpQuery)));\n        }\n\n        const ellipsoid = dataSource._ellipsoid;\n        processNetworkLinkQueryString(\n          href,\n          dataSource.camera,\n          dataSource.canvas,\n          viewBoundScale,\n          dataSource._lastCameraView.bbox,\n          ellipsoid\n        );\n      }\n\n      const options = {\n        sourceUri: newSourceUri,\n        uriResolver: uriResolver,\n        context: networkEntity.id,\n        screenOverlayContainer: processingData.screenOverlayContainer,\n      };\n      const networkLinkCollection = new EntityCollection();\n      const promise = load(dataSource, networkLinkCollection, href, options)\n        .then(function (rootElement) {\n          const entities = dataSource._entityCollection;\n          const newEntities = networkLinkCollection.values;\n          entities.suspendEvents();\n          for (let i = 0; i < newEntities.length; i++) {\n            const newEntity = newEntities[i];\n            if (!defined(newEntity.parent)) {\n              newEntity.parent = networkEntity;\n              mergeAvailabilityWithParent(newEntity);\n            }\n\n            entities.add(newEntity);\n          }\n          entities.resumeEvents();\n\n          // Add network links to a list if we need they will need to be updated\n          const refreshMode = queryStringValue(\n            link,\n            \"refreshMode\",\n            namespaces.kml\n          );\n          let refreshInterval = defaultValue(\n            queryNumericValue(link, \"refreshInterval\", namespaces.kml),\n            0\n          );\n          if (\n            (refreshMode === \"onInterval\" && refreshInterval > 0) ||\n            refreshMode === \"onExpire\" ||\n            viewRefreshMode === \"onStop\"\n          ) {\n            const networkLinkControl = queryFirstNode(\n              rootElement,\n              \"NetworkLinkControl\",\n              namespaces.kml\n            );\n            const hasNetworkLinkControl = defined(networkLinkControl);\n\n            const now = JulianDate.now();\n            const networkLinkInfo = {\n              id: createGuid(),\n              href: href,\n              cookie: {},\n              lastUpdated: now,\n              updating: false,\n              entity: networkEntity,\n              viewBoundScale: viewBoundScale,\n              needsUpdate: false,\n              cameraUpdateTime: now,\n            };\n\n            let minRefreshPeriod = 0;\n            if (hasNetworkLinkControl) {\n              networkLinkInfo.cookie = queryToObject(\n                defaultValue(\n                  queryStringValue(\n                    networkLinkControl,\n                    \"cookie\",\n                    namespaces.kml\n                  ),\n                  \"\"\n                )\n              );\n              minRefreshPeriod = defaultValue(\n                queryNumericValue(\n                  networkLinkControl,\n                  \"minRefreshPeriod\",\n                  namespaces.kml\n                ),\n                0\n              );\n            }\n\n            if (refreshMode === \"onInterval\") {\n              if (hasNetworkLinkControl) {\n                refreshInterval = Math.max(minRefreshPeriod, refreshInterval);\n              }\n              networkLinkInfo.refreshMode = RefreshMode.INTERVAL;\n              networkLinkInfo.time = refreshInterval;\n            } else if (refreshMode === \"onExpire\") {\n              let expires;\n              if (hasNetworkLinkControl) {\n                expires = queryStringValue(\n                  networkLinkControl,\n                  \"expires\",\n                  namespaces.kml\n                );\n              }\n              if (defined(expires)) {\n                try {\n                  const date = JulianDate.fromIso8601(expires);\n                  const diff = JulianDate.secondsDifference(date, now);\n                  if (diff > 0 && diff < minRefreshPeriod) {\n                    JulianDate.addSeconds(now, minRefreshPeriod, date);\n                  }\n                  networkLinkInfo.refreshMode = RefreshMode.EXPIRE;\n                  networkLinkInfo.time = date;\n                } catch (e) {\n                  oneTimeWarning(\n                    \"kml-refreshMode-onInterval-onExpire\",\n                    \"KML - NetworkLinkControl expires is not a valid date\"\n                  );\n                }\n              } else {\n                oneTimeWarning(\n                  \"kml-refreshMode-onExpire\",\n                  \"KML - refreshMode of onExpire requires the NetworkLinkControl to have an expires element\"\n                );\n              }\n            } else if (defined(dataSource.camera)) {\n              // Only allow onStop refreshes if we have a camera\n              networkLinkInfo.refreshMode = RefreshMode.STOP;\n              networkLinkInfo.time = defaultValue(\n                queryNumericValue(link, \"viewRefreshTime\", namespaces.kml),\n                0\n              );\n            } else {\n              oneTimeWarning(\n                \"kml-refrehMode-onStop-noCamera\",\n                \"A NetworkLink with viewRefreshMode=onStop requires the `camera` property to be defined.\"\n              );\n            }\n\n            if (defined(networkLinkInfo.refreshMode)) {\n              dataSource._networkLinks.set(networkLinkInfo.id, networkLinkInfo);\n            }\n          } else if (viewRefreshMode === \"onRegion\") {\n            oneTimeWarning(\n              \"kml-refrehMode-onRegion\",\n              \"KML - Unsupported viewRefreshMode: onRegion\"\n            );\n          }\n        })\n        .catch(function (error) {\n          oneTimeWarning(`An error occured during loading ${href.url}`);\n          dataSource._error.raiseEvent(dataSource, error);\n        });\n\n      deferredLoading.addPromise(promise);\n    }\n  }\n}\n\nfunction processFeatureNode(dataSource, node, processingData, deferredLoading) {\n  const featureProcessor = featureTypes[node.localName];\n  if (defined(featureProcessor)) {\n    return featureProcessor(dataSource, node, processingData, deferredLoading);\n  }\n\n  return processUnsupportedFeature(\n    dataSource,\n    node,\n    processingData,\n    deferredLoading\n  );\n}\n\nfunction loadKml(\n  dataSource,\n  entityCollection,\n  kml,\n  sourceResource,\n  uriResolver,\n  screenOverlayContainer,\n  context\n) {\n  entityCollection.removeAll();\n\n  const documentElement = kml.documentElement;\n  const document =\n    documentElement.localName === \"Document\"\n      ? documentElement\n      : queryFirstNode(documentElement, \"Document\", namespaces.kml);\n  let name = queryStringValue(document, \"name\", namespaces.kml);\n  if (!defined(name)) {\n    name = getFilenameFromUri(sourceResource.getUrlComponent());\n  }\n\n  // Only set the name from the root document\n  if (!defined(dataSource._name)) {\n    dataSource._name = name;\n  }\n\n  const deferredLoading = new KmlDataSource._DeferredLoading(dataSource);\n  const styleCollection = new EntityCollection(dataSource);\n  return Promise.all(\n    processStyles(\n      dataSource,\n      kml,\n      styleCollection,\n      sourceResource,\n      false,\n      uriResolver\n    )\n  ).then(function () {\n    let element = kml.documentElement;\n    if (element.localName === \"kml\") {\n      const childNodes = element.childNodes;\n      for (let i = 0; i < childNodes.length; i++) {\n        const tmp = childNodes[i];\n        if (defined(featureTypes[tmp.localName])) {\n          element = tmp;\n          break;\n        }\n      }\n    }\n\n    const processingData = {\n      parentEntity: undefined,\n      entityCollection: entityCollection,\n      styleCollection: styleCollection,\n      sourceResource: sourceResource,\n      uriResolver: uriResolver,\n      context: context,\n      screenOverlayContainer: screenOverlayContainer,\n    };\n\n    entityCollection.suspendEvents();\n    processFeatureNode(dataSource, element, processingData, deferredLoading);\n    entityCollection.resumeEvents();\n\n    return deferredLoading.wait().then(function () {\n      return kml.documentElement;\n    });\n  });\n}\n\nfunction loadKmz(\n  dataSource,\n  entityCollection,\n  blob,\n  sourceResource,\n  screenOverlayContainer\n) {\n  const zWorkerUrl = buildModuleUrl(\"ThirdParty/Workers/z-worker-pako.js\");\n  zip.configure({\n    workerScripts: {\n      deflate: [zWorkerUrl, \"./pako_deflate.min.js\"],\n      inflate: [zWorkerUrl, \"./pako_inflate.min.js\"],\n    },\n  });\n\n  const reader = new zip.ZipReader(new zip.BlobReader(blob));\n  return Promise.resolve(reader.getEntries()).then(function (entries) {\n    const promises = [];\n    const uriResolver = {};\n    let docEntry;\n    for (let i = 0; i < entries.length; i++) {\n      const entry = entries[i];\n      if (!entry.directory) {\n        if (/\\.kml$/i.test(entry.filename)) {\n          // We use the first KML document we come across\n          //  https://developers.google.com/kml/documentation/kmzarchives\n          // Unless we come across a .kml file at the root of the archive because GE does this\n          if (!defined(docEntry) || !/\\//i.test(entry.filename)) {\n            if (defined(docEntry)) {\n              // We found one at the root so load the initial kml as a data uri\n              promises.push(loadDataUriFromZip(docEntry, uriResolver));\n            }\n            docEntry = entry;\n          } else {\n            // Wasn't the first kml and wasn't at the root\n            promises.push(loadDataUriFromZip(entry, uriResolver));\n          }\n        } else {\n          promises.push(loadDataUriFromZip(entry, uriResolver));\n        }\n      }\n    }\n\n    // Now load the root KML document\n    if (defined(docEntry)) {\n      promises.push(loadXmlFromZip(docEntry, uriResolver));\n    }\n    return Promise.all(promises).then(function () {\n      reader.close();\n      if (!defined(uriResolver.kml)) {\n        throw new RuntimeError(\"KMZ file does not contain a KML document.\");\n      }\n      uriResolver.keys = Object.keys(uriResolver);\n      return loadKml(\n        dataSource,\n        entityCollection,\n        uriResolver.kml,\n        sourceResource,\n        uriResolver,\n        screenOverlayContainer\n      );\n    });\n  });\n}\n\nfunction load(dataSource, entityCollection, data, options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  let sourceUri = options.sourceUri;\n  const uriResolver = options.uriResolver;\n  const context = options.context;\n  let screenOverlayContainer = options.screenOverlayContainer;\n\n  let promise = data;\n  if (typeof data === \"string\" || data instanceof Resource) {\n    data = Resource.createIfNeeded(data);\n    promise = data.fetchBlob();\n    sourceUri = defaultValue(sourceUri, data.clone());\n\n    // Add resource credits to our list of credits to display\n    const resourceCredits = dataSource._resourceCredits;\n    const credits = data.credits;\n    if (defined(credits)) {\n      const length = credits.length;\n      for (let i = 0; i < length; i++) {\n        resourceCredits.push(credits[i]);\n      }\n    }\n  } else {\n    sourceUri = defaultValue(sourceUri, Resource.DEFAULT.clone());\n  }\n\n  sourceUri = Resource.createIfNeeded(sourceUri);\n\n  if (defined(screenOverlayContainer)) {\n    screenOverlayContainer = getElement(screenOverlayContainer);\n  }\n\n  return Promise.resolve(promise)\n    .then(function (dataToLoad) {\n      if (dataToLoad instanceof Blob) {\n        return isZipFile(dataToLoad).then(function (isZip) {\n          if (isZip) {\n            return loadKmz(\n              dataSource,\n              entityCollection,\n              dataToLoad,\n              sourceUri,\n              screenOverlayContainer\n            );\n          }\n          return readBlobAsText(dataToLoad).then(function (text) {\n            //There's no official way to validate if a parse was successful.\n            //The following check detects the error on various browsers.\n\n            //Insert missing namespaces\n            text = insertNamespaces(text);\n\n            //Remove Duplicate Namespaces\n            text = removeDuplicateNamespaces(text);\n\n            //IE raises an exception\n            let kml;\n            let error;\n            try {\n              kml = parser.parseFromString(text, \"application/xml\");\n            } catch (e) {\n              error = e.toString();\n            }\n\n            //The parse succeeds on Chrome and Firefox, but the error\n            //handling is different in each.\n            if (\n              defined(error) ||\n              kml.body ||\n              kml.documentElement.tagName === \"parsererror\"\n            ) {\n              //Firefox has error information as the firstChild nodeValue.\n              let msg = defined(error)\n                ? error\n                : kml.documentElement.firstChild.nodeValue;\n\n              //Chrome has it in the body text.\n              if (!msg) {\n                msg = kml.body.innerText;\n              }\n\n              //Return the error\n              throw new RuntimeError(msg);\n            }\n            return loadKml(\n              dataSource,\n              entityCollection,\n              kml,\n              sourceUri,\n              uriResolver,\n              screenOverlayContainer,\n              context\n            );\n          });\n        });\n      }\n      return loadKml(\n        dataSource,\n        entityCollection,\n        dataToLoad,\n        sourceUri,\n        uriResolver,\n        screenOverlayContainer,\n        context\n      );\n    })\n    .catch(function (error) {\n      dataSource._error.raiseEvent(dataSource, error);\n      console.log(error);\n      return Promise.reject(error);\n    });\n}\n\n// NOTE: LoadOptions properties are repeated in ConstructorOptions because some\n// tooling does not support \"base types\" for @typedef.  Remove if/when\n// https://github.com/microsoft/TypeScript/issues/20077 and/or\n// https://github.com/jsdoc/jsdoc/issues/1199 actually get resolved\n/**\n * @typedef {Object} KmlDataSource.LoadOptions\n *\n * Initialization options for the `load` method.\n *\n * @property {String} [sourceUri] Overrides the url to use for resolving relative links and other KML network features.\n * @property {Boolean} [clampToGround=false] true if we want the geometry features (Polygons, LineStrings and LinearRings) clamped to the ground.\n * @property {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The global ellipsoid used for geographical calculations.\n * @property {Element|String} [screenOverlayContainer] A container for ScreenOverlay images.\n */\n\n/**\n * @typedef {Object} KmlDataSource.ConstructorOptions\n *\n * Options for constructing a new KmlDataSource, or calling the static `load` method.\n *\n * @property {Camera} [camera] The camera that is used for viewRefreshModes and sending camera properties to network links.\n * @property {HTMLCanvasElement} [canvas] The canvas that is used for sending viewer properties to network links.\n * @property {Credit|String} [credit] A credit for the data source, which is displayed on the canvas.\n *\n * @property {String} [sourceUri] Overrides the url to use for resolving relative links and other KML network features.\n * @property {Boolean} [clampToGround=false] true if we want the geometry features (Polygons, LineStrings and LinearRings) clamped to the ground.\n * @property {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The global ellipsoid used for geographical calculations.\n * @property {Element|String} [screenOverlayContainer] A container for ScreenOverlay images.\n\n*/\n\n/**\n * A {@link DataSource} which processes Keyhole Markup Language 2.2 (KML).\n * <p>\n * KML support in Cesium is incomplete, but a large amount of the standard,\n * as well as Google's <code>gx</code> extension namespace, is supported. See Github issue\n * {@link https://github.com/CesiumGS/cesium/issues/873|#873} for a\n * detailed list of what is and isn't supported. Cesium will also write information to the\n * console when it encounters most unsupported features.\n * </p>\n * <p>\n * Non visual feature data, such as <code>atom:author</code> and <code>ExtendedData</code>\n * is exposed via an instance of {@link KmlFeatureData}, which is added to each {@link Entity}\n * under the <code>kml</code> property.\n * </p>\n *\n * @alias KmlDataSource\n * @constructor\n *\n * @param {KmlDataSource.ConstructorOptions} [options] Object describing initialization options\n *\n * @see {@link http://www.opengeospatial.org/standards/kml/|Open Geospatial Consortium KML Standard}\n * @see {@link https://developers.google.com/kml/|Google KML Documentation}\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=KML.html|Cesium Sandcastle KML Demo}\n *\n * @example\n * const viewer = new Cesium.Viewer('cesiumContainer');\n * viewer.dataSources.add(Cesium.KmlDataSource.load('../../SampleData/facilities.kmz',\n *      {\n *           camera: viewer.scene.camera,\n *           canvas: viewer.scene.canvas\n *      })\n * );\n */\nfunction KmlDataSource(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const camera = options.camera;\n  const canvas = options.canvas;\n\n  this._changed = new Event();\n  this._error = new Event();\n  this._loading = new Event();\n  this._refresh = new Event();\n  this._unsupportedNode = new Event();\n\n  this._clock = undefined;\n  this._entityCollection = new EntityCollection(this);\n  this._name = undefined;\n  this._isLoading = false;\n  this._pinBuilder = new PinBuilder();\n  this._networkLinks = new AssociativeArray();\n  this._entityCluster = new EntityCluster();\n\n  /**\n   * The current size of this Canvas will be used to populate the Link parameters\n   * for client height and width.\n   *\n   * @type {HTMLCanvasElement | undefined}\n   */\n  this.canvas = canvas;\n\n  /**\n   * The position and orientation of this {@link Camera} will be used to\n   * populate various camera parameters when making network requests.\n   * Camera movement will determine when to trigger NetworkLink refresh if\n   * <code>viewRefreshMode</code> is <code>onStop</code>.\n   *\n   * @type {Camera | undefined}\n   */\n  this.camera = camera;\n\n  this._lastCameraView = {\n    position: defined(camera) ? Cartesian3.clone(camera.positionWC) : undefined,\n    direction: defined(camera)\n      ? Cartesian3.clone(camera.directionWC)\n      : undefined,\n    up: defined(camera) ? Cartesian3.clone(camera.upWC) : undefined,\n    bbox: defined(camera)\n      ? camera.computeViewRectangle()\n      : Rectangle.clone(Rectangle.MAX_VALUE),\n  };\n\n  this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n\n  // User specified credit\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  this._credit = credit;\n\n  // Create a list of Credit's from the resource that the user can't remove\n  this._resourceCredits = [];\n\n  this._kmlTours = [];\n\n  this._screenOverlays = [];\n}\n\n/**\n * Creates a Promise to a new instance loaded with the provided KML data.\n *\n * @param {Resource|String|Document|Blob} data A url, parsed KML document, or Blob containing binary KMZ data or a parsed KML document.\n * @param {KmlDataSource.ConstructorOptions} [options] An object specifying configuration options\n *\n * @returns {Promise.<KmlDataSource>} A promise that will resolve to a new KmlDataSource instance once the KML is loaded.\n */\nKmlDataSource.load = function (data, options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const dataSource = new KmlDataSource(options);\n  return dataSource.load(data, options);\n};\n\nObject.defineProperties(KmlDataSource.prototype, {\n  /**\n   * Gets or sets a human-readable name for this instance.\n   * This will be automatically be set to the KML document name on load.\n   * @memberof KmlDataSource.prototype\n   * @type {String}\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n    set: function (value) {\n      if (this._name !== value) {\n        this._name = value;\n        this._changed.raiseEvent(this);\n      }\n    },\n  },\n  /**\n   * Gets the clock settings defined by the loaded KML. This represents the total\n   * availability interval for all time-dynamic data. If the KML does not contain\n   * time-dynamic data, this value is undefined.\n   * @memberof KmlDataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    get: function () {\n      return this._clock;\n    },\n  },\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof KmlDataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: function () {\n      return this._entityCollection;\n    },\n  },\n  /**\n   * Gets a value indicating if the data source is currently loading data.\n   * @memberof KmlDataSource.prototype\n   * @type {Boolean}\n   */\n  isLoading: {\n    get: function () {\n      return this._isLoading;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof KmlDataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: function () {\n      return this._changed;\n    },\n  },\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof KmlDataSource.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: function () {\n      return this._error;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the data source either starts or stops loading.\n   * @memberof KmlDataSource.prototype\n   * @type {Event}\n   */\n  loadingEvent: {\n    get: function () {\n      return this._loading;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the data source refreshes a network link.\n   * @memberof KmlDataSource.prototype\n   * @type {Event}\n   */\n  refreshEvent: {\n    get: function () {\n      return this._refresh;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the data source finds an unsupported node type.\n   * @memberof KmlDataSource.prototype\n   * @type {Event}\n   */\n  unsupportedNodeEvent: {\n    get: function () {\n      return this._unsupportedNode;\n    },\n  },\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof KmlDataSource.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._entityCollection.show;\n    },\n    set: function (value) {\n      this._entityCollection.show = value;\n    },\n  },\n\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof KmlDataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: function () {\n      return this._entityCluster;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value must be defined.\");\n      }\n      //>>includeEnd('debug');\n      this._entityCluster = value;\n    },\n  },\n  /**\n   * Gets the credit that will be displayed for the data source\n   * @memberof KmlDataSource.prototype\n   * @type {Credit}\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n  /**\n   * Gets the KML Tours that are used to guide the camera to specified destinations on given time intervals.\n   * @memberof KmlDataSource.prototype\n   * @type {KmlTour[]}\n   */\n  kmlTours: {\n    get: function () {\n      return this._kmlTours;\n    },\n  },\n});\n\n/**\n * Asynchronously loads the provided KML data, replacing any existing data.\n *\n * @param {Resource|String|Document|Blob} data A url, parsed KML document, or Blob containing binary KMZ data or a parsed KML document.\n * @param {KmlDataSource.LoadOptions} [options] An object specifying configuration options\n *\n * @returns {Promise.<KmlDataSource>} A promise that will resolve to this instances once the KML is loaded.\n */\nKmlDataSource.prototype.load = function (data, options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(data)) {\n    throw new DeveloperError(\"data is required.\");\n  }\n  //>>includeEnd('debug');\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  DataSource.setLoading(this, true);\n\n  const oldName = this._name;\n  this._name = undefined;\n  this._clampToGround = defaultValue(options.clampToGround, false);\n\n  const that = this;\n  return load(this, this._entityCollection, data, options)\n    .then(function () {\n      let clock;\n\n      const availability = that._entityCollection.computeAvailability();\n\n      let start = availability.start;\n      let stop = availability.stop;\n      const isMinStart = JulianDate.equals(start, Iso8601.MINIMUM_VALUE);\n      const isMaxStop = JulianDate.equals(stop, Iso8601.MAXIMUM_VALUE);\n      if (!isMinStart || !isMaxStop) {\n        let date;\n\n        //If start is min time just start at midnight this morning, local time\n        if (isMinStart) {\n          date = new Date();\n          date.setHours(0, 0, 0, 0);\n          start = JulianDate.fromDate(date);\n        }\n\n        //If stop is max value just stop at midnight tonight, local time\n        if (isMaxStop) {\n          date = new Date();\n          date.setHours(24, 0, 0, 0);\n          stop = JulianDate.fromDate(date);\n        }\n\n        clock = new DataSourceClock();\n        clock.startTime = start;\n        clock.stopTime = stop;\n        clock.currentTime = JulianDate.clone(start);\n        clock.clockRange = ClockRange.LOOP_STOP;\n        clock.clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n        clock.multiplier = Math.round(\n          Math.min(\n            Math.max(JulianDate.secondsDifference(stop, start) / 60, 1),\n            3.15569e7\n          )\n        );\n      }\n\n      let changed = false;\n      if (clock !== that._clock) {\n        that._clock = clock;\n        changed = true;\n      }\n\n      if (oldName !== that._name) {\n        changed = true;\n      }\n\n      if (changed) {\n        that._changed.raiseEvent(that);\n      }\n\n      DataSource.setLoading(that, false);\n\n      return that;\n    })\n    .catch(function (error) {\n      DataSource.setLoading(that, false);\n      that._error.raiseEvent(that, error);\n      console.log(error);\n      return Promise.reject(error);\n    });\n};\n\n/**\n * Cleans up any non-entity elements created by the data source. Currently this only affects ScreenOverlay elements.\n */\nKmlDataSource.prototype.destroy = function () {\n  while (this._screenOverlays.length > 0) {\n    const elem = this._screenOverlays.pop();\n    elem.remove();\n  }\n};\n\nfunction mergeAvailabilityWithParent(child) {\n  const parent = child.parent;\n  if (defined(parent)) {\n    const parentAvailability = parent.availability;\n    if (defined(parentAvailability)) {\n      const childAvailability = child.availability;\n      if (defined(childAvailability)) {\n        childAvailability.intersect(parentAvailability);\n      } else {\n        child.availability = parentAvailability;\n      }\n    }\n  }\n}\n\nfunction getNetworkLinkUpdateCallback(\n  dataSource,\n  networkLink,\n  newEntityCollection,\n  networkLinks,\n  processedHref\n) {\n  return function (rootElement) {\n    if (!networkLinks.contains(networkLink.id)) {\n      // Got into the odd case where a parent network link was updated while a child\n      //  network link update was in flight, so just throw it away.\n      return;\n    }\n    let remove = false;\n    const networkLinkControl = queryFirstNode(\n      rootElement,\n      \"NetworkLinkControl\",\n      namespaces.kml\n    );\n    const hasNetworkLinkControl = defined(networkLinkControl);\n\n    let minRefreshPeriod = 0;\n    if (hasNetworkLinkControl) {\n      if (\n        defined(queryFirstNode(networkLinkControl, \"Update\", namespaces.kml))\n      ) {\n        oneTimeWarning(\n          \"kml-networkLinkControl-update\",\n          \"KML - NetworkLinkControl updates aren't supported.\"\n        );\n        networkLink.updating = false;\n        networkLinks.remove(networkLink.id);\n        return;\n      }\n      networkLink.cookie = queryToObject(\n        defaultValue(\n          queryStringValue(networkLinkControl, \"cookie\", namespaces.kml),\n          \"\"\n        )\n      );\n      minRefreshPeriod = defaultValue(\n        queryNumericValue(\n          networkLinkControl,\n          \"minRefreshPeriod\",\n          namespaces.kml\n        ),\n        0\n      );\n    }\n\n    const now = JulianDate.now();\n    const refreshMode = networkLink.refreshMode;\n    if (refreshMode === RefreshMode.INTERVAL) {\n      if (defined(networkLinkControl)) {\n        networkLink.time = Math.max(minRefreshPeriod, networkLink.time);\n      }\n    } else if (refreshMode === RefreshMode.EXPIRE) {\n      let expires;\n      if (defined(networkLinkControl)) {\n        expires = queryStringValue(\n          networkLinkControl,\n          \"expires\",\n          namespaces.kml\n        );\n      }\n      if (defined(expires)) {\n        try {\n          const date = JulianDate.fromIso8601(expires);\n          const diff = JulianDate.secondsDifference(date, now);\n          if (diff > 0 && diff < minRefreshPeriod) {\n            JulianDate.addSeconds(now, minRefreshPeriod, date);\n          }\n          networkLink.time = date;\n        } catch (e) {\n          oneTimeWarning(\n            \"kml-networkLinkControl-expires\",\n            \"KML - NetworkLinkControl expires is not a valid date\"\n          );\n          remove = true;\n        }\n      } else {\n        oneTimeWarning(\n          \"kml-refreshMode-onExpire\",\n          \"KML - refreshMode of onExpire requires the NetworkLinkControl to have an expires element\"\n        );\n        remove = true;\n      }\n    }\n\n    const networkLinkEntity = networkLink.entity;\n    const entityCollection = dataSource._entityCollection;\n    const newEntities = newEntityCollection.values;\n\n    function removeChildren(entity) {\n      entityCollection.remove(entity);\n      const children = entity._children;\n      const count = children.length;\n      for (let i = 0; i < count; ++i) {\n        removeChildren(children[i]);\n      }\n    }\n\n    // Remove old entities\n    entityCollection.suspendEvents();\n    const entitiesCopy = entityCollection.values.slice();\n    let i;\n    for (i = 0; i < entitiesCopy.length; ++i) {\n      const entityToRemove = entitiesCopy[i];\n      if (entityToRemove.parent === networkLinkEntity) {\n        entityToRemove.parent = undefined;\n        removeChildren(entityToRemove);\n      }\n    }\n    entityCollection.resumeEvents();\n\n    // Add new entities\n    entityCollection.suspendEvents();\n    for (i = 0; i < newEntities.length; i++) {\n      const newEntity = newEntities[i];\n      if (!defined(newEntity.parent)) {\n        newEntity.parent = networkLinkEntity;\n        mergeAvailabilityWithParent(newEntity);\n      }\n      entityCollection.add(newEntity);\n    }\n    entityCollection.resumeEvents();\n\n    // No refresh information remove it, otherwise update lastUpdate time\n    if (remove) {\n      networkLinks.remove(networkLink.id);\n    } else {\n      networkLink.lastUpdated = now;\n    }\n\n    const availability = entityCollection.computeAvailability();\n\n    const start = availability.start;\n    const stop = availability.stop;\n    const isMinStart = JulianDate.equals(start, Iso8601.MINIMUM_VALUE);\n    const isMaxStop = JulianDate.equals(stop, Iso8601.MAXIMUM_VALUE);\n    if (!isMinStart || !isMaxStop) {\n      const clock = dataSource._clock;\n\n      if (clock.startTime !== start || clock.stopTime !== stop) {\n        clock.startTime = start;\n        clock.stopTime = stop;\n        dataSource._changed.raiseEvent(dataSource);\n      }\n    }\n\n    networkLink.updating = false;\n    networkLink.needsUpdate = false;\n    dataSource._refresh.raiseEvent(\n      dataSource,\n      processedHref.getUrlComponent(true)\n    );\n  };\n}\n\nconst entitiesToIgnore = new AssociativeArray();\n\n/**\n * Updates any NetworkLink that require updating.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {Boolean} True if this data source is ready to be displayed at the provided time, false otherwise.\n */\nKmlDataSource.prototype.update = function (time) {\n  const networkLinks = this._networkLinks;\n  if (networkLinks.length === 0) {\n    return true;\n  }\n\n  const now = JulianDate.now();\n  const that = this;\n\n  entitiesToIgnore.removeAll();\n\n  function recurseIgnoreEntities(entity) {\n    const children = entity._children;\n    const count = children.length;\n    for (let i = 0; i < count; ++i) {\n      const child = children[i];\n      entitiesToIgnore.set(child.id, child);\n      recurseIgnoreEntities(child);\n    }\n  }\n\n  let cameraViewUpdate = false;\n  const lastCameraView = this._lastCameraView;\n  const camera = this.camera;\n  if (\n    defined(camera) &&\n    !(\n      camera.positionWC.equalsEpsilon(\n        lastCameraView.position,\n        CesiumMath.EPSILON7\n      ) &&\n      camera.directionWC.equalsEpsilon(\n        lastCameraView.direction,\n        CesiumMath.EPSILON7\n      ) &&\n      camera.upWC.equalsEpsilon(lastCameraView.up, CesiumMath.EPSILON7)\n    )\n  ) {\n    // Camera has changed so update the last view\n    lastCameraView.position = Cartesian3.clone(camera.positionWC);\n    lastCameraView.direction = Cartesian3.clone(camera.directionWC);\n    lastCameraView.up = Cartesian3.clone(camera.upWC);\n    lastCameraView.bbox = camera.computeViewRectangle();\n    cameraViewUpdate = true;\n  }\n\n  const newNetworkLinks = new AssociativeArray();\n  let changed = false;\n  networkLinks.values.forEach(function (networkLink) {\n    const entity = networkLink.entity;\n    if (entitiesToIgnore.contains(entity.id)) {\n      return;\n    }\n\n    if (!networkLink.updating) {\n      let doUpdate = false;\n      if (networkLink.refreshMode === RefreshMode.INTERVAL) {\n        if (\n          JulianDate.secondsDifference(now, networkLink.lastUpdated) >\n          networkLink.time\n        ) {\n          doUpdate = true;\n        }\n      } else if (networkLink.refreshMode === RefreshMode.EXPIRE) {\n        if (JulianDate.greaterThan(now, networkLink.time)) {\n          doUpdate = true;\n        }\n      } else if (networkLink.refreshMode === RefreshMode.STOP) {\n        if (cameraViewUpdate) {\n          networkLink.needsUpdate = true;\n          networkLink.cameraUpdateTime = now;\n        }\n\n        if (\n          networkLink.needsUpdate &&\n          JulianDate.secondsDifference(now, networkLink.cameraUpdateTime) >=\n            networkLink.time\n        ) {\n          doUpdate = true;\n        }\n      }\n\n      if (doUpdate) {\n        recurseIgnoreEntities(entity);\n        networkLink.updating = true;\n        const newEntityCollection = new EntityCollection();\n        const href = networkLink.href.clone();\n\n        href.setQueryParameters(networkLink.cookie);\n        const ellipsoid = defaultValue(that._ellipsoid, Ellipsoid.WGS84);\n        processNetworkLinkQueryString(\n          href,\n          that.camera,\n          that.canvas,\n          networkLink.viewBoundScale,\n          lastCameraView.bbox,\n          ellipsoid\n        );\n\n        load(that, newEntityCollection, href, {\n          context: entity.id,\n        })\n          .then(\n            getNetworkLinkUpdateCallback(\n              that,\n              networkLink,\n              newEntityCollection,\n              newNetworkLinks,\n              href\n            )\n          )\n          .catch(function (error) {\n            const msg = `NetworkLink ${networkLink.href} refresh failed: ${error}`;\n            console.log(msg);\n            that._error.raiseEvent(that, msg);\n          });\n        changed = true;\n      }\n    }\n    newNetworkLinks.set(networkLink.id, networkLink);\n  });\n\n  if (changed) {\n    this._networkLinks = newNetworkLinks;\n    this._changed.raiseEvent(this);\n  }\n\n  return true;\n};\n\n/**\n * Contains KML Feature data loaded into the <code>Entity.kml</code> property by {@link KmlDataSource}.\n * @alias KmlFeatureData\n * @constructor\n */\nfunction KmlFeatureData() {\n  /**\n   * @typedef KmlFeatureData.Author\n   * @type {Object}\n   * @property {String} name Gets the name.\n   * @property {String} uri Gets the URI.\n   * @property {Number} age Gets the email.\n   */\n\n  /**\n   * Gets the atom syndication format author field.\n   * @type {KmlFeatureData.Author}\n   */\n  this.author = {\n    name: undefined,\n    uri: undefined,\n    email: undefined,\n  };\n\n  /**\n   * @typedef KmlFeatureData.Link\n   * @type {Object}\n   * @property {String} href Gets the href.\n   * @property {String} hreflang Gets the language of the linked resource.\n   * @property {String} rel Gets the link relation.\n   * @property {String} type Gets the link type.\n   * @property {String} title Gets the link title.\n   * @property {String} length Gets the link length.\n   */\n\n  /**\n   * Gets the link.\n   * @type {KmlFeatureData.Link}\n   */\n  this.link = {\n    href: undefined,\n    hreflang: undefined,\n    rel: undefined,\n    type: undefined,\n    title: undefined,\n    length: undefined,\n  };\n\n  /**\n   * Gets the unstructured address field.\n   * @type {String}\n   */\n  this.address = undefined;\n  /**\n   * Gets the phone number.\n   * @type {String}\n   */\n  this.phoneNumber = undefined;\n  /**\n   * Gets the snippet.\n   * @type {String}\n   */\n  this.snippet = undefined;\n  /**\n   * Gets the extended data, parsed into a JSON object.\n   * Currently only the <code>Data</code> property is supported.\n   * <code>SchemaData</code> and custom data are ignored.\n   * @type {String}\n   */\n  this.extendedData = undefined;\n}\n\n// For testing\nKmlDataSource._DeferredLoading = DeferredLoading;\nKmlDataSource._getTimestamp = getTimestamp;\n\nexport default KmlDataSource;\n","/**\n * @alias KmlLookAt\n * @constructor\n *\n * @param {Cartesian3} position camera position\n * @param {HeadingPitchRange} headingPitchRange camera orientation\n */\nfunction KmlLookAt(position, headingPitchRange) {\n  this.position = position;\n  this.headingPitchRange = headingPitchRange;\n}\nexport default KmlLookAt;\n","import defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\n/**\n * Describes a KmlTour, which uses KmlTourFlyTo, and KmlTourWait to\n * guide the camera to a specified destinations on given time intervals.\n *\n * @alias KmlTour\n * @constructor\n *\n * @param {String} name name parsed from KML\n * @param {String} id id parsed from KML\n * @param {Array} playlist array with KmlTourFlyTos and KmlTourWaits\n *\n * @see KmlTourFlyTo\n * @see KmlTourWait\n *\n * @demo {@link https://sandcastle.cesium.com/?src=KML%20Tours.html|KML Tours}\n */\nfunction KmlTour(name, id) {\n  /**\n   * Id of kml gx:Tour entry\n   * @type String\n   */\n  this.id = id;\n  /**\n   * Tour name\n   * @type String\n   */\n  this.name = name;\n  /**\n   * Index of current entry from playlist\n   * @type Number\n   */\n  this.playlistIndex = 0;\n  /**\n   * Array of playlist entries\n   * @type Array\n   */\n  this.playlist = [];\n  /**\n   * Event will be called when tour starts to play,\n   * before any playlist entry starts to play.\n   * @type Event\n   */\n  this.tourStart = new Event();\n  /**\n   * Event will be called when all playlist entries are\n   * played, or tour playback being canceled.\n   *\n   * If tour playback was terminated, event callback will\n   * be called with terminated=true parameter.\n   * @type Event\n   */\n  this.tourEnd = new Event();\n  /**\n   * Event will be called when entry from playlist starts to play.\n   *\n   * Event callback will be called with curent entry as first parameter.\n   * @type Event\n   */\n  this.entryStart = new Event();\n  /**\n   * Event will be called when entry from playlist ends to play.\n   *\n   * Event callback will be called with following parameters:\n   * 1. entry - entry\n   * 2. terminated - true if playback was terminated by calling {@link KmlTour#stop}\n   * @type Event\n   */\n  this.entryEnd = new Event();\n\n  this._activeEntries = [];\n}\n\n/**\n * Add entry to this tour playlist.\n *\n * @param {KmlTourFlyTo|KmlTourWait} entry an entry to add to the playlist.\n */\nKmlTour.prototype.addPlaylistEntry = function (entry) {\n  this.playlist.push(entry);\n};\n\n/**\n * Play this tour.\n *\n * @param {Viewer} viewer viewer widget.\n * @param {Object} [cameraOptions] these options will be merged with {@link Camera#flyTo}\n * options for FlyTo playlist entries.\n */\nKmlTour.prototype.play = function (viewer, cameraOptions) {\n  this.tourStart.raiseEvent();\n\n  const tour = this;\n  playEntry.call(this, viewer, cameraOptions, function (terminated) {\n    tour.playlistIndex = 0;\n    // Stop nonblocking entries\n    if (!terminated) {\n      cancelAllEntries(tour._activeEntries);\n    }\n    tour.tourEnd.raiseEvent(terminated);\n  });\n};\n\n/**\n * Stop curently playing tour.\n */\nKmlTour.prototype.stop = function () {\n  cancelAllEntries(this._activeEntries);\n};\n\n// Stop all activeEntries.\nfunction cancelAllEntries(activeEntries) {\n  for (\n    let entry = activeEntries.pop();\n    entry !== undefined;\n    entry = activeEntries.pop()\n  ) {\n    entry.stop();\n  }\n}\n\n// Play playlist entry.\n// This function is called recursevly with playNext and iterates over all entries from playlist.\nfunction playEntry(viewer, cameraOptions, allDone) {\n  const entry = this.playlist[this.playlistIndex];\n  if (entry) {\n    const _playNext = playNext.bind(this, viewer, cameraOptions, allDone);\n    this._activeEntries.push(entry);\n    this.entryStart.raiseEvent(entry);\n    if (entry.blocking) {\n      entry.play(_playNext, viewer.scene.camera, cameraOptions);\n    } else {\n      const tour = this;\n      entry.play(function () {\n        tour.entryEnd.raiseEvent(entry);\n        const indx = tour._activeEntries.indexOf(entry);\n        if (indx >= 0) {\n          tour._activeEntries.splice(indx, 1);\n        }\n      });\n      _playNext(viewer, cameraOptions, allDone);\n    }\n  } else if (defined(allDone)) {\n    allDone(false);\n  }\n}\n\n// Increment playlistIndex and call playEntry if terminated isn't true.\nfunction playNext(viewer, cameraOptions, allDone, terminated) {\n  const entry = this.playlist[this.playlistIndex];\n  this.entryEnd.raiseEvent(entry, terminated);\n\n  if (terminated) {\n    allDone(terminated);\n  } else {\n    const indx = this._activeEntries.indexOf(entry);\n    if (indx >= 0) {\n      this._activeEntries.splice(indx, 1);\n    }\n    this.playlistIndex++;\n    playEntry.call(this, viewer, cameraOptions, allDone);\n  }\n}\nexport default KmlTour;\n","import BoundingSphere from \"../Core/BoundingSphere.js\";\nimport combine from \"../Core/combine.js\";\nimport defined from \"../Core/defined.js\";\nimport EasingFunction from \"../Core/EasingFunction.js\";\n/**\n * Transitions the KmlTour to the next destination. This transition is facilitated\n * using a specified flyToMode over a given number of seconds.\n *\n * @alias KmlTourFlyTo\n * @constructor\n *\n * @param {Number} duration entry duration\n * @param {String} flyToMode KML fly to mode: bounce, smooth, etc\n * @param {KmlCamera|KmlLookAt} view KmlCamera or KmlLookAt\n *\n * @see KmlTour\n * @see KmlTourWait\n */\nfunction KmlTourFlyTo(duration, flyToMode, view) {\n  this.type = \"KmlTourFlyTo\";\n  this.blocking = true;\n  this.activeCamera = null;\n  this.activeCallback = null;\n\n  this.duration = duration;\n  this.view = view;\n  this.flyToMode = flyToMode;\n}\n\n/**\n * Play this playlist entry\n *\n * @param {KmlTourFlyTo.DoneCallback} done function which will be called when playback ends\n * @param {Camera} camera Cesium camera\n * @param {Object} [cameraOptions] which will be merged with camera flyTo options. See {@link Camera#flyTo}\n */\nKmlTourFlyTo.prototype.play = function (done, camera, cameraOptions) {\n  this.activeCamera = camera;\n  if (defined(done) && done !== null) {\n    const self = this;\n    this.activeCallback = function (terminated) {\n      delete self.activeCallback;\n      delete self.activeCamera;\n      done(defined(terminated) ? false : terminated);\n    };\n  }\n\n  const options = this.getCameraOptions(cameraOptions);\n  if (this.view.headingPitchRoll) {\n    camera.flyTo(options);\n  } else if (this.view.headingPitchRange) {\n    const target = new BoundingSphere(this.view.position);\n    camera.flyToBoundingSphere(target, options);\n  }\n};\n\n/**\n * Stop execution of curent entry. Cancel camera flyTo\n */\nKmlTourFlyTo.prototype.stop = function () {\n  if (defined(this.activeCamera)) {\n    this.activeCamera.cancelFlight();\n  }\n  if (defined(this.activeCallback)) {\n    this.activeCallback(true);\n  }\n};\n\n/**\n * Returns options for {@link Camera#flyTo} or {@link Camera#flyToBoundingSphere}\n * depends on this.view type.\n *\n * @param {Object} cameraOptions options to merge with generated. See {@link Camera#flyTo}\n * @returns {Object} {@link Camera#flyTo} or {@link Camera#flyToBoundingSphere} options\n */\nKmlTourFlyTo.prototype.getCameraOptions = function (cameraOptions) {\n  let options = {\n    duration: this.duration,\n  };\n\n  if (defined(this.activeCallback)) {\n    options.complete = this.activeCallback;\n  }\n\n  if (this.flyToMode === \"smooth\") {\n    options.easingFunction = EasingFunction.LINEAR_NONE;\n  }\n\n  if (this.view.headingPitchRoll) {\n    options.destination = this.view.position;\n    options.orientation = this.view.headingPitchRoll;\n  } else if (this.view.headingPitchRange) {\n    options.offset = this.view.headingPitchRange;\n  }\n\n  if (defined(cameraOptions)) {\n    options = combine(options, cameraOptions);\n  }\n  return options;\n};\n\n/**\n * A function that will be executed when the flight completes.\n * @callback KmlTourFlyTo.DoneCallback\n *\n * @param {Boolean} terminated true if {@link KmlTourFlyTo#stop} was\n * called before entry done playback.\n */\nexport default KmlTourFlyTo;\n","import defined from \"../Core/defined.js\";\n/**\n * Pauses the KmlTour for a given number of seconds.\n *\n * @alias KmlTourWait\n * @constructor\n *\n * @param {Number} duration entry duration\n *\n * @see KmlTour\n * @see KmlTourFlyTo\n */\nfunction KmlTourWait(duration) {\n  this.type = \"KmlTourWait\";\n  this.blocking = true;\n  this.duration = duration;\n\n  this.timeout = null;\n}\n\n/**\n * Play this playlist entry\n *\n * @param {KmlTourWait.DoneCallback} done function which will be called when playback ends\n */\nKmlTourWait.prototype.play = function (done) {\n  const self = this;\n  this.activeCallback = done;\n  this.timeout = setTimeout(function () {\n    delete self.activeCallback;\n    done(false);\n  }, this.duration * 1000);\n};\n\n/**\n * Stop execution of curent entry, cancel curent timeout\n */\nKmlTourWait.prototype.stop = function () {\n  clearTimeout(this.timeout);\n  if (defined(this.activeCallback)) {\n    this.activeCallback(true);\n  }\n};\n\n/**\n * A function which will be called when playback ends.\n *\n * @callback KmlTourWait.DoneCallback\n * @param {Boolean} terminated true if {@link KmlTourWait#stop} was\n * called before entry done playback.\n */\nexport default KmlTourWait;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {Object} LabelGraphics.ConstructorOptions\n *\n * Initialization options for the LabelGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the label.\n * @property {Property | string} [text] A Property specifying the text. Explicit newlines '\\n' are supported.\n * @property {Property | string} [font='30px sans-serif'] A Property specifying the CSS font.\n * @property {Property | LabelStyle} [style=LabelStyle.FILL] A Property specifying the {@link LabelStyle}.\n * @property {Property | number} [scale=1.0] A numeric Property specifying the scale to apply to the text.\n * @property {Property | boolean} [showBackground=false] A boolean Property specifying the visibility of the background behind the label.\n * @property {Property | Color} [backgroundColor=new Color(0.165, 0.165, 0.165, 0.8)] A Property specifying the background {@link Color}.\n * @property {Property | Cartesian2} [backgroundPadding=new Cartesian2(7, 5)] A {@link Cartesian2} Property specifying the horizontal and vertical background padding in pixels.\n * @property {Property | Cartesian2} [pixelOffset=Cartesian2.ZERO] A {@link Cartesian2} Property specifying the pixel offset.\n * @property {Property | Cartesian3} [eyeOffset=Cartesian3.ZERO] A {@link Cartesian3} Property specifying the eye offset.\n * @property {Property | HorizontalOrigin} [horizontalOrigin=HorizontalOrigin.CENTER] A Property specifying the {@link HorizontalOrigin}.\n * @property {Property | VerticalOrigin} [verticalOrigin=VerticalOrigin.CENTER] A Property specifying the {@link VerticalOrigin}.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @property {Property | Color} [fillColor=Color.WHITE] A Property specifying the fill {@link Color}.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the outline {@link Color}.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the outline width.\n * @property {Property | NearFarScalar} [translucencyByDistance] A {@link NearFarScalar} Property used to set translucency based on distance from the camera.\n * @property {Property | NearFarScalar} [pixelOffsetScaleByDistance] A {@link NearFarScalar} Property used to set pixelOffset based on distance from the camera.\n * @property {Property | NearFarScalar} [scaleByDistance] A {@link NearFarScalar} Property used to set scale based on distance from the camera.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this label will be displayed.\n * @property {Property | number} [disableDepthTestDistance] A Property specifying the distance from the camera at which to disable the depth test to.\n */\n\n/**\n * Describes a two dimensional label located at the position of the containing {@link Entity}.\n * <p>\n * <div align='center'>\n * <img src='Images/Label.png' width='400' height='300' /><br />\n * Example labels\n * </div>\n * </p>\n *\n * @alias LabelGraphics\n * @constructor\n *\n * @param {LabelGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Labels.html|Cesium Sandcastle Labels Demo}\n */\nfunction LabelGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._text = undefined;\n  this._textSubscription = undefined;\n  this._font = undefined;\n  this._fontSubscription = undefined;\n  this._style = undefined;\n  this._styleSubscription = undefined;\n  this._scale = undefined;\n  this._scaleSubscription = undefined;\n  this._showBackground = undefined;\n  this._showBackgroundSubscription = undefined;\n  this._backgroundColor = undefined;\n  this._backgroundColorSubscription = undefined;\n  this._backgroundPadding = undefined;\n  this._backgroundPaddingSubscription = undefined;\n  this._pixelOffset = undefined;\n  this._pixelOffsetSubscription = undefined;\n  this._eyeOffset = undefined;\n  this._eyeOffsetSubscription = undefined;\n  this._horizontalOrigin = undefined;\n  this._horizontalOriginSubscription = undefined;\n  this._verticalOrigin = undefined;\n  this._verticalOriginSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._fillColor = undefined;\n  this._fillColorSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._translucencyByDistance = undefined;\n  this._translucencyByDistanceSubscription = undefined;\n  this._pixelOffsetScaleByDistance = undefined;\n  this._pixelOffsetScaleByDistanceSubscription = undefined;\n  this._scaleByDistance = undefined;\n  this._scaleByDistanceSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._disableDepthTestDistance = undefined;\n  this._disableDepthTestDistanceSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(LabelGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof LabelGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the label.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the string Property specifying the text of the label.\n   * Explicit newlines '\\n' are supported.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  text: createPropertyDescriptor(\"text\"),\n\n  /**\n   * Gets or sets the string Property specifying the font in CSS syntax.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/font|CSS font on MDN}\n   */\n  font: createPropertyDescriptor(\"font\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link LabelStyle}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  style: createPropertyDescriptor(\"style\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the uniform scale to apply to the image.\n   * A scale greater than <code>1.0</code> enlarges the label while a scale less than <code>1.0</code> shrinks it.\n   * <p>\n   * <div align='center'>\n   * <img src='Images/Label.setScale.png' width='400' height='300' /><br/>\n   * From left to right in the above image, the scales are <code>0.5</code>, <code>1.0</code>,\n   * and <code>2.0</code>.\n   * </div>\n   * </p>\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  scale: createPropertyDescriptor(\"scale\"),\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the background behind the label.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  showBackground: createPropertyDescriptor(\"showBackground\"),\n\n  /**\n   * Gets or sets the Property specifying the background {@link Color}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   * @default new Color(0.165, 0.165, 0.165, 0.8)\n   */\n  backgroundColor: createPropertyDescriptor(\"backgroundColor\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the label's horizontal and vertical\n   * background padding in pixels.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(7, 5)\n   */\n  backgroundPadding: createPropertyDescriptor(\"backgroundPadding\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the label's pixel offset in screen space\n   * from the origin of this label.  This is commonly used to align multiple labels and labels at\n   * the same position, e.g., an image and text.  The screen space origin is the top, left corner of the\n   * canvas; <code>x</code> increases from left to right, and <code>y</code> increases from top to bottom.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Label.setPixelOffset.default.png' width='250' height='188' /></td>\n   * <td align='center'><code>l.pixeloffset = new Cartesian2(25, 75);</code><br/><img src='Images/Label.setPixelOffset.x50y-25.png' width='250' height='188' /></td>\n   * </tr></table>\n   * The label's origin is indicated by the yellow point.\n   * </div>\n   * </p>\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   * @default Cartesian2.ZERO\n   */\n  pixelOffset: createPropertyDescriptor(\"pixelOffset\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} Property specifying the label's offset in eye coordinates.\n   * Eye coordinates is a left-handed coordinate system, where <code>x</code> points towards the viewer's\n   * right, <code>y</code> points up, and <code>z</code> points into the screen.\n   * <p>\n   * An eye offset is commonly used to arrange multiple labels or objects at the same position, e.g., to\n   * arrange a label above its corresponding 3D model.\n   * </p>\n   * Below, the label is positioned at the center of the Earth but an eye offset makes it always\n   * appear on top of the Earth regardless of the viewer's or Earth's orientation.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.one.png' width='250' height='188' /></td>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.two.png' width='250' height='188' /></td>\n   * </tr></table>\n   * <code>l.eyeOffset = new Cartesian3(0.0, 8000000.0, 0.0);</code><br /><br />\n   * </div>\n   * </p>\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   * @default Cartesian3.ZERO\n   */\n  eyeOffset: createPropertyDescriptor(\"eyeOffset\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HorizontalOrigin}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  horizontalOrigin: createPropertyDescriptor(\"horizontalOrigin\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link VerticalOrigin}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  verticalOrigin: createPropertyDescriptor(\"verticalOrigin\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the Property specifying the fill {@link Color}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  fillColor: createPropertyDescriptor(\"fillColor\"),\n\n  /**\n   * Gets or sets the Property specifying the outline {@link Color}.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the outline width.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the translucency of the label based on the distance from the camera.\n   * A label's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the label's translucency remains clamped to the nearest bound.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  translucencyByDistance: createPropertyDescriptor(\"translucencyByDistance\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the pixel offset of the label based on the distance from the camera.\n   * A label's pixel offset will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the label's pixel offset remains clamped to the nearest bound.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  pixelOffsetScaleByDistance: createPropertyDescriptor(\n    \"pixelOffsetScaleByDistance\"\n  ),\n\n  /**\n   * Gets or sets near and far scaling properties of a Label based on the label's distance from the camera.\n   * A label's scale will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the label's scale remains clamped to the nearest bound.  If undefined,\n   * scaleByDistance will be disabled.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  scaleByDistance: createPropertyDescriptor(\"scaleByDistance\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this label will be displayed.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof LabelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  disableDepthTestDistance: createPropertyDescriptor(\n    \"disableDepthTestDistance\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {LabelGraphics} [result] The object onto which to store the result.\n * @returns {LabelGraphics} The modified result parameter or a new instance if one was not provided.\n */\nLabelGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new LabelGraphics(this);\n  }\n  result.show = this.show;\n  result.text = this.text;\n  result.font = this.font;\n  result.style = this.style;\n  result.scale = this.scale;\n  result.showBackground = this.showBackground;\n  result.backgroundColor = this.backgroundColor;\n  result.backgroundPadding = this.backgroundPadding;\n  result.pixelOffset = this.pixelOffset;\n  result.eyeOffset = this.eyeOffset;\n  result.horizontalOrigin = this.horizontalOrigin;\n  result.verticalOrigin = this.verticalOrigin;\n  result.heightReference = this.heightReference;\n  result.fillColor = this.fillColor;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.translucencyByDistance = this.translucencyByDistance;\n  result.pixelOffsetScaleByDistance = this.pixelOffsetScaleByDistance;\n  result.scaleByDistance = this.scaleByDistance;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.disableDepthTestDistance = this.disableDepthTestDistance;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {LabelGraphics} source The object to be merged into this object.\n */\nLabelGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.text = defaultValue(this.text, source.text);\n  this.font = defaultValue(this.font, source.font);\n  this.style = defaultValue(this.style, source.style);\n  this.scale = defaultValue(this.scale, source.scale);\n  this.showBackground = defaultValue(\n    this.showBackground,\n    source.showBackground\n  );\n  this.backgroundColor = defaultValue(\n    this.backgroundColor,\n    source.backgroundColor\n  );\n  this.backgroundPadding = defaultValue(\n    this.backgroundPadding,\n    source.backgroundPadding\n  );\n  this.pixelOffset = defaultValue(this.pixelOffset, source.pixelOffset);\n  this.eyeOffset = defaultValue(this.eyeOffset, source.eyeOffset);\n  this.horizontalOrigin = defaultValue(\n    this.horizontalOrigin,\n    source.horizontalOrigin\n  );\n  this.verticalOrigin = defaultValue(\n    this.verticalOrigin,\n    source.verticalOrigin\n  );\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference\n  );\n  this.fillColor = defaultValue(this.fillColor, source.fillColor);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.translucencyByDistance = defaultValue(\n    this.translucencyByDistance,\n    source.translucencyByDistance\n  );\n  this.pixelOffsetScaleByDistance = defaultValue(\n    this.pixelOffsetScaleByDistance,\n    source.pixelOffsetScaleByDistance\n  );\n  this.scaleByDistance = defaultValue(\n    this.scaleByDistance,\n    source.scaleByDistance\n  );\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n  this.disableDepthTestDistance = defaultValue(\n    this.disableDepthTestDistance,\n    source.disableDepthTestDistance\n  );\n};\nexport default LabelGraphics;\n","import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport HorizontalOrigin from \"../Scene/HorizontalOrigin.js\";\nimport LabelStyle from \"../Scene/LabelStyle.js\";\nimport VerticalOrigin from \"../Scene/VerticalOrigin.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\n\nconst defaultScale = 1.0;\nconst defaultFont = \"30px sans-serif\";\nconst defaultStyle = LabelStyle.FILL;\nconst defaultFillColor = Color.WHITE;\nconst defaultOutlineColor = Color.BLACK;\nconst defaultOutlineWidth = 1.0;\nconst defaultShowBackground = false;\nconst defaultBackgroundColor = new Color(0.165, 0.165, 0.165, 0.8);\nconst defaultBackgroundPadding = new Cartesian2(7, 5);\nconst defaultPixelOffset = Cartesian2.ZERO;\nconst defaultEyeOffset = Cartesian3.ZERO;\nconst defaultHeightReference = HeightReference.NONE;\nconst defaultHorizontalOrigin = HorizontalOrigin.CENTER;\nconst defaultVerticalOrigin = VerticalOrigin.CENTER;\n\nconst positionScratch = new Cartesian3();\nconst fillColorScratch = new Color();\nconst outlineColorScratch = new Color();\nconst backgroundColorScratch = new Color();\nconst backgroundPaddingScratch = new Cartesian2();\nconst eyeOffsetScratch = new Cartesian3();\nconst pixelOffsetScratch = new Cartesian2();\nconst translucencyByDistanceScratch = new NearFarScalar();\nconst pixelOffsetScaleByDistanceScratch = new NearFarScalar();\nconst scaleByDistanceScratch = new NearFarScalar();\nconst distanceDisplayConditionScratch = new DistanceDisplayCondition();\n\nfunction EntityData(entity) {\n  this.entity = entity;\n  this.label = undefined;\n  this.index = undefined;\n}\n\n/**\n * A {@link Visualizer} which maps the {@link LabelGraphics} instance\n * in {@link Entity#label} to a {@link Label}.\n * @alias LabelVisualizer\n * @constructor\n *\n * @param {EntityCluster} entityCluster The entity cluster to manage the collection of billboards and optionally cluster with other entities.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\nfunction LabelVisualizer(entityCluster, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entityCluster)) {\n    throw new DeveloperError(\"entityCluster is required.\");\n  }\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  }\n  //>>includeEnd('debug');\n\n  entityCollection.collectionChanged.addEventListener(\n    LabelVisualizer.prototype._onCollectionChanged,\n    this\n  );\n\n  this._cluster = entityCluster;\n  this._entityCollection = entityCollection;\n  this._items = new AssociativeArray();\n\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n\n/**\n * Updates the primitives created by this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} This function always returns true.\n */\nLabelVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const items = this._items.values;\n  const cluster = this._cluster;\n\n  for (let i = 0, len = items.length; i < len; i++) {\n    const item = items[i];\n    const entity = item.entity;\n    const labelGraphics = entity._label;\n    let text;\n    let label = item.label;\n    let show =\n      entity.isShowing &&\n      entity.isAvailable(time) &&\n      Property.getValueOrDefault(labelGraphics._show, time, true);\n    let position;\n    if (show) {\n      position = Property.getValueOrUndefined(\n        entity._position,\n        time,\n        positionScratch\n      );\n      text = Property.getValueOrUndefined(labelGraphics._text, time);\n      show = defined(position) && defined(text);\n    }\n\n    if (!show) {\n      //don't bother creating or updating anything else\n      returnPrimitive(item, entity, cluster);\n      continue;\n    }\n\n    if (!Property.isConstant(entity._position)) {\n      cluster._clusterDirty = true;\n    }\n\n    let updateClamping = false;\n    const heightReference = Property.getValueOrDefault(\n      labelGraphics._heightReference,\n      time,\n      defaultHeightReference\n    );\n\n    if (!defined(label)) {\n      label = cluster.getLabel(entity);\n      label.id = entity;\n      item.label = label;\n\n      // If this new label happens to have a position and height reference that match our new values,\n      // label._updateClamping will not be called automatically. That's a problem because the clamped\n      // height may be based on different terrain than is now loaded. So we'll manually call\n      // _updateClamping below.\n      updateClamping =\n        Cartesian3.equals(label.position, position) &&\n        label.heightReference === heightReference;\n    }\n\n    label.show = true;\n    label.position = position;\n    label.text = text;\n    label.scale = Property.getValueOrDefault(\n      labelGraphics._scale,\n      time,\n      defaultScale\n    );\n    label.font = Property.getValueOrDefault(\n      labelGraphics._font,\n      time,\n      defaultFont\n    );\n    label.style = Property.getValueOrDefault(\n      labelGraphics._style,\n      time,\n      defaultStyle\n    );\n    label.fillColor = Property.getValueOrDefault(\n      labelGraphics._fillColor,\n      time,\n      defaultFillColor,\n      fillColorScratch\n    );\n    label.outlineColor = Property.getValueOrDefault(\n      labelGraphics._outlineColor,\n      time,\n      defaultOutlineColor,\n      outlineColorScratch\n    );\n    label.outlineWidth = Property.getValueOrDefault(\n      labelGraphics._outlineWidth,\n      time,\n      defaultOutlineWidth\n    );\n    label.showBackground = Property.getValueOrDefault(\n      labelGraphics._showBackground,\n      time,\n      defaultShowBackground\n    );\n    label.backgroundColor = Property.getValueOrDefault(\n      labelGraphics._backgroundColor,\n      time,\n      defaultBackgroundColor,\n      backgroundColorScratch\n    );\n    label.backgroundPadding = Property.getValueOrDefault(\n      labelGraphics._backgroundPadding,\n      time,\n      defaultBackgroundPadding,\n      backgroundPaddingScratch\n    );\n    label.pixelOffset = Property.getValueOrDefault(\n      labelGraphics._pixelOffset,\n      time,\n      defaultPixelOffset,\n      pixelOffsetScratch\n    );\n    label.eyeOffset = Property.getValueOrDefault(\n      labelGraphics._eyeOffset,\n      time,\n      defaultEyeOffset,\n      eyeOffsetScratch\n    );\n    label.heightReference = heightReference;\n    label.horizontalOrigin = Property.getValueOrDefault(\n      labelGraphics._horizontalOrigin,\n      time,\n      defaultHorizontalOrigin\n    );\n    label.verticalOrigin = Property.getValueOrDefault(\n      labelGraphics._verticalOrigin,\n      time,\n      defaultVerticalOrigin\n    );\n    label.translucencyByDistance = Property.getValueOrUndefined(\n      labelGraphics._translucencyByDistance,\n      time,\n      translucencyByDistanceScratch\n    );\n    label.pixelOffsetScaleByDistance = Property.getValueOrUndefined(\n      labelGraphics._pixelOffsetScaleByDistance,\n      time,\n      pixelOffsetScaleByDistanceScratch\n    );\n    label.scaleByDistance = Property.getValueOrUndefined(\n      labelGraphics._scaleByDistance,\n      time,\n      scaleByDistanceScratch\n    );\n    label.distanceDisplayCondition = Property.getValueOrUndefined(\n      labelGraphics._distanceDisplayCondition,\n      time,\n      distanceDisplayConditionScratch\n    );\n    label.disableDepthTestDistance = Property.getValueOrUndefined(\n      labelGraphics._disableDepthTestDistance,\n      time\n    );\n\n    if (updateClamping) {\n      label._updateClamping();\n    }\n  }\n  return true;\n};\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nLabelVisualizer.prototype.getBoundingSphere = function (entity, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const item = this._items.get(entity.id);\n  if (!defined(item) || !defined(item.label)) {\n    return BoundingSphereState.FAILED;\n  }\n\n  const label = item.label;\n  result.center = Cartesian3.clone(\n    defaultValue(label._clampedPosition, label.position),\n    result.center\n  );\n  result.radius = 0;\n  return BoundingSphereState.DONE;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nLabelVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nLabelVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(\n    LabelVisualizer.prototype._onCollectionChanged,\n    this\n  );\n  const entities = this._entityCollection.values;\n  for (let i = 0; i < entities.length; i++) {\n    this._cluster.removeLabel(entities[i]);\n  }\n  return destroyObject(this);\n};\n\nLabelVisualizer.prototype._onCollectionChanged = function (\n  entityCollection,\n  added,\n  removed,\n  changed\n) {\n  let i;\n  let entity;\n  const items = this._items;\n  const cluster = this._cluster;\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    if (defined(entity._label) && defined(entity._position)) {\n      items.set(entity.id, new EntityData(entity));\n    }\n  }\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n    if (defined(entity._label) && defined(entity._position)) {\n      if (!items.contains(entity.id)) {\n        items.set(entity.id, new EntityData(entity));\n      }\n    } else {\n      returnPrimitive(items.get(entity.id), entity, cluster);\n      items.remove(entity.id);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    returnPrimitive(items.get(entity.id), entity, cluster);\n    items.remove(entity.id);\n  }\n};\n\nfunction returnPrimitive(item, entity, cluster) {\n  if (defined(item)) {\n    item.label = undefined;\n    cluster.removeLabel(entity);\n  }\n}\nexport default LabelVisualizer;\n","import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Material from \"../Scene/Material.js\";\n\n/**\n * The interface for all {@link Property} objects that represent {@link Material} uniforms.\n * This type defines an interface and cannot be instantiated directly.\n *\n * @alias MaterialProperty\n * @constructor\n * @abstract\n *\n * @see ColorMaterialProperty\n * @see CompositeMaterialProperty\n * @see GridMaterialProperty\n * @see ImageMaterialProperty\n * @see PolylineGlowMaterialProperty\n * @see PolylineOutlineMaterialProperty\n * @see StripeMaterialProperty\n */\nfunction MaterialProperty() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(MaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof MaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof MaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n * @function\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nMaterialProperty.prototype.getType = DeveloperError.throwInstantiationError;\n\n/**\n * Gets the value of the property at the provided time.\n * @function\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nMaterialProperty.prototype.getValue = DeveloperError.throwInstantiationError;\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n * @function\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nMaterialProperty.prototype.equals = DeveloperError.throwInstantiationError;\n\n/**\n * @private\n */\nMaterialProperty.getValue = function (time, materialProperty, material) {\n  let type;\n\n  if (defined(materialProperty)) {\n    type = materialProperty.getType(time);\n    if (defined(type)) {\n      if (!defined(material) || material.type !== type) {\n        material = Material.fromType(type);\n      }\n      materialProperty.getValue(time, material.uniforms);\n      return material;\n    }\n  }\n\n  if (!defined(material) || material.type !== Material.ColorType) {\n    material = Material.fromType(Material.ColorType);\n  }\n  Color.clone(Color.WHITE, material.uniforms.color);\n\n  return material;\n};\nexport default MaterialProperty;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport NodeTransformationProperty from \"./NodeTransformationProperty.js\";\nimport PropertyBag from \"./PropertyBag.js\";\n\nfunction createNodeTransformationProperty(value) {\n  return new NodeTransformationProperty(value);\n}\n\nfunction createNodeTransformationPropertyBag(value) {\n  return new PropertyBag(value, createNodeTransformationProperty);\n}\n\nfunction createArticulationStagePropertyBag(value) {\n  return new PropertyBag(value);\n}\n\n/**\n * @typedef {Object} ModelGraphics.ConstructorOptions\n *\n * Initialization options for the ModelGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the model.\n * @property {Property | string | Resource} [uri] A string or Resource Property specifying the URI of the glTF asset.\n * @property {Property | number} [scale=1.0] A numeric Property specifying a uniform linear scale.\n * @property {Property | number} [minimumPixelSize=0.0] A numeric Property specifying the approximate minimum pixel size of the model regardless of zoom.\n * @property {Property | number} [maximumScale] The maximum scale size of a model. An upper limit for minimumPixelSize.\n * @property {Property | boolean} [incrementallyLoadTextures=true] Determine if textures may continue to stream in after the model is loaded.\n * @property {Property | boolean} [runAnimations=true] A boolean Property specifying if glTF animations specified in the model should be started.\n * @property {Property | boolean} [clampAnimations=true] A boolean Property specifying if glTF animations should hold the last pose for time durations with no keyframes.\n * @property {Property | ShadowMode} [shadows=ShadowMode.ENABLED] An enum Property specifying whether the model casts or receives shadows from light sources.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @property {Property | Color} [silhouetteColor=Color.RED] A Property specifying the {@link Color} of the silhouette.\n * @property {Property | number} [silhouetteSize=0.0] A numeric Property specifying the size of the silhouette in pixels.\n * @property {Property | Color} [color=Color.WHITE] A Property specifying the {@link Color} that blends with the model's rendered color.\n * @property {Property | ColorBlendMode} [colorBlendMode=ColorBlendMode.HIGHLIGHT] An enum Property specifying how the color blends with the model.\n * @property {Property | number} [colorBlendAmount=0.5] A numeric Property specifying the color strength when the <code>colorBlendMode</code> is <code>MIX</code>. A value of 0.0 results in the model's rendered color while a value of 1.0 results in a solid color, with any value in-between resulting in a mix of the two.\n * @property {Property | Cartesian2} [imageBasedLightingFactor=new Cartesian2(1.0, 1.0)] A property specifying the contribution from diffuse and specular image-based lighting.\n * @property {Property | Color} [lightColor] A property specifying the light color when shading the model. When <code>undefined</code> the scene's light color is used instead.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this model will be displayed.\n * @property {PropertyBag | Object.<string, TranslationRotationScale>} [nodeTransformations] An object, where keys are names of nodes, and values are {@link TranslationRotationScale} Properties describing the transformation to apply to that node. The transformation is applied after the node's existing transformation as specified in the glTF, and does not replace the node's existing transformation.\n * @property {PropertyBag | Object.<string, number>} [articulations] An object, where keys are composed of an articulation name, a single space, and a stage name, and the values are numeric properties.\n * @property {Property | ClippingPlaneCollection} [clippingPlanes] A property specifying the {@link ClippingPlaneCollection} used to selectively disable rendering the model.\n */\n\n/**\n * A 3D model based on {@link https://github.com/KhronosGroup/glTF|glTF}, the runtime asset format for WebGL, OpenGL ES, and OpenGL.\n * The position and orientation of the model is determined by the containing {@link Entity}.\n * <p>\n * Cesium includes support for glTF geometry, materials, animations, and skinning.\n * Cameras and lights are not currently supported.\n * </p>\n *\n * @alias ModelGraphics\n * @constructor\n *\n * @param {ModelGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=3D%20Models.html|Cesium Sandcastle 3D Models Demo}\n */\nfunction ModelGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._uri = undefined;\n  this._uriSubscription = undefined;\n  this._scale = undefined;\n  this._scaleSubscription = undefined;\n  this._minimumPixelSize = undefined;\n  this._minimumPixelSizeSubscription = undefined;\n  this._maximumScale = undefined;\n  this._maximumScaleSubscription = undefined;\n  this._incrementallyLoadTextures = undefined;\n  this._incrementallyLoadTexturesSubscription = undefined;\n  this._runAnimations = undefined;\n  this._runAnimationsSubscription = undefined;\n  this._clampAnimations = undefined;\n  this._clampAnimationsSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._silhouetteColor = undefined;\n  this._silhouetteColorSubscription = undefined;\n  this._silhouetteSize = undefined;\n  this._silhouetteSizeSubscription = undefined;\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._colorBlendMode = undefined;\n  this._colorBlendModeSubscription = undefined;\n  this._colorBlendAmount = undefined;\n  this._colorBlendAmountSubscription = undefined;\n  this._imageBasedLightingFactor = undefined;\n  this._imageBasedLightingFactorSubscription = undefined;\n  this._lightColor = undefined;\n  this._lightColorSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._nodeTransformations = undefined;\n  this._nodeTransformationsSubscription = undefined;\n  this._articulations = undefined;\n  this._articulationsSubscription = undefined;\n  this._clippingPlanes = undefined;\n  this._clippingPlanesSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(ModelGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof ModelGraphics.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the model.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the string Property specifying the URI of the glTF asset.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  uri: createPropertyDescriptor(\"uri\"),\n\n  /**\n   * Gets or sets the numeric Property specifying a uniform linear scale\n   * for this model. Values greater than 1.0 increase the size of the model while\n   * values less than 1.0 decrease it.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  scale: createPropertyDescriptor(\"scale\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the approximate minimum\n   * pixel size of the model regardless of zoom. This can be used to ensure that\n   * a model is visible even when the viewer zooms out.  When <code>0.0</code>,\n   * no minimum size is enforced.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  minimumPixelSize: createPropertyDescriptor(\"minimumPixelSize\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the maximum scale\n   * size of a model. This property is used as an upper limit for\n   * {@link ModelGraphics#minimumPixelSize}.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  maximumScale: createPropertyDescriptor(\"maximumScale\"),\n\n  /**\n   * Get or sets the boolean Property specifying whether textures\n   * may continue to stream in after the model is loaded.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  incrementallyLoadTextures: createPropertyDescriptor(\n    \"incrementallyLoadTextures\"\n  ),\n\n  /**\n   * Gets or sets the boolean Property specifying if glTF animations should be run.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  runAnimations: createPropertyDescriptor(\"runAnimations\"),\n\n  /**\n   * Gets or sets the boolean Property specifying if glTF animations should hold the last pose for time durations with no keyframes.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  clampAnimations: createPropertyDescriptor(\"clampAnimations\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the model\n   * casts or receives shadows from light sources.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.ENABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the silhouette.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.RED\n   */\n  silhouetteColor: createPropertyDescriptor(\"silhouetteColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the size of the silhouette in pixels.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  silhouetteSize: createPropertyDescriptor(\"silhouetteSize\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} that blends with the model's rendered color.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the enum Property specifying how the color blends with the model.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   * @default ColorBlendMode.HIGHLIGHT\n   */\n  colorBlendMode: createPropertyDescriptor(\"colorBlendMode\"),\n\n  /**\n   * A numeric Property specifying the color strength when the <code>colorBlendMode</code> is MIX.\n   * A value of 0.0 results in the model's rendered color while a value of 1.0 results in a solid color, with\n   * any value in-between resulting in a mix of the two.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.5\n   */\n  colorBlendAmount: createPropertyDescriptor(\"colorBlendAmount\"),\n\n  /**\n   * A property specifying the {@link Cartesian2} used to scale the diffuse and specular image-based lighting contribution to the final color.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  imageBasedLightingFactor: createPropertyDescriptor(\n    \"imageBasedLightingFactor\"\n  ),\n\n  /**\n   * A property specifying the {@link Cartesian3} light color when shading the model. When <code>undefined</code> the scene's light color is used instead.\n   * @memberOf ModelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  lightColor: createPropertyDescriptor(\"lightColor\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this model will be displayed.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n\n  /**\n   * Gets or sets the set of node transformations to apply to this model.  This is represented as an {@link PropertyBag}, where keys are\n   * names of nodes, and values are {@link TranslationRotationScale} Properties describing the transformation to apply to that node.\n   * The transformation is applied after the node's existing transformation as specified in the glTF, and does not replace the node's existing transformation.\n   * @memberof ModelGraphics.prototype\n   * @type {PropertyBag}\n   */\n  nodeTransformations: createPropertyDescriptor(\n    \"nodeTransformations\",\n    undefined,\n    createNodeTransformationPropertyBag\n  ),\n\n  /**\n   * Gets or sets the set of articulation values to apply to this model.  This is represented as an {@link PropertyBag}, where keys are\n   * composed as the name of the articulation, a single space, and the name of the stage.\n   * @memberof ModelGraphics.prototype\n   * @type {PropertyBag}\n   */\n  articulations: createPropertyDescriptor(\n    \"articulations\",\n    undefined,\n    createArticulationStagePropertyBag\n  ),\n\n  /**\n   * A property specifying the {@link ClippingPlaneCollection} used to selectively disable rendering the model.\n   * @memberof ModelGraphics.prototype\n   * @type {Property|undefined}\n   */\n  clippingPlanes: createPropertyDescriptor(\"clippingPlanes\"),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {ModelGraphics} [result] The object onto which to store the result.\n * @returns {ModelGraphics} The modified result parameter or a new instance if one was not provided.\n */\nModelGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new ModelGraphics(this);\n  }\n  result.show = this.show;\n  result.uri = this.uri;\n  result.scale = this.scale;\n  result.minimumPixelSize = this.minimumPixelSize;\n  result.maximumScale = this.maximumScale;\n  result.incrementallyLoadTextures = this.incrementallyLoadTextures;\n  result.runAnimations = this.runAnimations;\n  result.clampAnimations = this.clampAnimations;\n  result.heightReference = this._heightReference;\n  result.silhouetteColor = this.silhouetteColor;\n  result.silhouetteSize = this.silhouetteSize;\n  result.color = this.color;\n  result.colorBlendMode = this.colorBlendMode;\n  result.colorBlendAmount = this.colorBlendAmount;\n  result.imageBasedLightingFactor = this.imageBasedLightingFactor;\n  result.lightColor = this.lightColor;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.nodeTransformations = this.nodeTransformations;\n  result.articulations = this.articulations;\n  result.clippingPlanes = this.clippingPlanes;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {ModelGraphics} source The object to be merged into this object.\n */\nModelGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.uri = defaultValue(this.uri, source.uri);\n  this.scale = defaultValue(this.scale, source.scale);\n  this.minimumPixelSize = defaultValue(\n    this.minimumPixelSize,\n    source.minimumPixelSize\n  );\n  this.maximumScale = defaultValue(this.maximumScale, source.maximumScale);\n  this.incrementallyLoadTextures = defaultValue(\n    this.incrementallyLoadTextures,\n    source.incrementallyLoadTextures\n  );\n  this.runAnimations = defaultValue(this.runAnimations, source.runAnimations);\n  this.clampAnimations = defaultValue(\n    this.clampAnimations,\n    source.clampAnimations\n  );\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference\n  );\n  this.silhouetteColor = defaultValue(\n    this.silhouetteColor,\n    source.silhouetteColor\n  );\n  this.silhouetteSize = defaultValue(\n    this.silhouetteSize,\n    source.silhouetteSize\n  );\n  this.color = defaultValue(this.color, source.color);\n  this.colorBlendMode = defaultValue(\n    this.colorBlendMode,\n    source.colorBlendMode\n  );\n  this.colorBlendAmount = defaultValue(\n    this.colorBlendAmount,\n    source.colorBlendAmount\n  );\n  this.imageBasedLightingFactor = defaultValue(\n    this.imageBasedLightingFactor,\n    source.imageBasedLightingFactor\n  );\n  this.lightColor = defaultValue(this.lightColor, source.lightColor);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n  this.clippingPlanes = defaultValue(\n    this.clippingPlanes,\n    source.clippingPlanes\n  );\n\n  const sourceNodeTransformations = source.nodeTransformations;\n  if (defined(sourceNodeTransformations)) {\n    const targetNodeTransformations = this.nodeTransformations;\n    if (defined(targetNodeTransformations)) {\n      targetNodeTransformations.merge(sourceNodeTransformations);\n    } else {\n      this.nodeTransformations = new PropertyBag(\n        sourceNodeTransformations,\n        createNodeTransformationProperty\n      );\n    }\n  }\n\n  const sourceArticulations = source.articulations;\n  if (defined(sourceArticulations)) {\n    const targetArticulations = this.articulations;\n    if (defined(targetArticulations)) {\n      targetArticulations.merge(sourceArticulations);\n    } else {\n      this.articulations = new PropertyBag(sourceArticulations);\n    }\n  }\n};\nexport default ModelGraphics;\n","import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Resource from \"../Core/Resource.js\";\nimport ColorBlendMode from \"../Scene/ColorBlendMode.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport Model from \"../Scene/Model.js\";\nimport ModelAnimationLoop from \"../Scene/ModelAnimationLoop.js\";\nimport ShadowMode from \"../Scene/ShadowMode.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\n\nconst defaultScale = 1.0;\nconst defaultMinimumPixelSize = 0.0;\nconst defaultIncrementallyLoadTextures = true;\nconst defaultClampAnimations = true;\nconst defaultShadows = ShadowMode.ENABLED;\nconst defaultHeightReference = HeightReference.NONE;\nconst defaultSilhouetteColor = Color.RED;\nconst defaultSilhouetteSize = 0.0;\nconst defaultColor = Color.WHITE;\nconst defaultColorBlendMode = ColorBlendMode.HIGHLIGHT;\nconst defaultColorBlendAmount = 0.5;\nconst defaultImageBasedLightingFactor = new Cartesian2(1.0, 1.0);\n\nconst modelMatrixScratch = new Matrix4();\nconst nodeMatrixScratch = new Matrix4();\n\n/**\n * A {@link Visualizer} which maps {@link Entity#model} to a {@link Model}.\n * @alias ModelVisualizer\n * @constructor\n *\n * @param {Scene} scene The scene the primitives will be rendered in.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\nfunction ModelVisualizer(scene, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  }\n  //>>includeEnd('debug');\n\n  entityCollection.collectionChanged.addEventListener(\n    ModelVisualizer.prototype._onCollectionChanged,\n    this\n  );\n\n  this._scene = scene;\n  this._primitives = scene.primitives;\n  this._entityCollection = entityCollection;\n  this._modelHash = {};\n  this._entitiesToVisualize = new AssociativeArray();\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n\n/**\n * Updates models created this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} This function always returns true.\n */\nModelVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const entities = this._entitiesToVisualize.values;\n  const modelHash = this._modelHash;\n  const primitives = this._primitives;\n\n  for (let i = 0, len = entities.length; i < len; i++) {\n    const entity = entities[i];\n    const modelGraphics = entity._model;\n\n    let resource;\n    let modelData = modelHash[entity.id];\n    let show =\n      entity.isShowing &&\n      entity.isAvailable(time) &&\n      Property.getValueOrDefault(modelGraphics._show, time, true);\n\n    let modelMatrix;\n    if (show) {\n      modelMatrix = entity.computeModelMatrix(time, modelMatrixScratch);\n      resource = Resource.createIfNeeded(\n        Property.getValueOrUndefined(modelGraphics._uri, time)\n      );\n      show = defined(modelMatrix) && defined(resource);\n    }\n\n    if (!show) {\n      if (defined(modelData)) {\n        modelData.modelPrimitive.show = false;\n      }\n      continue;\n    }\n\n    let model = defined(modelData) ? modelData.modelPrimitive : undefined;\n    if (!defined(model) || resource.url !== modelData.url) {\n      if (defined(model)) {\n        primitives.removeAndDestroy(model);\n        delete modelHash[entity.id];\n      }\n      model = Model.fromGltf({\n        url: resource,\n        incrementallyLoadTextures: Property.getValueOrDefault(\n          modelGraphics._incrementallyLoadTextures,\n          time,\n          defaultIncrementallyLoadTextures\n        ),\n        scene: this._scene,\n      });\n      model.id = entity;\n      primitives.add(model);\n\n      modelData = {\n        modelPrimitive: model,\n        url: resource.url,\n        animationsRunning: false,\n        nodeTransformationsScratch: {},\n        articulationsScratch: {},\n        loadFail: false,\n      };\n      modelHash[entity.id] = modelData;\n\n      checkModelLoad(model, entity, modelHash);\n    }\n\n    model.show = true;\n    model.scale = Property.getValueOrDefault(\n      modelGraphics._scale,\n      time,\n      defaultScale\n    );\n    model.minimumPixelSize = Property.getValueOrDefault(\n      modelGraphics._minimumPixelSize,\n      time,\n      defaultMinimumPixelSize\n    );\n    model.maximumScale = Property.getValueOrUndefined(\n      modelGraphics._maximumScale,\n      time\n    );\n    model.modelMatrix = Matrix4.clone(modelMatrix, model.modelMatrix);\n    model.shadows = Property.getValueOrDefault(\n      modelGraphics._shadows,\n      time,\n      defaultShadows\n    );\n    model.heightReference = Property.getValueOrDefault(\n      modelGraphics._heightReference,\n      time,\n      defaultHeightReference\n    );\n    model.distanceDisplayCondition = Property.getValueOrUndefined(\n      modelGraphics._distanceDisplayCondition,\n      time\n    );\n    model.silhouetteColor = Property.getValueOrDefault(\n      modelGraphics._silhouetteColor,\n      time,\n      defaultSilhouetteColor,\n      model._silhouetteColor\n    );\n    model.silhouetteSize = Property.getValueOrDefault(\n      modelGraphics._silhouetteSize,\n      time,\n      defaultSilhouetteSize\n    );\n    model.color = Property.getValueOrDefault(\n      modelGraphics._color,\n      time,\n      defaultColor,\n      model._color\n    );\n    model.colorBlendMode = Property.getValueOrDefault(\n      modelGraphics._colorBlendMode,\n      time,\n      defaultColorBlendMode\n    );\n    model.colorBlendAmount = Property.getValueOrDefault(\n      modelGraphics._colorBlendAmount,\n      time,\n      defaultColorBlendAmount\n    );\n    model.clippingPlanes = Property.getValueOrUndefined(\n      modelGraphics._clippingPlanes,\n      time\n    );\n    model.clampAnimations = Property.getValueOrDefault(\n      modelGraphics._clampAnimations,\n      time,\n      defaultClampAnimations\n    );\n    model.imageBasedLighting.imageBasedLightingFactor = Property.getValueOrDefault(\n      modelGraphics._imageBasedLightingFactor,\n      time,\n      defaultImageBasedLightingFactor\n    );\n    model.lightColor = Property.getValueOrUndefined(\n      modelGraphics._lightColor,\n      time\n    );\n\n    if (model.ready) {\n      const runAnimations = Property.getValueOrDefault(\n        modelGraphics._runAnimations,\n        time,\n        true\n      );\n      if (modelData.animationsRunning !== runAnimations) {\n        if (runAnimations) {\n          model.activeAnimations.addAll({\n            loop: ModelAnimationLoop.REPEAT,\n          });\n        } else {\n          model.activeAnimations.removeAll();\n        }\n        modelData.animationsRunning = runAnimations;\n      }\n\n      // Apply node transformations\n      const nodeTransformations = Property.getValueOrUndefined(\n        modelGraphics._nodeTransformations,\n        time,\n        modelData.nodeTransformationsScratch\n      );\n      if (defined(nodeTransformations)) {\n        const nodeNames = Object.keys(nodeTransformations);\n        for (\n          let nodeIndex = 0, nodeLength = nodeNames.length;\n          nodeIndex < nodeLength;\n          ++nodeIndex\n        ) {\n          const nodeName = nodeNames[nodeIndex];\n\n          const nodeTransformation = nodeTransformations[nodeName];\n          if (!defined(nodeTransformation)) {\n            continue;\n          }\n\n          const modelNode = model.getNode(nodeName);\n          if (!defined(modelNode)) {\n            continue;\n          }\n\n          const transformationMatrix = Matrix4.fromTranslationRotationScale(\n            nodeTransformation,\n            nodeMatrixScratch\n          );\n          modelNode.matrix = Matrix4.multiply(\n            modelNode.originalMatrix,\n            transformationMatrix,\n            transformationMatrix\n          );\n        }\n      }\n\n      // Apply articulations\n      let anyArticulationUpdated = false;\n      const articulations = Property.getValueOrUndefined(\n        modelGraphics._articulations,\n        time,\n        modelData.articulationsScratch\n      );\n      if (defined(articulations)) {\n        const articulationStageKeys = Object.keys(articulations);\n        for (\n          let s = 0, numKeys = articulationStageKeys.length;\n          s < numKeys;\n          ++s\n        ) {\n          const key = articulationStageKeys[s];\n\n          const articulationStageValue = articulations[key];\n          if (!defined(articulationStageValue)) {\n            continue;\n          }\n\n          anyArticulationUpdated = true;\n          model.setArticulationStage(key, articulationStageValue);\n        }\n      }\n\n      if (anyArticulationUpdated) {\n        model.applyArticulations();\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nModelVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nModelVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(\n    ModelVisualizer.prototype._onCollectionChanged,\n    this\n  );\n  const entities = this._entitiesToVisualize.values;\n  const modelHash = this._modelHash;\n  const primitives = this._primitives;\n  for (let i = entities.length - 1; i > -1; i--) {\n    removeModel(this, entities[i], modelHash, primitives);\n  }\n  return destroyObject(this);\n};\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nModelVisualizer.prototype.getBoundingSphere = function (entity, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const modelData = this._modelHash[entity.id];\n  if (!defined(modelData) || modelData.loadFail) {\n    return BoundingSphereState.FAILED;\n  }\n\n  const model = modelData.modelPrimitive;\n  if (!defined(model) || !model.show) {\n    return BoundingSphereState.FAILED;\n  }\n\n  if (!model.ready) {\n    return BoundingSphereState.PENDING;\n  }\n\n  if (model.heightReference === HeightReference.NONE) {\n    BoundingSphere.transform(\n      model.boundingSphereInternal,\n      model.modelMatrix,\n      result\n    );\n  } else {\n    if (!defined(model._clampedModelMatrix)) {\n      return BoundingSphereState.PENDING;\n    }\n    BoundingSphere.transform(\n      model.boundingSphereInternal,\n      model._clampedModelMatrix,\n      result\n    );\n  }\n  return BoundingSphereState.DONE;\n};\n\n/**\n * @private\n */\nModelVisualizer.prototype._onCollectionChanged = function (\n  entityCollection,\n  added,\n  removed,\n  changed\n) {\n  let i;\n  let entity;\n  const entities = this._entitiesToVisualize;\n  const modelHash = this._modelHash;\n  const primitives = this._primitives;\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    if (defined(entity._model) && defined(entity._position)) {\n      entities.set(entity.id, entity);\n    }\n  }\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n    if (defined(entity._model) && defined(entity._position)) {\n      clearNodeTransformationsArticulationsScratch(entity, modelHash);\n      entities.set(entity.id, entity);\n    } else {\n      removeModel(this, entity, modelHash, primitives);\n      entities.remove(entity.id);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    removeModel(this, entity, modelHash, primitives);\n    entities.remove(entity.id);\n  }\n};\n\nfunction removeModel(visualizer, entity, modelHash, primitives) {\n  const modelData = modelHash[entity.id];\n  if (defined(modelData)) {\n    primitives.removeAndDestroy(modelData.modelPrimitive);\n    delete modelHash[entity.id];\n  }\n}\n\nfunction clearNodeTransformationsArticulationsScratch(entity, modelHash) {\n  const modelData = modelHash[entity.id];\n  if (defined(modelData)) {\n    modelData.nodeTransformationsScratch = {};\n    modelData.articulationsScratch = {};\n  }\n}\n\nfunction checkModelLoad(model, entity, modelHash) {\n  model.readyPromise.catch(function (error) {\n    console.error(error);\n    modelHash[entity.id].loadFail = true;\n  });\n}\nexport default ModelVisualizer;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport TranslationRotationScale from \"../Core/TranslationRotationScale.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nconst defaultNodeTransformation = new TranslationRotationScale();\n\n/**\n * A {@link Property} that produces {@link TranslationRotationScale} data.\n * @alias NodeTransformationProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property|Cartesian3} [options.translation=Cartesian3.ZERO] A {@link Cartesian3} Property specifying the (x, y, z) translation to apply to the node.\n * @param {Property|Quaternion} [options.rotation=Quaternion.IDENTITY] A {@link Quaternion} Property specifying the (x, y, z, w) rotation to apply to the node.\n * @param {Property|Cartesian3} [options.scale=new Cartesian3(1.0, 1.0, 1.0)] A {@link Cartesian3} Property specifying the (x, y, z) scaling to apply to the node.\n */\nfunction NodeTransformationProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._translation = undefined;\n  this._translationSubscription = undefined;\n  this._rotation = undefined;\n  this._rotationSubscription = undefined;\n  this._scale = undefined;\n  this._scaleSubscription = undefined;\n\n  this.translation = options.translation;\n  this.rotation = options.rotation;\n  this.scale = options.scale;\n}\n\nObject.defineProperties(NodeTransformationProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof NodeTransformationProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._translation) &&\n        Property.isConstant(this._rotation) &&\n        Property.isConstant(this._scale)\n      );\n    },\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof NodeTransformationProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link Cartesian3} Property specifying the (x, y, z) translation to apply to the node.\n   * @memberof NodeTransformationProperty.prototype\n   * @type {Property|undefined}\n   * @default Cartesian3.ZERO\n   */\n  translation: createPropertyDescriptor(\"translation\"),\n\n  /**\n   * Gets or sets the {@link Quaternion} Property specifying the (x, y, z, w) rotation to apply to the node.\n   * @memberof NodeTransformationProperty.prototype\n   * @type {Property|undefined}\n   * @default Quaternion.IDENTITY\n   */\n  rotation: createPropertyDescriptor(\"rotation\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} Property specifying the (x, y, z) scaling to apply to the node.\n   * @memberof NodeTransformationProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian3(1.0, 1.0, 1.0)\n   */\n  scale: createPropertyDescriptor(\"scale\"),\n});\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {TranslationRotationScale} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {TranslationRotationScale} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nNodeTransformationProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = new TranslationRotationScale();\n  }\n\n  result.translation = Property.getValueOrClonedDefault(\n    this._translation,\n    time,\n    defaultNodeTransformation.translation,\n    result.translation\n  );\n  result.rotation = Property.getValueOrClonedDefault(\n    this._rotation,\n    time,\n    defaultNodeTransformation.rotation,\n    result.rotation\n  );\n  result.scale = Property.getValueOrClonedDefault(\n    this._scale,\n    time,\n    defaultNodeTransformation.scale,\n    result.scale\n  );\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nNodeTransformationProperty.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (other instanceof NodeTransformationProperty &&\n      Property.equals(this._translation, other._translation) &&\n      Property.equals(this._rotation, other._rotation) &&\n      Property.equals(this._scale, other._scale))\n  );\n};\nexport default NodeTransformationProperty;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {Object} PathGraphics.ConstructorOptions\n *\n * Initialization options for the PathGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the path.\n * @property {Property | number} [leadTime] A Property specifying the number of seconds in front the object to show.\n * @property {Property | number} [trailTime] A Property specifying the number of seconds behind of the object to show.\n * @property {Property | number} [width=1.0] A numeric Property specifying the width in pixels.\n * @property {Property | number} [resolution=60] A numeric Property specifying the maximum number of seconds to step when sampling the position.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to draw the path.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this path will be displayed.\n */\n\n/**\n * Describes a polyline defined as the path made by an {@link Entity} as it moves over time.\n *\n * @alias PathGraphics\n * @constructor\n *\n * @param {PathGraphics.ConstructorOptions} [options] Object describing initialization options\n */\nfunction PathGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._leadTime = undefined;\n  this._leadTimeSubscription = undefined;\n  this._trailTime = undefined;\n  this._trailTimeSubscription = undefined;\n  this._width = undefined;\n  this._widthSubscription = undefined;\n  this._resolution = undefined;\n  this._resolutionSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PathGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PathGraphics.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the path.\n   * @memberof PathGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the number of seconds in front of the object to show.\n   * @memberof PathGraphics.prototype\n   * @type {Property|undefined}\n   */\n  leadTime: createPropertyDescriptor(\"leadTime\"),\n\n  /**\n   * Gets or sets the Property specifying the number of seconds behind the object to show.\n   * @memberof PathGraphics.prototype\n   * @type {Property|undefined}\n   */\n  trailTime: createPropertyDescriptor(\"trailTime\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width in pixels.\n   * @memberof PathGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  width: createPropertyDescriptor(\"width\"),\n\n  /**\n   * Gets or sets the Property specifying the maximum number of seconds to step when sampling the position.\n   * @memberof PathGraphics.prototype\n   * @type {Property|undefined}\n   * @default 60\n   */\n  resolution: createPropertyDescriptor(\"resolution\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to draw the path.\n   * @memberof PathGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this path will be displayed.\n   * @memberof PathGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {PathGraphics} [result] The object onto which to store the result.\n * @returns {PathGraphics} The modified result parameter or a new instance if one was not provided.\n */\nPathGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PathGraphics(this);\n  }\n  result.show = this.show;\n  result.leadTime = this.leadTime;\n  result.trailTime = this.trailTime;\n  result.width = this.width;\n  result.resolution = this.resolution;\n  result.material = this.material;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PathGraphics} source The object to be merged into this object.\n */\nPathGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.leadTime = defaultValue(this.leadTime, source.leadTime);\n  this.trailTime = defaultValue(this.trailTime, source.trailTime);\n  this.width = defaultValue(this.width, source.width);\n  this.resolution = defaultValue(this.resolution, source.resolution);\n  this.material = defaultValue(this.material, source.material);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n};\nexport default PathGraphics;\n","import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport TimeInterval from \"../Core/TimeInterval.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport PolylineCollection from \"../Scene/PolylineCollection.js\";\nimport SceneMode from \"../Scene/SceneMode.js\";\nimport CompositePositionProperty from \"./CompositePositionProperty.js\";\nimport ConstantPositionProperty from \"./ConstantPositionProperty.js\";\nimport MaterialProperty from \"./MaterialProperty.js\";\nimport Property from \"./Property.js\";\nimport ReferenceProperty from \"./ReferenceProperty.js\";\nimport SampledPositionProperty from \"./SampledPositionProperty.js\";\nimport ScaledPositionProperty from \"./ScaledPositionProperty.js\";\nimport TimeIntervalCollectionPositionProperty from \"./TimeIntervalCollectionPositionProperty.js\";\n\nconst defaultResolution = 60.0;\nconst defaultWidth = 1.0;\n\nconst scratchTimeInterval = new TimeInterval();\nconst subSampleCompositePropertyScratch = new TimeInterval();\nconst subSampleIntervalPropertyScratch = new TimeInterval();\n\nfunction EntityData(entity) {\n  this.entity = entity;\n  this.polyline = undefined;\n  this.index = undefined;\n  this.updater = undefined;\n}\n\nfunction subSampleSampledProperty(\n  property,\n  start,\n  stop,\n  times,\n  updateTime,\n  referenceFrame,\n  maximumStep,\n  startingIndex,\n  result\n) {\n  let r = startingIndex;\n  //Always step exactly on start (but only use it if it exists.)\n  let tmp;\n  tmp = property.getValueInReferenceFrame(start, referenceFrame, result[r]);\n  if (defined(tmp)) {\n    result[r++] = tmp;\n  }\n\n  let steppedOnNow =\n    !defined(updateTime) ||\n    JulianDate.lessThanOrEquals(updateTime, start) ||\n    JulianDate.greaterThanOrEquals(updateTime, stop);\n\n  //Iterate over all interval times and add the ones that fall in our\n  //time range.  Note that times can contain data outside of\n  //the intervals range.  This is by design for use with interpolation.\n  let t = 0;\n  const len = times.length;\n  let current = times[t];\n  const loopStop = stop;\n  let sampling = false;\n  let sampleStepsToTake;\n  let sampleStepsTaken;\n  let sampleStepSize;\n\n  while (t < len) {\n    if (!steppedOnNow && JulianDate.greaterThanOrEquals(current, updateTime)) {\n      tmp = property.getValueInReferenceFrame(\n        updateTime,\n        referenceFrame,\n        result[r]\n      );\n      if (defined(tmp)) {\n        result[r++] = tmp;\n      }\n      steppedOnNow = true;\n    }\n    if (\n      JulianDate.greaterThan(current, start) &&\n      JulianDate.lessThan(current, loopStop) &&\n      !current.equals(updateTime)\n    ) {\n      tmp = property.getValueInReferenceFrame(\n        current,\n        referenceFrame,\n        result[r]\n      );\n      if (defined(tmp)) {\n        result[r++] = tmp;\n      }\n    }\n\n    if (t < len - 1) {\n      if (maximumStep > 0 && !sampling) {\n        const next = times[t + 1];\n        const secondsUntilNext = JulianDate.secondsDifference(next, current);\n        sampling = secondsUntilNext > maximumStep;\n\n        if (sampling) {\n          sampleStepsToTake = Math.ceil(secondsUntilNext / maximumStep);\n          sampleStepsTaken = 0;\n          sampleStepSize = secondsUntilNext / Math.max(sampleStepsToTake, 2);\n          sampleStepsToTake = Math.max(sampleStepsToTake - 1, 1);\n        }\n      }\n\n      if (sampling && sampleStepsTaken < sampleStepsToTake) {\n        current = JulianDate.addSeconds(\n          current,\n          sampleStepSize,\n          new JulianDate()\n        );\n        sampleStepsTaken++;\n        continue;\n      }\n    }\n    sampling = false;\n    t++;\n    current = times[t];\n  }\n\n  //Always step exactly on stop (but only use it if it exists.)\n  tmp = property.getValueInReferenceFrame(stop, referenceFrame, result[r]);\n  if (defined(tmp)) {\n    result[r++] = tmp;\n  }\n\n  return r;\n}\n\nfunction subSampleGenericProperty(\n  property,\n  start,\n  stop,\n  updateTime,\n  referenceFrame,\n  maximumStep,\n  startingIndex,\n  result\n) {\n  let tmp;\n  let i = 0;\n  let index = startingIndex;\n  let time = start;\n  const stepSize = Math.max(maximumStep, 60);\n  let steppedOnNow =\n    !defined(updateTime) ||\n    JulianDate.lessThanOrEquals(updateTime, start) ||\n    JulianDate.greaterThanOrEquals(updateTime, stop);\n  while (JulianDate.lessThan(time, stop)) {\n    if (!steppedOnNow && JulianDate.greaterThanOrEquals(time, updateTime)) {\n      steppedOnNow = true;\n      tmp = property.getValueInReferenceFrame(\n        updateTime,\n        referenceFrame,\n        result[index]\n      );\n      if (defined(tmp)) {\n        result[index] = tmp;\n        index++;\n      }\n    }\n    tmp = property.getValueInReferenceFrame(\n      time,\n      referenceFrame,\n      result[index]\n    );\n    if (defined(tmp)) {\n      result[index] = tmp;\n      index++;\n    }\n    i++;\n    time = JulianDate.addSeconds(start, stepSize * i, new JulianDate());\n  }\n  //Always sample stop.\n  tmp = property.getValueInReferenceFrame(stop, referenceFrame, result[index]);\n  if (defined(tmp)) {\n    result[index] = tmp;\n    index++;\n  }\n  return index;\n}\n\nfunction subSampleIntervalProperty(\n  property,\n  start,\n  stop,\n  updateTime,\n  referenceFrame,\n  maximumStep,\n  startingIndex,\n  result\n) {\n  subSampleIntervalPropertyScratch.start = start;\n  subSampleIntervalPropertyScratch.stop = stop;\n\n  let index = startingIndex;\n  const intervals = property.intervals;\n  for (let i = 0; i < intervals.length; i++) {\n    const interval = intervals.get(i);\n    if (\n      !TimeInterval.intersect(\n        interval,\n        subSampleIntervalPropertyScratch,\n        scratchTimeInterval\n      ).isEmpty\n    ) {\n      let time = interval.start;\n      if (!interval.isStartIncluded) {\n        if (interval.isStopIncluded) {\n          time = interval.stop;\n        } else {\n          time = JulianDate.addSeconds(\n            interval.start,\n            JulianDate.secondsDifference(interval.stop, interval.start) / 2,\n            new JulianDate()\n          );\n        }\n      }\n      const tmp = property.getValueInReferenceFrame(\n        time,\n        referenceFrame,\n        result[index]\n      );\n      if (defined(tmp)) {\n        result[index] = tmp;\n        index++;\n      }\n    }\n  }\n  return index;\n}\n\nfunction subSampleConstantProperty(\n  property,\n  start,\n  stop,\n  updateTime,\n  referenceFrame,\n  maximumStep,\n  startingIndex,\n  result\n) {\n  const tmp = property.getValueInReferenceFrame(\n    start,\n    referenceFrame,\n    result[startingIndex]\n  );\n  if (defined(tmp)) {\n    result[startingIndex++] = tmp;\n  }\n  return startingIndex;\n}\n\nfunction subSampleCompositeProperty(\n  property,\n  start,\n  stop,\n  updateTime,\n  referenceFrame,\n  maximumStep,\n  startingIndex,\n  result\n) {\n  subSampleCompositePropertyScratch.start = start;\n  subSampleCompositePropertyScratch.stop = stop;\n\n  let index = startingIndex;\n  const intervals = property.intervals;\n  for (let i = 0; i < intervals.length; i++) {\n    const interval = intervals.get(i);\n    if (\n      !TimeInterval.intersect(\n        interval,\n        subSampleCompositePropertyScratch,\n        scratchTimeInterval\n      ).isEmpty\n    ) {\n      const intervalStart = interval.start;\n      const intervalStop = interval.stop;\n\n      let sampleStart = start;\n      if (JulianDate.greaterThan(intervalStart, sampleStart)) {\n        sampleStart = intervalStart;\n      }\n\n      let sampleStop = stop;\n      if (JulianDate.lessThan(intervalStop, sampleStop)) {\n        sampleStop = intervalStop;\n      }\n\n      index = reallySubSample(\n        interval.data,\n        sampleStart,\n        sampleStop,\n        updateTime,\n        referenceFrame,\n        maximumStep,\n        index,\n        result\n      );\n    }\n  }\n  return index;\n}\n\nfunction reallySubSample(\n  property,\n  start,\n  stop,\n  updateTime,\n  referenceFrame,\n  maximumStep,\n  index,\n  result\n) {\n  //Unwrap any references until we have the actual property.\n  while (property instanceof ReferenceProperty) {\n    property = property.resolvedProperty;\n  }\n\n  if (property instanceof SampledPositionProperty) {\n    const times = property._property._times;\n    index = subSampleSampledProperty(\n      property,\n      start,\n      stop,\n      times,\n      updateTime,\n      referenceFrame,\n      maximumStep,\n      index,\n      result\n    );\n  } else if (property instanceof CompositePositionProperty) {\n    index = subSampleCompositeProperty(\n      property,\n      start,\n      stop,\n      updateTime,\n      referenceFrame,\n      maximumStep,\n      index,\n      result\n    );\n  } else if (property instanceof TimeIntervalCollectionPositionProperty) {\n    index = subSampleIntervalProperty(\n      property,\n      start,\n      stop,\n      updateTime,\n      referenceFrame,\n      maximumStep,\n      index,\n      result\n    );\n  } else if (\n    property instanceof ConstantPositionProperty ||\n    (property instanceof ScaledPositionProperty &&\n      Property.isConstant(property))\n  ) {\n    index = subSampleConstantProperty(\n      property,\n      start,\n      stop,\n      updateTime,\n      referenceFrame,\n      maximumStep,\n      index,\n      result\n    );\n  } else {\n    //Fallback to generic sampling.\n    index = subSampleGenericProperty(\n      property,\n      start,\n      stop,\n      updateTime,\n      referenceFrame,\n      maximumStep,\n      index,\n      result\n    );\n  }\n  return index;\n}\n\nfunction subSample(\n  property,\n  start,\n  stop,\n  updateTime,\n  referenceFrame,\n  maximumStep,\n  result\n) {\n  if (!defined(result)) {\n    result = [];\n  }\n\n  const length = reallySubSample(\n    property,\n    start,\n    stop,\n    updateTime,\n    referenceFrame,\n    maximumStep,\n    0,\n    result\n  );\n  result.length = length;\n  return result;\n}\n\nconst toFixedScratch = new Matrix3();\nfunction PolylineUpdater(scene, referenceFrame) {\n  this._unusedIndexes = [];\n  this._polylineCollection = new PolylineCollection();\n  this._scene = scene;\n  this._referenceFrame = referenceFrame;\n  scene.primitives.add(this._polylineCollection);\n}\n\nPolylineUpdater.prototype.update = function (time) {\n  if (this._referenceFrame === ReferenceFrame.INERTIAL) {\n    let toFixed = Transforms.computeIcrfToFixedMatrix(time, toFixedScratch);\n    if (!defined(toFixed)) {\n      toFixed = Transforms.computeTemeToPseudoFixedMatrix(time, toFixedScratch);\n    }\n    Matrix4.fromRotationTranslation(\n      toFixed,\n      Cartesian3.ZERO,\n      this._polylineCollection.modelMatrix\n    );\n  }\n};\n\nPolylineUpdater.prototype.updateObject = function (time, item) {\n  const entity = item.entity;\n  const pathGraphics = entity._path;\n  const positionProperty = entity._position;\n\n  let sampleStart;\n  let sampleStop;\n  const showProperty = pathGraphics._show;\n  let polyline = item.polyline;\n  let show =\n    entity.isShowing &&\n    entity.isAvailable(time) &&\n    (!defined(showProperty) || showProperty.getValue(time));\n\n  //While we want to show the path, there may not actually be anything to show\n  //depending on lead/trail settings.  Compute the interval of the path to\n  //show and check against actual availability.\n  if (show) {\n    const leadTime = Property.getValueOrUndefined(pathGraphics._leadTime, time);\n    const trailTime = Property.getValueOrUndefined(\n      pathGraphics._trailTime,\n      time\n    );\n    const availability = entity._availability;\n    const hasAvailability = defined(availability);\n    const hasLeadTime = defined(leadTime);\n    const hasTrailTime = defined(trailTime);\n\n    //Objects need to have either defined availability or both a lead and trail time in order to\n    //draw a path (since we can't draw \"infinite\" paths.\n    show = hasAvailability || (hasLeadTime && hasTrailTime);\n\n    //The final step is to compute the actual start/stop times of the path to show.\n    //If current time is outside of the availability interval, there's a chance that\n    //we won't have to draw anything anyway.\n    if (show) {\n      if (hasTrailTime) {\n        sampleStart = JulianDate.addSeconds(time, -trailTime, new JulianDate());\n      }\n      if (hasLeadTime) {\n        sampleStop = JulianDate.addSeconds(time, leadTime, new JulianDate());\n      }\n\n      if (hasAvailability) {\n        const start = availability.start;\n        const stop = availability.stop;\n\n        if (!hasTrailTime || JulianDate.greaterThan(start, sampleStart)) {\n          sampleStart = start;\n        }\n\n        if (!hasLeadTime || JulianDate.lessThan(stop, sampleStop)) {\n          sampleStop = stop;\n        }\n      }\n      show = JulianDate.lessThan(sampleStart, sampleStop);\n    }\n  }\n\n  if (!show) {\n    //don't bother creating or updating anything else\n    if (defined(polyline)) {\n      this._unusedIndexes.push(item.index);\n      item.polyline = undefined;\n      polyline.show = false;\n      item.index = undefined;\n    }\n    return;\n  }\n\n  if (!defined(polyline)) {\n    const unusedIndexes = this._unusedIndexes;\n    const length = unusedIndexes.length;\n    if (length > 0) {\n      const index = unusedIndexes.pop();\n      polyline = this._polylineCollection.get(index);\n      item.index = index;\n    } else {\n      item.index = this._polylineCollection.length;\n      polyline = this._polylineCollection.add();\n    }\n    polyline.id = entity;\n    item.polyline = polyline;\n  }\n\n  const resolution = Property.getValueOrDefault(\n    pathGraphics._resolution,\n    time,\n    defaultResolution\n  );\n\n  polyline.show = true;\n  polyline.positions = subSample(\n    positionProperty,\n    sampleStart,\n    sampleStop,\n    time,\n    this._referenceFrame,\n    resolution,\n    polyline.positions.slice()\n  );\n  polyline.material = MaterialProperty.getValue(\n    time,\n    pathGraphics._material,\n    polyline.material\n  );\n  polyline.width = Property.getValueOrDefault(\n    pathGraphics._width,\n    time,\n    defaultWidth\n  );\n  polyline.distanceDisplayCondition = Property.getValueOrUndefined(\n    pathGraphics._distanceDisplayCondition,\n    time,\n    polyline.distanceDisplayCondition\n  );\n};\n\nPolylineUpdater.prototype.removeObject = function (item) {\n  const polyline = item.polyline;\n  if (defined(polyline)) {\n    this._unusedIndexes.push(item.index);\n    item.polyline = undefined;\n    polyline.show = false;\n    polyline.id = undefined;\n    item.index = undefined;\n  }\n};\n\nPolylineUpdater.prototype.destroy = function () {\n  this._scene.primitives.remove(this._polylineCollection);\n  return destroyObject(this);\n};\n\n/**\n * A {@link Visualizer} which maps {@link Entity#path} to a {@link Polyline}.\n * @alias PathVisualizer\n * @constructor\n *\n * @param {Scene} scene The scene the primitives will be rendered in.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\nfunction PathVisualizer(scene, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  }\n  //>>includeEnd('debug');\n\n  entityCollection.collectionChanged.addEventListener(\n    PathVisualizer.prototype._onCollectionChanged,\n    this\n  );\n\n  this._scene = scene;\n  this._updaters = {};\n  this._entityCollection = entityCollection;\n  this._items = new AssociativeArray();\n\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n\n/**\n * Updates all of the primitives created by this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} This function always returns true.\n */\nPathVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const updaters = this._updaters;\n  for (const key in updaters) {\n    if (updaters.hasOwnProperty(key)) {\n      updaters[key].update(time);\n    }\n  }\n\n  const items = this._items.values;\n  if (\n    items.length === 0 &&\n    defined(this._updaters) &&\n    Object.keys(this._updaters).length > 0\n  ) {\n    for (const u in updaters) {\n      if (updaters.hasOwnProperty(u)) {\n        updaters[u].destroy();\n      }\n    }\n    this._updaters = {};\n  }\n\n  for (let i = 0, len = items.length; i < len; i++) {\n    const item = items[i];\n    const entity = item.entity;\n    const positionProperty = entity._position;\n\n    const lastUpdater = item.updater;\n\n    let frameToVisualize = ReferenceFrame.FIXED;\n    if (this._scene.mode === SceneMode.SCENE3D) {\n      frameToVisualize = positionProperty.referenceFrame;\n    }\n\n    let currentUpdater = this._updaters[frameToVisualize];\n\n    if (lastUpdater === currentUpdater && defined(currentUpdater)) {\n      currentUpdater.updateObject(time, item);\n      continue;\n    }\n\n    if (defined(lastUpdater)) {\n      lastUpdater.removeObject(item);\n    }\n\n    if (!defined(currentUpdater)) {\n      currentUpdater = new PolylineUpdater(this._scene, frameToVisualize);\n      currentUpdater.update(time);\n      this._updaters[frameToVisualize] = currentUpdater;\n    }\n\n    item.updater = currentUpdater;\n    if (defined(currentUpdater)) {\n      currentUpdater.updateObject(time, item);\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nPathVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nPathVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(\n    PathVisualizer.prototype._onCollectionChanged,\n    this\n  );\n\n  const updaters = this._updaters;\n  for (const key in updaters) {\n    if (updaters.hasOwnProperty(key)) {\n      updaters[key].destroy();\n    }\n  }\n\n  return destroyObject(this);\n};\n\nPathVisualizer.prototype._onCollectionChanged = function (\n  entityCollection,\n  added,\n  removed,\n  changed\n) {\n  let i;\n  let entity;\n  let item;\n  const items = this._items;\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    if (defined(entity._path) && defined(entity._position)) {\n      items.set(entity.id, new EntityData(entity));\n    }\n  }\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n    if (defined(entity._path) && defined(entity._position)) {\n      if (!items.contains(entity.id)) {\n        items.set(entity.id, new EntityData(entity));\n      }\n    } else {\n      item = items.get(entity.id);\n      if (defined(item)) {\n        if (defined(item.updater)) {\n          item.updater.removeObject(item);\n        }\n        items.remove(entity.id);\n      }\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    item = items.get(entity.id);\n    if (defined(item)) {\n      if (defined(item.updater)) {\n        item.updater.removeObject(item);\n      }\n      items.remove(entity.id);\n    }\n  }\n};\n\n//for testing\nPathVisualizer._subSample = subSample;\nexport default PathVisualizer;\n","import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PlaneGeometry from \"../Core/PlaneGeometry.js\";\nimport PlaneOutlineGeometry from \"../Core/PlaneOutlineGeometry.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport Property from \"./Property.js\";\n\nconst positionScratch = new Cartesian3();\nconst scratchColor = new Color();\n\nfunction PlaneGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.plane = undefined;\n  this.dimensions = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for planes.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias PlaneGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction PlaneGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new PlaneGeometryOptions(entity),\n    geometryPropertyName: \"plane\",\n    observedPropertyNames: [\"availability\", \"position\", \"orientation\", \"plane\"],\n  });\n\n  this._onEntityPropertyChanged(entity, \"plane\", entity.plane, undefined);\n}\n\nif (defined(Object.create)) {\n  PlaneGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n  PlaneGeometryUpdater.prototype.constructor = PlaneGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nPlaneGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n\n  let attributes;\n\n  let color;\n  const show = new ShowGeometryInstanceAttribute(\n    isAvailable &&\n      entity.isShowing &&\n      this._showProperty.getValue(time) &&\n      this._fillProperty.getValue(time)\n  );\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n  const distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n    distanceDisplayCondition\n  );\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    let currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n      color: color,\n    };\n  } else {\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n    };\n  }\n\n  const planeGraphics = entity.plane;\n  const options = this._options;\n  let modelMatrix = entity.computeModelMatrix(time);\n  const plane = Property.getValueOrDefault(\n    planeGraphics.plane,\n    time,\n    options.plane\n  );\n  const dimensions = Property.getValueOrUndefined(\n    planeGraphics.dimensions,\n    time,\n    options.dimensions\n  );\n\n  options.plane = plane;\n  options.dimensions = dimensions;\n\n  modelMatrix = createPrimitiveMatrix(\n    plane,\n    dimensions,\n    modelMatrix,\n    modelMatrix\n  );\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PlaneGeometry(this._options),\n    modelMatrix: modelMatrix,\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nPlaneGeometryUpdater.prototype.createOutlineGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent an outlined geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor\n  );\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n\n  const planeGraphics = entity.plane;\n  const options = this._options;\n  let modelMatrix = entity.computeModelMatrix(time);\n  const plane = Property.getValueOrDefault(\n    planeGraphics.plane,\n    time,\n    options.plane\n  );\n  const dimensions = Property.getValueOrUndefined(\n    planeGraphics.dimensions,\n    time,\n    options.dimensions\n  );\n\n  options.plane = plane;\n  options.dimensions = dimensions;\n\n  modelMatrix = createPrimitiveMatrix(\n    plane,\n    dimensions,\n    modelMatrix,\n    modelMatrix\n  );\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PlaneOutlineGeometry(),\n    modelMatrix: modelMatrix,\n    attributes: {\n      show: new ShowGeometryInstanceAttribute(\n        isAvailable &&\n          entity.isShowing &&\n          this._showProperty.getValue(time) &&\n          this._showOutlineProperty.getValue(time)\n      ),\n      color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n      distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n        distanceDisplayCondition\n      ),\n    },\n  });\n};\n\nPlaneGeometryUpdater.prototype._isHidden = function (entity, plane) {\n  return (\n    !defined(plane.plane) ||\n    !defined(plane.dimensions) ||\n    !defined(entity.position) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, plane)\n  );\n};\n\nPlaneGeometryUpdater.prototype._getIsClosed = function (options) {\n  return false;\n};\n\nPlaneGeometryUpdater.prototype._isDynamic = function (entity, plane) {\n  return (\n    !entity.position.isConstant || //\n    !Property.isConstant(entity.orientation) || //\n    !plane.plane.isConstant || //\n    !plane.dimensions.isConstant || //\n    !Property.isConstant(plane.outlineWidth)\n  );\n};\n\nPlaneGeometryUpdater.prototype._setStaticOptions = function (entity, plane) {\n  const isColorMaterial =\n    this._materialProperty instanceof ColorMaterialProperty;\n\n  const options = this._options;\n  options.vertexFormat = isColorMaterial\n    ? PerInstanceColorAppearance.VERTEX_FORMAT\n    : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.plane = plane.plane.getValue(Iso8601.MINIMUM_VALUE, options.plane);\n  options.dimensions = plane.dimensions.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.dimensions\n  );\n};\n\nPlaneGeometryUpdater.DynamicGeometryUpdater = DynamicPlaneGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicPlaneGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives\n  );\n}\n\nif (defined(Object.create)) {\n  DynamicPlaneGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype\n  );\n  DynamicPlaneGeometryUpdater.prototype.constructor = DynamicPlaneGeometryUpdater;\n}\n\nDynamicPlaneGeometryUpdater.prototype._isHidden = function (\n  entity,\n  plane,\n  time\n) {\n  const options = this._options;\n  const position = Property.getValueOrUndefined(\n    entity.position,\n    time,\n    positionScratch\n  );\n  return (\n    !defined(position) ||\n    !defined(options.plane) ||\n    !defined(options.dimensions) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(this, entity, plane, time)\n  );\n};\n\nDynamicPlaneGeometryUpdater.prototype._setOptions = function (\n  entity,\n  plane,\n  time\n) {\n  const options = this._options;\n  options.plane = Property.getValueOrDefault(plane.plane, time, options.plane);\n  options.dimensions = Property.getValueOrUndefined(\n    plane.dimensions,\n    time,\n    options.dimensions\n  );\n};\n\nconst scratchAxis = new Cartesian3();\nconst scratchUp = new Cartesian3();\nconst scratchTranslation = new Cartesian3();\nconst scratchScale = new Cartesian3();\nconst scratchRotation = new Matrix3();\nconst scratchRotationScale = new Matrix3();\nconst scratchLocalTransform = new Matrix4();\nfunction createPrimitiveMatrix(plane, dimensions, transform, result) {\n  const normal = plane.normal;\n  const distance = plane.distance;\n\n  const translation = Cartesian3.multiplyByScalar(\n    normal,\n    -distance,\n    scratchTranslation\n  );\n\n  let up = Cartesian3.clone(Cartesian3.UNIT_Z, scratchUp);\n  if (\n    CesiumMath.equalsEpsilon(\n      Math.abs(Cartesian3.dot(up, normal)),\n      1.0,\n      CesiumMath.EPSILON8\n    )\n  ) {\n    up = Cartesian3.clone(Cartesian3.UNIT_Y, up);\n  }\n\n  const left = Cartesian3.cross(up, normal, scratchAxis);\n  up = Cartesian3.cross(normal, left, up);\n  Cartesian3.normalize(left, left);\n  Cartesian3.normalize(up, up);\n\n  const rotationMatrix = scratchRotation;\n  Matrix3.setColumn(rotationMatrix, 0, left, rotationMatrix);\n  Matrix3.setColumn(rotationMatrix, 1, up, rotationMatrix);\n  Matrix3.setColumn(rotationMatrix, 2, normal, rotationMatrix);\n\n  const scale = Cartesian3.fromElements(\n    dimensions.x,\n    dimensions.y,\n    1.0,\n    scratchScale\n  );\n  const rotationScaleMatrix = Matrix3.multiplyByScale(\n    rotationMatrix,\n    scale,\n    scratchRotationScale\n  );\n\n  const localTransform = Matrix4.fromRotationTranslation(\n    rotationScaleMatrix,\n    translation,\n    scratchLocalTransform\n  );\n  return Matrix4.multiplyTransformation(transform, localTransform, result);\n}\n\n/**\n * @private\n */\nPlaneGeometryUpdater.createPrimitiveMatrix = createPrimitiveMatrix;\nexport default PlaneGeometryUpdater;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {Object} PlaneGraphics.ConstructorOptions\n *\n * Initialization options for the PlaneGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the plane.\n * @property {Property | Plane} [plane] A {@link Plane} Property specifying the normal and distance for the plane.\n * @property {Property | Cartesian2} [dimensions] A {@link Cartesian2} Property specifying the width and height of the plane.\n * @property {Property | boolean} [fill=true] A boolean Property specifying whether the plane is filled with the provided material.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to fill the plane.\n * @property {Property | boolean} [outline=false] A boolean Property specifying whether the plane is outlined.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the plane casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this plane will be displayed.\n */\n\n/**\n * Describes a plane. The center position and orientation are determined by the containing {@link Entity}.\n *\n * @alias PlaneGraphics\n * @constructor\n *\n * @param {PlaneGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Plane.html|Cesium Sandcastle Plane Demo}\n */\nfunction PlaneGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._plane = undefined;\n  this._planeSubscription = undefined;\n  this._dimensions = undefined;\n  this._dimensionsSubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PlaneGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PlaneGraphics.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the plane.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the {@link Plane} Property specifying the normal and distance of the plane.\n   *\n   * @memberof PlaneGraphics.prototype\n   * @type {Property|undefined}\n   */\n  plane: createPropertyDescriptor(\"plane\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the width and height of the plane.\n   *\n   * @memberof PlaneGraphics.prototype\n   * @type {Property|undefined}\n   */\n  dimensions: createPropertyDescriptor(\"dimensions\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the plane is filled with the provided material.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the material used to fill the plane.\n   * @memberof PlaneGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the plane is outlined.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * <p>\n   * Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}.\n   * </p>\n   * @memberof PlaneGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the plane\n   * casts or receives shadows from light sources.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this plane will be displayed.\n   * @memberof PlaneGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {PlaneGraphics} [result] The object onto which to store the result.\n * @returns {PlaneGraphics} The modified result parameter or a new instance if one was not provided.\n */\nPlaneGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PlaneGraphics(this);\n  }\n  result.show = this.show;\n  result.plane = this.plane;\n  result.dimensions = this.dimensions;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PlaneGraphics} source The object to be merged into this object.\n */\nPlaneGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.plane = defaultValue(this.plane, source.plane);\n  this.dimensions = defaultValue(this.dimensions, source.dimensions);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n};\nexport default PlaneGraphics;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {Object} PointGraphics.ConstructorOptions\n *\n * Initialization options for the PointGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the point.\n * @property {Property | number} [pixelSize=1] A numeric Property specifying the size in pixels.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @property {Property | Color} [color=Color.WHITE] A Property specifying the {@link Color} of the point.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=0] A numeric Property specifying the the outline width in pixels.\n * @property {Property | NearFarScalar} [scaleByDistance] A {@link NearFarScalar} Property used to scale the point based on distance.\n * @property {Property | NearFarScalar} [translucencyByDistance] A {@link NearFarScalar} Property used to set translucency based on distance from the camera.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this point will be displayed.\n * @property {Property | number} [disableDepthTestDistance] A Property specifying the distance from the camera at which to disable the depth test to.\n */\n\n/**\n * Describes a graphical point located at the position of the containing {@link Entity}.\n *\n * @alias PointGraphics\n * @constructor\n *\n * @param {PointGraphics.ConstructorOptions} [options] Object describing initialization options\n */\nfunction PointGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._pixelSize = undefined;\n  this._pixelSizeSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._scaleByDistance = undefined;\n  this._scaleByDistanceSubscription = undefined;\n  this._translucencyByDistance = undefined;\n  this._translucencyByDistanceSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._disableDepthTestDistance = undefined;\n  this._disableDepthTestDistanceSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PointGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PointGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the point.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the size in pixels.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1\n   */\n  pixelSize: createPropertyDescriptor(\"pixelSize\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the point.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the the outline width in pixels.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets the {@link NearFarScalar} Property used to scale the point based on distance.\n   * If undefined, a constant size is used.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   */\n  scaleByDistance: createPropertyDescriptor(\"scaleByDistance\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the translucency of the point based on the distance from the camera.\n   * A point's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the points's translucency remains clamped to the nearest bound.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   */\n  translucencyByDistance: createPropertyDescriptor(\"translucencyByDistance\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this point will be displayed.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof PointGraphics.prototype\n   * @type {Property|undefined}\n   */\n  disableDepthTestDistance: createPropertyDescriptor(\n    \"disableDepthTestDistance\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {PointGraphics} [result] The object onto which to store the result.\n * @returns {PointGraphics} The modified result parameter or a new instance if one was not provided.\n */\nPointGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PointGraphics(this);\n  }\n  result.show = this.show;\n  result.pixelSize = this.pixelSize;\n  result.heightReference = this.heightReference;\n  result.color = this.color;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.scaleByDistance = this.scaleByDistance;\n  result.translucencyByDistance = this._translucencyByDistance;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.disableDepthTestDistance = this.disableDepthTestDistance;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PointGraphics} source The object to be merged into this object.\n */\nPointGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.pixelSize = defaultValue(this.pixelSize, source.pixelSize);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference\n  );\n  this.color = defaultValue(this.color, source.color);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.scaleByDistance = defaultValue(\n    this.scaleByDistance,\n    source.scaleByDistance\n  );\n  this.translucencyByDistance = defaultValue(\n    this._translucencyByDistance,\n    source.translucencyByDistance\n  );\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n  this.disableDepthTestDistance = defaultValue(\n    this.disableDepthTestDistance,\n    source.disableDepthTestDistance\n  );\n};\nexport default PointGraphics;\n","import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport createBillboardPointCallback from \"../Scene/createBillboardPointCallback.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\n\nconst defaultColor = Color.WHITE;\nconst defaultOutlineColor = Color.BLACK;\nconst defaultOutlineWidth = 0.0;\nconst defaultPixelSize = 1.0;\nconst defaultDisableDepthTestDistance = 0.0;\n\nconst colorScratch = new Color();\nconst positionScratch = new Cartesian3();\nconst outlineColorScratch = new Color();\nconst scaleByDistanceScratch = new NearFarScalar();\nconst translucencyByDistanceScratch = new NearFarScalar();\nconst distanceDisplayConditionScratch = new DistanceDisplayCondition();\n\nfunction EntityData(entity) {\n  this.entity = entity;\n  this.pointPrimitive = undefined;\n  this.billboard = undefined;\n  this.color = undefined;\n  this.outlineColor = undefined;\n  this.pixelSize = undefined;\n  this.outlineWidth = undefined;\n}\n\n/**\n * A {@link Visualizer} which maps {@link Entity#point} to a {@link PointPrimitive}.\n * @alias PointVisualizer\n * @constructor\n *\n * @param {EntityCluster} entityCluster The entity cluster to manage the collection of billboards and optionally cluster with other entities.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\nfunction PointVisualizer(entityCluster, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entityCluster)) {\n    throw new DeveloperError(\"entityCluster is required.\");\n  }\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  }\n  //>>includeEnd('debug');\n\n  entityCollection.collectionChanged.addEventListener(\n    PointVisualizer.prototype._onCollectionChanged,\n    this\n  );\n\n  this._cluster = entityCluster;\n  this._entityCollection = entityCollection;\n  this._items = new AssociativeArray();\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n\n/**\n * Updates the primitives created by this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} This function always returns true.\n */\nPointVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const items = this._items.values;\n  const cluster = this._cluster;\n  for (let i = 0, len = items.length; i < len; i++) {\n    const item = items[i];\n    const entity = item.entity;\n    const pointGraphics = entity._point;\n    let pointPrimitive = item.pointPrimitive;\n    let billboard = item.billboard;\n    const heightReference = Property.getValueOrDefault(\n      pointGraphics._heightReference,\n      time,\n      HeightReference.NONE\n    );\n    let show =\n      entity.isShowing &&\n      entity.isAvailable(time) &&\n      Property.getValueOrDefault(pointGraphics._show, time, true);\n    let position;\n    if (show) {\n      position = Property.getValueOrUndefined(\n        entity._position,\n        time,\n        positionScratch\n      );\n      show = defined(position);\n    }\n    if (!show) {\n      returnPrimitive(item, entity, cluster);\n      continue;\n    }\n\n    if (!Property.isConstant(entity._position)) {\n      cluster._clusterDirty = true;\n    }\n\n    let needsRedraw = false;\n    let updateClamping = false;\n    if (heightReference !== HeightReference.NONE && !defined(billboard)) {\n      if (defined(pointPrimitive)) {\n        returnPrimitive(item, entity, cluster);\n        pointPrimitive = undefined;\n      }\n\n      billboard = cluster.getBillboard(entity);\n      billboard.id = entity;\n      billboard.image = undefined;\n      item.billboard = billboard;\n      needsRedraw = true;\n\n      // If this new billboard happens to have a position and height reference that match our new values,\n      // billboard._updateClamping will not be called automatically. That's a problem because the clamped\n      // height may be based on different terrain than is now loaded. So we'll manually call\n      // _updateClamping below.\n      updateClamping =\n        Cartesian3.equals(billboard.position, position) &&\n        billboard.heightReference === heightReference;\n    } else if (\n      heightReference === HeightReference.NONE &&\n      !defined(pointPrimitive)\n    ) {\n      if (defined(billboard)) {\n        returnPrimitive(item, entity, cluster);\n        billboard = undefined;\n      }\n\n      pointPrimitive = cluster.getPoint(entity);\n      pointPrimitive.id = entity;\n      item.pointPrimitive = pointPrimitive;\n    }\n\n    if (defined(pointPrimitive)) {\n      pointPrimitive.show = true;\n      pointPrimitive.position = position;\n      pointPrimitive.scaleByDistance = Property.getValueOrUndefined(\n        pointGraphics._scaleByDistance,\n        time,\n        scaleByDistanceScratch\n      );\n      pointPrimitive.translucencyByDistance = Property.getValueOrUndefined(\n        pointGraphics._translucencyByDistance,\n        time,\n        translucencyByDistanceScratch\n      );\n      pointPrimitive.color = Property.getValueOrDefault(\n        pointGraphics._color,\n        time,\n        defaultColor,\n        colorScratch\n      );\n      pointPrimitive.outlineColor = Property.getValueOrDefault(\n        pointGraphics._outlineColor,\n        time,\n        defaultOutlineColor,\n        outlineColorScratch\n      );\n      pointPrimitive.outlineWidth = Property.getValueOrDefault(\n        pointGraphics._outlineWidth,\n        time,\n        defaultOutlineWidth\n      );\n      pointPrimitive.pixelSize = Property.getValueOrDefault(\n        pointGraphics._pixelSize,\n        time,\n        defaultPixelSize\n      );\n      pointPrimitive.distanceDisplayCondition = Property.getValueOrUndefined(\n        pointGraphics._distanceDisplayCondition,\n        time,\n        distanceDisplayConditionScratch\n      );\n      pointPrimitive.disableDepthTestDistance = Property.getValueOrDefault(\n        pointGraphics._disableDepthTestDistance,\n        time,\n        defaultDisableDepthTestDistance\n      );\n    } else if (defined(billboard)) {\n      billboard.show = true;\n      billboard.position = position;\n      billboard.scaleByDistance = Property.getValueOrUndefined(\n        pointGraphics._scaleByDistance,\n        time,\n        scaleByDistanceScratch\n      );\n      billboard.translucencyByDistance = Property.getValueOrUndefined(\n        pointGraphics._translucencyByDistance,\n        time,\n        translucencyByDistanceScratch\n      );\n      billboard.distanceDisplayCondition = Property.getValueOrUndefined(\n        pointGraphics._distanceDisplayCondition,\n        time,\n        distanceDisplayConditionScratch\n      );\n      billboard.disableDepthTestDistance = Property.getValueOrDefault(\n        pointGraphics._disableDepthTestDistance,\n        time,\n        defaultDisableDepthTestDistance\n      );\n      billboard.heightReference = heightReference;\n\n      const newColor = Property.getValueOrDefault(\n        pointGraphics._color,\n        time,\n        defaultColor,\n        colorScratch\n      );\n      const newOutlineColor = Property.getValueOrDefault(\n        pointGraphics._outlineColor,\n        time,\n        defaultOutlineColor,\n        outlineColorScratch\n      );\n      const newOutlineWidth = Math.round(\n        Property.getValueOrDefault(\n          pointGraphics._outlineWidth,\n          time,\n          defaultOutlineWidth\n        )\n      );\n      let newPixelSize = Math.max(\n        1,\n        Math.round(\n          Property.getValueOrDefault(\n            pointGraphics._pixelSize,\n            time,\n            defaultPixelSize\n          )\n        )\n      );\n\n      if (newOutlineWidth > 0) {\n        billboard.scale = 1.0;\n        needsRedraw =\n          needsRedraw || //\n          newOutlineWidth !== item.outlineWidth || //\n          newPixelSize !== item.pixelSize || //\n          !Color.equals(newColor, item.color) || //\n          !Color.equals(newOutlineColor, item.outlineColor);\n      } else {\n        billboard.scale = newPixelSize / 50.0;\n        newPixelSize = 50.0;\n        needsRedraw =\n          needsRedraw || //\n          newOutlineWidth !== item.outlineWidth || //\n          !Color.equals(newColor, item.color) || //\n          !Color.equals(newOutlineColor, item.outlineColor);\n      }\n\n      if (needsRedraw) {\n        item.color = Color.clone(newColor, item.color);\n        item.outlineColor = Color.clone(newOutlineColor, item.outlineColor);\n        item.pixelSize = newPixelSize;\n        item.outlineWidth = newOutlineWidth;\n\n        const centerAlpha = newColor.alpha;\n        const cssColor = newColor.toCssColorString();\n        const cssOutlineColor = newOutlineColor.toCssColorString();\n        const textureId = JSON.stringify([\n          cssColor,\n          newPixelSize,\n          cssOutlineColor,\n          newOutlineWidth,\n        ]);\n\n        billboard.setImage(\n          textureId,\n          createBillboardPointCallback(\n            centerAlpha,\n            cssColor,\n            cssOutlineColor,\n            newOutlineWidth,\n            newPixelSize\n          )\n        );\n      }\n\n      if (updateClamping) {\n        billboard._updateClamping();\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nPointVisualizer.prototype.getBoundingSphere = function (entity, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const item = this._items.get(entity.id);\n  if (\n    !defined(item) ||\n    !(defined(item.pointPrimitive) || defined(item.billboard))\n  ) {\n    return BoundingSphereState.FAILED;\n  }\n\n  if (defined(item.pointPrimitive)) {\n    result.center = Cartesian3.clone(\n      item.pointPrimitive.position,\n      result.center\n    );\n  } else {\n    const billboard = item.billboard;\n    if (!defined(billboard._clampedPosition)) {\n      return BoundingSphereState.PENDING;\n    }\n    result.center = Cartesian3.clone(billboard._clampedPosition, result.center);\n  }\n\n  result.radius = 0;\n  return BoundingSphereState.DONE;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nPointVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nPointVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(\n    PointVisualizer.prototype._onCollectionChanged,\n    this\n  );\n  const entities = this._entityCollection.values;\n  for (let i = 0; i < entities.length; i++) {\n    this._cluster.removePoint(entities[i]);\n  }\n  return destroyObject(this);\n};\n\nPointVisualizer.prototype._onCollectionChanged = function (\n  entityCollection,\n  added,\n  removed,\n  changed\n) {\n  let i;\n  let entity;\n  const items = this._items;\n  const cluster = this._cluster;\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    if (defined(entity._point) && defined(entity._position)) {\n      items.set(entity.id, new EntityData(entity));\n    }\n  }\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n    if (defined(entity._point) && defined(entity._position)) {\n      if (!items.contains(entity.id)) {\n        items.set(entity.id, new EntityData(entity));\n      }\n    } else {\n      returnPrimitive(items.get(entity.id), entity, cluster);\n      items.remove(entity.id);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    returnPrimitive(items.get(entity.id), entity, cluster);\n    items.remove(entity.id);\n  }\n};\n\nfunction returnPrimitive(item, entity, cluster) {\n  if (defined(item)) {\n    const pointPrimitive = item.pointPrimitive;\n    if (defined(pointPrimitive)) {\n      item.pointPrimitive = undefined;\n      cluster.removePoint(entity);\n      return;\n    }\n    const billboard = item.billboard;\n    if (defined(billboard)) {\n      item.billboard = undefined;\n      cluster.removeBillboard(entity);\n    }\n  }\n}\nexport default PointVisualizer;\n","import ApproximateTerrainHeights from \"../Core/ApproximateTerrainHeights.js\";\nimport ArcType from \"../Core/ArcType.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport CoplanarPolygonGeometry from \"../Core/CoplanarPolygonGeometry.js\";\nimport CoplanarPolygonOutlineGeometry from \"../Core/CoplanarPolygonOutlineGeometry.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport EllipsoidTangentPlane from \"../Core/EllipsoidTangentPlane.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\nimport PolygonGeometry from \"../Core/PolygonGeometry.js\";\nimport PolygonOutlineGeometry from \"../Core/PolygonOutlineGeometry.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport GroundGeometryUpdater from \"./GroundGeometryUpdater.js\";\nimport Property from \"./Property.js\";\n\nconst heightAndPerPositionHeightWarning =\n  \"Entity polygons cannot have both height and perPositionHeight.  height will be ignored\";\nconst heightReferenceAndPerPositionHeightWarning =\n  \"heightReference is not supported for entity polygons with perPositionHeight. heightReference will be ignored\";\n\nconst scratchColor = new Color();\nconst defaultOffset = Cartesian3.ZERO;\nconst offsetScratch = new Cartesian3();\nconst scratchRectangle = new Rectangle();\nconst scratch2DPositions = [];\nconst cart2Scratch = new Cartesian2();\n\nfunction PolygonGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.polygonHierarchy = undefined;\n  this.perPositionHeight = undefined;\n  this.closeTop = undefined;\n  this.closeBottom = undefined;\n  this.height = undefined;\n  this.extrudedHeight = undefined;\n  this.granularity = undefined;\n  this.stRotation = undefined;\n  this.offsetAttribute = undefined;\n  this.arcType = undefined;\n  this.textureCoordinates = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for polygons.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias PolygonGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction PolygonGeometryUpdater(entity, scene) {\n  GroundGeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new PolygonGeometryOptions(entity),\n    geometryPropertyName: \"polygon\",\n    observedPropertyNames: [\"availability\", \"polygon\"],\n  });\n\n  this._onEntityPropertyChanged(entity, \"polygon\", entity.polygon, undefined);\n}\n\nif (defined(Object.create)) {\n  PolygonGeometryUpdater.prototype = Object.create(\n    GroundGeometryUpdater.prototype\n  );\n  PolygonGeometryUpdater.prototype.constructor = PolygonGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nPolygonGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const options = this._options;\n\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._fillProperty.getValue(time)\n    ),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n      this._distanceDisplayConditionProperty.getValue(time)\n    ),\n    offset: undefined,\n    color: undefined,\n  };\n\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    let currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n  }\n  if (defined(options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  let geometry;\n  if (options.perPositionHeight && !defined(options.extrudedHeight)) {\n    geometry = new CoplanarPolygonGeometry(options);\n  } else {\n    geometry = new PolygonGeometry(options);\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: geometry,\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nPolygonGeometryUpdater.prototype.createOutlineGeometryInstance = function (\n  time\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent an outlined geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const options = this._options;\n  const outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor\n  );\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._showOutlineProperty.getValue(time)\n    ),\n    color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n      distanceDisplayCondition\n    ),\n    offset: undefined,\n  };\n\n  if (defined(options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  let geometry;\n  if (options.perPositionHeight && !defined(options.extrudedHeight)) {\n    geometry = new CoplanarPolygonOutlineGeometry(options);\n  } else {\n    geometry = new PolygonOutlineGeometry(options);\n  }\n  return new GeometryInstance({\n    id: entity,\n    geometry: geometry,\n    attributes: attributes,\n  });\n};\n\nPolygonGeometryUpdater.prototype._computeCenter = function (time, result) {\n  const hierarchy = Property.getValueOrUndefined(\n    this._entity.polygon.hierarchy,\n    time\n  );\n  if (!defined(hierarchy)) {\n    return;\n  }\n  const positions = hierarchy.positions;\n  if (positions.length === 0) {\n    return;\n  }\n  const ellipsoid = this._scene.mapProjection.ellipsoid;\n\n  const tangentPlane = EllipsoidTangentPlane.fromPoints(positions, ellipsoid);\n  const positions2D = tangentPlane.projectPointsOntoPlane(\n    positions,\n    scratch2DPositions\n  );\n\n  const length = positions2D.length;\n  let area = 0;\n  let j = length - 1;\n  let centroid2D = new Cartesian2();\n  for (let i = 0; i < length; j = i++) {\n    const p1 = positions2D[i];\n    const p2 = positions2D[j];\n    const f = p1.x * p2.y - p2.x * p1.y;\n\n    let sum = Cartesian2.add(p1, p2, cart2Scratch);\n    sum = Cartesian2.multiplyByScalar(sum, f, sum);\n    centroid2D = Cartesian2.add(centroid2D, sum, centroid2D);\n\n    area += f;\n  }\n\n  const a = 1.0 / (area * 3.0);\n  centroid2D = Cartesian2.multiplyByScalar(centroid2D, a, centroid2D);\n  return tangentPlane.projectPointOntoEllipsoid(centroid2D, result);\n};\n\nPolygonGeometryUpdater.prototype._isHidden = function (entity, polygon) {\n  return (\n    !defined(polygon.hierarchy) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, polygon)\n  );\n};\n\nPolygonGeometryUpdater.prototype._isOnTerrain = function (entity, polygon) {\n  const onTerrain = GroundGeometryUpdater.prototype._isOnTerrain.call(\n    this,\n    entity,\n    polygon\n  );\n  const perPositionHeightProperty = polygon.perPositionHeight;\n  const perPositionHeightEnabled =\n    defined(perPositionHeightProperty) &&\n    (perPositionHeightProperty.isConstant\n      ? perPositionHeightProperty.getValue(Iso8601.MINIMUM_VALUE)\n      : true);\n  return onTerrain && !perPositionHeightEnabled;\n};\n\nPolygonGeometryUpdater.prototype._isDynamic = function (entity, polygon) {\n  return (\n    !polygon.hierarchy.isConstant || //\n    !Property.isConstant(polygon.height) || //\n    !Property.isConstant(polygon.extrudedHeight) || //\n    !Property.isConstant(polygon.granularity) || //\n    !Property.isConstant(polygon.stRotation) || //\n    !Property.isConstant(polygon.textureCoordinates) || //\n    !Property.isConstant(polygon.outlineWidth) || //\n    !Property.isConstant(polygon.perPositionHeight) || //\n    !Property.isConstant(polygon.closeTop) || //\n    !Property.isConstant(polygon.closeBottom) || //\n    !Property.isConstant(polygon.zIndex) || //\n    !Property.isConstant(polygon.arcType) || //\n    (this._onTerrain &&\n      !Property.isConstant(this._materialProperty) &&\n      !(this._materialProperty instanceof ColorMaterialProperty))\n  );\n};\n\nPolygonGeometryUpdater.prototype._setStaticOptions = function (\n  entity,\n  polygon\n) {\n  const isColorMaterial =\n    this._materialProperty instanceof ColorMaterialProperty;\n\n  const options = this._options;\n  options.vertexFormat = isColorMaterial\n    ? PerInstanceColorAppearance.VERTEX_FORMAT\n    : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n\n  const hierarchyValue = polygon.hierarchy.getValue(Iso8601.MINIMUM_VALUE);\n  let heightValue = Property.getValueOrUndefined(\n    polygon.height,\n    Iso8601.MINIMUM_VALUE\n  );\n  const heightReferenceValue = Property.getValueOrDefault(\n    polygon.heightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE\n  );\n  let extrudedHeightValue = Property.getValueOrUndefined(\n    polygon.extrudedHeight,\n    Iso8601.MINIMUM_VALUE\n  );\n  const extrudedHeightReferenceValue = Property.getValueOrDefault(\n    polygon.extrudedHeightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE\n  );\n  const perPositionHeightValue = Property.getValueOrDefault(\n    polygon.perPositionHeight,\n    Iso8601.MINIMUM_VALUE,\n    false\n  );\n\n  heightValue = GroundGeometryUpdater.getGeometryHeight(\n    heightValue,\n    heightReferenceValue\n  );\n\n  let offsetAttribute;\n  if (perPositionHeightValue) {\n    if (defined(heightValue)) {\n      heightValue = undefined;\n      oneTimeWarning(heightAndPerPositionHeightWarning);\n    }\n    if (\n      heightReferenceValue !== HeightReference.NONE &&\n      perPositionHeightValue\n    ) {\n      heightValue = undefined;\n      oneTimeWarning(heightReferenceAndPerPositionHeightWarning);\n    }\n  } else {\n    if (defined(extrudedHeightValue) && !defined(heightValue)) {\n      heightValue = 0;\n    }\n    offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(\n      heightValue,\n      heightReferenceValue,\n      extrudedHeightValue,\n      extrudedHeightReferenceValue\n    );\n  }\n\n  options.polygonHierarchy = hierarchyValue;\n  options.granularity = Property.getValueOrUndefined(\n    polygon.granularity,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.stRotation = Property.getValueOrUndefined(\n    polygon.stRotation,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.perPositionHeight = perPositionHeightValue;\n  options.closeTop = Property.getValueOrDefault(\n    polygon.closeTop,\n    Iso8601.MINIMUM_VALUE,\n    true\n  );\n  options.closeBottom = Property.getValueOrDefault(\n    polygon.closeBottom,\n    Iso8601.MINIMUM_VALUE,\n    true\n  );\n  options.offsetAttribute = offsetAttribute;\n  options.height = heightValue;\n  options.arcType = Property.getValueOrDefault(\n    polygon.arcType,\n    Iso8601.MINIMUM_VALUE,\n    ArcType.GEODESIC\n  );\n  options.textureCoordinates = Property.getValueOrUndefined(\n    polygon.textureCoordinates,\n    Iso8601.MINIMUM_VALUE\n  );\n\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(\n    extrudedHeightValue,\n    extrudedHeightReferenceValue\n  );\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(\n      PolygonGeometry.computeRectangle(options, scratchRectangle)\n    ).minimumTerrainHeight;\n  }\n\n  options.extrudedHeight = extrudedHeightValue;\n};\n\nPolygonGeometryUpdater.prototype._getIsClosed = function (options) {\n  const height = options.height;\n  const extrudedHeight = options.extrudedHeight;\n  const isExtruded = defined(extrudedHeight) && extrudedHeight !== height;\n  return (\n    !options.perPositionHeight &&\n    ((!isExtruded && height === 0) ||\n      (isExtruded && options.closeTop && options.closeBottom))\n  );\n};\n\nPolygonGeometryUpdater.DynamicGeometryUpdater = DyanmicPolygonGeometryUpdater;\n\n/**\n * @private\n */\nfunction DyanmicPolygonGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives\n  );\n}\n\nif (defined(Object.create)) {\n  DyanmicPolygonGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype\n  );\n  DyanmicPolygonGeometryUpdater.prototype.constructor = DyanmicPolygonGeometryUpdater;\n}\n\nDyanmicPolygonGeometryUpdater.prototype._isHidden = function (\n  entity,\n  polygon,\n  time\n) {\n  return (\n    !defined(this._options.polygonHierarchy) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(this, entity, polygon, time)\n  );\n};\n\nDyanmicPolygonGeometryUpdater.prototype._setOptions = function (\n  entity,\n  polygon,\n  time\n) {\n  const options = this._options;\n\n  options.polygonHierarchy = Property.getValueOrUndefined(\n    polygon.hierarchy,\n    time\n  );\n\n  let heightValue = Property.getValueOrUndefined(polygon.height, time);\n  const heightReferenceValue = Property.getValueOrDefault(\n    polygon.heightReference,\n    time,\n    HeightReference.NONE\n  );\n  const extrudedHeightReferenceValue = Property.getValueOrDefault(\n    polygon.extrudedHeightReference,\n    time,\n    HeightReference.NONE\n  );\n  let extrudedHeightValue = Property.getValueOrUndefined(\n    polygon.extrudedHeight,\n    time\n  );\n  const perPositionHeightValue = Property.getValueOrUndefined(\n    polygon.perPositionHeight,\n    time\n  );\n\n  heightValue = GroundGeometryUpdater.getGeometryHeight(\n    heightValue,\n    extrudedHeightReferenceValue\n  );\n\n  let offsetAttribute;\n  if (perPositionHeightValue) {\n    if (defined(heightValue)) {\n      heightValue = undefined;\n      oneTimeWarning(heightAndPerPositionHeightWarning);\n    }\n    if (\n      heightReferenceValue !== HeightReference.NONE &&\n      perPositionHeightValue\n    ) {\n      heightValue = undefined;\n      oneTimeWarning(heightReferenceAndPerPositionHeightWarning);\n    }\n  } else {\n    if (defined(extrudedHeightValue) && !defined(heightValue)) {\n      heightValue = 0;\n    }\n\n    offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(\n      heightValue,\n      heightReferenceValue,\n      extrudedHeightValue,\n      extrudedHeightReferenceValue\n    );\n  }\n\n  options.granularity = Property.getValueOrUndefined(polygon.granularity, time);\n  options.stRotation = Property.getValueOrUndefined(polygon.stRotation, time);\n  options.textureCoordinates = Property.getValueOrUndefined(\n    polygon.textureCoordinates,\n    time\n  );\n  options.perPositionHeight = Property.getValueOrUndefined(\n    polygon.perPositionHeight,\n    time\n  );\n  options.closeTop = Property.getValueOrDefault(polygon.closeTop, time, true);\n  options.closeBottom = Property.getValueOrDefault(\n    polygon.closeBottom,\n    time,\n    true\n  );\n  options.offsetAttribute = offsetAttribute;\n  options.height = heightValue;\n  options.arcType = Property.getValueOrDefault(\n    polygon.arcType,\n    time,\n    ArcType.GEODESIC\n  );\n\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(\n    extrudedHeightValue,\n    extrudedHeightReferenceValue\n  );\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(\n      PolygonGeometry.computeRectangle(options, scratchRectangle)\n    ).minimumTerrainHeight;\n  }\n\n  options.extrudedHeight = extrudedHeightValue;\n};\nexport default PolygonGeometryUpdater;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport PolygonHierarchy from \"../Core/PolygonHierarchy.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\nfunction createPolygonHierarchyProperty(value) {\n  if (Array.isArray(value)) {\n    // convert array of positions to PolygonHierarchy object\n    value = new PolygonHierarchy(value);\n  }\n  return new ConstantProperty(value);\n}\n\n/**\n * @typedef {Object} PolygonGraphics.ConstructorOptions\n *\n * Initialization options for the PolygonGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the polygon.\n * @property {Property | PolygonHierarchy} [hierarchy] A Property specifying the {@link PolygonHierarchy}.\n * @property {Property | number} [height=0] A numeric Property specifying the altitude of the polygon relative to the ellipsoid surface.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @property {Property | number} [extrudedHeight] A numeric Property specifying the altitude of the polygon's extruded face relative to the ellipsoid surface.\n * @property {Property | HeightReference} [extrudedHeightReference=HeightReference.NONE] A Property specifying what the extrudedHeight is relative to.\n * @property {Property | number} [stRotation=0.0] A numeric property specifying the rotation of the polygon texture counter-clockwise from north. Only has an effect if textureCoordinates is not defined.\n * @property {Property | number} [granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between each latitude and longitude point.\n * @property {Property | boolean} [fill=true] A boolean Property specifying whether the polygon is filled with the provided material.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to fill the polygon.\n * @property {Property | boolean} [outline=false] A boolean Property specifying whether the polygon is outlined.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @property {Property | boolean} [perPositionHeight=false] A boolean specifying whether or not the height of each position is used.\n * @property {Boolean | boolean} [closeTop=true] When false, leaves off the top of an extruded polygon open.\n * @property {Boolean | boolean} [closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\n * @property {Property | ArcType} [arcType=ArcType.GEODESIC] The type of line the polygon edges must follow.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the polygon casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this polygon will be displayed.\n * @property {Property | ClassificationType} [classificationType=ClassificationType.BOTH] An enum Property specifying whether this polygon will classify terrain, 3D Tiles, or both when on the ground.\n * @property {ConstantProperty | number} [zIndex=0] A property specifying the zIndex used for ordering ground geometry.  Only has an effect if the polygon is constant and neither height or extrudedHeight are specified.\n * @property {Property | PolygonHierarchy} [textureCoordinates] A Property specifying texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points. Has no effect for ground primitives.\n */\n\n/**\n * Describes a polygon defined by an hierarchy of linear rings which make up the outer shape and any nested holes.\n * The polygon conforms to the curvature of the globe and can be placed on the surface or\n * at altitude and can optionally be extruded into a volume.\n *\n * @alias PolygonGraphics\n * @constructor\n *\n * @param {PolygonGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polygon.html|Cesium Sandcastle Polygon Demo}\n */\nfunction PolygonGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._hierarchy = undefined;\n  this._hierarchySubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._extrudedHeight = undefined;\n  this._extrudedHeightSubscription = undefined;\n  this._extrudedHeightReference = undefined;\n  this._extrudedHeightReferenceSubscription = undefined;\n  this._stRotation = undefined;\n  this._stRotationSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._perPositionHeight = undefined;\n  this._perPositionHeightSubscription = undefined;\n  this._closeTop = undefined;\n  this._closeTopSubscription = undefined;\n  this._closeBottom = undefined;\n  this._closeBottomSubscription = undefined;\n  this._arcType = undefined;\n  this._arcTypeSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._classificationType = undefined;\n  this._classificationTypeSubscription = undefined;\n  this._zIndex = undefined;\n  this._zIndexSubscription = undefined;\n  this._textureCoordinates = undefined;\n  this._textureCoordinatesSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PolygonGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PolygonGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link PolygonHierarchy}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  hierarchy: createPropertyDescriptor(\n    \"hierarchy\",\n    undefined,\n    createPolygonHierarchyProperty\n  ),\n\n  /**\n   * Gets or sets the numeric Property specifying the constant altitude of the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  height: createPropertyDescriptor(\"height\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the polygon extrusion.\n   * If {@link PolygonGraphics#perPositionHeight} is false, the volume starts at {@link PolygonGraphics#height} and ends at this altitude.\n   * If {@link PolygonGraphics#perPositionHeight} is true, the volume starts at the height of each {@link PolygonGraphics#hierarchy} position and ends at this altitude.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  extrudedHeight: createPropertyDescriptor(\"extrudedHeight\"),\n\n  /**\n   * Gets or sets the Property specifying the extruded {@link HeightReference}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  extrudedHeightReference: createPropertyDescriptor(\"extrudedHeightReference\"),\n\n  /**\n   * Gets or sets the numeric property specifying the rotation of the polygon texture counter-clockwise from north. Only has an effect if textureCoordinates is not defined.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0\n   */\n  stRotation: createPropertyDescriptor(\"stRotation\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between points on the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the polygon is filled with the provided material.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the polygon.\n   * @memberof PolygonGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the polygon is outlined.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * <p>\n   * Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}.\n   * </p>\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets the boolean specifying whether or not the the height of each position is used.\n   * If true, the shape will have non-uniform altitude defined by the height of each {@link PolygonGraphics#hierarchy} position.\n   * If false, the shape will have a constant altitude as specified by {@link PolygonGraphics#height}.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  perPositionHeight: createPropertyDescriptor(\"perPositionHeight\"),\n\n  /**\n   * Gets or sets a boolean specifying whether or not the top of an extruded polygon is included.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  closeTop: createPropertyDescriptor(\"closeTop\"),\n\n  /**\n   * Gets or sets a boolean specifying whether or not the bottom of an extruded polygon is included.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  closeBottom: createPropertyDescriptor(\"closeBottom\"),\n\n  /**\n   * Gets or sets the {@link ArcType} Property specifying the type of lines the polygon edges use.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default ArcType.GEODESIC\n   */\n  arcType: createPropertyDescriptor(\"arcType\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the polygon\n   * casts or receives shadows from light sources.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this polygon will be displayed.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying whether this polygon will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   * @default ClassificationType.BOTH\n   */\n  classificationType: createPropertyDescriptor(\"classificationType\"),\n\n  /**\n   * Gets or sets the zIndex Prperty specifying the ordering of ground geometry.  Only has an effect if the polygon is constant and neither height or extrudedHeight are specified.\n   * @memberof PolygonGraphics.prototype\n   * @type {ConstantProperty|undefined}\n   * @default 0\n   */\n  zIndex: createPropertyDescriptor(\"zIndex\"),\n\n  /**\n   *  A Property specifying texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points. Has no effect for ground primitives.\n   * @memberof PolygonGraphics.prototype\n   * @type {Property|undefined}\n   */\n  textureCoordinates: createPropertyDescriptor(\"textureCoordinates\"),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {PolygonGraphics} [result] The object onto which to store the result.\n * @returns {PolygonGraphics} The modified result parameter or a new instance if one was not provided.\n */\nPolygonGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PolygonGraphics(this);\n  }\n  result.show = this.show;\n  result.hierarchy = this.hierarchy;\n  result.height = this.height;\n  result.heightReference = this.heightReference;\n  result.extrudedHeight = this.extrudedHeight;\n  result.extrudedHeightReference = this.extrudedHeightReference;\n  result.stRotation = this.stRotation;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.perPositionHeight = this.perPositionHeight;\n  result.closeTop = this.closeTop;\n  result.closeBottom = this.closeBottom;\n  result.arcType = this.arcType;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.classificationType = this.classificationType;\n  result.zIndex = this.zIndex;\n  result.textureCoordinates = this.textureCoordinates;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PolygonGraphics} source The object to be merged into this object.\n */\nPolygonGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.hierarchy = defaultValue(this.hierarchy, source.hierarchy);\n  this.height = defaultValue(this.height, source.height);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference\n  );\n  this.extrudedHeight = defaultValue(\n    this.extrudedHeight,\n    source.extrudedHeight\n  );\n  this.extrudedHeightReference = defaultValue(\n    this.extrudedHeightReference,\n    source.extrudedHeightReference\n  );\n  this.stRotation = defaultValue(this.stRotation, source.stRotation);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.perPositionHeight = defaultValue(\n    this.perPositionHeight,\n    source.perPositionHeight\n  );\n  this.closeTop = defaultValue(this.closeTop, source.closeTop);\n  this.closeBottom = defaultValue(this.closeBottom, source.closeBottom);\n  this.arcType = defaultValue(this.arcType, source.arcType);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n  this.classificationType = defaultValue(\n    this.classificationType,\n    source.classificationType\n  );\n  this.zIndex = defaultValue(this.zIndex, source.zIndex);\n  this.textureCoordinates = defaultValue(\n    this.textureCoordinates,\n    source.textureCoordinates\n  );\n};\nexport default PolygonGraphics;\n","import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link MaterialProperty} that maps to PolylineArrow {@link Material} uniforms.\n *\n * @param {Property|Color} [color=Color.WHITE] The {@link Color} Property to be used.\n *\n * @alias PolylineArrowMaterialProperty\n * @constructor\n */\nfunction PolylineArrowMaterialProperty(color) {\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n\n  this.color = color;\n}\n\nObject.defineProperties(PolylineArrowMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PolylineArrowMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._color);\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PolylineArrowMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets or sets the {@link Color} {@link Property}.\n   * @memberof PolylineArrowMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nPolylineArrowMaterialProperty.prototype.getType = function (time) {\n  return \"PolylineArrow\";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPolylineArrowMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n  result.color = Property.getValueOrClonedDefault(\n    this._color,\n    time,\n    Color.WHITE,\n    result.color\n  );\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPolylineArrowMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof PolylineArrowMaterialProperty && //\n      Property.equals(this._color, other._color))\n  );\n};\nexport default PolylineArrowMaterialProperty;\n","import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nconst defaultColor = Color.WHITE;\nconst defaultGapColor = Color.TRANSPARENT;\nconst defaultDashLength = 16.0;\nconst defaultDashPattern = 255.0;\n\n/**\n * A {@link MaterialProperty} that maps to polyline dash {@link Material} uniforms.\n * @alias PolylineDashMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property|Color} [options.color=Color.WHITE] A Property specifying the {@link Color} of the line.\n * @param {Property|Color} [options.gapColor=Color.TRANSPARENT] A Property specifying the {@link Color} of the gaps in the line.\n * @param {Property|Number} [options.dashLength=16.0] A numeric Property specifying the length of the dash pattern in pixels.\n * @param {Property|Number} [options.dashPattern=255.0] A numeric Property specifying a 16 bit pattern for the dash\n */\nfunction PolylineDashMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._gapColor = undefined;\n  this._gapColorSubscription = undefined;\n  this._dashLength = undefined;\n  this._dashLengthSubscription = undefined;\n  this._dashPattern = undefined;\n  this._dashPatternSubscription = undefined;\n\n  this.color = options.color;\n  this.gapColor = options.gapColor;\n  this.dashLength = options.dashLength;\n  this.dashPattern = options.dashPattern;\n}\n\nObject.defineProperties(PolylineDashMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._color) &&\n        Property.isConstant(this._gapColor) &&\n        Property.isConstant(this._dashLength) &&\n        Property.isConstant(this._dashPattern)\n      );\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the line.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the gaps in the line.\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  gapColor: createPropertyDescriptor(\"gapColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the length of a dash cycle\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  dashLength: createPropertyDescriptor(\"dashLength\"),\n\n  /**\n   * Gets or sets the numeric Property specifying a dash pattern\n   * @memberof PolylineDashMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  dashPattern: createPropertyDescriptor(\"dashPattern\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nPolylineDashMaterialProperty.prototype.getType = function (time) {\n  return \"PolylineDash\";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPolylineDashMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n  result.color = Property.getValueOrClonedDefault(\n    this._color,\n    time,\n    defaultColor,\n    result.color\n  );\n  result.gapColor = Property.getValueOrClonedDefault(\n    this._gapColor,\n    time,\n    defaultGapColor,\n    result.gapColor\n  );\n  result.dashLength = Property.getValueOrDefault(\n    this._dashLength,\n    time,\n    defaultDashLength,\n    result.dashLength\n  );\n  result.dashPattern = Property.getValueOrDefault(\n    this._dashPattern,\n    time,\n    defaultDashPattern,\n    result.dashPattern\n  );\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPolylineDashMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof PolylineDashMaterialProperty &&\n      Property.equals(this._color, other._color) &&\n      Property.equals(this._gapColor, other._gapColor) &&\n      Property.equals(this._dashLength, other._dashLength) &&\n      Property.equals(this._dashPattern, other._dashPattern))\n  );\n};\nexport default PolylineDashMaterialProperty;\n","import ArcType from \"../Core/ArcType.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport Event from \"../Core/Event.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport GroundPolylineGeometry from \"../Core/GroundPolylineGeometry.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\nimport PolylineGeometry from \"../Core/PolylineGeometry.js\";\nimport PolylinePipeline from \"../Core/PolylinePipeline.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport Entity from \"../DataSources/Entity.js\";\nimport ClassificationType from \"../Scene/ClassificationType.js\";\nimport GroundPolylinePrimitive from \"../Scene/GroundPolylinePrimitive.js\";\nimport PolylineCollection from \"../Scene/PolylineCollection.js\";\nimport PolylineColorAppearance from \"../Scene/PolylineColorAppearance.js\";\nimport PolylineMaterialAppearance from \"../Scene/PolylineMaterialAppearance.js\";\nimport ShadowMode from \"../Scene/ShadowMode.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport MaterialProperty from \"./MaterialProperty.js\";\nimport Property from \"./Property.js\";\n\nconst defaultZIndex = new ConstantProperty(0);\n\n//We use this object to create one polyline collection per-scene.\nconst polylineCollections = {};\n\nconst scratchColor = new Color();\nconst defaultMaterial = new ColorMaterialProperty(Color.WHITE);\nconst defaultShow = new ConstantProperty(true);\nconst defaultShadows = new ConstantProperty(ShadowMode.DISABLED);\nconst defaultDistanceDisplayCondition = new ConstantProperty(\n  new DistanceDisplayCondition()\n);\nconst defaultClassificationType = new ConstantProperty(ClassificationType.BOTH);\n\nfunction GeometryOptions() {\n  this.vertexFormat = undefined;\n  this.positions = undefined;\n  this.width = undefined;\n  this.arcType = undefined;\n  this.granularity = undefined;\n}\n\nfunction GroundGeometryOptions() {\n  this.positions = undefined;\n  this.width = undefined;\n  this.arcType = undefined;\n  this.granularity = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for polylines.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias PolylineGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction PolylineGeometryUpdater(entity, scene) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required\");\n  }\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required\");\n  }\n  //>>includeEnd('debug');\n\n  this._entity = entity;\n  this._scene = scene;\n  this._entitySubscription = entity.definitionChanged.addEventListener(\n    PolylineGeometryUpdater.prototype._onEntityPropertyChanged,\n    this\n  );\n  this._fillEnabled = false;\n  this._dynamic = false;\n  this._geometryChanged = new Event();\n  this._showProperty = undefined;\n  this._materialProperty = undefined;\n  this._shadowsProperty = undefined;\n  this._distanceDisplayConditionProperty = undefined;\n  this._classificationTypeProperty = undefined;\n  this._depthFailMaterialProperty = undefined;\n  this._geometryOptions = new GeometryOptions();\n  this._groundGeometryOptions = new GroundGeometryOptions();\n  this._id = `polyline-${entity.id}`;\n  this._clampToGround = false;\n  this._supportsPolylinesOnTerrain = Entity.supportsPolylinesOnTerrain(scene);\n\n  this._zIndex = 0;\n\n  this._onEntityPropertyChanged(entity, \"polyline\", entity.polyline, undefined);\n}\n\nObject.defineProperties(PolylineGeometryUpdater.prototype, {\n  /**\n   * Gets the unique ID associated with this updater\n   * @memberof PolylineGeometryUpdater.prototype\n   * @type {String}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n  /**\n   * Gets the entity associated with this geometry.\n   * @memberof PolylineGeometryUpdater.prototype\n   *\n   * @type {Entity}\n   * @readonly\n   */\n  entity: {\n    get: function () {\n      return this._entity;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry has a fill component.\n   * @memberof PolylineGeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  fillEnabled: {\n    get: function () {\n      return this._fillEnabled;\n    },\n  },\n  /**\n   * Gets a value indicating if fill visibility varies with simulation time.\n   * @memberof PolylineGeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  hasConstantFill: {\n    get: function () {\n      return (\n        !this._fillEnabled ||\n        (!defined(this._entity.availability) &&\n          Property.isConstant(this._showProperty))\n      );\n    },\n  },\n  /**\n   * Gets the material property used to fill the geometry.\n   * @memberof PolylineGeometryUpdater.prototype\n   *\n   * @type {MaterialProperty}\n   * @readonly\n   */\n  fillMaterialProperty: {\n    get: function () {\n      return this._materialProperty;\n    },\n  },\n  /**\n   * Gets the material property used to fill the geometry when it fails the depth test.\n   * @memberof PolylineGeometryUpdater.prototype\n   *\n   * @type {MaterialProperty}\n   * @readonly\n   */\n  depthFailMaterialProperty: {\n    get: function () {\n      return this._depthFailMaterialProperty;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry has an outline component.\n   * @memberof PolylineGeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  outlineEnabled: {\n    value: false,\n  },\n  /**\n   * Gets a value indicating if outline visibility varies with simulation time.\n   * @memberof PolylineGeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  hasConstantOutline: {\n    value: true,\n  },\n  /**\n   * Gets the {@link Color} property for the geometry outline.\n   * @memberof PolylineGeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  outlineColorProperty: {\n    value: undefined,\n  },\n  /**\n   * Gets the property specifying whether the geometry\n   * casts or receives shadows from light sources.\n   * @memberof PolylineGeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  shadowsProperty: {\n    get: function () {\n      return this._shadowsProperty;\n    },\n  },\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this geometry will be displayed.\n   * @memberof PolylineGeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  distanceDisplayConditionProperty: {\n    get: function () {\n      return this._distanceDisplayConditionProperty;\n    },\n  },\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying if this geometry will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof PolylineGeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  classificationTypeProperty: {\n    get: function () {\n      return this._classificationTypeProperty;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry is time-varying.\n   * If true, all visualization is delegated to the {@link DynamicGeometryUpdater}\n   * returned by GeometryUpdater#createDynamicUpdater.\n   * @memberof PolylineGeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isDynamic: {\n    get: function () {\n      return this._dynamic;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry is closed.\n   * This property is only valid for static geometry.\n   * @memberof PolylineGeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isClosed: {\n    value: false,\n  },\n  /**\n   * Gets an event that is raised whenever the public properties\n   * of this updater change.\n   * @memberof PolylineGeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  geometryChanged: {\n    get: function () {\n      return this._geometryChanged;\n    },\n  },\n\n  /**\n   * Gets a value indicating if the path of the line.\n   * @memberof PolylineGeometryUpdater.prototype\n   *\n   * @type {ArcType}\n   * @readonly\n   */\n  arcType: {\n    get: function () {\n      return this._arcType;\n    },\n  },\n\n  /**\n   * Gets a value indicating if the geometry is clamped to the ground.\n   * Returns false if polylines on terrain is not supported.\n   * @memberof PolylineGeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  clampToGround: {\n    get: function () {\n      return this._clampToGround && this._supportsPolylinesOnTerrain;\n    },\n  },\n\n  /**\n   * Gets the zindex\n   * @type {Number}\n   * @memberof PolylineGeometryUpdater.prototype\n   * @readonly\n   */\n  zIndex: {\n    get: function () {\n      return this._zIndex;\n    },\n  },\n});\n\n/**\n * Checks if the geometry is outlined at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve visibility.\n * @returns {Boolean} true if geometry is outlined at the provided time, false otherwise.\n */\nPolylineGeometryUpdater.prototype.isOutlineVisible = function (time) {\n  return false;\n};\n\n/**\n * Checks if the geometry is filled at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve visibility.\n * @returns {Boolean} true if geometry is filled at the provided time, false otherwise.\n */\nPolylineGeometryUpdater.prototype.isFilled = function (time) {\n  const entity = this._entity;\n  const visible =\n    this._fillEnabled &&\n    entity.isAvailable(time) &&\n    this._showProperty.getValue(time);\n  return defaultValue(visible, false);\n};\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nPolylineGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const show = new ShowGeometryInstanceAttribute(\n    isAvailable && entity.isShowing && this._showProperty.getValue(time)\n  );\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n  const distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n    distanceDisplayCondition\n  );\n\n  const attributes = {\n    show: show,\n    distanceDisplayCondition: distanceDisplayConditionAttribute,\n  };\n\n  let currentColor;\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n  }\n\n  if (this.clampToGround) {\n    return new GeometryInstance({\n      id: entity,\n      geometry: new GroundPolylineGeometry(this._groundGeometryOptions),\n      attributes: attributes,\n    });\n  }\n\n  if (\n    defined(this._depthFailMaterialProperty) &&\n    this._depthFailMaterialProperty instanceof ColorMaterialProperty\n  ) {\n    if (\n      defined(this._depthFailMaterialProperty.color) &&\n      (this._depthFailMaterialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._depthFailMaterialProperty.color.getValue(\n        time,\n        scratchColor\n      );\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    attributes.depthFailColor = ColorGeometryInstanceAttribute.fromColor(\n      currentColor\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PolylineGeometry(this._geometryOptions),\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nPolylineGeometryUpdater.prototype.createOutlineGeometryInstance = function (\n  time\n) {\n  //>>includeStart('debug', pragmas.debug);\n  throw new DeveloperError(\n    \"This instance does not represent an outlined geometry.\"\n  );\n  //>>includeEnd('debug');\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nPolylineGeometryUpdater.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nPolylineGeometryUpdater.prototype.destroy = function () {\n  this._entitySubscription();\n  destroyObject(this);\n};\n\nPolylineGeometryUpdater.prototype._onEntityPropertyChanged = function (\n  entity,\n  propertyName,\n  newValue,\n  oldValue\n) {\n  if (!(propertyName === \"availability\" || propertyName === \"polyline\")) {\n    return;\n  }\n\n  const polyline = this._entity.polyline;\n\n  if (!defined(polyline)) {\n    if (this._fillEnabled) {\n      this._fillEnabled = false;\n      this._geometryChanged.raiseEvent(this);\n    }\n    return;\n  }\n\n  const positionsProperty = polyline.positions;\n\n  const show = polyline.show;\n  if (\n    (defined(show) &&\n      show.isConstant &&\n      !show.getValue(Iso8601.MINIMUM_VALUE)) || //\n    !defined(positionsProperty)\n  ) {\n    if (this._fillEnabled) {\n      this._fillEnabled = false;\n      this._geometryChanged.raiseEvent(this);\n    }\n    return;\n  }\n\n  const zIndex = polyline.zIndex;\n  const material = defaultValue(polyline.material, defaultMaterial);\n  const isColorMaterial = material instanceof ColorMaterialProperty;\n  this._materialProperty = material;\n  this._depthFailMaterialProperty = polyline.depthFailMaterial;\n  this._showProperty = defaultValue(show, defaultShow);\n  this._shadowsProperty = defaultValue(polyline.shadows, defaultShadows);\n  this._distanceDisplayConditionProperty = defaultValue(\n    polyline.distanceDisplayCondition,\n    defaultDistanceDisplayCondition\n  );\n  this._classificationTypeProperty = defaultValue(\n    polyline.classificationType,\n    defaultClassificationType\n  );\n  this._fillEnabled = true;\n  this._zIndex = defaultValue(zIndex, defaultZIndex);\n\n  const width = polyline.width;\n  const arcType = polyline.arcType;\n  const clampToGround = polyline.clampToGround;\n  const granularity = polyline.granularity;\n\n  if (\n    !positionsProperty.isConstant ||\n    !Property.isConstant(width) ||\n    !Property.isConstant(arcType) ||\n    !Property.isConstant(granularity) ||\n    !Property.isConstant(clampToGround) ||\n    !Property.isConstant(zIndex)\n  ) {\n    if (!this._dynamic) {\n      this._dynamic = true;\n      this._geometryChanged.raiseEvent(this);\n    }\n  } else {\n    const geometryOptions = this._geometryOptions;\n    const positions = positionsProperty.getValue(\n      Iso8601.MINIMUM_VALUE,\n      geometryOptions.positions\n    );\n\n    //Because of the way we currently handle reference properties,\n    //we can't automatically assume the positions are always valid.\n    if (!defined(positions) || positions.length < 2) {\n      if (this._fillEnabled) {\n        this._fillEnabled = false;\n        this._geometryChanged.raiseEvent(this);\n      }\n      return;\n    }\n\n    let vertexFormat;\n    if (\n      isColorMaterial &&\n      (!defined(this._depthFailMaterialProperty) ||\n        this._depthFailMaterialProperty instanceof ColorMaterialProperty)\n    ) {\n      vertexFormat = PolylineColorAppearance.VERTEX_FORMAT;\n    } else {\n      vertexFormat = PolylineMaterialAppearance.VERTEX_FORMAT;\n    }\n\n    geometryOptions.vertexFormat = vertexFormat;\n    geometryOptions.positions = positions;\n    geometryOptions.width = defined(width)\n      ? width.getValue(Iso8601.MINIMUM_VALUE)\n      : undefined;\n    geometryOptions.arcType = defined(arcType)\n      ? arcType.getValue(Iso8601.MINIMUM_VALUE)\n      : undefined;\n    geometryOptions.granularity = defined(granularity)\n      ? granularity.getValue(Iso8601.MINIMUM_VALUE)\n      : undefined;\n\n    const groundGeometryOptions = this._groundGeometryOptions;\n    groundGeometryOptions.positions = positions;\n    groundGeometryOptions.width = geometryOptions.width;\n    groundGeometryOptions.arcType = geometryOptions.arcType;\n    groundGeometryOptions.granularity = geometryOptions.granularity;\n\n    this._clampToGround = defined(clampToGround)\n      ? clampToGround.getValue(Iso8601.MINIMUM_VALUE)\n      : false;\n\n    if (!this._clampToGround && defined(zIndex)) {\n      oneTimeWarning(\n        \"Entity polylines must have clampToGround: true when using zIndex.  zIndex will be ignored.\"\n      );\n    }\n\n    this._dynamic = false;\n    this._geometryChanged.raiseEvent(this);\n  }\n};\n\n/**\n * Creates the dynamic updater to be used when GeometryUpdater#isDynamic is true.\n *\n * @param {PrimitiveCollection} primitives The primitive collection to use.\n * @param {PrimitiveCollection|OrderedGroundPrimitiveCollection} groundPrimitives The primitive collection to use for ordered ground primitives.\n * @returns {DynamicGeometryUpdater} The dynamic updater used to update the geometry each frame.\n *\n * @exception {DeveloperError} This instance does not represent dynamic geometry.\n * @private\n */\nPolylineGeometryUpdater.prototype.createDynamicUpdater = function (\n  primitives,\n  groundPrimitives\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"primitives\", primitives);\n  Check.defined(\"groundPrimitives\", groundPrimitives);\n\n  if (!this._dynamic) {\n    throw new DeveloperError(\n      \"This instance does not represent dynamic geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  return new DynamicGeometryUpdater(primitives, groundPrimitives, this);\n};\n\n/**\n * @private\n */\nconst generateCartesianArcOptions = {\n  positions: undefined,\n  granularity: undefined,\n  height: undefined,\n  ellipsoid: undefined,\n};\n\nfunction DynamicGeometryUpdater(primitives, groundPrimitives, geometryUpdater) {\n  this._line = undefined;\n  this._primitives = primitives;\n  this._groundPrimitives = groundPrimitives;\n  this._groundPolylinePrimitive = undefined;\n  this._material = undefined;\n  this._geometryUpdater = geometryUpdater;\n  this._positions = [];\n}\n\nfunction getLine(dynamicGeometryUpdater) {\n  if (defined(dynamicGeometryUpdater._line)) {\n    return dynamicGeometryUpdater._line;\n  }\n\n  const sceneId = dynamicGeometryUpdater._geometryUpdater._scene.id;\n  let polylineCollection = polylineCollections[sceneId];\n  const primitives = dynamicGeometryUpdater._primitives;\n  if (!defined(polylineCollection) || polylineCollection.isDestroyed()) {\n    polylineCollection = new PolylineCollection();\n    polylineCollections[sceneId] = polylineCollection;\n    primitives.add(polylineCollection);\n  } else if (!primitives.contains(polylineCollection)) {\n    primitives.add(polylineCollection);\n  }\n\n  const line = polylineCollection.add();\n  line.id = dynamicGeometryUpdater._geometryUpdater._entity;\n  dynamicGeometryUpdater._line = line;\n  return line;\n}\n\nDynamicGeometryUpdater.prototype.update = function (time) {\n  const geometryUpdater = this._geometryUpdater;\n  const entity = geometryUpdater._entity;\n  const polyline = entity.polyline;\n\n  const positionsProperty = polyline.positions;\n  let positions = Property.getValueOrUndefined(\n    positionsProperty,\n    time,\n    this._positions\n  );\n\n  // Synchronize with geometryUpdater for GroundPolylinePrimitive\n  geometryUpdater._clampToGround = Property.getValueOrDefault(\n    polyline._clampToGround,\n    time,\n    false\n  );\n  geometryUpdater._groundGeometryOptions.positions = positions;\n  geometryUpdater._groundGeometryOptions.width = Property.getValueOrDefault(\n    polyline._width,\n    time,\n    1\n  );\n  geometryUpdater._groundGeometryOptions.arcType = Property.getValueOrDefault(\n    polyline._arcType,\n    time,\n    ArcType.GEODESIC\n  );\n  geometryUpdater._groundGeometryOptions.granularity = Property.getValueOrDefault(\n    polyline._granularity,\n    time,\n    9999\n  );\n\n  const groundPrimitives = this._groundPrimitives;\n\n  if (defined(this._groundPolylinePrimitive)) {\n    groundPrimitives.remove(this._groundPolylinePrimitive); // destroys by default\n    this._groundPolylinePrimitive = undefined;\n  }\n\n  if (geometryUpdater.clampToGround) {\n    if (\n      !entity.isShowing ||\n      !entity.isAvailable(time) ||\n      !Property.getValueOrDefault(polyline._show, time, true)\n    ) {\n      return;\n    }\n\n    if (!defined(positions) || positions.length < 2) {\n      return;\n    }\n\n    const fillMaterialProperty = geometryUpdater.fillMaterialProperty;\n    let appearance;\n    if (fillMaterialProperty instanceof ColorMaterialProperty) {\n      appearance = new PolylineColorAppearance();\n    } else {\n      const material = MaterialProperty.getValue(\n        time,\n        fillMaterialProperty,\n        this._material\n      );\n      appearance = new PolylineMaterialAppearance({\n        material: material,\n        translucent: material.isTranslucent(),\n      });\n      this._material = material;\n    }\n\n    this._groundPolylinePrimitive = groundPrimitives.add(\n      new GroundPolylinePrimitive({\n        geometryInstances: geometryUpdater.createFillGeometryInstance(time),\n        appearance: appearance,\n        classificationType: geometryUpdater.classificationTypeProperty.getValue(\n          time\n        ),\n        asynchronous: false,\n      }),\n      Property.getValueOrUndefined(geometryUpdater.zIndex, time)\n    );\n\n    // Hide the polyline in the collection, if any\n    if (defined(this._line)) {\n      this._line.show = false;\n    }\n    return;\n  }\n\n  const line = getLine(this);\n\n  if (\n    !entity.isShowing ||\n    !entity.isAvailable(time) ||\n    !Property.getValueOrDefault(polyline._show, time, true)\n  ) {\n    line.show = false;\n    return;\n  }\n\n  if (!defined(positions) || positions.length < 2) {\n    line.show = false;\n    return;\n  }\n\n  let arcType = ArcType.GEODESIC;\n  arcType = Property.getValueOrDefault(polyline._arcType, time, arcType);\n\n  const globe = geometryUpdater._scene.globe;\n  if (arcType !== ArcType.NONE && defined(globe)) {\n    generateCartesianArcOptions.ellipsoid = globe.ellipsoid;\n    generateCartesianArcOptions.positions = positions;\n    generateCartesianArcOptions.granularity = Property.getValueOrUndefined(\n      polyline._granularity,\n      time\n    );\n    generateCartesianArcOptions.height = PolylinePipeline.extractHeights(\n      positions,\n      globe.ellipsoid\n    );\n    if (arcType === ArcType.GEODESIC) {\n      positions = PolylinePipeline.generateCartesianArc(\n        generateCartesianArcOptions\n      );\n    } else {\n      positions = PolylinePipeline.generateCartesianRhumbArc(\n        generateCartesianArcOptions\n      );\n    }\n  }\n\n  line.show = true;\n  line.positions = positions.slice();\n  line.material = MaterialProperty.getValue(\n    time,\n    geometryUpdater.fillMaterialProperty,\n    line.material\n  );\n  line.width = Property.getValueOrDefault(polyline._width, time, 1);\n  line.distanceDisplayCondition = Property.getValueOrUndefined(\n    polyline._distanceDisplayCondition,\n    time,\n    line.distanceDisplayCondition\n  );\n};\n\nDynamicGeometryUpdater.prototype.getBoundingSphere = function (result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"result\", result);\n  //>>includeEnd('debug');\n\n  if (!this._geometryUpdater.clampToGround) {\n    const line = getLine(this);\n    if (line.show && line.positions.length > 0) {\n      BoundingSphere.fromPoints(line.positions, result);\n      return BoundingSphereState.DONE;\n    }\n  } else {\n    const groundPolylinePrimitive = this._groundPolylinePrimitive;\n    if (\n      defined(groundPolylinePrimitive) &&\n      groundPolylinePrimitive.show &&\n      groundPolylinePrimitive.ready\n    ) {\n      const attributes = groundPolylinePrimitive.getGeometryInstanceAttributes(\n        this._geometryUpdater._entity\n      );\n      if (defined(attributes) && defined(attributes.boundingSphere)) {\n        BoundingSphere.clone(attributes.boundingSphere, result);\n        return BoundingSphereState.DONE;\n      }\n    }\n\n    if (defined(groundPolylinePrimitive) && !groundPolylinePrimitive.ready) {\n      return BoundingSphereState.PENDING;\n    }\n\n    return BoundingSphereState.DONE;\n  }\n\n  return BoundingSphereState.FAILED;\n};\n\nDynamicGeometryUpdater.prototype.isDestroyed = function () {\n  return false;\n};\n\nDynamicGeometryUpdater.prototype.destroy = function () {\n  const geometryUpdater = this._geometryUpdater;\n  const sceneId = geometryUpdater._scene.id;\n  const polylineCollection = polylineCollections[sceneId];\n  if (defined(polylineCollection)) {\n    polylineCollection.remove(this._line);\n    if (polylineCollection.length === 0) {\n      this._primitives.removeAndDestroy(polylineCollection);\n      delete polylineCollections[sceneId];\n    }\n  }\n  if (defined(this._groundPolylinePrimitive)) {\n    this._groundPrimitives.remove(this._groundPolylinePrimitive);\n  }\n  destroyObject(this);\n};\nexport default PolylineGeometryUpdater;\n","import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nconst defaultColor = Color.WHITE;\nconst defaultGlowPower = 0.25;\nconst defaultTaperPower = 1.0;\n\n/**\n * A {@link MaterialProperty} that maps to polyline glow {@link Material} uniforms.\n * @alias PolylineGlowMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property|Color} [options.color=Color.WHITE] A Property specifying the {@link Color} of the line.\n * @param {Property|Number} [options.glowPower=0.25] A numeric Property specifying the strength of the glow, as a percentage of the total line width.\n * @param {Property|Number} [options.taperPower=1.0] A numeric Property specifying the strength of the tapering effect, as a percentage of the total line length.  If 1.0 or higher, no taper effect is used.\n */\nfunction PolylineGlowMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._glowPower = undefined;\n  this._glowPowerSubscription = undefined;\n  this._taperPower = undefined;\n  this._taperPowerSubscription = undefined;\n\n  this.color = options.color;\n  this.glowPower = options.glowPower;\n  this.taperPower = options.taperPower;\n}\n\nObject.defineProperties(PolylineGlowMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._color) && Property.isConstant(this._glow)\n      );\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the line.\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the strength of the glow, as a percentage of the total line width (less than 1.0).\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  glowPower: createPropertyDescriptor(\"glowPower\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the strength of the tapering effect, as a percentage of the total line length.  If 1.0 or higher, no taper effect is used.\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  taperPower: createPropertyDescriptor(\"taperPower\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nPolylineGlowMaterialProperty.prototype.getType = function (time) {\n  return \"PolylineGlow\";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPolylineGlowMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n  result.color = Property.getValueOrClonedDefault(\n    this._color,\n    time,\n    defaultColor,\n    result.color\n  );\n  result.glowPower = Property.getValueOrDefault(\n    this._glowPower,\n    time,\n    defaultGlowPower,\n    result.glowPower\n  );\n  result.taperPower = Property.getValueOrDefault(\n    this._taperPower,\n    time,\n    defaultTaperPower,\n    result.taperPower\n  );\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPolylineGlowMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (other instanceof PolylineGlowMaterialProperty &&\n      Property.equals(this._color, other._color) &&\n      Property.equals(this._glowPower, other._glowPower) &&\n      Property.equals(this._taperPower, other._taperPower))\n  );\n};\nexport default PolylineGlowMaterialProperty;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {Object} PolylineGraphics.ConstructorOptions\n *\n * Initialization options for the PolylineGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the polyline.\n * @property {Property | Array<Cartesian3>} [positions] A Property specifying the array of {@link Cartesian3} positions that define the line strip.\n * @property {Property | number} [width=1.0] A numeric Property specifying the width in pixels.\n * @property {Property | number} [granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between each latitude and longitude if arcType is not ArcType.NONE.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to draw the polyline.\n * @property {MaterialProperty | Color} [depthFailMaterial] A property specifying the material used to draw the polyline when it is below the terrain.\n * @property {Property | ArcType} [arcType=ArcType.GEODESIC] The type of line the polyline segments must follow.\n * @property {Property | boolean} [clampToGround=false] A boolean Property specifying whether the Polyline should be clamped to the ground.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the polyline casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this polyline will be displayed.\n * @property {Property | ClassificationType} [classificationType=ClassificationType.BOTH] An enum Property specifying whether this polyline will classify terrain, 3D Tiles, or both when on the ground.\n * @property {Property | number} [zIndex=0] A Property specifying the zIndex used for ordering ground geometry. Only has an effect if `clampToGround` is true and polylines on terrain is supported.\n */\n\n/**\n * Describes a polyline. The first two positions define a line segment,\n * and each additional position defines a line segment from the previous position. The segments\n * can be linear connected points, great arcs, or clamped to terrain.\n *\n * @alias PolylineGraphics\n * @constructor\n *\n * @param {PolylineGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline.html|Cesium Sandcastle Polyline Demo}\n */\nfunction PolylineGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._positions = undefined;\n  this._positionsSubscription = undefined;\n  this._width = undefined;\n  this._widthSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._depthFailMaterial = undefined;\n  this._depthFailMaterialSubscription = undefined;\n  this._arcType = undefined;\n  this._arcTypeSubscription = undefined;\n  this._clampToGround = undefined;\n  this._clampToGroundSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._classificationType = undefined;\n  this._classificationTypeSubscription = undefined;\n  this._zIndex = undefined;\n  this._zIndexSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PolylineGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PolylineGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the polyline.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the array of {@link Cartesian3}\n   * positions that define the line strip.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property|undefined}\n   */\n  positions: createPropertyDescriptor(\"positions\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width in pixels.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  width: createPropertyDescriptor(\"width\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between each latitude and longitude if arcType is not ArcType.NONE and clampToGround is false.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property|undefined}\n   * @default Cesium.Math.RADIANS_PER_DEGREE\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to draw the polyline.\n   * @memberof PolylineGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to draw the polyline when it fails the depth test.\n   * <p>\n   * Requires the EXT_frag_depth WebGL extension to render properly. If the extension is not supported,\n   * there may be artifacts.\n   * </p>\n   * @memberof PolylineGraphics.prototype\n   * @type {MaterialProperty}\n   * @default undefined\n   */\n  depthFailMaterial: createMaterialPropertyDescriptor(\"depthFailMaterial\"),\n\n  /**\n   * Gets or sets the {@link ArcType} Property specifying whether the line segments should be great arcs, rhumb lines or linearly connected.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property|undefined}\n   * @default ArcType.GEODESIC\n   */\n  arcType: createPropertyDescriptor(\"arcType\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the polyline\n   * should be clamped to the ground.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  clampToGround: createPropertyDescriptor(\"clampToGround\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the polyline\n   * casts or receives shadows from light sources.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this polyline will be displayed.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying whether this polyline will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof PolylineGraphics.prototype\n   * @type {Property|undefined}\n   * @default ClassificationType.BOTH\n   */\n  classificationType: createPropertyDescriptor(\"classificationType\"),\n\n  /**\n   * Gets or sets the zIndex Property specifying the ordering of the polyline. Only has an effect if `clampToGround` is true and polylines on terrain is supported.\n   * @memberof PolylineGraphics.prototype\n   * @type {ConstantProperty|undefined}\n   * @default 0\n   */\n  zIndex: createPropertyDescriptor(\"zIndex\"),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {PolylineGraphics} [result] The object onto which to store the result.\n * @returns {PolylineGraphics} The modified result parameter or a new instance if one was not provided.\n */\nPolylineGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PolylineGraphics(this);\n  }\n  result.show = this.show;\n  result.positions = this.positions;\n  result.width = this.width;\n  result.granularity = this.granularity;\n  result.material = this.material;\n  result.depthFailMaterial = this.depthFailMaterial;\n  result.arcType = this.arcType;\n  result.clampToGround = this.clampToGround;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.classificationType = this.classificationType;\n  result.zIndex = this.zIndex;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PolylineGraphics} source The object to be merged into this object.\n */\nPolylineGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.positions = defaultValue(this.positions, source.positions);\n  this.width = defaultValue(this.width, source.width);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.material = defaultValue(this.material, source.material);\n  this.depthFailMaterial = defaultValue(\n    this.depthFailMaterial,\n    source.depthFailMaterial\n  );\n  this.arcType = defaultValue(this.arcType, source.arcType);\n  this.clampToGround = defaultValue(this.clampToGround, source.clampToGround);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n  this.classificationType = defaultValue(\n    this.classificationType,\n    source.classificationType\n  );\n  this.zIndex = defaultValue(this.zIndex, source.zIndex);\n};\nexport default PolylineGraphics;\n","import Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nconst defaultColor = Color.WHITE;\nconst defaultOutlineColor = Color.BLACK;\nconst defaultOutlineWidth = 1.0;\n\n/**\n * A {@link MaterialProperty} that maps to polyline outline {@link Material} uniforms.\n * @alias PolylineOutlineMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property|Color} [options.color=Color.WHITE] A Property specifying the {@link Color} of the line.\n * @param {Property|Color} [options.outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @param {Property|Number} [options.outlineWidth=1.0] A numeric Property specifying the width of the outline, in pixels.\n */\nfunction PolylineOutlineMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n\n  this.color = options.color;\n  this.outlineColor = options.outlineColor;\n  this.outlineWidth = options.outlineWidth;\n}\n\nObject.defineProperties(PolylineOutlineMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PolylineOutlineMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._color) &&\n        Property.isConstant(this._outlineColor) &&\n        Property.isConstant(this._outlineWidth)\n      );\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PolylineOutlineMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the line.\n   * @memberof PolylineOutlineMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof PolylineOutlineMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof PolylineOutlineMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nPolylineOutlineMaterialProperty.prototype.getType = function (time) {\n  return \"PolylineOutline\";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPolylineOutlineMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n  result.color = Property.getValueOrClonedDefault(\n    this._color,\n    time,\n    defaultColor,\n    result.color\n  );\n  result.outlineColor = Property.getValueOrClonedDefault(\n    this._outlineColor,\n    time,\n    defaultOutlineColor,\n    result.outlineColor\n  );\n  result.outlineWidth = Property.getValueOrDefault(\n    this._outlineWidth,\n    time,\n    defaultOutlineWidth\n  );\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPolylineOutlineMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof PolylineOutlineMaterialProperty && //\n      Property.equals(this._color, other._color) && //\n      Property.equals(this._outlineColor, other._outlineColor) && //\n      Property.equals(this._outlineWidth, other._outlineWidth))\n  );\n};\nexport default PolylineOutlineMaterialProperty;\n","import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport ClassificationType from \"../Scene/ClassificationType.js\";\nimport PolylineColorAppearance from \"../Scene/PolylineColorAppearance.js\";\nimport PolylineMaterialAppearance from \"../Scene/PolylineMaterialAppearance.js\";\nimport ShadowMode from \"../Scene/ShadowMode.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryBatch from \"./DynamicGeometryBatch.js\";\nimport PolylineGeometryUpdater from \"./PolylineGeometryUpdater.js\";\nimport StaticGeometryColorBatch from \"./StaticGeometryColorBatch.js\";\nimport StaticGeometryPerMaterialBatch from \"./StaticGeometryPerMaterialBatch.js\";\nimport StaticGroundPolylinePerMaterialBatch from \"./StaticGroundPolylinePerMaterialBatch.js\";\n\nconst emptyArray = [];\n\nfunction removeUpdater(that, updater) {\n  //We don't keep track of which batch an updater is in, so just remove it from all of them.\n  const batches = that._batches;\n  const length = batches.length;\n  for (let i = 0; i < length; i++) {\n    batches[i].remove(updater);\n  }\n}\n\nfunction insertUpdaterIntoBatch(that, time, updater) {\n  if (updater.isDynamic) {\n    that._dynamicBatch.add(time, updater);\n    return;\n  }\n\n  if (updater.clampToGround && updater.fillEnabled) {\n    // Also checks for support\n    const classificationType = updater.classificationTypeProperty.getValue(\n      time\n    );\n    that._groundBatches[classificationType].add(time, updater);\n    return;\n  }\n\n  let shadows;\n  if (updater.fillEnabled) {\n    shadows = updater.shadowsProperty.getValue(time);\n  }\n\n  let multiplier = 0;\n  if (defined(updater.depthFailMaterialProperty)) {\n    multiplier =\n      updater.depthFailMaterialProperty instanceof ColorMaterialProperty\n        ? 1\n        : 2;\n  }\n\n  let index;\n  if (defined(shadows)) {\n    index = shadows + multiplier * ShadowMode.NUMBER_OF_SHADOW_MODES;\n  }\n\n  if (updater.fillEnabled) {\n    if (updater.fillMaterialProperty instanceof ColorMaterialProperty) {\n      that._colorBatches[index].add(time, updater);\n    } else {\n      that._materialBatches[index].add(time, updater);\n    }\n  }\n}\n\n/**\n * A visualizer for polylines represented by {@link Primitive} instances.\n * @alias PolylineVisualizer\n * @constructor\n *\n * @param {Scene} scene The scene the primitives will be rendered in.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n * @param {PrimitiveCollection} [primitives=scene.primitives] A collection to add primitives related to the entities\n * @param {PrimitiveCollection} [groundPrimitives=scene.groundPrimitives] A collection to add ground primitives related to the entities\n */\nfunction PolylineVisualizer(\n  scene,\n  entityCollection,\n  primitives,\n  groundPrimitives\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"scene\", scene);\n  Check.defined(\"entityCollection\", entityCollection);\n  //>>includeEnd('debug');\n\n  groundPrimitives = defaultValue(groundPrimitives, scene.groundPrimitives);\n  primitives = defaultValue(primitives, scene.primitives);\n\n  this._scene = scene;\n  this._primitives = primitives;\n  this._entityCollection = undefined;\n  this._addedObjects = new AssociativeArray();\n  this._removedObjects = new AssociativeArray();\n  this._changedObjects = new AssociativeArray();\n\n  let i;\n  const numberOfShadowModes = ShadowMode.NUMBER_OF_SHADOW_MODES;\n  this._colorBatches = new Array(numberOfShadowModes * 3);\n  this._materialBatches = new Array(numberOfShadowModes * 3);\n\n  for (i = 0; i < numberOfShadowModes; ++i) {\n    this._colorBatches[i] = new StaticGeometryColorBatch(\n      primitives,\n      PolylineColorAppearance,\n      undefined,\n      false,\n      i\n    ); // no depth fail appearance\n    this._materialBatches[i] = new StaticGeometryPerMaterialBatch(\n      primitives,\n      PolylineMaterialAppearance,\n      undefined,\n      false,\n      i\n    );\n\n    this._colorBatches[i + numberOfShadowModes] = new StaticGeometryColorBatch(\n      primitives,\n      PolylineColorAppearance,\n      PolylineColorAppearance,\n      false,\n      i\n    ); //depth fail appearance variations\n    this._materialBatches[\n      i + numberOfShadowModes\n    ] = new StaticGeometryPerMaterialBatch(\n      primitives,\n      PolylineMaterialAppearance,\n      PolylineColorAppearance,\n      false,\n      i\n    );\n\n    this._colorBatches[\n      i + numberOfShadowModes * 2\n    ] = new StaticGeometryColorBatch(\n      primitives,\n      PolylineColorAppearance,\n      PolylineMaterialAppearance,\n      false,\n      i\n    );\n    this._materialBatches[\n      i + numberOfShadowModes * 2\n    ] = new StaticGeometryPerMaterialBatch(\n      primitives,\n      PolylineMaterialAppearance,\n      PolylineMaterialAppearance,\n      false,\n      i\n    );\n  }\n\n  this._dynamicBatch = new DynamicGeometryBatch(primitives, groundPrimitives);\n\n  const numberOfClassificationTypes =\n    ClassificationType.NUMBER_OF_CLASSIFICATION_TYPES;\n  this._groundBatches = new Array(numberOfClassificationTypes);\n\n  for (i = 0; i < numberOfClassificationTypes; ++i) {\n    this._groundBatches[i] = new StaticGroundPolylinePerMaterialBatch(\n      groundPrimitives,\n      i\n    );\n  }\n\n  this._batches = this._colorBatches.concat(\n    this._materialBatches,\n    this._dynamicBatch,\n    this._groundBatches\n  );\n\n  this._subscriptions = new AssociativeArray();\n  this._updaters = new AssociativeArray();\n\n  this._entityCollection = entityCollection;\n  entityCollection.collectionChanged.addEventListener(\n    PolylineVisualizer.prototype._onCollectionChanged,\n    this\n  );\n  this._onCollectionChanged(\n    entityCollection,\n    entityCollection.values,\n    emptyArray\n  );\n}\n\n/**\n * Updates all of the primitives created by this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} True if the visualizer successfully updated to the provided time,\n * false if the visualizer is waiting for asynchronous primitives to be created.\n */\nPolylineVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  //>>includeEnd('debug');\n\n  const addedObjects = this._addedObjects;\n  const added = addedObjects.values;\n  const removedObjects = this._removedObjects;\n  const removed = removedObjects.values;\n  const changedObjects = this._changedObjects;\n  const changed = changedObjects.values;\n\n  let i;\n  let entity;\n  let id;\n  let updater;\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n    id = entity.id;\n    updater = this._updaters.get(id);\n\n    //If in a single update, an entity gets removed and a new instance\n    //re-added with the same id, the updater no longer tracks the\n    //correct entity, we need to both remove the old one and\n    //add the new one, which is done by pushing the entity\n    //onto the removed/added lists.\n    if (updater.entity === entity) {\n      removeUpdater(this, updater);\n      insertUpdaterIntoBatch(this, time, updater);\n    } else {\n      removed.push(entity);\n      added.push(entity);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    id = entity.id;\n    updater = this._updaters.get(id);\n    removeUpdater(this, updater);\n    updater.destroy();\n    this._updaters.remove(id);\n    this._subscriptions.get(id)();\n    this._subscriptions.remove(id);\n  }\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    id = entity.id;\n    updater = new PolylineGeometryUpdater(entity, this._scene);\n    this._updaters.set(id, updater);\n    insertUpdaterIntoBatch(this, time, updater);\n    this._subscriptions.set(\n      id,\n      updater.geometryChanged.addEventListener(\n        PolylineVisualizer._onGeometryChanged,\n        this\n      )\n    );\n  }\n\n  addedObjects.removeAll();\n  removedObjects.removeAll();\n  changedObjects.removeAll();\n\n  let isUpdated = true;\n  const batches = this._batches;\n  const length = batches.length;\n  for (i = 0; i < length; i++) {\n    isUpdated = batches[i].update(time) && isUpdated;\n  }\n\n  return isUpdated;\n};\n\nconst getBoundingSphereArrayScratch = [];\nconst getBoundingSphereBoundingSphereScratch = new BoundingSphere();\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nPolylineVisualizer.prototype.getBoundingSphere = function (entity, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"entity\", entity);\n  Check.defined(\"result\", result);\n  //>>includeEnd('debug');\n\n  const boundingSpheres = getBoundingSphereArrayScratch;\n  const tmp = getBoundingSphereBoundingSphereScratch;\n\n  let count = 0;\n  let state = BoundingSphereState.DONE;\n  const batches = this._batches;\n  const batchesLength = batches.length;\n  const updater = this._updaters.get(entity.id);\n  for (let i = 0; i < batchesLength; i++) {\n    state = batches[i].getBoundingSphere(updater, tmp);\n    if (state === BoundingSphereState.PENDING) {\n      return BoundingSphereState.PENDING;\n    } else if (state === BoundingSphereState.DONE) {\n      boundingSpheres[count] = BoundingSphere.clone(\n        tmp,\n        boundingSpheres[count]\n      );\n      count++;\n    }\n  }\n\n  if (count === 0) {\n    return BoundingSphereState.FAILED;\n  }\n\n  boundingSpheres.length = count;\n  BoundingSphere.fromBoundingSpheres(boundingSpheres, result);\n  return BoundingSphereState.DONE;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nPolylineVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nPolylineVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(\n    PolylineVisualizer.prototype._onCollectionChanged,\n    this\n  );\n  this._addedObjects.removeAll();\n  this._removedObjects.removeAll();\n\n  let i;\n  const batches = this._batches;\n  let length = batches.length;\n  for (i = 0; i < length; i++) {\n    batches[i].removeAllPrimitives();\n  }\n\n  const subscriptions = this._subscriptions.values;\n  length = subscriptions.length;\n  for (i = 0; i < length; i++) {\n    subscriptions[i]();\n  }\n  this._subscriptions.removeAll();\n  return destroyObject(this);\n};\n\n/**\n * @private\n */\nPolylineVisualizer._onGeometryChanged = function (updater) {\n  const removedObjects = this._removedObjects;\n  const changedObjects = this._changedObjects;\n\n  const entity = updater.entity;\n  const id = entity.id;\n\n  if (!defined(removedObjects.get(id)) && !defined(changedObjects.get(id))) {\n    changedObjects.set(id, entity);\n  }\n};\n\n/**\n * @private\n */\nPolylineVisualizer.prototype._onCollectionChanged = function (\n  entityCollection,\n  added,\n  removed\n) {\n  const addedObjects = this._addedObjects;\n  const removedObjects = this._removedObjects;\n  const changedObjects = this._changedObjects;\n\n  let i;\n  let id;\n  let entity;\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    id = entity.id;\n    if (!addedObjects.remove(id)) {\n      removedObjects.set(id, entity);\n      changedObjects.remove(id);\n    }\n  }\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    id = entity.id;\n    if (removedObjects.remove(id)) {\n      changedObjects.set(id, entity);\n    } else {\n      addedObjects.set(id, entity);\n    }\n  }\n};\nexport default PolylineVisualizer;\n","import Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport PolylineVolumeGeometry from \"../Core/PolylineVolumeGeometry.js\";\nimport PolylineVolumeOutlineGeometry from \"../Core/PolylineVolumeOutlineGeometry.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport Property from \"./Property.js\";\n\nconst scratchColor = new Color();\n\nfunction PolylineVolumeGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.polylinePositions = undefined;\n  this.shapePositions = undefined;\n  this.cornerType = undefined;\n  this.granularity = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for polyline volumes.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias PolylineVolumeGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction PolylineVolumeGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new PolylineVolumeGeometryOptions(entity),\n    geometryPropertyName: \"polylineVolume\",\n    observedPropertyNames: [\"availability\", \"polylineVolume\"],\n  });\n\n  this._onEntityPropertyChanged(\n    entity,\n    \"polylineVolume\",\n    entity.polylineVolume,\n    undefined\n  );\n}\n\nif (defined(Object.create)) {\n  PolylineVolumeGeometryUpdater.prototype = Object.create(\n    GeometryUpdater.prototype\n  );\n  PolylineVolumeGeometryUpdater.prototype.constructor = PolylineVolumeGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nPolylineVolumeGeometryUpdater.prototype.createFillGeometryInstance = function (\n  time\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n\n  let attributes;\n\n  let color;\n  const show = new ShowGeometryInstanceAttribute(\n    isAvailable &&\n      entity.isShowing &&\n      this._showProperty.getValue(time) &&\n      this._fillProperty.getValue(time)\n  );\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n  const distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n    distanceDisplayCondition\n  );\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    let currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n      color: color,\n    };\n  } else {\n    attributes = {\n      show: show,\n      distanceDisplayCondition: distanceDisplayConditionAttribute,\n    };\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PolylineVolumeGeometry(this._options),\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nPolylineVolumeGeometryUpdater.prototype.createOutlineGeometryInstance = function (\n  time\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent an outlined geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor\n  );\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new PolylineVolumeOutlineGeometry(this._options),\n    attributes: {\n      show: new ShowGeometryInstanceAttribute(\n        isAvailable &&\n          entity.isShowing &&\n          this._showProperty.getValue(time) &&\n          this._showOutlineProperty.getValue(time)\n      ),\n      color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n      distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n        distanceDisplayCondition\n      ),\n    },\n  });\n};\n\nPolylineVolumeGeometryUpdater.prototype._isHidden = function (\n  entity,\n  polylineVolume\n) {\n  return (\n    !defined(polylineVolume.positions) ||\n    !defined(polylineVolume.shape) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, polylineVolume)\n  );\n};\n\nPolylineVolumeGeometryUpdater.prototype._isDynamic = function (\n  entity,\n  polylineVolume\n) {\n  return (\n    !polylineVolume.positions.isConstant || //\n    !polylineVolume.shape.isConstant || //\n    !Property.isConstant(polylineVolume.granularity) || //\n    !Property.isConstant(polylineVolume.outlineWidth) || //\n    !Property.isConstant(polylineVolume.cornerType)\n  );\n};\n\nPolylineVolumeGeometryUpdater.prototype._setStaticOptions = function (\n  entity,\n  polylineVolume\n) {\n  const granularity = polylineVolume.granularity;\n  const cornerType = polylineVolume.cornerType;\n\n  const options = this._options;\n  const isColorMaterial =\n    this._materialProperty instanceof ColorMaterialProperty;\n  options.vertexFormat = isColorMaterial\n    ? PerInstanceColorAppearance.VERTEX_FORMAT\n    : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.polylinePositions = polylineVolume.positions.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.polylinePositions\n  );\n  options.shapePositions = polylineVolume.shape.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.shape\n  );\n  options.granularity = defined(granularity)\n    ? granularity.getValue(Iso8601.MINIMUM_VALUE)\n    : undefined;\n  options.cornerType = defined(cornerType)\n    ? cornerType.getValue(Iso8601.MINIMUM_VALUE)\n    : undefined;\n};\n\nPolylineVolumeGeometryUpdater.DynamicGeometryUpdater = DynamicPolylineVolumeGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicPolylineVolumeGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives\n  );\n}\n\nif (defined(Object.create)) {\n  DynamicPolylineVolumeGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype\n  );\n  DynamicPolylineVolumeGeometryUpdater.prototype.constructor = DynamicPolylineVolumeGeometryUpdater;\n}\n\nDynamicPolylineVolumeGeometryUpdater.prototype._isHidden = function (\n  entity,\n  polylineVolume,\n  time\n) {\n  const options = this._options;\n  return (\n    !defined(options.polylinePositions) ||\n    !defined(options.shapePositions) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(\n      this,\n      entity,\n      polylineVolume,\n      time\n    )\n  );\n};\n\nDynamicPolylineVolumeGeometryUpdater.prototype._setOptions = function (\n  entity,\n  polylineVolume,\n  time\n) {\n  const options = this._options;\n  options.polylinePositions = Property.getValueOrUndefined(\n    polylineVolume.positions,\n    time,\n    options.polylinePositions\n  );\n  options.shapePositions = Property.getValueOrUndefined(\n    polylineVolume.shape,\n    time\n  );\n  options.granularity = Property.getValueOrUndefined(\n    polylineVolume.granularity,\n    time\n  );\n  options.cornerType = Property.getValueOrUndefined(\n    polylineVolume.cornerType,\n    time\n  );\n};\nexport default PolylineVolumeGeometryUpdater;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {Object} PolylineVolumeGraphics.ConstructorOptions\n *\n * Initialization options for the PolylineVolumeGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the volume.\n * @property {Property | Array<Cartesian3>} [positions] A Property specifying the array of {@link Cartesian3} positions which define the line strip.\n * @property {Property | Array<Cartesian2>} [shape] A Property specifying the array of {@link Cartesian2} positions which define the shape to be extruded.\n * @property {Property | CornerType} [cornerType=CornerType.ROUNDED] A {@link CornerType} Property specifying the style of the corners.\n * @property {Property | number} [granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between each latitude and longitude point.\n * @property {Property | boolean} [fill=true] A boolean Property specifying whether the volume is filled with the provided material.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to fill the volume.\n * @property {Property | boolean} [outline=false] A boolean Property specifying whether the volume is outlined.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the volume casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this volume will be displayed.\n */\n\n/**\n * Describes a polyline volume defined as a line strip and corresponding two dimensional shape which is extruded along it.\n * The resulting volume conforms to the curvature of the globe.\n *\n * @alias PolylineVolumeGraphics\n * @constructor\n *\n * @param {PolylineVolumeGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline%20Volume.html|Cesium Sandcastle Polyline Volume Demo}\n */\nfunction PolylineVolumeGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._positions = undefined;\n  this._positionsSubscription = undefined;\n  this._shape = undefined;\n  this._shapeSubscription = undefined;\n  this._cornerType = undefined;\n  this._cornerTypeSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubsription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(PolylineVolumeGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof PolylineVolumeGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the volume.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the array of {@link Cartesian3} positions which define the line strip.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property|undefined}\n   */\n  positions: createPropertyDescriptor(\"positions\"),\n\n  /**\n   * Gets or sets the Property specifying the array of {@link Cartesian2} positions which define the shape to be extruded.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property|undefined}\n   */\n  shape: createPropertyDescriptor(\"shape\"),\n\n  /**\n   * Gets or sets the {@link CornerType} Property specifying the style of the corners.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property|undefined}\n   * @default CornerType.ROUNDED\n   */\n  cornerType: createPropertyDescriptor(\"cornerType\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between points on the volume.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property|undefined}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the volume is filled with the provided material.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the volume.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the volume is outlined.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * <p>\n   * Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}.\n   * </p>\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the volume\n   * casts or receives shadows from light sources.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this volume will be displayed.\n   * @memberof PolylineVolumeGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {PolylineVolumeGraphics} [result] The object onto which to store the result.\n * @returns {PolylineVolumeGraphics} The modified result parameter or a new instance if one was not provided.\n */\nPolylineVolumeGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new PolylineVolumeGraphics(this);\n  }\n  result.show = this.show;\n  result.positions = this.positions;\n  result.shape = this.shape;\n  result.cornerType = this.cornerType;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {PolylineVolumeGraphics} source The object to be merged into this object.\n */\nPolylineVolumeGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.positions = defaultValue(this.positions, source.positions);\n  this.shape = defaultValue(this.shape, source.shape);\n  this.cornerType = defaultValue(this.cornerType, source.cornerType);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n};\nexport default PolylineVolumeGraphics;\n","import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport Transforms from \"../Core/Transforms.js\";\n\n/**\n * The interface for all {@link Property} objects that define a world\n * location as a {@link Cartesian3} with an associated {@link ReferenceFrame}.\n * This type defines an interface and cannot be instantiated directly.\n *\n * @alias PositionProperty\n * @constructor\n * @abstract\n *\n * @see CompositePositionProperty\n * @see ConstantPositionProperty\n * @see SampledPositionProperty\n * @see TimeIntervalCollectionPositionProperty\n */\nfunction PositionProperty() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(PositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PositionProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets the reference frame that the position is defined in.\n   * @memberof PositionProperty.prototype\n   * @type {ReferenceFrame}\n   */\n  referenceFrame: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n * @function\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3 | undefined} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPositionProperty.prototype.getValue = DeveloperError.throwInstantiationError;\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n * @function\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3 | undefined} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPositionProperty.prototype.getValueInReferenceFrame =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n * @function\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPositionProperty.prototype.equals = DeveloperError.throwInstantiationError;\n\nconst scratchMatrix3 = new Matrix3();\n\n/**\n * @private\n */\nPositionProperty.convertToReferenceFrame = function (\n  time,\n  value,\n  inputFrame,\n  outputFrame,\n  result\n) {\n  if (!defined(value)) {\n    return value;\n  }\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  if (inputFrame === outputFrame) {\n    return Cartesian3.clone(value, result);\n  }\n\n  let icrfToFixed = Transforms.computeIcrfToFixedMatrix(time, scratchMatrix3);\n  if (!defined(icrfToFixed)) {\n    icrfToFixed = Transforms.computeTemeToPseudoFixedMatrix(\n      time,\n      scratchMatrix3\n    );\n  }\n  if (inputFrame === ReferenceFrame.INERTIAL) {\n    return Matrix3.multiplyByVector(icrfToFixed, value, result);\n  }\n  if (inputFrame === ReferenceFrame.FIXED) {\n    return Matrix3.multiplyByVector(\n      Matrix3.transpose(icrfToFixed, scratchMatrix3),\n      value,\n      result\n    );\n  }\n};\nexport default PositionProperty;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link Property} whose value is an array whose items are the computed value\n * of other PositionProperty instances.\n *\n * @alias PositionPropertyArray\n * @constructor\n *\n * @param {Property[]} [value] An array of Property instances.\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n */\nfunction PositionPropertyArray(value, referenceFrame) {\n  this._value = undefined;\n  this._definitionChanged = new Event();\n  this._eventHelper = new EventHelper();\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n  this.setValue(value);\n}\n\nObject.defineProperties(PositionPropertyArray.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  This property\n   * is considered constant if all property items in the array are constant.\n   * @memberof PositionPropertyArray.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      const value = this._value;\n      if (!defined(value)) {\n        return true;\n      }\n\n      const length = value.length;\n      for (let i = 0; i < length; i++) {\n        if (!Property.isConstant(value[i])) {\n          return false;\n        }\n      }\n      return true;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value or one of the properties in the array also changes.\n   * @memberof PositionPropertyArray.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets the reference frame in which the position is defined.\n   * @memberof PositionPropertyArray.prototype\n   * @type {ReferenceFrame}\n   * @default ReferenceFrame.FIXED;\n   */\n  referenceFrame: {\n    get: function () {\n      return this._referenceFrame;\n    },\n  },\n});\n\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Cartesian3[]} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3[]} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPositionPropertyArray.prototype.getValue = function (time, result) {\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3[]} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3[]} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPositionPropertyArray.prototype.getValueInReferenceFrame = function (\n  time,\n  referenceFrame,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const value = this._value;\n  if (!defined(value)) {\n    return undefined;\n  }\n\n  const length = value.length;\n  if (!defined(result)) {\n    result = new Array(length);\n  }\n  let i = 0;\n  let x = 0;\n  while (i < length) {\n    const property = value[i];\n    const itemValue = property.getValueInReferenceFrame(\n      time,\n      referenceFrame,\n      result[i]\n    );\n    if (defined(itemValue)) {\n      result[x] = itemValue;\n      x++;\n    }\n    i++;\n  }\n  result.length = x;\n  return result;\n};\n\n/**\n * Sets the value of the property.\n *\n * @param {Property[]} value An array of Property instances.\n */\nPositionPropertyArray.prototype.setValue = function (value) {\n  const eventHelper = this._eventHelper;\n  eventHelper.removeAll();\n\n  if (defined(value)) {\n    this._value = value.slice();\n    const length = value.length;\n    for (let i = 0; i < length; i++) {\n      const property = value[i];\n      if (defined(property)) {\n        eventHelper.add(\n          property.definitionChanged,\n          PositionPropertyArray.prototype._raiseDefinitionChanged,\n          this\n        );\n      }\n    }\n  } else {\n    this._value = undefined;\n  }\n  this._definitionChanged.raiseEvent(this);\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPositionPropertyArray.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof PositionPropertyArray && //\n      this._referenceFrame === other._referenceFrame && //\n      Property.arrayEquals(this._value, other._value))\n  );\n};\n\nPositionPropertyArray.prototype._raiseDefinitionChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\nexport default PositionPropertyArray;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * The interface for all properties, which represent a value that can optionally vary over time.\n * This type defines an interface and cannot be instantiated directly.\n *\n * @alias Property\n * @constructor\n * @abstract\n *\n * @see CompositeProperty\n * @see ConstantProperty\n * @see SampledProperty\n * @see TimeIntervalCollectionProperty\n * @see MaterialProperty\n * @see PositionProperty\n * @see ReferenceProperty\n */\nfunction Property() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(Property.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof Property.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof Property.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Gets the value of the property at the provided time.\n * @function\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nProperty.prototype.getValue = DeveloperError.throwInstantiationError;\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n * @function\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nProperty.prototype.equals = DeveloperError.throwInstantiationError;\n\n/**\n * @private\n */\nProperty.equals = function (left, right) {\n  return left === right || (defined(left) && left.equals(right));\n};\n\n/**\n * @private\n */\nProperty.arrayEquals = function (left, right) {\n  if (left === right) {\n    return true;\n  }\n  if (!defined(left) || !defined(right) || left.length !== right.length) {\n    return false;\n  }\n  const length = left.length;\n  for (let i = 0; i < length; i++) {\n    if (!Property.equals(left[i], right[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * @private\n */\nProperty.isConstant = function (property) {\n  return !defined(property) || property.isConstant;\n};\n\n/**\n * @private\n */\nProperty.getValueOrUndefined = function (property, time, result) {\n  return defined(property) ? property.getValue(time, result) : undefined;\n};\n\n/**\n * @private\n */\nProperty.getValueOrDefault = function (property, time, valueDefault, result) {\n  return defined(property)\n    ? defaultValue(property.getValue(time, result), valueDefault)\n    : valueDefault;\n};\n\n/**\n * @private\n */\nProperty.getValueOrClonedDefault = function (\n  property,\n  time,\n  valueDefault,\n  result\n) {\n  let value;\n  if (defined(property)) {\n    value = property.getValue(time, result);\n  }\n  if (!defined(value)) {\n    value = valueDefault.clone(value);\n  }\n  return value;\n};\nexport default Property;\n","import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link Property} whose value is an array whose items are the computed value\n * of other property instances.\n *\n * @alias PropertyArray\n * @constructor\n *\n * @param {Property[]} [value] An array of Property instances.\n */\nfunction PropertyArray(value) {\n  this._value = undefined;\n  this._definitionChanged = new Event();\n  this._eventHelper = new EventHelper();\n  this.setValue(value);\n}\n\nObject.defineProperties(PropertyArray.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  This property\n   * is considered constant if all property items in the array are constant.\n   * @memberof PropertyArray.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      const value = this._value;\n      if (!defined(value)) {\n        return true;\n      }\n      const length = value.length;\n      for (let i = 0; i < length; i++) {\n        if (!Property.isConstant(value[i])) {\n          return false;\n        }\n      }\n      return true;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value or one of the properties in the array also changes.\n   * @memberof PropertyArray.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n});\n\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object[]} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object[]} The modified result parameter, which is an array of values produced by evaluating each of the contained properties at the given time or a new instance if the result parameter was not supplied.\n */\nPropertyArray.prototype.getValue = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const value = this._value;\n  if (!defined(value)) {\n    return undefined;\n  }\n\n  const length = value.length;\n  if (!defined(result)) {\n    result = new Array(length);\n  }\n  let i = 0;\n  let x = 0;\n  while (i < length) {\n    const property = this._value[i];\n    const itemValue = property.getValue(time, result[i]);\n    if (defined(itemValue)) {\n      result[x] = itemValue;\n      x++;\n    }\n    i++;\n  }\n  result.length = x;\n  return result;\n};\n\n/**\n * Sets the value of the property.\n *\n * @param {Property[]} value An array of Property instances.\n */\nPropertyArray.prototype.setValue = function (value) {\n  const eventHelper = this._eventHelper;\n  eventHelper.removeAll();\n\n  if (defined(value)) {\n    this._value = value.slice();\n    const length = value.length;\n    for (let i = 0; i < length; i++) {\n      const property = value[i];\n      if (defined(property)) {\n        eventHelper.add(\n          property.definitionChanged,\n          PropertyArray.prototype._raiseDefinitionChanged,\n          this\n        );\n      }\n    }\n  } else {\n    this._value = undefined;\n  }\n  this._definitionChanged.raiseEvent(this);\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPropertyArray.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof PropertyArray && //\n      Property.arrayEquals(this._value, other._value))\n  );\n};\n\nPropertyArray.prototype._raiseDefinitionChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\nexport default PropertyArray;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link Property} whose value is a key-value mapping of property names to the computed value of other properties.\n *\n * @alias PropertyBag\n * @implements Record<string, any>\n * @constructor\n *\n * @param {Object} [value] An object, containing key-value mapping of property names to properties.\n * @param {Function} [createPropertyCallback] A function that will be called when the value of any of the properties in value are not a Property.\n */\nfunction PropertyBag(value, createPropertyCallback) {\n  this._propertyNames = [];\n  this._definitionChanged = new Event();\n\n  if (defined(value)) {\n    this.merge(value, createPropertyCallback);\n  }\n}\n\nObject.defineProperties(PropertyBag.prototype, {\n  /**\n   * Gets the names of all properties registered on this instance.\n   * @memberof PropertyBag.prototype\n   * @type {Array}\n   */\n  propertyNames: {\n    get: function () {\n      return this._propertyNames;\n    },\n  },\n  /**\n   * Gets a value indicating if this property is constant.  This property\n   * is considered constant if all property items in this object are constant.\n   * @memberof PropertyBag.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      const propertyNames = this._propertyNames;\n      for (let i = 0, len = propertyNames.length; i < len; i++) {\n        if (!Property.isConstant(this[propertyNames[i]])) {\n          return false;\n        }\n      }\n      return true;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the set of properties contained in this\n   * object changes, or one of the properties itself changes.\n   *\n   * @memberof PropertyBag.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n});\n\n/**\n * Determines if this object has defined a property with the given name.\n *\n * @param {String} propertyName The name of the property to check for.\n *\n * @returns {Boolean} True if this object has defined a property with the given name, false otherwise.\n */\nPropertyBag.prototype.hasProperty = function (propertyName) {\n  return this._propertyNames.indexOf(propertyName) !== -1;\n};\n\nfunction createConstantProperty(value) {\n  return new ConstantProperty(value);\n}\n\n/**\n * Adds a property to this object.\n *\n * @param {String} propertyName The name of the property to add.\n * @param {*} [value] The value of the new property, if provided.\n * @param {Function} [createPropertyCallback] A function that will be called when the value of this new property is set to a value that is not a Property.\n *\n * @exception {DeveloperError} \"propertyName\" is already a registered property.\n */\nPropertyBag.prototype.addProperty = function (\n  propertyName,\n  value,\n  createPropertyCallback\n) {\n  const propertyNames = this._propertyNames;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(propertyName)) {\n    throw new DeveloperError(\"propertyName is required.\");\n  }\n  if (propertyNames.indexOf(propertyName) !== -1) {\n    throw new DeveloperError(\n      `${propertyName} is already a registered property.`\n    );\n  }\n  //>>includeEnd('debug');\n\n  propertyNames.push(propertyName);\n  Object.defineProperty(\n    this,\n    propertyName,\n    createPropertyDescriptor(\n      propertyName,\n      true,\n      defaultValue(createPropertyCallback, createConstantProperty)\n    )\n  );\n\n  if (defined(value)) {\n    this[propertyName] = value;\n  }\n\n  this._definitionChanged.raiseEvent(this);\n};\n\n/**\n * Removed a property previously added with addProperty.\n *\n * @param {String} propertyName The name of the property to remove.\n *\n * @exception {DeveloperError} \"propertyName\" is not a registered property.\n */\nPropertyBag.prototype.removeProperty = function (propertyName) {\n  const propertyNames = this._propertyNames;\n  const index = propertyNames.indexOf(propertyName);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(propertyName)) {\n    throw new DeveloperError(\"propertyName is required.\");\n  }\n  if (index === -1) {\n    throw new DeveloperError(`${propertyName} is not a registered property.`);\n  }\n  //>>includeEnd('debug');\n\n  this._propertyNames.splice(index, 1);\n  delete this[propertyName];\n\n  this._definitionChanged.raiseEvent(this);\n};\n\n/**\n * Gets the value of this property.  Each contained property will be evaluated at the given time, and the overall\n * result will be an object, mapping property names to those values.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * Note that any properties in result which are not part of this PropertyBag will be left as-is.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPropertyBag.prototype.getValue = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = {};\n  }\n\n  const propertyNames = this._propertyNames;\n  for (let i = 0, len = propertyNames.length; i < len; i++) {\n    const propertyName = propertyNames[i];\n    result[propertyName] = Property.getValueOrUndefined(\n      this[propertyName],\n      time,\n      result[propertyName]\n    );\n  }\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {Object} source The object to be merged into this object.\n * @param {Function} [createPropertyCallback] A function that will be called when the value of any of the properties in value are not a Property.\n */\nPropertyBag.prototype.merge = function (source, createPropertyCallback) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const propertyNames = this._propertyNames;\n  const sourcePropertyNames = defined(source._propertyNames)\n    ? source._propertyNames\n    : Object.keys(source);\n  for (let i = 0, len = sourcePropertyNames.length; i < len; i++) {\n    const name = sourcePropertyNames[i];\n\n    const targetProperty = this[name];\n    const sourceProperty = source[name];\n\n    //Custom properties that are registered on the source must also be added to this.\n    if (targetProperty === undefined && propertyNames.indexOf(name) === -1) {\n      this.addProperty(name, undefined, createPropertyCallback);\n    }\n\n    if (sourceProperty !== undefined) {\n      if (targetProperty !== undefined) {\n        if (defined(targetProperty) && defined(targetProperty.merge)) {\n          targetProperty.merge(sourceProperty);\n        }\n      } else if (\n        defined(sourceProperty) &&\n        defined(sourceProperty.merge) &&\n        defined(sourceProperty.clone)\n      ) {\n        this[name] = sourceProperty.clone();\n      } else {\n        this[name] = sourceProperty;\n      }\n    }\n  }\n};\n\nfunction propertiesEqual(a, b) {\n  const aPropertyNames = a._propertyNames;\n  const bPropertyNames = b._propertyNames;\n\n  const len = aPropertyNames.length;\n  if (len !== bPropertyNames.length) {\n    return false;\n  }\n\n  for (let aIndex = 0; aIndex < len; ++aIndex) {\n    const name = aPropertyNames[aIndex];\n    const bIndex = bPropertyNames.indexOf(name);\n    if (bIndex === -1) {\n      return false;\n    }\n    if (!Property.equals(a[name], b[name])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPropertyBag.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof PropertyBag && //\n      propertiesEqual(this, other))\n  );\n};\nexport default PropertyBag;\n","import ApproximateTerrainHeights from \"../Core/ApproximateTerrainHeights.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport RectangleGeometry from \"../Core/RectangleGeometry.js\";\nimport RectangleOutlineGeometry from \"../Core/RectangleOutlineGeometry.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport GroundGeometryUpdater from \"./GroundGeometryUpdater.js\";\nimport Property from \"./Property.js\";\n\nconst scratchColor = new Color();\nconst defaultOffset = Cartesian3.ZERO;\nconst offsetScratch = new Cartesian3();\nconst scratchRectangle = new Rectangle();\nconst scratchCenterRect = new Rectangle();\nconst scratchCarto = new Cartographic();\n\nfunction RectangleGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.rectangle = undefined;\n  this.height = undefined;\n  this.extrudedHeight = undefined;\n  this.granularity = undefined;\n  this.stRotation = undefined;\n  this.rotation = undefined;\n  this.offsetAttribute = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for rectangles.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias RectangleGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction RectangleGeometryUpdater(entity, scene) {\n  GroundGeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new RectangleGeometryOptions(entity),\n    geometryPropertyName: \"rectangle\",\n    observedPropertyNames: [\"availability\", \"rectangle\"],\n  });\n\n  this._onEntityPropertyChanged(\n    entity,\n    \"rectangle\",\n    entity.rectangle,\n    undefined\n  );\n}\n\nif (defined(Object.create)) {\n  RectangleGeometryUpdater.prototype = Object.create(\n    GroundGeometryUpdater.prototype\n  );\n  RectangleGeometryUpdater.prototype.constructor = RectangleGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nRectangleGeometryUpdater.prototype.createFillGeometryInstance = function (\n  time\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._fillProperty.getValue(time)\n    ),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n      this._distanceDisplayConditionProperty.getValue(time)\n    ),\n    offset: undefined,\n    color: undefined,\n  };\n\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    let currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n  }\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new RectangleGeometry(this._options),\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nRectangleGeometryUpdater.prototype.createOutlineGeometryInstance = function (\n  time\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent an outlined geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor\n  );\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._showOutlineProperty.getValue(time)\n    ),\n    color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n      distanceDisplayCondition\n    ),\n    offset: undefined,\n  };\n\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new RectangleOutlineGeometry(this._options),\n    attributes: attributes,\n  });\n};\n\nRectangleGeometryUpdater.prototype._computeCenter = function (time, result) {\n  const rect = Property.getValueOrUndefined(\n    this._entity.rectangle.coordinates,\n    time,\n    scratchCenterRect\n  );\n  if (!defined(rect)) {\n    return;\n  }\n  const center = Rectangle.center(rect, scratchCarto);\n  return Cartographic.toCartesian(center, Ellipsoid.WGS84, result);\n};\n\nRectangleGeometryUpdater.prototype._isHidden = function (entity, rectangle) {\n  return (\n    !defined(rectangle.coordinates) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, rectangle)\n  );\n};\n\nRectangleGeometryUpdater.prototype._isDynamic = function (entity, rectangle) {\n  return (\n    !rectangle.coordinates.isConstant || //\n    !Property.isConstant(rectangle.height) || //\n    !Property.isConstant(rectangle.extrudedHeight) || //\n    !Property.isConstant(rectangle.granularity) || //\n    !Property.isConstant(rectangle.stRotation) || //\n    !Property.isConstant(rectangle.rotation) || //\n    !Property.isConstant(rectangle.outlineWidth) || //\n    !Property.isConstant(rectangle.zIndex) || //\n    (this._onTerrain &&\n      !Property.isConstant(this._materialProperty) &&\n      !(this._materialProperty instanceof ColorMaterialProperty))\n  );\n};\n\nRectangleGeometryUpdater.prototype._setStaticOptions = function (\n  entity,\n  rectangle\n) {\n  const isColorMaterial =\n    this._materialProperty instanceof ColorMaterialProperty;\n\n  let heightValue = Property.getValueOrUndefined(\n    rectangle.height,\n    Iso8601.MINIMUM_VALUE\n  );\n  const heightReferenceValue = Property.getValueOrDefault(\n    rectangle.heightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE\n  );\n  let extrudedHeightValue = Property.getValueOrUndefined(\n    rectangle.extrudedHeight,\n    Iso8601.MINIMUM_VALUE\n  );\n  const extrudedHeightReferenceValue = Property.getValueOrDefault(\n    rectangle.extrudedHeightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE\n  );\n  if (defined(extrudedHeightValue) && !defined(heightValue)) {\n    heightValue = 0;\n  }\n\n  const options = this._options;\n  options.vertexFormat = isColorMaterial\n    ? PerInstanceColorAppearance.VERTEX_FORMAT\n    : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.rectangle = rectangle.coordinates.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.rectangle\n  );\n  options.granularity = Property.getValueOrUndefined(\n    rectangle.granularity,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.stRotation = Property.getValueOrUndefined(\n    rectangle.stRotation,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.rotation = Property.getValueOrUndefined(\n    rectangle.rotation,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(\n    heightValue,\n    heightReferenceValue,\n    extrudedHeightValue,\n    extrudedHeightReferenceValue\n  );\n  options.height = GroundGeometryUpdater.getGeometryHeight(\n    heightValue,\n    heightReferenceValue\n  );\n\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(\n    extrudedHeightValue,\n    extrudedHeightReferenceValue\n  );\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(\n      RectangleGeometry.computeRectangle(options, scratchRectangle)\n    ).minimumTerrainHeight;\n  }\n\n  options.extrudedHeight = extrudedHeightValue;\n};\n\nRectangleGeometryUpdater.DynamicGeometryUpdater = DynamicRectangleGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicRectangleGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives\n  );\n}\n\nif (defined(Object.create)) {\n  DynamicRectangleGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype\n  );\n  DynamicRectangleGeometryUpdater.prototype.constructor = DynamicRectangleGeometryUpdater;\n}\n\nDynamicRectangleGeometryUpdater.prototype._isHidden = function (\n  entity,\n  rectangle,\n  time\n) {\n  return (\n    !defined(this._options.rectangle) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(\n      this,\n      entity,\n      rectangle,\n      time\n    )\n  );\n};\n\nDynamicRectangleGeometryUpdater.prototype._setOptions = function (\n  entity,\n  rectangle,\n  time\n) {\n  const options = this._options;\n  let heightValue = Property.getValueOrUndefined(rectangle.height, time);\n  const heightReferenceValue = Property.getValueOrDefault(\n    rectangle.heightReference,\n    time,\n    HeightReference.NONE\n  );\n  let extrudedHeightValue = Property.getValueOrUndefined(\n    rectangle.extrudedHeight,\n    time\n  );\n  const extrudedHeightReferenceValue = Property.getValueOrDefault(\n    rectangle.extrudedHeightReference,\n    time,\n    HeightReference.NONE\n  );\n  if (defined(extrudedHeightValue) && !defined(heightValue)) {\n    heightValue = 0;\n  }\n\n  options.rectangle = Property.getValueOrUndefined(\n    rectangle.coordinates,\n    time,\n    options.rectangle\n  );\n  options.granularity = Property.getValueOrUndefined(\n    rectangle.granularity,\n    time\n  );\n  options.stRotation = Property.getValueOrUndefined(rectangle.stRotation, time);\n  options.rotation = Property.getValueOrUndefined(rectangle.rotation, time);\n  options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(\n    heightValue,\n    heightReferenceValue,\n    extrudedHeightValue,\n    extrudedHeightReferenceValue\n  );\n  options.height = GroundGeometryUpdater.getGeometryHeight(\n    heightValue,\n    heightReferenceValue\n  );\n\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(\n    extrudedHeightValue,\n    extrudedHeightReferenceValue\n  );\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(\n      RectangleGeometry.computeRectangle(options, scratchRectangle)\n    ).minimumTerrainHeight;\n  }\n\n  options.extrudedHeight = extrudedHeightValue;\n};\nexport default RectangleGeometryUpdater;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {Object} RectangleGraphics.ConstructorOptions\n *\n * Initialization options for the RectangleGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the rectangle.\n * @property {Property | Rectangle} [coordinates] The Property specifying the {@link Rectangle}.\n * @property {Property | number} [height=0] A numeric Property specifying the altitude of the rectangle relative to the ellipsoid surface.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @property {Property | number} [extrudedHeight] A numeric Property specifying the altitude of the rectangle's extruded face relative to the ellipsoid surface.\n * @property {Property | HeightReference} [extrudedHeightReference=HeightReference.NONE] A Property specifying what the extrudedHeight is relative to.\n * @property {Property | number} [rotation=0.0] A numeric property specifying the rotation of the rectangle clockwise from north.\n * @property {Property | number} [stRotation=0.0] A numeric property specifying the rotation of the rectangle texture counter-clockwise from north.\n * @property {Property | number} [granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between points on the rectangle.\n * @property {Property | boolean} [fill=true] A boolean Property specifying whether the rectangle is filled with the provided material.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to fill the rectangle.\n * @property {Property | boolean} [outline=false] A boolean Property specifying whether the rectangle is outlined.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the rectangle casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this rectangle will be displayed.\n * @property {Property | ClassificationType} [classificationType=ClassificationType.BOTH] An enum Property specifying whether this rectangle will classify terrain, 3D Tiles, or both when on the ground.\n * @property {Property | number} [zIndex=0] A Property specifying the zIndex used for ordering ground geometry.  Only has an effect if the rectangle is constant and neither height or extrudedHeight are specified.\n */\n\n/**\n * Describes graphics for a {@link Rectangle}.\n * The rectangle conforms to the curvature of the globe and can be placed on the surface or\n * at altitude and can optionally be extruded into a volume.\n *\n * @alias RectangleGraphics\n * @constructor\n *\n * @param {RectangleGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Rectangle.html|Cesium Sandcastle Rectangle Demo}\n */\nfunction RectangleGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._coordinates = undefined;\n  this._coordinatesSubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._extrudedHeight = undefined;\n  this._extrudedHeightSubscription = undefined;\n  this._extrudedHeightReference = undefined;\n  this._extrudedHeightReferenceSubscription = undefined;\n  this._rotation = undefined;\n  this._rotationSubscription = undefined;\n  this._stRotation = undefined;\n  this._stRotationSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distancedisplayConditionSubscription = undefined;\n  this._classificationType = undefined;\n  this._classificationTypeSubscription = undefined;\n  this._zIndex = undefined;\n  this._zIndexSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(RectangleGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof RectangleGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the rectangle.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Rectangle}.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property|undefined}\n   */\n  coordinates: createPropertyDescriptor(\"coordinates\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the rectangle.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  height: createPropertyDescriptor(\"height\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the rectangle extrusion.\n   * Setting this property creates volume starting at height and ending at this altitude.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property|undefined}\n   */\n  extrudedHeight: createPropertyDescriptor(\"extrudedHeight\"),\n\n  /**\n   * Gets or sets the Property specifying the extruded {@link HeightReference}.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  extrudedHeightReference: createPropertyDescriptor(\"extrudedHeightReference\"),\n\n  /**\n   * Gets or sets the numeric property specifying the rotation of the rectangle clockwise from north.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0\n   */\n  rotation: createPropertyDescriptor(\"rotation\"),\n\n  /**\n   * Gets or sets the numeric property specifying the rotation of the rectangle texture counter-clockwise from north.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0\n   */\n  stRotation: createPropertyDescriptor(\"stRotation\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between points on the rectangle.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property|undefined}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the rectangle is filled with the provided material.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the rectangle.\n   * @memberof RectangleGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the rectangle is outlined.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * <p>\n   * Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}.\n   * </p>\n   * @memberof RectangleGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the rectangle\n   * casts or receives shadows from light sources.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this rectangle will be displayed.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying whether this rectangle will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof RectangleGraphics.prototype\n   * @type {Property|undefined}\n   * @default ClassificationType.BOTH\n   */\n  classificationType: createPropertyDescriptor(\"classificationType\"),\n\n  /**\n   * Gets or sets the zIndex Property specifying the ordering of the rectangle.  Only has an effect if the rectangle is constant and neither height or extrudedHeight are specified.\n   * @memberof RectangleGraphics.prototype\n   * @type {ConstantProperty|undefined}\n   * @default 0\n   */\n  zIndex: createPropertyDescriptor(\"zIndex\"),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {RectangleGraphics} [result] The object onto which to store the result.\n * @returns {RectangleGraphics} The modified result parameter or a new instance if one was not provided.\n */\nRectangleGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new RectangleGraphics(this);\n  }\n  result.show = this.show;\n  result.coordinates = this.coordinates;\n  result.height = this.height;\n  result.heightReference = this.heightReference;\n  result.extrudedHeight = this.extrudedHeight;\n  result.extrudedHeightReference = this.extrudedHeightReference;\n  result.rotation = this.rotation;\n  result.stRotation = this.stRotation;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.classificationType = this.classificationType;\n  result.zIndex = this.zIndex;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {RectangleGraphics} source The object to be merged into this object.\n */\nRectangleGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.coordinates = defaultValue(this.coordinates, source.coordinates);\n  this.height = defaultValue(this.height, source.height);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference\n  );\n  this.extrudedHeight = defaultValue(\n    this.extrudedHeight,\n    source.extrudedHeight\n  );\n  this.extrudedHeightReference = defaultValue(\n    this.extrudedHeightReference,\n    source.extrudedHeightReference\n  );\n  this.rotation = defaultValue(this.rotation, source.rotation);\n  this.stRotation = defaultValue(this.stRotation, source.stRotation);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n  this.classificationType = defaultValue(\n    this.classificationType,\n    source.classificationType\n  );\n  this.zIndex = defaultValue(this.zIndex, source.zIndex);\n};\nexport default RectangleGraphics;\n","import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport Property from \"./Property.js\";\n\nfunction resolve(that) {\n  let targetProperty = that._targetProperty;\n\n  if (!defined(targetProperty)) {\n    let targetEntity = that._targetEntity;\n\n    if (!defined(targetEntity)) {\n      targetEntity = that._targetCollection.getById(that._targetId);\n\n      if (!defined(targetEntity)) {\n        // target entity not found\n        that._targetEntity = that._targetProperty = undefined;\n        return;\n      }\n\n      // target entity was found. listen for changes to entity definition\n      targetEntity.definitionChanged.addEventListener(\n        ReferenceProperty.prototype._onTargetEntityDefinitionChanged,\n        that\n      );\n      that._targetEntity = targetEntity;\n    }\n\n    // walk the list of property names and resolve properties\n    const targetPropertyNames = that._targetPropertyNames;\n    targetProperty = that._targetEntity;\n    for (\n      let i = 0, len = targetPropertyNames.length;\n      i < len && defined(targetProperty);\n      ++i\n    ) {\n      targetProperty = targetProperty[targetPropertyNames[i]];\n    }\n\n    // target property may or may not be defined, depending on if it was found\n    that._targetProperty = targetProperty;\n  }\n\n  return targetProperty;\n}\n\n/**\n * A {@link Property} which transparently links to another property on a provided object.\n *\n * @alias ReferenceProperty\n * @constructor\n *\n * @param {EntityCollection} targetCollection The entity collection which will be used to resolve the reference.\n * @param {String} targetId The id of the entity which is being referenced.\n * @param {String[]} targetPropertyNames The names of the property on the target entity which we will use.\n *\n * @example\n * const collection = new Cesium.EntityCollection();\n *\n * //Create a new entity and assign a billboard scale.\n * const object1 = new Cesium.Entity({id:'object1'});\n * object1.billboard = new Cesium.BillboardGraphics();\n * object1.billboard.scale = new Cesium.ConstantProperty(2.0);\n * collection.add(object1);\n *\n * //Create a second entity and reference the scale from the first one.\n * const object2 = new Cesium.Entity({id:'object2'});\n * object2.model = new Cesium.ModelGraphics();\n * object2.model.scale = new Cesium.ReferenceProperty(collection, 'object1', ['billboard', 'scale']);\n * collection.add(object2);\n *\n * //Create a third object, but use the fromString helper function.\n * const object3 = new Cesium.Entity({id:'object3'});\n * object3.billboard = new Cesium.BillboardGraphics();\n * object3.billboard.scale = Cesium.ReferenceProperty.fromString(collection, 'object1#billboard.scale');\n * collection.add(object3);\n *\n * //You can refer to an entity with a # or . in id and property names by escaping them.\n * const object4 = new Cesium.Entity({id:'#object.4'});\n * object4.billboard = new Cesium.BillboardGraphics();\n * object4.billboard.scale = new Cesium.ConstantProperty(2.0);\n * collection.add(object4);\n *\n * const object5 = new Cesium.Entity({id:'object5'});\n * object5.billboard = new Cesium.BillboardGraphics();\n * object5.billboard.scale = Cesium.ReferenceProperty.fromString(collection, '\\\\#object\\\\.4#billboard.scale');\n * collection.add(object5);\n */\nfunction ReferenceProperty(targetCollection, targetId, targetPropertyNames) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(targetCollection)) {\n    throw new DeveloperError(\"targetCollection is required.\");\n  }\n  if (!defined(targetId) || targetId === \"\") {\n    throw new DeveloperError(\"targetId is required.\");\n  }\n  if (!defined(targetPropertyNames) || targetPropertyNames.length === 0) {\n    throw new DeveloperError(\"targetPropertyNames is required.\");\n  }\n  for (let i = 0; i < targetPropertyNames.length; i++) {\n    const item = targetPropertyNames[i];\n    if (!defined(item) || item === \"\") {\n      throw new DeveloperError(\"reference contains invalid properties.\");\n    }\n  }\n  //>>includeEnd('debug');\n\n  this._targetCollection = targetCollection;\n  this._targetId = targetId;\n  this._targetPropertyNames = targetPropertyNames;\n  this._targetProperty = undefined;\n  this._targetEntity = undefined;\n  this._definitionChanged = new Event();\n\n  targetCollection.collectionChanged.addEventListener(\n    ReferenceProperty.prototype._onCollectionChanged,\n    this\n  );\n}\n\nObject.defineProperties(ReferenceProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * @memberof ReferenceProperty.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(resolve(this));\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever the referenced property's definition is changed.\n   * @memberof ReferenceProperty.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets the reference frame that the position is defined in.\n   * This property is only valid if the referenced property is a {@link PositionProperty}.\n   * @memberof ReferenceProperty.prototype\n   * @type {ReferenceFrame}\n   * @readonly\n   */\n  referenceFrame: {\n    get: function () {\n      const target = resolve(this);\n      return defined(target) ? target.referenceFrame : undefined;\n    },\n  },\n  /**\n   * Gets the id of the entity being referenced.\n   * @memberof ReferenceProperty.prototype\n   * @type {String}\n   * @readonly\n   */\n  targetId: {\n    get: function () {\n      return this._targetId;\n    },\n  },\n  /**\n   * Gets the collection containing the entity being referenced.\n   * @memberof ReferenceProperty.prototype\n   * @type {EntityCollection}\n   * @readonly\n   */\n  targetCollection: {\n    get: function () {\n      return this._targetCollection;\n    },\n  },\n  /**\n   * Gets the array of property names used to retrieve the referenced property.\n   * @memberof ReferenceProperty.prototype\n   * @type {String[]}\n   * @readonly\n   */\n  targetPropertyNames: {\n    get: function () {\n      return this._targetPropertyNames;\n    },\n  },\n  /**\n   * Gets the resolved instance of the underlying referenced property.\n   * @memberof ReferenceProperty.prototype\n   * @type {Property|undefined}\n   * @readonly\n   */\n  resolvedProperty: {\n    get: function () {\n      return resolve(this);\n    },\n  },\n});\n\n/**\n * Creates a new instance given the entity collection that will\n * be used to resolve it and a string indicating the target entity id and property.\n * The format of the string is \"objectId#foo.bar\", where # separates the id from\n * property path and . separates sub-properties.  If the reference identifier or\n * or any sub-properties contains a # . or \\ they must be escaped.\n *\n * @param {EntityCollection} targetCollection\n * @param {String} referenceString\n * @returns {ReferenceProperty} A new instance of ReferenceProperty.\n *\n * @exception {DeveloperError} invalid referenceString.\n */\nReferenceProperty.fromString = function (targetCollection, referenceString) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(targetCollection)) {\n    throw new DeveloperError(\"targetCollection is required.\");\n  }\n  if (!defined(referenceString)) {\n    throw new DeveloperError(\"referenceString is required.\");\n  }\n  //>>includeEnd('debug');\n\n  let identifier;\n  const values = [];\n\n  let inIdentifier = true;\n  let isEscaped = false;\n  let token = \"\";\n  for (let i = 0; i < referenceString.length; ++i) {\n    const c = referenceString.charAt(i);\n\n    if (isEscaped) {\n      token += c;\n      isEscaped = false;\n    } else if (c === \"\\\\\") {\n      isEscaped = true;\n    } else if (inIdentifier && c === \"#\") {\n      identifier = token;\n      inIdentifier = false;\n      token = \"\";\n    } else if (!inIdentifier && c === \".\") {\n      values.push(token);\n      token = \"\";\n    } else {\n      token += c;\n    }\n  }\n  values.push(token);\n\n  return new ReferenceProperty(targetCollection, identifier, values);\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nReferenceProperty.prototype.getValue = function (time, result) {\n  const target = resolve(this);\n  return defined(target) ? target.getValue(time, result) : undefined;\n};\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n * This method is only valid if the property being referenced is a {@link PositionProperty}.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nReferenceProperty.prototype.getValueInReferenceFrame = function (\n  time,\n  referenceFrame,\n  result\n) {\n  const target = resolve(this);\n  return defined(target)\n    ? target.getValueInReferenceFrame(time, referenceFrame, result)\n    : undefined;\n};\n\n/**\n * Gets the {@link Material} type at the provided time.\n * This method is only valid if the property being referenced is a {@link MaterialProperty}.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nReferenceProperty.prototype.getType = function (time) {\n  const target = resolve(this);\n  return defined(target) ? target.getType(time) : undefined;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nReferenceProperty.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  }\n\n  const names = this._targetPropertyNames;\n  const otherNames = other._targetPropertyNames;\n\n  if (\n    this._targetCollection !== other._targetCollection || //\n    this._targetId !== other._targetId || //\n    names.length !== otherNames.length\n  ) {\n    return false;\n  }\n\n  const length = this._targetPropertyNames.length;\n  for (let i = 0; i < length; i++) {\n    if (names[i] !== otherNames[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nReferenceProperty.prototype._onTargetEntityDefinitionChanged = function (\n  targetEntity,\n  name,\n  value,\n  oldValue\n) {\n  if (defined(this._targetProperty) && this._targetPropertyNames[0] === name) {\n    this._targetProperty = undefined;\n    this._definitionChanged.raiseEvent(this);\n  }\n};\n\nReferenceProperty.prototype._onCollectionChanged = function (\n  collection,\n  added,\n  removed\n) {\n  let targetEntity = this._targetEntity;\n  if (defined(targetEntity) && removed.indexOf(targetEntity) !== -1) {\n    targetEntity.definitionChanged.removeEventListener(\n      ReferenceProperty.prototype._onTargetEntityDefinitionChanged,\n      this\n    );\n    this._targetEntity = this._targetProperty = undefined;\n  } else if (!defined(targetEntity)) {\n    targetEntity = resolve(this);\n    if (defined(targetEntity)) {\n      this._definitionChanged.raiseEvent(this);\n    }\n  }\n};\nexport default ReferenceProperty;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport CesiumMath from \"../Core/Math.js\";\n\n/**\n * Represents a {@link Packable} number that always interpolates values\n * towards the shortest angle of rotation. This object is never used directly\n * but is instead passed to the constructor of {@link SampledProperty}\n * in order to represent a two-dimensional angle of rotation.\n *\n * @interface Rotation\n *\n *\n * @example\n * const time1 = Cesium.JulianDate.fromIso8601('2010-05-07T00:00:00');\n * const time2 = Cesium.JulianDate.fromIso8601('2010-05-07T00:01:00');\n * const time3 = Cesium.JulianDate.fromIso8601('2010-05-07T00:02:00');\n *\n * const property = new Cesium.SampledProperty(Cesium.Rotation);\n * property.addSample(time1, 0);\n * property.addSample(time3, Cesium.Math.toRadians(350));\n *\n * //Getting the value at time2 will equal 355 degrees instead\n * //of 175 degrees (which is what you get if you construct\n * //a SampledProperty(Number) instead.  Note, the actual\n * //return value is in radians, not degrees.\n * property.getValue(time2);\n *\n * @see PackableForInterpolation\n */\nconst Rotation = {\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  packedLength: 1,\n\n  /**\n   * Stores the provided instance into the provided array.\n   *\n   * @param {Rotation} value The value to pack.\n   * @param {Number[]} array The array to pack into.\n   * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n   *\n   * @returns {Number[]} The array that was packed into\n   */\n  pack: function (value, array, startingIndex) {\n    //>>includeStart('debug', pragmas.debug);\n    if (!defined(value)) {\n      throw new DeveloperError(\"value is required\");\n    }\n\n    if (!defined(array)) {\n      throw new DeveloperError(\"array is required\");\n    }\n    //>>includeEnd('debug');\n\n    startingIndex = defaultValue(startingIndex, 0);\n    array[startingIndex] = value;\n\n    return array;\n  },\n\n  /**\n   * Retrieves an instance from a packed array.\n   *\n   * @param {Number[]} array The packed array.\n   * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n   * @param {Rotation} [result] The object into which to store the result.\n   * @returns {Rotation} The modified result parameter or a new Rotation instance if one was not provided.\n   */\n  unpack: function (array, startingIndex, result) {\n    //>>includeStart('debug', pragmas.debug);\n    if (!defined(array)) {\n      throw new DeveloperError(\"array is required\");\n    }\n    //>>includeEnd('debug');\n\n    startingIndex = defaultValue(startingIndex, 0);\n    return array[startingIndex];\n  },\n\n  /**\n   * Converts a packed array into a form suitable for interpolation.\n   *\n   * @param {Number[]} packedArray The packed array.\n   * @param {Number} [startingIndex=0] The index of the first element to be converted.\n   * @param {Number} [lastIndex=packedArray.length] The index of the last element to be converted.\n   * @param {Number[]} [result] The object into which to store the result.\n   */\n  convertPackedArrayForInterpolation: function (\n    packedArray,\n    startingIndex,\n    lastIndex,\n    result\n  ) {\n    //>>includeStart('debug', pragmas.debug);\n    if (!defined(packedArray)) {\n      throw new DeveloperError(\"packedArray is required\");\n    }\n    //>>includeEnd('debug');\n\n    if (!defined(result)) {\n      result = [];\n    }\n\n    startingIndex = defaultValue(startingIndex, 0);\n    lastIndex = defaultValue(lastIndex, packedArray.length);\n\n    let previousValue;\n    for (let i = 0, len = lastIndex - startingIndex + 1; i < len; i++) {\n      const value = packedArray[startingIndex + i];\n      if (i === 0 || Math.abs(previousValue - value) < Math.PI) {\n        result[i] = value;\n      } else {\n        result[i] = value - CesiumMath.TWO_PI;\n      }\n      previousValue = value;\n    }\n  },\n\n  /**\n   * Retrieves an instance from a packed array converted with {@link Rotation.convertPackedArrayForInterpolation}.\n   *\n   * @param {Number[]} array The array previously packed for interpolation.\n   * @param {Number[]} sourceArray The original packed array.\n   * @param {Number} [firstIndex=0] The firstIndex used to convert the array.\n   * @param {Number} [lastIndex=packedArray.length] The lastIndex used to convert the array.\n   * @param {Rotation} [result] The object into which to store the result.\n   * @returns {Rotation} The modified result parameter or a new Rotation instance if one was not provided.\n   */\n  unpackInterpolationResult: function (\n    array,\n    sourceArray,\n    firstIndex,\n    lastIndex,\n    result\n  ) {\n    //>>includeStart('debug', pragmas.debug);\n    if (!defined(array)) {\n      throw new DeveloperError(\"array is required\");\n    }\n    if (!defined(sourceArray)) {\n      throw new DeveloperError(\"sourceArray is required\");\n    }\n    //>>includeEnd('debug');\n\n    result = array[0];\n    if (result < 0) {\n      return result + CesiumMath.TWO_PI;\n    }\n    return result;\n  },\n};\nexport default Rotation;\n"],"names":["emptyArray","geometryUpdaters","GeometryUpdaterSet","entity","scene","this","updaters","Array","length","geometryChanged","raiseEvent","geometry","eventHelper","i","updater","add","_removeEntitySubscription","definitionChanged","addEventListener","prototype","_onEntityPropertyChanged","GeometryVisualizer","entityCollection","primitives","groundPrimitives","_scene","_primitives","_groundPrimitives","_entityCollection","undefined","_addedObjects","_removedObjects","_changedObjects","numberOfShadowModes","_outlineBatches","_closedColorBatches","_closedMaterialBatches","_openColorBatches","_openMaterialBatches","supportsMaterialsforEntitiesOnTerrain","_supportsMaterialsforEntitiesOnTerrain","numberOfClassificationTypes","groundColorBatches","groundMaterialBatches","push","_groundColorBatches","_groundMaterialBatches","_dynamicBatch","_batches","concat","_subscriptions","_updaterSets","collectionChanged","_onCollectionChanged","values","propertyName","newValue","oldValue","forEach","callback","destroy","removeAll","update","time","addedObjects","added","removedObjects","removed","changedObjects","changed","id","updaterSet","that","get","_removeUpdater","_insertUpdaterIntoBatch","bind","remove","set","_onGeometryChanged","isUpdated","batches","getBoundingSphereArrayScratch","getBoundingSphereBoundingSphereScratch","getBoundingSphere","result","boundingSpheres","tmp","count","state","batchesLength","j","isDestroyed","removeEventListener","removeAllPrimitives","subscriptions","updaterSets","isDynamic","shadows","outlineEnabled","fillEnabled","shadowsProperty","getValue","terrainOffsetProperty","onTerrain","classificationType","classificationTypeProperty","fillMaterialProperty","isClosed","parser","DOMParser","autolinker","stripPrefix","email","replaceFn","linker","match","protocolUrlMatch","BILLBOARD_NEAR_DISTANCE","BILLBOARD_FAR_DISTANCE","namespaces","gpx","getOrCreateEntity","node","queryStringAttribute","readCoordinateFromNode","longitude","queryNumericAttribute","latitude","elevation","queryNumericValue","attributeName","value","getAttribute","parseFloat","isNaN","queryFirstNode","tagName","namespace","childNodes","q","child","localName","indexOf","namespaceURI","queryNodes","getElementsByTagName","resultNode","textContent","queryStringValue","trim","createDefaultBillboard","image","billboard","width","height","scaleByDistance","pixelOffsetScaleByDistance","verticalOrigin","createDefaultPolyline","color","polyline","material","outlineWidth","outlineColor","descriptiveInfoTypes","text","tag","comment","description","source","number","type","scratchDiv","processDescription","infoTypeNames","Object","keys","infoTypeName","infoType","link","innerHTML","links","querySelectorAll","setAttribute","background","foreground","toCssColorString","processWpt","dataSource","geometryNode","options","position","waypointImage","_pinBuilder","fromMakiIconId","name","label","translucencyByDistance","pixelOffset","horizontalOrigin","font","style","createDefaultLabel","clampToGround","heightReference","processTrkSeg","positions","times","trackPoints","getPerson","personNode","person","getEmail","getLink","emailNode","linkNode","href","mimeType","getCopyright","copyrightNode","copyright","author","year","license","getBounds","boundsNode","bounds","minLat","maxLat","minLon","maxLon","document","createElement","complexTypes","wpt","rte","routePoints","coordinateTuples","routeColor","trk","trackSegs","trackSegInfo","isTimeDynamic","property","addSamples","availability","addInterval","start","stop","trackColor","loadGpx","element","documentElement","version","creator","metadata","metadataNode","desc","keywords","processMetadata","clock","complexTypeNames","complexTypeNamesLength","typeName","processComplexTypeNode","processGpx","computeAvailability","isMinStart","isMaxStop","date","Date","setHours","startTime","stopTime","currentTime","clockRange","clockStep","multiplier","Math","round","min","max","_name","_creator","old","current","dec","src","metadataChanged","_metadata","_version","_clock","_changed","load","data","promise","fetchBlob","resourceCredits","_resourceCredits","credits","Promise","resolve","then","dataToLoad","Blob","blob","deferred","reader","FileReader","reject","error","readAsText","readBlobAsText","parseFromString","e","toString","body","msg","firstChild","nodeValue","innerText","catch","_error","GpxDataSource","_loading","_entityCluster","_isLoading","defineProperties","entities","isLoading","changedEvent","errorEvent","loadingEvent","show","clustering","oldName","defaultColor","defaultLineCount","defaultLineOffset","defaultLineThickness","GridMaterialProperty","_definitionChanged","_color","_colorSubscription","_cellAlpha","_cellAlphaSubscription","_lineCount","_lineCountSubscription","_lineThickness","_lineThicknessSubscription","_lineOffset","_lineOffsetSubscription","cellAlpha","lineCount","lineThickness","lineOffset","isConstant","getType","equals","other","defaultZIndex","GroundGeometryUpdater","_zIndex","_terrainOffsetProperty","create","constructor","zIndex","_isOnTerrain","_fillEnabled","extrudedHeight","_getIsClosed","_computeCenter","_observedPropertyNames","_entity","_geometryPropertyName","heightReferenceProperty","extrudedHeightReferenceProperty","extrudedHeightReference","centerPosition","_dynamic","getGeometryHeight","getGeometryExtrudedHeight","CLAMP_TO_GROUND","computeGeometryOffsetAttribute","n","defaultRepeat","ImageMaterialProperty","_image","_imageSubscription","_repeat","_repeatSubscription","_transparent","_transparentSubscription","repeat","transparent","alpha","headingPitchRoll","MimeTypes","avi","bmp","bz2","chm","css","csv","doc","dvi","eps","flv","gif","gz","htm","html","ico","jnlp","jpeg","jpg","m3u","m4v","mathml","mid","midi","mov","mp3","mp4","mp4v","mpeg","mpg","odp","ods","odt","ogg","pdf","png","pps","ppt","ps","qt","rdf","rss","rtf","svg","swf","tif","tiff","txt","wav","wma","wmv","xml","zip","detectFromFilename","filename","ext","toLowerCase","BILLBOARD_SIZE","kmlNamespaces","gxNamespaces","kml","gx","atom","kmlgx","featureTypes","Document","processDocument","Folder","processingData","deferredLoading","r","processFeature","newProcessingData","parentEntity","Placemark","placemark","styleEntity","hasGeometry","len","childNode","item","geometryProcessor","geometryTypes","merge","processPositionGraphics","NetworkLink","networkEntity","sourceResource","uriResolver","viewRefreshMode","viewBoundScale","newSourceUri","resolveHref","test","getUrlComponent","getDerivedResource","url","clone","defaultViewFormat","viewFormat","httpQuery","setQueryParameters","cleanupString","ellipsoid","_ellipsoid","processNetworkLinkQueryString","camera","canvas","_lastCameraView","bbox","sourceUri","context","screenOverlayContainer","networkLinkCollection","rootElement","newEntities","suspendEvents","newEntity","parent","mergeAvailabilityWithParent","resumeEvents","refreshMode","refreshInterval","networkLinkControl","hasNetworkLinkControl","now","networkLinkInfo","cookie","lastUpdated","updating","needsUpdate","cameraUpdateTime","minRefreshPeriod","RefreshMode","expires","diff","_networkLinks","addPromise","GroundOverlay","groundOverlay","isLatLonQuad","readCoordinates","createDefaultPolygon","hierarchy","polygon","rectangle","latLonBox","west","south","east","north","coordinates","rotation","rotationRadians","stRotation","iconNode","getIconHref","x","y","w","h","queryColorValue","altitudeMode","PhotoOverlay","processUnsupportedFeature","ScreenOverlay","screenOverlayNode","screenOverlay","icon","img","_screenOverlays","onload","styles","screenXY","overlayXY","size","xUnit","yUnit","xStyle","yStyle","floor","join","xOrigin","yOrigin","appendChild","Tour","tour","playlistNode","entryNode","playlistNodeProcessor","playlistNodeProcessors","_kmlTours","DeferredLoading","_dataSource","_deferred","_stack","_promises","_timeoutSet","_used","_started","_timeThreshold","insertNamespaces","namespaceMap","xsi","firstPart","lastPart","reg","declaration","key","hasOwnProperty","RegExp","substr","removeDuplicateNamespaces","index","endDeclaration","startIndex","endIndex","slice","loadDataUriFromZip","entry","getData","dataUri","embedDataUris","div","elementType","baseUri","elements","uri","absoluteTo","applyBasePath","resource","createEntity","getById","addProperty","KmlFeatureData","isExtrudable","gxAltitudeMode","readCoordinate","digits","tuples","resultIndex","getElementsByTagNameNS","queryChildNodes","queryBooleanValue","replace","addNodes","nodes","wait","all","process","isFirstCall","KmlDataSource","_getTimestamp","_process","_giveUpTime","setTimeout","_nextNode","stack","top","_pop","pop","featureProcessor","colorOptions","maximumRed","red","maximumGreen","green","maximumBlue","blue","parseColorString","isRandom","substring","parseInt","outline","canRefresh","palette","charAt","hrefResource","processBillboardIcon","targetEntity","scale","heading","hotSpotNode","hotSpotX","hotSpotY","hotSpotXUnit","hotSpotYUnit","xOffset","yOffset","imageSubRegion","alignedAxis","applyStyle","styleNode","fillColor","fill","bgColor","textColor","balloonStyle","listItemType","processExternalStyles","styleCollection","fetchXML","styleKml","processStyles","isExternal","styleNodes","styleNodesLength","styleMaps","styleMapsLength","styleMap","pairs","p","pair","styleUrl","base","promises","styleUrlNodes","styleUrlNodesLength","styleReference","tokens","split","createDropLine","entityPosition","surfacePosition","heightReferenceFromAltitudeMode","createPositionPropertyFromAltitudeMode","fromColor","_clampToGround","processPathGraphics","path","leadTime","processLineStringOrLinearRing","coordinatesNode","extrude","tessellate","canExtrude","wall","polylineGraphics","properties","propertiesLength","scaleToGeodeticSurface","createPositionPropertyArrayFromAltitudeMode","arcType","addToMultiTrack","composite","dropShowProperty","includeEndPoints","intervals","isStartIncluded","isStopIncluded","Point","coordinatesString","LineString","LinearRing","Polygon","outerBoundaryIsNode","linearRingNode","perPositionHeight","innerBoundaryIsNodes","k","holes","Track","coordNodes","angleNodes","timeNodes","MultiTrack","interpolate","trackNodes","lastStop","lastStopPosition","needDropLine","trackNode","MultiGeometry","childEntity","Model","featureNode","kmlData","placeMark","styleIndex","inlineStyleNode","externalStyle","computeFinalStyle","beginNode","beginDate","endNode","endDate","processTimeSpan","whenString","when","processTimeStamp","visibility","ancestryIsVisible","authorNode","hreflang","rel","title","address","phoneNumber","snippet","extendedDataNode","dataNodes","dataNode","displayName","extendedData","processExtendedData","matches","token","isDisplayName","processLookAt","processCamera","FlyTo","duration","flyToMode","t","view","lookAt","flyto","addPlaylistEntry","Wait","SoundCue","processTourUnsupportedNode","AnimatedUpdate","TourControl","lon","lat","altitude","tilt","roll","hpr","range","viewPoint","_unsupportedNode","nodeName","s","sFirst","zeroRectangle","scratchCartographic","scratchCartesian2","scratchCartesian3","fixLatitude","fixLongitude","queryString","queryParameters","_mode","centerCartesian","centerCartographic","clientWidth","clientHeight","pickEllipsoid","cartesianToCartographic","cartographicToCartesian","newHalfWidth","newHalfHeight","pitch","positionWC","frustum","aspectRatio","horizFov","vertFov","fov","loadKml","_DeferredLoading","processFeatureNode","loadKmz","zWorkerUrl","workerScripts","deflate","inflate","getEntries","entries","docEntry","directory","loadXmlFromZip","close","magicBlob","DataView","getUint32","readAsArrayBuffer","isZipFile","isZip","_refresh","direction","directionWC","up","upWC","computeViewRectangle","credit","_credit","parentAvailability","childAvailability","intersect","refreshEvent","unsupportedNodeEvent","kmlTours","entitiesToIgnore","networkLinks","recurseIgnoreEntities","children","_children","cameraViewUpdate","lastCameraView","equalsEpsilon","newNetworkLinks","networkLink","contains","doUpdate","newEntityCollection","processedHref","networkLinkEntity","removeChildren","entitiesCopy","entityToRemove","getNetworkLinkUpdateCallback","headingPitchRange","KmlTour","playlistIndex","playlist","tourStart","tourEnd","entryStart","entryEnd","_activeEntries","cancelAllEntries","activeEntries","playEntry","viewer","cameraOptions","allDone","_playNext","playNext","blocking","play","indx","splice","terminated","call","KmlTourFlyTo","activeCamera","activeCallback","done","self","getCameraOptions","flyTo","target","flyToBoundingSphere","cancelFlight","complete","easingFunction","destination","orientation","offset","KmlTourWait","timeout","clearTimeout","LabelGraphics","_show","_showSubscription","_text","_textSubscription","_font","_fontSubscription","_style","_styleSubscription","_scale","_scaleSubscription","_showBackground","_showBackgroundSubscription","_backgroundColor","_backgroundColorSubscription","_backgroundPadding","_backgroundPaddingSubscription","_pixelOffset","_pixelOffsetSubscription","_eyeOffset","_eyeOffsetSubscription","_horizontalOrigin","_horizontalOriginSubscription","_verticalOrigin","_verticalOriginSubscription","_heightReference","_heightReferenceSubscription","_fillColor","_fillColorSubscription","_outlineColor","_outlineColorSubscription","_outlineWidth","_outlineWidthSubscription","_translucencyByDistance","_translucencyByDistanceSubscription","_pixelOffsetScaleByDistance","_pixelOffsetScaleByDistanceSubscription","_scaleByDistance","_scaleByDistanceSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubscription","_disableDepthTestDistance","_disableDepthTestDistanceSubscription","showBackground","backgroundColor","backgroundPadding","eyeOffset","distanceDisplayCondition","disableDepthTestDistance","defaultStyle","defaultFillColor","defaultOutlineColor","defaultBackgroundColor","defaultBackgroundPadding","defaultPixelOffset","defaultEyeOffset","defaultHeightReference","defaultHorizontalOrigin","defaultVerticalOrigin","positionScratch","fillColorScratch","outlineColorScratch","backgroundColorScratch","backgroundPaddingScratch","eyeOffsetScratch","pixelOffsetScratch","translucencyByDistanceScratch","pixelOffsetScaleByDistanceScratch","scaleByDistanceScratch","distanceDisplayConditionScratch","EntityData","LabelVisualizer","entityCluster","_cluster","_items","returnPrimitive","cluster","removeLabel","items","labelGraphics","_label","isShowing","isAvailable","_position","_clusterDirty","updateClamping","getLabel","_updateClamping","center","_clampedPosition","radius","MaterialProperty","materialProperty","uniforms","createNodeTransformationProperty","ModelGraphics","_uri","_uriSubscription","_minimumPixelSize","_minimumPixelSizeSubscription","_maximumScale","_maximumScaleSubscription","_incrementallyLoadTextures","_incrementallyLoadTexturesSubscription","_runAnimations","_runAnimationsSubscription","_clampAnimations","_clampAnimationsSubscription","_shadows","_shadowsSubscription","_silhouetteColor","_silhouetteColorSubscription","_silhouetteSize","_silhouetteSizeSubscription","_colorBlendMode","_colorBlendModeSubscription","_colorBlendAmount","_colorBlendAmountSubscription","_imageBasedLightingFactor","_imageBasedLightingFactorSubscription","_lightColor","_lightColorSubscription","_nodeTransformations","_nodeTransformationsSubscription","_articulations","_articulationsSubscription","_clippingPlanes","_clippingPlanesSubscription","minimumPixelSize","maximumScale","incrementallyLoadTextures","runAnimations","clampAnimations","silhouetteColor","silhouetteSize","colorBlendMode","colorBlendAmount","imageBasedLightingFactor","lightColor","nodeTransformations","articulations","clippingPlanes","sourceNodeTransformations","targetNodeTransformations","sourceArticulations","targetArticulations","defaultShadows","defaultSilhouetteColor","defaultColorBlendMode","defaultImageBasedLightingFactor","modelMatrixScratch","nodeMatrixScratch","ModelVisualizer","_modelHash","_entitiesToVisualize","removeModel","visualizer","modelHash","modelData","removeAndDestroy","modelPrimitive","clearNodeTransformationsArticulationsScratch","nodeTransformationsScratch","articulationsScratch","checkModelLoad","model","readyPromise","loadFail","modelGraphics","_model","modelMatrix","computeModelMatrix","animationsRunning","imageBasedLighting","ready","activeAnimations","addAll","loop","nodeNames","nodeIndex","nodeLength","nodeTransformation","modelNode","getNode","transformationMatrix","matrix","originalMatrix","anyArticulationUpdated","articulationStageKeys","numKeys","articulationStageValue","setArticulationStage","applyArticulations","boundingSphereInternal","_clampedModelMatrix","defaultNodeTransformation","NodeTransformationProperty","_translation","_translationSubscription","_rotation","_rotationSubscription","translation","PathGraphics","_leadTime","_leadTimeSubscription","_trailTime","_trailTimeSubscription","_width","_widthSubscription","_resolution","_resolutionSubscription","_material","_materialSubscription","trailTime","resolution","scratchTimeInterval","subSampleCompositePropertyScratch","subSampleIntervalPropertyScratch","reallySubSample","updateTime","referenceFrame","maximumStep","resolvedProperty","startingIndex","getValueInReferenceFrame","steppedOnNow","loopStop","sampleStepsToTake","sampleStepsTaken","sampleStepSize","sampling","next","secondsUntilNext","ceil","subSampleSampledProperty","_property","_times","interval","isEmpty","intervalStart","intervalStop","sampleStart","sampleStop","subSampleCompositeProperty","subSampleIntervalProperty","subSampleConstantProperty","stepSize","subSampleGenericProperty","subSample","toFixedScratch","PolylineUpdater","_unusedIndexes","_polylineCollection","_referenceFrame","PathVisualizer","_updaters","toFixed","updateObject","pathGraphics","_path","positionProperty","showProperty","_availability","hasAvailability","hasLeadTime","hasTrailTime","unusedIndexes","removeObject","u","lastUpdater","frameToVisualize","mode","currentUpdater","_subSample","scratchColor","PlaneGeometryOptions","vertexFormat","plane","dimensions","PlaneGeometryUpdater","geometryOptions","geometryPropertyName","observedPropertyNames","DynamicPlaneGeometryUpdater","geometryUpdater","createFillGeometryInstance","attributes","_showProperty","_fillProperty","_distanceDisplayConditionProperty","distanceDisplayConditionAttribute","_materialProperty","currentColor","planeGraphics","_options","createPrimitiveMatrix","createOutlineGeometryInstance","_outlineEnabled","_outlineColorProperty","_showOutlineProperty","_isHidden","_isDynamic","_setStaticOptions","isColorMaterial","DynamicGeometryUpdater","_setOptions","scratchAxis","scratchUp","scratchTranslation","scratchScale","scratchRotation","scratchRotationScale","scratchLocalTransform","transform","normal","distance","abs","left","rotationMatrix","rotationScaleMatrix","localTransform","PlaneGraphics","_plane","_planeSubscription","_dimensions","_dimensionsSubscription","_fill","_fillSubscription","_outline","_outlineSubscription","PointGraphics","_pixelSize","_pixelSizeSubscription","pixelSize","colorScratch","pointPrimitive","PointVisualizer","removePoint","removeBillboard","pointGraphics","_point","needsRedraw","getPoint","getBillboard","newColor","newOutlineColor","newOutlineWidth","newPixelSize","centerAlpha","cssColor","cssOutlineColor","textureId","JSON","stringify","setImage","heightAndPerPositionHeightWarning","heightReferenceAndPerPositionHeightWarning","defaultOffset","offsetScratch","scratchRectangle","scratch2DPositions","cart2Scratch","PolygonGeometryOptions","polygonHierarchy","closeTop","closeBottom","granularity","offsetAttribute","textureCoordinates","PolygonGeometryUpdater","DyanmicPolygonGeometryUpdater","mapProjection","tangentPlane","positions2D","projectPointsOntoPlane","area","centroid2D","p1","p2","f","sum","a","projectPointOntoEllipsoid","perPositionHeightProperty","perPositionHeightEnabled","_onTerrain","hierarchyValue","heightValue","heightReferenceValue","extrudedHeightValue","extrudedHeightReferenceValue","perPositionHeightValue","minimumTerrainHeight","isExtruded","PolygonGraphics","_hierarchy","_hierarchySubscription","_height","_heightSubscription","_extrudedHeight","_extrudedHeightSubscription","_extrudedHeightReference","_extrudedHeightReferenceSubscription","_stRotation","_stRotationSubscription","_granularity","_granularitySubscription","_perPositionHeight","_perPositionHeightSubscription","_closeTop","_closeTopSubscription","_closeBottom","_closeBottomSubscription","_arcType","_arcTypeSubscription","_classificationType","_classificationTypeSubscription","_zIndexSubscription","_textureCoordinates","_textureCoordinatesSubscription","isArray","PolylineArrowMaterialProperty","defaultGapColor","PolylineDashMaterialProperty","_gapColor","_gapColorSubscription","_dashLength","_dashLengthSubscription","_dashPattern","_dashPatternSubscription","gapColor","dashLength","dashPattern","polylineCollections","defaultMaterial","defaultShow","defaultDistanceDisplayCondition","defaultClassificationType","GeometryOptions","GroundGeometryOptions","PolylineGeometryUpdater","_entitySubscription","_geometryChanged","_shadowsProperty","_classificationTypeProperty","_depthFailMaterialProperty","_geometryOptions","_groundGeometryOptions","_id","_supportsPolylinesOnTerrain","hasConstantFill","depthFailMaterialProperty","hasConstantOutline","outlineColorProperty","distanceDisplayConditionProperty","isOutlineVisible","isFilled","visible","depthFailColor","positionsProperty","depthFailMaterial","groundGeometryOptions","createDynamicUpdater","generateCartesianArcOptions","_line","_groundPolylinePrimitive","_geometryUpdater","_positions","getLine","dynamicGeometryUpdater","sceneId","polylineCollection","line","appearance","translucent","isTranslucent","geometryInstances","asynchronous","globe","groundPolylinePrimitive","getGeometryInstanceAttributes","boundingSphere","PolylineGlowMaterialProperty","_glowPower","_glowPowerSubscription","_taperPower","_taperPowerSubscription","glowPower","taperPower","_glow","PolylineGraphics","_positionsSubscription","_depthFailMaterial","_depthFailMaterialSubscription","_clampToGroundSubscription","PolylineOutlineMaterialProperty","removeUpdater","insertUpdaterIntoBatch","_groundBatches","_colorBatches","_materialBatches","PolylineVisualizer","PolylineVolumeGeometryOptions","polylinePositions","shapePositions","cornerType","PolylineVolumeGeometryUpdater","polylineVolume","DynamicPolylineVolumeGeometryUpdater","shape","PolylineVolumeGraphics","_shape","_shapeSubscription","_cornerType","_cornerTypeSubscription","_distanceDisplayConditionSubsription","PositionProperty","scratchMatrix3","convertToReferenceFrame","inputFrame","outputFrame","icrfToFixed","PositionPropertyArray","_value","_eventHelper","setValue","itemValue","_raiseDefinitionChanged","Property","right","arrayEquals","getValueOrUndefined","getValueOrDefault","valueDefault","getValueOrClonedDefault","PropertyArray","PropertyBag","createPropertyCallback","_propertyNames","createConstantProperty","propertyNames","hasProperty","defineProperty","removeProperty","sourcePropertyNames","targetProperty","sourceProperty","b","aPropertyNames","bPropertyNames","aIndex","propertiesEqual","scratchCenterRect","scratchCarto","RectangleGeometryOptions","RectangleGeometryUpdater","DynamicRectangleGeometryUpdater","rect","RectangleGraphics","_coordinates","_coordinatesSubscription","_distancedisplayConditionSubscription","_targetProperty","_targetEntity","_targetCollection","_targetId","ReferenceProperty","_onTargetEntityDefinitionChanged","targetPropertyNames","_targetPropertyNames","targetCollection","targetId","fromString","referenceString","identifier","inIdentifier","isEscaped","c","names","otherNames","collection","packedLength","pack","array","unpack","convertPackedArrayForInterpolation","packedArray","lastIndex","previousValue","PI","unpackInterpolationResult","sourceArray","firstIndex"],"sourceRoot":""}