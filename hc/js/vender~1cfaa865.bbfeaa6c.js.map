{"version":3,"file":"js/vender~1cfaa865.bbfeaa6c.js","mappings":"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ACbzQ,EACAwd,EACA7X,GAEFsd,GACE/D,OACAyE,EACA,SACAE,EAAapZ,YACbzK,EACAwd,EACA7X,GAEFsd,GACE/D,OACAyE,EACA,SACAE,EAAanT,YACb1Q,EACAwd,EACA7X,KAEO,OAAQ+W,EAAW+H,kBACtBd,aAA4B,OAChCA,EAAmB,IAAI,MAEzBE,EAAenH,EAAW+H,gBAC1BxB,GACE,IACAU,EACA,QACAE,EAAavgB,WACbtD,EACAwd,EACA7X,GAEFsd,GACE,IACAU,EACA,eACAE,EAAatY,kBACbvL,EACAwd,EACA7X,GAEFsd,GACE/D,OACAyE,EACA,eACAE,EAAa/X,kBACb9L,EACAwd,EACA7X,KAEO,OAAQ+W,EAAWgI,eACtBf,aAA4B,OAChCA,EAAmB,IAAI,MAEzBE,EAAenH,EAAWgI,aAC1BzB,GACE,IACAU,EACA,QACAE,EAAavgB,WACbtD,EACAwd,EACA7X,GAEFsd,GACE/D,OACAyE,EACA,YACAE,EAAac,eACb3kB,EACAwd,EACA7X,GAEFsd,GACE/D,OACAyE,EACA,aACAE,EAAae,gBACb5kB,EACAwd,EACA7X,KAEO,OAAQ+W,EAAWmI,gBACtBlB,aAA4B,OAChCA,EAAmB,IAAI,MAEzBE,EAAenH,EAAWmI,cAC1B5B,GACE,IACAU,EACA,QACAE,EAAavgB,WACbtD,OACAA,EACA2F,KAEO,OAAQ+W,EAAWoI,eACtBnB,aAA4B,OAChCA,EAAmB,IAAI,MAEzBE,EAAenH,EAAWoI,aAC1B7B,GACE,IACAU,EACA,QACAE,EAAavgB,WACbtD,OACAA,EACA2F,GAEFsd,GACE,IACAU,EACA,WACAE,EAAakB,cACb/kB,OACAA,EACA2F,GAEFsd,GACE/D,OACAyE,EACA,aACAE,EAAamB,gBACbhlB,EACAwd,EACA7X,GAEFsd,GACE/D,OACAyE,EACA,cACAE,EAAaoB,iBACbjlB,EACAwd,EACA7X,KAEO,OAAQ+W,EAAWwI,gBACtBvB,aAA4B,MAChCA,EAAmB,IAAI,KAEzBE,EAAenH,EAAWwI,aAC1BjC,GACE,IACAU,EACA,YACAE,EAAarT,eACbxQ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ACA3Z,EACA,QACAmlB,EAAc1nB,MACdkU,EACAsG,EACA7X,GAEFsd,GACE,IACA1d,EACA,cACAmlB,EAAcznB,YACdiU,EACAsG,EACA7X,GAEFsd,GACE,IACA1d,EACA,YACAmlB,EAAcxnB,UACdgU,EACAsG,EACA7X,GAEFsd,GACE,IACA1d,EACA,mBACAmlB,EAAcvnB,iBACd+T,EACAsG,EACA7X,GAEFsd,GACE,IACA1d,EACA,iBACAmlB,EAActnB,eACd8T,EACAsG,EACA7X,GAEFsd,GACE,IACA1d,EACA,kBACAmlB,EAAcrnB,gBACd6T,EACAsG,EACA7X,GAEFsd,GACE,IACA1d,EACA,QACAmlB,EAAcpnB,MACd4T,EACAsG,EACA7X,GAEFsd,GACE,KACA1d,EACA,WACAmlB,EAAcnnB,SACd2T,EACAsG,EACA7X,GA1HJ,SACEJ,EACAmX,EACAxF,EACAsG,EACA7X,IAEK,OAAQ+W,IAIbuG,GACE7G,GACA7W,EACA,cACAmX,EACAxF,EACAsG,EACA7X,GA0GFglB,CACEplB,EACAmlB,EAAclnB,YACd0T,EACAsG,EACA7X,GAEFsd,GACEhE,QACA1Z,EACA,eACAmlB,EAAcjnB,aACdyT,EACAsG,EACA7X,GAEFsd,GACE/D,OACA3Z,EACA,QACAmlB,EAAchnB,MACdwT,EACAsG,EACA7X,GAEFsd,GACE/D,OACA3Z,EACA,SACAmlB,EAAc/mB,OACduT,EACAsG,EACA7X,GAEFsd,GACE,IACA1d,EACA,kBACAmlB,EAAc9mB,gBACdsT,EACAsG,EACA7X,GAEFsd,GACE,IACA1d,EACA,yBACAmlB,EAAc7mB,uBACdqT,EACAsG,EACA7X,GAEFsd,GACE,IACA1d,EACA,6BACAmlB,EAAc5mB,2BACdoT,EACAsG,EACA7X,GAEFsd,GACE,IACA1d,EACA,iBACAmlB,EAAc3mB,eACdmT,EACAsG,EACA7X,GAEFsd,GACE,IACA1d,EACA,2BACAmlB,EAAc1mB,yBACdkT,EACAsG,EACA7X,GAEFsd,GACE/D,OACA3Z,EACA,2BACAmlB,EAAczmB,yBACdiT,EACAsG,EACA7X,IAIJ,SAAoBL,EAAQiiB,EAAQ5hB,EAAkB6X,GACpD,MAAMoN,EAAUrD,EAAO/d,IACvB,KAAK,OAAQohB,GACX,OAGF,MAAM1T,EAAWuK,GAAmBmJ,EAAQ1T,UAC5C,IAAI1N,EAAMlE,EAAOkE,KACZ,OAAQA,KACXlE,EAAOkE,IAAMA,EAAM,IAAI,KAGzByZ,GACEhE,QACAzV,EACA,OACAohB,EAAQ9nB,KACRoU,EACAsG,EACA7X,GAEFsd,GACE,IACAzZ,EACA,aACAohB,EAAQ5hB,WACRkO,EACAsG,EACA7X,GAEFsd,GACE,IACAzZ,EACA,kBACAohB,EAAQvnB,gBACR6T,EACAsG,EACA7X,GAEFsd,GACEhE,QACAzV,EACA,OACAohB,EAAQ3d,KACRiK,EACAsG,EACA7X,GAEFwf,GACE3b,EACA,WACAohB,EAAQ1d,SACRgK,EACAsG,EACA7X,GAEFsd,GACEhE,QACAzV,EACA,UACAohB,EAAQzd,QACR+J,EACAsG,EACA7X,GAEFsd,GACE,IACAzZ,EACA,eACAohB,EAAQrf,aACR2L,EACAsG,EACA7X,GAEFsd,GACE/D,OACA1V,EACA,eACAohB,EAAQ9e,aACRoL,EACAsG,EACA7X,GAEFsd,GACE,IACAzZ,EACA,UACAohB,EAAQxd,QACR8J,EACAsG,EACA7X,GAEFsd,GACE,IACAzZ,EACA,2BACAohB,EAAQ5mB,yBACRkT,EACAsG,EACA7X,IAIJ,SAAyBL,EAAQiiB,EAAQ5hB,EAAkB6X,GACzD,MAAMqN,EAAetD,EAAO/O,SAC5B,KAAK,OAAQqS,GACX,OAGF,MAAM3T,EAAWuK,GAAmBoJ,EAAa3T,UACjD,IAAIsB,EAAWlT,EAAOkT,UACjB,OAAQA,KACXlT,EAAOkT,SAAWA,EAAW,IAAI,MAGnCyK,GACEhE,QACAzG,EACA,OACAqS,EAAa/nB,KACboU,EACAsG,EACA7X,GAEFggB,GACEnN,EACA,YACAqS,EAAa1S,UACbxS,GAEFsd,GACE/D,OACA1G,EACA,QACAqS,EAAannB,MACbwT,EACAsG,EACA7X,GAEFsd,GACE/D,OACA1G,EACA,SACAqS,EAAalnB,OACbuT,EACAsG,EACA7X,GAEFsd,GACE,IACAzK,EACA,kBACAqS,EAAaxnB,gBACb6T,EACAsG,EACA7X,GAEFsd,GACE/D,OACA1G,EACA,iBACAqS,EAAaxS,eACbnB,EACAsG,EACA7X,GAEFsd,GACE,IACAzK,EACA,0BACAqS,EAAa3R,wBACbhC,EACAsG,EACA7X,GAEFsd,GACE,IACAzK,EACA,aACAqS,EAAazS,WACblB,EACAsG,EACA7X,GAEFsd,GACE/D,OACA1G,EACA,cACAqS,EAAavS,YACbpB,EACAsG,EACA7X,GAEFsd,GACEhE,QACAzG,EACA,OACAqS,EAAa5d,KACbiK,EACAsG,EACA7X,GAEFwf,GACE3M,EACA,WACAqS,EAAa3d,SACbgK,EACAsG,EACA7X,GAEFsd,GACEhE,QACAzG,EACA,UACAqS,EAAa1d,QACb+J,EACAsG,EACA7X,GAEFsd,GACE,IACAzK,EACA,eACAqS,EAAatf,aACb2L,EACAsG,EACA7X,GAEFsd,GACE/D,OACA1G,EACA,eACAqS,EAAa/e,aACboL,EACAsG,EACA7X,GAEFsd,GACE,IACAzK,EACA,UACAqS,EAAazd,QACb8J,EACAsG,EACA7X,GAEFsd,GACE,IACAzK,EACA,2BACAqS,EAAa7mB,yBACbkT,EACAsG,EACA7X,GAEFsd,GACE,IACAzK,EACA,qBACAqS,EAAa1Q,mBACbjD,EACAsG,EACA7X,GAEFsd,GACE/D,OACA1G,EACA,SACAqS,EAAajS,OACb1B,EACAsG,EACA7X,IAIJ,SAAyBL,EAAQiiB,EAAQ5hB,EAAkB6X,GACzD,MAAMsN,EAAevD,EAAOhM,SAC5B,KAAK,OAAQuP,GACX,OAGF,MAAM5T,EAAWuK,GAAmBqJ,EAAa5T,UACjD,IAAIqE,EAAWjW,EAAOiW,UACjB,OAAQA,KACXjW,EAAOiW,SAAWA,EAAW,IAAI,MAGnC0H,GACEhE,QACA1D,EACA,OACAuP,EAAahoB,KACboU,EACAsG,EACA7X,GAEFsd,GACE/D,OACA3D,EACA,SACAuP,EAAalkB,OACbsQ,EACAsG,EACA7X,GAEFsd,GACE/D,OACA3D,EACA,YACAuP,EAAa5P,UACbhE,EACAsG,EACA7X,GAEFsd,GACE/D,OACA3D,EACA,eACAuP,EAAa3P,aACbjE,EACAsG,EACA7X,GAEFsd,GACE,IACA1H,EACA,kBACAuP,EAAaznB,gBACb6T,EACAsG,EACA7X,GAEFsd,GACEhE,QACA1D,EACA,OACAuP,EAAa7d,KACbiK,EACAsG,EACA7X,GAEFwf,GACE5J,EACA,WACAuP,EAAa5d,SACbgK,EACAsG,EACA7X,GAEFsd,GACEhE,QACA1D,EACA,UACAuP,EAAa3d,QACb+J,EACAsG,EACA7X,GAEFsd,GACE,IACA1H,EACA,eACAuP,EAAavf,aACb2L,EACAsG,EACA7X,GAEFsd,GACE/D,OACA3D,EACA,eACAuP,EAAahf,aACboL,EACAsG,EACA7X,GAEFsd,GACE/D,OACA3D,EACA,wBACAuP,EAAazP,sBACbnE,EACAsG,EACA7X,GAEFsd,GACE/D,OACA3D,EACA,SACAuP,EAAa1P,OACblE,EACAsG,EACA7X,GAEFsd,GACE,IACA1H,EACA,UACAuP,EAAa1d,QACb8J,EACAsG,EACA7X,GAEFsd,GACE,IACA1H,EACA,2BACAuP,EAAa9mB,yBACbkT,EACAsG,EACA7X,IAsDJ,SAAwBL,EAAQiiB,EAAQ5hB,EAAkB6X,GACxD,MAAMuN,EAAcxD,EAAOyD,QAC3B,KAAK,OAAQD,GACX,OAGF,MAAM7T,EAAWuK,GAAmBsJ,EAAY7T,UAChD,IAAI8T,EAAU1lB,EAAO0lB,SAChB,OAAQA,KACX1lB,EAAO0lB,QAAUA,EAAU,IAAI,MAGjC/H,GACEhE,QACA+L,EACA,OACAD,EAAYjoB,KACZoU,EACAsG,EACA7X,GAEFsd,GACE/D,OACA8L,EACA,gBACAD,EAAYE,cACZ/T,EACAsG,EACA7X,GAEFsd,GACE/D,OACA8L,EACA,gBACAD,EAAYG,cACZhU,EACAsG,EACA7X,GAEFsd,GACE/D,OACA8L,EACA,SACAD,EAAYpnB,OACZuT,EACAsG,EACA7X,GAEFsd,GACE,IACA+H,EACA,kBACAD,EAAY1nB,gBACZ6T,EACAsG,EACA7X,GAEFsd,GACE/D,OACA8L,EACA,iBACAD,EAAY1S,eACZnB,EACAsG,EACA7X,GAEFsd,GACE,IACA+H,EACA,0BACAD,EAAY7R,wBACZhC,EACAsG,EACA7X,GAEFsd,GACE,KACA+H,EACA,WACAD,EAAYxnB,SACZ2T,EACAsG,EACA7X,GAEFsd,GACE,KACA+H,EACA,aACAD,EAAYI,WACZjU,EACAsG,EACA7X,GAEFsd,GACE/D,OACA8L,EACA,cACAD,EAAYzS,YACZpB,EACAsG,EACA7X,GAEFsd,GACEhE,QACA+L,EACA,OACAD,EAAY9d,KACZiK,EACAsG,EACA7X,GAEFwf,GACE6F,EACA,WACAD,EAAY7d,SACZgK,EACAsG,EACA7X,GAEFsd,GACEhE,QACA+L,EACA,UACAD,EAAY5d,QACZ+J,EACAsG,EACA7X,GAEFsd,GACE,IACA+H,EACA,eACAD,EAAYxf,aACZ2L,EACAsG,EACA7X,GAEFsd,GACE/D,OACA8L,EACA,eACAD,EAAYjf,aACZoL,EACAsG,EACA7X,GAEFsd,GACE/D,OACA8L,EACA,wBACAD,EAAY1P,sBACZnE,EACAsG,EACA7X,GAEFsd,GACE,IACA+H,EACA,UACAD,EAAY3d,QACZ8J,EACAsG,EACA7X,GAEFsd,GACE,IACA+H,EACA,2BACAD,EAAY/mB,yBACZkT,EACAsG,EACA7X,GAEFsd,GACE,IACA+H,EACA,qBACAD,EAAY5Q,mBACZjD,EACAsG,EACA7X,GAEFsd,GACE/D,OACA8L,EACA,SACAD,EAAYnS,OACZ1B,EACAsG,EACA7X,IAIJ,SAA0BL,EAAQiiB,EAAQ5hB,EAAkB6X,GAC1D,MAAM4N,EAAgB7D,EAAOnc,UAC7B,KAAK,OAAQggB,GACX,OAGF,MAAMlU,EAAWuK,GAAmB2J,EAAclU,UAClD,IAAI9L,EAAY9F,EAAO8F,WAClB,OAAQA,KACX9F,EAAO8F,UAAYA,EAAY,IAAI,MAGrC6X,GACEhE,QACA7T,EACA,OACAggB,EAActoB,KACdoU,EACAsG,EACA7X,GAEFsd,GACE,IACA7X,EACA,QACAggB,EAAcC,MACdnU,EACAsG,EACA7X,GAEFsd,GACE,IACA7X,EACA,aACAggB,EAAcE,WACdpU,EACAsG,EACA7X,GAEFsd,GACE/D,OACA9T,EACA,eACAggB,EAAcG,aACdrU,EACAsG,EACA7X,GAEFsd,GACE/D,OACA9T,EACA,eACAggB,EAAcI,aACdtU,EACAsG,EACA7X,GAEFsd,GACE/D,OACA9T,EACA,cACAggB,EAAcK,YACdvU,EACAsG,EACA7X,GAEFsd,GACE/D,OACA9T,EACA,cACAggB,EAAcM,YACdxU,EACAsG,EACA7X,GAEFsd,GACE,IACA7X,EACA,kBACAggB,EAAc/nB,gBACd6T,EACAsG,EACA7X,GAEFsd,GACEhE,QACA7T,EACA,OACAggB,EAAcne,KACdiK,EACAsG,EACA7X,GAEFwf,GACE/Z,EACA,WACAggB,EAAcle,SACdgK,EACAsG,EACA7X,GAEFsd,GACEhE,QACA7T,EACA,UACAggB,EAAcje,QACd+J,EACAsG,EACA7X,GAEFsd,GACE,IACA7X,EACA,eACAggB,EAAc7f,aACd2L,EACAsG,EACA7X,GAEFsd,GACE/D,OACA9T,EACA,eACAggB,EAActf,aACdoL,EACAsG,EACA7X,GAEFsd,GACE/D,OACA9T,EACA,kBACAggB,EAAcO,gBACdzU,EACAsG,EACA7X,GAEFsd,GACE/D,OACA9T,EACA,kBACAggB,EAAcQ,gBACd1U,EACAsG,EACA7X,GAEFsd,GACE/D,OACA9T,EACA,eACAggB,EAAcS,aACd3U,EACAsG,EACA7X,GAEFsd,GACE,IACA7X,EACA,UACAggB,EAAche,QACd8J,EACAsG,EACA7X,GAEFsd,GACE,IACA7X,EACA,2BACAggB,EAAcpnB,yBACdkT,EACAsG,EACA7X,IAIJ,SAAsBL,EAAQiiB,EAAQ5hB,EAAkB6X,GACtD,MAAMsO,EAAYvE,EAAOwE,MACzB,KAAK,OAAQD,GACX,OAGF,MAAM5U,EAAWuK,GAAmBqK,EAAU5U,UAC9C,IAAI6U,EAAQzmB,EAAOymB,OACd,OAAQA,KACXzmB,EAAOymB,MAAQA,EAAQ,IAAI,MAG7B9I,GACEhE,QACA8M,EACA,OACAD,EAAUhpB,KACVoU,EACAsG,EACA7X,GAEFsd,GACEjL,OACA+T,EACA,OACAD,EAAUE,KACV9U,EACAsG,EACA7X,GAEFsd,GACEjL,OACA+T,EACA,OACAD,EAAUG,KACV/U,EACAsG,EACA7X,GAEFsd,GACE,IACA8I,EACA,QACAD,EAAUI,MACVhV,EACAsG,EACA7X,GAEFsd,GACE/D,OACA6M,EACA,QACAD,EAAU9oB,MACVkU,EACAsG,EACA7X,GAEFsd,GACEhE,QACA8M,EACA,iBACAD,EAAUK,eACVjV,EACAsG,EACA7X,GAEFsd,GACE,IACA8I,EACA,kBACAD,EAAUM,gBACVlV,EACAsG,EACA7X,GAEFsd,GACE,IACA8I,EACA,oBACAD,EAAUO,kBACVnV,EACAsG,EACA7X,GAEFsd,GACE,IACA8I,EACA,cACAD,EAAU7oB,YACViU,EACAsG,EACA7X,GAEFsd,GACE,IACA8I,EACA,YACAD,EAAU5oB,UACVgU,EACAsG,EACA7X,GAEFsd,GACE,IACA8I,EACA,mBACAD,EAAU3oB,iBACV+T,EACAsG,EACA7X,GAEFsd,GACE,IACA8I,EACA,iBACAD,EAAU1oB,eACV8T,EACAsG,EACA7X,GAEFsd,GACE,IACA8I,EACA,kBACAD,EAAUzoB,gBACV6T,EACAsG,EACA7X,GAEFsd,GACE,IACA8I,EACA,YACAD,EAAUQ,UACVpV,EACAsG,EACA7X,GAEFsd,GACE,IACA8I,EACA,eACAD,EAAUvgB,aACV2L,EACAsG,EACA7X,GAEFsd,GACE/D,OACA6M,EACA,eACAD,EAAUhgB,aACVoL,EACAsG,EACA7X,GAEFsd,GACE,IACA8I,EACA,yBACAD,EAAUjoB,uBACVqT,EACAsG,EACA7X,GAEFsd,GACE,IACA8I,EACA,6BACAD,EAAUhoB,2BACVoT,EACAsG,EACA7X,GAEFsd,GACE,IACA8I,EACA,kBACAD,EAAUloB,gBACVsT,EACAsG,EACA7X,GAEFsd,GACE,IACA8I,EACA,2BACAD,EAAU9nB,yBACVkT,EACAsG,EACA7X,GAEFsd,GACE/D,OACA6M,EACA,2BACAD,EAAU7nB,yBACViT,EACAsG,EACA7X,IAIJ,SAAsBL,EAAQiiB,EAAQ5hB,EAAkB6X,GACtD,MAAM+O,EAAYhF,EAAOpB,MACzB,KAAK,OAAQoG,GACX,OAGF,MAAMrV,EAAWuK,GAAmB8K,EAAUrV,UAC9C,IAsJIxQ,EAAGC,EAtJHwf,EAAQ7gB,EAAO6gB,OACd,OAAQA,KACX7gB,EAAO6gB,MAAQA,EAAQ,IAAI,MAG7BlD,GACEhE,QACAkH,EACA,OACAoG,EAAUzpB,KACVoU,EACAsG,EACA7X,GAEFsd,GACE,IACAkD,EACA,MACAoG,EAAUC,KACVtV,EACAsG,EACA7X,GAEFsd,GACE/D,OACAiH,EACA,QACAoG,EAAUvpB,MACVkU,EACAsG,EACA7X,GAEFsd,GACE/D,OACAiH,EACA,mBACAoG,EAAUE,iBACVvV,EACAsG,EACA7X,GAEFsd,GACE/D,OACAiH,EACA,eACAoG,EAAUG,aACVxV,EACAsG,EACA7X,GAEFsd,GACEhE,QACAkH,EACA,4BACAoG,EAAUI,0BACVzV,EACAsG,EACA7X,GAEFsd,GACEhE,QACAkH,EACA,gBACAoG,EAAUK,cACV1V,EACAsG,EACA7X,GAEFsd,GACEhE,QACAkH,EACA,kBACAoG,EAAUM,gBACV3V,EACAsG,EACA7X,GAEFsd,GACE,IACAkD,EACA,UACAoG,EAAUnf,QACV8J,EACAsG,EACA7X,GAEFsd,GACE,IACAkD,EACA,kBACAoG,EAAUlpB,gBACV6T,EACAsG,EACA7X,GAEFsd,GACE,IACAkD,EACA,kBACAoG,EAAUO,gBACV5V,EACAsG,EACA7X,GAEFsd,GACE/D,OACAiH,EACA,iBACAoG,EAAUQ,eACV7V,EACAsG,EACA7X,GAEFsd,GACE,IACAkD,EACA,QACAoG,EAAUjpB,MACV4T,EACAsG,EACA7X,GAEFsd,GACE,IACAkD,EACA,iBACAoG,EAAU3M,eACV1I,EACAsG,EACA7X,GAEFsd,GACE/D,OACAiH,EACA,mBACAoG,EAAUS,iBACV9V,EACAsG,EACA7X,GAEFsd,GACE,IACAkD,EACA,2BACAoG,EAAUvoB,yB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GACE,IACAkE,EACA,UACAyG,EAAYvO,QACZnI,EACAsG,EACA7X,GAEFsd,GACE,IACAkE,EACA,UACAyG,EAAYxgB,QACZ8J,EACAsG,EACA7X,GAEFsd,GACE,IACAkE,EACA,2BACAyG,EAAY5pB,yBACZkT,EACAsG,EACA7X,GAEFsd,GACE,IACAkE,EACA,qBACAyG,EAAYzT,mBACZjD,EACAsG,EACA7X,GAEFsd,GACE/D,OACAiI,EACA,SACAyG,EAAYhV,OACZ1B,EACAsG,EACA7X,IAQJ,SAAyBL,EAAQiiB,EAAQ5hB,EAAkB6X,GACzD,MAAM0Q,EAAe3G,EAAO4G,SAC5B,KAAK,OAAQD,GACX,OAGF,MAAMhX,EAAWuK,GAAmByM,EAAahX,UACjD,IAAIiX,EAAW7oB,EAAO6oB,SA8GtB,IA7GK,OAAQA,KACX7oB,EAAO6oB,SAAWA,EAAW,IAAI,MAGnClL,GACEhE,QACAkP,EACA,OACAD,EAAaprB,KACboU,EACAsG,EACA7X,GAEFggB,GACEwI,EACA,YACAD,EAAa/V,UACbxS,GAEFsd,GACE/D,OACAiP,EACA,QACAD,EAAaxqB,MACbwT,EACAsG,EACA7X,GAEFsd,GACE/D,OACAiP,EACA,cACAD,EAAa5V,YACbpB,EACAsG,EACA7X,GAEFwf,GACEgJ,EACA,WACAD,EAAahhB,SACbgK,EACAsG,EACA7X,GAEFwf,GACEgJ,EACA,oBACAD,EAAaE,kBACblX,EACAsG,EACA7X,GAEFsd,GACE,IACAkL,EACA,UACAD,EAAa7O,QACbnI,EACAsG,EACA7X,GAEFsd,GACEhE,QACAkP,EACA,gBACAD,EAAaG,cACbnX,EACAsG,EACA7X,GAEFsd,GACE,IACAkL,EACA,UACAD,EAAa9gB,QACb8J,EACAsG,EACA7X,GAEFsd,GACE,IACAkL,EACA,2BACAD,EAAalqB,yBACbkT,EACAsG,EACA7X,GAEFsd,GACE,IACAkL,EACA,qBACAD,EAAa/T,mBACbjD,EACAsG,EACA7X,GAEFsd,GACE/D,OACAiP,EACA,SACAD,EAAatV,OACb1B,EACAsG,EACA7X,IAIE,OAAQuoB,EAA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P,EACA,iBACAD,EAAcxW,eACdnB,EACAsG,EACA7X,GAEFsd,GACE,IACA6L,EACA,0BACAD,EAAc3V,wBACdhC,EACAsG,EACA7X,GAEFsd,GACE,KACA6L,EACA,WACAD,EAActrB,SACd2T,EACAsG,EACA7X,GAEFsd,GACE,KACA6L,EACA,aACAD,EAAc1D,WACdjU,EACAsG,EACA7X,GAEFsd,GACE/D,OACA4P,EACA,cACAD,EAAcvW,YACdpB,EACAsG,EACA7X,GAEFsd,GACEhE,QACA6P,EACA,OACAD,EAAc5hB,KACdiK,EACAsG,EACA7X,GAEFwf,GACE2J,EACA,WACAD,EAAc3hB,SACdgK,EACAsG,EACA7X,GAEFsd,GACEhE,QACA6P,EACA,UACAD,EAAc1hB,QACd+J,EACAsG,EACA7X,GAEFsd,GACE,IACA6L,EACA,eACAD,EAActjB,aACd2L,EACAsG,EACA7X,GAEFsd,GACE/D,OACA4P,EACA,eACAD,EAAc/iB,aACdoL,EACAsG,EACA7X,GAEFsd,GACE,IACA6L,EACA,UACAD,EAAczhB,QACd8J,EACAsG,EACA7X,GAEFsd,GACE,IACA6L,EACA,2BACAD,EAAc7qB,yBACdkT,EACAsG,EACA7X,GAEFsd,GACE,IACA6L,EACA,qBACAD,EAAc1U,mBACdjD,EACAsG,EACA7X,GAEFsd,GACE/D,OACA4P,EACA,SACAD,EAAcjW,OACd1B,EACAsG,EACA7X,IApxFJ,SAAyBL,EAAQiiB,EAAQ5hB,EAAkB6X,GACzD,MAAMwR,EAAezH,EAAOxgB,UACxB,OAAQioB,IACV1L,GACEhe,EACA,WACA0pB,OACAhvB,EACAwd,EACA7X,IA+wFN,SAAwBL,EAAQiiB,EAAQ5hB,EAAkB6X,GACxD,MAAM5O,EAAc2Y,EAAO9X,QAC3B,KAAK,OAAQb,GACX,OAGF,MAAMsI,EAAWuK,GAAmB7S,EAAYsI,UAChD,IAAIzH,EAAUnK,EAAOmK,SAChB,OAAQA,KACXnK,EAAOmK,QAAUA,EAAU,IAAI,MAGjCwT,GACEhE,QACAxP,EACA,OACAb,EAAY9L,KACZoU,EACAsG,EACA7X,GAEFs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","sources":["webpack:///../../../node_modules/cesium/Source/DataSources/BillboardGraphics.js","webpack:///../../../node_modules/cesium/Source/DataSources/BillboardVisualizer.js","webpack:///../../../node_modules/cesium/Source/DataSources/BoundingSphereState.js","webpack:///../../../node_modules/cesium/Source/DataSources/BoxGeometryUpdater.js","webpack:///../../../node_modules/cesium/Source/DataSources/BoxGraphics.js","webpack:///../../../node_modules/cesium/Source/DataSources/CallbackProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/Cesium3DTilesetGraphics.js","webpack:///../../../node_modules/cesium/Source/DataSources/Cesium3DTilesetVisualizer.js","webpack:///../../../node_modules/cesium/Source/DataSources/CheckerboardMaterialProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/ColorMaterialProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/CompositeEntityCollection.js","webpack:///../../../node_modules/cesium/Source/DataSources/CompositeMaterialProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/CompositePositionProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/CompositeProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/ConstantPositionProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/ConstantProperty.js","webpack:///../../../node_modules/cesium/Source/DataSources/CorridorGeometryUpdater.js","webpack:///../../../node_modules/cesium/Source/DataSources/CorridorGraphics.js","webpack:///../../../node_modules/cesium/Source/DataSources/CustomDataSource.js","webpack:///../../../node_modules/cesium/Source/DataSources/CylinderGeometryUpdater.js","webpack:///../../../node_modules/cesium/Source/DataSources/CylinderGraphics.js","webpack:///../../../node_modules/cesium/Source/DataSources/CzmlDataSource.js","webpack:///../../../node_modules/cesium/Source/DataSources/DataSource.js","webpack:///../../../node_modules/cesium/Source/DataSources/DataSourceClock.js","webpack:///../../../node_modules/cesium/Source/DataSources/DataSourceCollection.js","webpack:///../../../node_modules/cesium/Source/DataSources/DataSourceDisplay.js","webpack:///../../../node_modules/cesium/Source/DataSources/DynamicGeometryBatch.js","webpack:///../../../node_modules/cesium/Source/DataSources/DynamicGeometryUpdater.js","webpack:///../../../node_modules/cesium/Source/DataSources/EllipseGeometryUpdater.js","webpack:///../../../node_modules/cesium/Source/DataSources/EllipseGraphics.js","webpack:///../../../node_modules/cesium/Source/DataSources/EllipsoidGeometryUpdater.js","webpack:///../../../node_modules/cesium/Source/DataSources/EllipsoidGraphics.js","webpack:///../../../node_modules/cesium/Source/DataSources/Entity.js","webpack:///../../../node_modules/cesium/Source/DataSources/EntityCluster.js","webpack:///../../../node_modules/cesium/Source/DataSources/EntityCollection.js","webpack:///../../../node_modules/cesium/Source/DataSources/EntityView.js","webpack:///../../../node_modules/cesium/Source/DataSources/GeoJsonDataSource.js","webpack:///../../../node_modules/cesium/Source/DataSources/GeometryUpdater.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {Object} BillboardGraphics.ConstructorOptions\n *\n * Initialization options for the BillboardGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the billboard.\n * @property {Property | string | HTMLCanvasElement} [image] A Property specifying the Image, URI, or Canvas to use for the billboard.\n * @property {Property | number} [scale=1.0] A numeric Property specifying the scale to apply to the image size.\n * @property {Property | Cartesian2} [pixelOffset=Cartesian2.ZERO] A {@link Cartesian2} Property specifying the pixel offset.\n * @property {Property | Cartesian3} [eyeOffset=Cartesian3.ZERO] A {@link Cartesian3} Property specifying the eye offset.\n * @property {Property | HorizontalOrigin} [horizontalOrigin=HorizontalOrigin.CENTER] A Property specifying the {@link HorizontalOrigin}.\n * @property {Property | VerticalOrigin} [verticalOrigin=VerticalOrigin.CENTER] A Property specifying the {@link VerticalOrigin}.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @property {Property | Color} [color=Color.WHITE] A Property specifying the tint {@link Color} of the image.\n * @property {Property | number} [rotation=0] A numeric Property specifying the rotation about the alignedAxis.\n * @property {Property | Cartesian3} [alignedAxis=Cartesian3.ZERO] A {@link Cartesian3} Property specifying the unit vector axis of rotation.\n * @property {Property | boolean} [sizeInMeters] A boolean Property specifying whether this billboard's size should be measured in meters.\n * @property {Property | number} [width] A numeric Property specifying the width of the billboard in pixels, overriding the native size.\n * @property {Property | number} [height] A numeric Property specifying the height of the billboard in pixels, overriding the native size.\n * @property {Property | NearFarScalar} [scaleByDistance] A {@link NearFarScalar} Property used to scale the point based on distance from the camera.\n * @property {Property | NearFarScalar} [translucencyByDistance] A {@link NearFarScalar} Property used to set translucency based on distance from the camera.\n * @property {Property | NearFarScalar} [pixelOffsetScaleByDistance] A {@link NearFarScalar} Property used to set pixelOffset based on distance from the camera.\n * @property {Property | BoundingRectangle} [imageSubRegion] A Property specifying a {@link BoundingRectangle} that defines a sub-region of the image to use for the billboard, rather than the entire image, measured in pixels from the bottom-left.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this billboard will be displayed.\n * @property {Property | number} [disableDepthTestDistance] A Property specifying the distance from the camera at which to disable the depth test to.\n */\n\n/**\n * Describes a two dimensional icon located at the position of the containing {@link Entity}.\n * <p>\n * <div align='center'>\n * <img src='Images/Billboard.png' width='400' height='300' /><br />\n * Example billboards\n * </div>\n * </p>\n *\n * @alias BillboardGraphics\n * @constructor\n *\n * @param {BillboardGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Billboards.html|Cesium Sandcastle Billboard Demo}\n */\nfunction BillboardGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._image = undefined;\n  this._imageSubscription = undefined;\n  this._scale = undefined;\n  this._scaleSubscription = undefined;\n  this._pixelOffset = undefined;\n  this._pixelOffsetSubscription = undefined;\n  this._eyeOffset = undefined;\n  this._eyeOffsetSubscription = undefined;\n  this._horizontalOrigin = undefined;\n  this._horizontalOriginSubscription = undefined;\n  this._verticalOrigin = undefined;\n  this._verticalOriginSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._rotation = undefined;\n  this._rotationSubscription = undefined;\n  this._alignedAxis = undefined;\n  this._alignedAxisSubscription = undefined;\n  this._sizeInMeters = undefined;\n  this._sizeInMetersSubscription = undefined;\n  this._width = undefined;\n  this._widthSubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._scaleByDistance = undefined;\n  this._scaleByDistanceSubscription = undefined;\n  this._translucencyByDistance = undefined;\n  this._translucencyByDistanceSubscription = undefined;\n  this._pixelOffsetScaleByDistance = undefined;\n  this._pixelOffsetScaleByDistanceSubscription = undefined;\n  this._imageSubRegion = undefined;\n  this._imageSubRegionSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._disableDepthTestDistance = undefined;\n  this._disableDepthTestDistanceSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(BillboardGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof BillboardGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the billboard.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the Property specifying the Image, URI, or Canvas to use for the billboard.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  image: createPropertyDescriptor(\"image\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the uniform scale to apply to the image.\n   * A scale greater than <code>1.0</code> enlarges the billboard while a scale less than <code>1.0</code> shrinks it.\n   * <p>\n   * <div align='center'>\n   * <img src='Images/Billboard.setScale.png' width='400' height='300' /><br/>\n   * From left to right in the above image, the scales are <code>0.5</code>, <code>1.0</code>, and <code>2.0</code>.\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  scale: createPropertyDescriptor(\"scale\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying the billboard's pixel offset in screen space\n   * from the origin of this billboard.  This is commonly used to align multiple billboards and labels at\n   * the same position, e.g., an image and text.  The screen space origin is the top, left corner of the\n   * canvas; <code>x</code> increases from left to right, and <code>y</code> increases from top to bottom.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setPixelOffset.default.png' width='250' height='188' /></td>\n   * <td align='center'><code>b.pixeloffset = new Cartesian2(50, 25);</code><br/><img src='Images/Billboard.setPixelOffset.x50y-25.png' width='250' height='188' /></td>\n   * </tr></table>\n   * The billboard's origin is indicated by the yellow point.\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default Cartesian2.ZERO\n   */\n  pixelOffset: createPropertyDescriptor(\"pixelOffset\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} Property specifying the billboard's offset in eye coordinates.\n   * Eye coordinates is a left-handed coordinate system, where <code>x</code> points towards the viewer's\n   * right, <code>y</code> points up, and <code>z</code> points into the screen.\n   * <p>\n   * An eye offset is commonly used to arrange multiple billboards or objects at the same position, e.g., to\n   * arrange a billboard above its corresponding 3D model.\n   * </p>\n   * Below, the billboard is positioned at the center of the Earth but an eye offset makes it always\n   * appear on top of the Earth regardless of the viewer's or Earth's orientation.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.one.png' width='250' height='188' /></td>\n   * <td align='center'><img src='Images/Billboard.setEyeOffset.two.png' width='250' height='188' /></td>\n   * </tr></table>\n   * <code>b.eyeOffset = new Cartesian3(0.0, 8000000.0, 0.0);</code>\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default Cartesian3.ZERO\n   */\n  eyeOffset: createPropertyDescriptor(\"eyeOffset\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HorizontalOrigin}.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default HorizontalOrigin.CENTER\n   */\n  horizontalOrigin: createPropertyDescriptor(\"horizontalOrigin\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link VerticalOrigin}.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default VerticalOrigin.CENTER\n   */\n  verticalOrigin: createPropertyDescriptor(\"verticalOrigin\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} that is multiplied with the <code>image</code>.\n   * This has two common use cases.  First, the same white texture may be used by many different billboards,\n   * each with a different color, to create colored billboards. Second, the color's alpha component can be\n   * used to make the billboard translucent as shown below. An alpha of <code>0.0</code> makes the billboard\n   * transparent, and <code>1.0</code> makes the billboard opaque.\n   * <p>\n   * <div align='center'>\n   * <table border='0' cellpadding='5'><tr>\n   * <td align='center'><code>default</code><br/><img src='Images/Billboard.setColor.Alpha255.png' width='250' height='188' /></td>\n   * <td align='center'><code>alpha : 0.5</code><br/><img src='Images/Billboard.setColor.Alpha127.png' width='250' height='188' /></td>\n   * </tr></table>\n   * </div>\n   * </p>\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the rotation of the image\n   * counter clockwise from the <code>alignedAxis</code>.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0\n   */\n  rotation: createPropertyDescriptor(\"rotation\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} Property specifying the unit vector axis of rotation\n   * in the fixed frame. When set to Cartesian3.ZERO the rotation is from the top of the screen.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default Cartesian3.ZERO\n   */\n  alignedAxis: createPropertyDescriptor(\"alignedAxis\"),\n\n  /**\n   * Gets or sets the boolean Property specifying if this billboard's size will be measured in meters.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  sizeInMeters: createPropertyDescriptor(\"sizeInMeters\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the billboard in pixels.\n   * When undefined, the native width is used.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  width: createPropertyDescriptor(\"width\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the height of the billboard in pixels.\n   * When undefined, the native height is used.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  height: createPropertyDescriptor(\"height\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the scale of the billboard based on the distance from the camera.\n   * A billboard's scale will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's scale remains clamped to the nearest bound.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  scaleByDistance: createPropertyDescriptor(\"scaleByDistance\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the translucency of the billboard based on the distance from the camera.\n   * A billboard's translucency will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's translucency remains clamped to the nearest bound.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  translucencyByDistance: createPropertyDescriptor(\"translucencyByDistance\"),\n\n  /**\n   * Gets or sets {@link NearFarScalar} Property specifying the pixel offset of the billboard based on the distance from the camera.\n   * A billboard's pixel offset will interpolate between the {@link NearFarScalar#nearValue} and\n   * {@link NearFarScalar#farValue} while the camera distance falls within the lower and upper bounds\n   * of the specified {@link NearFarScalar#near} and {@link NearFarScalar#far}.\n   * Outside of these ranges the billboard's pixel offset remains clamped to the nearest bound.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  pixelOffsetScaleByDistance: createPropertyDescriptor(\n    \"pixelOffsetScaleByDistance\"\n  ),\n\n  /**\n   * Gets or sets the Property specifying a {@link BoundingRectangle} that defines a\n   * sub-region of the <code>image</code> to use for the billboard, rather than the entire image,\n   * measured in pixels from the bottom-left.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  imageSubRegion: createPropertyDescriptor(\"imageSubRegion\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this billboard will be displayed.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n\n  /**\n   * Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain.\n   * When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied.\n   * @memberof BillboardGraphics.prototype\n   * @type {Property|undefined}\n   */\n  disableDepthTestDistance: createPropertyDescriptor(\n    \"disableDepthTestDistance\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {BillboardGraphics} [result] The object onto which to store the result.\n * @returns {BillboardGraphics} The modified result parameter or a new instance if one was not provided.\n */\nBillboardGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new BillboardGraphics(this);\n  }\n  result.show = this._show;\n  result.image = this._image;\n  result.scale = this._scale;\n  result.pixelOffset = this._pixelOffset;\n  result.eyeOffset = this._eyeOffset;\n  result.horizontalOrigin = this._horizontalOrigin;\n  result.verticalOrigin = this._verticalOrigin;\n  result.heightReference = this._heightReference;\n  result.color = this._color;\n  result.rotation = this._rotation;\n  result.alignedAxis = this._alignedAxis;\n  result.sizeInMeters = this._sizeInMeters;\n  result.width = this._width;\n  result.height = this._height;\n  result.scaleByDistance = this._scaleByDistance;\n  result.translucencyByDistance = this._translucencyByDistance;\n  result.pixelOffsetScaleByDistance = this._pixelOffsetScaleByDistance;\n  result.imageSubRegion = this._imageSubRegion;\n  result.distanceDisplayCondition = this._distanceDisplayCondition;\n  result.disableDepthTestDistance = this._disableDepthTestDistance;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {BillboardGraphics} source The object to be merged into this object.\n */\nBillboardGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this._show, source.show);\n  this.image = defaultValue(this._image, source.image);\n  this.scale = defaultValue(this._scale, source.scale);\n  this.pixelOffset = defaultValue(this._pixelOffset, source.pixelOffset);\n  this.eyeOffset = defaultValue(this._eyeOffset, source.eyeOffset);\n  this.horizontalOrigin = defaultValue(\n    this._horizontalOrigin,\n    source.horizontalOrigin\n  );\n  this.verticalOrigin = defaultValue(\n    this._verticalOrigin,\n    source.verticalOrigin\n  );\n  this.heightReference = defaultValue(\n    this._heightReference,\n    source.heightReference\n  );\n  this.color = defaultValue(this._color, source.color);\n  this.rotation = defaultValue(this._rotation, source.rotation);\n  this.alignedAxis = defaultValue(this._alignedAxis, source.alignedAxis);\n  this.sizeInMeters = defaultValue(this._sizeInMeters, source.sizeInMeters);\n  this.width = defaultValue(this._width, source.width);\n  this.height = defaultValue(this._height, source.height);\n  this.scaleByDistance = defaultValue(\n    this._scaleByDistance,\n    source.scaleByDistance\n  );\n  this.translucencyByDistance = defaultValue(\n    this._translucencyByDistance,\n    source.translucencyByDistance\n  );\n  this.pixelOffsetScaleByDistance = defaultValue(\n    this._pixelOffsetScaleByDistance,\n    source.pixelOffsetScaleByDistance\n  );\n  this.imageSubRegion = defaultValue(\n    this._imageSubRegion,\n    source.imageSubRegion\n  );\n  this.distanceDisplayCondition = defaultValue(\n    this._distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n  this.disableDepthTestDistance = defaultValue(\n    this._disableDepthTestDistance,\n    source.disableDepthTestDistance\n  );\n};\nexport default BillboardGraphics;\n","import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport HorizontalOrigin from \"../Scene/HorizontalOrigin.js\";\nimport VerticalOrigin from \"../Scene/VerticalOrigin.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\n\nconst defaultColor = Color.WHITE;\nconst defaultEyeOffset = Cartesian3.ZERO;\nconst defaultHeightReference = HeightReference.NONE;\nconst defaultPixelOffset = Cartesian2.ZERO;\nconst defaultScale = 1.0;\nconst defaultRotation = 0.0;\nconst defaultAlignedAxis = Cartesian3.ZERO;\nconst defaultHorizontalOrigin = HorizontalOrigin.CENTER;\nconst defaultVerticalOrigin = VerticalOrigin.CENTER;\nconst defaultSizeInMeters = false;\n\nconst positionScratch = new Cartesian3();\nconst colorScratch = new Color();\nconst eyeOffsetScratch = new Cartesian3();\nconst pixelOffsetScratch = new Cartesian2();\nconst scaleByDistanceScratch = new NearFarScalar();\nconst translucencyByDistanceScratch = new NearFarScalar();\nconst pixelOffsetScaleByDistanceScratch = new NearFarScalar();\nconst boundingRectangleScratch = new BoundingRectangle();\nconst distanceDisplayConditionScratch = new DistanceDisplayCondition();\n\nfunction EntityData(entity) {\n  this.entity = entity;\n  this.billboard = undefined;\n  this.textureValue = undefined;\n}\n\n/**\n * A {@link Visualizer} which maps {@link Entity#billboard} to a {@link Billboard}.\n * @alias BillboardVisualizer\n * @constructor\n *\n * @param {EntityCluster} entityCluster The entity cluster to manage the collection of billboards and optionally cluster with other entities.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\nfunction BillboardVisualizer(entityCluster, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entityCluster)) {\n    throw new DeveloperError(\"entityCluster is required.\");\n  }\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  }\n  //>>includeEnd('debug');\n\n  entityCollection.collectionChanged.addEventListener(\n    BillboardVisualizer.prototype._onCollectionChanged,\n    this\n  );\n\n  this._cluster = entityCluster;\n  this._entityCollection = entityCollection;\n  this._items = new AssociativeArray();\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n\n/**\n * Updates the primitives created by this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} This function always returns true.\n */\nBillboardVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const items = this._items.values;\n  const cluster = this._cluster;\n\n  for (let i = 0, len = items.length; i < len; i++) {\n    const item = items[i];\n    const entity = item.entity;\n    const billboardGraphics = entity._billboard;\n    let textureValue;\n    let billboard = item.billboard;\n    let show =\n      entity.isShowing &&\n      entity.isAvailable(time) &&\n      Property.getValueOrDefault(billboardGraphics._show, time, true);\n    let position;\n    if (show) {\n      position = Property.getValueOrUndefined(\n        entity._position,\n        time,\n        positionScratch\n      );\n      textureValue = Property.getValueOrUndefined(\n        billboardGraphics._image,\n        time\n      );\n      show = defined(position) && defined(textureValue);\n    }\n\n    if (!show) {\n      //don't bother creating or updating anything else\n      returnPrimitive(item, entity, cluster);\n      continue;\n    }\n\n    if (!Property.isConstant(entity._position)) {\n      cluster._clusterDirty = true;\n    }\n\n    if (!defined(billboard)) {\n      billboard = cluster.getBillboard(entity);\n      billboard.id = entity;\n      billboard.image = undefined;\n      item.billboard = billboard;\n    }\n\n    billboard.show = show;\n    if (!defined(billboard.image) || item.textureValue !== textureValue) {\n      billboard.image = textureValue;\n      item.textureValue = textureValue;\n    }\n    billboard.position = position;\n    billboard.color = Property.getValueOrDefault(\n      billboardGraphics._color,\n      time,\n      defaultColor,\n      colorScratch\n    );\n    billboard.eyeOffset = Property.getValueOrDefault(\n      billboardGraphics._eyeOffset,\n      time,\n      defaultEyeOffset,\n      eyeOffsetScratch\n    );\n    billboard.heightReference = Property.getValueOrDefault(\n      billboardGraphics._heightReference,\n      time,\n      defaultHeightReference\n    );\n    billboard.pixelOffset = Property.getValueOrDefault(\n      billboardGraphics._pixelOffset,\n      time,\n      defaultPixelOffset,\n      pixelOffsetScratch\n    );\n    billboard.scale = Property.getValueOrDefault(\n      billboardGraphics._scale,\n      time,\n      defaultScale\n    );\n    billboard.rotation = Property.getValueOrDefault(\n      billboardGraphics._rotation,\n      time,\n      defaultRotation\n    );\n    billboard.alignedAxis = Property.getValueOrDefault(\n      billboardGraphics._alignedAxis,\n      time,\n      defaultAlignedAxis\n    );\n    billboard.horizontalOrigin = Property.getValueOrDefault(\n      billboardGraphics._horizontalOrigin,\n      time,\n      defaultHorizontalOrigin\n    );\n    billboard.verticalOrigin = Property.getValueOrDefault(\n      billboardGraphics._verticalOrigin,\n      time,\n      defaultVerticalOrigin\n    );\n    billboard.width = Property.getValueOrUndefined(\n      billboardGraphics._width,\n      time\n    );\n    billboard.height = Property.getValueOrUndefined(\n      billboardGraphics._height,\n      time\n    );\n    billboard.scaleByDistance = Property.getValueOrUndefined(\n      billboardGraphics._scaleByDistance,\n      time,\n      scaleByDistanceScratch\n    );\n    billboard.translucencyByDistance = Property.getValueOrUndefined(\n      billboardGraphics._translucencyByDistance,\n      time,\n      translucencyByDistanceScratch\n    );\n    billboard.pixelOffsetScaleByDistance = Property.getValueOrUndefined(\n      billboardGraphics._pixelOffsetScaleByDistance,\n      time,\n      pixelOffsetScaleByDistanceScratch\n    );\n    billboard.sizeInMeters = Property.getValueOrDefault(\n      billboardGraphics._sizeInMeters,\n      time,\n      defaultSizeInMeters\n    );\n    billboard.distanceDisplayCondition = Property.getValueOrUndefined(\n      billboardGraphics._distanceDisplayCondition,\n      time,\n      distanceDisplayConditionScratch\n    );\n    billboard.disableDepthTestDistance = Property.getValueOrUndefined(\n      billboardGraphics._disableDepthTestDistance,\n      time\n    );\n\n    const subRegion = Property.getValueOrUndefined(\n      billboardGraphics._imageSubRegion,\n      time,\n      boundingRectangleScratch\n    );\n    if (defined(subRegion)) {\n      billboard.setImageSubRegion(billboard._imageId, subRegion);\n    }\n  }\n  return true;\n};\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nBillboardVisualizer.prototype.getBoundingSphere = function (entity, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const item = this._items.get(entity.id);\n  if (!defined(item) || !defined(item.billboard)) {\n    return BoundingSphereState.FAILED;\n  }\n\n  const billboard = item.billboard;\n  if (billboard.heightReference === HeightReference.NONE) {\n    result.center = Cartesian3.clone(billboard.position, result.center);\n  } else {\n    if (!defined(billboard._clampedPosition)) {\n      return BoundingSphereState.PENDING;\n    }\n    result.center = Cartesian3.clone(billboard._clampedPosition, result.center);\n  }\n  result.radius = 0;\n  return BoundingSphereState.DONE;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nBillboardVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nBillboardVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(\n    BillboardVisualizer.prototype._onCollectionChanged,\n    this\n  );\n  const entities = this._entityCollection.values;\n  for (let i = 0; i < entities.length; i++) {\n    this._cluster.removeBillboard(entities[i]);\n  }\n  return destroyObject(this);\n};\n\nBillboardVisualizer.prototype._onCollectionChanged = function (\n  entityCollection,\n  added,\n  removed,\n  changed\n) {\n  let i;\n  let entity;\n  const items = this._items;\n  const cluster = this._cluster;\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    if (defined(entity._billboard) && defined(entity._position)) {\n      items.set(entity.id, new EntityData(entity));\n    }\n  }\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n    if (defined(entity._billboard) && defined(entity._position)) {\n      if (!items.contains(entity.id)) {\n        items.set(entity.id, new EntityData(entity));\n      }\n    } else {\n      returnPrimitive(items.get(entity.id), entity, cluster);\n      items.remove(entity.id);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    returnPrimitive(items.get(entity.id), entity, cluster);\n    items.remove(entity.id);\n  }\n};\n\nfunction returnPrimitive(item, entity, cluster) {\n  if (defined(item)) {\n    item.billboard = undefined;\n    cluster.removeBillboard(entity);\n  }\n}\nexport default BillboardVisualizer;\n","/**\n * The state of a BoundingSphere computation being performed by a {@link Visualizer}.\n * @enum {Number}\n * @private\n */\nconst BoundingSphereState = {\n  /**\n   * The BoundingSphere has been computed.\n   * @type BoundingSphereState\n   * @constant\n   */\n  DONE: 0,\n  /**\n   * The BoundingSphere is still being computed.\n   * @type BoundingSphereState\n   * @constant\n   */\n  PENDING: 1,\n  /**\n   * The BoundingSphere does not exist.\n   * @type BoundingSphereState\n   * @constant\n   */\n  FAILED: 2,\n};\nexport default Object.freeze(BoundingSphereState);\n","import BoxGeometry from \"../Core/BoxGeometry.js\";\nimport BoxOutlineGeometry from \"../Core/BoxOutlineGeometry.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport GeometryOffsetAttribute from \"../Core/GeometryOffsetAttribute.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport heightReferenceOnEntityPropertyChanged from \"./heightReferenceOnEntityPropertyChanged.js\";\nimport Property from \"./Property.js\";\n\nconst defaultOffset = Cartesian3.ZERO;\n\nconst offsetScratch = new Cartesian3();\nconst positionScratch = new Cartesian3();\nconst scratchColor = new Color();\n\nfunction BoxGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.dimensions = undefined;\n  this.offsetAttribute = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for boxes.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias BoxGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction BoxGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new BoxGeometryOptions(entity),\n    geometryPropertyName: \"box\",\n    observedPropertyNames: [\"availability\", \"position\", \"orientation\", \"box\"],\n  });\n\n  this._onEntityPropertyChanged(entity, \"box\", entity.box, undefined);\n}\n\nif (defined(Object.create)) {\n  BoxGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n  BoxGeometryUpdater.prototype.constructor = BoxGeometryUpdater;\n}\n\nObject.defineProperties(BoxGeometryUpdater.prototype, {\n  /**\n   * Gets the terrain offset property\n   * @type {TerrainOffsetProperty}\n   * @memberof BoxGeometryUpdater.prototype\n   * @readonly\n   * @private\n   */\n  terrainOffsetProperty: {\n    get: function () {\n      return this._terrainOffsetProperty;\n    },\n  },\n});\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nBoxGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n\n  const show = new ShowGeometryInstanceAttribute(\n    isAvailable &&\n      entity.isShowing &&\n      this._showProperty.getValue(time) &&\n      this._fillProperty.getValue(time)\n  );\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n  const distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n    distanceDisplayCondition\n  );\n\n  const attributes = {\n    show: show,\n    distanceDisplayCondition: distanceDisplayConditionAttribute,\n    color: undefined,\n    offset: undefined,\n  };\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    let currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n  }\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: BoxGeometry.fromDimensions(this._options),\n    modelMatrix: entity.computeModelMatrixForHeightReference(\n      time,\n      entity.box.heightReference,\n      this._options.dimensions.z * 0.5,\n      this._scene.mapProjection.ellipsoid\n    ),\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nBoxGeometryUpdater.prototype.createOutlineGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent an outlined geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor\n  );\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._showOutlineProperty.getValue(time)\n    ),\n    color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n      distanceDisplayCondition\n    ),\n    offset: undefined,\n  };\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: BoxOutlineGeometry.fromDimensions(this._options),\n    modelMatrix: entity.computeModelMatrixForHeightReference(\n      time,\n      entity.box.heightReference,\n      this._options.dimensions.z * 0.5,\n      this._scene.mapProjection.ellipsoid\n    ),\n    attributes: attributes,\n  });\n};\n\nBoxGeometryUpdater.prototype._computeCenter = function (time, result) {\n  return Property.getValueOrUndefined(this._entity.position, time, result);\n};\n\nBoxGeometryUpdater.prototype._isHidden = function (entity, box) {\n  return (\n    !defined(box.dimensions) ||\n    !defined(entity.position) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, box)\n  );\n};\n\nBoxGeometryUpdater.prototype._isDynamic = function (entity, box) {\n  return (\n    !entity.position.isConstant ||\n    !Property.isConstant(entity.orientation) ||\n    !box.dimensions.isConstant ||\n    !Property.isConstant(box.outlineWidth)\n  );\n};\n\nBoxGeometryUpdater.prototype._setStaticOptions = function (entity, box) {\n  const heightReference = Property.getValueOrDefault(\n    box.heightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE\n  );\n\n  const options = this._options;\n  options.vertexFormat =\n    this._materialProperty instanceof ColorMaterialProperty\n      ? PerInstanceColorAppearance.VERTEX_FORMAT\n      : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.dimensions = box.dimensions.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.dimensions\n  );\n  options.offsetAttribute =\n    heightReference !== HeightReference.NONE\n      ? GeometryOffsetAttribute.ALL\n      : undefined;\n};\n\nBoxGeometryUpdater.prototype._onEntityPropertyChanged = heightReferenceOnEntityPropertyChanged;\n\nBoxGeometryUpdater.DynamicGeometryUpdater = DynamicBoxGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicBoxGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives\n  );\n}\n\nif (defined(Object.create)) {\n  DynamicBoxGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype\n  );\n  DynamicBoxGeometryUpdater.prototype.constructor = DynamicBoxGeometryUpdater;\n}\n\nDynamicBoxGeometryUpdater.prototype._isHidden = function (entity, box, time) {\n  const position = Property.getValueOrUndefined(\n    entity.position,\n    time,\n    positionScratch\n  );\n  const dimensions = this._options.dimensions;\n  return (\n    !defined(position) ||\n    !defined(dimensions) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(this, entity, box, time)\n  );\n};\n\nDynamicBoxGeometryUpdater.prototype._setOptions = function (entity, box, time) {\n  const heightReference = Property.getValueOrDefault(\n    box.heightReference,\n    time,\n    HeightReference.NONE\n  );\n  const options = this._options;\n  options.dimensions = Property.getValueOrUndefined(\n    box.dimensions,\n    time,\n    options.dimensions\n  );\n  options.offsetAttribute =\n    heightReference !== HeightReference.NONE\n      ? GeometryOffsetAttribute.ALL\n      : undefined;\n};\nexport default BoxGeometryUpdater;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {Object} BoxGraphics.ConstructorOptions\n *\n * Initialization options for the BoxGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the box.\n * @property {Property | Cartesian3} [dimensions] A {@link Cartesian3} Property specifying the length, width, and height of the box.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height from the entity position is relative to.\n * @property {Property | boolean} [fill=true] A boolean Property specifying whether the box is filled with the provided material.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to fill the box.\n * @property {Property | boolean} [outline=false] A boolean Property specifying whether the box is outlined.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the box casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this box will be displayed.\n *\n */\n\n/**\n * Describes a box. The center position and orientation are determined by the containing {@link Entity}.\n *\n * @alias BoxGraphics\n * @constructor\n *\n * @param {BoxGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Box.html|Cesium Sandcastle Box Demo}\n */\nfunction BoxGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._dimensions = undefined;\n  this._dimensionsSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(BoxGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof BoxGraphics.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the box.\n   * @memberof BoxGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets {@link Cartesian3} Property property specifying the length, width, and height of the box.\n   * @memberof BoxGraphics.prototype\n   * @type {Property|undefined}\n   */\n  dimensions: createPropertyDescriptor(\"dimensions\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof BoxGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the box is filled with the provided material.\n   * @memberof BoxGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the material used to fill the box.\n   * @memberof BoxGraphics.prototype\n   * @type {MaterialProperty|undefined}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the box is outlined.\n   * @memberof BoxGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof BoxGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * <p>\n   * Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}.\n   * </p>\n   * @memberof BoxGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the box\n   * casts or receives shadows from light sources.\n   * @memberof BoxGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this box will be displayed.\n   * @memberof BoxGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {BoxGraphics} [result] The object onto which to store the result.\n * @returns {BoxGraphics} The modified result parameter or a new instance if one was not provided.\n */\nBoxGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new BoxGraphics(this);\n  }\n  result.show = this.show;\n  result.dimensions = this.dimensions;\n  result.heightReference = this.heightReference;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {BoxGraphics} source The object to be merged into this object.\n */\nBoxGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.dimensions = defaultValue(this.dimensions, source.dimensions);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference\n  );\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n};\nexport default BoxGraphics;\n","import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\n\n/**\n * A {@link Property} whose value is lazily evaluated by a callback function.\n *\n * @alias CallbackProperty\n * @constructor\n *\n * @param {CallbackProperty.Callback} callback The function to be called when the property is evaluated.\n * @param {Boolean} isConstant <code>true</code> when the callback function returns the same value every time, <code>false</code> if the value will change.\n */\nfunction CallbackProperty(callback, isConstant) {\n  this._callback = undefined;\n  this._isConstant = undefined;\n  this._definitionChanged = new Event();\n  this.setCallback(callback, isConstant);\n}\n\nObject.defineProperties(CallbackProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * @memberof CallbackProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return this._isConstant;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setCallback is called.\n   * @memberof CallbackProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n});\n\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied or is unsupported.\n */\nCallbackProperty.prototype.getValue = function (time, result) {\n  return this._callback(time, result);\n};\n\n/**\n * Sets the callback to be used.\n *\n * @param {CallbackProperty.Callback} callback The function to be called when the property is evaluated.\n * @param {Boolean} isConstant <code>true</code> when the callback function returns the same value every time, <code>false</code> if the value will change.\n */\nCallbackProperty.prototype.setCallback = function (callback, isConstant) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(callback)) {\n    throw new DeveloperError(\"callback is required.\");\n  }\n  if (!defined(isConstant)) {\n    throw new DeveloperError(\"isConstant is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const changed =\n    this._callback !== callback || this._isConstant !== isConstant;\n\n  this._callback = callback;\n  this._isConstant = isConstant;\n\n  if (changed) {\n    this._definitionChanged.raiseEvent(this);\n  }\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCallbackProperty.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (other instanceof CallbackProperty &&\n      this._callback === other._callback &&\n      this._isConstant === other._isConstant)\n  );\n};\n\n/**\n * A function that returns the value of the property.\n * @callback CallbackProperty.Callback\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into. If omitted, the function must create and return a new instance.\n * @returns {Object} The modified result parameter, or a new instance if the result parameter was not supplied or is unsupported.\n */\nexport default CallbackProperty;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {Object} Cesium3DTilesetGraphics.ConstructorOptions\n *\n * Initialization options for the Cesium3DTilesetGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the tileset.\n * @property {Property | string | Resource} [uri] A string or Resource Property specifying the URI of the tileset.\n * @property {Property | number} [maximumScreenSpaceError] A number or Property specifying the maximum screen space error used to drive level of detail refinement.\n */\n\n/**\n * A 3D Tiles tileset represented by an {@link Entity}.\n * The tileset modelMatrix is determined by the containing Entity position and orientation\n * or is left unset if position is undefined.\n *\n * @alias Cesium3DTilesetGraphics\n * @constructor\n *\n * @param {Cesium3DTilesetGraphics.ConstructorOptions} [options] Object describing initialization options\n */\nfunction Cesium3DTilesetGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._uri = undefined;\n  this._uriSubscription = undefined;\n  this._maximumScreenSpaceError = undefined;\n  this._maximumScreenSpaceErrorSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(Cesium3DTilesetGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof Cesium3DTilesetGraphics.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the model.\n   * @memberof Cesium3DTilesetGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the string Property specifying the URI of the glTF asset.\n   * @memberof Cesium3DTilesetGraphics.prototype\n   * @type {Property|undefined}\n   */\n  uri: createPropertyDescriptor(\"uri\"),\n\n  /**\n   * Gets or sets the maximum screen space error used to drive level of detail refinement.\n   * @memberof Cesium3DTilesetGraphics.prototype\n   * @type {Property|undefined}\n   */\n  maximumScreenSpaceError: createPropertyDescriptor(\"maximumScreenSpaceError\"),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {Cesium3DTilesetGraphics} [result] The object onto which to store the result.\n * @returns {Cesium3DTilesetGraphics} The modified result parameter or a new instance if one was not provided.\n */\nCesium3DTilesetGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new Cesium3DTilesetGraphics(this);\n  }\n  result.show = this.show;\n  result.uri = this.uri;\n  result.maximumScreenSpaceError = this.maximumScreenSpaceError;\n\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {Cesium3DTilesetGraphics} source The object to be merged into this object.\n */\nCesium3DTilesetGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.uri = defaultValue(this.uri, source.uri);\n  this.maximumScreenSpaceError = defaultValue(\n    this.maximumScreenSpaceError,\n    source.maximumScreenSpaceError\n  );\n};\n\nexport default Cesium3DTilesetGraphics;\n","import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Resource from \"../Core/Resource.js\";\nimport Cesium3DTileset from \"../Scene/Cesium3DTileset.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport Property from \"./Property.js\";\n\nconst modelMatrixScratch = new Matrix4();\n\n/**\n * A {@link Visualizer} which maps {@link Entity#tileset} to a {@link Cesium3DTileset}.\n * @alias Cesium3DTilesetVisualizer\n * @constructor\n *\n * @param {Scene} scene The scene the primitives will be rendered in.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\nfunction Cesium3DTilesetVisualizer(scene, entityCollection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError(\"scene is required.\");\n  }\n  if (!defined(entityCollection)) {\n    throw new DeveloperError(\"entityCollection is required.\");\n  }\n  //>>includeEnd('debug');\n\n  entityCollection.collectionChanged.addEventListener(\n    Cesium3DTilesetVisualizer.prototype._onCollectionChanged,\n    this\n  );\n\n  this._scene = scene;\n  this._primitives = scene.primitives;\n  this._entityCollection = entityCollection;\n  this._tilesetHash = {};\n  this._entitiesToVisualize = new AssociativeArray();\n  this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n\n/**\n * Updates models created this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} This function always returns true.\n */\nCesium3DTilesetVisualizer.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const entities = this._entitiesToVisualize.values;\n  const tilesetHash = this._tilesetHash;\n  const primitives = this._primitives;\n\n  for (let i = 0, len = entities.length; i < len; i++) {\n    const entity = entities[i];\n    const tilesetGraphics = entity._tileset;\n\n    let resource;\n    let tilesetData = tilesetHash[entity.id];\n    const show =\n      entity.isShowing &&\n      entity.isAvailable(time) &&\n      Property.getValueOrDefault(tilesetGraphics._show, time, true);\n\n    let modelMatrix;\n    if (show) {\n      modelMatrix = entity.computeModelMatrix(time, modelMatrixScratch);\n      resource = Resource.createIfNeeded(\n        Property.getValueOrUndefined(tilesetGraphics._uri, time)\n      );\n    }\n\n    if (!show) {\n      if (defined(tilesetData)) {\n        tilesetData.tilesetPrimitive.show = false;\n      }\n      continue;\n    }\n\n    let tileset = defined(tilesetData)\n      ? tilesetData.tilesetPrimitive\n      : undefined;\n    if (!defined(tileset) || resource.url !== tilesetData.url) {\n      if (defined(tileset)) {\n        primitives.removeAndDestroy(tileset);\n        delete tilesetHash[entity.id];\n      }\n      tileset = new Cesium3DTileset({\n        url: resource,\n      });\n      tileset.id = entity;\n      primitives.add(tileset);\n\n      tilesetData = {\n        tilesetPrimitive: tileset,\n        url: resource.url,\n        loadFail: false,\n      };\n      tilesetHash[entity.id] = tilesetData;\n\n      checkLoad(tileset, entity, tilesetHash);\n    }\n\n    tileset.show = true;\n    if (defined(modelMatrix)) {\n      tileset.modelMatrix = modelMatrix;\n    }\n    tileset.maximumScreenSpaceError = Property.getValueOrDefault(\n      tilesetGraphics.maximumScreenSpaceError,\n      time,\n      tileset.maximumScreenSpaceError\n    );\n  }\n\n  return true;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nCesium3DTilesetVisualizer.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nCesium3DTilesetVisualizer.prototype.destroy = function () {\n  this._entityCollection.collectionChanged.removeEventListener(\n    Cesium3DTilesetVisualizer.prototype._onCollectionChanged,\n    this\n  );\n  const entities = this._entitiesToVisualize.values;\n  const tilesetHash = this._tilesetHash;\n  const primitives = this._primitives;\n  for (let i = entities.length - 1; i > -1; i--) {\n    removeTileset(this, entities[i], tilesetHash, primitives);\n  }\n  return destroyObject(this);\n};\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nCesium3DTilesetVisualizer.prototype.getBoundingSphere = function (\n  entity,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const tilesetData = this._tilesetHash[entity.id];\n  if (!defined(tilesetData) || tilesetData.loadFail) {\n    return BoundingSphereState.FAILED;\n  }\n\n  const primitive = tilesetData.tilesetPrimitive;\n  if (!defined(primitive) || !primitive.show) {\n    return BoundingSphereState.FAILED;\n  }\n\n  if (!primitive.ready) {\n    return BoundingSphereState.PENDING;\n  }\n\n  BoundingSphere.clone(primitive.boundingSphere, result);\n\n  return BoundingSphereState.DONE;\n};\n\n/**\n * @private\n */\nCesium3DTilesetVisualizer.prototype._onCollectionChanged = function (\n  entityCollection,\n  added,\n  removed,\n  changed\n) {\n  let i;\n  let entity;\n  const entities = this._entitiesToVisualize;\n  const tilesetHash = this._tilesetHash;\n  const primitives = this._primitives;\n\n  for (i = added.length - 1; i > -1; i--) {\n    entity = added[i];\n    if (defined(entity._tileset)) {\n      entities.set(entity.id, entity);\n    }\n  }\n\n  for (i = changed.length - 1; i > -1; i--) {\n    entity = changed[i];\n    if (defined(entity._tileset)) {\n      entities.set(entity.id, entity);\n    } else {\n      removeTileset(this, entity, tilesetHash, primitives);\n      entities.remove(entity.id);\n    }\n  }\n\n  for (i = removed.length - 1; i > -1; i--) {\n    entity = removed[i];\n    removeTileset(this, entity, tilesetHash, primitives);\n    entities.remove(entity.id);\n  }\n};\n\nfunction removeTileset(visualizer, entity, tilesetHash, primitives) {\n  const tilesetData = tilesetHash[entity.id];\n  if (defined(tilesetData)) {\n    primitives.removeAndDestroy(tilesetData.tilesetPrimitive);\n    delete tilesetHash[entity.id];\n  }\n}\n\nfunction checkLoad(primitive, entity, tilesetHash) {\n  primitive.readyPromise.catch(function (error) {\n    console.error(error);\n    tilesetHash[entity.id].loadFail = true;\n  });\n}\nexport default Cesium3DTilesetVisualizer;\n","import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nconst defaultEvenColor = Color.WHITE;\nconst defaultOddColor = Color.BLACK;\nconst defaultRepeat = new Cartesian2(2.0, 2.0);\n\n/**\n * A {@link MaterialProperty} that maps to checkerboard {@link Material} uniforms.\n * @alias CheckerboardMaterialProperty\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Property|Color} [options.evenColor=Color.WHITE] A Property specifying the first {@link Color}.\n * @param {Property|Color} [options.oddColor=Color.BLACK] A Property specifying the second {@link Color}.\n * @param {Property|Cartesian2} [options.repeat=new Cartesian2(2.0, 2.0)] A {@link Cartesian2} Property specifying how many times the tiles repeat in each direction.\n */\nfunction CheckerboardMaterialProperty(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._definitionChanged = new Event();\n  this._evenColor = undefined;\n  this._evenColorSubscription = undefined;\n  this._oddColor = undefined;\n  this._oddColorSubscription = undefined;\n  this._repeat = undefined;\n  this._repeatSubscription = undefined;\n\n  this.evenColor = options.evenColor;\n  this.oddColor = options.oddColor;\n  this.repeat = options.repeat;\n}\n\nObject.defineProperties(CheckerboardMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof CheckerboardMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._evenColor) && //\n        Property.isConstant(this._oddColor) && //\n        Property.isConstant(this._repeat)\n      );\n    },\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof CheckerboardMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the Property specifying the first {@link Color}.\n   * @memberof CheckerboardMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default Color.WHITE\n   */\n  evenColor: createPropertyDescriptor(\"evenColor\"),\n\n  /**\n   * Gets or sets the Property specifying the second {@link Color}.\n   * @memberof CheckerboardMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  oddColor: createPropertyDescriptor(\"oddColor\"),\n\n  /**\n   * Gets or sets the {@link Cartesian2} Property specifying how many times the tiles repeat in each direction.\n   * @memberof CheckerboardMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default new Cartesian2(2.0, 2.0)\n   */\n  repeat: createPropertyDescriptor(\"repeat\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nCheckerboardMaterialProperty.prototype.getType = function (time) {\n  return \"Checkerboard\";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nCheckerboardMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n  result.lightColor = Property.getValueOrClonedDefault(\n    this._evenColor,\n    time,\n    defaultEvenColor,\n    result.lightColor\n  );\n  result.darkColor = Property.getValueOrClonedDefault(\n    this._oddColor,\n    time,\n    defaultOddColor,\n    result.darkColor\n  );\n  result.repeat = Property.getValueOrDefault(this._repeat, time, defaultRepeat);\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCheckerboardMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof CheckerboardMaterialProperty && //\n      Property.equals(this._evenColor, other._evenColor) && //\n      Property.equals(this._oddColor, other._oddColor) && //\n      Property.equals(this._repeat, other._repeat))\n  );\n};\nexport default CheckerboardMaterialProperty;\n","import Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link MaterialProperty} that maps to solid color {@link Material} uniforms.\n *\n * @param {Property|Color} [color=Color.WHITE] The {@link Color} Property to be used.\n *\n * @alias ColorMaterialProperty\n * @constructor\n */\nfunction ColorMaterialProperty(color) {\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n\n  this.color = color;\n}\n\nObject.defineProperties(ColorMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof ColorMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._color);\n    },\n  },\n\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof ColorMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link Color} {@link Property}.\n   * @memberof ColorMaterialProperty.prototype\n   * @type {Property|undefined}\n   * @default Color.WHITE\n   */\n  color: createPropertyDescriptor(\"color\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nColorMaterialProperty.prototype.getType = function (time) {\n  return \"Color\";\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nColorMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(result)) {\n    result = {};\n  }\n  result.color = Property.getValueOrClonedDefault(\n    this._color,\n    time,\n    Color.WHITE,\n    result.color\n  );\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nColorMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof ColorMaterialProperty && //\n      Property.equals(this._color, other._color))\n  );\n};\nexport default ColorMaterialProperty;\n","import createGuid from \"../Core/createGuid.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Entity from \"./Entity.js\";\nimport EntityCollection from \"./EntityCollection.js\";\n\nconst entityOptionsScratch = {\n  id: undefined,\n};\nconst entityIdScratch = new Array(2);\n\nfunction clean(entity) {\n  const propertyNames = entity.propertyNames;\n  const propertyNamesLength = propertyNames.length;\n  for (let i = 0; i < propertyNamesLength; i++) {\n    entity[propertyNames[i]] = undefined;\n  }\n  entity._name = undefined;\n  entity._availability = undefined;\n}\n\nfunction subscribeToEntity(that, eventHash, collectionId, entity) {\n  entityIdScratch[0] = collectionId;\n  entityIdScratch[1] = entity.id;\n  eventHash[\n    JSON.stringify(entityIdScratch)\n  ] = entity.definitionChanged.addEventListener(\n    CompositeEntityCollection.prototype._onDefinitionChanged,\n    that\n  );\n}\n\nfunction unsubscribeFromEntity(that, eventHash, collectionId, entity) {\n  entityIdScratch[0] = collectionId;\n  entityIdScratch[1] = entity.id;\n  const id = JSON.stringify(entityIdScratch);\n  eventHash[id]();\n  eventHash[id] = undefined;\n}\n\nfunction recomposite(that) {\n  that._shouldRecomposite = true;\n  if (that._suspendCount !== 0) {\n    return;\n  }\n\n  const collections = that._collections;\n  const collectionsLength = collections.length;\n\n  const collectionsCopy = that._collectionsCopy;\n  const collectionsCopyLength = collectionsCopy.length;\n\n  let i;\n  let entity;\n  let entities;\n  let iEntities;\n  let collection;\n  const composite = that._composite;\n  const newEntities = new EntityCollection(that);\n  const eventHash = that._eventHash;\n  let collectionId;\n\n  for (i = 0; i < collectionsCopyLength; i++) {\n    collection = collectionsCopy[i];\n    collection.collectionChanged.removeEventListener(\n      CompositeEntityCollection.prototype._onCollectionChanged,\n      that\n    );\n    entities = collection.values;\n    collectionId = collection.id;\n    for (iEntities = entities.length - 1; iEntities > -1; iEntities--) {\n      entity = entities[iEntities];\n      unsubscribeFromEntity(that, eventHash, collectionId, entity);\n    }\n  }\n\n  for (i = collectionsLength - 1; i >= 0; i--) {\n    collection = collections[i];\n    collection.collectionChanged.addEventListener(\n      CompositeEntityCollection.prototype._onCollectionChanged,\n      that\n    );\n\n    //Merge all of the existing entities.\n    entities = collection.values;\n    collectionId = collection.id;\n    for (iEntities = entities.length - 1; iEntities > -1; iEntities--) {\n      entity = entities[iEntities];\n      subscribeToEntity(that, eventHash, collectionId, entity);\n\n      let compositeEntity = newEntities.getById(entity.id);\n      if (!defined(compositeEntity)) {\n        compositeEntity = composite.getById(entity.id);\n        if (!defined(compositeEntity)) {\n          entityOptionsScratch.id = entity.id;\n          compositeEntity = new Entity(entityOptionsScratch);\n        } else {\n          clean(compositeEntity);\n        }\n        newEntities.add(compositeEntity);\n      }\n      compositeEntity.merge(entity);\n    }\n  }\n  that._collectionsCopy = collections.slice(0);\n\n  composite.suspendEvents();\n  composite.removeAll();\n  const newEntitiesArray = newEntities.values;\n  for (i = 0; i < newEntitiesArray.length; i++) {\n    composite.add(newEntitiesArray[i]);\n  }\n  composite.resumeEvents();\n}\n\n/**\n * Non-destructively composites multiple {@link EntityCollection} instances into a single collection.\n * If a Entity with the same ID exists in multiple collections, it is non-destructively\n * merged into a single new entity instance.  If an entity has the same property in multiple\n * collections, the property of the Entity in the last collection of the list it\n * belongs to is used.  CompositeEntityCollection can be used almost anywhere that a\n * EntityCollection is used.\n *\n * @alias CompositeEntityCollection\n * @constructor\n *\n * @param {EntityCollection[]} [collections] The initial list of EntityCollection instances to merge.\n * @param {DataSource|CompositeEntityCollection} [owner] The data source (or composite entity collection) which created this collection.\n */\nfunction CompositeEntityCollection(collections, owner) {\n  this._owner = owner;\n  this._composite = new EntityCollection(this);\n  this._suspendCount = 0;\n  this._collections = defined(collections) ? collections.slice() : [];\n  this._collectionsCopy = [];\n  this._id = createGuid();\n  this._eventHash = {};\n  recomposite(this);\n  this._shouldRecomposite = false;\n}\n\nObject.defineProperties(CompositeEntityCollection.prototype, {\n  /**\n   * Gets the event that is fired when entities are added or removed from the collection.\n   * The generated event is a {@link EntityCollection.collectionChangedEventCallback}.\n   * @memberof CompositeEntityCollection.prototype\n   * @readonly\n   * @type {Event}\n   */\n  collectionChanged: {\n    get: function () {\n      return this._composite._collectionChanged;\n    },\n  },\n  /**\n   * Gets a globally unique identifier for this collection.\n   * @memberof CompositeEntityCollection.prototype\n   * @readonly\n   * @type {String}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n  /**\n   * Gets the array of Entity instances in the collection.\n   * This array should not be modified directly.\n   * @memberof CompositeEntityCollection.prototype\n   * @readonly\n   * @type {Entity[]}\n   */\n  values: {\n    get: function () {\n      return this._composite.values;\n    },\n  },\n  /**\n   * Gets the owner of this composite entity collection, ie. the data source or composite entity collection which created it.\n   * @memberof CompositeEntityCollection.prototype\n   * @readonly\n   * @type {DataSource|CompositeEntityCollection}\n   */\n  owner: {\n    get: function () {\n      return this._owner;\n    },\n  },\n});\n\n/**\n * Adds a collection to the composite.\n *\n * @param {EntityCollection} collection the collection to add.\n * @param {Number} [index] the index to add the collection at.  If omitted, the collection will\n *                         added on top of all existing collections.\n *\n * @exception {DeveloperError} index, if supplied, must be greater than or equal to zero and less than or equal to the number of collections.\n */\nCompositeEntityCollection.prototype.addCollection = function (\n  collection,\n  index\n) {\n  const hasIndex = defined(index);\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(collection)) {\n    throw new DeveloperError(\"collection is required.\");\n  }\n  if (hasIndex) {\n    if (index < 0) {\n      throw new DeveloperError(\"index must be greater than or equal to zero.\");\n    } else if (index > this._collections.length) {\n      throw new DeveloperError(\n        \"index must be less than or equal to the number of collections.\"\n      );\n    }\n  }\n  //>>includeEnd('debug');\n\n  if (!hasIndex) {\n    index = this._collections.length;\n    this._collections.push(collection);\n  } else {\n    this._collections.splice(index, 0, collection);\n  }\n\n  recomposite(this);\n};\n\n/**\n * Removes a collection from this composite, if present.\n *\n * @param {EntityCollection} collection The collection to remove.\n * @returns {Boolean} true if the collection was in the composite and was removed,\n *                    false if the collection was not in the composite.\n */\nCompositeEntityCollection.prototype.removeCollection = function (collection) {\n  const index = this._collections.indexOf(collection);\n  if (index !== -1) {\n    this._collections.splice(index, 1);\n    recomposite(this);\n    return true;\n  }\n  return false;\n};\n\n/**\n * Removes all collections from this composite.\n */\nCompositeEntityCollection.prototype.removeAllCollections = function () {\n  this._collections.length = 0;\n  recomposite(this);\n};\n\n/**\n * Checks to see if the composite contains a given collection.\n *\n * @param {EntityCollection} collection the collection to check for.\n * @returns {Boolean} true if the composite contains the collection, false otherwise.\n */\nCompositeEntityCollection.prototype.containsCollection = function (collection) {\n  return this._collections.indexOf(collection) !== -1;\n};\n\n/**\n * Returns true if the provided entity is in this collection, false otherwise.\n *\n * @param {Entity} entity The entity.\n * @returns {Boolean} true if the provided entity is in this collection, false otherwise.\n */\nCompositeEntityCollection.prototype.contains = function (entity) {\n  return this._composite.contains(entity);\n};\n\n/**\n * Determines the index of a given collection in the composite.\n *\n * @param {EntityCollection} collection The collection to find the index of.\n * @returns {Number} The index of the collection in the composite, or -1 if the collection does not exist in the composite.\n */\nCompositeEntityCollection.prototype.indexOfCollection = function (collection) {\n  return this._collections.indexOf(collection);\n};\n\n/**\n * Gets a collection by index from the composite.\n *\n * @param {Number} index the index to retrieve.\n */\nCompositeEntityCollection.prototype.getCollection = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(index)) {\n    throw new DeveloperError(\"index is required.\", \"index\");\n  }\n  //>>includeEnd('debug');\n\n  return this._collections[index];\n};\n\n/**\n * Gets the number of collections in this composite.\n */\nCompositeEntityCollection.prototype.getCollectionsLength = function () {\n  return this._collections.length;\n};\n\nfunction getCollectionIndex(collections, collection) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(collection)) {\n    throw new DeveloperError(\"collection is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const index = collections.indexOf(collection);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (index === -1) {\n    throw new DeveloperError(\"collection is not in this composite.\");\n  }\n  //>>includeEnd('debug');\n\n  return index;\n}\n\nfunction swapCollections(composite, i, j) {\n  const arr = composite._collections;\n  i = CesiumMath.clamp(i, 0, arr.length - 1);\n  j = CesiumMath.clamp(j, 0, arr.length - 1);\n\n  if (i === j) {\n    return;\n  }\n\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n\n  recomposite(composite);\n}\n\n/**\n * Raises a collection up one position in the composite.\n *\n * @param {EntityCollection} collection the collection to move.\n *\n * @exception {DeveloperError} collection is not in this composite.\n */\nCompositeEntityCollection.prototype.raiseCollection = function (collection) {\n  const index = getCollectionIndex(this._collections, collection);\n  swapCollections(this, index, index + 1);\n};\n\n/**\n * Lowers a collection down one position in the composite.\n *\n * @param {EntityCollection} collection the collection to move.\n *\n * @exception {DeveloperError} collection is not in this composite.\n */\nCompositeEntityCollection.prototype.lowerCollection = function (collection) {\n  const index = getCollectionIndex(this._collections, collection);\n  swapCollections(this, index, index - 1);\n};\n\n/**\n * Raises a collection to the top of the composite.\n *\n * @param {EntityCollection} collection the collection to move.\n *\n * @exception {DeveloperError} collection is not in this composite.\n */\nCompositeEntityCollection.prototype.raiseCollectionToTop = function (\n  collection\n) {\n  const index = getCollectionIndex(this._collections, collection);\n  if (index === this._collections.length - 1) {\n    return;\n  }\n  this._collections.splice(index, 1);\n  this._collections.push(collection);\n\n  recomposite(this);\n};\n\n/**\n * Lowers a collection to the bottom of the composite.\n *\n * @param {EntityCollection} collection the collection to move.\n *\n * @exception {DeveloperError} collection is not in this composite.\n */\nCompositeEntityCollection.prototype.lowerCollectionToBottom = function (\n  collection\n) {\n  const index = getCollectionIndex(this._collections, collection);\n  if (index === 0) {\n    return;\n  }\n  this._collections.splice(index, 1);\n  this._collections.splice(0, 0, collection);\n\n  recomposite(this);\n};\n\n/**\n * Prevents {@link EntityCollection#collectionChanged} events from being raised\n * until a corresponding call is made to {@link EntityCollection#resumeEvents}, at which\n * point a single event will be raised that covers all suspended operations.\n * This allows for many items to be added and removed efficiently.\n * While events are suspended, recompositing of the collections will\n * also be suspended, as this can be a costly operation.\n * This function can be safely called multiple times as long as there\n * are corresponding calls to {@link EntityCollection#resumeEvents}.\n */\nCompositeEntityCollection.prototype.suspendEvents = function () {\n  this._suspendCount++;\n  this._composite.suspendEvents();\n};\n\n/**\n * Resumes raising {@link EntityCollection#collectionChanged} events immediately\n * when an item is added or removed.  Any modifications made while while events were suspended\n * will be triggered as a single event when this function is called.  This function also ensures\n * the collection is recomposited if events are also resumed.\n * This function is reference counted and can safely be called multiple times as long as there\n * are corresponding calls to {@link EntityCollection#resumeEvents}.\n *\n * @exception {DeveloperError} resumeEvents can not be called before suspendEvents.\n */\nCompositeEntityCollection.prototype.resumeEvents = function () {\n  //>>includeStart('debug', pragmas.debug);\n  if (this._suspendCount === 0) {\n    throw new DeveloperError(\n      \"resumeEvents can not be called before suspendEvents.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  this._suspendCount--;\n  // recomposite before triggering events (but only if required for performance) that might depend on a composited collection\n  if (this._shouldRecomposite && this._suspendCount === 0) {\n    recomposite(this);\n    this._shouldRecomposite = false;\n  }\n\n  this._composite.resumeEvents();\n};\n\n/**\n * Computes the maximum availability of the entities in the collection.\n * If the collection contains a mix of infinitely available data and non-infinite data,\n * It will return the interval pertaining to the non-infinite data only.  If all\n * data is infinite, an infinite interval will be returned.\n *\n * @returns {TimeInterval} The availability of entities in the collection.\n */\nCompositeEntityCollection.prototype.computeAvailability = function () {\n  return this._composite.computeAvailability();\n};\n\n/**\n * Gets an entity with the specified id.\n *\n * @param {String} id The id of the entity to retrieve.\n * @returns {Entity|undefined} The entity with the provided id or undefined if the id did not exist in the collection.\n */\nCompositeEntityCollection.prototype.getById = function (id) {\n  return this._composite.getById(id);\n};\n\nCompositeEntityCollection.prototype._onCollectionChanged = function (\n  collection,\n  added,\n  removed\n) {\n  const collections = this._collectionsCopy;\n  const collectionsLength = collections.length;\n  const composite = this._composite;\n  composite.suspendEvents();\n\n  let i;\n  let q;\n  let entity;\n  let compositeEntity;\n  const removedLength = removed.length;\n  const eventHash = this._eventHash;\n  const collectionId = collection.id;\n  for (i = 0; i < removedLength; i++) {\n    const removedEntity = removed[i];\n    unsubscribeFromEntity(this, eventHash, collectionId, removedEntity);\n\n    const removedId = removedEntity.id;\n    //Check if the removed entity exists in any of the remaining collections\n    //If so, we clean and remerge it.\n    for (q = collectionsLength - 1; q >= 0; q--) {\n      entity = collections[q].getById(removedId);\n      if (defined(entity)) {\n        if (!defined(compositeEntity)) {\n          compositeEntity = composite.getById(removedId);\n          clean(compositeEntity);\n        }\n        compositeEntity.merge(entity);\n      }\n    }\n    //We never retrieved the compositeEntity, which means it no longer\n    //exists in any of the collections, remove it from the composite.\n    if (!defined(compositeEntity)) {\n      composite.removeById(removedId);\n    }\n    compositeEntity = undefined;\n  }\n\n  const addedLength = added.length;\n  for (i = 0; i < addedLength; i++) {\n    const addedEntity = added[i];\n    subscribeToEntity(this, eventHash, collectionId, addedEntity);\n\n    const addedId = addedEntity.id;\n    //We know the added entity exists in at least one collection,\n    //but we need to check all collections and re-merge in order\n    //to maintain the priority of properties.\n    for (q = collectionsLength - 1; q >= 0; q--) {\n      entity = collections[q].getById(addedId);\n      if (defined(entity)) {\n        if (!defined(compositeEntity)) {\n          compositeEntity = composite.getById(addedId);\n          if (!defined(compositeEntity)) {\n            entityOptionsScratch.id = addedId;\n            compositeEntity = new Entity(entityOptionsScratch);\n            composite.add(compositeEntity);\n          } else {\n            clean(compositeEntity);\n          }\n        }\n        compositeEntity.merge(entity);\n      }\n    }\n    compositeEntity = undefined;\n  }\n\n  composite.resumeEvents();\n};\n\nCompositeEntityCollection.prototype._onDefinitionChanged = function (\n  entity,\n  propertyName,\n  newValue,\n  oldValue\n) {\n  const collections = this._collections;\n  const composite = this._composite;\n\n  const collectionsLength = collections.length;\n  const id = entity.id;\n  const compositeEntity = composite.getById(id);\n  let compositeProperty = compositeEntity[propertyName];\n  const newProperty = !defined(compositeProperty);\n\n  let firstTime = true;\n  for (let q = collectionsLength - 1; q >= 0; q--) {\n    const innerEntity = collections[q].getById(entity.id);\n    if (defined(innerEntity)) {\n      const property = innerEntity[propertyName];\n      if (defined(property)) {\n        if (firstTime) {\n          firstTime = false;\n          //We only want to clone if the property is also mergeable.\n          //This ensures that leaf properties are referenced and not copied,\n          //which is the entire point of compositing.\n          if (defined(property.merge) && defined(property.clone)) {\n            compositeProperty = property.clone(compositeProperty);\n          } else {\n            compositeProperty = property;\n            break;\n          }\n        }\n        compositeProperty.merge(property);\n      }\n    }\n  }\n\n  if (\n    newProperty &&\n    compositeEntity.propertyNames.indexOf(propertyName) === -1\n  ) {\n    compositeEntity.addProperty(propertyName);\n  }\n\n  compositeEntity[propertyName] = compositeProperty;\n};\nexport default CompositeEntityCollection;\n","import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport CompositeProperty from \"./CompositeProperty.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link CompositeProperty} which is also a {@link MaterialProperty}.\n *\n * @alias CompositeMaterialProperty\n * @constructor\n */\nfunction CompositeMaterialProperty() {\n  this._definitionChanged = new Event();\n  this._composite = new CompositeProperty();\n  this._composite.definitionChanged.addEventListener(\n    CompositeMaterialProperty.prototype._raiseDefinitionChanged,\n    this\n  );\n}\n\nObject.defineProperties(CompositeMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof CompositeMaterialProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return this._composite.isConstant;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value.\n   * @memberof CompositeMaterialProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets the interval collection.\n   * @memberof CompositeMaterialProperty.prototype\n   *\n   * @type {TimeIntervalCollection}\n   */\n  intervals: {\n    get: function () {\n      return this._composite._intervals;\n    },\n  },\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {String} The type of material.\n */\nCompositeMaterialProperty.prototype.getType = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required\");\n  }\n  //>>includeEnd('debug');\n\n  const innerProperty = this._composite._intervals.findDataForIntervalContainingDate(\n    time\n  );\n  if (defined(innerProperty)) {\n    return innerProperty.getType(time);\n  }\n  return undefined;\n};\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nCompositeMaterialProperty.prototype.getValue = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required\");\n  }\n  //>>includeEnd('debug');\n\n  const innerProperty = this._composite._intervals.findDataForIntervalContainingDate(\n    time\n  );\n  if (defined(innerProperty)) {\n    return innerProperty.getValue(time, result);\n  }\n  return undefined;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCompositeMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof CompositeMaterialProperty && //\n      this._composite.equals(other._composite, Property.equals))\n  );\n};\n\n/**\n * @private\n */\nCompositeMaterialProperty.prototype._raiseDefinitionChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\nexport default CompositeMaterialProperty;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport CompositeProperty from \"./CompositeProperty.js\";\nimport Property from \"./Property.js\";\n\n/**\n * A {@link CompositeProperty} which is also a {@link PositionProperty}.\n *\n * @alias CompositePositionProperty\n * @constructor\n *\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n */\nfunction CompositePositionProperty(referenceFrame) {\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n  this._definitionChanged = new Event();\n  this._composite = new CompositeProperty();\n  this._composite.definitionChanged.addEventListener(\n    CompositePositionProperty.prototype._raiseDefinitionChanged,\n    this\n  );\n}\n\nObject.defineProperties(CompositePositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof CompositePositionProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return this._composite.isConstant;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value.\n   * @memberof CompositePositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets the interval collection.\n   * @memberof CompositePositionProperty.prototype\n   *\n   * @type {TimeIntervalCollection}\n   */\n  intervals: {\n    get: function () {\n      return this._composite.intervals;\n    },\n  },\n  /**\n   * Gets or sets the reference frame which this position presents itself as.\n   * Each PositionProperty making up this object has it's own reference frame,\n   * so this property merely exposes a \"preferred\" reference frame for clients\n   * to use.\n   * @memberof CompositePositionProperty.prototype\n   *\n   * @type {ReferenceFrame}\n   */\n  referenceFrame: {\n    get: function () {\n      return this._referenceFrame;\n    },\n    set: function (value) {\n      this._referenceFrame = value;\n    },\n  },\n});\n\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3 | undefined} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nCompositePositionProperty.prototype.getValue = function (time, result) {\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3 | undefined} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nCompositePositionProperty.prototype.getValueInReferenceFrame = function (\n  time,\n  referenceFrame,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const innerProperty = this._composite._intervals.findDataForIntervalContainingDate(\n    time\n  );\n  if (defined(innerProperty)) {\n    return innerProperty.getValueInReferenceFrame(time, referenceFrame, result);\n  }\n  return undefined;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCompositePositionProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof CompositePositionProperty && //\n      this._referenceFrame === other._referenceFrame && //\n      this._composite.equals(other._composite, Property.equals))\n  );\n};\n\n/**\n * @private\n */\nCompositePositionProperty.prototype._raiseDefinitionChanged = function () {\n  this._definitionChanged.raiseEvent(this);\n};\nexport default CompositePositionProperty;\n","import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport TimeIntervalCollection from \"../Core/TimeIntervalCollection.js\";\nimport Property from \"./Property.js\";\n\nfunction subscribeAll(property, eventHelper, definitionChanged, intervals) {\n  function callback() {\n    definitionChanged.raiseEvent(property);\n  }\n  const items = [];\n  eventHelper.removeAll();\n  const length = intervals.length;\n  for (let i = 0; i < length; i++) {\n    const interval = intervals.get(i);\n    if (defined(interval.data) && items.indexOf(interval.data) === -1) {\n      eventHelper.add(interval.data.definitionChanged, callback);\n    }\n  }\n}\n\n/**\n * A {@link Property} which is defined by a {@link TimeIntervalCollection}, where the\n * data property of each {@link TimeInterval} is another Property instance which is\n * evaluated at the provided time.\n *\n * @alias CompositeProperty\n * @constructor\n *\n *\n * @example\n * const constantProperty = ...;\n * const sampledProperty = ...;\n *\n * //Create a composite property from two previously defined properties\n * //where the property is valid on August 1st, 2012 and uses a constant\n * //property for the first half of the day and a sampled property for the\n * //remaining half.\n * const composite = new Cesium.CompositeProperty();\n * composite.intervals.addInterval(Cesium.TimeInterval.fromIso8601({\n *     iso8601 : '2012-08-01T00:00:00.00Z/2012-08-01T12:00:00.00Z',\n *     data : constantProperty\n * }));\n * composite.intervals.addInterval(Cesium.TimeInterval.fromIso8601({\n *     iso8601 : '2012-08-01T12:00:00.00Z/2012-08-02T00:00:00.00Z',\n *     isStartIncluded : false,\n *     isStopIncluded : false,\n *     data : sampledProperty\n * }));\n *\n * @see CompositeMaterialProperty\n * @see CompositePositionProperty\n */\nfunction CompositeProperty() {\n  this._eventHelper = new EventHelper();\n  this._definitionChanged = new Event();\n  this._intervals = new TimeIntervalCollection();\n  this._intervals.changedEvent.addEventListener(\n    CompositeProperty.prototype._intervalsChanged,\n    this\n  );\n}\n\nObject.defineProperties(CompositeProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof CompositeProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return this._intervals.isEmpty;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value.\n   * @memberof CompositeProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets the interval collection.\n   * @memberof CompositeProperty.prototype\n   *\n   * @type {TimeIntervalCollection}\n   */\n  intervals: {\n    get: function () {\n      return this._intervals;\n    },\n  },\n});\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nCompositeProperty.prototype.getValue = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required\");\n  }\n  //>>includeEnd('debug');\n\n  const innerProperty = this._intervals.findDataForIntervalContainingDate(time);\n  if (defined(innerProperty)) {\n    return innerProperty.getValue(time, result);\n  }\n  return undefined;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCompositeProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof CompositeProperty && //\n      this._intervals.equals(other._intervals, Property.equals))\n  );\n};\n\n/**\n * @private\n */\nCompositeProperty.prototype._intervalsChanged = function () {\n  subscribeAll(\n    this,\n    this._eventHelper,\n    this._definitionChanged,\n    this._intervals\n  );\n  this._definitionChanged.raiseEvent(this);\n};\nexport default CompositeProperty;\n","import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport PositionProperty from \"./PositionProperty.js\";\n\n/**\n * A {@link PositionProperty} whose value does not change in respect to the\n * {@link ReferenceFrame} in which is it defined.\n *\n * @alias ConstantPositionProperty\n * @constructor\n *\n * @param {Cartesian3} [value] The property value.\n * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n */\nfunction ConstantPositionProperty(value, referenceFrame) {\n  this._definitionChanged = new Event();\n  this._value = Cartesian3.clone(value);\n  this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n}\n\nObject.defineProperties(ConstantPositionProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof ConstantPositionProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        !defined(this._value) || this._referenceFrame === ReferenceFrame.FIXED\n      );\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof ConstantPositionProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets the reference frame in which the position is defined.\n   * @memberof ConstantPositionProperty.prototype\n   * @type {ReferenceFrame}\n   * @default ReferenceFrame.FIXED;\n   */\n  referenceFrame: {\n    get: function () {\n      return this._referenceFrame;\n    },\n  },\n});\n\n/**\n * Gets the value of the property at the provided time in the fixed frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nConstantPositionProperty.prototype.getValue = function (time, result) {\n  return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n};\n\n/**\n * Sets the value of the property.\n *\n * @param {Cartesian3} value The property value.\n * @param {ReferenceFrame} [referenceFrame=this.referenceFrame] The reference frame in which the position is defined.\n */\nConstantPositionProperty.prototype.setValue = function (value, referenceFrame) {\n  let definitionChanged = false;\n  if (!Cartesian3.equals(this._value, value)) {\n    definitionChanged = true;\n    this._value = Cartesian3.clone(value);\n  }\n  if (defined(referenceFrame) && this._referenceFrame !== referenceFrame) {\n    definitionChanged = true;\n    this._referenceFrame = referenceFrame;\n  }\n  if (definitionChanged) {\n    this._definitionChanged.raiseEvent(this);\n  }\n};\n\n/**\n * Gets the value of the property at the provided time and in the provided reference frame.\n *\n * @param {JulianDate} time The time for which to retrieve the value.\n * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nConstantPositionProperty.prototype.getValueInReferenceFrame = function (\n  time,\n  referenceFrame,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  if (!defined(referenceFrame)) {\n    throw new DeveloperError(\"referenceFrame is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return PositionProperty.convertToReferenceFrame(\n    time,\n    this._value,\n    this._referenceFrame,\n    referenceFrame,\n    result\n  );\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nConstantPositionProperty.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (other instanceof ConstantPositionProperty &&\n      Cartesian3.equals(this._value, other._value) &&\n      this._referenceFrame === other._referenceFrame)\n  );\n};\nexport default ConstantPositionProperty;\n","import defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\n\n/**\n * A {@link Property} whose value does not change with respect to simulation time.\n *\n * @alias ConstantProperty\n * @constructor\n *\n * @param {*} [value] The property value.\n *\n * @see ConstantPositionProperty\n */\nfunction ConstantProperty(value) {\n  this._value = undefined;\n  this._hasClone = false;\n  this._hasEquals = false;\n  this._definitionChanged = new Event();\n  this.setValue(value);\n}\n\nObject.defineProperties(ConstantProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * This property always returns <code>true</code>.\n   * @memberof ConstantProperty.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isConstant: {\n    value: true,\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is changed whenever setValue is called with data different\n   * than the current value.\n   * @memberof ConstantProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n});\n\n/**\n * Gets the value of the property.\n *\n * @param {JulianDate} [time] The time for which to retrieve the value.  This parameter is unused since the value does not change with respect to time.\n * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nConstantProperty.prototype.getValue = function (time, result) {\n  return this._hasClone ? this._value.clone(result) : this._value;\n};\n\n/**\n * Sets the value of the property.\n *\n * @param {*} value The property value.\n */\nConstantProperty.prototype.setValue = function (value) {\n  const oldValue = this._value;\n  if (oldValue !== value) {\n    const isDefined = defined(value);\n    const hasClone = isDefined && typeof value.clone === \"function\";\n    const hasEquals = isDefined && typeof value.equals === \"function\";\n\n    const changed = !hasEquals || !value.equals(oldValue);\n    if (changed) {\n      this._hasClone = hasClone;\n      this._hasEquals = hasEquals;\n      this._value = !hasClone ? value : value.clone(this._value);\n      this._definitionChanged.raiseEvent(this);\n    }\n  }\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nConstantProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof ConstantProperty && //\n      ((!this._hasEquals && this._value === other._value) || //\n        (this._hasEquals && this._value.equals(other._value))))\n  );\n};\n\n/**\n * Gets this property's value.\n *\n * @returns {*} This property's value.\n */\nConstantProperty.prototype.valueOf = function () {\n  return this._value;\n};\n\n/**\n * Creates a string representing this property's value.\n *\n * @returns {String} A string representing the property's value.\n */\nConstantProperty.prototype.toString = function () {\n  return String(this._value);\n};\nexport default ConstantProperty;\n","import ApproximateTerrainHeights from \"../Core/ApproximateTerrainHeights.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport CorridorGeometry from \"../Core/CorridorGeometry.js\";\nimport CorridorOutlineGeometry from \"../Core/CorridorOutlineGeometry.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport GroundGeometryUpdater from \"./GroundGeometryUpdater.js\";\nimport Property from \"./Property.js\";\n\nconst scratchColor = new Color();\nconst defaultOffset = Cartesian3.ZERO;\nconst offsetScratch = new Cartesian3();\nconst scratchRectangle = new Rectangle();\n\nfunction CorridorGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.positions = undefined;\n  this.width = undefined;\n  this.cornerType = undefined;\n  this.height = undefined;\n  this.extrudedHeight = undefined;\n  this.granularity = undefined;\n  this.offsetAttribute = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for corridors.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias CorridorGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction CorridorGeometryUpdater(entity, scene) {\n  GroundGeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new CorridorGeometryOptions(entity),\n    geometryPropertyName: \"corridor\",\n    observedPropertyNames: [\"availability\", \"corridor\"],\n  });\n\n  this._onEntityPropertyChanged(entity, \"corridor\", entity.corridor, undefined);\n}\n\nif (defined(Object.create)) {\n  CorridorGeometryUpdater.prototype = Object.create(\n    GroundGeometryUpdater.prototype\n  );\n  CorridorGeometryUpdater.prototype.constructor = CorridorGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nCorridorGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._fillProperty.getValue(time)\n    ),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n      this._distanceDisplayConditionProperty.getValue(time)\n    ),\n    offset: undefined,\n    color: undefined,\n  };\n\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    let currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n  }\n\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new CorridorGeometry(this._options),\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nCorridorGeometryUpdater.prototype.createOutlineGeometryInstance = function (\n  time\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent an outlined geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor\n  );\n\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._showOutlineProperty.getValue(time)\n    ),\n    color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n      this._distanceDisplayConditionProperty.getValue(time)\n    ),\n    offset: undefined,\n  };\n\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new CorridorOutlineGeometry(this._options),\n    attributes: attributes,\n  });\n};\n\nCorridorGeometryUpdater.prototype._computeCenter = function (time, result) {\n  const positions = Property.getValueOrUndefined(\n    this._entity.corridor.positions,\n    time\n  );\n  if (!defined(positions) || positions.length === 0) {\n    return;\n  }\n  return Cartesian3.clone(\n    positions[Math.floor(positions.length / 2.0)],\n    result\n  );\n};\n\nCorridorGeometryUpdater.prototype._isHidden = function (entity, corridor) {\n  return (\n    !defined(corridor.positions) ||\n    !defined(corridor.width) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, corridor)\n  );\n};\n\nCorridorGeometryUpdater.prototype._isDynamic = function (entity, corridor) {\n  return (\n    !corridor.positions.isConstant || //\n    !Property.isConstant(corridor.height) || //\n    !Property.isConstant(corridor.extrudedHeight) || //\n    !Property.isConstant(corridor.granularity) || //\n    !Property.isConstant(corridor.width) || //\n    !Property.isConstant(corridor.outlineWidth) || //\n    !Property.isConstant(corridor.cornerType) || //\n    !Property.isConstant(corridor.zIndex) || //\n    (this._onTerrain &&\n      !Property.isConstant(this._materialProperty) &&\n      !(this._materialProperty instanceof ColorMaterialProperty))\n  );\n};\n\nCorridorGeometryUpdater.prototype._setStaticOptions = function (\n  entity,\n  corridor\n) {\n  let heightValue = Property.getValueOrUndefined(\n    corridor.height,\n    Iso8601.MINIMUM_VALUE\n  );\n  const heightReferenceValue = Property.getValueOrDefault(\n    corridor.heightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE\n  );\n  let extrudedHeightValue = Property.getValueOrUndefined(\n    corridor.extrudedHeight,\n    Iso8601.MINIMUM_VALUE\n  );\n  const extrudedHeightReferenceValue = Property.getValueOrDefault(\n    corridor.extrudedHeightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE\n  );\n  if (defined(extrudedHeightValue) && !defined(heightValue)) {\n    heightValue = 0;\n  }\n\n  const options = this._options;\n  options.vertexFormat =\n    this._materialProperty instanceof ColorMaterialProperty\n      ? PerInstanceColorAppearance.VERTEX_FORMAT\n      : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.positions = corridor.positions.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.positions\n  );\n  options.width = corridor.width.getValue(Iso8601.MINIMUM_VALUE);\n  options.granularity = Property.getValueOrUndefined(\n    corridor.granularity,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.cornerType = Property.getValueOrUndefined(\n    corridor.cornerType,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(\n    heightValue,\n    heightReferenceValue,\n    extrudedHeightValue,\n    extrudedHeightReferenceValue\n  );\n  options.height = GroundGeometryUpdater.getGeometryHeight(\n    heightValue,\n    heightReferenceValue\n  );\n\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(\n    extrudedHeightValue,\n    extrudedHeightReferenceValue\n  );\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(\n      CorridorGeometry.computeRectangle(options, scratchRectangle)\n    ).minimumTerrainHeight;\n  }\n\n  options.extrudedHeight = extrudedHeightValue;\n};\n\nCorridorGeometryUpdater.DynamicGeometryUpdater = DynamicCorridorGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicCorridorGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives\n  );\n}\n\nif (defined(Object.create)) {\n  DynamicCorridorGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype\n  );\n  DynamicCorridorGeometryUpdater.prototype.constructor = DynamicCorridorGeometryUpdater;\n}\n\nDynamicCorridorGeometryUpdater.prototype._isHidden = function (\n  entity,\n  corridor,\n  time\n) {\n  const options = this._options;\n  return (\n    !defined(options.positions) ||\n    !defined(options.width) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(\n      this,\n      entity,\n      corridor,\n      time\n    )\n  );\n};\n\nDynamicCorridorGeometryUpdater.prototype._setOptions = function (\n  entity,\n  corridor,\n  time\n) {\n  const options = this._options;\n  let heightValue = Property.getValueOrUndefined(corridor.height, time);\n  const heightReferenceValue = Property.getValueOrDefault(\n    corridor.heightReference,\n    time,\n    HeightReference.NONE\n  );\n  let extrudedHeightValue = Property.getValueOrUndefined(\n    corridor.extrudedHeight,\n    time\n  );\n  const extrudedHeightReferenceValue = Property.getValueOrDefault(\n    corridor.extrudedHeightReference,\n    time,\n    HeightReference.NONE\n  );\n  if (defined(extrudedHeightValue) && !defined(heightValue)) {\n    heightValue = 0;\n  }\n\n  options.positions = Property.getValueOrUndefined(corridor.positions, time);\n  options.width = Property.getValueOrUndefined(corridor.width, time);\n  options.granularity = Property.getValueOrUndefined(\n    corridor.granularity,\n    time\n  );\n  options.cornerType = Property.getValueOrUndefined(corridor.cornerType, time);\n  options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(\n    heightValue,\n    heightReferenceValue,\n    extrudedHeightValue,\n    extrudedHeightReferenceValue\n  );\n  options.height = GroundGeometryUpdater.getGeometryHeight(\n    heightValue,\n    heightReferenceValue\n  );\n\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(\n    extrudedHeightValue,\n    extrudedHeightReferenceValue\n  );\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(\n      CorridorGeometry.computeRectangle(options, scratchRectangle)\n    ).minimumTerrainHeight;\n  }\n\n  options.extrudedHeight = extrudedHeightValue;\n};\nexport default CorridorGeometryUpdater;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {Object} CorridorGraphics.ConstructorOptions\n *\n * Initialization options for the CorridorGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the corridor.\n * @property {Property | Cartesian3[]} [positions] A Property specifying the array of {@link Cartesian3} positions that define the centerline of the corridor.\n * @property {Property | number} [width] A numeric Property specifying the distance between the edges of the corridor.\n * @property {Property | number} [height=0] A numeric Property specifying the altitude of the corridor relative to the ellipsoid surface.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @property {Property | number} [extrudedHeight] A numeric Property specifying the altitude of the corridor's extruded face relative to the ellipsoid surface.\n * @property {Property | HeightReference} [extrudedHeightReference=HeightReference.NONE] A Property specifying what the extrudedHeight is relative to.\n * @property {Property | CornerType} [cornerType=CornerType.ROUNDED] A {@link CornerType} Property specifying the style of the corners.\n * @property {Property | number} [granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the distance between each latitude and longitude.\n * @property {Property | boolean} [fill=true] A boolean Property specifying whether the corridor is filled with the provided material.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to fill the corridor.\n * @property {Property | boolean} [outline=false] A boolean Property specifying whether the corridor is outlined.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the corridor casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this corridor will be displayed.\n * @property {Property | ClassificationType} [classificationType=ClassificationType.BOTH] An enum Property specifying whether this corridor will classify terrain, 3D Tiles, or both when on the ground.\n * @property {ConstantProperty | number} [zIndex] A Property specifying the zIndex of the corridor, used for ordering.  Only has an effect if height and extrudedHeight are undefined, and if the corridor is static.\n */\n\n/**\n * Describes a corridor, which is a shape defined by a centerline and width that\n * conforms to the curvature of the globe. It can be placed on the surface or at altitude\n * and can optionally be extruded into a volume.\n *\n * @alias CorridorGraphics\n * @constructor\n *\n * @param {CorridorGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @see Entity\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Corridor.html|Cesium Sandcastle Corridor Demo}\n */\nfunction CorridorGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._positions = undefined;\n  this._positionsSubscription = undefined;\n  this._width = undefined;\n  this._widthSubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._extrudedHeight = undefined;\n  this._extrudedHeightSubscription = undefined;\n  this._extrudedHeightReference = undefined;\n  this._extrudedHeightReferenceSubscription = undefined;\n  this._cornerType = undefined;\n  this._cornerTypeSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._classificationType = undefined;\n  this._classificationTypeSubscription = undefined;\n  this._zIndex = undefined;\n  this._zIndexSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(CorridorGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof CorridorGraphics.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the corridor.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets a Property specifying the array of {@link Cartesian3} positions that define the centerline of the corridor.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   */\n  positions: createPropertyDescriptor(\"positions\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   */\n  width: createPropertyDescriptor(\"width\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the corridor.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  height: createPropertyDescriptor(\"height\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the corridor extrusion.\n   * Setting this property creates a corridor shaped volume starting at height and ending\n   * at this altitude.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   */\n  extrudedHeight: createPropertyDescriptor(\"extrudedHeight\"),\n\n  /**\n   * Gets or sets the Property specifying the extruded {@link HeightReference}.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  extrudedHeightReference: createPropertyDescriptor(\"extrudedHeightReference\"),\n\n  /**\n   * Gets or sets the {@link CornerType} Property specifying how corners are styled.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default CornerType.ROUNDED\n   */\n  cornerType: createPropertyDescriptor(\"cornerType\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the sampling distance between each latitude and longitude point.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the corridor is filled with the provided material.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the corridor.\n   * @memberof CorridorGraphics.prototype\n   * @type {MaterialProperty|undefined}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the corridor is outlined.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * <p>\n   * Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}.\n   * </p>\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the corridor\n   * casts or receives shadows from light sources.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this corridor will be displayed.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying whether this corridor will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof CorridorGraphics.prototype\n   * @type {Property|undefined}\n   * @default ClassificationType.BOTH\n   */\n  classificationType: createPropertyDescriptor(\"classificationType\"),\n\n  /**\n   * Gets or sets the zIndex Property specifying the ordering of the corridor.  Only has an effect if the coridor is static and neither height or exturdedHeight are specified.\n   * @memberof CorridorGraphics.prototype\n   * @type {ConstantProperty|undefined}\n   * @default 0\n   */\n  zIndex: createPropertyDescriptor(\"zIndex\"),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {CorridorGraphics} [result] The object onto which to store the result.\n * @returns {CorridorGraphics} The modified result parameter or a new instance if one was not provided.\n */\nCorridorGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new CorridorGraphics(this);\n  }\n  result.show = this.show;\n  result.positions = this.positions;\n  result.width = this.width;\n  result.height = this.height;\n  result.heightReference = this.heightReference;\n  result.extrudedHeight = this.extrudedHeight;\n  result.extrudedHeightReference = this.extrudedHeightReference;\n  result.cornerType = this.cornerType;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.classificationType = this.classificationType;\n  result.zIndex = this.zIndex;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {CorridorGraphics} source The object to be merged into this object.\n */\nCorridorGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.positions = defaultValue(this.positions, source.positions);\n  this.width = defaultValue(this.width, source.width);\n  this.height = defaultValue(this.height, source.height);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference\n  );\n  this.extrudedHeight = defaultValue(\n    this.extrudedHeight,\n    source.extrudedHeight\n  );\n  this.extrudedHeightReference = defaultValue(\n    this.extrudedHeightReference,\n    source.extrudedHeightReference\n  );\n  this.cornerType = defaultValue(this.cornerType, source.cornerType);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n  this.classificationType = defaultValue(\n    this.classificationType,\n    source.classificationType\n  );\n  this.zIndex = defaultValue(this.zIndex, source.zIndex);\n};\nexport default CorridorGraphics;\n","import defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport DataSource from \"./DataSource.js\";\nimport EntityCluster from \"./EntityCluster.js\";\nimport EntityCollection from \"./EntityCollection.js\";\n\n/**\n * A {@link DataSource} implementation which can be used to manually manage a group of entities.\n *\n * @alias CustomDataSource\n * @constructor\n *\n * @param {String} [name] A human-readable name for this instance.\n *\n * @example\n * const dataSource = new Cesium.CustomDataSource('myData');\n *\n * const entity = dataSource.entities.add({\n *    position : Cesium.Cartesian3.fromDegrees(1, 2, 0),\n *    billboard : {\n *        image : 'image.png'\n *    }\n * });\n *\n * viewer.dataSources.add(dataSource);\n */\nfunction CustomDataSource(name) {\n  this._name = name;\n  this._clock = undefined;\n  this._changed = new Event();\n  this._error = new Event();\n  this._isLoading = false;\n  this._loading = new Event();\n  this._entityCollection = new EntityCollection(this);\n  this._entityCluster = new EntityCluster();\n}\n\nObject.defineProperties(CustomDataSource.prototype, {\n  /**\n   * Gets or sets a human-readable name for this instance.\n   * @memberof CustomDataSource.prototype\n   * @type {String}\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n    set: function (value) {\n      if (this._name !== value) {\n        this._name = value;\n        this._changed.raiseEvent(this);\n      }\n    },\n  },\n  /**\n   * Gets or sets the clock for this instance.\n   * @memberof CustomDataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    get: function () {\n      return this._clock;\n    },\n    set: function (value) {\n      if (this._clock !== value) {\n        this._clock = value;\n        this._changed.raiseEvent(this);\n      }\n    },\n  },\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof CustomDataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: function () {\n      return this._entityCollection;\n    },\n  },\n  /**\n   * Gets or sets whether the data source is currently loading data.\n   * @memberof CustomDataSource.prototype\n   * @type {Boolean}\n   */\n  isLoading: {\n    get: function () {\n      return this._isLoading;\n    },\n    set: function (value) {\n      DataSource.setLoading(this, value);\n    },\n  },\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof CustomDataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: function () {\n      return this._changed;\n    },\n  },\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof CustomDataSource.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: function () {\n      return this._error;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the data source either starts or stops loading.\n   * @memberof CustomDataSource.prototype\n   * @type {Event}\n   */\n  loadingEvent: {\n    get: function () {\n      return this._loading;\n    },\n  },\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof CustomDataSource.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._entityCollection.show;\n    },\n    set: function (value) {\n      this._entityCollection.show = value;\n    },\n  },\n\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof CustomDataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: function () {\n      return this._entityCluster;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value must be defined.\");\n      }\n      //>>includeEnd('debug');\n      this._entityCluster = value;\n    },\n  },\n});\n\n/**\n * Updates the data source to the provided time.  This function is optional and\n * is not required to be implemented.  It is provided for data sources which\n * retrieve data based on the current animation time or scene state.\n * If implemented, update will be called by {@link DataSourceDisplay} once a frame.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {Boolean} True if this data source is ready to be displayed at the provided time, false otherwise.\n */\nCustomDataSource.prototype.update = function (time) {\n  return true;\n};\n\nexport default CustomDataSource;\n","import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport CylinderGeometry from \"../Core/CylinderGeometry.js\";\nimport CylinderOutlineGeometry from \"../Core/CylinderOutlineGeometry.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport GeometryOffsetAttribute from \"../Core/GeometryOffsetAttribute.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport heightReferenceOnEntityPropertyChanged from \"./heightReferenceOnEntityPropertyChanged.js\";\nimport Property from \"./Property.js\";\n\nconst defaultOffset = Cartesian3.ZERO;\n\nconst offsetScratch = new Cartesian3();\nconst positionScratch = new Cartesian3();\nconst scratchColor = new Color();\n\nfunction CylinderGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.length = undefined;\n  this.topRadius = undefined;\n  this.bottomRadius = undefined;\n  this.slices = undefined;\n  this.numberOfVerticalLines = undefined;\n  this.offsetAttribute = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for cylinders.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias CylinderGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction CylinderGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new CylinderGeometryOptions(entity),\n    geometryPropertyName: \"cylinder\",\n    observedPropertyNames: [\n      \"availability\",\n      \"position\",\n      \"orientation\",\n      \"cylinder\",\n    ],\n  });\n\n  this._onEntityPropertyChanged(entity, \"cylinder\", entity.cylinder, undefined);\n}\n\nif (defined(Object.create)) {\n  CylinderGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n  CylinderGeometryUpdater.prototype.constructor = CylinderGeometryUpdater;\n}\n\nObject.defineProperties(CylinderGeometryUpdater.prototype, {\n  /**\n   * Gets the terrain offset property\n   * @type {TerrainOffsetProperty}\n   * @memberof CylinderGeometryUpdater.prototype\n   * @readonly\n   * @private\n   */\n  terrainOffsetProperty: {\n    get: function () {\n      return this._terrainOffsetProperty;\n    },\n  },\n});\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nCylinderGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n\n  const show = new ShowGeometryInstanceAttribute(\n    isAvailable &&\n      entity.isShowing &&\n      this._showProperty.getValue(time) &&\n      this._fillProperty.getValue(time)\n  );\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n  const distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n    distanceDisplayCondition\n  );\n\n  const attributes = {\n    show: show,\n    distanceDisplayCondition: distanceDisplayConditionAttribute,\n    color: undefined,\n    offset: undefined,\n  };\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    let currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n  }\n\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new CylinderGeometry(this._options),\n    modelMatrix: entity.computeModelMatrixForHeightReference(\n      time,\n      entity.cylinder.heightReference,\n      this._options.length * 0.5,\n      this._scene.mapProjection.ellipsoid\n    ),\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nCylinderGeometryUpdater.prototype.createOutlineGeometryInstance = function (\n  time\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent an outlined geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor\n  );\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._showOutlineProperty.getValue(time)\n    ),\n    color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n      distanceDisplayCondition\n    ),\n    offset: undefined,\n  };\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new CylinderOutlineGeometry(this._options),\n    modelMatrix: entity.computeModelMatrixForHeightReference(\n      time,\n      entity.cylinder.heightReference,\n      this._options.length * 0.5,\n      this._scene.mapProjection.ellipsoid\n    ),\n    attributes: attributes,\n  });\n};\n\nCylinderGeometryUpdater.prototype._computeCenter = function (time, result) {\n  return Property.getValueOrUndefined(this._entity.position, time, result);\n};\n\nCylinderGeometryUpdater.prototype._isHidden = function (entity, cylinder) {\n  return (\n    !defined(entity.position) ||\n    !defined(cylinder.length) ||\n    !defined(cylinder.topRadius) ||\n    !defined(cylinder.bottomRadius) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, cylinder)\n  );\n};\n\nCylinderGeometryUpdater.prototype._isDynamic = function (entity, cylinder) {\n  return (\n    !entity.position.isConstant || //\n    !Property.isConstant(entity.orientation) || //\n    !cylinder.length.isConstant || //\n    !cylinder.topRadius.isConstant || //\n    !cylinder.bottomRadius.isConstant || //\n    !Property.isConstant(cylinder.slices) || //\n    !Property.isConstant(cylinder.outlineWidth) || //\n    !Property.isConstant(cylinder.numberOfVerticalLines)\n  );\n};\n\nCylinderGeometryUpdater.prototype._setStaticOptions = function (\n  entity,\n  cylinder\n) {\n  const heightReference = Property.getValueOrDefault(\n    cylinder.heightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE\n  );\n  const options = this._options;\n  options.vertexFormat =\n    this._materialProperty instanceof ColorMaterialProperty\n      ? PerInstanceColorAppearance.VERTEX_FORMAT\n      : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.length = cylinder.length.getValue(Iso8601.MINIMUM_VALUE);\n  options.topRadius = cylinder.topRadius.getValue(Iso8601.MINIMUM_VALUE);\n  options.bottomRadius = cylinder.bottomRadius.getValue(Iso8601.MINIMUM_VALUE);\n  options.slices = Property.getValueOrUndefined(\n    cylinder.slices,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.numberOfVerticalLines = Property.getValueOrUndefined(\n    cylinder.numberOfVerticalLines,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.offsetAttribute =\n    heightReference !== HeightReference.NONE\n      ? GeometryOffsetAttribute.ALL\n      : undefined;\n};\n\nCylinderGeometryUpdater.prototype._onEntityPropertyChanged = heightReferenceOnEntityPropertyChanged;\n\nCylinderGeometryUpdater.DynamicGeometryUpdater = DynamicCylinderGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicCylinderGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives\n  );\n}\n\nif (defined(Object.create)) {\n  DynamicCylinderGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype\n  );\n  DynamicCylinderGeometryUpdater.prototype.constructor = DynamicCylinderGeometryUpdater;\n}\n\nDynamicCylinderGeometryUpdater.prototype._isHidden = function (\n  entity,\n  cylinder,\n  time\n) {\n  const options = this._options;\n  const position = Property.getValueOrUndefined(\n    entity.position,\n    time,\n    positionScratch\n  );\n  return (\n    !defined(position) ||\n    !defined(options.length) ||\n    !defined(options.topRadius) || //\n    !defined(options.bottomRadius) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(\n      this,\n      entity,\n      cylinder,\n      time\n    )\n  );\n};\n\nDynamicCylinderGeometryUpdater.prototype._setOptions = function (\n  entity,\n  cylinder,\n  time\n) {\n  const heightReference = Property.getValueOrDefault(\n    cylinder.heightReference,\n    time,\n    HeightReference.NONE\n  );\n  const options = this._options;\n  options.length = Property.getValueOrUndefined(cylinder.length, time);\n  options.topRadius = Property.getValueOrUndefined(cylinder.topRadius, time);\n  options.bottomRadius = Property.getValueOrUndefined(\n    cylinder.bottomRadius,\n    time\n  );\n  options.slices = Property.getValueOrUndefined(cylinder.slices, time);\n  options.numberOfVerticalLines = Property.getValueOrUndefined(\n    cylinder.numberOfVerticalLines,\n    time\n  );\n  options.offsetAttribute =\n    heightReference !== HeightReference.NONE\n      ? GeometryOffsetAttribute.ALL\n      : undefined;\n};\nexport default CylinderGeometryUpdater;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {Object} CylinderGraphics.ConstructorOptions\n *\n * Initialization options for the CylinderGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the cylinder.\n * @property {Property | number} [length] A numeric Property specifying the length of the cylinder.\n * @property {Property | number} [topRadius] A numeric Property specifying the radius of the top of the cylinder.\n * @property {Property | number} [bottomRadius] A numeric Property specifying the radius of the bottom of the cylinder.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height from the entity position is relative to.\n * @property {Property | boolean} [fill=true] A boolean Property specifying whether the cylinder is filled with the provided material.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to fill the cylinder.\n * @property {Property | boolean} [outline=false] A boolean Property specifying whether the cylinder is outlined.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @property {Property | number} [numberOfVerticalLines=16] A numeric Property specifying the number of vertical lines to draw along the perimeter for the outline.\n * @property {Property | number} [slices=128] The number of edges around the perimeter of the cylinder.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the cylinder casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this cylinder will be displayed.\n */\n\n/**\n * Describes a cylinder, truncated cone, or cone defined by a length, top radius, and bottom radius.\n * The center position and orientation are determined by the containing {@link Entity}.\n *\n * @alias CylinderGraphics\n * @constructor\n *\n * @param {CylinderGraphics.ConstructorOptions} [options] Object describing initialization options\n */\nfunction CylinderGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._length = undefined;\n  this._lengthSubscription = undefined;\n  this._topRadius = undefined;\n  this._topRadiusSubscription = undefined;\n  this._bottomRadius = undefined;\n  this._bottomRadiusSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._numberOfVerticalLines = undefined;\n  this._numberOfVerticalLinesSubscription = undefined;\n  this._slices = undefined;\n  this._slicesSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(CylinderGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof CylinderGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the length of the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property|undefined}\n   */\n  length: createPropertyDescriptor(\"length\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the radius of the top of the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property|undefined}\n   */\n  topRadius: createPropertyDescriptor(\"topRadius\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the radius of the bottom of the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property|undefined}\n   */\n  bottomRadius: createPropertyDescriptor(\"bottomRadius\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the cylinder is filled with the provided material.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {MaterialProperty|undefined}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the cylinder is outlined.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * <p>\n   * Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}.\n   * </p>\n   * @memberof CylinderGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets the Property specifying the number of vertical lines to draw along the perimeter for the outline.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property|undefined}\n   * @default 16\n   */\n  numberOfVerticalLines: createPropertyDescriptor(\"numberOfVerticalLines\"),\n\n  /**\n   * Gets or sets the Property specifying the number of edges around the perimeter of the cylinder.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property|undefined}\n   * @default 128\n   */\n  slices: createPropertyDescriptor(\"slices\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the cylinder\n   * casts or receives shadows from light sources.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this cylinder will be displayed.\n   * @memberof CylinderGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {CylinderGraphics} [result] The object onto which to store the result.\n * @returns {CylinderGraphics} The modified result parameter or a new instance if one was not provided.\n */\nCylinderGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new CylinderGraphics(this);\n  }\n  result.show = this.show;\n  result.length = this.length;\n  result.topRadius = this.topRadius;\n  result.bottomRadius = this.bottomRadius;\n  result.heightReference = this.heightReference;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.numberOfVerticalLines = this.numberOfVerticalLines;\n  result.slices = this.slices;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {CylinderGraphics} source The object to be merged into this object.\n */\nCylinderGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.length = defaultValue(this.length, source.length);\n  this.topRadius = defaultValue(this.topRadius, source.topRadius);\n  this.bottomRadius = defaultValue(this.bottomRadius, source.bottomRadius);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference\n  );\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.numberOfVerticalLines = defaultValue(\n    this.numberOfVerticalLines,\n    source.numberOfVerticalLines\n  );\n  this.slices = defaultValue(this.slices, source.slices);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n};\nexport default CylinderGraphics;\n","import ArcType from \"../Core/ArcType.js\";\nimport BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport ClockRange from \"../Core/ClockRange.js\";\nimport ClockStep from \"../Core/ClockStep.js\";\nimport Color from \"../Core/Color.js\";\nimport CornerType from \"../Core/CornerType.js\";\nimport Credit from \"../Core/Credit.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport Event from \"../Core/Event.js\";\nimport ExtrapolationType from \"../Core/ExtrapolationType.js\";\nimport getFilenameFromUri from \"../Core/getFilenameFromUri.js\";\nimport HermitePolynomialApproximation from \"../Core/HermitePolynomialApproximation.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport LagrangePolynomialApproximation from \"../Core/LagrangePolynomialApproximation.js\";\nimport LinearApproximation from \"../Core/LinearApproximation.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport NearFarScalar from \"../Core/NearFarScalar.js\";\nimport PolygonHierarchy from \"../Core/PolygonHierarchy.js\";\nimport Quaternion from \"../Core/Quaternion.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport ReferenceFrame from \"../Core/ReferenceFrame.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport Spherical from \"../Core/Spherical.js\";\nimport TimeInterval from \"../Core/TimeInterval.js\";\nimport TimeIntervalCollection from \"../Core/TimeIntervalCollection.js\";\nimport ClassificationType from \"../Scene/ClassificationType.js\";\nimport ColorBlendMode from \"../Scene/ColorBlendMode.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport HorizontalOrigin from \"../Scene/HorizontalOrigin.js\";\nimport LabelStyle from \"../Scene/LabelStyle.js\";\nimport ShadowMode from \"../Scene/ShadowMode.js\";\nimport VerticalOrigin from \"../Scene/VerticalOrigin.js\";\nimport Uri from \"../ThirdParty/Uri.js\";\nimport BillboardGraphics from \"./BillboardGraphics.js\";\nimport BoxGraphics from \"./BoxGraphics.js\";\nimport CallbackProperty from \"./CallbackProperty.js\";\nimport CheckerboardMaterialProperty from \"./CheckerboardMaterialProperty.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport CompositeMaterialProperty from \"./CompositeMaterialProperty.js\";\nimport CompositePositionProperty from \"./CompositePositionProperty.js\";\nimport CompositeProperty from \"./CompositeProperty.js\";\nimport ConstantPositionProperty from \"./ConstantPositionProperty.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport CorridorGraphics from \"./CorridorGraphics.js\";\nimport CylinderGraphics from \"./CylinderGraphics.js\";\nimport DataSource from \"./DataSource.js\";\nimport DataSourceClock from \"./DataSourceClock.js\";\nimport EllipseGraphics from \"./EllipseGraphics.js\";\nimport EllipsoidGraphics from \"./EllipsoidGraphics.js\";\nimport EntityCluster from \"./EntityCluster.js\";\nimport EntityCollection from \"./EntityCollection.js\";\nimport GridMaterialProperty from \"./GridMaterialProperty.js\";\nimport ImageMaterialProperty from \"./ImageMaterialProperty.js\";\nimport LabelGraphics from \"./LabelGraphics.js\";\nimport ModelGraphics from \"./ModelGraphics.js\";\nimport NodeTransformationProperty from \"./NodeTransformationProperty.js\";\nimport PathGraphics from \"./PathGraphics.js\";\nimport PointGraphics from \"./PointGraphics.js\";\nimport PolygonGraphics from \"./PolygonGraphics.js\";\nimport PolylineArrowMaterialProperty from \"./PolylineArrowMaterialProperty.js\";\nimport PolylineDashMaterialProperty from \"./PolylineDashMaterialProperty.js\";\nimport PolylineGlowMaterialProperty from \"./PolylineGlowMaterialProperty.js\";\nimport PolylineGraphics from \"./PolylineGraphics.js\";\nimport PolylineOutlineMaterialProperty from \"./PolylineOutlineMaterialProperty.js\";\nimport PolylineVolumeGraphics from \"./PolylineVolumeGraphics.js\";\nimport PositionPropertyArray from \"./PositionPropertyArray.js\";\nimport Property from \"./Property.js\";\nimport PropertyArray from \"./PropertyArray.js\";\nimport PropertyBag from \"./PropertyBag.js\";\nimport RectangleGraphics from \"./RectangleGraphics.js\";\nimport ReferenceProperty from \"./ReferenceProperty.js\";\nimport Rotation from \"./Rotation.js\";\nimport SampledPositionProperty from \"./SampledPositionProperty.js\";\nimport SampledProperty from \"./SampledProperty.js\";\nimport StripeMaterialProperty from \"./StripeMaterialProperty.js\";\nimport StripeOrientation from \"./StripeOrientation.js\";\nimport TimeIntervalCollectionPositionProperty from \"./TimeIntervalCollectionPositionProperty.js\";\nimport TimeIntervalCollectionProperty from \"./TimeIntervalCollectionProperty.js\";\nimport VelocityOrientationProperty from \"./VelocityOrientationProperty.js\";\nimport VelocityVectorProperty from \"./VelocityVectorProperty.js\";\nimport WallGraphics from \"./WallGraphics.js\";\nimport Cesium3DTilesetGraphics from \"./Cesium3DTilesetGraphics.js\";\n\n// A marker type to distinguish CZML properties where we need to end up with a unit vector.\n// The data is still loaded into Cartesian3 objects but they are normalized.\nfunction UnitCartesian3() {}\nUnitCartesian3.packedLength = Cartesian3.packedLength;\nUnitCartesian3.unpack = Cartesian3.unpack;\nUnitCartesian3.pack = Cartesian3.pack;\n\n// As a side note, for the purposes of CZML, Quaternion always indicates a unit quaternion.\n\nlet currentId;\n\nfunction createReferenceProperty(entityCollection, referenceString) {\n  if (referenceString[0] === \"#\") {\n    referenceString = currentId + referenceString;\n  }\n  return ReferenceProperty.fromString(entityCollection, referenceString);\n}\n\nfunction createSpecializedProperty(type, entityCollection, packetData) {\n  if (defined(packetData.reference)) {\n    return createReferenceProperty(entityCollection, packetData.reference);\n  }\n\n  if (defined(packetData.velocityReference)) {\n    const referenceProperty = createReferenceProperty(\n      entityCollection,\n      packetData.velocityReference\n    );\n    switch (type) {\n      case Cartesian3:\n      case UnitCartesian3:\n        return new VelocityVectorProperty(\n          referenceProperty,\n          type === UnitCartesian3\n        );\n      case Quaternion:\n        return new VelocityOrientationProperty(referenceProperty);\n    }\n  }\n\n  throw new RuntimeError(`${JSON.stringify(packetData)} is not valid CZML.`);\n}\n\nfunction createAdapterProperty(property, adapterFunction) {\n  return new CallbackProperty(function (time, result) {\n    return adapterFunction(property.getValue(time, result));\n  }, property.isConstant);\n}\n\nconst scratchCartesian = new Cartesian3();\nconst scratchSpherical = new Spherical();\nconst scratchCartographic = new Cartographic();\nconst scratchTimeInterval = new TimeInterval();\nconst scratchQuaternion = new Quaternion();\n\nfunction unwrapColorInterval(czmlInterval) {\n  let rgbaf = czmlInterval.rgbaf;\n  if (defined(rgbaf)) {\n    return rgbaf;\n  }\n\n  const rgba = czmlInterval.rgba;\n  if (!defined(rgba)) {\n    return undefined;\n  }\n\n  const length = rgba.length;\n  if (length === Color.packedLength) {\n    return [\n      Color.byteToFloat(rgba[0]),\n      Color.byteToFloat(rgba[1]),\n      Color.byteToFloat(rgba[2]),\n      Color.byteToFloat(rgba[3]),\n    ];\n  }\n\n  rgbaf = new Array(length);\n  for (let i = 0; i < length; i += 5) {\n    rgbaf[i] = rgba[i];\n    rgbaf[i + 1] = Color.byteToFloat(rgba[i + 1]);\n    rgbaf[i + 2] = Color.byteToFloat(rgba[i + 2]);\n    rgbaf[i + 3] = Color.byteToFloat(rgba[i + 3]);\n    rgbaf[i + 4] = Color.byteToFloat(rgba[i + 4]);\n  }\n  return rgbaf;\n}\n\nfunction unwrapUriInterval(czmlInterval, sourceUri) {\n  const uri = defaultValue(czmlInterval.uri, czmlInterval);\n  if (defined(sourceUri)) {\n    return sourceUri.getDerivedResource({\n      url: uri,\n    });\n  }\n\n  return Resource.createIfNeeded(uri);\n}\n\nfunction unwrapRectangleInterval(czmlInterval) {\n  let wsen = czmlInterval.wsen;\n  if (defined(wsen)) {\n    return wsen;\n  }\n\n  const wsenDegrees = czmlInterval.wsenDegrees;\n  if (!defined(wsenDegrees)) {\n    return undefined;\n  }\n\n  const length = wsenDegrees.length;\n  if (length === Rectangle.packedLength) {\n    return [\n      CesiumMath.toRadians(wsenDegrees[0]),\n      CesiumMath.toRadians(wsenDegrees[1]),\n      CesiumMath.toRadians(wsenDegrees[2]),\n      CesiumMath.toRadians(wsenDegrees[3]),\n    ];\n  }\n\n  wsen = new Array(length);\n  for (let i = 0; i < length; i += 5) {\n    wsen[i] = wsenDegrees[i];\n    wsen[i + 1] = CesiumMath.toRadians(wsenDegrees[i + 1]);\n    wsen[i + 2] = CesiumMath.toRadians(wsenDegrees[i + 2]);\n    wsen[i + 3] = CesiumMath.toRadians(wsenDegrees[i + 3]);\n    wsen[i + 4] = CesiumMath.toRadians(wsenDegrees[i + 4]);\n  }\n  return wsen;\n}\n\nfunction convertUnitSphericalToCartesian(unitSpherical) {\n  const length = unitSpherical.length;\n  scratchSpherical.magnitude = 1.0;\n  if (length === 2) {\n    scratchSpherical.clock = unitSpherical[0];\n    scratchSpherical.cone = unitSpherical[1];\n    Cartesian3.fromSpherical(scratchSpherical, scratchCartesian);\n    return [scratchCartesian.x, scratchCartesian.y, scratchCartesian.z];\n  }\n\n  const result = new Array((length / 3) * 4);\n  for (let i = 0, j = 0; i < length; i += 3, j += 4) {\n    result[j] = unitSpherical[i];\n\n    scratchSpherical.clock = unitSpherical[i + 1];\n    scratchSpherical.cone = unitSpherical[i + 2];\n    Cartesian3.fromSpherical(scratchSpherical, scratchCartesian);\n\n    result[j + 1] = scratchCartesian.x;\n    result[j + 2] = scratchCartesian.y;\n    result[j + 3] = scratchCartesian.z;\n  }\n  return result;\n}\n\nfunction convertSphericalToCartesian(spherical) {\n  const length = spherical.length;\n  if (length === 3) {\n    scratchSpherical.clock = spherical[0];\n    scratchSpherical.cone = spherical[1];\n    scratchSpherical.magnitude = spherical[2];\n    Cartesian3.fromSpherical(scratchSpherical, scratchCartesian);\n    return [scratchCartesian.x, scratchCartesian.y, scratchCartesian.z];\n  }\n\n  const result = new Array(length);\n  for (let i = 0; i < length; i += 4) {\n    result[i] = spherical[i];\n\n    scratchSpherical.clock = spherical[i + 1];\n    scratchSpherical.cone = spherical[i + 2];\n    scratchSpherical.magnitude = spherical[i + 3];\n    Cartesian3.fromSpherical(scratchSpherical, scratchCartesian);\n\n    result[i + 1] = scratchCartesian.x;\n    result[i + 2] = scratchCartesian.y;\n    result[i + 3] = scratchCartesian.z;\n  }\n  return result;\n}\n\nfunction convertCartographicRadiansToCartesian(cartographicRadians) {\n  const length = cartographicRadians.length;\n  if (length === 3) {\n    scratchCartographic.longitude = cartographicRadians[0];\n    scratchCartographic.latitude = cartographicRadians[1];\n    scratchCartographic.height = cartographicRadians[2];\n    Ellipsoid.WGS84.cartographicToCartesian(\n      scratchCartographic,\n      scratchCartesian\n    );\n    return [scratchCartesian.x, scratchCartesian.y, scratchCartesian.z];\n  }\n\n  const result = new Array(length);\n  for (let i = 0; i < length; i += 4) {\n    result[i] = cartographicRadians[i];\n\n    scratchCartographic.longitude = cartographicRadians[i + 1];\n    scratchCartographic.latitude = cartographicRadians[i + 2];\n    scratchCartographic.height = cartographicRadians[i + 3];\n    Ellipsoid.WGS84.cartographicToCartesian(\n      scratchCartographic,\n      scratchCartesian\n    );\n\n    result[i + 1] = scratchCartesian.x;\n    result[i + 2] = scratchCartesian.y;\n    result[i + 3] = scratchCartesian.z;\n  }\n  return result;\n}\n\nfunction convertCartographicDegreesToCartesian(cartographicDegrees) {\n  const length = cartographicDegrees.length;\n  if (length === 3) {\n    scratchCartographic.longitude = CesiumMath.toRadians(\n      cartographicDegrees[0]\n    );\n    scratchCartographic.latitude = CesiumMath.toRadians(cartographicDegrees[1]);\n    scratchCartographic.height = cartographicDegrees[2];\n    Ellipsoid.WGS84.cartographicToCartesian(\n      scratchCartographic,\n      scratchCartesian\n    );\n    return [scratchCartesian.x, scratchCartesian.y, scratchCartesian.z];\n  }\n\n  const result = new Array(length);\n  for (let i = 0; i < length; i += 4) {\n    result[i] = cartographicDegrees[i];\n\n    scratchCartographic.longitude = CesiumMath.toRadians(\n      cartographicDegrees[i + 1]\n    );\n    scratchCartographic.latitude = CesiumMath.toRadians(\n      cartographicDegrees[i + 2]\n    );\n    scratchCartographic.height = cartographicDegrees[i + 3];\n    Ellipsoid.WGS84.cartographicToCartesian(\n      scratchCartographic,\n      scratchCartesian\n    );\n\n    result[i + 1] = scratchCartesian.x;\n    result[i + 2] = scratchCartesian.y;\n    result[i + 3] = scratchCartesian.z;\n  }\n  return result;\n}\n\nfunction unwrapCartesianInterval(czmlInterval) {\n  const cartesian = czmlInterval.cartesian;\n  if (defined(cartesian)) {\n    return cartesian;\n  }\n\n  const cartesianVelocity = czmlInterval.cartesianVelocity;\n  if (defined(cartesianVelocity)) {\n    return cartesianVelocity;\n  }\n\n  const unitCartesian = czmlInterval.unitCartesian;\n  if (defined(unitCartesian)) {\n    return unitCartesian;\n  }\n\n  const unitSpherical = czmlInterval.unitSpherical;\n  if (defined(unitSpherical)) {\n    return convertUnitSphericalToCartesian(unitSpherical);\n  }\n\n  const spherical = czmlInterval.spherical;\n  if (defined(spherical)) {\n    return convertSphericalToCartesian(spherical);\n  }\n\n  const cartographicRadians = czmlInterval.cartographicRadians;\n  if (defined(cartographicRadians)) {\n    return convertCartographicRadiansToCartesian(cartographicRadians);\n  }\n\n  const cartographicDegrees = czmlInterval.cartographicDegrees;\n  if (defined(cartographicDegrees)) {\n    return convertCartographicDegreesToCartesian(cartographicDegrees);\n  }\n\n  throw new RuntimeError(\n    `${JSON.stringify(czmlInterval)} is not a valid CZML interval.`\n  );\n}\n\nfunction normalizePackedCartesianArray(array, startingIndex) {\n  Cartesian3.unpack(array, startingIndex, scratchCartesian);\n  Cartesian3.normalize(scratchCartesian, scratchCartesian);\n  Cartesian3.pack(scratchCartesian, array, startingIndex);\n}\n\nfunction unwrapUnitCartesianInterval(czmlInterval) {\n  const cartesian = unwrapCartesianInterval(czmlInterval);\n  if (cartesian.length === 3) {\n    normalizePackedCartesianArray(cartesian, 0);\n    return cartesian;\n  }\n\n  for (let i = 1; i < cartesian.length; i += 4) {\n    normalizePackedCartesianArray(cartesian, i);\n  }\n\n  return cartesian;\n}\n\nfunction normalizePackedQuaternionArray(array, startingIndex) {\n  Quaternion.unpack(array, startingIndex, scratchQuaternion);\n  Quaternion.normalize(scratchQuaternion, scratchQuaternion);\n  Quaternion.pack(scratchQuaternion, array, startingIndex);\n}\n\nfunction unwrapQuaternionInterval(czmlInterval) {\n  const unitQuaternion = czmlInterval.unitQuaternion;\n  if (defined(unitQuaternion)) {\n    if (unitQuaternion.length === 4) {\n      normalizePackedQuaternionArray(unitQuaternion, 0);\n      return unitQuaternion;\n    }\n\n    for (let i = 1; i < unitQuaternion.length; i += 5) {\n      normalizePackedQuaternionArray(unitQuaternion, i);\n    }\n  }\n  return unitQuaternion;\n}\n\nfunction getPropertyType(czmlInterval) {\n  // The associations in this function need to be kept in sync with the\n  // associations in unwrapInterval.\n\n  // Intentionally omitted due to conficts in CZML property names:\n  // * Image (conflicts with Uri)\n  // * Rotation (conflicts with Number)\n  //\n  // cartesianVelocity is also omitted due to incomplete support for\n  // derivative information in CZML properties.\n  // (Currently cartesianVelocity is hacked directly into the position processing code)\n  if (typeof czmlInterval === \"boolean\") {\n    return Boolean;\n  } else if (typeof czmlInterval === \"number\") {\n    return Number;\n  } else if (typeof czmlInterval === \"string\") {\n    return String;\n  } else if (czmlInterval.hasOwnProperty(\"array\")) {\n    return Array;\n  } else if (czmlInterval.hasOwnProperty(\"boolean\")) {\n    return Boolean;\n  } else if (czmlInterval.hasOwnProperty(\"boundingRectangle\")) {\n    return BoundingRectangle;\n  } else if (czmlInterval.hasOwnProperty(\"cartesian2\")) {\n    return Cartesian2;\n  } else if (\n    czmlInterval.hasOwnProperty(\"cartesian\") ||\n    czmlInterval.hasOwnProperty(\"spherical\") ||\n    czmlInterval.hasOwnProperty(\"cartographicRadians\") ||\n    czmlInterval.hasOwnProperty(\"cartographicDegrees\")\n  ) {\n    return Cartesian3;\n  } else if (\n    czmlInterval.hasOwnProperty(\"unitCartesian\") ||\n    czmlInterval.hasOwnProperty(\"unitSpherical\")\n  ) {\n    return UnitCartesian3;\n  } else if (\n    czmlInterval.hasOwnProperty(\"rgba\") ||\n    czmlInterval.hasOwnProperty(\"rgbaf\")\n  ) {\n    return Color;\n  } else if (czmlInterval.hasOwnProperty(\"arcType\")) {\n    return ArcType;\n  } else if (czmlInterval.hasOwnProperty(\"classificationType\")) {\n    return ClassificationType;\n  } else if (czmlInterval.hasOwnProperty(\"colorBlendMode\")) {\n    return ColorBlendMode;\n  } else if (czmlInterval.hasOwnProperty(\"cornerType\")) {\n    return CornerType;\n  } else if (czmlInterval.hasOwnProperty(\"heightReference\")) {\n    return HeightReference;\n  } else if (czmlInterval.hasOwnProperty(\"horizontalOrigin\")) {\n    return HorizontalOrigin;\n  } else if (czmlInterval.hasOwnProperty(\"date\")) {\n    return JulianDate;\n  } else if (czmlInterval.hasOwnProperty(\"labelStyle\")) {\n    return LabelStyle;\n  } else if (czmlInterval.hasOwnProperty(\"number\")) {\n    return Number;\n  } else if (czmlInterval.hasOwnProperty(\"nearFarScalar\")) {\n    return NearFarScalar;\n  } else if (czmlInterval.hasOwnProperty(\"distanceDisplayCondition\")) {\n    return DistanceDisplayCondition;\n  } else if (\n    czmlInterval.hasOwnProperty(\"object\") ||\n    czmlInterval.hasOwnProperty(\"value\")\n  ) {\n    return Object;\n  } else if (czmlInterval.hasOwnProperty(\"unitQuaternion\")) {\n    return Quaternion;\n  } else if (czmlInterval.hasOwnProperty(\"shadowMode\")) {\n    return ShadowMode;\n  } else if (czmlInterval.hasOwnProperty(\"string\")) {\n    return String;\n  } else if (czmlInterval.hasOwnProperty(\"stripeOrientation\")) {\n    return StripeOrientation;\n  } else if (\n    czmlInterval.hasOwnProperty(\"wsen\") ||\n    czmlInterval.hasOwnProperty(\"wsenDegrees\")\n  ) {\n    return Rectangle;\n  } else if (czmlInterval.hasOwnProperty(\"uri\")) {\n    return Uri;\n  } else if (czmlInterval.hasOwnProperty(\"verticalOrigin\")) {\n    return VerticalOrigin;\n  }\n  // fallback case\n  return Object;\n}\n\nfunction unwrapInterval(type, czmlInterval, sourceUri) {\n  // The associations in this function need to be kept in sync with the\n  // associations in getPropertyType\n  switch (type) {\n    case ArcType:\n      return ArcType[defaultValue(czmlInterval.arcType, czmlInterval)];\n    case Array:\n      return czmlInterval.array;\n    case Boolean:\n      return defaultValue(czmlInterval[\"boolean\"], czmlInterval);\n    case BoundingRectangle:\n      return czmlInterval.boundingRectangle;\n    case Cartesian2:\n      return czmlInterval.cartesian2;\n    case Cartesian3:\n      return unwrapCartesianInterval(czmlInterval);\n    case UnitCartesian3:\n      return unwrapUnitCartesianInterval(czmlInterval);\n    case Color:\n      return unwrapColorInterval(czmlInterval);\n    case ClassificationType:\n      return ClassificationType[\n        defaultValue(czmlInterval.classificationType, czmlInterval)\n      ];\n    case ColorBlendMode:\n      return ColorBlendMode[\n        defaultValue(czmlInterval.colorBlendMode, czmlInterval)\n      ];\n    case CornerType:\n      return CornerType[defaultValue(czmlInterval.cornerType, czmlInterval)];\n    case HeightReference:\n      return HeightReference[\n        defaultValue(czmlInterval.heightReference, czmlInterval)\n      ];\n    case HorizontalOrigin:\n      return HorizontalOrigin[\n        defaultValue(czmlInterval.horizontalOrigin, czmlInterval)\n      ];\n    case Image:\n      return unwrapUriInterval(czmlInterval, sourceUri);\n    case JulianDate:\n      return JulianDate.fromIso8601(\n        defaultValue(czmlInterval.date, czmlInterval)\n      );\n    case LabelStyle:\n      return LabelStyle[defaultValue(czmlInterval.labelStyle, czmlInterval)];\n    case Number:\n      return defaultValue(czmlInterval.number, czmlInterval);\n    case NearFarScalar:\n      return czmlInterval.nearFarScalar;\n    case DistanceDisplayCondition:\n      return czmlInterval.distanceDisplayCondition;\n    case Object:\n      return defaultValue(\n        defaultValue(czmlInterval.object, czmlInterval.value),\n        czmlInterval\n      );\n    case Quaternion:\n      return unwrapQuaternionInterval(czmlInterval);\n    case Rotation:\n      return defaultValue(czmlInterval.number, czmlInterval);\n    case ShadowMode:\n      return ShadowMode[\n        defaultValue(\n          defaultValue(czmlInterval.shadowMode, czmlInterval.shadows),\n          czmlInterval\n        )\n      ];\n    case String:\n      return defaultValue(czmlInterval.string, czmlInterval);\n    case StripeOrientation:\n      return StripeOrientation[\n        defaultValue(czmlInterval.stripeOrientation, czmlInterval)\n      ];\n    case Rectangle:\n      return unwrapRectangleInterval(czmlInterval);\n    case Uri:\n      return unwrapUriInterval(czmlInterval, sourceUri);\n    case VerticalOrigin:\n      return VerticalOrigin[\n        defaultValue(czmlInterval.verticalOrigin, czmlInterval)\n      ];\n    default:\n      throw new RuntimeError(type);\n  }\n}\n\nconst interpolators = {\n  HERMITE: HermitePolynomialApproximation,\n  LAGRANGE: LagrangePolynomialApproximation,\n  LINEAR: LinearApproximation,\n};\n\nfunction updateInterpolationSettings(packetData, property) {\n  const interpolationAlgorithm = packetData.interpolationAlgorithm;\n  const interpolationDegree = packetData.interpolationDegree;\n  if (defined(interpolationAlgorithm) || defined(interpolationDegree)) {\n    property.setInterpolationOptions({\n      interpolationAlgorithm: interpolators[interpolationAlgorithm],\n      interpolationDegree: interpolationDegree,\n    });\n  }\n\n  const forwardExtrapolationType = packetData.forwardExtrapolationType;\n  if (defined(forwardExtrapolationType)) {\n    property.forwardExtrapolationType =\n      ExtrapolationType[forwardExtrapolationType];\n  }\n\n  const forwardExtrapolationDuration = packetData.forwardExtrapolationDuration;\n  if (defined(forwardExtrapolationDuration)) {\n    property.forwardExtrapolationDuration = forwardExtrapolationDuration;\n  }\n\n  const backwardExtrapolationType = packetData.backwardExtrapolationType;\n  if (defined(backwardExtrapolationType)) {\n    property.backwardExtrapolationType =\n      ExtrapolationType[backwardExtrapolationType];\n  }\n\n  const backwardExtrapolationDuration =\n    packetData.backwardExtrapolationDuration;\n  if (defined(backwardExtrapolationDuration)) {\n    property.backwardExtrapolationDuration = backwardExtrapolationDuration;\n  }\n}\n\nconst iso8601Scratch = {\n  iso8601: undefined,\n};\n\nfunction intervalFromString(intervalString) {\n  if (!defined(intervalString)) {\n    return undefined;\n  }\n  iso8601Scratch.iso8601 = intervalString;\n  return TimeInterval.fromIso8601(iso8601Scratch);\n}\n\nfunction wrapPropertyInInfiniteInterval(property) {\n  const interval = Iso8601.MAXIMUM_INTERVAL.clone();\n  interval.data = property;\n  return interval;\n}\n\nfunction convertPropertyToComposite(property) {\n  // Create the composite and add the old property, wrapped in an infinite interval.\n  const composite = new CompositeProperty();\n  composite.intervals.addInterval(wrapPropertyInInfiniteInterval(property));\n  return composite;\n}\n\nfunction convertPositionPropertyToComposite(property) {\n  // Create the composite and add the old property, wrapped in an infinite interval.\n  const composite = new CompositePositionProperty(property.referenceFrame);\n  composite.intervals.addInterval(wrapPropertyInInfiniteInterval(property));\n  return composite;\n}\n\nfunction processProperty(\n  type,\n  object,\n  propertyName,\n  packetData,\n  constrainedInterval,\n  sourceUri,\n  entityCollection\n) {\n  let combinedInterval = intervalFromString(packetData.interval);\n  if (defined(constrainedInterval)) {\n    if (defined(combinedInterval)) {\n      combinedInterval = TimeInterval.intersect(\n        combinedInterval,\n        constrainedInterval,\n        scratchTimeInterval\n      );\n    } else {\n      combinedInterval = constrainedInterval;\n    }\n  }\n\n  let packedLength;\n  let unwrappedInterval;\n  let unwrappedIntervalLength;\n\n  // CZML properties can be defined in many ways.  Most ways represent a structure for\n  // encoding a single value (number, string, cartesian, etc.)  Regardless of the value type,\n  // if it encodes a single value it will get loaded into a ConstantProperty eventually.\n  // Alternatively, there are ways of defining a property that require specialized\n  // client-side representation. Currently, these are ReferenceProperty,\n  // and client-side velocity computation properties such as VelocityVectorProperty.\n  const isValue =\n    !defined(packetData.reference) && !defined(packetData.velocityReference);\n  const hasInterval =\n    defined(combinedInterval) &&\n    !combinedInterval.equals(Iso8601.MAXIMUM_INTERVAL);\n\n  if (packetData.delete === true) {\n    // If deleting this property for all time, we can simply set to undefined and return.\n    if (!hasInterval) {\n      object[propertyName] = undefined;\n      return;\n    }\n\n    // Deleting depends on the type of property we have.\n    return removePropertyData(object[propertyName], combinedInterval);\n  }\n\n  let isSampled = false;\n\n  if (isValue) {\n    unwrappedInterval = unwrapInterval(type, packetData, sourceUri);\n    if (!defined(unwrappedInterval)) {\n      // not a known value type, bail\n      return;\n    }\n    packedLength = defaultValue(type.packedLength, 1);\n    unwrappedIntervalLength = defaultValue(unwrappedInterval.length, 1);\n    isSampled =\n      !defined(packetData.array) &&\n      typeof unwrappedInterval !== \"string\" &&\n      unwrappedIntervalLength > packedLength &&\n      type !== Object;\n  }\n\n  // Rotation is a special case because it represents a native type (Number)\n  // and therefore does not need to be unpacked when loaded as a constant value.\n  const needsUnpacking = typeof type.unpack === \"function\" && type !== Rotation;\n\n  // Any time a constant value is assigned, it completely blows away anything else.\n  if (!isSampled && !hasInterval) {\n    if (isValue) {\n      object[propertyName] = new ConstantProperty(\n        needsUnpacking ? type.unpack(unwrappedInterval, 0) : unwrappedInterval\n      );\n    } else {\n      object[propertyName] = createSpecializedProperty(\n        type,\n        entityCollection,\n        packetData\n      );\n    }\n    return;\n  }\n\n  let property = object[propertyName];\n\n  let epoch;\n  const packetEpoch = packetData.epoch;\n  if (defined(packetEpoch)) {\n    epoch = JulianDate.fromIso8601(packetEpoch);\n  }\n\n  // Without an interval, any sampled value is infinite, meaning it completely\n  // replaces any non-sampled property that may exist.\n  if (isSampled && !hasInterval) {\n    if (!(property instanceof SampledProperty)) {\n      object[propertyName] = property = new SampledProperty(type);\n    }\n    property.addSamplesPackedArray(unwrappedInterval, epoch);\n    updateInterpolationSettings(packetData, property);\n    return;\n  }\n\n  let interval;\n\n  // A constant value with an interval is normally part of a TimeIntervalCollection,\n  // However, if the current property is not a time-interval collection, we need\n  // to turn it into a Composite, preserving the old data with the new interval.\n  if (!isSampled && hasInterval) {\n    // Create a new interval for the constant value.\n    combinedInterval = combinedInterval.clone();\n    if (isValue) {\n      combinedInterval.data = needsUnpacking\n        ? type.unpack(unwrappedInterval, 0)\n        : unwrappedInterval;\n    } else {\n      combinedInterval.data = createSpecializedProperty(\n        type,\n        entityCollection,\n        packetData\n      );\n    }\n\n    // If no property exists, simply use a new interval collection\n    if (!defined(property)) {\n      object[propertyName] = property = isValue\n        ? new TimeIntervalCollectionProperty()\n        : new CompositeProperty();\n    }\n\n    if (isValue && property instanceof TimeIntervalCollectionProperty) {\n      // If we created a collection, or it already was one, use it.\n      property.intervals.addInterval(combinedInterval);\n    } else if (property instanceof CompositeProperty) {\n      // If the collection was already a CompositeProperty, use it.\n      if (isValue) {\n        combinedInterval.data = new ConstantProperty(combinedInterval.data);\n      }\n      property.intervals.addInterval(combinedInterval);\n    } else {\n      // Otherwise, create a CompositeProperty but preserve the existing data.\n      object[propertyName] = property = convertPropertyToComposite(property);\n\n      // Change the new data to a ConstantProperty and add it.\n      if (isValue) {\n        combinedInterval.data = new ConstantProperty(combinedInterval.data);\n      }\n      property.intervals.addInterval(combinedInterval);\n    }\n\n    return;\n  }\n\n  // isSampled && hasInterval\n  if (!defined(property)) {\n    object[propertyName] = property = new CompositeProperty();\n  }\n\n  // Create a CompositeProperty but preserve the existing data.\n  if (!(property instanceof CompositeProperty)) {\n    object[propertyName] = property = convertPropertyToComposite(property);\n  }\n\n  // Check if the interval already exists in the composite.\n  const intervals = property.intervals;\n  interval = intervals.findInterval(combinedInterval);\n  if (!defined(interval) || !(interval.data instanceof SampledProperty)) {\n    // If not, create a SampledProperty for it.\n    interval = combinedInterval.clone();\n    interval.data = new SampledProperty(type);\n    intervals.addInterval(interval);\n  }\n  interval.data.addSamplesPackedArray(unwrappedInterval, epoch);\n  updateInterpolationSettings(packetData, interval.data);\n}\n\nfunction removePropertyData(property, interval) {\n  if (property instanceof SampledProperty) {\n    property.removeSamples(interval);\n    return;\n  } else if (property instanceof TimeIntervalCollectionProperty) {\n    property.intervals.removeInterval(interval);\n    return;\n  } else if (property instanceof CompositeProperty) {\n    const intervals = property.intervals;\n    for (let i = 0; i < intervals.length; ++i) {\n      const intersection = TimeInterval.intersect(\n        intervals.get(i),\n        interval,\n        scratchTimeInterval\n      );\n      if (!intersection.isEmpty) {\n        // remove data from the contained properties\n        removePropertyData(intersection.data, interval);\n      }\n    }\n    // remove the intervals from the composite\n    intervals.removeInterval(interval);\n    return;\n  }\n}\n\nfunction processPacketData(\n  type,\n  object,\n  propertyName,\n  packetData,\n  interval,\n  sourceUri,\n  entityCollection\n) {\n  if (!defined(packetData)) {\n    return;\n  }\n\n  if (Array.isArray(packetData)) {\n    for (let i = 0, len = packetData.length; i < len; ++i) {\n      processProperty(\n        type,\n        object,\n        propertyName,\n        packetData[i],\n        interval,\n        sourceUri,\n        entityCollection\n      );\n    }\n  } else {\n    processProperty(\n      type,\n      object,\n      propertyName,\n      packetData,\n      interval,\n      sourceUri,\n      entityCollection\n    );\n  }\n}\n\nfunction processPositionProperty(\n  object,\n  propertyName,\n  packetData,\n  constrainedInterval,\n  sourceUri,\n  entityCollection\n) {\n  let combinedInterval = intervalFromString(packetData.interval);\n  if (defined(constrainedInterval)) {\n    if (defined(combinedInterval)) {\n      combinedInterval = TimeInterval.intersect(\n        combinedInterval,\n        constrainedInterval,\n        scratchTimeInterval\n      );\n    } else {\n      combinedInterval = constrainedInterval;\n    }\n  }\n\n  const numberOfDerivatives = defined(packetData.cartesianVelocity) ? 1 : 0;\n  const packedLength = Cartesian3.packedLength * (numberOfDerivatives + 1);\n  let unwrappedInterval;\n  let unwrappedIntervalLength;\n  const isValue = !defined(packetData.reference);\n  const hasInterval =\n    defined(combinedInterval) &&\n    !combinedInterval.equals(Iso8601.MAXIMUM_INTERVAL);\n\n  if (packetData.delete === true) {\n    // If deleting this property for all time, we can simply set to undefined and return.\n    if (!hasInterval) {\n      object[propertyName] = undefined;\n      return;\n    }\n\n    // Deleting depends on the type of property we have.\n    return removePositionPropertyData(object[propertyName], combinedInterval);\n  }\n\n  let referenceFrame;\n  let isSampled = false;\n\n  if (isValue) {\n    if (defined(packetData.referenceFrame)) {\n      referenceFrame = ReferenceFrame[packetData.referenceFrame];\n    }\n    referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n    unwrappedInterval = unwrapCartesianInterval(packetData);\n    unwrappedIntervalLength = defaultValue(unwrappedInterval.length, 1);\n    isSampled = unwrappedIntervalLength > packedLength;\n  }\n\n  // Any time a constant value is assigned, it completely blows away anything else.\n  if (!isSampled && !hasInterval) {\n    if (isValue) {\n      object[propertyName] = new ConstantPositionProperty(\n        Cartesian3.unpack(unwrappedInterval),\n        referenceFrame\n      );\n    } else {\n      object[propertyName] = createReferenceProperty(\n        entityCollection,\n        packetData.reference\n      );\n    }\n    return;\n  }\n\n  let property = object[propertyName];\n\n  let epoch;\n  const packetEpoch = packetData.epoch;\n  if (defined(packetEpoch)) {\n    epoch = JulianDate.fromIso8601(packetEpoch);\n  }\n\n  // Without an interval, any sampled value is infinite, meaning it completely\n  // replaces any non-sampled property that may exist.\n  if (isSampled && !hasInterval) {\n    if (\n      !(property instanceof SampledPositionProperty) ||\n      (defined(referenceFrame) && property.referenceFrame !== referenceFrame)\n    ) {\n      object[propertyName] = property = new SampledPositionProperty(\n        referenceFrame,\n        numberOfDerivatives\n      );\n    }\n    property.addSamplesPackedArray(unwrappedInterval, epoch);\n    updateInterpolationSettings(packetData, property);\n    return;\n  }\n\n  let interval;\n\n  // A constant value with an interval is normally part of a TimeIntervalCollection,\n  // However, if the current property is not a time-interval collection, we need\n  // to turn it into a Composite, preserving the old data with the new interval.\n  if (!isSampled && hasInterval) {\n    // Create a new interval for the constant value.\n    combinedInterval = combinedInterval.clone();\n    if (isValue) {\n      combinedInterval.data = Cartesian3.unpack(unwrappedInterval);\n    } else {\n      combinedInterval.data = createReferenceProperty(\n        entityCollection,\n        packetData.reference\n      );\n    }\n\n    // If no property exists, simply use a new interval collection\n    if (!defined(property)) {\n      if (isValue) {\n        property = new TimeIntervalCollectionPositionProperty(referenceFrame);\n      } else {\n        property = new CompositePositionProperty(referenceFrame);\n      }\n      object[propertyName] = property;\n    }\n\n    if (\n      isValue &&\n      property instanceof TimeIntervalCollectionPositionProperty &&\n      defined(referenceFrame) &&\n      property.referenceFrame === referenceFrame\n    ) {\n      // If we create a collection, or it already existed, use it.\n      property.intervals.addInterval(combinedInterval);\n    } else if (property instanceof CompositePositionProperty) {\n      // If the collection was already a CompositePositionProperty, use it.\n      if (isValue) {\n        combinedInterval.data = new ConstantPositionProperty(\n          combinedInterval.data,\n          referenceFrame\n        );\n      }\n      property.intervals.addInterval(combinedInterval);\n    } else {\n      // Otherwise, create a CompositePositionProperty but preserve the existing data.\n      object[propertyName] = property = convertPositionPropertyToComposite(\n        property\n      );\n\n      // Change the new data to a ConstantPositionProperty and add it.\n      if (isValue) {\n        combinedInterval.data = new ConstantPositionProperty(\n          combinedInterval.data,\n          referenceFrame\n        );\n      }\n      property.intervals.addInterval(combinedInterval);\n    }\n\n    return;\n  }\n\n  // isSampled && hasInterval\n  if (!defined(property)) {\n    object[propertyName] = property = new CompositePositionProperty(\n      referenceFrame\n    );\n  } else if (!(property instanceof CompositePositionProperty)) {\n    // Create a CompositeProperty but preserve the existing data.\n    object[propertyName] = property = convertPositionPropertyToComposite(\n      property\n    );\n  }\n\n  // Check if the interval already exists in the composite.\n  const intervals = property.intervals;\n  interval = intervals.findInterval(combinedInterval);\n  if (\n    !defined(interval) ||\n    !(interval.data instanceof SampledPositionProperty) ||\n    (defined(referenceFrame) && interval.data.referenceFrame !== referenceFrame)\n  ) {\n    // If not, create a SampledPositionProperty for it.\n    interval = combinedInterval.clone();\n    interval.data = new SampledPositionProperty(\n      referenceFrame,\n      numberOfDerivatives\n    );\n    intervals.addInterval(interval);\n  }\n  interval.data.addSamplesPackedArray(unwrappedInterval, epoch);\n  updateInterpolationSettings(packetData, interval.data);\n}\n\nfunction removePositionPropertyData(property, interval) {\n  if (property instanceof SampledPositionProperty) {\n    property.removeSamples(interval);\n    return;\n  } else if (property instanceof TimeIntervalCollectionPositionProperty) {\n    property.intervals.removeInterval(interval);\n    return;\n  } else if (property instanceof CompositePositionProperty) {\n    const intervals = property.intervals;\n    for (let i = 0; i < intervals.length; ++i) {\n      const intersection = TimeInterval.intersect(\n        intervals.get(i),\n        interval,\n        scratchTimeInterval\n      );\n      if (!intersection.isEmpty) {\n        // remove data from the contained properties\n        removePositionPropertyData(intersection.data, interval);\n      }\n    }\n    // remove the intervals from the composite\n    intervals.removeInterval(interval);\n    return;\n  }\n}\n\nfunction processPositionPacketData(\n  object,\n  propertyName,\n  packetData,\n  interval,\n  sourceUri,\n  entityCollection\n) {\n  if (!defined(packetData)) {\n    return;\n  }\n\n  if (Array.isArray(packetData)) {\n    for (let i = 0, len = packetData.length; i < len; ++i) {\n      processPositionProperty(\n        object,\n        propertyName,\n        packetData[i],\n        interval,\n        sourceUri,\n        entityCollection\n      );\n    }\n  } else {\n    processPositionProperty(\n      object,\n      propertyName,\n      packetData,\n      interval,\n      sourceUri,\n      entityCollection\n    );\n  }\n}\n\nfunction processShapePacketData(\n  object,\n  propertyName,\n  packetData,\n  entityCollection\n) {\n  if (defined(packetData.references)) {\n    processReferencesArrayPacketData(\n      object,\n      propertyName,\n      packetData.references,\n      packetData.interval,\n      entityCollection,\n      PropertyArray,\n      CompositeProperty\n    );\n  } else {\n    if (defined(packetData.cartesian2)) {\n      packetData.array = Cartesian2.unpackArray(packetData.cartesian2);\n    } else if (defined(packetData.cartesian)) {\n      // for backwards compatibility, also accept `cartesian`\n      packetData.array = Cartesian2.unpackArray(packetData.cartesian);\n    }\n\n    if (defined(packetData.array)) {\n      processPacketData(\n        Array,\n        object,\n        propertyName,\n        packetData,\n        undefined,\n        undefined,\n        entityCollection\n      );\n    }\n  }\n}\n\nfunction processMaterialProperty(\n  object,\n  propertyName,\n  packetData,\n  constrainedInterval,\n  sourceUri,\n  entityCollection\n) {\n  let combinedInterval = intervalFromString(packetData.interval);\n  if (defined(constrainedInterval)) {\n    if (defined(combinedInterval)) {\n      combinedInterval = TimeInterval.intersect(\n        combinedInterval,\n        constrainedInterval,\n        scratchTimeInterval\n      );\n    } else {\n      combinedInterval = constrainedInterval;\n    }\n  }\n\n  let property = object[propertyName];\n  let existingMaterial;\n  let existingInterval;\n\n  if (defined(combinedInterval)) {\n    if (!(property instanceof CompositeMaterialProperty)) {\n      property = new CompositeMaterialProperty();\n      object[propertyName] = property;\n    }\n    //See if we already have data at that interval.\n    const thisIntervals = property.intervals;\n    existingInterval = thisIntervals.findInterval({\n      start: combinedInterval.start,\n      stop: combinedInterval.stop,\n    });\n    if (defined(existingInterval)) {\n      //We have an interval, but we need to make sure the\n      //new data is the same type of material as the old data.\n      existingMaterial = existingInterval.data;\n    } else {\n      //If not, create it.\n      existingInterval = combinedInterval.clone();\n      thisIntervals.addInterval(existingInterval);\n    }\n  } else {\n    existingMaterial = property;\n  }\n\n  let materialData;\n  if (defined(packetData.solidColor)) {\n    if (!(existingMaterial instanceof ColorMaterialProperty)) {\n      existingMaterial = new ColorMaterialProperty();\n    }\n    materialData = packetData.solidColor;\n    processPacketData(\n      Color,\n      existingMaterial,\n      \"color\",\n      materialData.color,\n      undefined,\n      undefined,\n      entityCollection\n    );\n  } else if (defined(packetData.grid)) {\n    if (!(existingMaterial instanceof GridMaterialProperty)) {\n      existingMaterial = new GridMaterialProperty();\n    }\n    materialData = packetData.grid;\n    processPacketData(\n      Color,\n      existingMaterial,\n      \"color\",\n      materialData.color,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Number,\n      existingMaterial,\n      \"cellAlpha\",\n      materialData.cellAlpha,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Cartesian2,\n      existingMaterial,\n      \"lineCount\",\n      materialData.lineCount,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Cartesian2,\n      existingMaterial,\n      \"lineThickness\",\n      materialData.lineThickness,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Cartesian2,\n      existingMaterial,\n      \"lineOffset\",\n      materialData.lineOffset,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n  } else if (defined(packetData.image)) {\n    if (!(existingMaterial instanceof ImageMaterialProperty)) {\n      existingMaterial = new ImageMaterialProperty();\n    }\n    materialData = packetData.image;\n    processPacketData(\n      Image,\n      existingMaterial,\n      \"image\",\n      materialData.image,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Cartesian2,\n      existingMaterial,\n      \"repeat\",\n      materialData.repeat,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Color,\n      existingMaterial,\n      \"color\",\n      materialData.color,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Boolean,\n      existingMaterial,\n      \"transparent\",\n      materialData.transparent,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n  } else if (defined(packetData.stripe)) {\n    if (!(existingMaterial instanceof StripeMaterialProperty)) {\n      existingMaterial = new StripeMaterialProperty();\n    }\n    materialData = packetData.stripe;\n    processPacketData(\n      StripeOrientation,\n      existingMaterial,\n      \"orientation\",\n      materialData.orientation,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Color,\n      existingMaterial,\n      \"evenColor\",\n      materialData.evenColor,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Color,\n      existingMaterial,\n      \"oddColor\",\n      materialData.oddColor,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Number,\n      existingMaterial,\n      \"offset\",\n      materialData.offset,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Number,\n      existingMaterial,\n      \"repeat\",\n      materialData.repeat,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n  } else if (defined(packetData.polylineOutline)) {\n    if (!(existingMaterial instanceof PolylineOutlineMaterialProperty)) {\n      existingMaterial = new PolylineOutlineMaterialProperty();\n    }\n    materialData = packetData.polylineOutline;\n    processPacketData(\n      Color,\n      existingMaterial,\n      \"color\",\n      materialData.color,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Color,\n      existingMaterial,\n      \"outlineColor\",\n      materialData.outlineColor,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Number,\n      existingMaterial,\n      \"outlineWidth\",\n      materialData.outlineWidth,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n  } else if (defined(packetData.polylineGlow)) {\n    if (!(existingMaterial instanceof PolylineGlowMaterialProperty)) {\n      existingMaterial = new PolylineGlowMaterialProperty();\n    }\n    materialData = packetData.polylineGlow;\n    processPacketData(\n      Color,\n      existingMaterial,\n      \"color\",\n      materialData.color,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Number,\n      existingMaterial,\n      \"glowPower\",\n      materialData.glowPower,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Number,\n      existingMaterial,\n      \"taperPower\",\n      materialData.taperPower,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n  } else if (defined(packetData.polylineArrow)) {\n    if (!(existingMaterial instanceof PolylineArrowMaterialProperty)) {\n      existingMaterial = new PolylineArrowMaterialProperty();\n    }\n    materialData = packetData.polylineArrow;\n    processPacketData(\n      Color,\n      existingMaterial,\n      \"color\",\n      materialData.color,\n      undefined,\n      undefined,\n      entityCollection\n    );\n  } else if (defined(packetData.polylineDash)) {\n    if (!(existingMaterial instanceof PolylineDashMaterialProperty)) {\n      existingMaterial = new PolylineDashMaterialProperty();\n    }\n    materialData = packetData.polylineDash;\n    processPacketData(\n      Color,\n      existingMaterial,\n      \"color\",\n      materialData.color,\n      undefined,\n      undefined,\n      entityCollection\n    );\n    processPacketData(\n      Color,\n      existingMaterial,\n      \"gapColor\",\n      materialData.gapColor,\n      undefined,\n      undefined,\n      entityCollection\n    );\n    processPacketData(\n      Number,\n      existingMaterial,\n      \"dashLength\",\n      materialData.dashLength,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Number,\n      existingMaterial,\n      \"dashPattern\",\n      materialData.dashPattern,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n  } else if (defined(packetData.checkerboard)) {\n    if (!(existingMaterial instanceof CheckerboardMaterialProperty)) {\n      existingMaterial = new CheckerboardMaterialProperty();\n    }\n    materialData = packetData.checkerboard;\n    processPacketData(\n      Color,\n      existingMaterial,\n      \"evenColor\",\n      materialData.evenColor,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Color,\n      existingMaterial,\n      \"oddColor\",\n      materialData.oddColor,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Cartesian2,\n      existingMaterial,\n      \"repeat\",\n      materialData.repeat,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n  }\n\n  if (defined(existingInterval)) {\n    existingInterval.data = existingMaterial;\n  } else {\n    object[propertyName] = existingMaterial;\n  }\n}\n\nfunction processMaterialPacketData(\n  object,\n  propertyName,\n  packetData,\n  interval,\n  sourceUri,\n  entityCollection\n) {\n  if (!defined(packetData)) {\n    return;\n  }\n\n  if (Array.isArray(packetData)) {\n    for (let i = 0, len = packetData.length; i < len; ++i) {\n      processMaterialProperty(\n        object,\n        propertyName,\n        packetData[i],\n        interval,\n        sourceUri,\n        entityCollection\n      );\n    }\n  } else {\n    processMaterialProperty(\n      object,\n      propertyName,\n      packetData,\n      interval,\n      sourceUri,\n      entityCollection\n    );\n  }\n}\n\nfunction processName(entity, packet, entityCollection, sourceUri) {\n  const nameData = packet.name;\n  if (defined(nameData)) {\n    entity.name = packet.name;\n  }\n}\n\nfunction processDescription(entity, packet, entityCollection, sourceUri) {\n  const descriptionData = packet.description;\n  if (defined(descriptionData)) {\n    processPacketData(\n      String,\n      entity,\n      \"description\",\n      descriptionData,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n  }\n}\n\nfunction processPosition(entity, packet, entityCollection, sourceUri) {\n  const positionData = packet.position;\n  if (defined(positionData)) {\n    processPositionPacketData(\n      entity,\n      \"position\",\n      positionData,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n  }\n}\n\nfunction processViewFrom(entity, packet, entityCollection, sourceUri) {\n  const viewFromData = packet.viewFrom;\n  if (defined(viewFromData)) {\n    processPacketData(\n      Cartesian3,\n      entity,\n      \"viewFrom\",\n      viewFromData,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n  }\n}\n\nfunction processOrientation(entity, packet, entityCollection, sourceUri) {\n  const orientationData = packet.orientation;\n  if (defined(orientationData)) {\n    processPacketData(\n      Quaternion,\n      entity,\n      \"orientation\",\n      orientationData,\n      undefined,\n      sourceUri,\n      entityCollection\n    );\n  }\n}\n\nfunction processProperties(entity, packet, entityCollection, sourceUri) {\n  const propertiesData = packet.properties;\n  if (defined(propertiesData)) {\n    if (!defined(entity.properties)) {\n      entity.properties = new PropertyBag();\n    }\n\n    // We cannot simply call processPacketData(entity, 'properties', propertyData, undefined, sourceUri, entityCollection)\n    // because each property of \"properties\" may vary separately.\n    // The properties will be accessible as entity.properties.myprop.getValue(time).\n\n    for (const key in propertiesData) {\n      if (propertiesData.hasOwnProperty(key)) {\n        if (!entity.properties.hasProperty(key)) {\n          entity.properties.addProperty(key);\n        }\n\n        const propertyData = propertiesData[key];\n        if (Array.isArray(propertyData)) {\n          for (let i = 0, len = propertyData.length; i < len; ++i) {\n            processProperty(\n              getPropertyType(propertyData[i]),\n              entity.properties,\n              key,\n              propertyData[i],\n              undefined,\n              sourceUri,\n              entityCollection\n            );\n          }\n        } else {\n          processProperty(\n            getPropertyType(propertyData),\n            entity.properties,\n            key,\n            propertyData,\n            undefined,\n            sourceUri,\n            entityCollection\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction processReferencesArrayPacketData(\n  object,\n  propertyName,\n  references,\n  interval,\n  entityCollection,\n  PropertyArrayType,\n  CompositePropertyArrayType\n) {\n  const properties = references.map(function (reference) {\n    return createReferenceProperty(entityCollection, reference);\n  });\n\n  if (defined(interval)) {\n    interval = intervalFromString(interval);\n    let property = object[propertyName];\n    if (!(property instanceof CompositePropertyArrayType)) {\n      // If the property was not already a CompositeProperty,\n      // create a CompositeProperty but preserve the existing data.\n\n      // Create the composite and add the old property, wrapped in an infinite interval.\n      const composite = new CompositePropertyArrayType();\n      composite.intervals.addInterval(wrapPropertyInInfiniteInterval(property));\n\n      object[propertyName] = property = composite;\n    }\n\n    interval.data = new PropertyArrayType(properties);\n    property.intervals.addInterval(interval);\n  } else {\n    object[propertyName] = new PropertyArrayType(properties);\n  }\n}\n\nfunction processArrayPacketData(\n  object,\n  propertyName,\n  packetData,\n  entityCollection\n) {\n  const references = packetData.references;\n  if (defined(references)) {\n    processReferencesArrayPacketData(\n      object,\n      propertyName,\n      references,\n      packetData.interval,\n      entityCollection,\n      PropertyArray,\n      CompositeProperty\n    );\n  } else {\n    processPacketData(\n      Array,\n      object,\n      propertyName,\n      packetData,\n      undefined,\n      undefined,\n      entityCollection\n    );\n  }\n}\n\nfunction processArray(object, propertyName, packetData, entityCollection) {\n  if (!defined(packetData)) {\n    return;\n  }\n\n  if (Array.isArray(packetData)) {\n    for (let i = 0, length = packetData.length; i < length; ++i) {\n      processArrayPacketData(\n        object,\n        propertyName,\n        packetData[i],\n        entityCollection\n      );\n    }\n  } else {\n    processArrayPacketData(object, propertyName, packetData, entityCollection);\n  }\n}\n\nfunction processPositionArrayPacketData(\n  object,\n  propertyName,\n  packetData,\n  entityCollection\n) {\n  const references = packetData.references;\n  if (defined(references)) {\n    processReferencesArrayPacketData(\n      object,\n      propertyName,\n      references,\n      packetData.interval,\n      entityCollection,\n      PositionPropertyArray,\n      CompositePositionProperty\n    );\n  } else {\n    if (defined(packetData.cartesian)) {\n      packetData.array = Cartesian3.unpackArray(packetData.cartesian);\n    } else if (defined(packetData.cartographicRadians)) {\n      packetData.array = Cartesian3.fromRadiansArrayHeights(\n        packetData.cartographicRadians\n      );\n    } else if (defined(packetData.cartographicDegrees)) {\n      packetData.array = Cartesian3.fromDegreesArrayHeights(\n        packetData.cartographicDegrees\n      );\n    }\n\n    if (defined(packetData.array)) {\n      processPacketData(\n        Array,\n        object,\n        propertyName,\n        packetData,\n        undefined,\n        undefined,\n        entityCollection\n      );\n    }\n  }\n}\n\nfunction processPositionArray(\n  object,\n  propertyName,\n  packetData,\n  entityCollection\n) {\n  if (!defined(packetData)) {\n    return;\n  }\n\n  if (Array.isArray(packetData)) {\n    for (let i = 0, length = packetData.length; i < length; ++i) {\n      processPositionArrayPacketData(\n        object,\n        propertyName,\n        packetData[i],\n        entityCollection\n      );\n    }\n  } else {\n    processPositionArrayPacketData(\n      object,\n      propertyName,\n      packetData,\n      entityCollection\n    );\n  }\n}\n\nfunction unpackCartesianArray(array) {\n  return Cartesian3.unpackArray(array);\n}\n\nfunction unpackCartographicRadiansArray(array) {\n  return Cartesian3.fromRadiansArrayHeights(array);\n}\n\nfunction unpackCartographicDegreesArray(array) {\n  return Cartesian3.fromDegreesArrayHeights(array);\n}\n\nfunction processPositionArrayOfArraysPacketData(\n  object,\n  propertyName,\n  packetData,\n  entityCollection\n) {\n  const references = packetData.references;\n  if (defined(references)) {\n    const properties = references.map(function (referenceArray) {\n      const tempObj = {};\n      processReferencesArrayPacketData(\n        tempObj,\n        \"positions\",\n        referenceArray,\n        packetData.interval,\n        entityCollection,\n        PositionPropertyArray,\n        CompositePositionProperty\n      );\n      return tempObj.positions;\n    });\n    object[propertyName] = new PositionPropertyArray(properties);\n  } else {\n    if (defined(packetData.cartesian)) {\n      packetData.array = packetData.cartesian.map(unpackCartesianArray);\n    } else if (defined(packetData.cartographicRadians)) {\n      packetData.array = packetData.cartographicRadians.map(\n        unpackCartographicRadiansArray\n      );\n    } else if (defined(packetData.cartographicDegrees)) {\n      packetData.array = packetData.cartographicDegrees.map(\n        unpackCartographicDegreesArray\n      );\n    }\n\n    if (defined(packetData.array)) {\n      processPacketData(\n        Array,\n        object,\n        propertyName,\n        packetData,\n        undefined,\n        undefined,\n        entityCollection\n      );\n    }\n  }\n}\n\nfunction processPositionArrayOfArrays(\n  object,\n  propertyName,\n  packetData,\n  entityCollection\n) {\n  if (!defined(packetData)) {\n    return;\n  }\n\n  if (Array.isArray(packetData)) {\n    for (let i = 0, length = packetData.length; i < length; ++i) {\n      processPositionArrayOfArraysPacketData(\n        object,\n        propertyName,\n        packetData[i],\n        entityCollection\n      );\n    }\n  } else {\n    processPositionArrayOfArraysPacketData(\n      object,\n      propertyName,\n      packetData,\n      entityCollection\n    );\n  }\n}\n\nfunction processShape(object, propertyName, packetData, entityCollection) {\n  if (!defined(packetData)) {\n    return;\n  }\n\n  if (Array.isArray(packetData)) {\n    for (let i = 0, length = packetData.length; i < length; i++) {\n      processShapePacketData(\n        object,\n        propertyName,\n        packetData[i],\n        entityCollection\n      );\n    }\n  } else {\n    processShapePacketData(object, propertyName, packetData, entityCollection);\n  }\n}\n\nfunction processAvailability(entity, packet, entityCollection, sourceUri) {\n  const packetData = packet.availability;\n  if (!defined(packetData)) {\n    return;\n  }\n\n  let intervals;\n  if (Array.isArray(packetData)) {\n    for (let i = 0, len = packetData.length; i < len; ++i) {\n      if (!defined(intervals)) {\n        intervals = new TimeIntervalCollection();\n      }\n      intervals.addInterval(intervalFromString(packetData[i]));\n    }\n  } else {\n    intervals = new TimeIntervalCollection();\n    intervals.addInterval(intervalFromString(packetData));\n  }\n  entity.availability = intervals;\n}\n\nfunction processAlignedAxis(\n  billboard,\n  packetData,\n  interval,\n  sourceUri,\n  entityCollection\n) {\n  if (!defined(packetData)) {\n    return;\n  }\n\n  processPacketData(\n    UnitCartesian3,\n    billboard,\n    \"alignedAxis\",\n    packetData,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n}\n\nfunction processBillboard(entity, packet, entityCollection, sourceUri) {\n  const billboardData = packet.billboard;\n  if (!defined(billboardData)) {\n    return;\n  }\n\n  const interval = intervalFromString(billboardData.interval);\n  let billboard = entity.billboard;\n  if (!defined(billboard)) {\n    entity.billboard = billboard = new BillboardGraphics();\n  }\n\n  processPacketData(\n    Boolean,\n    billboard,\n    \"show\",\n    billboardData.show,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Image,\n    billboard,\n    \"image\",\n    billboardData.image,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    billboard,\n    \"scale\",\n    billboardData.scale,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Cartesian2,\n    billboard,\n    \"pixelOffset\",\n    billboardData.pixelOffset,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Cartesian3,\n    billboard,\n    \"eyeOffset\",\n    billboardData.eyeOffset,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    HorizontalOrigin,\n    billboard,\n    \"horizontalOrigin\",\n    billboardData.horizontalOrigin,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    VerticalOrigin,\n    billboard,\n    \"verticalOrigin\",\n    billboardData.verticalOrigin,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    HeightReference,\n    billboard,\n    \"heightReference\",\n    billboardData.heightReference,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Color,\n    billboard,\n    \"color\",\n    billboardData.color,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Rotation,\n    billboard,\n    \"rotation\",\n    billboardData.rotation,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processAlignedAxis(\n    billboard,\n    billboardData.alignedAxis,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    billboard,\n    \"sizeInMeters\",\n    billboardData.sizeInMeters,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    billboard,\n    \"width\",\n    billboardData.width,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    billboard,\n    \"height\",\n    billboardData.height,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    NearFarScalar,\n    billboard,\n    \"scaleByDistance\",\n    billboardData.scaleByDistance,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    NearFarScalar,\n    billboard,\n    \"translucencyByDistance\",\n    billboardData.translucencyByDistance,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    NearFarScalar,\n    billboard,\n    \"pixelOffsetScaleByDistance\",\n    billboardData.pixelOffsetScaleByDistance,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    BoundingRectangle,\n    billboard,\n    \"imageSubRegion\",\n    billboardData.imageSubRegion,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    DistanceDisplayCondition,\n    billboard,\n    \"distanceDisplayCondition\",\n    billboardData.distanceDisplayCondition,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    billboard,\n    \"disableDepthTestDistance\",\n    billboardData.disableDepthTestDistance,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n}\n\nfunction processBox(entity, packet, entityCollection, sourceUri) {\n  const boxData = packet.box;\n  if (!defined(boxData)) {\n    return;\n  }\n\n  const interval = intervalFromString(boxData.interval);\n  let box = entity.box;\n  if (!defined(box)) {\n    entity.box = box = new BoxGraphics();\n  }\n\n  processPacketData(\n    Boolean,\n    box,\n    \"show\",\n    boxData.show,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Cartesian3,\n    box,\n    \"dimensions\",\n    boxData.dimensions,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    HeightReference,\n    box,\n    \"heightReference\",\n    boxData.heightReference,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    box,\n    \"fill\",\n    boxData.fill,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processMaterialPacketData(\n    box,\n    \"material\",\n    boxData.material,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    box,\n    \"outline\",\n    boxData.outline,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Color,\n    box,\n    \"outlineColor\",\n    boxData.outlineColor,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    box,\n    \"outlineWidth\",\n    boxData.outlineWidth,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ShadowMode,\n    box,\n    \"shadows\",\n    boxData.shadows,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    DistanceDisplayCondition,\n    box,\n    \"distanceDisplayCondition\",\n    boxData.distanceDisplayCondition,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n}\n\nfunction processCorridor(entity, packet, entityCollection, sourceUri) {\n  const corridorData = packet.corridor;\n  if (!defined(corridorData)) {\n    return;\n  }\n\n  const interval = intervalFromString(corridorData.interval);\n  let corridor = entity.corridor;\n  if (!defined(corridor)) {\n    entity.corridor = corridor = new CorridorGraphics();\n  }\n\n  processPacketData(\n    Boolean,\n    corridor,\n    \"show\",\n    corridorData.show,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPositionArray(\n    corridor,\n    \"positions\",\n    corridorData.positions,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    corridor,\n    \"width\",\n    corridorData.width,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    corridor,\n    \"height\",\n    corridorData.height,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    HeightReference,\n    corridor,\n    \"heightReference\",\n    corridorData.heightReference,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    corridor,\n    \"extrudedHeight\",\n    corridorData.extrudedHeight,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    HeightReference,\n    corridor,\n    \"extrudedHeightReference\",\n    corridorData.extrudedHeightReference,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    CornerType,\n    corridor,\n    \"cornerType\",\n    corridorData.cornerType,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    corridor,\n    \"granularity\",\n    corridorData.granularity,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    corridor,\n    \"fill\",\n    corridorData.fill,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processMaterialPacketData(\n    corridor,\n    \"material\",\n    corridorData.material,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    corridor,\n    \"outline\",\n    corridorData.outline,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Color,\n    corridor,\n    \"outlineColor\",\n    corridorData.outlineColor,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    corridor,\n    \"outlineWidth\",\n    corridorData.outlineWidth,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ShadowMode,\n    corridor,\n    \"shadows\",\n    corridorData.shadows,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    DistanceDisplayCondition,\n    corridor,\n    \"distanceDisplayCondition\",\n    corridorData.distanceDisplayCondition,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ClassificationType,\n    corridor,\n    \"classificationType\",\n    corridorData.classificationType,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    corridor,\n    \"zIndex\",\n    corridorData.zIndex,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n}\n\nfunction processCylinder(entity, packet, entityCollection, sourceUri) {\n  const cylinderData = packet.cylinder;\n  if (!defined(cylinderData)) {\n    return;\n  }\n\n  const interval = intervalFromString(cylinderData.interval);\n  let cylinder = entity.cylinder;\n  if (!defined(cylinder)) {\n    entity.cylinder = cylinder = new CylinderGraphics();\n  }\n\n  processPacketData(\n    Boolean,\n    cylinder,\n    \"show\",\n    cylinderData.show,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    cylinder,\n    \"length\",\n    cylinderData.length,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    cylinder,\n    \"topRadius\",\n    cylinderData.topRadius,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    cylinder,\n    \"bottomRadius\",\n    cylinderData.bottomRadius,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    HeightReference,\n    cylinder,\n    \"heightReference\",\n    cylinderData.heightReference,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    cylinder,\n    \"fill\",\n    cylinderData.fill,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processMaterialPacketData(\n    cylinder,\n    \"material\",\n    cylinderData.material,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    cylinder,\n    \"outline\",\n    cylinderData.outline,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Color,\n    cylinder,\n    \"outlineColor\",\n    cylinderData.outlineColor,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    cylinder,\n    \"outlineWidth\",\n    cylinderData.outlineWidth,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    cylinder,\n    \"numberOfVerticalLines\",\n    cylinderData.numberOfVerticalLines,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    cylinder,\n    \"slices\",\n    cylinderData.slices,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ShadowMode,\n    cylinder,\n    \"shadows\",\n    cylinderData.shadows,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    DistanceDisplayCondition,\n    cylinder,\n    \"distanceDisplayCondition\",\n    cylinderData.distanceDisplayCondition,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n}\n\nfunction processDocument(packet, dataSource) {\n  const version = packet.version;\n  if (defined(version)) {\n    if (typeof version === \"string\") {\n      const tokens = version.split(\".\");\n      if (tokens.length === 2) {\n        if (tokens[0] !== \"1\") {\n          throw new RuntimeError(\"Cesium only supports CZML version 1.\");\n        }\n        dataSource._version = version;\n      }\n    }\n  }\n\n  if (!defined(dataSource._version)) {\n    throw new RuntimeError(\n      \"CZML version information invalid.  It is expected to be a property on the document object in the <Major>.<Minor> version format.\"\n    );\n  }\n\n  const documentPacket = dataSource._documentPacket;\n\n  if (defined(packet.name)) {\n    documentPacket.name = packet.name;\n  }\n\n  const clockPacket = packet.clock;\n  if (defined(clockPacket)) {\n    const clock = documentPacket.clock;\n    if (!defined(clock)) {\n      documentPacket.clock = {\n        interval: clockPacket.interval,\n        currentTime: clockPacket.currentTime,\n        range: clockPacket.range,\n        step: clockPacket.step,\n        multiplier: clockPacket.multiplier,\n      };\n    } else {\n      clock.interval = defaultValue(clockPacket.interval, clock.interval);\n      clock.currentTime = defaultValue(\n        clockPacket.currentTime,\n        clock.currentTime\n      );\n      clock.range = defaultValue(clockPacket.range, clock.range);\n      clock.step = defaultValue(clockPacket.step, clock.step);\n      clock.multiplier = defaultValue(clockPacket.multiplier, clock.multiplier);\n    }\n  }\n}\n\nfunction processEllipse(entity, packet, entityCollection, sourceUri) {\n  const ellipseData = packet.ellipse;\n  if (!defined(ellipseData)) {\n    return;\n  }\n\n  const interval = intervalFromString(ellipseData.interval);\n  let ellipse = entity.ellipse;\n  if (!defined(ellipse)) {\n    entity.ellipse = ellipse = new EllipseGraphics();\n  }\n\n  processPacketData(\n    Boolean,\n    ellipse,\n    \"show\",\n    ellipseData.show,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    ellipse,\n    \"semiMajorAxis\",\n    ellipseData.semiMajorAxis,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    ellipse,\n    \"semiMinorAxis\",\n    ellipseData.semiMinorAxis,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    ellipse,\n    \"height\",\n    ellipseData.height,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    HeightReference,\n    ellipse,\n    \"heightReference\",\n    ellipseData.heightReference,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    ellipse,\n    \"extrudedHeight\",\n    ellipseData.extrudedHeight,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    HeightReference,\n    ellipse,\n    \"extrudedHeightReference\",\n    ellipseData.extrudedHeightReference,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Rotation,\n    ellipse,\n    \"rotation\",\n    ellipseData.rotation,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Rotation,\n    ellipse,\n    \"stRotation\",\n    ellipseData.stRotation,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    ellipse,\n    \"granularity\",\n    ellipseData.granularity,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    ellipse,\n    \"fill\",\n    ellipseData.fill,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processMaterialPacketData(\n    ellipse,\n    \"material\",\n    ellipseData.material,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    ellipse,\n    \"outline\",\n    ellipseData.outline,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Color,\n    ellipse,\n    \"outlineColor\",\n    ellipseData.outlineColor,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    ellipse,\n    \"outlineWidth\",\n    ellipseData.outlineWidth,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    ellipse,\n    \"numberOfVerticalLines\",\n    ellipseData.numberOfVerticalLines,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ShadowMode,\n    ellipse,\n    \"shadows\",\n    ellipseData.shadows,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    DistanceDisplayCondition,\n    ellipse,\n    \"distanceDisplayCondition\",\n    ellipseData.distanceDisplayCondition,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ClassificationType,\n    ellipse,\n    \"classificationType\",\n    ellipseData.classificationType,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    ellipse,\n    \"zIndex\",\n    ellipseData.zIndex,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n}\n\nfunction processEllipsoid(entity, packet, entityCollection, sourceUri) {\n  const ellipsoidData = packet.ellipsoid;\n  if (!defined(ellipsoidData)) {\n    return;\n  }\n\n  const interval = intervalFromString(ellipsoidData.interval);\n  let ellipsoid = entity.ellipsoid;\n  if (!defined(ellipsoid)) {\n    entity.ellipsoid = ellipsoid = new EllipsoidGraphics();\n  }\n\n  processPacketData(\n    Boolean,\n    ellipsoid,\n    \"show\",\n    ellipsoidData.show,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Cartesian3,\n    ellipsoid,\n    \"radii\",\n    ellipsoidData.radii,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Cartesian3,\n    ellipsoid,\n    \"innerRadii\",\n    ellipsoidData.innerRadii,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    ellipsoid,\n    \"minimumClock\",\n    ellipsoidData.minimumClock,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    ellipsoid,\n    \"maximumClock\",\n    ellipsoidData.maximumClock,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    ellipsoid,\n    \"minimumCone\",\n    ellipsoidData.minimumCone,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    ellipsoid,\n    \"maximumCone\",\n    ellipsoidData.maximumCone,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    HeightReference,\n    ellipsoid,\n    \"heightReference\",\n    ellipsoidData.heightReference,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    ellipsoid,\n    \"fill\",\n    ellipsoidData.fill,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processMaterialPacketData(\n    ellipsoid,\n    \"material\",\n    ellipsoidData.material,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    ellipsoid,\n    \"outline\",\n    ellipsoidData.outline,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Color,\n    ellipsoid,\n    \"outlineColor\",\n    ellipsoidData.outlineColor,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    ellipsoid,\n    \"outlineWidth\",\n    ellipsoidData.outlineWidth,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    ellipsoid,\n    \"stackPartitions\",\n    ellipsoidData.stackPartitions,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    ellipsoid,\n    \"slicePartitions\",\n    ellipsoidData.slicePartitions,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    ellipsoid,\n    \"subdivisions\",\n    ellipsoidData.subdivisions,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ShadowMode,\n    ellipsoid,\n    \"shadows\",\n    ellipsoidData.shadows,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    DistanceDisplayCondition,\n    ellipsoid,\n    \"distanceDisplayCondition\",\n    ellipsoidData.distanceDisplayCondition,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n}\n\nfunction processLabel(entity, packet, entityCollection, sourceUri) {\n  const labelData = packet.label;\n  if (!defined(labelData)) {\n    return;\n  }\n\n  const interval = intervalFromString(labelData.interval);\n  let label = entity.label;\n  if (!defined(label)) {\n    entity.label = label = new LabelGraphics();\n  }\n\n  processPacketData(\n    Boolean,\n    label,\n    \"show\",\n    labelData.show,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    String,\n    label,\n    \"text\",\n    labelData.text,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    String,\n    label,\n    \"font\",\n    labelData.font,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    LabelStyle,\n    label,\n    \"style\",\n    labelData.style,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    label,\n    \"scale\",\n    labelData.scale,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    label,\n    \"showBackground\",\n    labelData.showBackground,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Color,\n    label,\n    \"backgroundColor\",\n    labelData.backgroundColor,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Cartesian2,\n    label,\n    \"backgroundPadding\",\n    labelData.backgroundPadding,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Cartesian2,\n    label,\n    \"pixelOffset\",\n    labelData.pixelOffset,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Cartesian3,\n    label,\n    \"eyeOffset\",\n    labelData.eyeOffset,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    HorizontalOrigin,\n    label,\n    \"horizontalOrigin\",\n    labelData.horizontalOrigin,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    VerticalOrigin,\n    label,\n    \"verticalOrigin\",\n    labelData.verticalOrigin,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    HeightReference,\n    label,\n    \"heightReference\",\n    labelData.heightReference,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Color,\n    label,\n    \"fillColor\",\n    labelData.fillColor,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Color,\n    label,\n    \"outlineColor\",\n    labelData.outlineColor,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    label,\n    \"outlineWidth\",\n    labelData.outlineWidth,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    NearFarScalar,\n    label,\n    \"translucencyByDistance\",\n    labelData.translucencyByDistance,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    NearFarScalar,\n    label,\n    \"pixelOffsetScaleByDistance\",\n    labelData.pixelOffsetScaleByDistance,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    NearFarScalar,\n    label,\n    \"scaleByDistance\",\n    labelData.scaleByDistance,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    DistanceDisplayCondition,\n    label,\n    \"distanceDisplayCondition\",\n    labelData.distanceDisplayCondition,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    label,\n    \"disableDepthTestDistance\",\n    labelData.disableDepthTestDistance,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n}\n\nfunction processModel(entity, packet, entityCollection, sourceUri) {\n  const modelData = packet.model;\n  if (!defined(modelData)) {\n    return;\n  }\n\n  const interval = intervalFromString(modelData.interval);\n  let model = entity.model;\n  if (!defined(model)) {\n    entity.model = model = new ModelGraphics();\n  }\n\n  processPacketData(\n    Boolean,\n    model,\n    \"show\",\n    modelData.show,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Uri,\n    model,\n    \"uri\",\n    modelData.gltf,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    model,\n    \"scale\",\n    modelData.scale,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    model,\n    \"minimumPixelSize\",\n    modelData.minimumPixelSize,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    model,\n    \"maximumScale\",\n    modelData.maximumScale,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    model,\n    \"incrementallyLoadTextures\",\n    modelData.incrementallyLoadTextures,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    model,\n    \"runAnimations\",\n    modelData.runAnimations,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    model,\n    \"clampAnimations\",\n    modelData.clampAnimations,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ShadowMode,\n    model,\n    \"shadows\",\n    modelData.shadows,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    HeightReference,\n    model,\n    \"heightReference\",\n    modelData.heightReference,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Color,\n    model,\n    \"silhouetteColor\",\n    modelData.silhouetteColor,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    model,\n    \"silhouetteSize\",\n    modelData.silhouetteSize,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Color,\n    model,\n    \"color\",\n    modelData.color,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ColorBlendMode,\n    model,\n    \"colorBlendMode\",\n    modelData.colorBlendMode,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    model,\n    \"colorBlendAmount\",\n    modelData.colorBlendAmount,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    DistanceDisplayCondition,\n    model,\n    \"distanceDisplayCondition\",\n    modelData.distanceDisplayCondition,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n\n  let i, len;\n  const nodeTransformationsData = modelData.nodeTransformations;\n  if (defined(nodeTransformationsData)) {\n    if (Array.isArray(nodeTransformationsData)) {\n      for (i = 0, len = nodeTransformationsData.length; i < len; ++i) {\n        processNodeTransformations(\n          model,\n          nodeTransformationsData[i],\n          interval,\n          sourceUri,\n          entityCollection\n        );\n      }\n    } else {\n      processNodeTransformations(\n        model,\n        nodeTransformationsData,\n        interval,\n        sourceUri,\n        entityCollection\n      );\n    }\n  }\n\n  const articulationsData = modelData.articulations;\n  if (defined(articulationsData)) {\n    if (Array.isArray(articulationsData)) {\n      for (i = 0, len = articulationsData.length; i < len; ++i) {\n        processArticulations(\n          model,\n          articulationsData[i],\n          interval,\n          sourceUri,\n          entityCollection\n        );\n      }\n    } else {\n      processArticulations(\n        model,\n        articulationsData,\n        interval,\n        sourceUri,\n        entityCollection\n      );\n    }\n  }\n}\n\nfunction processNodeTransformations(\n  model,\n  nodeTransformationsData,\n  constrainedInterval,\n  sourceUri,\n  entityCollection\n) {\n  let combinedInterval = intervalFromString(nodeTransformationsData.interval);\n  if (defined(constrainedInterval)) {\n    if (defined(combinedInterval)) {\n      combinedInterval = TimeInterval.intersect(\n        combinedInterval,\n        constrainedInterval,\n        scratchTimeInterval\n      );\n    } else {\n      combinedInterval = constrainedInterval;\n    }\n  }\n\n  let nodeTransformations = model.nodeTransformations;\n  const nodeNames = Object.keys(nodeTransformationsData);\n  for (let i = 0, len = nodeNames.length; i < len; ++i) {\n    const nodeName = nodeNames[i];\n    if (nodeName === \"interval\") {\n      continue;\n    }\n\n    const nodeTransformationData = nodeTransformationsData[nodeName];\n    if (!defined(nodeTransformationData)) {\n      continue;\n    }\n\n    if (!defined(nodeTransformations)) {\n      model.nodeTransformations = nodeTransformations = new PropertyBag();\n    }\n\n    if (!nodeTransformations.hasProperty(nodeName)) {\n      nodeTransformations.addProperty(nodeName);\n    }\n\n    let nodeTransformation = nodeTransformations[nodeName];\n    if (!defined(nodeTransformation)) {\n      nodeTransformations[\n        nodeName\n      ] = nodeTransformation = new NodeTransformationProperty();\n    }\n\n    processPacketData(\n      Cartesian3,\n      nodeTransformation,\n      \"translation\",\n      nodeTransformationData.translation,\n      combinedInterval,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Quaternion,\n      nodeTransformation,\n      \"rotation\",\n      nodeTransformationData.rotation,\n      combinedInterval,\n      sourceUri,\n      entityCollection\n    );\n    processPacketData(\n      Cartesian3,\n      nodeTransformation,\n      \"scale\",\n      nodeTransformationData.scale,\n      combinedInterval,\n      sourceUri,\n      entityCollection\n    );\n  }\n}\n\nfunction processArticulations(\n  model,\n  articulationsData,\n  constrainedInterval,\n  sourceUri,\n  entityCollection\n) {\n  let combinedInterval = intervalFromString(articulationsData.interval);\n  if (defined(constrainedInterval)) {\n    if (defined(combinedInterval)) {\n      combinedInterval = TimeInterval.intersect(\n        combinedInterval,\n        constrainedInterval,\n        scratchTimeInterval\n      );\n    } else {\n      combinedInterval = constrainedInterval;\n    }\n  }\n\n  let articulations = model.articulations;\n  const keys = Object.keys(articulationsData);\n  for (let i = 0, len = keys.length; i < len; ++i) {\n    const key = keys[i];\n    if (key === \"interval\") {\n      continue;\n    }\n\n    const articulationStageData = articulationsData[key];\n    if (!defined(articulationStageData)) {\n      continue;\n    }\n\n    if (!defined(articulations)) {\n      model.articulations = articulations = new PropertyBag();\n    }\n\n    if (!articulations.hasProperty(key)) {\n      articulations.addProperty(key);\n    }\n\n    processPacketData(\n      Number,\n      articulations,\n      key,\n      articulationStageData,\n      combinedInterval,\n      sourceUri,\n      entityCollection\n    );\n  }\n}\n\nfunction processPath(entity, packet, entityCollection, sourceUri) {\n  const pathData = packet.path;\n  if (!defined(pathData)) {\n    return;\n  }\n\n  const interval = intervalFromString(pathData.interval);\n  let path = entity.path;\n  if (!defined(path)) {\n    entity.path = path = new PathGraphics();\n  }\n\n  processPacketData(\n    Boolean,\n    path,\n    \"show\",\n    pathData.show,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    path,\n    \"leadTime\",\n    pathData.leadTime,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    path,\n    \"trailTime\",\n    pathData.trailTime,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    path,\n    \"width\",\n    pathData.width,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    path,\n    \"resolution\",\n    pathData.resolution,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processMaterialPacketData(\n    path,\n    \"material\",\n    pathData.material,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    DistanceDisplayCondition,\n    path,\n    \"distanceDisplayCondition\",\n    pathData.distanceDisplayCondition,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n}\n\nfunction processPoint(entity, packet, entityCollection, sourceUri) {\n  const pointData = packet.point;\n  if (!defined(pointData)) {\n    return;\n  }\n\n  const interval = intervalFromString(pointData.interval);\n  let point = entity.point;\n  if (!defined(point)) {\n    entity.point = point = new PointGraphics();\n  }\n\n  processPacketData(\n    Boolean,\n    point,\n    \"show\",\n    pointData.show,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    point,\n    \"pixelSize\",\n    pointData.pixelSize,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    HeightReference,\n    point,\n    \"heightReference\",\n    pointData.heightReference,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Color,\n    point,\n    \"color\",\n    pointData.color,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Color,\n    point,\n    \"outlineColor\",\n    pointData.outlineColor,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    point,\n    \"outlineWidth\",\n    pointData.outlineWidth,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    NearFarScalar,\n    point,\n    \"scaleByDistance\",\n    pointData.scaleByDistance,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    NearFarScalar,\n    point,\n    \"translucencyByDistance\",\n    pointData.translucencyByDistance,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    DistanceDisplayCondition,\n    point,\n    \"distanceDisplayCondition\",\n    pointData.distanceDisplayCondition,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    point,\n    \"disableDepthTestDistance\",\n    pointData.disableDepthTestDistance,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n}\n\nfunction PolygonHierarchyProperty(polygon) {\n  this.polygon = polygon;\n  this._definitionChanged = new Event();\n}\n\nObject.defineProperties(PolygonHierarchyProperty.prototype, {\n  isConstant: {\n    get: function () {\n      const positions = this.polygon._positions;\n      const holes = this.polygon._holes;\n      return (\n        (!defined(positions) || positions.isConstant) &&\n        (!defined(holes) || holes.isConstant)\n      );\n    },\n  },\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n});\n\nPolygonHierarchyProperty.prototype.getValue = function (time, result) {\n  let positions;\n  if (defined(this.polygon._positions)) {\n    positions = this.polygon._positions.getValue(time);\n  }\n\n  let holes;\n  if (defined(this.polygon._holes)) {\n    holes = this.polygon._holes.getValue(time);\n    if (defined(holes)) {\n      holes = holes.map(function (holePositions) {\n        return new PolygonHierarchy(holePositions);\n      });\n    }\n  }\n\n  if (!defined(result)) {\n    return new PolygonHierarchy(positions, holes);\n  }\n\n  result.positions = positions;\n  result.holes = holes;\n  return result;\n};\n\nPolygonHierarchyProperty.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (other instanceof PolygonHierarchyProperty &&\n      Property.equals(this.polygon._positions, other.polygon._positions) &&\n      Property.equals(this.polygon._holes, other.polygon._holes))\n  );\n};\n\nfunction processPolygon(entity, packet, entityCollection, sourceUri) {\n  const polygonData = packet.polygon;\n  if (!defined(polygonData)) {\n    return;\n  }\n\n  const interval = intervalFromString(polygonData.interval);\n  let polygon = entity.polygon;\n  if (!defined(polygon)) {\n    entity.polygon = polygon = new PolygonGraphics();\n  }\n\n  processPacketData(\n    Boolean,\n    polygon,\n    \"show\",\n    polygonData.show,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n\n  // adapt 'position' property producing Cartesian[]\n  // and 'holes' property producing Cartesian[][]\n  // to a single property producing PolygonHierarchy\n  processPositionArray(\n    polygon,\n    \"_positions\",\n    polygonData.positions,\n    entityCollection\n  );\n  processPositionArrayOfArrays(\n    polygon,\n    \"_holes\",\n    polygonData.holes,\n    entityCollection\n  );\n  if (defined(polygon._positions) || defined(polygon._holes)) {\n    polygon.hierarchy = new PolygonHierarchyProperty(polygon);\n  }\n\n  processPacketData(\n    Number,\n    polygon,\n    \"height\",\n    polygonData.height,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    HeightReference,\n    polygon,\n    \"heightReference\",\n    polygonData.heightReference,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    polygon,\n    \"extrudedHeight\",\n    polygonData.extrudedHeight,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    HeightReference,\n    polygon,\n    \"extrudedHeightReference\",\n    polygonData.extrudedHeightReference,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Rotation,\n    polygon,\n    \"stRotation\",\n    polygonData.stRotation,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    polygon,\n    \"granularity\",\n    polygonData.granularity,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    polygon,\n    \"fill\",\n    polygonData.fill,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processMaterialPacketData(\n    polygon,\n    \"material\",\n    polygonData.material,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    polygon,\n    \"outline\",\n    polygonData.outline,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Color,\n    polygon,\n    \"outlineColor\",\n    polygonData.outlineColor,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    polygon,\n    \"outlineWidth\",\n    polygonData.outlineWidth,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    polygon,\n    \"perPositionHeight\",\n    polygonData.perPositionHeight,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    polygon,\n    \"closeTop\",\n    polygonData.closeTop,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    polygon,\n    \"closeBottom\",\n    polygonData.closeBottom,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ArcType,\n    polygon,\n    \"arcType\",\n    polygonData.arcType,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ShadowMode,\n    polygon,\n    \"shadows\",\n    polygonData.shadows,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    DistanceDisplayCondition,\n    polygon,\n    \"distanceDisplayCondition\",\n    polygonData.distanceDisplayCondition,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ClassificationType,\n    polygon,\n    \"classificationType\",\n    polygonData.classificationType,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    polygon,\n    \"zIndex\",\n    polygonData.zIndex,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n}\n\nfunction adaptFollowSurfaceToArcType(followSurface) {\n  return followSurface ? ArcType.GEODESIC : ArcType.NONE;\n}\n\nfunction processPolyline(entity, packet, entityCollection, sourceUri) {\n  const polylineData = packet.polyline;\n  if (!defined(polylineData)) {\n    return;\n  }\n\n  const interval = intervalFromString(polylineData.interval);\n  let polyline = entity.polyline;\n  if (!defined(polyline)) {\n    entity.polyline = polyline = new PolylineGraphics();\n  }\n\n  processPacketData(\n    Boolean,\n    polyline,\n    \"show\",\n    polylineData.show,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPositionArray(\n    polyline,\n    \"positions\",\n    polylineData.positions,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    polyline,\n    \"width\",\n    polylineData.width,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    polyline,\n    \"granularity\",\n    polylineData.granularity,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processMaterialPacketData(\n    polyline,\n    \"material\",\n    polylineData.material,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processMaterialPacketData(\n    polyline,\n    \"depthFailMaterial\",\n    polylineData.depthFailMaterial,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ArcType,\n    polyline,\n    \"arcType\",\n    polylineData.arcType,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    polyline,\n    \"clampToGround\",\n    polylineData.clampToGround,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ShadowMode,\n    polyline,\n    \"shadows\",\n    polylineData.shadows,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    DistanceDisplayCondition,\n    polyline,\n    \"distanceDisplayCondition\",\n    polylineData.distanceDisplayCondition,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ClassificationType,\n    polyline,\n    \"classificationType\",\n    polylineData.classificationType,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    polyline,\n    \"zIndex\",\n    polylineData.zIndex,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n\n  // for backwards compatibility, adapt CZML followSurface to arcType.\n  if (defined(polylineData.followSurface) && !defined(polylineData.arcType)) {\n    const tempObj = {};\n    processPacketData(\n      Boolean,\n      tempObj,\n      \"followSurface\",\n      polylineData.followSurface,\n      interval,\n      sourceUri,\n      entityCollection\n    );\n    polyline.arcType = createAdapterProperty(\n      tempObj.followSurface,\n      adaptFollowSurfaceToArcType\n    );\n  }\n}\n\nfunction processPolylineVolume(entity, packet, entityCollection, sourceUri) {\n  const polylineVolumeData = packet.polylineVolume;\n  if (!defined(polylineVolumeData)) {\n    return;\n  }\n\n  const interval = intervalFromString(polylineVolumeData.interval);\n  let polylineVolume = entity.polylineVolume;\n  if (!defined(polylineVolume)) {\n    entity.polylineVolume = polylineVolume = new PolylineVolumeGraphics();\n  }\n\n  processPositionArray(\n    polylineVolume,\n    \"positions\",\n    polylineVolumeData.positions,\n    entityCollection\n  );\n  processShape(\n    polylineVolume,\n    \"shape\",\n    polylineVolumeData.shape,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    polylineVolume,\n    \"show\",\n    polylineVolumeData.show,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    CornerType,\n    polylineVolume,\n    \"cornerType\",\n    polylineVolumeData.cornerType,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    polylineVolume,\n    \"fill\",\n    polylineVolumeData.fill,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processMaterialPacketData(\n    polylineVolume,\n    \"material\",\n    polylineVolumeData.material,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    polylineVolume,\n    \"outline\",\n    polylineVolumeData.outline,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Color,\n    polylineVolume,\n    \"outlineColor\",\n    polylineVolumeData.outlineColor,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    polylineVolume,\n    \"outlineWidth\",\n    polylineVolumeData.outlineWidth,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    polylineVolume,\n    \"granularity\",\n    polylineVolumeData.granularity,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ShadowMode,\n    polylineVolume,\n    \"shadows\",\n    polylineVolumeData.shadows,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    DistanceDisplayCondition,\n    polylineVolume,\n    \"distanceDisplayCondition\",\n    polylineVolumeData.distanceDisplayCondition,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n}\n\nfunction processRectangle(entity, packet, entityCollection, sourceUri) {\n  const rectangleData = packet.rectangle;\n  if (!defined(rectangleData)) {\n    return;\n  }\n\n  const interval = intervalFromString(rectangleData.interval);\n  let rectangle = entity.rectangle;\n  if (!defined(rectangle)) {\n    entity.rectangle = rectangle = new RectangleGraphics();\n  }\n\n  processPacketData(\n    Boolean,\n    rectangle,\n    \"show\",\n    rectangleData.show,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Rectangle,\n    rectangle,\n    \"coordinates\",\n    rectangleData.coordinates,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    rectangle,\n    \"height\",\n    rectangleData.height,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    HeightReference,\n    rectangle,\n    \"heightReference\",\n    rectangleData.heightReference,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    rectangle,\n    \"extrudedHeight\",\n    rectangleData.extrudedHeight,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    HeightReference,\n    rectangle,\n    \"extrudedHeightReference\",\n    rectangleData.extrudedHeightReference,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Rotation,\n    rectangle,\n    \"rotation\",\n    rectangleData.rotation,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Rotation,\n    rectangle,\n    \"stRotation\",\n    rectangleData.stRotation,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    rectangle,\n    \"granularity\",\n    rectangleData.granularity,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    rectangle,\n    \"fill\",\n    rectangleData.fill,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processMaterialPacketData(\n    rectangle,\n    \"material\",\n    rectangleData.material,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    rectangle,\n    \"outline\",\n    rectangleData.outline,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Color,\n    rectangle,\n    \"outlineColor\",\n    rectangleData.outlineColor,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    rectangle,\n    \"outlineWidth\",\n    rectangleData.outlineWidth,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ShadowMode,\n    rectangle,\n    \"shadows\",\n    rectangleData.shadows,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    DistanceDisplayCondition,\n    rectangle,\n    \"distanceDisplayCondition\",\n    rectangleData.distanceDisplayCondition,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ClassificationType,\n    rectangle,\n    \"classificationType\",\n    rectangleData.classificationType,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    rectangle,\n    \"zIndex\",\n    rectangleData.zIndex,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n}\n\nfunction processTileset(entity, packet, entityCollection, sourceUri) {\n  const tilesetData = packet.tileset;\n  if (!defined(tilesetData)) {\n    return;\n  }\n\n  const interval = intervalFromString(tilesetData.interval);\n  let tileset = entity.tileset;\n  if (!defined(tileset)) {\n    entity.tileset = tileset = new Cesium3DTilesetGraphics();\n  }\n\n  processPacketData(\n    Boolean,\n    tileset,\n    \"show\",\n    tilesetData.show,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Uri,\n    tileset,\n    \"uri\",\n    tilesetData.uri,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    tileset,\n    \"maximumScreenSpaceError\",\n    tilesetData.maximumScreenSpaceError,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n}\n\nfunction processWall(entity, packet, entityCollection, sourceUri) {\n  const wallData = packet.wall;\n  if (!defined(wallData)) {\n    return;\n  }\n\n  const interval = intervalFromString(wallData.interval);\n  let wall = entity.wall;\n  if (!defined(wall)) {\n    entity.wall = wall = new WallGraphics();\n  }\n\n  processPacketData(\n    Boolean,\n    wall,\n    \"show\",\n    wallData.show,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPositionArray(wall, \"positions\", wallData.positions, entityCollection);\n  processArray(\n    wall,\n    \"minimumHeights\",\n    wallData.minimumHeights,\n    entityCollection\n  );\n  processArray(\n    wall,\n    \"maximumHeights\",\n    wallData.maximumHeights,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    wall,\n    \"granularity\",\n    wallData.granularity,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    wall,\n    \"fill\",\n    wallData.fill,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processMaterialPacketData(\n    wall,\n    \"material\",\n    wallData.material,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Boolean,\n    wall,\n    \"outline\",\n    wallData.outline,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Color,\n    wall,\n    \"outlineColor\",\n    wallData.outlineColor,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    Number,\n    wall,\n    \"outlineWidth\",\n    wallData.outlineWidth,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    ShadowMode,\n    wall,\n    \"shadows\",\n    wallData.shadows,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n  processPacketData(\n    DistanceDisplayCondition,\n    wall,\n    \"distanceDisplayCondition\",\n    wallData.distanceDisplayCondition,\n    interval,\n    sourceUri,\n    entityCollection\n  );\n}\n\nfunction processCzmlPacket(\n  packet,\n  entityCollection,\n  updaterFunctions,\n  sourceUri,\n  dataSource\n) {\n  let objectId = packet.id;\n  if (!defined(objectId)) {\n    objectId = createGuid();\n  }\n\n  currentId = objectId;\n\n  if (!defined(dataSource._version) && objectId !== \"document\") {\n    throw new RuntimeError(\n      \"The first CZML packet is required to be the document object.\"\n    );\n  }\n\n  if (packet[\"delete\"] === true) {\n    entityCollection.removeById(objectId);\n  } else if (objectId === \"document\") {\n    processDocument(packet, dataSource);\n  } else {\n    const entity = entityCollection.getOrCreateEntity(objectId);\n\n    const parentId = packet.parent;\n    if (defined(parentId)) {\n      entity.parent = entityCollection.getOrCreateEntity(parentId);\n    }\n\n    for (let i = updaterFunctions.length - 1; i > -1; i--) {\n      updaterFunctions[i](entity, packet, entityCollection, sourceUri);\n    }\n  }\n\n  currentId = undefined;\n}\n\nfunction updateClock(dataSource) {\n  let clock;\n  const clockPacket = dataSource._documentPacket.clock;\n  if (!defined(clockPacket)) {\n    if (!defined(dataSource._clock)) {\n      const availability = dataSource._entityCollection.computeAvailability();\n      if (!availability.start.equals(Iso8601.MINIMUM_VALUE)) {\n        const startTime = availability.start;\n        const stopTime = availability.stop;\n        const totalSeconds = JulianDate.secondsDifference(stopTime, startTime);\n        const multiplier = Math.round(totalSeconds / 120.0);\n\n        clock = new DataSourceClock();\n        clock.startTime = JulianDate.clone(startTime);\n        clock.stopTime = JulianDate.clone(stopTime);\n        clock.clockRange = ClockRange.LOOP_STOP;\n        clock.multiplier = multiplier;\n        clock.currentTime = JulianDate.clone(startTime);\n        clock.clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n        dataSource._clock = clock;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  if (defined(dataSource._clock)) {\n    clock = dataSource._clock.clone();\n  } else {\n    clock = new DataSourceClock();\n    clock.startTime = Iso8601.MINIMUM_VALUE.clone();\n    clock.stopTime = Iso8601.MAXIMUM_VALUE.clone();\n    clock.currentTime = Iso8601.MINIMUM_VALUE.clone();\n    clock.clockRange = ClockRange.LOOP_STOP;\n    clock.clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n    clock.multiplier = 1.0;\n  }\n\n  const interval = intervalFromString(clockPacket.interval);\n  if (defined(interval)) {\n    clock.startTime = interval.start;\n    clock.stopTime = interval.stop;\n  }\n\n  if (defined(clockPacket.currentTime)) {\n    clock.currentTime = JulianDate.fromIso8601(clockPacket.currentTime);\n  }\n  if (defined(clockPacket.range)) {\n    clock.clockRange = defaultValue(\n      ClockRange[clockPacket.range],\n      ClockRange.LOOP_STOP\n    );\n  }\n  if (defined(clockPacket.step)) {\n    clock.clockStep = defaultValue(\n      ClockStep[clockPacket.step],\n      ClockStep.SYSTEM_CLOCK_MULTIPLIER\n    );\n  }\n  if (defined(clockPacket.multiplier)) {\n    clock.multiplier = clockPacket.multiplier;\n  }\n\n  if (!clock.equals(dataSource._clock)) {\n    dataSource._clock = clock.clone(dataSource._clock);\n    return true;\n  }\n\n  return false;\n}\n\nfunction load(dataSource, czml, options, clear) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(czml)) {\n    throw new DeveloperError(\"czml is required.\");\n  }\n  //>>includeEnd('debug');\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  let promise = czml;\n  let sourceUri = options.sourceUri;\n\n  // User specified credit\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  dataSource._credit = credit;\n\n  // If the czml is a URL\n  if (typeof czml === \"string\" || czml instanceof Resource) {\n    czml = Resource.createIfNeeded(czml);\n    promise = czml.fetchJson();\n    sourceUri = defaultValue(sourceUri, czml.clone());\n\n    // Add resource credits to our list of credits to display\n    const resourceCredits = dataSource._resourceCredits;\n    const credits = czml.credits;\n    if (defined(credits)) {\n      const length = credits.length;\n      for (let i = 0; i < length; i++) {\n        resourceCredits.push(credits[i]);\n      }\n    }\n  }\n\n  sourceUri = Resource.createIfNeeded(sourceUri);\n\n  DataSource.setLoading(dataSource, true);\n\n  return Promise.resolve(promise)\n    .then(function (czml) {\n      return loadCzml(dataSource, czml, sourceUri, clear);\n    })\n    .catch(function (error) {\n      DataSource.setLoading(dataSource, false);\n      dataSource._error.raiseEvent(dataSource, error);\n      console.log(error);\n      return Promise.reject(error);\n    });\n}\n\nfunction loadCzml(dataSource, czml, sourceUri, clear) {\n  DataSource.setLoading(dataSource, true);\n  const entityCollection = dataSource._entityCollection;\n\n  if (clear) {\n    dataSource._version = undefined;\n    dataSource._documentPacket = new DocumentPacket();\n    entityCollection.removeAll();\n  }\n\n  CzmlDataSource._processCzml(\n    czml,\n    entityCollection,\n    sourceUri,\n    undefined,\n    dataSource\n  );\n\n  let raiseChangedEvent = updateClock(dataSource);\n\n  const documentPacket = dataSource._documentPacket;\n  if (\n    defined(documentPacket.name) &&\n    dataSource._name !== documentPacket.name\n  ) {\n    dataSource._name = documentPacket.name;\n    raiseChangedEvent = true;\n  } else if (!defined(dataSource._name) && defined(sourceUri)) {\n    dataSource._name = getFilenameFromUri(sourceUri.getUrlComponent());\n    raiseChangedEvent = true;\n  }\n\n  DataSource.setLoading(dataSource, false);\n  if (raiseChangedEvent) {\n    dataSource._changed.raiseEvent(dataSource);\n  }\n\n  return dataSource;\n}\n\nfunction DocumentPacket() {\n  this.name = undefined;\n  this.clock = undefined;\n}\n\n/**\n * @typedef {Object} CzmlDataSource.LoadOptions\n *\n * Initialization options for the <code>load</code> method.\n *\n * @property {Resource|string} [sourceUri] Overrides the url to use for resolving relative links.\n * @property {Credit|string} [credit] A credit for the data source, which is displayed on the canvas.\n */\n\n/**\n * A {@link DataSource} which processes {@link https://github.com/AnalyticalGraphicsInc/czml-writer/wiki/CZML-Guide|CZML}.\n * @alias CzmlDataSource\n * @constructor\n *\n * @param {String} [name] An optional name for the data source.  This value will be overwritten if a loaded document contains a name.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=CZML.html|Cesium Sandcastle CZML Demo}\n */\nfunction CzmlDataSource(name) {\n  this._name = name;\n  this._changed = new Event();\n  this._error = new Event();\n  this._isLoading = false;\n  this._loading = new Event();\n  this._clock = undefined;\n  this._documentPacket = new DocumentPacket();\n  this._version = undefined;\n  this._entityCollection = new EntityCollection(this);\n  this._entityCluster = new EntityCluster();\n  this._credit = undefined;\n  this._resourceCredits = [];\n}\n\n/**\n * Creates a Promise to a new instance loaded with the provided CZML data.\n *\n * @param {Resource|String|Object} czml A url or CZML object to be processed.\n * @param {CzmlDataSource.LoadOptions} [options] An object specifying configuration options\n *\n * @returns {Promise.<CzmlDataSource>} A promise that resolves to the new instance once the data is processed.\n */\nCzmlDataSource.load = function (czml, options) {\n  return new CzmlDataSource().load(czml, options);\n};\n\nObject.defineProperties(CzmlDataSource.prototype, {\n  /**\n   * Gets a human-readable name for this instance.\n   * @memberof CzmlDataSource.prototype\n   * @type {String}\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n  },\n  /**\n   * Gets the clock settings defined by the loaded CZML.  If no clock is explicitly\n   * defined in the CZML, the combined availability of all objects is returned.  If\n   * only static data exists, this value is undefined.\n   * @memberof CzmlDataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    get: function () {\n      return this._clock;\n    },\n  },\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof CzmlDataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: function () {\n      return this._entityCollection;\n    },\n  },\n  /**\n   * Gets a value indicating if the data source is currently loading data.\n   * @memberof CzmlDataSource.prototype\n   * @type {Boolean}\n   */\n  isLoading: {\n    get: function () {\n      return this._isLoading;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof CzmlDataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: function () {\n      return this._changed;\n    },\n  },\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof CzmlDataSource.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: function () {\n      return this._error;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the data source either starts or stops loading.\n   * @memberof CzmlDataSource.prototype\n   * @type {Event}\n   */\n  loadingEvent: {\n    get: function () {\n      return this._loading;\n    },\n  },\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof CzmlDataSource.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._entityCollection.show;\n    },\n    set: function (value) {\n      this._entityCollection.show = value;\n    },\n  },\n\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof CzmlDataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: function () {\n      return this._entityCluster;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value must be defined.\");\n      }\n      //>>includeEnd('debug');\n      this._entityCluster = value;\n    },\n  },\n  /**\n   * Gets the credit that will be displayed for the data source\n   * @memberof CzmlDataSource.prototype\n   * @type {Credit}\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n});\n\n/**\n * @callback CzmlDataSource.UpdaterFunction\n *\n * A CZML processing function that adds or updates entities in the provided\n * collection based on the provided CZML packet.\n *\n * @param {Entity} entity\n * @param {Object} packet\n * @param {EntityCollection} entityCollection\n * @param {string} sourceUri\n */\n\n/**\n * Gets the array of CZML processing functions.\n * @memberof CzmlDataSource\n * @type {Array.<CzmlDataSource.UpdaterFunction>}\n */\nCzmlDataSource.updaters = [\n  processBillboard, //\n  processBox, //\n  processCorridor, //\n  processCylinder, //\n  processEllipse, //\n  processEllipsoid, //\n  processLabel, //\n  processModel, //\n  processName, //\n  processDescription, //\n  processPath, //\n  processPoint, //\n  processPolygon, //\n  processPolyline, //\n  processPolylineVolume, //\n  processProperties, //\n  processRectangle, //\n  processPosition, //\n  processTileset, //\n  processViewFrom, //\n  processWall, //\n  processOrientation, //\n  processAvailability,\n];\n\n/**\n * Processes the provided url or CZML object without clearing any existing data.\n *\n * @param {Resource|String|Object} czml A url or CZML object to be processed.\n * @param {CzmlDataSource.LoadOptions} [options] An object specifying configuration options\n *\n * @returns {Promise.<CzmlDataSource>} A promise that resolves to this instances once the data is processed.\n */\nCzmlDataSource.prototype.process = function (czml, options) {\n  return load(this, czml, options, false);\n};\n\n/**\n * Loads the provided url or CZML object, replacing any existing data.\n *\n * @param {Resource|String|Object} czml A url or CZML object to be processed.\n * @param {CzmlDataSource.LoadOptions} [options] An object specifying configuration options\n *\n * @returns {Promise.<CzmlDataSource>} A promise that resolves to this instances once the data is processed.\n */\nCzmlDataSource.prototype.load = function (czml, options) {\n  return load(this, czml, options, true);\n};\n\n/**\n * Updates the data source to the provided time.  This function is optional and\n * is not required to be implemented.  It is provided for data sources which\n * retrieve data based on the current animation time or scene state.\n * If implemented, update will be called by {@link DataSourceDisplay} once a frame.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {Boolean} True if this data source is ready to be displayed at the provided time, false otherwise.\n */\nCzmlDataSource.prototype.update = function (time) {\n  return true;\n};\n\n/**\n * A helper function used by custom CZML updater functions\n * which creates or updates a {@link Property} from a CZML packet.\n * @function\n *\n * @param {Function} type The constructor function for the property being processed.\n * @param {Object} object The object on which the property will be added or updated.\n * @param {String} propertyName The name of the property on the object.\n * @param {Object} packetData The CZML packet being processed.\n * @param {TimeInterval} interval A constraining interval for which the data is valid.\n * @param {String} sourceUri The originating uri of the data being processed.\n * @param {EntityCollection} entityCollection The collection being processsed.\n */\nCzmlDataSource.processPacketData = processPacketData;\n\n/**\n * A helper function used by custom CZML updater functions\n * which creates or updates a {@link PositionProperty} from a CZML packet.\n * @function\n *\n * @param {Object} object The object on which the property will be added or updated.\n * @param {String} propertyName The name of the property on the object.\n * @param {Object} packetData The CZML packet being processed.\n * @param {TimeInterval} interval A constraining interval for which the data is valid.\n * @param {String} sourceUri The originating uri of the data being processed.\n * @param {EntityCollection} entityCollection The collection being processsed.\n */\nCzmlDataSource.processPositionPacketData = processPositionPacketData;\n\n/**\n * A helper function used by custom CZML updater functions\n * which creates or updates a {@link MaterialProperty} from a CZML packet.\n * @function\n *\n * @param {Object} object The object on which the property will be added or updated.\n * @param {String} propertyName The name of the property on the object.\n * @param {Object} packetData The CZML packet being processed.\n * @param {TimeInterval} interval A constraining interval for which the data is valid.\n * @param {String} sourceUri The originating uri of the data being processed.\n * @param {EntityCollection} entityCollection The collection being processsed.\n */\nCzmlDataSource.processMaterialPacketData = processMaterialPacketData;\n\nCzmlDataSource._processCzml = function (\n  czml,\n  entityCollection,\n  sourceUri,\n  updaterFunctions,\n  dataSource\n) {\n  updaterFunctions = defaultValue(updaterFunctions, CzmlDataSource.updaters);\n\n  if (Array.isArray(czml)) {\n    for (let i = 0, len = czml.length; i < len; ++i) {\n      processCzmlPacket(\n        czml[i],\n        entityCollection,\n        updaterFunctions,\n        sourceUri,\n        dataSource\n      );\n    }\n  } else {\n    processCzmlPacket(\n      czml,\n      entityCollection,\n      updaterFunctions,\n      sourceUri,\n      dataSource\n    );\n  }\n};\nexport default CzmlDataSource;\n","import DeveloperError from \"../Core/DeveloperError.js\";\n\n/**\n * Defines the interface for data sources, which turn arbitrary data into a\n * {@link EntityCollection} for generic consumption. This object is an interface\n * for documentation purposes and is not intended to be instantiated directly.\n * @alias DataSource\n * @constructor\n *\n * @see Entity\n * @see DataSourceDisplay\n */\nfunction DataSource() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(DataSource.prototype, {\n  /**\n   * Gets a human-readable name for this instance.\n   * @memberof DataSource.prototype\n   * @type {String}\n   */\n  name: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets the preferred clock settings for this data source.\n   * @memberof DataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof DataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets a value indicating if the data source is currently loading data.\n   * @memberof DataSource.prototype\n   * @type {Boolean}\n   */\n  isLoading: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof DataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof DataSource.prototype\n   * @type {Event<function(this, RequestErrorEvent)>}\n   */\n  errorEvent: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets an event that will be raised when the value of isLoading changes.\n   * @memberof DataSource.prototype\n   * @type {Event<function(this, boolean)>}\n   */\n  loadingEvent: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof DataSource.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof DataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Updates the data source to the provided time.  This function is optional and\n * is not required to be implemented.  It is provided for data sources which\n * retrieve data based on the current animation time or scene state.\n * If implemented, update will be called by {@link DataSourceDisplay} once a frame.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {Boolean} True if this data source is ready to be displayed at the provided time, false otherwise.\n */\nDataSource.prototype.update = function (time) {\n  DeveloperError.throwInstantiationError();\n};\n\n/**\n * @private\n */\nDataSource.setLoading = function (dataSource, isLoading) {\n  if (dataSource._isLoading !== isLoading) {\n    if (isLoading) {\n      dataSource._entityCollection.suspendEvents();\n    } else {\n      dataSource._entityCollection.resumeEvents();\n    }\n    dataSource._isLoading = isLoading;\n    dataSource._loading.raiseEvent(dataSource, isLoading);\n  }\n};\nexport default DataSource;\n","import Clock from \"../Core/Clock.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport createRawPropertyDescriptor from \"./createRawPropertyDescriptor.js\";\n\n/**\n * Represents desired clock settings for a particular {@link DataSource}.  These settings may be applied\n * to the {@link Clock} when the DataSource is loaded.\n *\n * @alias DataSourceClock\n * @constructor\n */\nfunction DataSourceClock() {\n  this._definitionChanged = new Event();\n  this._startTime = undefined;\n  this._stopTime = undefined;\n  this._currentTime = undefined;\n  this._clockRange = undefined;\n  this._clockStep = undefined;\n  this._multiplier = undefined;\n}\n\nObject.defineProperties(DataSourceClock.prototype, {\n  /**\n   * Gets the event that is raised whenever a new property is assigned.\n   * @memberof DataSourceClock.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the desired start time of the clock.\n   * See {@link Clock#startTime}.\n   * @memberof DataSourceClock.prototype\n   * @type {JulianDate}\n   */\n  startTime: createRawPropertyDescriptor(\"startTime\"),\n\n  /**\n   * Gets or sets the desired stop time of the clock.\n   * See {@link Clock#stopTime}.\n   * @memberof DataSourceClock.prototype\n   * @type {JulianDate}\n   */\n  stopTime: createRawPropertyDescriptor(\"stopTime\"),\n\n  /**\n   * Gets or sets the desired current time when this data source is loaded.\n   * See {@link Clock#currentTime}.\n   * @memberof DataSourceClock.prototype\n   * @type {JulianDate}\n   */\n  currentTime: createRawPropertyDescriptor(\"currentTime\"),\n\n  /**\n   * Gets or sets the desired clock range setting.\n   * See {@link Clock#clockRange}.\n   * @memberof DataSourceClock.prototype\n   * @type {ClockRange}\n   */\n  clockRange: createRawPropertyDescriptor(\"clockRange\"),\n\n  /**\n   * Gets or sets the desired clock step setting.\n   * See {@link Clock#clockStep}.\n   * @memberof DataSourceClock.prototype\n   * @type {ClockStep}\n   */\n  clockStep: createRawPropertyDescriptor(\"clockStep\"),\n\n  /**\n   * Gets or sets the desired clock multiplier.\n   * See {@link Clock#multiplier}.\n   * @memberof DataSourceClock.prototype\n   * @type {Number}\n   */\n  multiplier: createRawPropertyDescriptor(\"multiplier\"),\n});\n\n/**\n * Duplicates a DataSourceClock instance.\n *\n * @param {DataSourceClock} [result] The object onto which to store the result.\n * @returns {DataSourceClock} The modified result parameter or a new instance if one was not provided.\n */\nDataSourceClock.prototype.clone = function (result) {\n  if (!defined(result)) {\n    result = new DataSourceClock();\n  }\n  result.startTime = this.startTime;\n  result.stopTime = this.stopTime;\n  result.currentTime = this.currentTime;\n  result.clockRange = this.clockRange;\n  result.clockStep = this.clockStep;\n  result.multiplier = this.multiplier;\n  return result;\n};\n\n/**\n * Returns true if this DataSourceClock is equivalent to the other\n *\n * @param {DataSourceClock} other The other DataSourceClock to compare to.\n * @returns {Boolean} <code>true</code> if the DataSourceClocks are equal; otherwise, <code>false</code>.\n */\nDataSourceClock.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (defined(other) &&\n      JulianDate.equals(this.startTime, other.startTime) &&\n      JulianDate.equals(this.stopTime, other.stopTime) &&\n      JulianDate.equals(this.currentTime, other.currentTime) &&\n      this.clockRange === other.clockRange &&\n      this.clockStep === other.clockStep &&\n      this.multiplier === other.multiplier)\n  );\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {DataSourceClock} source The object to be merged into this object.\n */\nDataSourceClock.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.startTime = defaultValue(this.startTime, source.startTime);\n  this.stopTime = defaultValue(this.stopTime, source.stopTime);\n  this.currentTime = defaultValue(this.currentTime, source.currentTime);\n  this.clockRange = defaultValue(this.clockRange, source.clockRange);\n  this.clockStep = defaultValue(this.clockStep, source.clockStep);\n  this.multiplier = defaultValue(this.multiplier, source.multiplier);\n};\n\n/**\n * Gets the value of this clock instance as a {@link Clock} object.\n *\n * @returns {Clock} The modified result parameter or a new instance if one was not provided.\n */\nDataSourceClock.prototype.getValue = function (result) {\n  if (!defined(result)) {\n    result = new Clock();\n  }\n  result.startTime = defaultValue(this.startTime, result.startTime);\n  result.stopTime = defaultValue(this.stopTime, result.stopTime);\n  result.currentTime = defaultValue(this.currentTime, result.currentTime);\n  result.clockRange = defaultValue(this.clockRange, result.clockRange);\n  result.multiplier = defaultValue(this.multiplier, result.multiplier);\n  result.clockStep = defaultValue(this.clockStep, result.clockStep);\n  return result;\n};\nexport default DataSourceClock;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport CesiumMath from \"../Core/Math.js\";\n\n/**\n * A collection of {@link DataSource} instances.\n * @alias DataSourceCollection\n * @constructor\n */\nfunction DataSourceCollection() {\n  this._dataSources = [];\n  this._dataSourceAdded = new Event();\n  this._dataSourceRemoved = new Event();\n  this._dataSourceMoved = new Event();\n}\n\nObject.defineProperties(DataSourceCollection.prototype, {\n  /**\n   * Gets the number of data sources in this collection.\n   * @memberof DataSourceCollection.prototype\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._dataSources.length;\n    },\n  },\n\n  /**\n   * An event that is raised when a data source is added to the collection.\n   * Event handlers are passed the data source that was added.\n   * @memberof DataSourceCollection.prototype\n   * @type {Event}\n   * @readonly\n   */\n  dataSourceAdded: {\n    get: function () {\n      return this._dataSourceAdded;\n    },\n  },\n\n  /**\n   * An event that is raised when a data source is removed from the collection.\n   * Event handlers are passed the data source that was removed.\n   * @memberof DataSourceCollection.prototype\n   * @type {Event}\n   * @readonly\n   */\n  dataSourceRemoved: {\n    get: function () {\n      return this._dataSourceRemoved;\n    },\n  },\n\n  /**\n   * An event that is raised when a data source changes position in the collection.  Event handlers are passed the data source\n   * that was moved, its new index after the move, and its old index prior to the move.\n   * @memberof DataSourceCollection.prototype\n   * @type {Event}\n   * @readonly\n   */\n  dataSourceMoved: {\n    get: function () {\n      return this._dataSourceMoved;\n    },\n  },\n});\n\n/**\n * Adds a data source to the collection.\n *\n * @param {DataSource|Promise.<DataSource>} dataSource A data source or a promise to a data source to add to the collection.\n *                                        When passing a promise, the data source will not actually be added\n *                                        to the collection until the promise resolves successfully.\n * @returns {Promise.<DataSource>} A Promise that resolves once the data source has been added to the collection.\n */\nDataSourceCollection.prototype.add = function (dataSource) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(dataSource)) {\n    throw new DeveloperError(\"dataSource is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const that = this;\n  const dataSources = this._dataSources;\n  return Promise.resolve(dataSource).then(function (value) {\n    //Only add the data source if removeAll has not been called\n    //Since it was added.\n    if (dataSources === that._dataSources) {\n      that._dataSources.push(value);\n      that._dataSourceAdded.raiseEvent(that, value);\n    }\n    return value;\n  });\n};\n\n/**\n * Removes a data source from this collection, if present.\n *\n * @param {DataSource} dataSource The data source to remove.\n * @param {Boolean} [destroy=false] Whether to destroy the data source in addition to removing it.\n * @returns {Boolean} true if the data source was in the collection and was removed,\n *                    false if the data source was not in the collection.\n */\nDataSourceCollection.prototype.remove = function (dataSource, destroy) {\n  destroy = defaultValue(destroy, false);\n\n  const index = this._dataSources.indexOf(dataSource);\n  if (index !== -1) {\n    this._dataSources.splice(index, 1);\n    this._dataSourceRemoved.raiseEvent(this, dataSource);\n\n    if (destroy && typeof dataSource.destroy === \"function\") {\n      dataSource.destroy();\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Removes all data sources from this collection.\n *\n * @param {Boolean} [destroy=false] whether to destroy the data sources in addition to removing them.\n */\nDataSourceCollection.prototype.removeAll = function (destroy) {\n  destroy = defaultValue(destroy, false);\n\n  const dataSources = this._dataSources;\n  for (let i = 0, len = dataSources.length; i < len; ++i) {\n    const dataSource = dataSources[i];\n    this._dataSourceRemoved.raiseEvent(this, dataSource);\n\n    if (destroy && typeof dataSource.destroy === \"function\") {\n      dataSource.destroy();\n    }\n  }\n  this._dataSources = [];\n};\n\n/**\n * Checks to see if the collection contains a given data source.\n *\n * @param {DataSource} dataSource The data source to check for.\n * @returns {Boolean} true if the collection contains the data source, false otherwise.\n */\nDataSourceCollection.prototype.contains = function (dataSource) {\n  return this.indexOf(dataSource) !== -1;\n};\n\n/**\n * Determines the index of a given data source in the collection.\n *\n * @param {DataSource} dataSource The data source to find the index of.\n * @returns {Number} The index of the data source in the collection, or -1 if the data source does not exist in the collection.\n */\nDataSourceCollection.prototype.indexOf = function (dataSource) {\n  return this._dataSources.indexOf(dataSource);\n};\n\n/**\n * Gets a data source by index from the collection.\n *\n * @param {Number} index the index to retrieve.\n * @returns {DataSource} The data source at the specified index.\n */\nDataSourceCollection.prototype.get = function (index) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(index)) {\n    throw new DeveloperError(\"index is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return this._dataSources[index];\n};\n\n/**\n * Gets a data source by name from the collection.\n *\n * @param {String} name The name to retrieve.\n * @returns {DataSource[]} A list of all data sources matching the provided name.\n */\nDataSourceCollection.prototype.getByName = function (name) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(name)) {\n    throw new DeveloperError(\"name is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return this._dataSources.filter(function (dataSource) {\n    return dataSource.name === name;\n  });\n};\n\nfunction getIndex(dataSources, dataSource) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(dataSource)) {\n    throw new DeveloperError(\"dataSource is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const index = dataSources.indexOf(dataSource);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (index === -1) {\n    throw new DeveloperError(\"dataSource is not in this collection.\");\n  }\n  //>>includeEnd('debug');\n\n  return index;\n}\n\nfunction swapDataSources(collection, i, j) {\n  const arr = collection._dataSources;\n  const length = arr.length - 1;\n  i = CesiumMath.clamp(i, 0, length);\n  j = CesiumMath.clamp(j, 0, length);\n\n  if (i === j) {\n    return;\n  }\n\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n\n  collection.dataSourceMoved.raiseEvent(temp, j, i);\n}\n\n/**\n * Raises a data source up one position in the collection.\n *\n * @param {DataSource} dataSource The data source to move.\n *\n * @exception {DeveloperError} dataSource is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nDataSourceCollection.prototype.raise = function (dataSource) {\n  const index = getIndex(this._dataSources, dataSource);\n  swapDataSources(this, index, index + 1);\n};\n\n/**\n * Lowers a data source down one position in the collection.\n *\n * @param {DataSource} dataSource The data source to move.\n *\n * @exception {DeveloperError} dataSource is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nDataSourceCollection.prototype.lower = function (dataSource) {\n  const index = getIndex(this._dataSources, dataSource);\n  swapDataSources(this, index, index - 1);\n};\n\n/**\n * Raises a data source to the top of the collection.\n *\n * @param {DataSource} dataSource The data source to move.\n *\n * @exception {DeveloperError} dataSource is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nDataSourceCollection.prototype.raiseToTop = function (dataSource) {\n  const index = getIndex(this._dataSources, dataSource);\n  if (index === this._dataSources.length - 1) {\n    return;\n  }\n  this._dataSources.splice(index, 1);\n  this._dataSources.push(dataSource);\n\n  this.dataSourceMoved.raiseEvent(\n    dataSource,\n    this._dataSources.length - 1,\n    index\n  );\n};\n\n/**\n * Lowers a data source to the bottom of the collection.\n *\n * @param {DataSource} dataSource The data source to move.\n *\n * @exception {DeveloperError} dataSource is not in this collection.\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nDataSourceCollection.prototype.lowerToBottom = function (dataSource) {\n  const index = getIndex(this._dataSources, dataSource);\n  if (index === 0) {\n    return;\n  }\n  this._dataSources.splice(index, 1);\n  this._dataSources.splice(0, 0, dataSource);\n\n  this.dataSourceMoved.raiseEvent(dataSource, 0, index);\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} true if this object was destroyed; otherwise, false.\n *\n * @see DataSourceCollection#destroy\n */\nDataSourceCollection.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the resources held by all data sources in this collection.  Explicitly destroying this\n * object allows for deterministic release of WebGL resources, instead of relying on the garbage\n * collector. Once this object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * dataSourceCollection = dataSourceCollection && dataSourceCollection.destroy();\n *\n * @see DataSourceCollection#isDestroyed\n */\nDataSourceCollection.prototype.destroy = function () {\n  this.removeAll(true);\n  return destroyObject(this);\n};\nexport default DataSourceCollection;\n","import ApproximateTerrainHeights from \"../Core/ApproximateTerrainHeights.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport EventHelper from \"../Core/EventHelper.js\";\nimport GroundPolylinePrimitive from \"../Scene/GroundPolylinePrimitive.js\";\nimport GroundPrimitive from \"../Scene/GroundPrimitive.js\";\nimport OrderedGroundPrimitiveCollection from \"../Scene/OrderedGroundPrimitiveCollection.js\";\nimport PrimitiveCollection from \"../Scene/PrimitiveCollection.js\";\nimport BillboardVisualizer from \"./BillboardVisualizer.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport CustomDataSource from \"./CustomDataSource.js\";\nimport GeometryVisualizer from \"./GeometryVisualizer.js\";\nimport LabelVisualizer from \"./LabelVisualizer.js\";\nimport ModelVisualizer from \"./ModelVisualizer.js\";\nimport Cesium3DTilesetVisualizer from \"./Cesium3DTilesetVisualizer.js\";\nimport PathVisualizer from \"./PathVisualizer.js\";\nimport PointVisualizer from \"./PointVisualizer.js\";\nimport PolylineVisualizer from \"./PolylineVisualizer.js\";\n\n/**\n * Visualizes a collection of {@link DataSource} instances.\n * @alias DataSourceDisplay\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Scene} options.scene The scene in which to display the data.\n * @param {DataSourceCollection} options.dataSourceCollection The data sources to display.\n * @param {DataSourceDisplay.VisualizersCallback} [options.visualizersCallback=DataSourceDisplay.defaultVisualizersCallback]\n *        A function which creates an array of visualizers used for visualization.\n *        If undefined, all standard visualizers are used.\n */\nfunction DataSourceDisplay(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options\", options);\n  Check.typeOf.object(\"options.scene\", options.scene);\n  Check.typeOf.object(\n    \"options.dataSourceCollection\",\n    options.dataSourceCollection\n  );\n  //>>includeEnd('debug');\n\n  GroundPrimitive.initializeTerrainHeights();\n  GroundPolylinePrimitive.initializeTerrainHeights();\n\n  const scene = options.scene;\n  const dataSourceCollection = options.dataSourceCollection;\n\n  this._eventHelper = new EventHelper();\n  this._eventHelper.add(\n    dataSourceCollection.dataSourceAdded,\n    this._onDataSourceAdded,\n    this\n  );\n  this._eventHelper.add(\n    dataSourceCollection.dataSourceRemoved,\n    this._onDataSourceRemoved,\n    this\n  );\n  this._eventHelper.add(\n    dataSourceCollection.dataSourceMoved,\n    this._onDataSourceMoved,\n    this\n  );\n  this._eventHelper.add(scene.postRender, this._postRender, this);\n\n  this._dataSourceCollection = dataSourceCollection;\n  this._scene = scene;\n  this._visualizersCallback = defaultValue(\n    options.visualizersCallback,\n    DataSourceDisplay.defaultVisualizersCallback\n  );\n\n  let primitivesAdded = false;\n  const primitives = new PrimitiveCollection();\n  const groundPrimitives = new PrimitiveCollection();\n\n  if (dataSourceCollection.length > 0) {\n    scene.primitives.add(primitives);\n    scene.groundPrimitives.add(groundPrimitives);\n    primitivesAdded = true;\n  }\n\n  this._primitives = primitives;\n  this._groundPrimitives = groundPrimitives;\n\n  for (let i = 0, len = dataSourceCollection.length; i < len; i++) {\n    this._onDataSourceAdded(dataSourceCollection, dataSourceCollection.get(i));\n  }\n\n  const defaultDataSource = new CustomDataSource();\n  this._onDataSourceAdded(undefined, defaultDataSource);\n  this._defaultDataSource = defaultDataSource;\n\n  let removeDefaultDataSourceListener;\n  let removeDataSourceCollectionListener;\n  if (!primitivesAdded) {\n    const that = this;\n    const addPrimitives = function () {\n      scene.primitives.add(primitives);\n      scene.groundPrimitives.add(groundPrimitives);\n      removeDefaultDataSourceListener();\n      removeDataSourceCollectionListener();\n      that._removeDefaultDataSourceListener = undefined;\n      that._removeDataSourceCollectionListener = undefined;\n    };\n    removeDefaultDataSourceListener = defaultDataSource.entities.collectionChanged.addEventListener(\n      addPrimitives\n    );\n    removeDataSourceCollectionListener = dataSourceCollection.dataSourceAdded.addEventListener(\n      addPrimitives\n    );\n  }\n\n  this._removeDefaultDataSourceListener = removeDefaultDataSourceListener;\n  this._removeDataSourceCollectionListener = removeDataSourceCollectionListener;\n\n  this._ready = false;\n}\n\n/**\n * Gets or sets the default function which creates an array of visualizers used for visualization.\n * By default, this function uses all standard visualizers.\n *\n * @type {DataSourceDisplay.VisualizersCallback}\n */\nDataSourceDisplay.defaultVisualizersCallback = function (\n  scene,\n  entityCluster,\n  dataSource\n) {\n  const entities = dataSource.entities;\n  return [\n    new BillboardVisualizer(entityCluster, entities),\n    new GeometryVisualizer(\n      scene,\n      entities,\n      dataSource._primitives,\n      dataSource._groundPrimitives\n    ),\n    new LabelVisualizer(entityCluster, entities),\n    new ModelVisualizer(scene, entities),\n    new Cesium3DTilesetVisualizer(scene, entities),\n    new PointVisualizer(entityCluster, entities),\n    new PathVisualizer(scene, entities),\n    new PolylineVisualizer(\n      scene,\n      entities,\n      dataSource._primitives,\n      dataSource._groundPrimitives\n    ),\n  ];\n};\n\nObject.defineProperties(DataSourceDisplay.prototype, {\n  /**\n   * Gets the scene associated with this display.\n   * @memberof DataSourceDisplay.prototype\n   * @type {Scene}\n   */\n  scene: {\n    get: function () {\n      return this._scene;\n    },\n  },\n  /**\n   * Gets the collection of data sources to display.\n   * @memberof DataSourceDisplay.prototype\n   * @type {DataSourceCollection}\n   */\n  dataSources: {\n    get: function () {\n      return this._dataSourceCollection;\n    },\n  },\n  /**\n   * Gets the default data source instance which can be used to\n   * manually create and visualize entities not tied to\n   * a specific data source. This instance is always available\n   * and does not appear in the list dataSources collection.\n   * @memberof DataSourceDisplay.prototype\n   * @type {CustomDataSource}\n   */\n  defaultDataSource: {\n    get: function () {\n      return this._defaultDataSource;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not all entities in the data source are ready\n   * @memberof DataSourceDisplay.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n});\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see DataSourceDisplay#destroy\n */\nDataSourceDisplay.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * dataSourceDisplay = dataSourceDisplay.destroy();\n *\n * @see DataSourceDisplay#isDestroyed\n */\nDataSourceDisplay.prototype.destroy = function () {\n  this._eventHelper.removeAll();\n\n  const dataSourceCollection = this._dataSourceCollection;\n  for (let i = 0, length = dataSourceCollection.length; i < length; ++i) {\n    this._onDataSourceRemoved(\n      this._dataSourceCollection,\n      dataSourceCollection.get(i)\n    );\n  }\n  this._onDataSourceRemoved(undefined, this._defaultDataSource);\n\n  if (defined(this._removeDefaultDataSourceListener)) {\n    this._removeDefaultDataSourceListener();\n    this._removeDataSourceCollectionListener();\n  } else {\n    this._scene.primitives.remove(this._primitives);\n    this._scene.groundPrimitives.remove(this._groundPrimitives);\n  }\n\n  return destroyObject(this);\n};\n\n/**\n * Updates the display to the provided time.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {Boolean} True if all data sources are ready to be displayed, false otherwise.\n */\nDataSourceDisplay.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  //>>includeEnd('debug');\n\n  if (!ApproximateTerrainHeights.initialized) {\n    this._ready = false;\n    return false;\n  }\n\n  let result = true;\n\n  let i;\n  let x;\n  let visualizers;\n  let vLength;\n  const dataSources = this._dataSourceCollection;\n  const length = dataSources.length;\n  for (i = 0; i < length; i++) {\n    const dataSource = dataSources.get(i);\n    if (defined(dataSource.update)) {\n      result = dataSource.update(time) && result;\n    }\n\n    visualizers = dataSource._visualizers;\n    vLength = visualizers.length;\n    for (x = 0; x < vLength; x++) {\n      result = visualizers[x].update(time) && result;\n    }\n  }\n\n  visualizers = this._defaultDataSource._visualizers;\n  vLength = visualizers.length;\n  for (x = 0; x < vLength; x++) {\n    result = visualizers[x].update(time) && result;\n  }\n\n  this._ready = result;\n\n  return result;\n};\n\nDataSourceDisplay.prototype._postRender = function () {\n  // Adds credits for all datasources\n  const frameState = this._scene.frameState;\n  const dataSources = this._dataSourceCollection;\n  const length = dataSources.length;\n  for (let i = 0; i < length; i++) {\n    const dataSource = dataSources.get(i);\n\n    const credit = dataSource.credit;\n    if (defined(credit)) {\n      frameState.creditDisplay.addCredit(credit);\n    }\n\n    // Credits from the resource that the user can't remove\n    const credits = dataSource._resourceCredits;\n    if (defined(credits)) {\n      const creditCount = credits.length;\n      for (let c = 0; c < creditCount; c++) {\n        frameState.creditDisplay.addCredit(credits[c]);\n      }\n    }\n  }\n};\n\nconst getBoundingSphereArrayScratch = [];\nconst getBoundingSphereBoundingSphereScratch = new BoundingSphere();\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {Boolean} allowPartial If true, pending bounding spheres are ignored and an answer will be returned from the currently available data.\n *                               If false, the the function will halt and return pending if any of the bounding spheres are pending.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nDataSourceDisplay.prototype.getBoundingSphere = function (\n  entity,\n  allowPartial,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"entity\", entity);\n  Check.typeOf.bool(\"allowPartial\", allowPartial);\n  Check.defined(\"result\", result);\n  //>>includeEnd('debug');\n\n  if (!this._ready) {\n    return BoundingSphereState.PENDING;\n  }\n\n  let i;\n  let length;\n  let dataSource = this._defaultDataSource;\n  if (!dataSource.entities.contains(entity)) {\n    dataSource = undefined;\n\n    const dataSources = this._dataSourceCollection;\n    length = dataSources.length;\n    for (i = 0; i < length; i++) {\n      const d = dataSources.get(i);\n      if (d.entities.contains(entity)) {\n        dataSource = d;\n        break;\n      }\n    }\n  }\n\n  if (!defined(dataSource)) {\n    return BoundingSphereState.FAILED;\n  }\n\n  const boundingSpheres = getBoundingSphereArrayScratch;\n  const tmp = getBoundingSphereBoundingSphereScratch;\n\n  let count = 0;\n  let state = BoundingSphereState.DONE;\n  const visualizers = dataSource._visualizers;\n  const visualizersLength = visualizers.length;\n\n  for (i = 0; i < visualizersLength; i++) {\n    const visualizer = visualizers[i];\n    if (defined(visualizer.getBoundingSphere)) {\n      state = visualizers[i].getBoundingSphere(entity, tmp);\n      if (!allowPartial && state === BoundingSphereState.PENDING) {\n        return BoundingSphereState.PENDING;\n      } else if (state === BoundingSphereState.DONE) {\n        boundingSpheres[count] = BoundingSphere.clone(\n          tmp,\n          boundingSpheres[count]\n        );\n        count++;\n      }\n    }\n  }\n\n  if (count === 0) {\n    return BoundingSphereState.FAILED;\n  }\n\n  boundingSpheres.length = count;\n  BoundingSphere.fromBoundingSpheres(boundingSpheres, result);\n  return BoundingSphereState.DONE;\n};\n\nDataSourceDisplay.prototype._onDataSourceAdded = function (\n  dataSourceCollection,\n  dataSource\n) {\n  const scene = this._scene;\n\n  const displayPrimitives = this._primitives;\n  const displayGroundPrimitives = this._groundPrimitives;\n\n  const primitives = displayPrimitives.add(new PrimitiveCollection());\n  const groundPrimitives = displayGroundPrimitives.add(\n    new OrderedGroundPrimitiveCollection()\n  );\n\n  dataSource._primitives = primitives;\n  dataSource._groundPrimitives = groundPrimitives;\n\n  const entityCluster = dataSource.clustering;\n  entityCluster._initialize(scene);\n\n  primitives.add(entityCluster);\n\n  dataSource._visualizers = this._visualizersCallback(\n    scene,\n    entityCluster,\n    dataSource\n  );\n};\n\nDataSourceDisplay.prototype._onDataSourceRemoved = function (\n  dataSourceCollection,\n  dataSource\n) {\n  const displayPrimitives = this._primitives;\n  const displayGroundPrimitives = this._groundPrimitives;\n\n  const primitives = dataSource._primitives;\n  const groundPrimitives = dataSource._groundPrimitives;\n\n  const entityCluster = dataSource.clustering;\n  primitives.remove(entityCluster);\n\n  const visualizers = dataSource._visualizers;\n  const length = visualizers.length;\n  for (let i = 0; i < length; i++) {\n    visualizers[i].destroy();\n  }\n\n  displayPrimitives.remove(primitives);\n  displayGroundPrimitives.remove(groundPrimitives);\n\n  dataSource._visualizers = undefined;\n};\n\nDataSourceDisplay.prototype._onDataSourceMoved = function (\n  dataSource,\n  newIndex,\n  oldIndex\n) {\n  const displayPrimitives = this._primitives;\n  const displayGroundPrimitives = this._groundPrimitives;\n\n  const primitives = dataSource._primitives;\n  const groundPrimitives = dataSource._groundPrimitives;\n\n  if (newIndex === oldIndex + 1) {\n    displayPrimitives.raise(primitives);\n    displayGroundPrimitives.raise(groundPrimitives);\n  } else if (newIndex === oldIndex - 1) {\n    displayPrimitives.lower(primitives);\n    displayGroundPrimitives.lower(groundPrimitives);\n  } else if (newIndex === 0) {\n    displayPrimitives.lowerToBottom(primitives);\n    displayGroundPrimitives.lowerToBottom(groundPrimitives);\n    displayPrimitives.raise(primitives); // keep defaultDataSource primitives at index 0 since it's not in the collection\n    displayGroundPrimitives.raise(groundPrimitives);\n  } else {\n    displayPrimitives.raiseToTop(primitives);\n    displayGroundPrimitives.raiseToTop(groundPrimitives);\n  }\n};\n\n/**\n * A function which creates an array of visualizers used for visualization.\n * @callback DataSourceDisplay.VisualizersCallback\n *\n * @param {Scene} scene The scene to create visualizers for.\n * @param {DataSource} dataSource The data source to create visualizers for.\n * @returns {Visualizer[]} An array of visualizers used for visualization.\n *\n * @example\n * function createVisualizers(scene, dataSource) {\n *     return [new Cesium.BillboardVisualizer(scene, dataSource.entities)];\n * }\n */\nexport default DataSourceDisplay;\n","import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport defined from \"../Core/defined.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\n\n/**\n * @private\n */\nfunction DynamicGeometryBatch(primitives, orderedGroundPrimitives) {\n  this._primitives = primitives;\n  this._orderedGroundPrimitives = orderedGroundPrimitives;\n  this._dynamicUpdaters = new AssociativeArray();\n}\n\nDynamicGeometryBatch.prototype.add = function (time, updater) {\n  this._dynamicUpdaters.set(\n    updater.id,\n    updater.createDynamicUpdater(\n      this._primitives,\n      this._orderedGroundPrimitives\n    )\n  );\n};\n\nDynamicGeometryBatch.prototype.remove = function (updater) {\n  const id = updater.id;\n  const dynamicUpdater = this._dynamicUpdaters.get(id);\n  if (defined(dynamicUpdater)) {\n    this._dynamicUpdaters.remove(id);\n    dynamicUpdater.destroy();\n  }\n};\n\nDynamicGeometryBatch.prototype.update = function (time) {\n  const geometries = this._dynamicUpdaters.values;\n  for (let i = 0, len = geometries.length; i < len; i++) {\n    geometries[i].update(time);\n  }\n  return true;\n};\n\nDynamicGeometryBatch.prototype.removeAllPrimitives = function () {\n  const geometries = this._dynamicUpdaters.values;\n  for (let i = 0, len = geometries.length; i < len; i++) {\n    geometries[i].destroy();\n  }\n  this._dynamicUpdaters.removeAll();\n};\n\nDynamicGeometryBatch.prototype.getBoundingSphere = function (updater, result) {\n  updater = this._dynamicUpdaters.get(updater.id);\n  if (defined(updater) && defined(updater.getBoundingSphere)) {\n    return updater.getBoundingSphere(result);\n  }\n  return BoundingSphereState.FAILED;\n};\nexport default DynamicGeometryBatch;\n","import BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport GroundPrimitive from \"../Scene/GroundPrimitive.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport Primitive from \"../Scene/Primitive.js\";\nimport BoundingSphereState from \"./BoundingSphereState.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport MaterialProperty from \"./MaterialProperty.js\";\nimport Property from \"./Property.js\";\n\n/**\n * Defines the interface for a dynamic geometry updater.  A DynamicGeometryUpdater\n * is responsible for handling visualization of a specific type of geometry\n * that needs to be recomputed based on simulation time.\n * This object is never used directly by client code, but is instead created by\n * {@link GeometryUpdater} implementations which contain dynamic geometry.\n *\n * This type defines an interface and cannot be instantiated directly.\n *\n * @alias DynamicGeometryUpdater\n * @constructor\n * @private\n * @abstract\n */\nfunction DynamicGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  orderedGroundPrimitives\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"geometryUpdater\", geometryUpdater);\n  Check.defined(\"primitives\", primitives);\n  Check.defined(\"orderedGroundPrimitives\", orderedGroundPrimitives);\n  //>>includeEnd('debug');\n\n  this._primitives = primitives;\n  this._orderedGroundPrimitives = orderedGroundPrimitives;\n  this._primitive = undefined;\n  this._outlinePrimitive = undefined;\n  this._geometryUpdater = geometryUpdater;\n  this._options = geometryUpdater._options;\n  this._entity = geometryUpdater._entity;\n  this._material = undefined;\n}\n\nDynamicGeometryUpdater.prototype._isHidden = function (entity, geometry, time) {\n  return (\n    !entity.isShowing ||\n    !entity.isAvailable(time) ||\n    !Property.getValueOrDefault(geometry.show, time, true)\n  );\n};\n\nDynamicGeometryUpdater.prototype._setOptions =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Updates the geometry to the specified time.\n * @memberof DynamicGeometryUpdater\n * @function\n *\n * @param {JulianDate} time The current time.\n */\nDynamicGeometryUpdater.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  //>>includeEnd('debug');\n\n  const geometryUpdater = this._geometryUpdater;\n  const onTerrain = geometryUpdater._onTerrain;\n\n  const primitives = this._primitives;\n  const orderedGroundPrimitives = this._orderedGroundPrimitives;\n  if (onTerrain) {\n    orderedGroundPrimitives.remove(this._primitive);\n  } else {\n    primitives.removeAndDestroy(this._primitive);\n    primitives.removeAndDestroy(this._outlinePrimitive);\n    this._outlinePrimitive = undefined;\n  }\n  this._primitive = undefined;\n\n  const entity = this._entity;\n  const geometry = entity[this._geometryUpdater._geometryPropertyName];\n  this._setOptions(entity, geometry, time);\n  if (this._isHidden(entity, geometry, time)) {\n    return;\n  }\n\n  const shadows = this._geometryUpdater.shadowsProperty.getValue(time);\n  const options = this._options;\n  if (!defined(geometry.fill) || geometry.fill.getValue(time)) {\n    const fillMaterialProperty = geometryUpdater.fillMaterialProperty;\n    const isColorAppearance =\n      fillMaterialProperty instanceof ColorMaterialProperty;\n    let appearance;\n    const closed = geometryUpdater._getIsClosed(options);\n    if (isColorAppearance) {\n      appearance = new PerInstanceColorAppearance({\n        closed: closed,\n        flat:\n          onTerrain && !geometryUpdater._supportsMaterialsforEntitiesOnTerrain,\n      });\n    } else {\n      const material = MaterialProperty.getValue(\n        time,\n        fillMaterialProperty,\n        this._material\n      );\n      this._material = material;\n      appearance = new MaterialAppearance({\n        material: material,\n        translucent: material.isTranslucent(),\n        closed: closed,\n      });\n    }\n\n    if (onTerrain) {\n      options.vertexFormat = PerInstanceColorAppearance.VERTEX_FORMAT;\n      this._primitive = orderedGroundPrimitives.add(\n        new GroundPrimitive({\n          geometryInstances: this._geometryUpdater.createFillGeometryInstance(\n            time\n          ),\n          appearance: appearance,\n          asynchronous: false,\n          shadows: shadows,\n          classificationType: this._geometryUpdater.classificationTypeProperty.getValue(\n            time\n          ),\n        }),\n        Property.getValueOrUndefined(this._geometryUpdater.zIndex, time)\n      );\n    } else {\n      options.vertexFormat = appearance.vertexFormat;\n\n      const fillInstance = this._geometryUpdater.createFillGeometryInstance(\n        time\n      );\n\n      if (isColorAppearance) {\n        appearance.translucent = fillInstance.attributes.color.value[3] !== 255;\n      }\n\n      this._primitive = primitives.add(\n        new Primitive({\n          geometryInstances: fillInstance,\n          appearance: appearance,\n          asynchronous: false,\n          shadows: shadows,\n        })\n      );\n    }\n  }\n\n  if (\n    !onTerrain &&\n    defined(geometry.outline) &&\n    geometry.outline.getValue(time)\n  ) {\n    const outlineInstance = this._geometryUpdater.createOutlineGeometryInstance(\n      time\n    );\n    const outlineWidth = Property.getValueOrDefault(\n      geometry.outlineWidth,\n      time,\n      1.0\n    );\n\n    this._outlinePrimitive = primitives.add(\n      new Primitive({\n        geometryInstances: outlineInstance,\n        appearance: new PerInstanceColorAppearance({\n          flat: true,\n          translucent: outlineInstance.attributes.color.value[3] !== 255,\n          renderState: {\n            lineWidth: geometryUpdater._scene.clampLineWidth(outlineWidth),\n          },\n        }),\n        asynchronous: false,\n        shadows: shadows,\n      })\n    );\n  }\n};\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n * @function\n *\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nDynamicGeometryUpdater.prototype.getBoundingSphere = function (result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(result)) {\n    throw new DeveloperError(\"result is required.\");\n  }\n  //>>includeEnd('debug');\n  const entity = this._entity;\n  const primitive = this._primitive;\n  const outlinePrimitive = this._outlinePrimitive;\n\n  let attributes;\n\n  //Outline and Fill geometries have the same bounding sphere, so just use whichever one is defined and ready\n  if (defined(primitive) && primitive.show && primitive.ready) {\n    attributes = primitive.getGeometryInstanceAttributes(entity);\n    if (defined(attributes) && defined(attributes.boundingSphere)) {\n      BoundingSphere.clone(attributes.boundingSphere, result);\n      return BoundingSphereState.DONE;\n    }\n  }\n\n  if (\n    defined(outlinePrimitive) &&\n    outlinePrimitive.show &&\n    outlinePrimitive.ready\n  ) {\n    attributes = outlinePrimitive.getGeometryInstanceAttributes(entity);\n    if (defined(attributes) && defined(attributes.boundingSphere)) {\n      BoundingSphere.clone(attributes.boundingSphere, result);\n      return BoundingSphereState.DONE;\n    }\n  }\n\n  if (\n    (defined(primitive) && !primitive.ready) ||\n    (defined(outlinePrimitive) && !outlinePrimitive.ready)\n  ) {\n    return BoundingSphereState.PENDING;\n  }\n\n  return BoundingSphereState.FAILED;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * @memberof DynamicGeometryUpdater\n * @function\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nDynamicGeometryUpdater.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n * @memberof DynamicGeometryUpdater\n * @function\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nDynamicGeometryUpdater.prototype.destroy = function () {\n  const primitives = this._primitives;\n  const orderedGroundPrimitives = this._orderedGroundPrimitives;\n  if (this._geometryUpdater._onTerrain) {\n    orderedGroundPrimitives.remove(this._primitive);\n  } else {\n    primitives.removeAndDestroy(this._primitive);\n  }\n  primitives.removeAndDestroy(this._outlinePrimitive);\n  destroyObject(this);\n};\nexport default DynamicGeometryUpdater;\n","import ApproximateTerrainHeights from \"../Core/ApproximateTerrainHeights.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport EllipseGeometry from \"../Core/EllipseGeometry.js\";\nimport EllipseOutlineGeometry from \"../Core/EllipseOutlineGeometry.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport GroundGeometryUpdater from \"./GroundGeometryUpdater.js\";\nimport Property from \"./Property.js\";\n\nconst scratchColor = new Color();\nconst defaultOffset = Cartesian3.ZERO;\nconst offsetScratch = new Cartesian3();\nconst scratchRectangle = new Rectangle();\n\nfunction EllipseGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.center = undefined;\n  this.semiMajorAxis = undefined;\n  this.semiMinorAxis = undefined;\n  this.rotation = undefined;\n  this.height = undefined;\n  this.extrudedHeight = undefined;\n  this.granularity = undefined;\n  this.stRotation = undefined;\n  this.numberOfVerticalLines = undefined;\n  this.offsetAttribute = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for ellipses.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias EllipseGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction EllipseGeometryUpdater(entity, scene) {\n  GroundGeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new EllipseGeometryOptions(entity),\n    geometryPropertyName: \"ellipse\",\n    observedPropertyNames: [\"availability\", \"position\", \"ellipse\"],\n  });\n\n  this._onEntityPropertyChanged(entity, \"ellipse\", entity.ellipse, undefined);\n}\n\nif (defined(Object.create)) {\n  EllipseGeometryUpdater.prototype = Object.create(\n    GroundGeometryUpdater.prototype\n  );\n  EllipseGeometryUpdater.prototype.constructor = EllipseGeometryUpdater;\n}\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nEllipseGeometryUpdater.prototype.createFillGeometryInstance = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._fillEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent a filled geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._fillProperty.getValue(time)\n    ),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n      this._distanceDisplayConditionProperty.getValue(time)\n    ),\n    offset: undefined,\n    color: undefined,\n  };\n\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    let currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n  }\n\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new EllipseGeometry(this._options),\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nEllipseGeometryUpdater.prototype.createOutlineGeometryInstance = function (\n  time\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n\n  if (!this._outlineEnabled) {\n    throw new DeveloperError(\n      \"This instance does not represent an outlined geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n  const outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor\n  );\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._showOutlineProperty.getValue(time)\n    ),\n    color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n      distanceDisplayCondition\n    ),\n    offset: undefined,\n  };\n\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new EllipseOutlineGeometry(this._options),\n    attributes: attributes,\n  });\n};\n\nEllipseGeometryUpdater.prototype._computeCenter = function (time, result) {\n  return Property.getValueOrUndefined(this._entity.position, time, result);\n};\n\nEllipseGeometryUpdater.prototype._isHidden = function (entity, ellipse) {\n  const position = entity.position;\n\n  return (\n    !defined(position) ||\n    !defined(ellipse.semiMajorAxis) ||\n    !defined(ellipse.semiMinorAxis) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, ellipse)\n  );\n};\n\nEllipseGeometryUpdater.prototype._isDynamic = function (entity, ellipse) {\n  return (\n    !entity.position.isConstant || //\n    !ellipse.semiMajorAxis.isConstant || //\n    !ellipse.semiMinorAxis.isConstant || //\n    !Property.isConstant(ellipse.rotation) || //\n    !Property.isConstant(ellipse.height) || //\n    !Property.isConstant(ellipse.extrudedHeight) || //\n    !Property.isConstant(ellipse.granularity) || //\n    !Property.isConstant(ellipse.stRotation) || //\n    !Property.isConstant(ellipse.outlineWidth) || //\n    !Property.isConstant(ellipse.numberOfVerticalLines) || //\n    !Property.isConstant(ellipse.zIndex) || //\n    (this._onTerrain &&\n      !Property.isConstant(this._materialProperty) &&\n      !(this._materialProperty instanceof ColorMaterialProperty))\n  );\n};\n\nEllipseGeometryUpdater.prototype._setStaticOptions = function (\n  entity,\n  ellipse\n) {\n  let heightValue = Property.getValueOrUndefined(\n    ellipse.height,\n    Iso8601.MINIMUM_VALUE\n  );\n  const heightReferenceValue = Property.getValueOrDefault(\n    ellipse.heightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE\n  );\n  let extrudedHeightValue = Property.getValueOrUndefined(\n    ellipse.extrudedHeight,\n    Iso8601.MINIMUM_VALUE\n  );\n  const extrudedHeightReferenceValue = Property.getValueOrDefault(\n    ellipse.extrudedHeightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE\n  );\n  if (defined(extrudedHeightValue) && !defined(heightValue)) {\n    heightValue = 0;\n  }\n\n  const options = this._options;\n  options.vertexFormat =\n    this._materialProperty instanceof ColorMaterialProperty\n      ? PerInstanceColorAppearance.VERTEX_FORMAT\n      : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.center = entity.position.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.center\n  );\n  options.semiMajorAxis = ellipse.semiMajorAxis.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.semiMajorAxis\n  );\n  options.semiMinorAxis = ellipse.semiMinorAxis.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.semiMinorAxis\n  );\n  options.rotation = Property.getValueOrUndefined(\n    ellipse.rotation,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.granularity = Property.getValueOrUndefined(\n    ellipse.granularity,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.stRotation = Property.getValueOrUndefined(\n    ellipse.stRotation,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.numberOfVerticalLines = Property.getValueOrUndefined(\n    ellipse.numberOfVerticalLines,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(\n    heightValue,\n    heightReferenceValue,\n    extrudedHeightValue,\n    extrudedHeightReferenceValue\n  );\n  options.height = GroundGeometryUpdater.getGeometryHeight(\n    heightValue,\n    heightReferenceValue\n  );\n\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(\n    extrudedHeightValue,\n    extrudedHeightReferenceValue\n  );\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(\n      EllipseGeometry.computeRectangle(options, scratchRectangle)\n    ).minimumTerrainHeight;\n  }\n\n  options.extrudedHeight = extrudedHeightValue;\n};\n\nEllipseGeometryUpdater.DynamicGeometryUpdater = DynamicEllipseGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicEllipseGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives\n  );\n}\n\nif (defined(Object.create)) {\n  DynamicEllipseGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype\n  );\n  DynamicEllipseGeometryUpdater.prototype.constructor = DynamicEllipseGeometryUpdater;\n}\n\nDynamicEllipseGeometryUpdater.prototype._isHidden = function (\n  entity,\n  ellipse,\n  time\n) {\n  const options = this._options;\n  return (\n    !defined(options.center) ||\n    !defined(options.semiMajorAxis) ||\n    !defined(options.semiMinorAxis) ||\n    DynamicGeometryUpdater.prototype._isHidden.call(this, entity, ellipse, time)\n  );\n};\n\nDynamicEllipseGeometryUpdater.prototype._setOptions = function (\n  entity,\n  ellipse,\n  time\n) {\n  const options = this._options;\n  let heightValue = Property.getValueOrUndefined(ellipse.height, time);\n  const heightReferenceValue = Property.getValueOrDefault(\n    ellipse.heightReference,\n    time,\n    HeightReference.NONE\n  );\n  let extrudedHeightValue = Property.getValueOrUndefined(\n    ellipse.extrudedHeight,\n    time\n  );\n  const extrudedHeightReferenceValue = Property.getValueOrDefault(\n    ellipse.extrudedHeightReference,\n    time,\n    HeightReference.NONE\n  );\n  if (defined(extrudedHeightValue) && !defined(heightValue)) {\n    heightValue = 0;\n  }\n\n  options.center = Property.getValueOrUndefined(\n    entity.position,\n    time,\n    options.center\n  );\n  options.semiMajorAxis = Property.getValueOrUndefined(\n    ellipse.semiMajorAxis,\n    time\n  );\n  options.semiMinorAxis = Property.getValueOrUndefined(\n    ellipse.semiMinorAxis,\n    time\n  );\n  options.rotation = Property.getValueOrUndefined(ellipse.rotation, time);\n  options.granularity = Property.getValueOrUndefined(ellipse.granularity, time);\n  options.stRotation = Property.getValueOrUndefined(ellipse.stRotation, time);\n  options.numberOfVerticalLines = Property.getValueOrUndefined(\n    ellipse.numberOfVerticalLines,\n    time\n  );\n  options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(\n    heightValue,\n    heightReferenceValue,\n    extrudedHeightValue,\n    extrudedHeightReferenceValue\n  );\n  options.height = GroundGeometryUpdater.getGeometryHeight(\n    heightValue,\n    heightReferenceValue\n  );\n\n  extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(\n    extrudedHeightValue,\n    extrudedHeightReferenceValue\n  );\n  if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n    extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(\n      EllipseGeometry.computeRectangle(options, scratchRectangle)\n    ).minimumTerrainHeight;\n  }\n\n  options.extrudedHeight = extrudedHeightValue;\n};\nexport default EllipseGeometryUpdater;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {Object} EllipseGraphics.ConstructorOptions\n *\n * Initialization options for the EllipseGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the ellipse.\n * @property {Property | number} [semiMajorAxis] The numeric Property specifying the semi-major axis.\n * @property {Property | number} [semiMinorAxis] The numeric Property specifying the semi-minor axis.\n * @property {Property | number} [height=0] A numeric Property specifying the altitude of the ellipse relative to the ellipsoid surface.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height is relative to.\n * @property {Property | number} [extrudedHeight] A numeric Property specifying the altitude of the ellipse's extruded face relative to the ellipsoid surface.\n * @property {Property | HeightReference} [extrudedHeightReference=HeightReference.NONE] A Property specifying what the extrudedHeight is relative to.\n * @property {Property | number} [rotation=0.0] A numeric property specifying the rotation of the ellipse counter-clockwise from north.\n * @property {Property | number} [stRotation=0.0] A numeric property specifying the rotation of the ellipse texture counter-clockwise from north.\n * @property {Property | number} [granularity=Cesium.Math.RADIANS_PER_DEGREE] A numeric Property specifying the angular distance between points on the ellipse.\n * @property {Property | boolean} [fill=true] A boolean Property specifying whether the ellipse is filled with the provided material.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to fill the ellipse.\n * @property {Property | boolean} [outline=false] A boolean Property specifying whether the ellipse is outlined.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @property {Property | number} [numberOfVerticalLines=16] A numeric Property specifying the number of vertical lines to draw along the perimeter for the outline.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the ellipse casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this ellipse will be displayed.\n * @property {Property | ClassificationType} [classificationType=ClassificationType.BOTH] An enum Property specifying whether this ellipse will classify terrain, 3D Tiles, or both when on the ground.\n * @property {ConstantProperty | number} [zIndex=0] A property specifying the zIndex of the Ellipse.  Used for ordering ground geometry.  Only has an effect if the ellipse is constant and neither height or exturdedHeight are specified.\n */\n\n/**\n * Describes an ellipse defined by a center point and semi-major and semi-minor axes.\n * The ellipse conforms to the curvature of the globe and can be placed on the surface or\n * at altitude and can optionally be extruded into a volume.\n * The center point is determined by the containing {@link Entity}.\n *\n * @alias EllipseGraphics\n * @constructor\n *\n * @param {EllipseGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Circles and Ellipses.html|Cesium Sandcastle Circles and Ellipses Demo}\n */\nfunction EllipseGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._semiMajorAxis = undefined;\n  this._semiMajorAxisSubscription = undefined;\n  this._semiMinorAxis = undefined;\n  this._semiMinorAxisSubscription = undefined;\n  this._height = undefined;\n  this._heightSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._extrudedHeight = undefined;\n  this._extrudedHeightSubscription = undefined;\n  this._extrudedHeightReference = undefined;\n  this._extrudedHeightReferenceSubscription = undefined;\n  this._rotation = undefined;\n  this._rotationSubscription = undefined;\n  this._stRotation = undefined;\n  this._stRotationSubscription = undefined;\n  this._granularity = undefined;\n  this._granularitySubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._numberOfVerticalLines = undefined;\n  this._numberOfVerticalLinesSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n  this._classificationType = undefined;\n  this._classificationTypeSubscription = undefined;\n  this._zIndex = undefined;\n  this._zIndexSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(EllipseGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof EllipseGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the ellipse.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the semi-major axis.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   */\n  semiMajorAxis: createPropertyDescriptor(\"semiMajorAxis\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the semi-minor axis.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   */\n  semiMinorAxis: createPropertyDescriptor(\"semiMinorAxis\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the ellipse.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  height: createPropertyDescriptor(\"height\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the altitude of the ellipse extrusion.\n   * Setting this property creates volume starting at height and ending at this altitude.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   */\n  extrudedHeight: createPropertyDescriptor(\"extrudedHeight\"),\n\n  /**\n   * Gets or sets the Property specifying the extruded {@link HeightReference}.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  extrudedHeightReference: createPropertyDescriptor(\"extrudedHeightReference\"),\n\n  /**\n   * Gets or sets the numeric property specifying the rotation of the ellipse counter-clockwise from north.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0\n   */\n  rotation: createPropertyDescriptor(\"rotation\"),\n\n  /**\n   * Gets or sets the numeric property specifying the rotation of the ellipse texture counter-clockwise from north.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0\n   */\n  stRotation: createPropertyDescriptor(\"stRotation\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the angular distance between points on the ellipse.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   * @default {CesiumMath.RADIANS_PER_DEGREE}\n   */\n  granularity: createPropertyDescriptor(\"granularity\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the ellipse is filled with the provided material.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the ellipse.\n   * @memberof EllipseGraphics.prototype\n   * @type {MaterialProperty|undefined}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the ellipse is outlined.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * <p>\n   * Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}.\n   * </p>\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the number of vertical lines to draw along the perimeter for the outline.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   * @default 16\n   */\n  numberOfVerticalLines: createPropertyDescriptor(\"numberOfVerticalLines\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the ellipse\n   * casts or receives shadows from light sources.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this ellipse will be displayed.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying whether this ellipse will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof EllipseGraphics.prototype\n   * @type {Property|undefined}\n   * @default ClassificationType.BOTH\n   */\n  classificationType: createPropertyDescriptor(\"classificationType\"),\n\n  /**\n   * Gets or sets the zIndex Property specifying the ellipse ordering.  Only has an effect if the ellipse is constant and neither height or extrudedHeight are specified\n   * @memberof EllipseGraphics.prototype\n   * @type {ConstantProperty|undefined}\n   * @default 0\n   */\n  zIndex: createPropertyDescriptor(\"zIndex\"),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {EllipseGraphics} [result] The object onto which to store the result.\n * @returns {EllipseGraphics} The modified result parameter or a new instance if one was not provided.\n */\nEllipseGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new EllipseGraphics(this);\n  }\n  result.show = this.show;\n  result.semiMajorAxis = this.semiMajorAxis;\n  result.semiMinorAxis = this.semiMinorAxis;\n  result.height = this.height;\n  result.heightReference = this.heightReference;\n  result.extrudedHeight = this.extrudedHeight;\n  result.extrudedHeightReference = this.extrudedHeightReference;\n  result.rotation = this.rotation;\n  result.stRotation = this.stRotation;\n  result.granularity = this.granularity;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.numberOfVerticalLines = this.numberOfVerticalLines;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  result.classificationType = this.classificationType;\n  result.zIndex = this.zIndex;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {EllipseGraphics} source The object to be merged into this object.\n */\nEllipseGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.semiMajorAxis = defaultValue(this.semiMajorAxis, source.semiMajorAxis);\n  this.semiMinorAxis = defaultValue(this.semiMinorAxis, source.semiMinorAxis);\n  this.height = defaultValue(this.height, source.height);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference\n  );\n  this.extrudedHeight = defaultValue(\n    this.extrudedHeight,\n    source.extrudedHeight\n  );\n  this.extrudedHeightReference = defaultValue(\n    this.extrudedHeightReference,\n    source.extrudedHeightReference\n  );\n  this.rotation = defaultValue(this.rotation, source.rotation);\n  this.stRotation = defaultValue(this.stRotation, source.stRotation);\n  this.granularity = defaultValue(this.granularity, source.granularity);\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.numberOfVerticalLines = defaultValue(\n    this.numberOfVerticalLines,\n    source.numberOfVerticalLines\n  );\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n  this.classificationType = defaultValue(\n    this.classificationType,\n    source.classificationType\n  );\n  this.zIndex = defaultValue(this.zIndex, source.zIndex);\n};\nexport default EllipseGraphics;\n","import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport DistanceDisplayConditionGeometryInstanceAttribute from \"../Core/DistanceDisplayConditionGeometryInstanceAttribute.js\";\nimport EllipsoidGeometry from \"../Core/EllipsoidGeometry.js\";\nimport EllipsoidOutlineGeometry from \"../Core/EllipsoidOutlineGeometry.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport GeometryOffsetAttribute from \"../Core/GeometryOffsetAttribute.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport OffsetGeometryInstanceAttribute from \"../Core/OffsetGeometryInstanceAttribute.js\";\nimport ShowGeometryInstanceAttribute from \"../Core/ShowGeometryInstanceAttribute.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport MaterialAppearance from \"../Scene/MaterialAppearance.js\";\nimport PerInstanceColorAppearance from \"../Scene/PerInstanceColorAppearance.js\";\nimport Primitive from \"../Scene/Primitive.js\";\nimport SceneMode from \"../Scene/SceneMode.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport DynamicGeometryUpdater from \"./DynamicGeometryUpdater.js\";\nimport GeometryUpdater from \"./GeometryUpdater.js\";\nimport heightReferenceOnEntityPropertyChanged from \"./heightReferenceOnEntityPropertyChanged.js\";\nimport MaterialProperty from \"./MaterialProperty.js\";\nimport Property from \"./Property.js\";\n\nconst defaultMaterial = new ColorMaterialProperty(Color.WHITE);\nconst defaultOffset = Cartesian3.ZERO;\n\nconst offsetScratch = new Cartesian3();\nconst radiiScratch = new Cartesian3();\nconst innerRadiiScratch = new Cartesian3();\nconst scratchColor = new Color();\nconst unitSphere = new Cartesian3(1, 1, 1);\n\nfunction EllipsoidGeometryOptions(entity) {\n  this.id = entity;\n  this.vertexFormat = undefined;\n  this.radii = undefined;\n  this.innerRadii = undefined;\n  this.minimumClock = undefined;\n  this.maximumClock = undefined;\n  this.minimumCone = undefined;\n  this.maximumCone = undefined;\n  this.stackPartitions = undefined;\n  this.slicePartitions = undefined;\n  this.subdivisions = undefined;\n  this.offsetAttribute = undefined;\n}\n\n/**\n * A {@link GeometryUpdater} for ellipsoids.\n * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n * @alias EllipsoidGeometryUpdater\n * @constructor\n *\n * @param {Entity} entity The entity containing the geometry to be visualized.\n * @param {Scene} scene The scene where visualization is taking place.\n */\nfunction EllipsoidGeometryUpdater(entity, scene) {\n  GeometryUpdater.call(this, {\n    entity: entity,\n    scene: scene,\n    geometryOptions: new EllipsoidGeometryOptions(entity),\n    geometryPropertyName: \"ellipsoid\",\n    observedPropertyNames: [\n      \"availability\",\n      \"position\",\n      \"orientation\",\n      \"ellipsoid\",\n    ],\n  });\n\n  this._onEntityPropertyChanged(\n    entity,\n    \"ellipsoid\",\n    entity.ellipsoid,\n    undefined\n  );\n}\n\nif (defined(Object.create)) {\n  EllipsoidGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n  EllipsoidGeometryUpdater.prototype.constructor = EllipsoidGeometryUpdater;\n}\n\nObject.defineProperties(EllipsoidGeometryUpdater.prototype, {\n  /**\n   * Gets the terrain offset property\n   * @type {TerrainOffsetProperty}\n   * @memberof EllipsoidGeometryUpdater.prototype\n   * @readonly\n   * @private\n   */\n  terrainOffsetProperty: {\n    get: function () {\n      return this._terrainOffsetProperty;\n    },\n  },\n});\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @param {Boolean} [skipModelMatrix=false] Whether to compute a model matrix for the geometry instance\n * @param {Matrix4} [modelMatrixResult] Used to store the result of the model matrix calculation\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nEllipsoidGeometryUpdater.prototype.createFillGeometryInstance = function (\n  time,\n  skipModelMatrix,\n  modelMatrixResult\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n\n  let color;\n  const show = new ShowGeometryInstanceAttribute(\n    isAvailable &&\n      entity.isShowing &&\n      this._showProperty.getValue(time) &&\n      this._fillProperty.getValue(time)\n  );\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n  const distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n    distanceDisplayCondition\n  );\n\n  const attributes = {\n    show: show,\n    distanceDisplayCondition: distanceDisplayConditionAttribute,\n    color: undefined,\n    offset: undefined,\n  };\n\n  if (this._materialProperty instanceof ColorMaterialProperty) {\n    let currentColor;\n    if (\n      defined(this._materialProperty.color) &&\n      (this._materialProperty.color.isConstant || isAvailable)\n    ) {\n      currentColor = this._materialProperty.color.getValue(time, scratchColor);\n    }\n    if (!defined(currentColor)) {\n      currentColor = Color.WHITE;\n    }\n    color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n    attributes.color = color;\n  }\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new EllipsoidGeometry(this._options),\n    modelMatrix: skipModelMatrix\n      ? undefined\n      : entity.computeModelMatrixForHeightReference(\n          time,\n          entity.ellipsoid.heightReference,\n          this._options.radii.z * 0.5,\n          this._scene.mapProjection.ellipsoid,\n          modelMatrixResult\n        ),\n    attributes: attributes,\n  });\n};\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @param {Boolean} [skipModelMatrix=false] Whether to compute a model matrix for the geometry instance\n * @param {Matrix4} [modelMatrixResult] Used to store the result of the model matrix calculation\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nEllipsoidGeometryUpdater.prototype.createOutlineGeometryInstance = function (\n  time,\n  skipModelMatrix,\n  modelMatrixResult\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const isAvailable = entity.isAvailable(time);\n\n  const outlineColor = Property.getValueOrDefault(\n    this._outlineColorProperty,\n    time,\n    Color.BLACK,\n    scratchColor\n  );\n  const distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(\n    time\n  );\n\n  const attributes = {\n    show: new ShowGeometryInstanceAttribute(\n      isAvailable &&\n        entity.isShowing &&\n        this._showProperty.getValue(time) &&\n        this._showOutlineProperty.getValue(time)\n    ),\n    color: ColorGeometryInstanceAttribute.fromColor(outlineColor),\n    distanceDisplayCondition: DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(\n      distanceDisplayCondition\n    ),\n    offset: undefined,\n  };\n  if (defined(this._options.offsetAttribute)) {\n    attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(\n      Property.getValueOrDefault(\n        this._terrainOffsetProperty,\n        time,\n        defaultOffset,\n        offsetScratch\n      )\n    );\n  }\n\n  return new GeometryInstance({\n    id: entity,\n    geometry: new EllipsoidOutlineGeometry(this._options),\n    modelMatrix: skipModelMatrix\n      ? undefined\n      : entity.computeModelMatrixForHeightReference(\n          time,\n          entity.ellipsoid.heightReference,\n          this._options.radii.z * 0.5,\n          this._scene.mapProjection.ellipsoid,\n          modelMatrixResult\n        ),\n    attributes: attributes,\n  });\n};\n\nEllipsoidGeometryUpdater.prototype._computeCenter = function (time, result) {\n  return Property.getValueOrUndefined(this._entity.position, time, result);\n};\n\nEllipsoidGeometryUpdater.prototype._isHidden = function (entity, ellipsoid) {\n  return (\n    !defined(entity.position) ||\n    !defined(ellipsoid.radii) ||\n    GeometryUpdater.prototype._isHidden.call(this, entity, ellipsoid)\n  );\n};\n\nEllipsoidGeometryUpdater.prototype._isDynamic = function (entity, ellipsoid) {\n  return (\n    !entity.position.isConstant || //\n    !Property.isConstant(entity.orientation) || //\n    !ellipsoid.radii.isConstant || //\n    !Property.isConstant(ellipsoid.innerRadii) || //\n    !Property.isConstant(ellipsoid.stackPartitions) || //\n    !Property.isConstant(ellipsoid.slicePartitions) || //\n    !Property.isConstant(ellipsoid.outlineWidth) || //\n    !Property.isConstant(ellipsoid.minimumClock) || //\n    !Property.isConstant(ellipsoid.maximumClock) || //\n    !Property.isConstant(ellipsoid.minimumCone) || //\n    !Property.isConstant(ellipsoid.maximumCone) || //\n    !Property.isConstant(ellipsoid.subdivisions)\n  );\n};\n\nEllipsoidGeometryUpdater.prototype._setStaticOptions = function (\n  entity,\n  ellipsoid\n) {\n  const heightReference = Property.getValueOrDefault(\n    ellipsoid.heightReference,\n    Iso8601.MINIMUM_VALUE,\n    HeightReference.NONE\n  );\n  const options = this._options;\n  options.vertexFormat =\n    this._materialProperty instanceof ColorMaterialProperty\n      ? PerInstanceColorAppearance.VERTEX_FORMAT\n      : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n  options.radii = ellipsoid.radii.getValue(\n    Iso8601.MINIMUM_VALUE,\n    options.radii\n  );\n  options.innerRadii = Property.getValueOrUndefined(\n    ellipsoid.innerRadii,\n    options.radii\n  );\n  options.minimumClock = Property.getValueOrUndefined(\n    ellipsoid.minimumClock,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.maximumClock = Property.getValueOrUndefined(\n    ellipsoid.maximumClock,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.minimumCone = Property.getValueOrUndefined(\n    ellipsoid.minimumCone,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.maximumCone = Property.getValueOrUndefined(\n    ellipsoid.maximumCone,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.stackPartitions = Property.getValueOrUndefined(\n    ellipsoid.stackPartitions,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.slicePartitions = Property.getValueOrUndefined(\n    ellipsoid.slicePartitions,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.subdivisions = Property.getValueOrUndefined(\n    ellipsoid.subdivisions,\n    Iso8601.MINIMUM_VALUE\n  );\n  options.offsetAttribute =\n    heightReference !== HeightReference.NONE\n      ? GeometryOffsetAttribute.ALL\n      : undefined;\n};\n\nEllipsoidGeometryUpdater.prototype._onEntityPropertyChanged = heightReferenceOnEntityPropertyChanged;\n\nEllipsoidGeometryUpdater.DynamicGeometryUpdater = DynamicEllipsoidGeometryUpdater;\n\n/**\n * @private\n */\nfunction DynamicEllipsoidGeometryUpdater(\n  geometryUpdater,\n  primitives,\n  groundPrimitives\n) {\n  DynamicGeometryUpdater.call(\n    this,\n    geometryUpdater,\n    primitives,\n    groundPrimitives\n  );\n\n  this._scene = geometryUpdater._scene;\n  this._modelMatrix = new Matrix4();\n  this._attributes = undefined;\n  this._outlineAttributes = undefined;\n  this._lastSceneMode = undefined;\n  this._lastShow = undefined;\n  this._lastOutlineShow = undefined;\n  this._lastOutlineWidth = undefined;\n  this._lastOutlineColor = undefined;\n  this._lastOffset = new Cartesian3();\n  this._material = {};\n}\n\nif (defined(Object.create)) {\n  DynamicEllipsoidGeometryUpdater.prototype = Object.create(\n    DynamicGeometryUpdater.prototype\n  );\n  DynamicEllipsoidGeometryUpdater.prototype.constructor = DynamicEllipsoidGeometryUpdater;\n}\n\nDynamicEllipsoidGeometryUpdater.prototype.update = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  //>>includeEnd('debug');\n\n  const entity = this._entity;\n  const ellipsoid = entity.ellipsoid;\n  if (\n    !entity.isShowing ||\n    !entity.isAvailable(time) ||\n    !Property.getValueOrDefault(ellipsoid.show, time, true)\n  ) {\n    if (defined(this._primitive)) {\n      this._primitive.show = false;\n    }\n\n    if (defined(this._outlinePrimitive)) {\n      this._outlinePrimitive.show = false;\n    }\n    return;\n  }\n\n  const radii = Property.getValueOrUndefined(\n    ellipsoid.radii,\n    time,\n    radiiScratch\n  );\n  let modelMatrix = defined(radii)\n    ? entity.computeModelMatrixForHeightReference(\n        time,\n        ellipsoid.heightReference,\n        radii.z * 0.5,\n        this._scene.mapProjection.ellipsoid,\n        this._modelMatrix\n      )\n    : undefined;\n  if (!defined(modelMatrix) || !defined(radii)) {\n    if (defined(this._primitive)) {\n      this._primitive.show = false;\n    }\n\n    if (defined(this._outlinePrimitive)) {\n      this._outlinePrimitive.show = false;\n    }\n    return;\n  }\n\n  //Compute attributes and material.\n  const showFill = Property.getValueOrDefault(ellipsoid.fill, time, true);\n  const showOutline = Property.getValueOrDefault(\n    ellipsoid.outline,\n    time,\n    false\n  );\n  const outlineColor = Property.getValueOrClonedDefault(\n    ellipsoid.outlineColor,\n    time,\n    Color.BLACK,\n    scratchColor\n  );\n  const material = MaterialProperty.getValue(\n    time,\n    defaultValue(ellipsoid.material, defaultMaterial),\n    this._material\n  );\n\n  // Check properties that could trigger a primitive rebuild.\n  const innerRadii = Property.getValueOrUndefined(\n    ellipsoid.innerRadii,\n    time,\n    innerRadiiScratch\n  );\n  const minimumClock = Property.getValueOrUndefined(\n    ellipsoid.minimumClock,\n    time\n  );\n  const maximumClock = Property.getValueOrUndefined(\n    ellipsoid.maximumClock,\n    time\n  );\n  const minimumCone = Property.getValueOrUndefined(ellipsoid.minimumCone, time);\n  const maximumCone = Property.getValueOrUndefined(ellipsoid.maximumCone, time);\n  const stackPartitions = Property.getValueOrUndefined(\n    ellipsoid.stackPartitions,\n    time\n  );\n  const slicePartitions = Property.getValueOrUndefined(\n    ellipsoid.slicePartitions,\n    time\n  );\n  const subdivisions = Property.getValueOrUndefined(\n    ellipsoid.subdivisions,\n    time\n  );\n  const outlineWidth = Property.getValueOrDefault(\n    ellipsoid.outlineWidth,\n    time,\n    1.0\n  );\n  const heightReference = Property.getValueOrDefault(\n    ellipsoid.heightReference,\n    time,\n    HeightReference.NONE\n  );\n  const offsetAttribute =\n    heightReference !== HeightReference.NONE\n      ? GeometryOffsetAttribute.ALL\n      : undefined;\n\n  //In 3D we use a fast path by modifying Primitive.modelMatrix instead of regenerating the primitive every frame.\n  //Also check for height reference because this method doesn't work when the height is relative to terrain.\n  const sceneMode = this._scene.mode;\n  const in3D =\n    sceneMode === SceneMode.SCENE3D && heightReference === HeightReference.NONE;\n\n  const options = this._options;\n\n  const shadows = this._geometryUpdater.shadowsProperty.getValue(time);\n\n  const distanceDisplayConditionProperty = this._geometryUpdater\n    .distanceDisplayConditionProperty;\n  const distanceDisplayCondition = distanceDisplayConditionProperty.getValue(\n    time\n  );\n\n  const offset = Property.getValueOrDefault(\n    this._geometryUpdater.terrainOffsetProperty,\n    time,\n    defaultOffset,\n    offsetScratch\n  );\n\n  //We only rebuild the primitive if something other than the radii has changed\n  //For the radii, we use unit sphere and then deform it with a scale matrix.\n  const rebuildPrimitives =\n    !in3D ||\n    this._lastSceneMode !== sceneMode ||\n    !defined(this._primitive) || //\n    options.stackPartitions !== stackPartitions ||\n    options.slicePartitions !== slicePartitions || //\n    (defined(innerRadii) &&\n      !Cartesian3.equals(options.innerRadii !== innerRadii)) ||\n    options.minimumClock !== minimumClock || //\n    options.maximumClock !== maximumClock ||\n    options.minimumCone !== minimumCone || //\n    options.maximumCone !== maximumCone ||\n    options.subdivisions !== subdivisions || //\n    this._lastOutlineWidth !== outlineWidth ||\n    options.offsetAttribute !== offsetAttribute;\n\n  if (rebuildPrimitives) {\n    const primitives = this._primitives;\n    primitives.removeAndDestroy(this._primitive);\n    primitives.removeAndDestroy(this._outlinePrimitive);\n    this._primitive = undefined;\n    this._outlinePrimitive = undefined;\n    this._lastSceneMode = sceneMode;\n    this._lastOutlineWidth = outlineWidth;\n\n    options.stackPartitions = stackPartitions;\n    options.slicePartitions = slicePartitions;\n    options.subdivisions = subdivisions;\n    options.offsetAttribute = offsetAttribute;\n    options.radii = Cartesian3.clone(in3D ? unitSphere : radii, options.radii);\n    if (defined(innerRadii)) {\n      if (in3D) {\n        const mag = Cartesian3.magnitude(radii);\n        options.innerRadii = Cartesian3.fromElements(\n          innerRadii.x / mag,\n          innerRadii.y / mag,\n          innerRadii.z / mag,\n          options.innerRadii\n        );\n      } else {\n        options.innerRadii = Cartesian3.clone(innerRadii, options.innerRadii);\n      }\n    } else {\n      options.innerRadii = undefined;\n    }\n    options.minimumClock = minimumClock;\n    options.maximumClock = maximumClock;\n    options.minimumCone = minimumCone;\n    options.maximumCone = maximumCone;\n\n    const appearance = new MaterialAppearance({\n      material: material,\n      translucent: material.isTranslucent(),\n      closed: true,\n    });\n    options.vertexFormat = appearance.vertexFormat;\n\n    const fillInstance = this._geometryUpdater.createFillGeometryInstance(\n      time,\n      in3D,\n      this._modelMatrix\n    );\n\n    this._primitive = primitives.add(\n      new Primitive({\n        geometryInstances: fillInstance,\n        appearance: appearance,\n        asynchronous: false,\n        shadows: shadows,\n      })\n    );\n\n    const outlineInstance = this._geometryUpdater.createOutlineGeometryInstance(\n      time,\n      in3D,\n      this._modelMatrix\n    );\n    this._outlinePrimitive = primitives.add(\n      new Primitive({\n        geometryInstances: outlineInstance,\n        appearance: new PerInstanceColorAppearance({\n          flat: true,\n          translucent: outlineInstance.attributes.color.value[3] !== 255,\n          renderState: {\n            lineWidth: this._geometryUpdater._scene.clampLineWidth(\n              outlineWidth\n            ),\n          },\n        }),\n        asynchronous: false,\n        shadows: shadows,\n      })\n    );\n\n    this._lastShow = showFill;\n    this._lastOutlineShow = showOutline;\n    this._lastOutlineColor = Color.clone(outlineColor, this._lastOutlineColor);\n    this._lastDistanceDisplayCondition = distanceDisplayCondition;\n    this._lastOffset = Cartesian3.clone(offset, this._lastOffset);\n  } else if (this._primitive.ready) {\n    //Update attributes only.\n    const primitive = this._primitive;\n    const outlinePrimitive = this._outlinePrimitive;\n\n    primitive.show = true;\n    outlinePrimitive.show = true;\n    primitive.appearance.material = material;\n\n    let attributes = this._attributes;\n    if (!defined(attributes)) {\n      attributes = primitive.getGeometryInstanceAttributes(entity);\n      this._attributes = attributes;\n    }\n    if (showFill !== this._lastShow) {\n      attributes.show = ShowGeometryInstanceAttribute.toValue(\n        showFill,\n        attributes.show\n      );\n      this._lastShow = showFill;\n    }\n\n    let outlineAttributes = this._outlineAttributes;\n\n    if (!defined(outlineAttributes)) {\n      outlineAttributes = outlinePrimitive.getGeometryInstanceAttributes(\n        entity\n      );\n      this._outlineAttributes = outlineAttributes;\n    }\n\n    if (showOutline !== this._lastOutlineShow) {\n      outlineAttributes.show = ShowGeometryInstanceAttribute.toValue(\n        showOutline,\n        outlineAttributes.show\n      );\n      this._lastOutlineShow = showOutline;\n    }\n\n    if (!Color.equals(outlineColor, this._lastOutlineColor)) {\n      outlineAttributes.color = ColorGeometryInstanceAttribute.toValue(\n        outlineColor,\n        outlineAttributes.color\n      );\n      Color.clone(outlineColor, this._lastOutlineColor);\n    }\n\n    if (\n      !DistanceDisplayCondition.equals(\n        distanceDisplayCondition,\n        this._lastDistanceDisplayCondition\n      )\n    ) {\n      attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(\n        distanceDisplayCondition,\n        attributes.distanceDisplayCondition\n      );\n      outlineAttributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(\n        distanceDisplayCondition,\n        outlineAttributes.distanceDisplayCondition\n      );\n      DistanceDisplayCondition.clone(\n        distanceDisplayCondition,\n        this._lastDistanceDisplayCondition\n      );\n    }\n\n    if (!Cartesian3.equals(offset, this._lastOffset)) {\n      attributes.offset = OffsetGeometryInstanceAttribute.toValue(\n        offset,\n        attributes.offset\n      );\n      outlineAttributes.offset = OffsetGeometryInstanceAttribute.toValue(\n        offset,\n        attributes.offset\n      );\n      Cartesian3.clone(offset, this._lastOffset);\n    }\n  }\n\n  if (in3D) {\n    //Since we are scaling a unit sphere, we can't let any of the values go to zero.\n    //Instead we clamp them to a small value.  To the naked eye, this produces the same results\n    //that you get passing EllipsoidGeometry a radii with a zero component.\n    radii.x = Math.max(radii.x, 0.001);\n    radii.y = Math.max(radii.y, 0.001);\n    radii.z = Math.max(radii.z, 0.001);\n\n    modelMatrix = Matrix4.multiplyByScale(modelMatrix, radii, modelMatrix);\n    this._primitive.modelMatrix = modelMatrix;\n    this._outlinePrimitive.modelMatrix = modelMatrix;\n  }\n};\nexport default EllipsoidGeometryUpdater;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport createMaterialPropertyDescriptor from \"./createMaterialPropertyDescriptor.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\n\n/**\n * @typedef {Object} EllipsoidGraphics.ConstructorOptions\n *\n * Initialization options for the EllipsoidGraphics constructor\n *\n * @property {Property | boolean} [show=true] A boolean Property specifying the visibility of the ellipsoid.\n * @property {Property | Cartesian3} [radii] A {@link Cartesian3} Property specifying the radii of the ellipsoid.\n * @property {Property | Cartesian3} [innerRadii] A {@link Cartesian3} Property specifying the inner radii of the ellipsoid.\n * @property {Property | number} [minimumClock=0.0] A Property specifying the minimum clock angle of the ellipsoid.\n * @property {Property | number} [maximumClock=2*PI] A Property specifying the maximum clock angle of the ellipsoid.\n * @property {Property | number} [minimumCone=0.0] A Property specifying the minimum cone angle of the ellipsoid.\n * @property {Property | number} [maximumCone=PI] A Property specifying the maximum cone angle of the ellipsoid.\n * @property {Property | HeightReference} [heightReference=HeightReference.NONE] A Property specifying what the height from the entity position is relative to.\n * @property {Property | boolean} [fill=true] A boolean Property specifying whether the ellipsoid is filled with the provided material.\n * @property {MaterialProperty | Color} [material=Color.WHITE] A Property specifying the material used to fill the ellipsoid.\n * @property {Property | boolean} [outline=false] A boolean Property specifying whether the ellipsoid is outlined.\n * @property {Property | Color} [outlineColor=Color.BLACK] A Property specifying the {@link Color} of the outline.\n * @property {Property | number} [outlineWidth=1.0] A numeric Property specifying the width of the outline.\n * @property {Property | number} [stackPartitions=64] A Property specifying the number of stacks.\n * @property {Property | number} [slicePartitions=64] A Property specifying the number of radial slices.\n * @property {Property | number} [subdivisions=128] A Property specifying the number of samples per outline ring, determining the granularity of the curvature.\n * @property {Property | ShadowMode} [shadows=ShadowMode.DISABLED] An enum Property specifying whether the ellipsoid casts or receives shadows from light sources.\n * @property {Property | DistanceDisplayCondition} [distanceDisplayCondition] A Property specifying at what distance from the camera that this ellipsoid will be displayed.\n */\n\n/**\n * Describe an ellipsoid or sphere.  The center position and orientation are determined by the containing {@link Entity}.\n *\n * @alias EllipsoidGraphics\n * @constructor\n *\n * @param {EllipsoidGraphics.ConstructorOptions} [options] Object describing initialization options\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Spheres%20and%20Ellipsoids.html|Cesium Sandcastle Spheres and Ellipsoids Demo}\n */\nfunction EllipsoidGraphics(options) {\n  this._definitionChanged = new Event();\n  this._show = undefined;\n  this._showSubscription = undefined;\n  this._radii = undefined;\n  this._radiiSubscription = undefined;\n  this._innerRadii = undefined;\n  this._innerRadiiSubscription = undefined;\n  this._minimumClock = undefined;\n  this._minimumClockSubscription = undefined;\n  this._maximumClock = undefined;\n  this._maximumClockSubscription = undefined;\n  this._minimumCone = undefined;\n  this._minimumConeSubscription = undefined;\n  this._maximumCone = undefined;\n  this._maximumConeSubscription = undefined;\n  this._heightReference = undefined;\n  this._heightReferenceSubscription = undefined;\n  this._fill = undefined;\n  this._fillSubscription = undefined;\n  this._material = undefined;\n  this._materialSubscription = undefined;\n  this._outline = undefined;\n  this._outlineSubscription = undefined;\n  this._outlineColor = undefined;\n  this._outlineColorSubscription = undefined;\n  this._outlineWidth = undefined;\n  this._outlineWidthSubscription = undefined;\n  this._stackPartitions = undefined;\n  this._stackPartitionsSubscription = undefined;\n  this._slicePartitions = undefined;\n  this._slicePartitionsSubscription = undefined;\n  this._subdivisions = undefined;\n  this._subdivisionsSubscription = undefined;\n  this._shadows = undefined;\n  this._shadowsSubscription = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._distanceDisplayConditionSubscription = undefined;\n\n  this.merge(defaultValue(options, defaultValue.EMPTY_OBJECT));\n}\n\nObject.defineProperties(EllipsoidGraphics.prototype, {\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof EllipsoidGraphics.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n\n  /**\n   * Gets or sets the boolean Property specifying the visibility of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  show: createPropertyDescriptor(\"show\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} {@link Property} specifying the radii of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   */\n  radii: createPropertyDescriptor(\"radii\"),\n\n  /**\n   * Gets or sets the {@link Cartesian3} {@link Property} specifying the inner radii of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default radii\n   */\n  innerRadii: createPropertyDescriptor(\"innerRadii\"),\n\n  /**\n   * Gets or sets the Property specifying the minimum clock angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  minimumClock: createPropertyDescriptor(\"minimumClock\"),\n\n  /**\n   * Gets or sets the Property specifying the maximum clock angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 2*PI\n   */\n  maximumClock: createPropertyDescriptor(\"maximumClock\"),\n\n  /**\n   * Gets or sets the Property specifying the minimum cone angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 0.0\n   */\n  minimumCone: createPropertyDescriptor(\"minimumCone\"),\n\n  /**\n   * Gets or sets the Property specifying the maximum cone angle of the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default PI\n   */\n  maximumCone: createPropertyDescriptor(\"maximumCone\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link HeightReference}.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default HeightReference.NONE\n   */\n  heightReference: createPropertyDescriptor(\"heightReference\"),\n\n  /**\n   * Gets or sets the boolean Property specifying whether the ellipsoid is filled with the provided material.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default true\n   */\n  fill: createPropertyDescriptor(\"fill\"),\n\n  /**\n   * Gets or sets the Property specifying the material used to fill the ellipsoid.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {MaterialProperty}\n   * @default Color.WHITE\n   */\n  material: createMaterialPropertyDescriptor(\"material\"),\n\n  /**\n   * Gets or sets the Property specifying whether the ellipsoid is outlined.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default false\n   */\n  outline: createPropertyDescriptor(\"outline\"),\n\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the outline.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default Color.BLACK\n   */\n  outlineColor: createPropertyDescriptor(\"outlineColor\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the width of the outline.\n   * <p>\n   * Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}.\n   * </p>\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 1.0\n   */\n  outlineWidth: createPropertyDescriptor(\"outlineWidth\"),\n\n  /**\n   * Gets or sets the Property specifying the number of stacks.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 64\n   */\n  stackPartitions: createPropertyDescriptor(\"stackPartitions\"),\n\n  /**\n   * Gets or sets the Property specifying the number of radial slices per 360 degrees.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 64\n   */\n  slicePartitions: createPropertyDescriptor(\"slicePartitions\"),\n\n  /**\n   * Gets or sets the Property specifying the number of samples per outline ring, determining the granularity of the curvature.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default 128\n   */\n  subdivisions: createPropertyDescriptor(\"subdivisions\"),\n\n  /**\n   * Get or sets the enum Property specifying whether the ellipsoid\n   * casts or receives shadows from light sources.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   * @default ShadowMode.DISABLED\n   */\n  shadows: createPropertyDescriptor(\"shadows\"),\n\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this ellipsoid will be displayed.\n   * @memberof EllipsoidGraphics.prototype\n   * @type {Property|undefined}\n   */\n  distanceDisplayCondition: createPropertyDescriptor(\n    \"distanceDisplayCondition\"\n  ),\n});\n\n/**\n * Duplicates this instance.\n *\n * @param {EllipsoidGraphics} [result] The object onto which to store the result.\n * @returns {EllipsoidGraphics} The modified result parameter or a new instance if one was not provided.\n */\nEllipsoidGraphics.prototype.clone = function (result) {\n  if (!defined(result)) {\n    return new EllipsoidGraphics(this);\n  }\n  result.show = this.show;\n  result.radii = this.radii;\n  result.innerRadii = this.innerRadii;\n  result.minimumClock = this.minimumClock;\n  result.maximumClock = this.maximumClock;\n  result.minimumCone = this.minimumCone;\n  result.maximumCone = this.maximumCone;\n  result.heightReference = this.heightReference;\n  result.fill = this.fill;\n  result.material = this.material;\n  result.outline = this.outline;\n  result.outlineColor = this.outlineColor;\n  result.outlineWidth = this.outlineWidth;\n  result.stackPartitions = this.stackPartitions;\n  result.slicePartitions = this.slicePartitions;\n  result.subdivisions = this.subdivisions;\n  result.shadows = this.shadows;\n  result.distanceDisplayCondition = this.distanceDisplayCondition;\n  return result;\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {EllipsoidGraphics} source The object to be merged into this object.\n */\nEllipsoidGraphics.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this.show = defaultValue(this.show, source.show);\n  this.radii = defaultValue(this.radii, source.radii);\n  this.innerRadii = defaultValue(this.innerRadii, source.innerRadii);\n  this.minimumClock = defaultValue(this.minimumClock, source.minimumClock);\n  this.maximumClock = defaultValue(this.maximumClock, source.maximumClock);\n  this.minimumCone = defaultValue(this.minimumCone, source.minimumCone);\n  this.maximumCone = defaultValue(this.maximumCone, source.maximumCone);\n  this.heightReference = defaultValue(\n    this.heightReference,\n    source.heightReference\n  );\n  this.fill = defaultValue(this.fill, source.fill);\n  this.material = defaultValue(this.material, source.material);\n  this.outline = defaultValue(this.outline, source.outline);\n  this.outlineColor = defaultValue(this.outlineColor, source.outlineColor);\n  this.outlineWidth = defaultValue(this.outlineWidth, source.outlineWidth);\n  this.stackPartitions = defaultValue(\n    this.stackPartitions,\n    source.stackPartitions\n  );\n  this.slicePartitions = defaultValue(\n    this.slicePartitions,\n    source.slicePartitions\n  );\n  this.subdivisions = defaultValue(this.subdivisions, source.subdivisions);\n  this.shadows = defaultValue(this.shadows, source.shadows);\n  this.distanceDisplayCondition = defaultValue(\n    this.distanceDisplayCondition,\n    source.distanceDisplayCondition\n  );\n};\nexport default EllipsoidGraphics;\n","import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Check from \"../Core/Check.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Quaternion from \"../Core/Quaternion.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport GroundPolylinePrimitive from \"../Scene/GroundPolylinePrimitive.js\";\nimport GroundPrimitive from \"../Scene/GroundPrimitive.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport BillboardGraphics from \"./BillboardGraphics.js\";\nimport BoxGraphics from \"./BoxGraphics.js\";\nimport ConstantPositionProperty from \"./ConstantPositionProperty.js\";\nimport CorridorGraphics from \"./CorridorGraphics.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport createRawPropertyDescriptor from \"./createRawPropertyDescriptor.js\";\nimport CylinderGraphics from \"./CylinderGraphics.js\";\nimport EllipseGraphics from \"./EllipseGraphics.js\";\nimport EllipsoidGraphics from \"./EllipsoidGraphics.js\";\nimport LabelGraphics from \"./LabelGraphics.js\";\nimport ModelGraphics from \"./ModelGraphics.js\";\nimport Cesium3DTilesetGraphics from \"./Cesium3DTilesetGraphics.js\";\nimport PathGraphics from \"./PathGraphics.js\";\nimport PlaneGraphics from \"./PlaneGraphics.js\";\nimport PointGraphics from \"./PointGraphics.js\";\nimport PolygonGraphics from \"./PolygonGraphics.js\";\nimport PolylineGraphics from \"./PolylineGraphics.js\";\nimport PolylineVolumeGraphics from \"./PolylineVolumeGraphics.js\";\nimport Property from \"./Property.js\";\nimport PropertyBag from \"./PropertyBag.js\";\nimport RectangleGraphics from \"./RectangleGraphics.js\";\nimport WallGraphics from \"./WallGraphics.js\";\n\nconst cartoScratch = new Cartographic();\n\nfunction createConstantPositionProperty(value) {\n  return new ConstantPositionProperty(value);\n}\n\nfunction createPositionPropertyDescriptor(name) {\n  return createPropertyDescriptor(\n    name,\n    undefined,\n    createConstantPositionProperty\n  );\n}\n\nfunction createPropertyTypeDescriptor(name, Type) {\n  return createPropertyDescriptor(name, undefined, function (value) {\n    if (value instanceof Type) {\n      return value;\n    }\n    return new Type(value);\n  });\n}\n\n/**\n * @typedef {Object} Entity.ConstructorOptions\n *\n * Initialization options for the Entity constructor\n *\n * @property {String} [id] A unique identifier for this object. If none is provided, a GUID is generated.\n * @property {String} [name] A human readable name to display to users. It does not have to be unique.\n * @property {TimeIntervalCollection} [availability] The availability, if any, associated with this object.\n * @property {Boolean} [show] A boolean value indicating if the entity and its children are displayed.\n * @property {Property | string} [description] A string Property specifying an HTML description for this entity.\n * @property {PositionProperty | Cartesian3} [position] A Property specifying the entity position.\n * @property {Property} [orientation] A Property specifying the entity orientation.\n * @property {Property} [viewFrom] A suggested initial offset for viewing this object.\n * @property {Entity} [parent] A parent entity to associate with this entity.\n * @property {BillboardGraphics | BillboardGraphics.ConstructorOptions} [billboard] A billboard to associate with this entity.\n * @property {BoxGraphics | BoxGraphics.ConstructorOptions} [box] A box to associate with this entity.\n * @property {CorridorGraphics | CorridorGraphics.ConstructorOptions} [corridor] A corridor to associate with this entity.\n * @property {CylinderGraphics | CylinderGraphics.ConstructorOptions} [cylinder] A cylinder to associate with this entity.\n * @property {EllipseGraphics | EllipseGraphics.ConstructorOptions} [ellipse] A ellipse to associate with this entity.\n * @property {EllipsoidGraphics | EllipsoidGraphics.ConstructorOptions} [ellipsoid] A ellipsoid to associate with this entity.\n * @property {LabelGraphics | LabelGraphics.ConstructorOptions} [label] A options.label to associate with this entity.\n * @property {ModelGraphics | ModelGraphics.ConstructorOptions} [model] A model to associate with this entity.\n * @property {Cesium3DTilesetGraphics | Cesium3DTilesetGraphics.ConstructorOptions} [tileset] A 3D Tiles tileset to associate with this entity.\n * @property {PathGraphics | PathGraphics.ConstructorOptions} [path] A path to associate with this entity.\n * @property {PlaneGraphics | PlaneGraphics.ConstructorOptions} [plane] A plane to associate with this entity.\n * @property {PointGraphics | PointGraphics.ConstructorOptions} [point] A point to associate with this entity.\n * @property {PolygonGraphics | PolygonGraphics.ConstructorOptions} [polygon] A polygon to associate with this entity.\n * @property {PolylineGraphics | PolylineGraphics.ConstructorOptions} [polyline] A polyline to associate with this entity.\n * @property {PropertyBag | Object.<string,*>} [properties] Arbitrary properties to associate with this entity.\n * @property {PolylineVolumeGraphics | PolylineVolumeGraphics.ConstructorOptions} [polylineVolume] A polylineVolume to associate with this entity.\n * @property {RectangleGraphics | RectangleGraphics.ConstructorOptions} [rectangle] A rectangle to associate with this entity.\n * @property {WallGraphics | WallGraphics.ConstructorOptions} [wall] A wall to associate with this entity.\n */\n\n/**\n * Entity instances aggregate multiple forms of visualization into a single high-level object.\n * They can be created manually and added to {@link Viewer#entities} or be produced by\n * data sources, such as {@link CzmlDataSource} and {@link GeoJsonDataSource}.\n * @alias Entity\n * @constructor\n *\n * @param {Entity.ConstructorOptions} [options] Object describing initialization options\n *\n * @see {@link https://cesium.com/learn/cesiumjs-learn/cesiumjs-creating-entities/|Creating Entities}\n */\nfunction Entity(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  let id = options.id;\n  if (!defined(id)) {\n    id = createGuid();\n  }\n\n  this._availability = undefined;\n  this._id = id;\n  this._definitionChanged = new Event();\n  this._name = options.name;\n  this._show = defaultValue(options.show, true);\n  this._parent = undefined;\n  this._propertyNames = [\n    \"billboard\",\n    \"box\",\n    \"corridor\",\n    \"cylinder\",\n    \"description\",\n    \"ellipse\", //\n    \"ellipsoid\",\n    \"label\",\n    \"model\",\n    \"tileset\",\n    \"orientation\",\n    \"path\",\n    \"plane\",\n    \"point\",\n    \"polygon\", //\n    \"polyline\",\n    \"polylineVolume\",\n    \"position\",\n    \"properties\",\n    \"rectangle\",\n    \"viewFrom\",\n    \"wall\",\n  ];\n\n  this._billboard = undefined;\n  this._billboardSubscription = undefined;\n  this._box = undefined;\n  this._boxSubscription = undefined;\n  this._corridor = undefined;\n  this._corridorSubscription = undefined;\n  this._cylinder = undefined;\n  this._cylinderSubscription = undefined;\n  this._description = undefined;\n  this._descriptionSubscription = undefined;\n  this._ellipse = undefined;\n  this._ellipseSubscription = undefined;\n  this._ellipsoid = undefined;\n  this._ellipsoidSubscription = undefined;\n  this._label = undefined;\n  this._labelSubscription = undefined;\n  this._model = undefined;\n  this._modelSubscription = undefined;\n  this._tileset = undefined;\n  this._tilesetSubscription = undefined;\n  this._orientation = undefined;\n  this._orientationSubscription = undefined;\n  this._path = undefined;\n  this._pathSubscription = undefined;\n  this._plane = undefined;\n  this._planeSubscription = undefined;\n  this._point = undefined;\n  this._pointSubscription = undefined;\n  this._polygon = undefined;\n  this._polygonSubscription = undefined;\n  this._polyline = undefined;\n  this._polylineSubscription = undefined;\n  this._polylineVolume = undefined;\n  this._polylineVolumeSubscription = undefined;\n  this._position = undefined;\n  this._positionSubscription = undefined;\n  this._properties = undefined;\n  this._propertiesSubscription = undefined;\n  this._rectangle = undefined;\n  this._rectangleSubscription = undefined;\n  this._viewFrom = undefined;\n  this._viewFromSubscription = undefined;\n  this._wall = undefined;\n  this._wallSubscription = undefined;\n  this._children = [];\n\n  /**\n   * Gets or sets the entity collection that this entity belongs to.\n   * @type {EntityCollection}\n   */\n  this.entityCollection = undefined;\n\n  this.parent = options.parent;\n  this.merge(options);\n}\n\nfunction updateShow(entity, children, isShowing) {\n  const length = children.length;\n  for (let i = 0; i < length; i++) {\n    const child = children[i];\n    const childShow = child._show;\n    const oldValue = !isShowing && childShow;\n    const newValue = isShowing && childShow;\n    if (oldValue !== newValue) {\n      updateShow(child, child._children, isShowing);\n    }\n  }\n  entity._definitionChanged.raiseEvent(\n    entity,\n    \"isShowing\",\n    isShowing,\n    !isShowing\n  );\n}\n\nObject.defineProperties(Entity.prototype, {\n  /**\n   * The availability, if any, associated with this object.\n   * If availability is undefined, it is assumed that this object's\n   * other properties will return valid data for any provided time.\n   * If availability exists, the objects other properties will only\n   * provide valid data if queried within the given interval.\n   * @memberof Entity.prototype\n   * @type {TimeIntervalCollection|undefined}\n   */\n  availability: createRawPropertyDescriptor(\"availability\"),\n  /**\n   * Gets the unique ID associated with this object.\n   * @memberof Entity.prototype\n   * @type {String}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n  /**\n   * Gets the event that is raised whenever a property or sub-property is changed or modified.\n   * @memberof Entity.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets or sets the name of the object.  The name is intended for end-user\n   * consumption and does not need to be unique.\n   * @memberof Entity.prototype\n   * @type {String|undefined}\n   */\n  name: createRawPropertyDescriptor(\"name\"),\n  /**\n   * Gets or sets whether this entity should be displayed. When set to true,\n   * the entity is only displayed if the parent entity's show property is also true.\n   * @memberof Entity.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (value === this._show) {\n        return;\n      }\n\n      const wasShowing = this.isShowing;\n      this._show = value;\n      const isShowing = this.isShowing;\n\n      if (wasShowing !== isShowing) {\n        updateShow(this, this._children, isShowing);\n      }\n\n      this._definitionChanged.raiseEvent(this, \"show\", value, !value);\n    },\n  },\n  /**\n   * Gets whether this entity is being displayed, taking into account\n   * the visibility of any ancestor entities.\n   * @memberof Entity.prototype\n   * @type {Boolean}\n   */\n  isShowing: {\n    get: function () {\n      return (\n        this._show &&\n        (!defined(this.entityCollection) || this.entityCollection.show) &&\n        (!defined(this._parent) || this._parent.isShowing)\n      );\n    },\n  },\n  /**\n   * Gets or sets the parent object.\n   * @memberof Entity.prototype\n   * @type {Entity|undefined}\n   */\n  parent: {\n    get: function () {\n      return this._parent;\n    },\n    set: function (value) {\n      const oldValue = this._parent;\n\n      if (oldValue === value) {\n        return;\n      }\n\n      const wasShowing = this.isShowing;\n      if (defined(oldValue)) {\n        const index = oldValue._children.indexOf(this);\n        oldValue._children.splice(index, 1);\n      }\n\n      this._parent = value;\n      if (defined(value)) {\n        value._children.push(this);\n      }\n\n      const isShowing = this.isShowing;\n\n      if (wasShowing !== isShowing) {\n        updateShow(this, this._children, isShowing);\n      }\n\n      this._definitionChanged.raiseEvent(this, \"parent\", value, oldValue);\n    },\n  },\n  /**\n   * Gets the names of all properties registered on this instance.\n   * @memberof Entity.prototype\n   * @type {string[]}\n   */\n  propertyNames: {\n    get: function () {\n      return this._propertyNames;\n    },\n  },\n  /**\n   * Gets or sets the billboard.\n   * @memberof Entity.prototype\n   * @type {BillboardGraphics|undefined}\n   */\n  billboard: createPropertyTypeDescriptor(\"billboard\", BillboardGraphics),\n  /**\n   * Gets or sets the box.\n   * @memberof Entity.prototype\n   * @type {BoxGraphics|undefined}\n   */\n  box: createPropertyTypeDescriptor(\"box\", BoxGraphics),\n  /**\n   * Gets or sets the corridor.\n   * @memberof Entity.prototype\n   * @type {CorridorGraphics|undefined}\n   */\n  corridor: createPropertyTypeDescriptor(\"corridor\", CorridorGraphics),\n  /**\n   * Gets or sets the cylinder.\n   * @memberof Entity.prototype\n   * @type {CylinderGraphics|undefined}\n   */\n  cylinder: createPropertyTypeDescriptor(\"cylinder\", CylinderGraphics),\n  /**\n   * Gets or sets the description.\n   * @memberof Entity.prototype\n   * @type {Property|undefined}\n   */\n  description: createPropertyDescriptor(\"description\"),\n  /**\n   * Gets or sets the ellipse.\n   * @memberof Entity.prototype\n   * @type {EllipseGraphics|undefined}\n   */\n  ellipse: createPropertyTypeDescriptor(\"ellipse\", EllipseGraphics),\n  /**\n   * Gets or sets the ellipsoid.\n   * @memberof Entity.prototype\n   * @type {EllipsoidGraphics|undefined}\n   */\n  ellipsoid: createPropertyTypeDescriptor(\"ellipsoid\", EllipsoidGraphics),\n  /**\n   * Gets or sets the label.\n   * @memberof Entity.prototype\n   * @type {LabelGraphics|undefined}\n   */\n  label: createPropertyTypeDescriptor(\"label\", LabelGraphics),\n  /**\n   * Gets or sets the model.\n   * @memberof Entity.prototype\n   * @type {ModelGraphics|undefined}\n   */\n  model: createPropertyTypeDescriptor(\"model\", ModelGraphics),\n  /**\n   * Gets or sets the tileset.\n   * @memberof Entity.prototype\n   * @type {Cesium3DTilesetGraphics|undefined}\n   */\n  tileset: createPropertyTypeDescriptor(\"tileset\", Cesium3DTilesetGraphics),\n  /**\n   * Gets or sets the orientation.\n   * @memberof Entity.prototype\n   * @type {Property|undefined}\n   */\n  orientation: createPropertyDescriptor(\"orientation\"),\n  /**\n   * Gets or sets the path.\n   * @memberof Entity.prototype\n   * @type {PathGraphics|undefined}\n   */\n  path: createPropertyTypeDescriptor(\"path\", PathGraphics),\n  /**\n   * Gets or sets the plane.\n   * @memberof Entity.prototype\n   * @type {PlaneGraphics|undefined}\n   */\n  plane: createPropertyTypeDescriptor(\"plane\", PlaneGraphics),\n  /**\n   * Gets or sets the point graphic.\n   * @memberof Entity.prototype\n   * @type {PointGraphics|undefined}\n   */\n  point: createPropertyTypeDescriptor(\"point\", PointGraphics),\n  /**\n   * Gets or sets the polygon.\n   * @memberof Entity.prototype\n   * @type {PolygonGraphics|undefined}\n   */\n  polygon: createPropertyTypeDescriptor(\"polygon\", PolygonGraphics),\n  /**\n   * Gets or sets the polyline.\n   * @memberof Entity.prototype\n   * @type {PolylineGraphics|undefined}\n   */\n  polyline: createPropertyTypeDescriptor(\"polyline\", PolylineGraphics),\n  /**\n   * Gets or sets the polyline volume.\n   * @memberof Entity.prototype\n   * @type {PolylineVolumeGraphics|undefined}\n   */\n  polylineVolume: createPropertyTypeDescriptor(\n    \"polylineVolume\",\n    PolylineVolumeGraphics\n  ),\n  /**\n   * Gets or sets the bag of arbitrary properties associated with this entity.\n   * @memberof Entity.prototype\n   * @type {PropertyBag|undefined}\n   */\n  properties: createPropertyTypeDescriptor(\"properties\", PropertyBag),\n  /**\n   * Gets or sets the position.\n   * @memberof Entity.prototype\n   * @type {PositionProperty|undefined}\n   */\n  position: createPositionPropertyDescriptor(\"position\"),\n  /**\n   * Gets or sets the rectangle.\n   * @memberof Entity.prototype\n   * @type {RectangleGraphics|undefined}\n   */\n  rectangle: createPropertyTypeDescriptor(\"rectangle\", RectangleGraphics),\n  /**\n   * Gets or sets the suggested initial offset when tracking this object.\n   * The offset is typically defined in the east-north-up reference frame,\n   * but may be another frame depending on the object's velocity.\n   * @memberof Entity.prototype\n   * @type {Property|undefined}\n   */\n  viewFrom: createPropertyDescriptor(\"viewFrom\"),\n  /**\n   * Gets or sets the wall.\n   * @memberof Entity.prototype\n   * @type {WallGraphics|undefined}\n   */\n  wall: createPropertyTypeDescriptor(\"wall\", WallGraphics),\n});\n\n/**\n * Given a time, returns true if this object should have data during that time.\n *\n * @param {JulianDate} time The time to check availability for.\n * @returns {Boolean} true if the object should have data during the provided time, false otherwise.\n */\nEntity.prototype.isAvailable = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(time)) {\n    throw new DeveloperError(\"time is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const availability = this._availability;\n  return !defined(availability) || availability.contains(time);\n};\n\n/**\n * Adds a property to this object.  Once a property is added, it can be\n * observed with {@link Entity#definitionChanged} and composited\n * with {@link CompositeEntityCollection}\n *\n * @param {String} propertyName The name of the property to add.\n *\n * @exception {DeveloperError} \"propertyName\" is a reserved property name.\n * @exception {DeveloperError} \"propertyName\" is already a registered property.\n */\nEntity.prototype.addProperty = function (propertyName) {\n  const propertyNames = this._propertyNames;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(propertyName)) {\n    throw new DeveloperError(\"propertyName is required.\");\n  }\n  if (propertyNames.indexOf(propertyName) !== -1) {\n    throw new DeveloperError(\n      `${propertyName} is already a registered property.`\n    );\n  }\n  if (propertyName in this) {\n    throw new DeveloperError(`${propertyName} is a reserved property name.`);\n  }\n  //>>includeEnd('debug');\n\n  propertyNames.push(propertyName);\n  Object.defineProperty(\n    this,\n    propertyName,\n    createRawPropertyDescriptor(propertyName, true)\n  );\n};\n\n/**\n * Removed a property previously added with addProperty.\n *\n * @param {String} propertyName The name of the property to remove.\n *\n * @exception {DeveloperError} \"propertyName\" is a reserved property name.\n * @exception {DeveloperError} \"propertyName\" is not a registered property.\n */\nEntity.prototype.removeProperty = function (propertyName) {\n  const propertyNames = this._propertyNames;\n  const index = propertyNames.indexOf(propertyName);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(propertyName)) {\n    throw new DeveloperError(\"propertyName is required.\");\n  }\n  if (index === -1) {\n    throw new DeveloperError(`${propertyName} is not a registered property.`);\n  }\n  //>>includeEnd('debug');\n\n  this._propertyNames.splice(index, 1);\n  delete this[propertyName];\n};\n\n/**\n * Assigns each unassigned property on this object to the value\n * of the same property on the provided source object.\n *\n * @param {Entity} source The object to be merged into this object.\n */\nEntity.prototype.merge = function (source) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(source)) {\n    throw new DeveloperError(\"source is required.\");\n  }\n  //>>includeEnd('debug');\n\n  //Name, show, and availability are not Property objects and are currently handled differently.\n  //source.show is intentionally ignored because this.show always has a value.\n  this.name = defaultValue(this.name, source.name);\n  this.availability = defaultValue(this.availability, source.availability);\n\n  const propertyNames = this._propertyNames;\n  const sourcePropertyNames = defined(source._propertyNames)\n    ? source._propertyNames\n    : Object.keys(source);\n  const propertyNamesLength = sourcePropertyNames.length;\n  for (let i = 0; i < propertyNamesLength; i++) {\n    const name = sourcePropertyNames[i];\n\n    //While source is required by the API to be an Entity, we internally call this method from the\n    //constructor with an options object to configure initial custom properties.\n    //So we need to ignore reserved-non-property.\n    if (name === \"parent\" || name === \"name\" || name === \"availability\") {\n      continue;\n    }\n\n    const targetProperty = this[name];\n    const sourceProperty = source[name];\n\n    //Custom properties that are registered on the source entity must also\n    //get registered on this entity.\n    if (!defined(targetProperty) && propertyNames.indexOf(name) === -1) {\n      this.addProperty(name);\n    }\n\n    if (defined(sourceProperty)) {\n      if (defined(targetProperty)) {\n        if (defined(targetProperty.merge)) {\n          targetProperty.merge(sourceProperty);\n        }\n      } else if (\n        defined(sourceProperty.merge) &&\n        defined(sourceProperty.clone)\n      ) {\n        this[name] = sourceProperty.clone();\n      } else {\n        this[name] = sourceProperty;\n      }\n    }\n  }\n};\n\nconst matrix3Scratch = new Matrix3();\nconst positionScratch = new Cartesian3();\nconst orientationScratch = new Quaternion();\n\n/**\n * Computes the model matrix for the entity's transform at specified time. Returns undefined if orientation or position\n * are undefined.\n *\n * @param {JulianDate} time The time to retrieve model matrix for.\n * @param {Matrix4} [result] The object onto which to store the result.\n *\n * @returns {Matrix4} The modified result parameter or a new Matrix4 instance if one was not provided. Result is undefined if position or orientation are undefined.\n */\nEntity.prototype.computeModelMatrix = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"time\", time);\n  //>>includeEnd('debug');\n  const position = Property.getValueOrUndefined(\n    this._position,\n    time,\n    positionScratch\n  );\n  if (!defined(position)) {\n    return undefined;\n  }\n\n  const orientation = Property.getValueOrUndefined(\n    this._orientation,\n    time,\n    orientationScratch\n  );\n  if (!defined(orientation)) {\n    result = Transforms.eastNorthUpToFixedFrame(position, undefined, result);\n  } else {\n    result = Matrix4.fromRotationTranslation(\n      Matrix3.fromQuaternion(orientation, matrix3Scratch),\n      position,\n      result\n    );\n  }\n  return result;\n};\n\n/**\n * @private\n */\nEntity.prototype.computeModelMatrixForHeightReference = function (\n  time,\n  heightReferenceProperty,\n  heightOffset,\n  ellipsoid,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"time\", time);\n  //>>includeEnd('debug');\n  const heightReference = Property.getValueOrDefault(\n    heightReferenceProperty,\n    time,\n    HeightReference.NONE\n  );\n  let position = Property.getValueOrUndefined(\n    this._position,\n    time,\n    positionScratch\n  );\n  if (\n    heightReference === HeightReference.NONE ||\n    !defined(position) ||\n    Cartesian3.equalsEpsilon(position, Cartesian3.ZERO, CesiumMath.EPSILON8)\n  ) {\n    return this.computeModelMatrix(time, result);\n  }\n\n  const carto = ellipsoid.cartesianToCartographic(position, cartoScratch);\n  if (heightReference === HeightReference.CLAMP_TO_GROUND) {\n    carto.height = heightOffset;\n  } else {\n    carto.height += heightOffset;\n  }\n  position = ellipsoid.cartographicToCartesian(carto, position);\n\n  const orientation = Property.getValueOrUndefined(\n    this._orientation,\n    time,\n    orientationScratch\n  );\n  if (!defined(orientation)) {\n    result = Transforms.eastNorthUpToFixedFrame(position, undefined, result);\n  } else {\n    result = Matrix4.fromRotationTranslation(\n      Matrix3.fromQuaternion(orientation, matrix3Scratch),\n      position,\n      result\n    );\n  }\n  return result;\n};\n\n/**\n * Checks if the given Scene supports materials besides Color on Entities draped on terrain or 3D Tiles.\n * If this feature is not supported, Entities with non-color materials but no `height` will\n * instead be rendered as if height is 0.\n *\n * @param {Scene} scene The current scene.\n * @returns {Boolean} Whether or not the current scene supports materials for entities on terrain.\n */\nEntity.supportsMaterialsforEntitiesOnTerrain = function (scene) {\n  return GroundPrimitive.supportsMaterials(scene);\n};\n\n/**\n * Checks if the given Scene supports polylines clamped to terrain or 3D Tiles.\n * If this feature is not supported, Entities with PolylineGraphics will be rendered with vertices at\n * the provided heights and using the `arcType` parameter instead of clamped to the ground.\n *\n * @param {Scene} scene The current scene.\n * @returns {Boolean} Whether or not the current scene supports polylines on terrain or 3D TIles.\n */\nEntity.supportsPolylinesOnTerrain = function (scene) {\n  return GroundPolylinePrimitive.isSupported(scene);\n};\nexport default Entity;\n","import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport EllipsoidalOccluder from \"../Core/EllipsoidalOccluder.js\";\nimport Event from \"../Core/Event.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Billboard from \"../Scene/Billboard.js\";\nimport BillboardCollection from \"../Scene/BillboardCollection.js\";\nimport Label from \"../Scene/Label.js\";\nimport LabelCollection from \"../Scene/LabelCollection.js\";\nimport PointPrimitive from \"../Scene/PointPrimitive.js\";\nimport PointPrimitiveCollection from \"../Scene/PointPrimitiveCollection.js\";\nimport SceneMode from \"../Scene/SceneMode.js\";\nimport KDBush from \"../ThirdParty/kdbush.js\";\n\n/**\n * Defines how screen space objects (billboards, points, labels) are clustered.\n *\n * @param {Object} [options] An object with the following properties:\n * @param {Boolean} [options.enabled=false] Whether or not to enable clustering.\n * @param {Number} [options.pixelRange=80] The pixel range to extend the screen space bounding box.\n * @param {Number} [options.minimumClusterSize=2] The minimum number of screen space objects that can be clustered.\n * @param {Boolean} [options.clusterBillboards=true] Whether or not to cluster the billboards of an entity.\n * @param {Boolean} [options.clusterLabels=true] Whether or not to cluster the labels of an entity.\n * @param {Boolean} [options.clusterPoints=true] Whether or not to cluster the points of an entity.\n * @param {Boolean} [options.show=true] Determines if the entities in the cluster will be shown.\n *\n * @alias EntityCluster\n * @constructor\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Clustering.html|Cesium Sandcastle Clustering Demo}\n */\nfunction EntityCluster(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  this._enabled = defaultValue(options.enabled, false);\n  this._pixelRange = defaultValue(options.pixelRange, 80);\n  this._minimumClusterSize = defaultValue(options.minimumClusterSize, 2);\n  this._clusterBillboards = defaultValue(options.clusterBillboards, true);\n  this._clusterLabels = defaultValue(options.clusterLabels, true);\n  this._clusterPoints = defaultValue(options.clusterPoints, true);\n\n  this._labelCollection = undefined;\n  this._billboardCollection = undefined;\n  this._pointCollection = undefined;\n\n  this._clusterBillboardCollection = undefined;\n  this._clusterLabelCollection = undefined;\n  this._clusterPointCollection = undefined;\n\n  this._collectionIndicesByEntity = {};\n\n  this._unusedLabelIndices = [];\n  this._unusedBillboardIndices = [];\n  this._unusedPointIndices = [];\n\n  this._previousClusters = [];\n  this._previousHeight = undefined;\n\n  this._enabledDirty = false;\n  this._clusterDirty = false;\n\n  this._cluster = undefined;\n  this._removeEventListener = undefined;\n\n  this._clusterEvent = new Event();\n\n  /**\n   * Determines if entities in this collection will be shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.show = defaultValue(options.show, true);\n}\n\nfunction getX(point) {\n  return point.coord.x;\n}\n\nfunction getY(point) {\n  return point.coord.y;\n}\n\nfunction expandBoundingBox(bbox, pixelRange) {\n  bbox.x -= pixelRange;\n  bbox.y -= pixelRange;\n  bbox.width += pixelRange * 2.0;\n  bbox.height += pixelRange * 2.0;\n}\n\nconst labelBoundingBoxScratch = new BoundingRectangle();\n\nfunction getBoundingBox(item, coord, pixelRange, entityCluster, result) {\n  if (defined(item._labelCollection) && entityCluster._clusterLabels) {\n    result = Label.getScreenSpaceBoundingBox(item, coord, result);\n  } else if (\n    defined(item._billboardCollection) &&\n    entityCluster._clusterBillboards\n  ) {\n    result = Billboard.getScreenSpaceBoundingBox(item, coord, result);\n  } else if (\n    defined(item._pointPrimitiveCollection) &&\n    entityCluster._clusterPoints\n  ) {\n    result = PointPrimitive.getScreenSpaceBoundingBox(item, coord, result);\n  }\n\n  expandBoundingBox(result, pixelRange);\n\n  if (\n    entityCluster._clusterLabels &&\n    !defined(item._labelCollection) &&\n    defined(item.id) &&\n    hasLabelIndex(entityCluster, item.id.id) &&\n    defined(item.id._label)\n  ) {\n    const labelIndex =\n      entityCluster._collectionIndicesByEntity[item.id.id].labelIndex;\n    const label = entityCluster._labelCollection.get(labelIndex);\n    const labelBBox = Label.getScreenSpaceBoundingBox(\n      label,\n      coord,\n      labelBoundingBoxScratch\n    );\n    expandBoundingBox(labelBBox, pixelRange);\n    result = BoundingRectangle.union(result, labelBBox, result);\n  }\n\n  return result;\n}\n\nfunction addNonClusteredItem(item, entityCluster) {\n  item.clusterShow = true;\n\n  if (\n    !defined(item._labelCollection) &&\n    defined(item.id) &&\n    hasLabelIndex(entityCluster, item.id.id) &&\n    defined(item.id._label)\n  ) {\n    const labelIndex =\n      entityCluster._collectionIndicesByEntity[item.id.id].labelIndex;\n    const label = entityCluster._labelCollection.get(labelIndex);\n    label.clusterShow = true;\n  }\n}\n\nfunction addCluster(position, numPoints, ids, entityCluster) {\n  const cluster = {\n    billboard: entityCluster._clusterBillboardCollection.add(),\n    label: entityCluster._clusterLabelCollection.add(),\n    point: entityCluster._clusterPointCollection.add(),\n  };\n\n  cluster.billboard.show = false;\n  cluster.point.show = false;\n  cluster.label.show = true;\n  cluster.label.text = numPoints.toLocaleString();\n  cluster.label.id = ids;\n  cluster.billboard.position = cluster.label.position = cluster.point.position = position;\n\n  entityCluster._clusterEvent.raiseEvent(ids, cluster);\n}\n\nfunction hasLabelIndex(entityCluster, entityId) {\n  return (\n    defined(entityCluster) &&\n    defined(entityCluster._collectionIndicesByEntity[entityId]) &&\n    defined(entityCluster._collectionIndicesByEntity[entityId].labelIndex)\n  );\n}\n\nfunction getScreenSpacePositions(\n  collection,\n  points,\n  scene,\n  occluder,\n  entityCluster\n) {\n  if (!defined(collection)) {\n    return;\n  }\n\n  const length = collection.length;\n  for (let i = 0; i < length; ++i) {\n    const item = collection.get(i);\n    item.clusterShow = false;\n\n    if (\n      !item.show ||\n      (entityCluster._scene.mode === SceneMode.SCENE3D &&\n        !occluder.isPointVisible(item.position))\n    ) {\n      continue;\n    }\n\n    const canClusterLabels =\n      entityCluster._clusterLabels && defined(item._labelCollection);\n    const canClusterBillboards =\n      entityCluster._clusterBillboards && defined(item.id._billboard);\n    const canClusterPoints =\n      entityCluster._clusterPoints && defined(item.id._point);\n    if (canClusterLabels && (canClusterPoints || canClusterBillboards)) {\n      continue;\n    }\n\n    const coord = item.computeScreenSpacePosition(scene);\n    if (!defined(coord)) {\n      continue;\n    }\n\n    points.push({\n      index: i,\n      collection: collection,\n      clustered: false,\n      coord: coord,\n    });\n  }\n}\n\nconst pointBoundinRectangleScratch = new BoundingRectangle();\nconst totalBoundingRectangleScratch = new BoundingRectangle();\nconst neighborBoundingRectangleScratch = new BoundingRectangle();\n\nfunction createDeclutterCallback(entityCluster) {\n  return function (amount) {\n    if ((defined(amount) && amount < 0.05) || !entityCluster.enabled) {\n      return;\n    }\n\n    const scene = entityCluster._scene;\n\n    const labelCollection = entityCluster._labelCollection;\n    const billboardCollection = entityCluster._billboardCollection;\n    const pointCollection = entityCluster._pointCollection;\n\n    if (\n      (!defined(labelCollection) &&\n        !defined(billboardCollection) &&\n        !defined(pointCollection)) ||\n      (!entityCluster._clusterBillboards &&\n        !entityCluster._clusterLabels &&\n        !entityCluster._clusterPoints)\n    ) {\n      return;\n    }\n\n    let clusteredLabelCollection = entityCluster._clusterLabelCollection;\n    let clusteredBillboardCollection =\n      entityCluster._clusterBillboardCollection;\n    let clusteredPointCollection = entityCluster._clusterPointCollection;\n\n    if (defined(clusteredLabelCollection)) {\n      clusteredLabelCollection.removeAll();\n    } else {\n      clusteredLabelCollection = entityCluster._clusterLabelCollection = new LabelCollection(\n        {\n          scene: scene,\n        }\n      );\n    }\n\n    if (defined(clusteredBillboardCollection)) {\n      clusteredBillboardCollection.removeAll();\n    } else {\n      clusteredBillboardCollection = entityCluster._clusterBillboardCollection = new BillboardCollection(\n        {\n          scene: scene,\n        }\n      );\n    }\n\n    if (defined(clusteredPointCollection)) {\n      clusteredPointCollection.removeAll();\n    } else {\n      clusteredPointCollection = entityCluster._clusterPointCollection = new PointPrimitiveCollection();\n    }\n\n    const pixelRange = entityCluster._pixelRange;\n    const minimumClusterSize = entityCluster._minimumClusterSize;\n\n    const clusters = entityCluster._previousClusters;\n    const newClusters = [];\n\n    const previousHeight = entityCluster._previousHeight;\n    const currentHeight = scene.camera.positionCartographic.height;\n\n    const ellipsoid = scene.mapProjection.ellipsoid;\n    const cameraPosition = scene.camera.positionWC;\n    const occluder = new EllipsoidalOccluder(ellipsoid, cameraPosition);\n\n    const points = [];\n    if (entityCluster._clusterLabels) {\n      getScreenSpacePositions(\n        labelCollection,\n        points,\n        scene,\n        occluder,\n        entityCluster\n      );\n    }\n    if (entityCluster._clusterBillboards) {\n      getScreenSpacePositions(\n        billboardCollection,\n        points,\n        scene,\n        occluder,\n        entityCluster\n      );\n    }\n    if (entityCluster._clusterPoints) {\n      getScreenSpacePositions(\n        pointCollection,\n        points,\n        scene,\n        occluder,\n        entityCluster\n      );\n    }\n\n    let i;\n    let j;\n    let length;\n    let bbox;\n    let neighbors;\n    let neighborLength;\n    let neighborIndex;\n    let neighborPoint;\n    let ids;\n    let numPoints;\n\n    let collection;\n    let collectionIndex;\n\n    const index = new KDBush(points, getX, getY, 64, Int32Array);\n\n    if (currentHeight < previousHeight) {\n      length = clusters.length;\n      for (i = 0; i < length; ++i) {\n        const cluster = clusters[i];\n\n        if (!occluder.isPointVisible(cluster.position)) {\n          continue;\n        }\n\n        const coord = Billboard._computeScreenSpacePosition(\n          Matrix4.IDENTITY,\n          cluster.position,\n          Cartesian3.ZERO,\n          Cartesian2.ZERO,\n          scene\n        );\n        if (!defined(coord)) {\n          continue;\n        }\n\n        const factor = 1.0 - currentHeight / previousHeight;\n        let width = (cluster.width = cluster.width * factor);\n        let height = (cluster.height = cluster.height * factor);\n\n        width = Math.max(width, cluster.minimumWidth);\n        height = Math.max(height, cluster.minimumHeight);\n\n        const minX = coord.x - width * 0.5;\n        const minY = coord.y - height * 0.5;\n        const maxX = coord.x + width;\n        const maxY = coord.y + height;\n\n        neighbors = index.range(minX, minY, maxX, maxY);\n        neighborLength = neighbors.length;\n        numPoints = 0;\n        ids = [];\n\n        for (j = 0; j < neighborLength; ++j) {\n          neighborIndex = neighbors[j];\n          neighborPoint = points[neighborIndex];\n          if (!neighborPoint.clustered) {\n            ++numPoints;\n\n            collection = neighborPoint.collection;\n            collectionIndex = neighborPoint.index;\n            ids.push(collection.get(collectionIndex).id);\n          }\n        }\n\n        if (numPoints >= minimumClusterSize) {\n          addCluster(cluster.position, numPoints, ids, entityCluster);\n          newClusters.push(cluster);\n\n          for (j = 0; j < neighborLength; ++j) {\n            points[neighbors[j]].clustered = true;\n          }\n        }\n      }\n    }\n\n    length = points.length;\n    for (i = 0; i < length; ++i) {\n      const point = points[i];\n      if (point.clustered) {\n        continue;\n      }\n\n      point.clustered = true;\n\n      collection = point.collection;\n      collectionIndex = point.index;\n\n      const item = collection.get(collectionIndex);\n      bbox = getBoundingBox(\n        item,\n        point.coord,\n        pixelRange,\n        entityCluster,\n        pointBoundinRectangleScratch\n      );\n      const totalBBox = BoundingRectangle.clone(\n        bbox,\n        totalBoundingRectangleScratch\n      );\n\n      neighbors = index.range(\n        bbox.x,\n        bbox.y,\n        bbox.x + bbox.width,\n        bbox.y + bbox.height\n      );\n      neighborLength = neighbors.length;\n\n      const clusterPosition = Cartesian3.clone(item.position);\n      numPoints = 1;\n      ids = [item.id];\n\n      for (j = 0; j < neighborLength; ++j) {\n        neighborIndex = neighbors[j];\n        neighborPoint = points[neighborIndex];\n        if (!neighborPoint.clustered) {\n          const neighborItem = neighborPoint.collection.get(\n            neighborPoint.index\n          );\n          const neighborBBox = getBoundingBox(\n            neighborItem,\n            neighborPoint.coord,\n            pixelRange,\n            entityCluster,\n            neighborBoundingRectangleScratch\n          );\n\n          Cartesian3.add(\n            neighborItem.position,\n            clusterPosition,\n            clusterPosition\n          );\n\n          BoundingRectangle.union(totalBBox, neighborBBox, totalBBox);\n          ++numPoints;\n\n          ids.push(neighborItem.id);\n        }\n      }\n\n      if (numPoints >= minimumClusterSize) {\n        const position = Cartesian3.multiplyByScalar(\n          clusterPosition,\n          1.0 / numPoints,\n          clusterPosition\n        );\n        addCluster(position, numPoints, ids, entityCluster);\n        newClusters.push({\n          position: position,\n          width: totalBBox.width,\n          height: totalBBox.height,\n          minimumWidth: bbox.width,\n          minimumHeight: bbox.height,\n        });\n\n        for (j = 0; j < neighborLength; ++j) {\n          points[neighbors[j]].clustered = true;\n        }\n      } else {\n        addNonClusteredItem(item, entityCluster);\n      }\n    }\n\n    if (clusteredLabelCollection.length === 0) {\n      clusteredLabelCollection.destroy();\n      entityCluster._clusterLabelCollection = undefined;\n    }\n\n    if (clusteredBillboardCollection.length === 0) {\n      clusteredBillboardCollection.destroy();\n      entityCluster._clusterBillboardCollection = undefined;\n    }\n\n    if (clusteredPointCollection.length === 0) {\n      clusteredPointCollection.destroy();\n      entityCluster._clusterPointCollection = undefined;\n    }\n\n    entityCluster._previousClusters = newClusters;\n    entityCluster._previousHeight = currentHeight;\n  };\n}\n\nEntityCluster.prototype._initialize = function (scene) {\n  this._scene = scene;\n\n  const cluster = createDeclutterCallback(this);\n  this._cluster = cluster;\n  this._removeEventListener = scene.camera.changed.addEventListener(cluster);\n};\n\nObject.defineProperties(EntityCluster.prototype, {\n  /**\n   * Gets or sets whether clustering is enabled.\n   * @memberof EntityCluster.prototype\n   * @type {Boolean}\n   */\n  enabled: {\n    get: function () {\n      return this._enabled;\n    },\n    set: function (value) {\n      this._enabledDirty = value !== this._enabled;\n      this._enabled = value;\n    },\n  },\n  /**\n   * Gets or sets the pixel range to extend the screen space bounding box.\n   * @memberof EntityCluster.prototype\n   * @type {Number}\n   */\n  pixelRange: {\n    get: function () {\n      return this._pixelRange;\n    },\n    set: function (value) {\n      this._clusterDirty = this._clusterDirty || value !== this._pixelRange;\n      this._pixelRange = value;\n    },\n  },\n  /**\n   * Gets or sets the minimum number of screen space objects that can be clustered.\n   * @memberof EntityCluster.prototype\n   * @type {Number}\n   */\n  minimumClusterSize: {\n    get: function () {\n      return this._minimumClusterSize;\n    },\n    set: function (value) {\n      this._clusterDirty =\n        this._clusterDirty || value !== this._minimumClusterSize;\n      this._minimumClusterSize = value;\n    },\n  },\n  /**\n   * Gets the event that will be raised when a new cluster will be displayed. The signature of the event listener is {@link EntityCluster.newClusterCallback}.\n   * @memberof EntityCluster.prototype\n   * @type {Event<EntityCluster.newClusterCallback>}\n   */\n  clusterEvent: {\n    get: function () {\n      return this._clusterEvent;\n    },\n  },\n  /**\n   * Gets or sets whether clustering billboard entities is enabled.\n   * @memberof EntityCluster.prototype\n   * @type {Boolean}\n   */\n  clusterBillboards: {\n    get: function () {\n      return this._clusterBillboards;\n    },\n    set: function (value) {\n      this._clusterDirty =\n        this._clusterDirty || value !== this._clusterBillboards;\n      this._clusterBillboards = value;\n    },\n  },\n  /**\n   * Gets or sets whether clustering labels entities is enabled.\n   * @memberof EntityCluster.prototype\n   * @type {Boolean}\n   */\n  clusterLabels: {\n    get: function () {\n      return this._clusterLabels;\n    },\n    set: function (value) {\n      this._clusterDirty = this._clusterDirty || value !== this._clusterLabels;\n      this._clusterLabels = value;\n    },\n  },\n  /**\n   * Gets or sets whether clustering point entities is enabled.\n   * @memberof EntityCluster.prototype\n   * @type {Boolean}\n   */\n  clusterPoints: {\n    get: function () {\n      return this._clusterPoints;\n    },\n    set: function (value) {\n      this._clusterDirty = this._clusterDirty || value !== this._clusterPoints;\n      this._clusterPoints = value;\n    },\n  },\n});\n\nfunction createGetEntity(\n  collectionProperty,\n  CollectionConstructor,\n  unusedIndicesProperty,\n  entityIndexProperty\n) {\n  return function (entity) {\n    let collection = this[collectionProperty];\n\n    if (!defined(this._collectionIndicesByEntity)) {\n      this._collectionIndicesByEntity = {};\n    }\n\n    let entityIndices = this._collectionIndicesByEntity[entity.id];\n\n    if (!defined(entityIndices)) {\n      entityIndices = this._collectionIndicesByEntity[entity.id] = {\n        billboardIndex: undefined,\n        labelIndex: undefined,\n        pointIndex: undefined,\n      };\n    }\n\n    if (defined(collection) && defined(entityIndices[entityIndexProperty])) {\n      return collection.get(entityIndices[entityIndexProperty]);\n    }\n\n    if (!defined(collection)) {\n      collection = this[collectionProperty] = new CollectionConstructor({\n        scene: this._scene,\n      });\n    }\n\n    let index;\n    let entityItem;\n\n    const unusedIndices = this[unusedIndicesProperty];\n    if (unusedIndices.length > 0) {\n      index = unusedIndices.pop();\n      entityItem = collection.get(index);\n    } else {\n      entityItem = collection.add();\n      index = collection.length - 1;\n    }\n\n    entityIndices[entityIndexProperty] = index;\n\n    const that = this;\n    Promise.resolve().then(function () {\n      that._clusterDirty = true;\n    });\n\n    return entityItem;\n  };\n}\n\nfunction removeEntityIndicesIfUnused(entityCluster, entityId) {\n  const indices = entityCluster._collectionIndicesByEntity[entityId];\n\n  if (\n    !defined(indices.billboardIndex) &&\n    !defined(indices.labelIndex) &&\n    !defined(indices.pointIndex)\n  ) {\n    delete entityCluster._collectionIndicesByEntity[entityId];\n  }\n}\n\n/**\n * Returns a new {@link Label}.\n * @param {Entity} entity The entity that will use the returned {@link Label} for visualization.\n * @returns {Label} The label that will be used to visualize an entity.\n *\n * @private\n */\nEntityCluster.prototype.getLabel = createGetEntity(\n  \"_labelCollection\",\n  LabelCollection,\n  \"_unusedLabelIndices\",\n  \"labelIndex\"\n);\n\n/**\n * Removes the {@link Label} associated with an entity so it can be reused by another entity.\n * @param {Entity} entity The entity that will uses the returned {@link Label} for visualization.\n *\n * @private\n */\nEntityCluster.prototype.removeLabel = function (entity) {\n  const entityIndices =\n    this._collectionIndicesByEntity &&\n    this._collectionIndicesByEntity[entity.id];\n  if (\n    !defined(this._labelCollection) ||\n    !defined(entityIndices) ||\n    !defined(entityIndices.labelIndex)\n  ) {\n    return;\n  }\n\n  const index = entityIndices.labelIndex;\n  entityIndices.labelIndex = undefined;\n  removeEntityIndicesIfUnused(this, entity.id);\n\n  const label = this._labelCollection.get(index);\n  label.show = false;\n  label.text = \"\";\n  label.id = undefined;\n\n  this._unusedLabelIndices.push(index);\n\n  this._clusterDirty = true;\n};\n\n/**\n * Returns a new {@link Billboard}.\n * @param {Entity} entity The entity that will use the returned {@link Billboard} for visualization.\n * @returns {Billboard} The label that will be used to visualize an entity.\n *\n * @private\n */\nEntityCluster.prototype.getBillboard = createGetEntity(\n  \"_billboardCollection\",\n  BillboardCollection,\n  \"_unusedBillboardIndices\",\n  \"billboardIndex\"\n);\n\n/**\n * Removes the {@link Billboard} associated with an entity so it can be reused by another entity.\n * @param {Entity} entity The entity that will uses the returned {@link Billboard} for visualization.\n *\n * @private\n */\nEntityCluster.prototype.removeBillboard = function (entity) {\n  const entityIndices =\n    this._collectionIndicesByEntity &&\n    this._collectionIndicesByEntity[entity.id];\n  if (\n    !defined(this._billboardCollection) ||\n    !defined(entityIndices) ||\n    !defined(entityIndices.billboardIndex)\n  ) {\n    return;\n  }\n\n  const index = entityIndices.billboardIndex;\n  entityIndices.billboardIndex = undefined;\n  removeEntityIndicesIfUnused(this, entity.id);\n\n  const billboard = this._billboardCollection.get(index);\n  billboard.id = undefined;\n  billboard.show = false;\n  billboard.image = undefined;\n\n  this._unusedBillboardIndices.push(index);\n\n  this._clusterDirty = true;\n};\n\n/**\n * Returns a new {@link Point}.\n * @param {Entity} entity The entity that will use the returned {@link Point} for visualization.\n * @returns {Point} The label that will be used to visualize an entity.\n *\n * @private\n */\nEntityCluster.prototype.getPoint = createGetEntity(\n  \"_pointCollection\",\n  PointPrimitiveCollection,\n  \"_unusedPointIndices\",\n  \"pointIndex\"\n);\n\n/**\n * Removes the {@link Point} associated with an entity so it can be reused by another entity.\n * @param {Entity} entity The entity that will uses the returned {@link Point} for visualization.\n *\n * @private\n */\nEntityCluster.prototype.removePoint = function (entity) {\n  const entityIndices =\n    this._collectionIndicesByEntity &&\n    this._collectionIndicesByEntity[entity.id];\n  if (\n    !defined(this._pointCollection) ||\n    !defined(entityIndices) ||\n    !defined(entityIndices.pointIndex)\n  ) {\n    return;\n  }\n\n  const index = entityIndices.pointIndex;\n  entityIndices.pointIndex = undefined;\n  removeEntityIndicesIfUnused(this, entity.id);\n\n  const point = this._pointCollection.get(index);\n  point.show = false;\n  point.id = undefined;\n\n  this._unusedPointIndices.push(index);\n\n  this._clusterDirty = true;\n};\n\nfunction disableCollectionClustering(collection) {\n  if (!defined(collection)) {\n    return;\n  }\n\n  const length = collection.length;\n  for (let i = 0; i < length; ++i) {\n    collection.get(i).clusterShow = true;\n  }\n}\n\nfunction updateEnable(entityCluster) {\n  if (entityCluster.enabled) {\n    return;\n  }\n\n  if (defined(entityCluster._clusterLabelCollection)) {\n    entityCluster._clusterLabelCollection.destroy();\n  }\n  if (defined(entityCluster._clusterBillboardCollection)) {\n    entityCluster._clusterBillboardCollection.destroy();\n  }\n  if (defined(entityCluster._clusterPointCollection)) {\n    entityCluster._clusterPointCollection.destroy();\n  }\n\n  entityCluster._clusterLabelCollection = undefined;\n  entityCluster._clusterBillboardCollection = undefined;\n  entityCluster._clusterPointCollection = undefined;\n\n  disableCollectionClustering(entityCluster._labelCollection);\n  disableCollectionClustering(entityCluster._billboardCollection);\n  disableCollectionClustering(entityCluster._pointCollection);\n}\n\n/**\n * Gets the draw commands for the clustered billboards/points/labels if enabled, otherwise,\n * queues the draw commands for billboards/points/labels created for entities.\n * @private\n */\nEntityCluster.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  // If clustering is enabled before the label collection is updated,\n  // the glyphs haven't been created so the screen space bounding boxes\n  // are incorrect.\n  let commandList;\n  if (\n    defined(this._labelCollection) &&\n    this._labelCollection.length > 0 &&\n    this._labelCollection.get(0)._glyphs.length === 0\n  ) {\n    commandList = frameState.commandList;\n    frameState.commandList = [];\n    this._labelCollection.update(frameState);\n    frameState.commandList = commandList;\n  }\n\n  // If clustering is enabled before the billboard collection is updated,\n  // the images haven't been added to the image atlas so the screen space bounding boxes\n  // are incorrect.\n  if (\n    defined(this._billboardCollection) &&\n    this._billboardCollection.length > 0 &&\n    !defined(this._billboardCollection.get(0).width)\n  ) {\n    commandList = frameState.commandList;\n    frameState.commandList = [];\n    this._billboardCollection.update(frameState);\n    frameState.commandList = commandList;\n  }\n\n  if (this._enabledDirty) {\n    this._enabledDirty = false;\n    updateEnable(this);\n    this._clusterDirty = true;\n  }\n\n  if (this._clusterDirty) {\n    this._clusterDirty = false;\n    this._cluster();\n  }\n\n  if (defined(this._clusterLabelCollection)) {\n    this._clusterLabelCollection.update(frameState);\n  }\n  if (defined(this._clusterBillboardCollection)) {\n    this._clusterBillboardCollection.update(frameState);\n  }\n  if (defined(this._clusterPointCollection)) {\n    this._clusterPointCollection.update(frameState);\n  }\n\n  if (defined(this._labelCollection)) {\n    this._labelCollection.update(frameState);\n  }\n  if (defined(this._billboardCollection)) {\n    this._billboardCollection.update(frameState);\n  }\n  if (defined(this._pointCollection)) {\n    this._pointCollection.update(frameState);\n  }\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <p>\n * Unlike other objects that use WebGL resources, this object can be reused. For example, if a data source is removed\n * from a data source collection and added to another.\n * </p>\n */\nEntityCluster.prototype.destroy = function () {\n  this._labelCollection =\n    this._labelCollection && this._labelCollection.destroy();\n  this._billboardCollection =\n    this._billboardCollection && this._billboardCollection.destroy();\n  this._pointCollection =\n    this._pointCollection && this._pointCollection.destroy();\n\n  this._clusterLabelCollection =\n    this._clusterLabelCollection && this._clusterLabelCollection.destroy();\n  this._clusterBillboardCollection =\n    this._clusterBillboardCollection &&\n    this._clusterBillboardCollection.destroy();\n  this._clusterPointCollection =\n    this._clusterPointCollection && this._clusterPointCollection.destroy();\n\n  if (defined(this._removeEventListener)) {\n    this._removeEventListener();\n    this._removeEventListener = undefined;\n  }\n\n  this._labelCollection = undefined;\n  this._billboardCollection = undefined;\n  this._pointCollection = undefined;\n\n  this._clusterBillboardCollection = undefined;\n  this._clusterLabelCollection = undefined;\n  this._clusterPointCollection = undefined;\n\n  this._collectionIndicesByEntity = undefined;\n\n  this._unusedLabelIndices = [];\n  this._unusedBillboardIndices = [];\n  this._unusedPointIndices = [];\n\n  this._previousClusters = [];\n  this._previousHeight = undefined;\n\n  this._enabledDirty = false;\n  this._pixelRangeDirty = false;\n  this._minimumClusterSizeDirty = false;\n\n  return undefined;\n};\n\n/**\n * A event listener function used to style clusters.\n * @callback EntityCluster.newClusterCallback\n *\n * @param {Entity[]} clusteredEntities An array of the entities contained in the cluster.\n * @param {Object} cluster An object containing the Billboard, Label, and Point\n * primitives that represent this cluster of entities.\n * @param {Billboard} cluster.billboard\n * @param {Label} cluster.label\n * @param {PointPrimitive} cluster.point\n *\n * @example\n * // The default cluster values.\n * dataSource.clustering.clusterEvent.addEventListener(function(entities, cluster) {\n *     cluster.label.show = true;\n *     cluster.label.text = entities.length.toLocaleString();\n * });\n */\nexport default EntityCluster;\n","import AssociativeArray from \"../Core/AssociativeArray.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport TimeInterval from \"../Core/TimeInterval.js\";\nimport Entity from \"./Entity.js\";\n\nconst entityOptionsScratch = {\n  id: undefined,\n};\n\nfunction fireChangedEvent(collection) {\n  if (collection._firing) {\n    collection._refire = true;\n    return;\n  }\n\n  if (collection._suspendCount === 0) {\n    const added = collection._addedEntities;\n    const removed = collection._removedEntities;\n    const changed = collection._changedEntities;\n    if (changed.length !== 0 || added.length !== 0 || removed.length !== 0) {\n      collection._firing = true;\n      do {\n        collection._refire = false;\n        const addedArray = added.values.slice(0);\n        const removedArray = removed.values.slice(0);\n        const changedArray = changed.values.slice(0);\n\n        added.removeAll();\n        removed.removeAll();\n        changed.removeAll();\n        collection._collectionChanged.raiseEvent(\n          collection,\n          addedArray,\n          removedArray,\n          changedArray\n        );\n      } while (collection._refire);\n      collection._firing = false;\n    }\n  }\n}\n\n/**\n * An observable collection of {@link Entity} instances where each entity has a unique id.\n * @alias EntityCollection\n * @constructor\n *\n * @param {DataSource|CompositeEntityCollection} [owner] The data source (or composite entity collection) which created this collection.\n */\nfunction EntityCollection(owner) {\n  this._owner = owner;\n  this._entities = new AssociativeArray();\n  this._addedEntities = new AssociativeArray();\n  this._removedEntities = new AssociativeArray();\n  this._changedEntities = new AssociativeArray();\n  this._suspendCount = 0;\n  this._collectionChanged = new Event();\n  this._id = createGuid();\n  this._show = true;\n  this._firing = false;\n  this._refire = false;\n}\n\n/**\n * Prevents {@link EntityCollection#collectionChanged} events from being raised\n * until a corresponding call is made to {@link EntityCollection#resumeEvents}, at which\n * point a single event will be raised that covers all suspended operations.\n * This allows for many items to be added and removed efficiently.\n * This function can be safely called multiple times as long as there\n * are corresponding calls to {@link EntityCollection#resumeEvents}.\n */\nEntityCollection.prototype.suspendEvents = function () {\n  this._suspendCount++;\n};\n\n/**\n * Resumes raising {@link EntityCollection#collectionChanged} events immediately\n * when an item is added or removed.  Any modifications made while while events were suspended\n * will be triggered as a single event when this function is called.\n * This function is reference counted and can safely be called multiple times as long as there\n * are corresponding calls to {@link EntityCollection#resumeEvents}.\n *\n * @exception {DeveloperError} resumeEvents can not be called before suspendEvents.\n */\nEntityCollection.prototype.resumeEvents = function () {\n  //>>includeStart('debug', pragmas.debug);\n  if (this._suspendCount === 0) {\n    throw new DeveloperError(\n      \"resumeEvents can not be called before suspendEvents.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  this._suspendCount--;\n  fireChangedEvent(this);\n};\n\n/**\n * The signature of the event generated by {@link EntityCollection#collectionChanged}.\n * @callback EntityCollection.CollectionChangedEventCallback\n *\n * @param {EntityCollection} collection The collection that triggered the event.\n * @param {Entity[]} added The array of {@link Entity} instances that have been added to the collection.\n * @param {Entity[]} removed The array of {@link Entity} instances that have been removed from the collection.\n * @param {Entity[]} changed The array of {@link Entity} instances that have been modified.\n */\n\nObject.defineProperties(EntityCollection.prototype, {\n  /**\n   * Gets the event that is fired when entities are added or removed from the collection.\n   * The generated event is a {@link EntityCollection.CollectionChangedEventCallback}.\n   * @memberof EntityCollection.prototype\n   * @readonly\n   * @type {Event<EntityCollection.CollectionChangedEventCallback>}\n   */\n  collectionChanged: {\n    get: function () {\n      return this._collectionChanged;\n    },\n  },\n  /**\n   * Gets a globally unique identifier for this collection.\n   * @memberof EntityCollection.prototype\n   * @readonly\n   * @type {String}\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n  /**\n   * Gets the array of Entity instances in the collection.\n   * This array should not be modified directly.\n   * @memberof EntityCollection.prototype\n   * @readonly\n   * @type {Entity[]}\n   */\n  values: {\n    get: function () {\n      return this._entities.values;\n    },\n  },\n  /**\n   * Gets whether or not this entity collection should be\n   * displayed.  When true, each entity is only displayed if\n   * its own show property is also true.\n   * @memberof EntityCollection.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value is required.\");\n      }\n      //>>includeEnd('debug');\n\n      if (value === this._show) {\n        return;\n      }\n\n      //Since entity.isShowing includes the EntityCollection.show state\n      //in its calculation, we need to loop over the entities array\n      //twice, once to get the old showing value and a second time\n      //to raise the changed event.\n      this.suspendEvents();\n\n      let i;\n      const oldShows = [];\n      const entities = this._entities.values;\n      const entitiesLength = entities.length;\n\n      for (i = 0; i < entitiesLength; i++) {\n        oldShows.push(entities[i].isShowing);\n      }\n\n      this._show = value;\n\n      for (i = 0; i < entitiesLength; i++) {\n        const oldShow = oldShows[i];\n        const entity = entities[i];\n        if (oldShow !== entity.isShowing) {\n          entity.definitionChanged.raiseEvent(\n            entity,\n            \"isShowing\",\n            entity.isShowing,\n            oldShow\n          );\n        }\n      }\n\n      this.resumeEvents();\n    },\n  },\n  /**\n   * Gets the owner of this entity collection, ie. the data source or composite entity collection which created it.\n   * @memberof EntityCollection.prototype\n   * @readonly\n   * @type {DataSource|CompositeEntityCollection}\n   */\n  owner: {\n    get: function () {\n      return this._owner;\n    },\n  },\n});\n\n/**\n * Computes the maximum availability of the entities in the collection.\n * If the collection contains a mix of infinitely available data and non-infinite data,\n * it will return the interval pertaining to the non-infinite data only.  If all\n * data is infinite, an infinite interval will be returned.\n *\n * @returns {TimeInterval} The availability of entities in the collection.\n */\nEntityCollection.prototype.computeAvailability = function () {\n  let startTime = Iso8601.MAXIMUM_VALUE;\n  let stopTime = Iso8601.MINIMUM_VALUE;\n  const entities = this._entities.values;\n  for (let i = 0, len = entities.length; i < len; i++) {\n    const entity = entities[i];\n    const availability = entity.availability;\n    if (defined(availability)) {\n      const start = availability.start;\n      const stop = availability.stop;\n      if (\n        JulianDate.lessThan(start, startTime) &&\n        !start.equals(Iso8601.MINIMUM_VALUE)\n      ) {\n        startTime = start;\n      }\n      if (\n        JulianDate.greaterThan(stop, stopTime) &&\n        !stop.equals(Iso8601.MAXIMUM_VALUE)\n      ) {\n        stopTime = stop;\n      }\n    }\n  }\n\n  if (Iso8601.MAXIMUM_VALUE.equals(startTime)) {\n    startTime = Iso8601.MINIMUM_VALUE;\n  }\n  if (Iso8601.MINIMUM_VALUE.equals(stopTime)) {\n    stopTime = Iso8601.MAXIMUM_VALUE;\n  }\n  return new TimeInterval({\n    start: startTime,\n    stop: stopTime,\n  });\n};\n\n/**\n * Add an entity to the collection.\n *\n * @param {Entity | Entity.ConstructorOptions} entity The entity to be added.\n * @returns {Entity} The entity that was added.\n * @exception {DeveloperError} An entity with <entity.id> already exists in this collection.\n */\nEntityCollection.prototype.add = function (entity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!(entity instanceof Entity)) {\n    entity = new Entity(entity);\n  }\n\n  const id = entity.id;\n  const entities = this._entities;\n  if (entities.contains(id)) {\n    throw new RuntimeError(\n      `An entity with id ${id} already exists in this collection.`\n    );\n  }\n\n  entity.entityCollection = this;\n  entities.set(id, entity);\n\n  if (!this._removedEntities.remove(id)) {\n    this._addedEntities.set(id, entity);\n  }\n  entity.definitionChanged.addEventListener(\n    EntityCollection.prototype._onEntityDefinitionChanged,\n    this\n  );\n\n  fireChangedEvent(this);\n  return entity;\n};\n\n/**\n * Removes an entity from the collection.\n *\n * @param {Entity} entity The entity to be removed.\n * @returns {Boolean} true if the item was removed, false if it did not exist in the collection.\n */\nEntityCollection.prototype.remove = function (entity) {\n  if (!defined(entity)) {\n    return false;\n  }\n  return this.removeById(entity.id);\n};\n\n/**\n * Returns true if the provided entity is in this collection, false otherwise.\n *\n * @param {Entity} entity The entity.\n * @returns {Boolean} true if the provided entity is in this collection, false otherwise.\n */\nEntityCollection.prototype.contains = function (entity) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(entity)) {\n    throw new DeveloperError(\"entity is required\");\n  }\n  //>>includeEnd('debug');\n  return this._entities.get(entity.id) === entity;\n};\n\n/**\n * Removes an entity with the provided id from the collection.\n *\n * @param {String} id The id of the entity to remove.\n * @returns {Boolean} true if the item was removed, false if no item with the provided id existed in the collection.\n */\nEntityCollection.prototype.removeById = function (id) {\n  if (!defined(id)) {\n    return false;\n  }\n\n  const entities = this._entities;\n  const entity = entities.get(id);\n  if (!this._entities.remove(id)) {\n    return false;\n  }\n\n  if (!this._addedEntities.remove(id)) {\n    this._removedEntities.set(id, entity);\n    this._changedEntities.remove(id);\n  }\n  this._entities.remove(id);\n  entity.definitionChanged.removeEventListener(\n    EntityCollection.prototype._onEntityDefinitionChanged,\n    this\n  );\n  fireChangedEvent(this);\n\n  return true;\n};\n\n/**\n * Removes all Entities from the collection.\n */\nEntityCollection.prototype.removeAll = function () {\n  //The event should only contain items added before events were suspended\n  //and the contents of the collection.\n  const entities = this._entities;\n  const entitiesLength = entities.length;\n  const array = entities.values;\n\n  const addedEntities = this._addedEntities;\n  const removed = this._removedEntities;\n\n  for (let i = 0; i < entitiesLength; i++) {\n    const existingItem = array[i];\n    const existingItemId = existingItem.id;\n    const addedItem = addedEntities.get(existingItemId);\n    if (!defined(addedItem)) {\n      existingItem.definitionChanged.removeEventListener(\n        EntityCollection.prototype._onEntityDefinitionChanged,\n        this\n      );\n      removed.set(existingItemId, existingItem);\n    }\n  }\n\n  entities.removeAll();\n  addedEntities.removeAll();\n  this._changedEntities.removeAll();\n  fireChangedEvent(this);\n};\n\n/**\n * Gets an entity with the specified id.\n *\n * @param {String} id The id of the entity to retrieve.\n * @returns {Entity|undefined} The entity with the provided id or undefined if the id did not exist in the collection.\n */\nEntityCollection.prototype.getById = function (id) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return this._entities.get(id);\n};\n\n/**\n * Gets an entity with the specified id or creates it and adds it to the collection if it does not exist.\n *\n * @param {String} id The id of the entity to retrieve or create.\n * @returns {Entity} The new or existing object.\n */\nEntityCollection.prototype.getOrCreateEntity = function (id) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required.\");\n  }\n  //>>includeEnd('debug');\n\n  let entity = this._entities.get(id);\n  if (!defined(entity)) {\n    entityOptionsScratch.id = id;\n    entity = new Entity(entityOptionsScratch);\n    this.add(entity);\n  }\n  return entity;\n};\n\nEntityCollection.prototype._onEntityDefinitionChanged = function (entity) {\n  const id = entity.id;\n  if (!this._addedEntities.contains(id)) {\n    this._changedEntities.set(id, entity);\n  }\n  fireChangedEvent(this);\n};\nexport default EntityCollection;\n","import Cartesian3 from \"../Core/Cartesian3.js\";\nimport Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport HeadingPitchRange from \"../Core/HeadingPitchRange.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport SceneMode from \"../Scene/SceneMode.js\";\n\nconst updateTransformMatrix3Scratch1 = new Matrix3();\nconst updateTransformMatrix3Scratch2 = new Matrix3();\nconst updateTransformMatrix3Scratch3 = new Matrix3();\nconst updateTransformMatrix4Scratch = new Matrix4();\nconst updateTransformCartesian3Scratch1 = new Cartesian3();\nconst updateTransformCartesian3Scratch2 = new Cartesian3();\nconst updateTransformCartesian3Scratch3 = new Cartesian3();\nconst updateTransformCartesian3Scratch4 = new Cartesian3();\nconst updateTransformCartesian3Scratch5 = new Cartesian3();\nconst updateTransformCartesian3Scratch6 = new Cartesian3();\nconst deltaTime = new JulianDate();\nconst northUpAxisFactor = 1.25; // times ellipsoid's maximum radius\n\nfunction updateTransform(\n  that,\n  camera,\n  updateLookAt,\n  saveCamera,\n  positionProperty,\n  time,\n  ellipsoid\n) {\n  const mode = that.scene.mode;\n  let cartesian = positionProperty.getValue(time, that._lastCartesian);\n  if (defined(cartesian)) {\n    let hasBasis = false;\n    let invertVelocity = false;\n    let xBasis;\n    let yBasis;\n    let zBasis;\n\n    if (mode === SceneMode.SCENE3D) {\n      // The time delta was determined based on how fast satellites move compared to vehicles near the surface.\n      // Slower moving vehicles will most likely default to east-north-up, while faster ones will be VVLH.\n      JulianDate.addSeconds(time, 0.001, deltaTime);\n      let deltaCartesian = positionProperty.getValue(\n        deltaTime,\n        updateTransformCartesian3Scratch1\n      );\n\n      // If no valid position at (time + 0.001), sample at (time - 0.001) and invert the vector\n      if (!defined(deltaCartesian)) {\n        JulianDate.addSeconds(time, -0.001, deltaTime);\n        deltaCartesian = positionProperty.getValue(\n          deltaTime,\n          updateTransformCartesian3Scratch1\n        );\n        invertVelocity = true;\n      }\n\n      if (defined(deltaCartesian)) {\n        let toInertial = Transforms.computeFixedToIcrfMatrix(\n          time,\n          updateTransformMatrix3Scratch1\n        );\n        let toInertialDelta = Transforms.computeFixedToIcrfMatrix(\n          deltaTime,\n          updateTransformMatrix3Scratch2\n        );\n        let toFixed;\n\n        if (!defined(toInertial) || !defined(toInertialDelta)) {\n          toFixed = Transforms.computeTemeToPseudoFixedMatrix(\n            time,\n            updateTransformMatrix3Scratch3\n          );\n          toInertial = Matrix3.transpose(\n            toFixed,\n            updateTransformMatrix3Scratch1\n          );\n          toInertialDelta = Transforms.computeTemeToPseudoFixedMatrix(\n            deltaTime,\n            updateTransformMatrix3Scratch2\n          );\n          Matrix3.transpose(toInertialDelta, toInertialDelta);\n        } else {\n          toFixed = Matrix3.transpose(\n            toInertial,\n            updateTransformMatrix3Scratch3\n          );\n        }\n\n        const inertialCartesian = Matrix3.multiplyByVector(\n          toInertial,\n          cartesian,\n          updateTransformCartesian3Scratch5\n        );\n        const inertialDeltaCartesian = Matrix3.multiplyByVector(\n          toInertialDelta,\n          deltaCartesian,\n          updateTransformCartesian3Scratch6\n        );\n\n        Cartesian3.subtract(\n          inertialCartesian,\n          inertialDeltaCartesian,\n          updateTransformCartesian3Scratch4\n        );\n        const inertialVelocity =\n          Cartesian3.magnitude(updateTransformCartesian3Scratch4) * 1000.0; // meters/sec\n\n        const mu = CesiumMath.GRAVITATIONALPARAMETER; // m^3 / sec^2\n        const semiMajorAxis =\n          -mu /\n          (inertialVelocity * inertialVelocity -\n            (2 * mu) / Cartesian3.magnitude(inertialCartesian));\n\n        if (\n          semiMajorAxis < 0 ||\n          semiMajorAxis > northUpAxisFactor * ellipsoid.maximumRadius\n        ) {\n          // North-up viewing from deep space.\n\n          // X along the nadir\n          xBasis = updateTransformCartesian3Scratch2;\n          Cartesian3.normalize(cartesian, xBasis);\n          Cartesian3.negate(xBasis, xBasis);\n\n          // Z is North\n          zBasis = Cartesian3.clone(\n            Cartesian3.UNIT_Z,\n            updateTransformCartesian3Scratch3\n          );\n\n          // Y is along the cross of z and x (right handed basis / in the direction of motion)\n          yBasis = Cartesian3.cross(\n            zBasis,\n            xBasis,\n            updateTransformCartesian3Scratch1\n          );\n          if (Cartesian3.magnitude(yBasis) > CesiumMath.EPSILON7) {\n            Cartesian3.normalize(xBasis, xBasis);\n            Cartesian3.normalize(yBasis, yBasis);\n\n            zBasis = Cartesian3.cross(\n              xBasis,\n              yBasis,\n              updateTransformCartesian3Scratch3\n            );\n            Cartesian3.normalize(zBasis, zBasis);\n\n            hasBasis = true;\n          }\n        } else if (\n          !Cartesian3.equalsEpsilon(\n            cartesian,\n            deltaCartesian,\n            CesiumMath.EPSILON7\n          )\n        ) {\n          // Approximation of VVLH (Vehicle Velocity Local Horizontal) with the Z-axis flipped.\n\n          // Z along the position\n          zBasis = updateTransformCartesian3Scratch2;\n          Cartesian3.normalize(inertialCartesian, zBasis);\n          Cartesian3.normalize(inertialDeltaCartesian, inertialDeltaCartesian);\n\n          // Y is along the angular momentum vector (e.g. \"orbit normal\")\n          yBasis = Cartesian3.cross(\n            zBasis,\n            inertialDeltaCartesian,\n            updateTransformCartesian3Scratch3\n          );\n\n          if (invertVelocity) {\n            yBasis = Cartesian3.multiplyByScalar(yBasis, -1, yBasis);\n          }\n\n          if (\n            !Cartesian3.equalsEpsilon(\n              yBasis,\n              Cartesian3.ZERO,\n              CesiumMath.EPSILON7\n            )\n          ) {\n            // X is along the cross of y and z (right handed basis / in the direction of motion)\n            xBasis = Cartesian3.cross(\n              yBasis,\n              zBasis,\n              updateTransformCartesian3Scratch1\n            );\n\n            Matrix3.multiplyByVector(toFixed, xBasis, xBasis);\n            Matrix3.multiplyByVector(toFixed, yBasis, yBasis);\n            Matrix3.multiplyByVector(toFixed, zBasis, zBasis);\n\n            Cartesian3.normalize(xBasis, xBasis);\n            Cartesian3.normalize(yBasis, yBasis);\n            Cartesian3.normalize(zBasis, zBasis);\n\n            hasBasis = true;\n          }\n        }\n      }\n    }\n\n    if (defined(that.boundingSphere)) {\n      cartesian = that.boundingSphere.center;\n    }\n\n    let position;\n    let direction;\n    let up;\n\n    if (saveCamera) {\n      position = Cartesian3.clone(\n        camera.position,\n        updateTransformCartesian3Scratch4\n      );\n      direction = Cartesian3.clone(\n        camera.direction,\n        updateTransformCartesian3Scratch5\n      );\n      up = Cartesian3.clone(camera.up, updateTransformCartesian3Scratch6);\n    }\n\n    const transform = updateTransformMatrix4Scratch;\n    if (hasBasis) {\n      transform[0] = xBasis.x;\n      transform[1] = xBasis.y;\n      transform[2] = xBasis.z;\n      transform[3] = 0.0;\n      transform[4] = yBasis.x;\n      transform[5] = yBasis.y;\n      transform[6] = yBasis.z;\n      transform[7] = 0.0;\n      transform[8] = zBasis.x;\n      transform[9] = zBasis.y;\n      transform[10] = zBasis.z;\n      transform[11] = 0.0;\n      transform[12] = cartesian.x;\n      transform[13] = cartesian.y;\n      transform[14] = cartesian.z;\n      transform[15] = 0.0;\n    } else {\n      // Stationary or slow-moving, low-altitude objects use East-North-Up.\n      Transforms.eastNorthUpToFixedFrame(cartesian, ellipsoid, transform);\n    }\n\n    camera._setTransform(transform);\n\n    if (saveCamera) {\n      Cartesian3.clone(position, camera.position);\n      Cartesian3.clone(direction, camera.direction);\n      Cartesian3.clone(up, camera.up);\n      Cartesian3.cross(direction, up, camera.right);\n    }\n  }\n\n  if (updateLookAt) {\n    const offset =\n      mode === SceneMode.SCENE2D ||\n      Cartesian3.equals(that._offset3D, Cartesian3.ZERO)\n        ? undefined\n        : that._offset3D;\n    camera.lookAtTransform(camera.transform, offset);\n  }\n}\n\n/**\n * A utility object for tracking an entity with the camera.\n * @alias EntityView\n * @constructor\n *\n * @param {Entity} entity The entity to track with the camera.\n * @param {Scene} scene The scene to use.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid to use for orienting the camera.\n */\nfunction EntityView(entity, scene, ellipsoid) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"entity\", entity);\n  Check.defined(\"scene\", scene);\n  //>>includeEnd('debug');\n\n  /**\n   * The entity to track with the camera.\n   * @type {Entity}\n   */\n  this.entity = entity;\n\n  /**\n   * The scene in which to track the object.\n   * @type {Scene}\n   */\n  this.scene = scene;\n\n  /**\n   * The ellipsoid to use for orienting the camera.\n   * @type {Ellipsoid}\n   */\n  this.ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n\n  /**\n   * The bounding sphere of the object.\n   * @type {BoundingSphere}\n   */\n  this.boundingSphere = undefined;\n\n  // Shadow copies of the objects so we can detect changes.\n  this._lastEntity = undefined;\n  this._mode = undefined;\n\n  this._lastCartesian = new Cartesian3();\n  this._defaultOffset3D = undefined;\n\n  this._offset3D = new Cartesian3();\n}\n\n// STATIC properties defined here, not per-instance.\nObject.defineProperties(EntityView, {\n  /**\n   * Gets or sets a camera offset that will be used to\n   * initialize subsequent EntityViews.\n   * @memberof EntityView\n   * @type {Cartesian3}\n   */\n  defaultOffset3D: {\n    get: function () {\n      return this._defaultOffset3D;\n    },\n    set: function (vector) {\n      this._defaultOffset3D = Cartesian3.clone(vector, new Cartesian3());\n    },\n  },\n});\n\n// Initialize the static property.\nEntityView.defaultOffset3D = new Cartesian3(-14000, 3500, 3500);\n\nconst scratchHeadingPitchRange = new HeadingPitchRange();\nconst scratchCartesian = new Cartesian3();\n\n/**\n * Should be called each animation frame to update the camera\n * to the latest settings.\n * @param {JulianDate} time The current animation time.\n * @param {BoundingSphere} [boundingSphere] bounding sphere of the object.\n */\nEntityView.prototype.update = function (time, boundingSphere) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"time\", time);\n  //>>includeEnd('debug');\n\n  const scene = this.scene;\n  const ellipsoid = this.ellipsoid;\n  const sceneMode = scene.mode;\n  if (sceneMode === SceneMode.MORPHING) {\n    return;\n  }\n\n  const entity = this.entity;\n  const positionProperty = entity.position;\n  if (!defined(positionProperty)) {\n    return;\n  }\n  const objectChanged = entity !== this._lastEntity;\n  const sceneModeChanged = sceneMode !== this._mode;\n\n  const camera = scene.camera;\n\n  let updateLookAt = objectChanged || sceneModeChanged;\n  let saveCamera = true;\n\n  if (objectChanged) {\n    const viewFromProperty = entity.viewFrom;\n    const hasViewFrom = defined(viewFromProperty);\n\n    if (!hasViewFrom && defined(boundingSphere)) {\n      // The default HPR is not ideal for high altitude objects so\n      // we scale the pitch as we get further from the earth for a more\n      // downward view.\n      scratchHeadingPitchRange.pitch = -CesiumMath.PI_OVER_FOUR;\n      scratchHeadingPitchRange.range = 0;\n      const position = positionProperty.getValue(time, scratchCartesian);\n      if (defined(position)) {\n        const factor =\n          2 -\n          1 /\n            Math.max(\n              1,\n              Cartesian3.magnitude(position) / ellipsoid.maximumRadius\n            );\n        scratchHeadingPitchRange.pitch *= factor;\n      }\n\n      camera.viewBoundingSphere(boundingSphere, scratchHeadingPitchRange);\n      this.boundingSphere = boundingSphere;\n      updateLookAt = false;\n      saveCamera = false;\n    } else if (\n      !hasViewFrom ||\n      !defined(viewFromProperty.getValue(time, this._offset3D))\n    ) {\n      Cartesian3.clone(EntityView._defaultOffset3D, this._offset3D);\n    }\n  } else if (!sceneModeChanged && this._mode !== SceneMode.SCENE2D) {\n    Cartesian3.clone(camera.position, this._offset3D);\n  }\n\n  this._lastEntity = entity;\n  this._mode = sceneMode;\n\n  updateTransform(\n    this,\n    camera,\n    updateLookAt,\n    saveCamera,\n    positionProperty,\n    time,\n    ellipsoid\n  );\n};\nexport default EntityView;\n","import ArcType from \"../Core/ArcType.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport getFilenameFromUri from \"../Core/getFilenameFromUri.js\";\nimport PinBuilder from \"../Core/PinBuilder.js\";\nimport PolygonHierarchy from \"../Core/PolygonHierarchy.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport VerticalOrigin from \"../Scene/VerticalOrigin.js\";\nimport topojson from \"../ThirdParty/topojson.js\";\nimport BillboardGraphics from \"./BillboardGraphics.js\";\nimport CallbackProperty from \"./CallbackProperty.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport ConstantPositionProperty from \"./ConstantPositionProperty.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport DataSource from \"./DataSource.js\";\nimport EntityCluster from \"./EntityCluster.js\";\nimport EntityCollection from \"./EntityCollection.js\";\nimport PolygonGraphics from \"./PolygonGraphics.js\";\nimport PolylineGraphics from \"./PolylineGraphics.js\";\n\nfunction defaultCrsFunction(coordinates) {\n  return Cartesian3.fromDegrees(coordinates[0], coordinates[1], coordinates[2]);\n}\n\nconst crsNames = {\n  \"urn:ogc:def:crs:OGC:1.3:CRS84\": defaultCrsFunction,\n  \"EPSG:4326\": defaultCrsFunction,\n  \"urn:ogc:def:crs:EPSG::4326\": defaultCrsFunction,\n};\n\nconst crsLinkHrefs = {};\nconst crsLinkTypes = {};\nlet defaultMarkerSize = 48;\nlet defaultMarkerSymbol;\nlet defaultMarkerColor = Color.ROYALBLUE;\nlet defaultStroke = Color.YELLOW;\nlet defaultStrokeWidth = 2;\nlet defaultFill = Color.fromBytes(255, 255, 0, 100);\nlet defaultClampToGround = false;\n\nconst sizes = {\n  small: 24,\n  medium: 48,\n  large: 64,\n};\n\nconst simpleStyleIdentifiers = [\n  \"title\",\n  \"description\", //\n  \"marker-size\",\n  \"marker-symbol\",\n  \"marker-color\",\n  \"stroke\", //\n  \"stroke-opacity\",\n  \"stroke-width\",\n  \"fill\",\n  \"fill-opacity\",\n];\n\nfunction defaultDescribe(properties, nameProperty) {\n  let html = \"\";\n  for (const key in properties) {\n    if (properties.hasOwnProperty(key)) {\n      if (key === nameProperty || simpleStyleIdentifiers.indexOf(key) !== -1) {\n        continue;\n      }\n      const value = properties[key];\n      if (defined(value)) {\n        if (typeof value === \"object\") {\n          html += `<tr><th>${key}</th><td>${defaultDescribe(value)}</td></tr>`;\n        } else {\n          html += `<tr><th>${key}</th><td>${value}</td></tr>`;\n        }\n      }\n    }\n  }\n\n  if (html.length > 0) {\n    html = `<table class=\"cesium-infoBox-defaultTable\"><tbody>${html}</tbody></table>`;\n  }\n\n  return html;\n}\n\nfunction createDescriptionCallback(describe, properties, nameProperty) {\n  let description;\n  return function (time, result) {\n    if (!defined(description)) {\n      description = describe(properties, nameProperty);\n    }\n    return description;\n  };\n}\n\nfunction defaultDescribeProperty(properties, nameProperty) {\n  return new CallbackProperty(\n    createDescriptionCallback(defaultDescribe, properties, nameProperty),\n    true\n  );\n}\n\n//GeoJSON specifies only the Feature object has a usable id property\n//But since \"multi\" geometries create multiple entity,\n//we can't use it for them either.\nfunction createObject(geoJson, entityCollection, describe) {\n  let id = geoJson.id;\n  if (!defined(id) || geoJson.type !== \"Feature\") {\n    id = createGuid();\n  } else {\n    let i = 2;\n    let finalId = id;\n    while (defined(entityCollection.getById(finalId))) {\n      finalId = `${id}_${i}`;\n      i++;\n    }\n    id = finalId;\n  }\n\n  const entity = entityCollection.getOrCreateEntity(id);\n  const properties = geoJson.properties;\n  if (defined(properties)) {\n    entity.properties = properties;\n\n    let nameProperty;\n\n    //Check for the simplestyle specified name first.\n    const name = properties.title;\n    if (defined(name)) {\n      entity.name = name;\n      nameProperty = \"title\";\n    } else {\n      //Else, find the name by selecting an appropriate property.\n      //The name will be obtained based on this order:\n      //1) The first case-insensitive property with the name 'title',\n      //2) The first case-insensitive property with the name 'name',\n      //3) The first property containing the word 'title'.\n      //4) The first property containing the word 'name',\n      let namePropertyPrecedence = Number.MAX_VALUE;\n      for (const key in properties) {\n        if (properties.hasOwnProperty(key) && properties[key]) {\n          const lowerKey = key.toLowerCase();\n\n          if (namePropertyPrecedence > 1 && lowerKey === \"title\") {\n            namePropertyPrecedence = 1;\n            nameProperty = key;\n            break;\n          } else if (namePropertyPrecedence > 2 && lowerKey === \"name\") {\n            namePropertyPrecedence = 2;\n            nameProperty = key;\n          } else if (namePropertyPrecedence > 3 && /title/i.test(key)) {\n            namePropertyPrecedence = 3;\n            nameProperty = key;\n          } else if (namePropertyPrecedence > 4 && /name/i.test(key)) {\n            namePropertyPrecedence = 4;\n            nameProperty = key;\n          }\n        }\n      }\n      if (defined(nameProperty)) {\n        entity.name = properties[nameProperty];\n      }\n    }\n\n    const description = properties.description;\n    if (description !== null) {\n      entity.description = !defined(description)\n        ? describe(properties, nameProperty)\n        : new ConstantProperty(description);\n    }\n  }\n  return entity;\n}\n\nfunction coordinatesArrayToCartesianArray(coordinates, crsFunction) {\n  const positions = new Array(coordinates.length);\n  for (let i = 0; i < coordinates.length; i++) {\n    positions[i] = crsFunction(coordinates[i]);\n  }\n  return positions;\n}\n\nconst geoJsonObjectTypes = {\n  Feature: processFeature,\n  FeatureCollection: processFeatureCollection,\n  GeometryCollection: processGeometryCollection,\n  LineString: processLineString,\n  MultiLineString: processMultiLineString,\n  MultiPoint: processMultiPoint,\n  MultiPolygon: processMultiPolygon,\n  Point: processPoint,\n  Polygon: processPolygon,\n  Topology: processTopology,\n};\n\nconst geometryTypes = {\n  GeometryCollection: processGeometryCollection,\n  LineString: processLineString,\n  MultiLineString: processMultiLineString,\n  MultiPoint: processMultiPoint,\n  MultiPolygon: processMultiPolygon,\n  Point: processPoint,\n  Polygon: processPolygon,\n  Topology: processTopology,\n};\n\n// GeoJSON processing functions\nfunction processFeature(dataSource, feature, notUsed, crsFunction, options) {\n  if (feature.geometry === null) {\n    //Null geometry is allowed, so just create an empty entity instance for it.\n    createObject(feature, dataSource._entityCollection, options.describe);\n    return;\n  }\n\n  if (!defined(feature.geometry)) {\n    throw new RuntimeError(\"feature.geometry is required.\");\n  }\n\n  const geometryType = feature.geometry.type;\n  const geometryHandler = geometryTypes[geometryType];\n  if (!defined(geometryHandler)) {\n    throw new RuntimeError(`Unknown geometry type: ${geometryType}`);\n  }\n  geometryHandler(dataSource, feature, feature.geometry, crsFunction, options);\n}\n\nfunction processFeatureCollection(\n  dataSource,\n  featureCollection,\n  notUsed,\n  crsFunction,\n  options\n) {\n  const features = featureCollection.features;\n  for (let i = 0, len = features.length; i < len; i++) {\n    processFeature(dataSource, features[i], undefined, crsFunction, options);\n  }\n}\n\nfunction processGeometryCollection(\n  dataSource,\n  geoJson,\n  geometryCollection,\n  crsFunction,\n  options\n) {\n  const geometries = geometryCollection.geometries;\n  for (let i = 0, len = geometries.length; i < len; i++) {\n    const geometry = geometries[i];\n    const geometryType = geometry.type;\n    const geometryHandler = geometryTypes[geometryType];\n    if (!defined(geometryHandler)) {\n      throw new RuntimeError(`Unknown geometry type: ${geometryType}`);\n    }\n    geometryHandler(dataSource, geoJson, geometry, crsFunction, options);\n  }\n}\n\nfunction createPoint(dataSource, geoJson, crsFunction, coordinates, options) {\n  let symbol = options.markerSymbol;\n  let color = options.markerColor;\n  let size = options.markerSize;\n\n  const properties = geoJson.properties;\n  if (defined(properties)) {\n    const cssColor = properties[\"marker-color\"];\n    if (defined(cssColor)) {\n      color = Color.fromCssColorString(cssColor);\n    }\n\n    size = defaultValue(sizes[properties[\"marker-size\"]], size);\n    const markerSymbol = properties[\"marker-symbol\"];\n    if (defined(markerSymbol)) {\n      symbol = markerSymbol;\n    }\n  }\n\n  let canvasOrPromise;\n  if (defined(symbol)) {\n    if (symbol.length === 1) {\n      canvasOrPromise = dataSource._pinBuilder.fromText(\n        symbol.toUpperCase(),\n        color,\n        size\n      );\n    } else {\n      canvasOrPromise = dataSource._pinBuilder.fromMakiIconId(\n        symbol,\n        color,\n        size\n      );\n    }\n  } else {\n    canvasOrPromise = dataSource._pinBuilder.fromColor(color, size);\n  }\n\n  const billboard = new BillboardGraphics();\n  billboard.verticalOrigin = new ConstantProperty(VerticalOrigin.BOTTOM);\n\n  // Clamp to ground if there isn't a height specified\n  if (coordinates.length === 2 && options.clampToGround) {\n    billboard.heightReference = HeightReference.CLAMP_TO_GROUND;\n  }\n\n  const entity = createObject(\n    geoJson,\n    dataSource._entityCollection,\n    options.describe\n  );\n  entity.billboard = billboard;\n  entity.position = new ConstantPositionProperty(crsFunction(coordinates));\n\n  const promise = Promise.resolve(canvasOrPromise)\n    .then(function (image) {\n      billboard.image = new ConstantProperty(image);\n    })\n    .catch(function () {\n      billboard.image = new ConstantProperty(\n        dataSource._pinBuilder.fromColor(color, size)\n      );\n    });\n\n  dataSource._promises.push(promise);\n}\n\nfunction processPoint(dataSource, geoJson, geometry, crsFunction, options) {\n  createPoint(dataSource, geoJson, crsFunction, geometry.coordinates, options);\n}\n\nfunction processMultiPoint(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  const coordinates = geometry.coordinates;\n  for (let i = 0; i < coordinates.length; i++) {\n    createPoint(dataSource, geoJson, crsFunction, coordinates[i], options);\n  }\n}\n\nfunction createLineString(\n  dataSource,\n  geoJson,\n  crsFunction,\n  coordinates,\n  options\n) {\n  let material = options.strokeMaterialProperty;\n  let widthProperty = options.strokeWidthProperty;\n\n  const properties = geoJson.properties;\n  if (defined(properties)) {\n    const width = properties[\"stroke-width\"];\n    if (defined(width)) {\n      widthProperty = new ConstantProperty(width);\n    }\n\n    let color;\n    const stroke = properties.stroke;\n    if (defined(stroke)) {\n      color = Color.fromCssColorString(stroke);\n    }\n    const opacity = properties[\"stroke-opacity\"];\n    if (defined(opacity) && opacity !== 1.0) {\n      if (!defined(color)) {\n        color = material.color.getValue().clone();\n      }\n      color.alpha = opacity;\n    }\n    if (defined(color)) {\n      material = new ColorMaterialProperty(color);\n    }\n  }\n\n  const entity = createObject(\n    geoJson,\n    dataSource._entityCollection,\n    options.describe\n  );\n  const polylineGraphics = new PolylineGraphics();\n  entity.polyline = polylineGraphics;\n\n  polylineGraphics.clampToGround = options.clampToGround;\n  polylineGraphics.material = material;\n  polylineGraphics.width = widthProperty;\n  polylineGraphics.positions = new ConstantProperty(\n    coordinatesArrayToCartesianArray(coordinates, crsFunction)\n  );\n  polylineGraphics.arcType = ArcType.RHUMB;\n}\n\nfunction processLineString(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  createLineString(\n    dataSource,\n    geoJson,\n    crsFunction,\n    geometry.coordinates,\n    options\n  );\n}\n\nfunction processMultiLineString(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  const lineStrings = geometry.coordinates;\n  for (let i = 0; i < lineStrings.length; i++) {\n    createLineString(dataSource, geoJson, crsFunction, lineStrings[i], options);\n  }\n}\n\nfunction createPolygon(dataSource, geoJson, crsFunction, coordinates, options) {\n  if (coordinates.length === 0 || coordinates[0].length === 0) {\n    return;\n  }\n\n  let outlineColorProperty = options.strokeMaterialProperty.color;\n  let material = options.fillMaterialProperty;\n  let widthProperty = options.strokeWidthProperty;\n\n  const properties = geoJson.properties;\n  if (defined(properties)) {\n    const width = properties[\"stroke-width\"];\n    if (defined(width)) {\n      widthProperty = new ConstantProperty(width);\n    }\n\n    let color;\n    const stroke = properties.stroke;\n    if (defined(stroke)) {\n      color = Color.fromCssColorString(stroke);\n    }\n    let opacity = properties[\"stroke-opacity\"];\n    if (defined(opacity) && opacity !== 1.0) {\n      if (!defined(color)) {\n        color = outlineColorProperty.getValue().clone();\n      }\n      color.alpha = opacity;\n    }\n\n    if (defined(color)) {\n      outlineColorProperty = new ConstantProperty(color);\n    }\n\n    let fillColor;\n    const fill = properties.fill;\n    const materialColor = material.color.getValue();\n    if (defined(fill)) {\n      fillColor = Color.fromCssColorString(fill);\n      fillColor.alpha = materialColor.alpha;\n    }\n    opacity = properties[\"fill-opacity\"];\n    if (defined(opacity) && opacity !== materialColor.alpha) {\n      if (!defined(fillColor)) {\n        fillColor = materialColor.clone();\n      }\n      fillColor.alpha = opacity;\n    }\n    if (defined(fillColor)) {\n      material = new ColorMaterialProperty(fillColor);\n    }\n  }\n\n  const polygon = new PolygonGraphics();\n  polygon.outline = new ConstantProperty(true);\n  polygon.outlineColor = outlineColorProperty;\n  polygon.outlineWidth = widthProperty;\n  polygon.material = material;\n  polygon.arcType = ArcType.RHUMB;\n\n  const holes = [];\n  for (let i = 1, len = coordinates.length; i < len; i++) {\n    holes.push(\n      new PolygonHierarchy(\n        coordinatesArrayToCartesianArray(coordinates[i], crsFunction)\n      )\n    );\n  }\n\n  const positions = coordinates[0];\n  polygon.hierarchy = new ConstantProperty(\n    new PolygonHierarchy(\n      coordinatesArrayToCartesianArray(positions, crsFunction),\n      holes\n    )\n  );\n  if (positions[0].length > 2) {\n    polygon.perPositionHeight = new ConstantProperty(true);\n  } else if (!options.clampToGround) {\n    polygon.height = 0;\n  }\n\n  const entity = createObject(\n    geoJson,\n    dataSource._entityCollection,\n    options.describe\n  );\n  entity.polygon = polygon;\n}\n\nfunction processPolygon(dataSource, geoJson, geometry, crsFunction, options) {\n  createPolygon(\n    dataSource,\n    geoJson,\n    crsFunction,\n    geometry.coordinates,\n    options\n  );\n}\n\nfunction processMultiPolygon(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  const polygons = geometry.coordinates;\n  for (let i = 0; i < polygons.length; i++) {\n    createPolygon(dataSource, geoJson, crsFunction, polygons[i], options);\n  }\n}\n\nfunction processTopology(dataSource, geoJson, geometry, crsFunction, options) {\n  for (const property in geometry.objects) {\n    if (geometry.objects.hasOwnProperty(property)) {\n      const feature = topojson.feature(geometry, geometry.objects[property]);\n      const typeHandler = geoJsonObjectTypes[feature.type];\n      typeHandler(dataSource, feature, feature, crsFunction, options);\n    }\n  }\n}\n\n/**\n * @typedef {Object} GeoJsonDataSource.LoadOptions\n *\n * Initialization options for the <code>load</code> method.\n *\n * @property {String} [sourceUri] Overrides the url to use for resolving relative links.\n * @property {GeoJsonDataSource.describe} [describe=GeoJsonDataSource.defaultDescribeProperty] A function which returns a Property object (or just a string).\n * @property {Number} [markerSize=GeoJsonDataSource.markerSize] The default size of the map pin created for each point, in pixels.\n * @property {String} [markerSymbol=GeoJsonDataSource.markerSymbol] The default symbol of the map pin created for each point.\n * @property {Color} [markerColor=GeoJsonDataSource.markerColor] The default color of the map pin created for each point.\n * @property {Color} [stroke=GeoJsonDataSource.stroke] The default color of polylines and polygon outlines.\n * @property {Number} [strokeWidth=GeoJsonDataSource.strokeWidth] The default width of polylines and polygon outlines.\n * @property {Color} [fill=GeoJsonDataSource.fill] The default color for polygon interiors.\n * @property {Boolean} [clampToGround=GeoJsonDataSource.clampToGround] true if we want the geometry features (polygons or linestrings) clamped to the ground.\n * @property {Credit|String} [credit] A credit for the data source, which is displayed on the canvas.\n */\n\n/**\n * A {@link DataSource} which processes both\n * {@link http://www.geojson.org/|GeoJSON} and {@link https://github.com/mbostock/topojson|TopoJSON} data.\n * {@link https://github.com/mapbox/simplestyle-spec|simplestyle-spec} properties will also be used if they\n * are present.\n *\n * @alias GeoJsonDataSource\n * @constructor\n *\n * @param {String} [name] The name of this data source.  If undefined, a name will be taken from\n *                        the name of the GeoJSON file.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=GeoJSON%20and%20TopoJSON.html|Cesium Sandcastle GeoJSON and TopoJSON Demo}\n * @demo {@link https://sandcastle.cesium.com/index.html?src=GeoJSON%20simplestyle.html|Cesium Sandcastle GeoJSON simplestyle Demo}\n *\n * @example\n * const viewer = new Cesium.Viewer('cesiumContainer');\n * viewer.dataSources.add(Cesium.GeoJsonDataSource.load('../../SampleData/ne_10m_us_states.topojson', {\n *   stroke: Cesium.Color.HOTPINK,\n *   fill: Cesium.Color.PINK,\n *   strokeWidth: 3,\n *   markerSymbol: '?'\n * }));\n */\nfunction GeoJsonDataSource(name) {\n  this._name = name;\n  this._changed = new Event();\n  this._error = new Event();\n  this._isLoading = false;\n  this._loading = new Event();\n  this._entityCollection = new EntityCollection(this);\n  this._promises = [];\n  this._pinBuilder = new PinBuilder();\n  this._entityCluster = new EntityCluster();\n  this._credit = undefined;\n  this._resourceCredits = [];\n}\n\n/**\n * Creates a Promise to a new instance loaded with the provided GeoJSON or TopoJSON data.\n *\n * @param {Resource|String|Object} data A url, GeoJSON object, or TopoJSON object to be loaded.\n * @param {GeoJsonDataSource.LoadOptions} [options] An object specifying configuration options\n *\n * @returns {Promise.<GeoJsonDataSource>} A promise that will resolve when the data is loaded.\n */\nGeoJsonDataSource.load = function (data, options) {\n  return new GeoJsonDataSource().load(data, options);\n};\n\nObject.defineProperties(GeoJsonDataSource, {\n  /**\n   * Gets or sets the default size of the map pin created for each point, in pixels.\n   * @memberof GeoJsonDataSource\n   * @type {Number}\n   * @default 48\n   */\n  markerSize: {\n    get: function () {\n      return defaultMarkerSize;\n    },\n    set: function (value) {\n      defaultMarkerSize = value;\n    },\n  },\n  /**\n   * Gets or sets the default symbol of the map pin created for each point.\n   * This can be any valid {@link http://mapbox.com/maki/|Maki} identifier, any single character,\n   * or blank if no symbol is to be used.\n   * @memberof GeoJsonDataSource\n   * @type {String}\n   */\n  markerSymbol: {\n    get: function () {\n      return defaultMarkerSymbol;\n    },\n    set: function (value) {\n      defaultMarkerSymbol = value;\n    },\n  },\n  /**\n   * Gets or sets the default color of the map pin created for each point.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.ROYALBLUE\n   */\n  markerColor: {\n    get: function () {\n      return defaultMarkerColor;\n    },\n    set: function (value) {\n      defaultMarkerColor = value;\n    },\n  },\n  /**\n   * Gets or sets the default color of polylines and polygon outlines.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.BLACK\n   */\n  stroke: {\n    get: function () {\n      return defaultStroke;\n    },\n    set: function (value) {\n      defaultStroke = value;\n    },\n  },\n  /**\n   * Gets or sets the default width of polylines and polygon outlines.\n   * @memberof GeoJsonDataSource\n   * @type {Number}\n   * @default 2.0\n   */\n  strokeWidth: {\n    get: function () {\n      return defaultStrokeWidth;\n    },\n    set: function (value) {\n      defaultStrokeWidth = value;\n    },\n  },\n  /**\n   * Gets or sets default color for polygon interiors.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.YELLOW\n   */\n  fill: {\n    get: function () {\n      return defaultFill;\n    },\n    set: function (value) {\n      defaultFill = value;\n    },\n  },\n  /**\n   * Gets or sets default of whether to clamp to the ground.\n   * @memberof GeoJsonDataSource\n   * @type {Boolean}\n   * @default false\n   */\n  clampToGround: {\n    get: function () {\n      return defaultClampToGround;\n    },\n    set: function (value) {\n      defaultClampToGround = value;\n    },\n  },\n\n  /**\n   * Gets an object that maps the name of a crs to a callback function which takes a GeoJSON coordinate\n   * and transforms it into a WGS84 Earth-fixed Cartesian.  Older versions of GeoJSON which\n   * supported the EPSG type can be added to this list as well, by specifying the complete EPSG name,\n   * for example 'EPSG:4326'.\n   * @memberof GeoJsonDataSource\n   * @type {Object}\n   */\n  crsNames: {\n    get: function () {\n      return crsNames;\n    },\n  },\n\n  /**\n   * Gets an object that maps the href property of a crs link to a callback function\n   * which takes the crs properties object and returns a Promise that resolves\n   * to a function that takes a GeoJSON coordinate and transforms it into a WGS84 Earth-fixed Cartesian.\n   * Items in this object take precedence over those defined in <code>crsLinkHrefs</code>, assuming\n   * the link has a type specified.\n   * @memberof GeoJsonDataSource\n   * @type {Object}\n   */\n  crsLinkHrefs: {\n    get: function () {\n      return crsLinkHrefs;\n    },\n  },\n\n  /**\n   * Gets an object that maps the type property of a crs link to a callback function\n   * which takes the crs properties object and returns a Promise that resolves\n   * to a function that takes a GeoJSON coordinate and transforms it into a WGS84 Earth-fixed Cartesian.\n   * Items in <code>crsLinkHrefs</code> take precedence over this object.\n   * @memberof GeoJsonDataSource\n   * @type {Object}\n   */\n  crsLinkTypes: {\n    get: function () {\n      return crsLinkTypes;\n    },\n  },\n});\n\nObject.defineProperties(GeoJsonDataSource.prototype, {\n  /**\n   * Gets or sets a human-readable name for this instance.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {String}\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n    set: function (value) {\n      if (this._name !== value) {\n        this._name = value;\n        this._changed.raiseEvent(this);\n      }\n    },\n  },\n  /**\n   * This DataSource only defines static data, therefore this property is always undefined.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    value: undefined,\n    writable: false,\n  },\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: function () {\n      return this._entityCollection;\n    },\n  },\n  /**\n   * Gets a value indicating if the data source is currently loading data.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Boolean}\n   */\n  isLoading: {\n    get: function () {\n      return this._isLoading;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: function () {\n      return this._changed;\n    },\n  },\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: function () {\n      return this._error;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the data source either starts or stops loading.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  loadingEvent: {\n    get: function () {\n      return this._loading;\n    },\n  },\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._entityCollection.show;\n    },\n    set: function (value) {\n      this._entityCollection.show = value;\n    },\n  },\n\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof GeoJsonDataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: function () {\n      return this._entityCluster;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value must be defined.\");\n      }\n      //>>includeEnd('debug');\n      this._entityCluster = value;\n    },\n  },\n  /**\n   * Gets the credit that will be displayed for the data source\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Credit}\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n});\n\n/**\n * Asynchronously loads the provided GeoJSON or TopoJSON data, replacing any existing data.\n *\n * @param {Resource|String|Object} data A url, GeoJSON object, or TopoJSON object to be loaded.\n * @param {GeoJsonDataSource.LoadOptions} [options] An object specifying configuration options\n *\n * @returns {Promise.<GeoJsonDataSource>} a promise that will resolve when the GeoJSON is loaded.\n */\nGeoJsonDataSource.prototype.load = function (data, options) {\n  return preload(this, data, options, true);\n};\n\n/**\n * Asynchronously loads the provided GeoJSON or TopoJSON data, without replacing any existing data.\n *\n * @param {Resource|String|Object} data A url, GeoJSON object, or TopoJSON object to be loaded.\n * @param {GeoJsonDataSource.LoadOptions} [options] An object specifying configuration options\n *\n * @returns {Promise.<GeoJsonDataSource>} a promise that will resolve when the GeoJSON is loaded.\n */\nGeoJsonDataSource.prototype.process = function (data, options) {\n  return preload(this, data, options, false);\n};\n\nfunction preload(that, data, options, clear) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(data)) {\n    throw new DeveloperError(\"data is required.\");\n  }\n  //>>includeEnd('debug');\n\n  DataSource.setLoading(that, true);\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  // User specified credit\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  that._credit = credit;\n\n  let promise = data;\n  let sourceUri = options.sourceUri;\n  if (typeof data === \"string\" || data instanceof Resource) {\n    data = Resource.createIfNeeded(data);\n    promise = data.fetchJson();\n    sourceUri = defaultValue(sourceUri, data.getUrlComponent());\n\n    // Add resource credits to our list of credits to display\n    const resourceCredits = that._resourceCredits;\n    const credits = data.credits;\n    if (defined(credits)) {\n      const length = credits.length;\n      for (let i = 0; i < length; i++) {\n        resourceCredits.push(credits[i]);\n      }\n    }\n  }\n\n  options = {\n    describe: defaultValue(options.describe, defaultDescribeProperty),\n    markerSize: defaultValue(options.markerSize, defaultMarkerSize),\n    markerSymbol: defaultValue(options.markerSymbol, defaultMarkerSymbol),\n    markerColor: defaultValue(options.markerColor, defaultMarkerColor),\n    strokeWidthProperty: new ConstantProperty(\n      defaultValue(options.strokeWidth, defaultStrokeWidth)\n    ),\n    strokeMaterialProperty: new ColorMaterialProperty(\n      defaultValue(options.stroke, defaultStroke)\n    ),\n    fillMaterialProperty: new ColorMaterialProperty(\n      defaultValue(options.fill, defaultFill)\n    ),\n    clampToGround: defaultValue(options.clampToGround, defaultClampToGround),\n  };\n\n  return Promise.resolve(promise)\n    .then(function (geoJson) {\n      return load(that, geoJson, options, sourceUri, clear);\n    })\n    .catch(function (error) {\n      DataSource.setLoading(that, false);\n      that._error.raiseEvent(that, error);\n      throw error;\n    });\n}\n\n/**\n * Updates the data source to the provided time.  This function is optional and\n * is not required to be implemented.  It is provided for data sources which\n * retrieve data based on the current animation time or scene state.\n * If implemented, update will be called by {@link DataSourceDisplay} once a frame.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {Boolean} True if this data source is ready to be displayed at the provided time, false otherwise.\n */\nGeoJsonDataSource.prototype.update = function (time) {\n  return true;\n};\n\nfunction load(that, geoJson, options, sourceUri, clear) {\n  let name;\n  if (defined(sourceUri)) {\n    name = getFilenameFromUri(sourceUri);\n  }\n\n  if (defined(name) && that._name !== name) {\n    that._name = name;\n    that._changed.raiseEvent(that);\n  }\n\n  const typeHandler = geoJsonObjectTypes[geoJson.type];\n  if (!defined(typeHandler)) {\n    throw new RuntimeError(`Unsupported GeoJSON object type: ${geoJson.type}`);\n  }\n\n  //Check for a Coordinate Reference System.\n  const crs = geoJson.crs;\n  let crsFunction = crs !== null ? defaultCrsFunction : null;\n\n  if (defined(crs)) {\n    if (!defined(crs.properties)) {\n      throw new RuntimeError(\"crs.properties is undefined.\");\n    }\n\n    const properties = crs.properties;\n    if (crs.type === \"name\") {\n      crsFunction = crsNames[properties.name];\n      if (!defined(crsFunction)) {\n        throw new RuntimeError(`Unknown crs name: ${properties.name}`);\n      }\n    } else if (crs.type === \"link\") {\n      let handler = crsLinkHrefs[properties.href];\n      if (!defined(handler)) {\n        handler = crsLinkTypes[properties.type];\n      }\n\n      if (!defined(handler)) {\n        throw new RuntimeError(\n          `Unable to resolve crs link: ${JSON.stringify(properties)}`\n        );\n      }\n\n      crsFunction = handler(properties);\n    } else if (crs.type === \"EPSG\") {\n      crsFunction = crsNames[`EPSG:${properties.code}`];\n      if (!defined(crsFunction)) {\n        throw new RuntimeError(`Unknown crs EPSG code: ${properties.code}`);\n      }\n    } else {\n      throw new RuntimeError(`Unknown crs type: ${crs.type}`);\n    }\n  }\n\n  return Promise.resolve(crsFunction).then(function (crsFunction) {\n    if (clear) {\n      that._entityCollection.removeAll();\n    }\n\n    // null is a valid value for the crs, but means the entire load process becomes a no-op\n    // because we can't assume anything about the coordinates.\n    if (crsFunction !== null) {\n      typeHandler(that, geoJson, geoJson, crsFunction, options);\n    }\n\n    return Promise.all(that._promises).then(function () {\n      that._promises.length = 0;\n      DataSource.setLoading(that, false);\n      return that;\n    });\n  });\n}\n\n/**\n * This callback is displayed as part of the GeoJsonDataSource class.\n * @callback GeoJsonDataSource.describe\n * @param {Object} properties The properties of the feature.\n * @param {String} nameProperty The property key that Cesium estimates to have the name of the feature.\n */\nexport default GeoJsonDataSource;\n","import Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport DistanceDisplayCondition from \"../Core/DistanceDisplayCondition.js\";\nimport Event from \"../Core/Event.js\";\nimport Iso8601 from \"../Core/Iso8601.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\nimport ClassificationType from \"../Scene/ClassificationType.js\";\nimport ShadowMode from \"../Scene/ShadowMode.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport Entity from \"./Entity.js\";\nimport Property from \"./Property.js\";\n\nconst defaultMaterial = new ColorMaterialProperty(Color.WHITE);\nconst defaultShow = new ConstantProperty(true);\nconst defaultFill = new ConstantProperty(true);\nconst defaultOutline = new ConstantProperty(false);\nconst defaultOutlineColor = new ConstantProperty(Color.BLACK);\nconst defaultShadows = new ConstantProperty(ShadowMode.DISABLED);\nconst defaultDistanceDisplayCondition = new ConstantProperty(\n  new DistanceDisplayCondition()\n);\nconst defaultClassificationType = new ConstantProperty(ClassificationType.BOTH);\n\n/**\n * An abstract class for updating geometry entities.\n * @alias GeometryUpdater\n * @constructor\n *\n * @param {Object} options An object with the following properties:\n * @param {Entity} options.entity The entity containing the geometry to be visualized.\n * @param {Scene} options.scene The scene where visualization is taking place.\n * @param {Object} options.geometryOptions Options for the geometry\n * @param {String} options.geometryPropertyName The geometry property name\n * @param {String[]} options.observedPropertyNames The entity properties this geometry cares about\n */\nfunction GeometryUpdater(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.entity\", options.entity);\n  Check.defined(\"options.scene\", options.scene);\n  Check.defined(\"options.geometryOptions\", options.geometryOptions);\n  Check.defined(\"options.geometryPropertyName\", options.geometryPropertyName);\n  Check.defined(\"options.observedPropertyNames\", options.observedPropertyNames);\n  //>>includeEnd('debug');\n\n  const entity = options.entity;\n  const geometryPropertyName = options.geometryPropertyName;\n\n  this._entity = entity;\n  this._scene = options.scene;\n  this._fillEnabled = false;\n  this._isClosed = false;\n  this._onTerrain = false;\n  this._dynamic = false;\n  this._outlineEnabled = false;\n  this._geometryChanged = new Event();\n  this._showProperty = undefined;\n  this._materialProperty = undefined;\n  this._showOutlineProperty = undefined;\n  this._outlineColorProperty = undefined;\n  this._outlineWidth = 1.0;\n  this._shadowsProperty = undefined;\n  this._distanceDisplayConditionProperty = undefined;\n  this._classificationTypeProperty = undefined;\n  this._options = options.geometryOptions;\n  this._geometryPropertyName = geometryPropertyName;\n  this._id = `${geometryPropertyName}-${entity.id}`;\n  this._observedPropertyNames = options.observedPropertyNames;\n  this._supportsMaterialsforEntitiesOnTerrain = Entity.supportsMaterialsforEntitiesOnTerrain(\n    options.scene\n  );\n}\n\nObject.defineProperties(GeometryUpdater.prototype, {\n  /**\n   * Gets the unique ID associated with this updater\n   * @memberof GeometryUpdater.prototype\n   * @type {String}\n   * @readonly\n   */\n  id: {\n    get: function () {\n      return this._id;\n    },\n  },\n  /**\n   * Gets the entity associated with this geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Entity}\n   * @readonly\n   */\n  entity: {\n    get: function () {\n      return this._entity;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry has a fill component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  fillEnabled: {\n    get: function () {\n      return this._fillEnabled;\n    },\n  },\n  /**\n   * Gets a value indicating if fill visibility varies with simulation time.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  hasConstantFill: {\n    get: function () {\n      return (\n        !this._fillEnabled ||\n        (!defined(this._entity.availability) &&\n          Property.isConstant(this._showProperty) &&\n          Property.isConstant(this._fillProperty))\n      );\n    },\n  },\n  /**\n   * Gets the material property used to fill the geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {MaterialProperty}\n   * @readonly\n   */\n  fillMaterialProperty: {\n    get: function () {\n      return this._materialProperty;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry has an outline component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  outlineEnabled: {\n    get: function () {\n      return this._outlineEnabled;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry has an outline component.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  hasConstantOutline: {\n    get: function () {\n      return (\n        !this._outlineEnabled ||\n        (!defined(this._entity.availability) &&\n          Property.isConstant(this._showProperty) &&\n          Property.isConstant(this._showOutlineProperty))\n      );\n    },\n  },\n  /**\n   * Gets the {@link Color} property for the geometry outline.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  outlineColorProperty: {\n    get: function () {\n      return this._outlineColorProperty;\n    },\n  },\n  /**\n   * Gets the constant with of the geometry outline, in pixels.\n   * This value is only valid if isDynamic is false.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  outlineWidth: {\n    get: function () {\n      return this._outlineWidth;\n    },\n  },\n  /**\n   * Gets the property specifying whether the geometry\n   * casts or receives shadows from light sources.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  shadowsProperty: {\n    get: function () {\n      return this._shadowsProperty;\n    },\n  },\n  /**\n   * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this geometry will be displayed.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  distanceDisplayConditionProperty: {\n    get: function () {\n      return this._distanceDisplayConditionProperty;\n    },\n  },\n  /**\n   * Gets or sets the {@link ClassificationType} Property specifying if this geometry will classify terrain, 3D Tiles, or both when on the ground.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Property}\n   * @readonly\n   */\n  classificationTypeProperty: {\n    get: function () {\n      return this._classificationTypeProperty;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry is time-varying.\n   * If true, all visualization is delegated to a DynamicGeometryUpdater\n   * returned by GeometryUpdater#createDynamicUpdater.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isDynamic: {\n    get: function () {\n      return this._dynamic;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry is closed.\n   * This property is only valid for static geometry.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  isClosed: {\n    get: function () {\n      return this._isClosed;\n    },\n  },\n  /**\n   * Gets a value indicating if the geometry should be drawn on terrain.\n   * @memberof EllipseGeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  onTerrain: {\n    get: function () {\n      return this._onTerrain;\n    },\n  },\n  /**\n   * Gets an event that is raised whenever the public properties\n   * of this updater change.\n   * @memberof GeometryUpdater.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  geometryChanged: {\n    get: function () {\n      return this._geometryChanged;\n    },\n  },\n});\n\n/**\n * Checks if the geometry is outlined at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve visibility.\n * @returns {Boolean} true if geometry is outlined at the provided time, false otherwise.\n */\nGeometryUpdater.prototype.isOutlineVisible = function (time) {\n  const entity = this._entity;\n  const visible =\n    this._outlineEnabled &&\n    entity.isAvailable(time) &&\n    this._showProperty.getValue(time) &&\n    this._showOutlineProperty.getValue(time);\n  return defaultValue(visible, false);\n};\n\n/**\n * Checks if the geometry is filled at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve visibility.\n * @returns {Boolean} true if geometry is filled at the provided time, false otherwise.\n */\nGeometryUpdater.prototype.isFilled = function (time) {\n  const entity = this._entity;\n  const visible =\n    this._fillEnabled &&\n    entity.isAvailable(time) &&\n    this._showProperty.getValue(time) &&\n    this._fillProperty.getValue(time);\n  return defaultValue(visible, false);\n};\n\n/**\n * Creates the geometry instance which represents the fill of the geometry.\n *\n * @function\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent a filled geometry.\n */\nGeometryUpdater.prototype.createFillGeometryInstance =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Creates the geometry instance which represents the outline of the geometry.\n *\n * @function\n * @param {JulianDate} time The time to use when retrieving initial attribute values.\n * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n *\n * @exception {DeveloperError} This instance does not represent an outlined geometry.\n */\nGeometryUpdater.prototype.createOutlineGeometryInstance =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nGeometryUpdater.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n */\nGeometryUpdater.prototype.destroy = function () {\n  destroyObject(this);\n};\n/**\n * @param {Entity} entity\n * @param {Object} geometry\n * @private\n */\nGeometryUpdater.prototype._isHidden = function (entity, geometry) {\n  const show = geometry.show;\n  return (\n    defined(show) && show.isConstant && !show.getValue(Iso8601.MINIMUM_VALUE)\n  );\n};\n\n/**\n * @param {Entity} entity\n * @param {Object} geometry\n * @private\n */\nGeometryUpdater.prototype._isOnTerrain = function (entity, geometry) {\n  return false;\n};\n\n/**\n * @param {GeometryOptions} options\n * @private\n */\nGeometryUpdater.prototype._getIsClosed = function (options) {\n  return true;\n};\n\n/**\n * @param {Entity} entity\n * @param {Object} geometry\n * @private\n */\nGeometryUpdater.prototype._isDynamic = DeveloperError.throwInstantiationError;\n\n/**\n * @param {Entity} entity\n * @param {Object} geometry\n * @private\n */\nGeometryUpdater.prototype._setStaticOptions =\n  DeveloperError.throwInstantiationError;\n\n/**\n * @param {Entity} entity\n * @param {String} propertyName\n * @param {*} newValue\n * @param {*} oldValue\n * @private\n */\nGeometryUpdater.prototype._onEntityPropertyChanged = function (\n  entity,\n  propertyName,\n  newValue,\n  oldValue\n) {\n  if (this._observedPropertyNames.indexOf(propertyName) === -1) {\n    return;\n  }\n\n  const geometry = this._entity[this._geometryPropertyName];\n\n  if (!defined(geometry)) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n      this._geometryChanged.raiseEvent(this);\n    }\n    return;\n  }\n\n  const fillProperty = geometry.fill;\n  const fillEnabled =\n    defined(fillProperty) && fillProperty.isConstant\n      ? fillProperty.getValue(Iso8601.MINIMUM_VALUE)\n      : true;\n\n  const outlineProperty = geometry.outline;\n  let outlineEnabled = defined(outlineProperty);\n  if (outlineEnabled && outlineProperty.isConstant) {\n    outlineEnabled = outlineProperty.getValue(Iso8601.MINIMUM_VALUE);\n  }\n\n  if (!fillEnabled && !outlineEnabled) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n      this._geometryChanged.raiseEvent(this);\n    }\n    return;\n  }\n\n  const show = geometry.show;\n  if (this._isHidden(entity, geometry)) {\n    if (this._fillEnabled || this._outlineEnabled) {\n      this._fillEnabled = false;\n      this._outlineEnabled = false;\n      this._geometryChanged.raiseEvent(this);\n    }\n    return;\n  }\n\n  this._materialProperty = defaultValue(geometry.material, defaultMaterial);\n  this._fillProperty = defaultValue(fillProperty, defaultFill);\n  this._showProperty = defaultValue(show, defaultShow);\n  this._showOutlineProperty = defaultValue(geometry.outline, defaultOutline);\n  this._outlineColorProperty = outlineEnabled\n    ? defaultValue(geometry.outlineColor, defaultOutlineColor)\n    : undefined;\n  this._shadowsProperty = defaultValue(geometry.shadows, defaultShadows);\n  this._distanceDisplayConditionProperty = defaultValue(\n    geometry.distanceDisplayCondition,\n    defaultDistanceDisplayCondition\n  );\n  this._classificationTypeProperty = defaultValue(\n    geometry.classificationType,\n    defaultClassificationType\n  );\n\n  this._fillEnabled = fillEnabled;\n\n  const onTerrain =\n    this._isOnTerrain(entity, geometry) &&\n    (this._supportsMaterialsforEntitiesOnTerrain ||\n      this._materialProperty instanceof ColorMaterialProperty);\n\n  if (outlineEnabled && onTerrain) {\n    oneTimeWarning(oneTimeWarning.geometryOutlines);\n    outlineEnabled = false;\n  }\n\n  this._onTerrain = onTerrain;\n  this._outlineEnabled = outlineEnabled;\n\n  if (this._isDynamic(entity, geometry)) {\n    if (!this._dynamic) {\n      this._dynamic = true;\n      this._geometryChanged.raiseEvent(this);\n    }\n  } else {\n    this._setStaticOptions(entity, geometry);\n    this._isClosed = this._getIsClosed(this._options);\n    const outlineWidth = geometry.outlineWidth;\n    this._outlineWidth = defined(outlineWidth)\n      ? outlineWidth.getValue(Iso8601.MINIMUM_VALUE)\n      : 1.0;\n    this._dynamic = false;\n    this._geometryChanged.raiseEvent(this);\n  }\n};\n\n/**\n * Creates the dynamic updater to be used when GeometryUpdater#isDynamic is true.\n *\n * @param {PrimitiveCollection} primitives The primitive collection to use.\n * @param {PrimitiveCollection} [groundPrimitives] The primitive collection to use for ground primitives.\n *\n * @returns {DynamicGeometryUpdater} The dynamic updater used to update the geometry each frame.\n *\n * @exception {DeveloperError} This instance does not represent dynamic geometry.\n * @private\n */\nGeometryUpdater.prototype.createDynamicUpdater = function (\n  primitives,\n  groundPrimitives\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"primitives\", primitives);\n  Check.defined(\"groundPrimitives\", groundPrimitives);\n\n  if (!this._dynamic) {\n    throw new DeveloperError(\n      \"This instance does not represent dynamic geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  return new this.constructor.DynamicGeometryUpdater(\n    this,\n    primitives,\n    groundPrimitives\n  );\n};\nexport default GeometryUpdater;\n"],"names":["BillboardGraphics","options","this","_definitionChanged","_show","undefined","_showSubscription","_image","_imageSubscription","_scale","_scaleSubscription","_pixelOffset","_pixelOffsetSubscription","_eyeOffset","_eyeOffsetSubscription","_horizontalOrigin","_horizontalOriginSubscription","_verticalOrigin","_verticalOriginSubscription","_heightReference","_heightReferenceSubscription","_color","_colorSubscription","_rotation","_rotationSubscription","_alignedAxis","_alignedAxisSubscription","_sizeInMeters","_sizeInMetersSubscription","_width","_widthSubscription","_height","_heightSubscription","_scaleByDistance","_scaleByDistanceSubscription","_translucencyByDistance","_translucencyByDistanceSubscription","_pixelOffsetScaleByDistance","_pixelOffsetScaleByDistanceSubscription","_imageSubRegion","_imageSubRegionSubscription","_distanceDisplayCondition","_distanceDisplayConditionSubscription","_disableDepthTestDistance","_disableDepthTestDistanceSubscription","merge","Object","defineProperties","prototype","definitionChanged","get","show","image","scale","pixelOffset","eyeOffset","horizontalOrigin","verticalOrigin","heightReference","color","rotation","alignedAxis","sizeInMeters","width","height","scaleByDistance","translucencyByDistance","pixelOffsetScaleByDistance","imageSubRegion","distanceDisplayCondition","disableDepthTestDistance","clone","result","source","defaultColor","defaultEyeOffset","defaultHeightReference","defaultPixelOffset","defaultAlignedAxis","defaultHorizontalOrigin","defaultVerticalOrigin","positionScratch","colorScratch","eyeOffsetScratch","pixelOffsetScratch","scaleByDistanceScratch","translucencyByDistanceScratch","pixelOffsetScaleByDistanceScratch","boundingRectangleScratch","distanceDisplayConditionScratch","EntityData","entity","billboard","textureValue","BillboardVisualizer","entityCluster","entityCollection","collectionChanged","addEventListener","_onCollectionChanged","_cluster","_entityCollection","_items","values","returnPrimitive","item","cluster","removeBillboard","update","time","items","i","len","length","billboardGraphics","_billboard","position","isShowing","isAvailable","_position","_clusterDirty","getBillboard","id","subRegion","setImageSubRegion","_imageId","getBoundingSphere","center","_clampedPosition","radius","isDestroyed","destroy","removeEventListener","entities","added","removed","changed","set","contains","remove","freeze","DONE","PENDING","FAILED","defaultOffset","offsetScratch","scratchColor","BoxGeometryOptions","vertexFormat","dimensions","offsetAttribute","BoxGeometryUpdater","scene","geometryOptions","geometryPropertyName","observedPropertyNames","_onEntityPropertyChanged","box","DynamicBoxGeometryUpdater","geometryUpdater","primitives","groundPrimitives","create","constructor","terrainOffsetProperty","_terrainOffsetProperty","createFillGeometryInstance","_fillEnabled","_entity","_showProperty","getValue","_fillProperty","_distanceDisplayConditionProperty","attributes","offset","_materialProperty","currentColor","isConstant","_options","geometry","modelMatrix","computeModelMatrixForHeightReference","z","_scene","mapProjection","ellipsoid","createOutlineGeometryInstance","_outlineEnabled","outlineColor","_outlineColorProperty","_showOutlineProperty","_computeCenter","_isHidden","_isDynamic","orientation","outlineWidth","_setStaticOptions","DynamicGeometryUpdater","_setOptions","BoxGraphics","_dimensions","_dimensionsSubscription","_fill","_fillSubscription","_material","_materialSubscription","_outline","_outlineSubscription","_outlineColor","_outlineColorSubscription","_outlineWidth","_outlineWidthSubscription","_shadows","_shadowsSubscription","fill","material","outline","shadows","CallbackProperty","callback","_callback","_isConstant","setCallback","raiseEvent","equals","other","Cesium3DTilesetGraphics","_uri","_uriSubscription","_maximumScreenSpaceError","_maximumScreenSpaceErrorSubscription","uri","maximumScreenSpaceError","modelMatrixScratch","Cesium3DTilesetVisualizer","_primitives","_tilesetHash","_entitiesToVisualize","removeTileset","visualizer","tilesetHash","tilesetData","removeAndDestroy","tilesetPrimitive","checkLoad","primitive","readyPromise","catch","error","loadFail","tilesetGraphics","_tileset","resource","computeModelMatrix","tileset","url","add","ready","boundingSphere","defaultEvenColor","defaultOddColor","defaultRepeat","CheckerboardMaterialProperty","_evenColor","_evenColorSubscription","_oddColor","_oddColorSubscription","_repeat","_repeatSubscription","evenColor","oddColor","repeat","getType","lightColor","darkColor","ColorMaterialProperty","entityOptionsScratch","entityIdScratch","Array","clean","propertyNames","propertyNamesLength","_name","_availability","subscribeToEntity","that","eventHash","collectionId","JSON","stringify","CompositeEntityCollection","_onDefinitionChanged","unsubscribeFromEntity","recomposite","_shouldRecomposite","_suspendCount","collections","_collections","collectionsLength","collectionsCopy","_collectionsCopy","collectionsCopyLength","iEntities","collection","composite","_composite","newEntities","_eventHash","compositeEntity","getById","slice","suspendEvents","removeAll","newEntitiesArray","resumeEvents","owner","_owner","_id","getCollectionIndex","index","indexOf","swapCollections","j","arr","temp","_collectionChanged","addCollection","hasIndex","splice","push","removeCollection","removeAllCollections","containsCollection","indexOfCollection","getCollection","getCollectionsLength","raiseCollection","lowerCollection","raiseCollectionToTop","lowerCollectionToBottom","computeAvailability","q","removedLength","removedEntity","removedId","removeById","addedLength","addedEntity","addedId","propertyName","newValue","oldValue","compositeProperty","newProperty","firstTime","innerEntity","property","addProperty","CompositeMaterialProperty","_raiseDefinitionChanged","intervals","_intervals","innerProperty","findDataForIntervalContainingDate","CompositePositionProperty","referenceFrame","_referenceFrame","value","getValueInReferenceFrame","CompositeProperty","_eventHelper","changedEvent","_intervalsChanged","isEmpty","eventHelper","interval","data","subscribeAll","ConstantPositionProperty","_value","setValue","ConstantProperty","_hasClone","_hasEquals","isDefined","hasClone","hasEquals","valueOf","toString","String","scratchRectangle","CorridorGeometryOptions","positions","cornerType","extrudedHeight","granularity","CorridorGeometryUpdater","corridor","DynamicCorridorGeometryUpdater","Math","floor","zIndex","_onTerrain","heightValue","heightReferenceValue","extrudedHeightValue","extrudedHeightReferenceValue","extrudedHeightReference","minimumTerrainHeight","CorridorGraphics","_positions","_positionsSubscription","_extrudedHeight","_extrudedHeightSubscription","_extrudedHeightReference","_extrudedHeightReferenceSubscription","_cornerType","_cornerTypeSubscription","_granularity","_granularitySubscription","_classificationType","_classificationTypeSubscription","_zIndex","_zIndexSubscription","classificationType","CustomDataSource","name","_clock","_changed","_error","_isLoading","_loading","_entityCluster","clock","isLoading","errorEvent","loadingEvent","clustering","CylinderGeometryOptions","topRadius","bottomRadius","slices","numberOfVerticalLines","CylinderGeometryUpdater","cylinder","DynamicCylinderGeometryUpdater","CylinderGraphics","_length","_lengthSubscription","_topRadius","_topRadiusSubscription","_bottomRadius","_bottomRadiusSubscription","_numberOfVerticalLines","_numberOfVerticalLinesSubscription","_slices","_slicesSubscription","UnitCartesian3","currentId","createReferenceProperty","referenceString","createSpecializedProperty","type","packetData","reference","velocityReference","referenceProperty","packedLength","unpack","pack","scratchCartesian","scratchSpherical","scratchCartographic","scratchTimeInterval","scratchQuaternion","unwrapUriInterval","czmlInterval","sourceUri","getDerivedResource","unwrapCartesianInterval","cartesian","cartesianVelocity","unitCartesian","unitSpherical","magnitude","cone","x","y","convertUnitSphericalToCartesian","spherical","convertSphericalToCartesian","cartographicRadians","longitude","latitude","convertCartographicRadiansToCartesian","cartographicDegrees","convertCartographicDegreesToCartesian","normalizePackedCartesianArray","array","startingIndex","normalizePackedQuaternionArray","getPropertyType","Boolean","Number","hasOwnProperty","unwrapInterval","arcType","boundingRectangle","cartesian2","unwrapUnitCartesianInterval","rgbaf","rgba","unwrapColorInterval","colorBlendMode","Image","date","labelStyle","number","nearFarScalar","object","unitQuaternion","unwrapQuaternionInterval","shadowMode","string","stripeOrientation","wsen","wsenDegrees","unwrapRectangleInterval","interpolators","HERMITE","LAGRANGE","LINEAR","updateInterpolationSettings","interpolationAlgorithm","interpolationDegree","setInterpolationOptions","forwardExtrapolationType","forwardExtrapolationDuration","backwardExtrapolationType","backwardExtrapolationDuration","iso8601Scratch","iso8601","intervalFromString","intervalString","wrapPropertyInInfiniteInterval","convertPropertyToComposite","addInterval","convertPositionPropertyToComposite","processProperty","constrainedInterval","unwrappedInterval","unwrappedIntervalLength","combinedInterval","isValue","hasInterval","delete","removePropertyData","isSampled","needsUnpacking","epoch","packetEpoch","addSamplesPackedArray","findInterval","removeSamples","removeInterval","intersection","processPacketData","isArray","processPositionProperty","numberOfDerivatives","removePositionPropertyData","processPositionPacketData","processShapePacketData","references","processReferencesArrayPacketData","processMaterialProperty","existingMaterial","existingInterval","materialData","thisIntervals","start","stop","solidColor","grid","cellAlpha","lineCount","lineThickness","lineOffset","transparent","stripe","polylineOutline","polylineGlow","glowPower","taperPower","polylineArrow","polylineDash","gapColor","dashLength","dashPattern","checkerboard","processMaterialPacketData","PropertyArrayType","CompositePropertyArrayType","properties","map","processArrayPacketData","processArray","processPositionArrayPacketData","processPositionArray","unpackCartesianArray","unpackCartographicRadiansArray","unpackCartographicDegreesArray","processPositionArrayOfArraysPacketData","referenceArray","tempObj","processNodeTransformations","model","nodeTransformationsData","nodeTransformations","nodeNames","keys","nodeName","nodeTransformationData","hasProperty","nodeTransformation","translation","processArticulations","articulationsData","articulations","key","articulationStageData","PolygonHierarchyProperty","polygon","adaptFollowSurfaceToArcType","followSurface","processCzmlPacket","packet","updaterFunctions","dataSource","objectId","_version","version","tokens","split","documentPacket","_documentPacket","clockPacket","currentTime","range","step","multiplier","processDocument","getOrCreateEntity","parentId","parent","load","czml","clear","promise","credit","_credit","fetchJson","resourceCredits","_resourceCredits","credits","Promise","resolve","then","DocumentPacket","CzmlDataSource","_processCzml","raiseChangedEvent","availability","startTime","stopTime","totalSeconds","round","clockRange","clockStep","updateClock","getUrlComponent","loadCzml","reject","holes","_holes","holePositions","updaters","billboardData","processAlignedAxis","boxData","corridorData","cylinderData","ellipseData","ellipse","semiMajorAxis","semiMinorAxis","stRotation","ellipsoidData","radii","innerRadii","minimumClock","maximumClock","minimumCone","maximumCone","stackPartitions","slicePartitions","subdivisions","labelData","label","text","font","style","showBackground","backgroundColor","backgroundPadding","fillColor","modelData","gltf","minimumPixelSize","maximumScale","incrementallyLoadTextures","runAnimations","clampAnimations","silhouetteColor","silhouetteSize","colorBlendAmount","nameData","descriptionData","description","pathData","path","leadTime","trailTime","resolution","pointData","point","pixelSize","polygonData","processPositionArrayOfArrays","hierarchy","perPositionHeight","closeTop","closeBottom","polylineData","polyline","depthFailMaterial","clampToGround","adapterFunction","polylineVolumeData","polylineVolume","processShape","shape","propertiesData","propertyData","rectangleData","rectangle","coordinates","positionData","viewFromData","viewFrom","wallData","wall","minimumHeights","maximumHeights","orientationData","process","DataSource","setLoading","DataSourceClock","_startTime","_stopTime","_currentTime","_clockRange","_clockStep","_multiplier","DataSourceCollection","_dataSources","_dataSourceAdded","_dataSourceRemoved","_dataSourceMoved","getIndex","dataSources","swapDataSources","dataSourceMoved","dataSourceAdded","dataSourceRemoved","getByName","filter","raise","lower","raiseToTop","lowerToBottom","DataSourceDisplay","dataSourceCollection","_onDataSourceAdded","_onDataSourceRemoved","_onDataSourceMoved","postRender","_postRender","_dataSourceCollection","_visualizersCallback","visualizersCallback","defaultVisualizersCallback","primitivesAdded","_groundPrimitives","defaultDataSource","removeDefaultDataSourceListener","removeDataSourceCollectionListener","_defaultDataSource","addPrimitives","_removeDefaultDataSourceListener","_removeDataSourceCollectionListener","_ready","visualizers","vLength","_visualizers","frameState","creditDisplay","addCredit","creditCount","c","getBoundingSphereArrayScratch","getBoundingSphereBoundingSphereScratch","allowPartial","d","boundingSpheres","tmp","count","state","visualizersLength","displayPrimitives","displayGroundPrimitives","_initialize","newIndex","oldIndex","DynamicGeometryBatch","orderedGroundPrimitives","_orderedGroundPrimitives","_dynamicUpdaters","updater","createDynamicUpdater","dynamicUpdater","geometries","removeAllPrimitives","_primitive","_outlinePrimitive","_geometryUpdater","onTerrain","_geometryPropertyName","shadowsProperty","fillMaterialProperty","isColorAppearance","appearance","closed","_getIsClosed","flat","_supportsMaterialsforEntitiesOnTerrain","translucent","isTranslucent","geometryInstances","asynchronous","classificationTypeProperty","fillInstance","outlineInstance","renderState","lineWidth","clampLineWidth","outlinePrimitive","getGeometryInstanceAttributes","EllipseGeometryOptions","EllipseGeometryUpdater","DynamicEllipseGeometryUpdater","EllipseGraphics","_semiMajorAxis","_semiMajorAxisSubscription","_semiMinorAxis","_semiMinorAxisSubscription","_stRotation","_stRotationSubscription","defaultMaterial","radiiScratch","innerRadiiScratch","unitSphere","EllipsoidGeometryOptions","EllipsoidGeometryUpdater","DynamicEllipsoidGeometryUpdater","_modelMatrix","_attributes","_outlineAttributes","_lastSceneMode","_lastShow","_lastOutlineShow","_lastOutlineWidth","_lastOutlineColor","_lastOffset","skipModelMatrix","modelMatrixResult","showFill","showOutline","sceneMode","mode","in3D","distanceDisplayConditionProperty","mag","_lastDistanceDisplayCondition","outlineAttributes","max","EllipsoidGraphics","_radii","_radiiSubscription","_innerRadii","_innerRadiiSubscription","_minimumClock","_minimumClockSubscription","_maximumClock","_maximumClockSubscription","_minimumCone","_minimumConeSubscription","_maximumCone","_maximumConeSubscription","_stackPartitions","_stackPartitionsSubscription","_slicePartitions","_slicePartitionsSubscription","_subdivisions","_subdivisionsSubscription","cartoScratch","createConstantPositionProperty","createPropertyTypeDescriptor","Type","Entity","_parent","_propertyNames","_billboardSubscription","_box","_boxSubscription","_corridor","_corridorSubscription","_cylinder","_cylinderSubscription","_description","_descriptionSubscription","_ellipse","_ellipseSubscription","_ellipsoid","_ellipsoidSubscription","_label","_labelSubscription","_model","_modelSubscription","_tilesetSubscription","_orientation","_orientationSubscription","_path","_pathSubscription","_plane","_planeSubscription","_point","_pointSubscription","_polygon","_polygonSubscription","_polyline","_polylineSubscription","_polylineVolume","_polylineVolumeSubscription","_positionSubscription","_properties","_propertiesSubscription","_rectangle","_rectangleSubscription","_viewFrom","_viewFromSubscription","_wall","_wallSubscription","_children","updateShow","children","child","childShow","wasShowing","plane","defineProperty","removeProperty","sourcePropertyNames","targetProperty","sourceProperty","matrix3Scratch","orientationScratch","heightReferenceProperty","heightOffset","carto","cartesianToCartographic","cartographicToCartesian","supportsMaterialsforEntitiesOnTerrain","supportsPolylinesOnTerrain","EntityCluster","_enabled","enabled","_pixelRange","pixelRange","_minimumClusterSize","minimumClusterSize","_clusterBillboards","clusterBillboards","_clusterLabels","clusterLabels","_clusterPoints","clusterPoints","_labelCollection","_billboardCollection","_pointCollection","_clusterBillboardCollection","_clusterLabelCollection","_clusterPointCollection","_collectionIndicesByEntity","_unusedLabelIndices","_unusedBillboardIndices","_unusedPointIndices","_previousClusters","_previousHeight","_enabledDirty","_removeEventListener","_clusterEvent","getX","coord","getY","expandBoundingBox","bbox","labelBoundingBoxScratch","getBoundingBox","_pointPrimitiveCollection","hasLabelIndex","labelIndex","labelBBox","addNonClusteredItem","clusterShow","addCluster","numPoints","ids","toLocaleString","entityId","getScreenSpacePositions","points","occluder","isPointVisible","canClusterLabels","canClusterBillboards","canClusterPoints","computeScreenSpacePosition","clustered","pointBoundinRectangleScratch","totalBoundingRectangleScratch","neighborBoundingRectangleScratch","createGetEntity","collectionProperty","CollectionConstructor","unusedIndicesProperty","entityIndexProperty","entityItem","entityIndices","billboardIndex","pointIndex","unusedIndices","pop","removeEntityIndicesIfUnused","indices","disableCollectionClustering","amount","labelCollection","billboardCollection","pointCollection","clusteredLabelCollection","clusteredBillboardCollection","clusteredPointCollection","clusters","newClusters","previousHeight","currentHeight","camera","positionCartographic","cameraPosition","positionWC","neighbors","neighborLength","neighborIndex","neighborPoint","collectionIndex","Int32Array","factor","minimumWidth","minimumHeight","minX","minY","maxX","maxY","totalBBox","clusterPosition","neighborItem","neighborBBox","clusterEvent","getLabel","removeLabel","getPoint","removePoint","commandList","_glyphs","_pixelRangeDirty","_minimumClusterSizeDirty","fireChangedEvent","_firing","_refire","_addedEntities","_removedEntities","_changedEntities","addedArray","removedArray","changedArray","EntityCollection","_entities","oldShows","entitiesLength","oldShow","_onEntityDefinitionChanged","addedEntities","existingItem","existingItemId","addedItem","updateTransformMatrix3Scratch1","updateTransformMatrix3Scratch2","updateTransformMatrix3Scratch3","updateTransformMatrix4Scratch","updateTransformCartesian3Scratch1","updateTransformCartesian3Scratch2","updateTransformCartesian3Scratch3","updateTransformCartesian3Scratch4","updateTransformCartesian3Scratch5","updateTransformCartesian3Scratch6","deltaTime","EntityView","_lastEntity","_mode","_lastCartesian","_defaultOffset3D","_offset3D","defaultOffset3D","vector","scratchHeadingPitchRange","positionProperty","objectChanged","sceneModeChanged","updateLookAt","saveCamera","viewFromProperty","hasViewFrom","pitch","maximumRadius","viewBoundingSphere","xBasis","yBasis","zBasis","direction","up","hasBasis","invertVelocity","deltaCartesian","toFixed","toInertial","toInertialDelta","inertialCartesian","inertialDeltaCartesian","inertialVelocity","mu","transform","_setTransform","right","lookAtTransform","updateTransform","defaultCrsFunction","crsNames","crsLinkHrefs","crsLinkTypes","defaultMarkerSymbol","defaultMarkerSize","defaultMarkerColor","defaultStroke","defaultStrokeWidth","defaultFill","defaultClampToGround","sizes","small","medium","large","simpleStyleIdentifiers","defaultDescribe","nameProperty","html","defaultDescribeProperty","describe","createDescriptionCallback","createObject","geoJson","finalId","title","namePropertyPrecedence","MAX_VALUE","lowerKey","toLowerCase","test","coordinatesArrayToCartesianArray","crsFunction","geoJsonObjectTypes","Feature","processFeature","FeatureCollection","featureCollection","notUsed","features","GeometryCollection","processGeometryCollection","LineString","processLineString","MultiLineString","processMultiLineString","MultiPoint","processMultiPoint","MultiPolygon","processMultiPolygon","Point","processPoint","Polygon","processPolygon","Topology","processTopology","geometryTypes","feature","geometryType","geometryHandler","geometryCollection","createPoint","symbol","markerSymbol","markerColor","size","markerSize","cssColor","canvasOrPromise","_pinBuilder","fromText","toUpperCase","fromMakiIconId","fromColor","_promises","createLineString","strokeMaterialProperty","widthProperty","strokeWidthProperty","stroke","opacity","alpha","polylineGraphics","lineStrings","createPolygon","outlineColorProperty","materialColor","polygons","objects","typeHandler","GeoJsonDataSource","preload","strokeWidth","crs","handler","href","code","all","writable","defaultShow","defaultOutline","defaultOutlineColor","defaultShadows","defaultDistanceDisplayCondition","defaultClassificationType","GeometryUpdater","_isClosed","_dynamic","_geometryChanged","_shadowsProperty","_classificationTypeProperty","_observedPropertyNames","fillEnabled","hasConstantFill","outlineEnabled","hasConstantOutline","isDynamic","isClosed","geometryChanged","isOutlineVisible","visible","isFilled","_isOnTerrain","fillProperty","outlineProperty"],"sourceRoot":""}