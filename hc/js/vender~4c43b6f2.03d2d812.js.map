{"version":3,"file":"js/vender~4c43b6f2.03d2d812.js","mappings":"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","sources":["webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/thinRenderTargetTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/thinTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/videoTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/colorCurves.js","webpack:///../../../node_modules/@babylonjs/core/Materials/drawWrapper.js","webpack:///../../../node_modules/@babylonjs/core/Materials/effect.js","webpack:///../../../node_modules/@babylonjs/core/Materials/effectFallbacks.js","webpack:///../../../node_modules/@babylonjs/core/Materials/effectRenderer.js","webpack:///../../../node_modules/@babylonjs/core/Materials/imageProcessingConfiguration.js","webpack:///../../../node_modules/@babylonjs/core/Materials/fresnelParameters.js","webpack:///../../../node_modules/@babylonjs/core/Materials/shadowDepthWrapper.js","webpack:///../../../node_modules/@babylonjs/core/Materials/materialPluginFactoryExport.js","webpack:///../../../node_modules/@babylonjs/core/Materials/material.detailMapConfiguration.js","webpack:///../../../node_modules/@babylonjs/core/Materials/materialStencilState.js","webpack:///../../../node_modules/@babylonjs/core/Materials/material.js","webpack:///../../../node_modules/@babylonjs/core/Materials/materialDefines.js","webpack:///../../../node_modules/@babylonjs/core/Materials/materialFlags.js","webpack:///../../../node_modules/@babylonjs/core/Materials/materialHelper.js","webpack:///../../../node_modules/@babylonjs/core/Materials/materialPluginBase.js","webpack:///../../../node_modules/@babylonjs/core/Materials/materialPluginEvent.js","webpack:///../../../node_modules/@babylonjs/core/Materials/materialPluginManager.js","webpack:///../../../node_modules/@babylonjs/core/Materials/multiMaterial.js","webpack:///../../../node_modules/@babylonjs/core/Materials/prePassConfiguration.js","webpack:///../../../node_modules/@babylonjs/core/Materials/pushMaterial.js","webpack:///../../../node_modules/@babylonjs/core/Materials/shaderLanguage.js","webpack:///../../../node_modules/@babylonjs/core/Materials/shaderMaterial.js","webpack:///../../../node_modules/@babylonjs/core/Materials/standardMaterial.js","webpack:///../../../node_modules/@babylonjs/core/Materials/thinMaterialHelper.js","webpack:///../../../node_modules/@babylonjs/core/Materials/uniformBuffer.js","webpack:///../../../node_modules/@babylonjs/core/Materials/uniformBufferEffectCommonAccessor.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { ThinTexture } from \"./thinTexture.js\";\n/**\n * This is a tiny helper class to wrap a RenderTargetWrapper in a texture\n * usable as the input of an effect.\n */\nvar ThinRenderTargetTexture = /** @class */ (function (_super) {\n    __extends(ThinRenderTargetTexture, _super);\n    /**\n     * Instantiates a new ThinRenderTargetTexture.\n     * Tiny helper class to wrap a RenderTargetWrapper in a texture.\n     * This can be used as an internal texture wrapper in ThinEngine to benefit from the cache and to hold on the associated RTT\n     * @param engine Define the internalTexture to wrap\n     * @param size Define the size of the RTT to create\n     * @param options Define rendertarget options\n     */\n    function ThinRenderTargetTexture(engine, size, options) {\n        var _this = _super.call(this, null) || this;\n        _this._renderTarget = null;\n        _this._engine = engine;\n        _this._renderTargetOptions = options;\n        _this.resize(size);\n        return _this;\n    }\n    Object.defineProperty(ThinRenderTargetTexture.prototype, \"renderTarget\", {\n        /**\n         * Gets the render target wrapper associated with this render target\n         */\n        get: function () {\n            return this._renderTarget;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Resize the texture to a new desired size.\n     * Be careful as it will recreate all the data in the new texture.\n     * @param size Define the new size. It can be:\n     *   - a number for squared texture,\n     *   - an object containing { width: number, height: number }\n     */\n    ThinRenderTargetTexture.prototype.resize = function (size) {\n        var _a;\n        (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._renderTarget = null;\n        this._texture = null;\n        this._size = size;\n        if (this._engine) {\n            this._renderTarget = this._engine.createRenderTargetTexture(this._size, this._renderTargetOptions);\n        }\n        this._texture = this.renderTarget.texture;\n    };\n    /**\n     * Get the underlying lower level texture from Babylon.\n     * @returns the internal texture\n     */\n    ThinRenderTargetTexture.prototype.getInternalTexture = function () {\n        return this._texture;\n    };\n    /**\n     * Get the class name of the texture.\n     * @returns \"ThinRenderTargetTexture\"\n     */\n    ThinRenderTargetTexture.prototype.getClassName = function () {\n        return \"ThinRenderTargetTexture\";\n    };\n    /**\n     * Dispose the texture and release its associated resources.\n     * @param disposeOnlyFramebuffers\n     */\n    ThinRenderTargetTexture.prototype.dispose = function (disposeOnlyFramebuffers) {\n        var _a;\n        if (disposeOnlyFramebuffers === void 0) { disposeOnlyFramebuffers = false; }\n        (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.dispose(true);\n        this._renderTarget = null;\n        if (!disposeOnlyFramebuffers) {\n            this.dispose();\n        }\n    };\n    return ThinRenderTargetTexture;\n}(ThinTexture));\nexport { ThinRenderTargetTexture };\n//# sourceMappingURL=thinRenderTargetTexture.js.map","\nimport { Size } from \"../../Maths/math.size.js\";\n/**\n * Base class of all the textures in babylon.\n * It groups all the common properties required to work with Thin Engine.\n */\nvar ThinTexture = /** @class */ (function () {\n    /**\n     * Instantiates a new ThinTexture.\n     * Base class of all the textures in babylon.\n     * This can be used as an internal texture wrapper in ThinEngine to benefit from the cache\n     * @param internalTexture Define the internalTexture to wrap\n     */\n    function ThinTexture(internalTexture) {\n        this._wrapU = 1;\n        this._wrapV = 1;\n        /**\n         * | Value | Type               | Description |\n         * | ----- | ------------------ | ----------- |\n         * | 0     | CLAMP_ADDRESSMODE  |             |\n         * | 1     | WRAP_ADDRESSMODE   |             |\n         * | 2     | MIRROR_ADDRESSMODE |             |\n         */\n        this.wrapR = 1;\n        /**\n         * With compliant hardware and browser (supporting anisotropic filtering)\n         * this defines the level of anisotropic filtering in the texture.\n         * The higher the better but the slower. This defaults to 4 as it seems to be the best tradeoff.\n         */\n        this.anisotropicFilteringLevel = 4;\n        /**\n         * Define the current state of the loading sequence when in delayed load mode.\n         */\n        this.delayLoadState = 0;\n        /** @hidden */\n        this._texture = null;\n        this._engine = null;\n        this._cachedSize = Size.Zero();\n        this._cachedBaseSize = Size.Zero();\n        /** @hidden */\n        this._initialSamplingMode = 2;\n        this._texture = internalTexture;\n        if (this._texture) {\n            this._engine = this._texture.getEngine();\n        }\n    }\n    Object.defineProperty(ThinTexture.prototype, \"wrapU\", {\n        /**\n         * | Value | Type               | Description |\n         * | ----- | ------------------ | ----------- |\n         * | 0     | CLAMP_ADDRESSMODE  |             |\n         * | 1     | WRAP_ADDRESSMODE   |             |\n         * | 2     | MIRROR_ADDRESSMODE |             |\n         */\n        get: function () {\n            return this._wrapU;\n        },\n        set: function (value) {\n            this._wrapU = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ThinTexture.prototype, \"wrapV\", {\n        /**\n         * | Value | Type               | Description |\n         * | ----- | ------------------ | ----------- |\n         * | 0     | CLAMP_ADDRESSMODE  |             |\n         * | 1     | WRAP_ADDRESSMODE   |             |\n         * | 2     | MIRROR_ADDRESSMODE |             |\n         */\n        get: function () {\n            return this._wrapV;\n        },\n        set: function (value) {\n            this._wrapV = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ThinTexture.prototype, \"coordinatesMode\", {\n        /**\n         * How a texture is mapped.\n         * Unused in thin texture mode.\n         */\n        get: function () {\n            return 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ThinTexture.prototype, \"isCube\", {\n        /**\n         * Define if the texture is a cube texture or if false a 2d texture.\n         */\n        get: function () {\n            if (!this._texture) {\n                return false;\n            }\n            return this._texture.isCube;\n        },\n        set: function (value) {\n            if (!this._texture) {\n                return;\n            }\n            this._texture.isCube = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ThinTexture.prototype, \"is3D\", {\n        /**\n         * Define if the texture is a 3d texture (webgl 2) or if false a 2d texture.\n         */\n        get: function () {\n            if (!this._texture) {\n                return false;\n            }\n            return this._texture.is3D;\n        },\n        set: function (value) {\n            if (!this._texture) {\n                return;\n            }\n            this._texture.is3D = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ThinTexture.prototype, \"is2DArray\", {\n        /**\n         * Define if the texture is a 2d array texture (webgl 2) or if false a 2d texture.\n         */\n        get: function () {\n            if (!this._texture) {\n                return false;\n            }\n            return this._texture.is2DArray;\n        },\n        set: function (value) {\n            if (!this._texture) {\n                return;\n            }\n            this._texture.is2DArray = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get the class name of the texture.\n     * @returns \"ThinTexture\"\n     */\n    ThinTexture.prototype.getClassName = function () {\n        return \"ThinTexture\";\n    };\n    /**\n     * Get if the texture is ready to be used (downloaded, converted, mip mapped...).\n     * @returns true if fully ready\n     */\n    ThinTexture.prototype.isReady = function () {\n        if (this.delayLoadState === 4) {\n            this.delayLoad();\n            return false;\n        }\n        if (this._texture) {\n            return this._texture.isReady;\n        }\n        return false;\n    };\n    /**\n     * Triggers the load sequence in delayed load mode.\n     */\n    ThinTexture.prototype.delayLoad = function () { };\n    /**\n     * Get the underlying lower level texture from Babylon.\n     * @returns the internal texture\n     */\n    ThinTexture.prototype.getInternalTexture = function () {\n        return this._texture;\n    };\n    /**\n     * Get the size of the texture.\n     * @returns the texture size.\n     */\n    ThinTexture.prototype.getSize = function () {\n        if (this._texture) {\n            if (this._texture.width) {\n                this._cachedSize.width = this._texture.width;\n                this._cachedSize.height = this._texture.height;\n                return this._cachedSize;\n            }\n            if (this._texture._size) {\n                this._cachedSize.width = this._texture._size;\n                this._cachedSize.height = this._texture._size;\n                return this._cachedSize;\n            }\n        }\n        return this._cachedSize;\n    };\n    /**\n     * Get the base size of the texture.\n     * It can be different from the size if the texture has been resized for POT for instance\n     * @returns the base size\n     */\n    ThinTexture.prototype.getBaseSize = function () {\n        if (!this.isReady() || !this._texture) {\n            this._cachedBaseSize.width = 0;\n            this._cachedBaseSize.height = 0;\n            return this._cachedBaseSize;\n        }\n        if (this._texture._size) {\n            this._cachedBaseSize.width = this._texture._size;\n            this._cachedBaseSize.height = this._texture._size;\n            return this._cachedBaseSize;\n        }\n        this._cachedBaseSize.width = this._texture.baseWidth;\n        this._cachedBaseSize.height = this._texture.baseHeight;\n        return this._cachedBaseSize;\n    };\n    Object.defineProperty(ThinTexture.prototype, \"samplingMode\", {\n        /**\n         * Get the current sampling mode associated with the texture.\n         */\n        get: function () {\n            if (!this._texture) {\n                return this._initialSamplingMode;\n            }\n            return this._texture.samplingMode;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Update the sampling mode of the texture.\n     * Default is Trilinear mode.\n     *\n     * | Value | Type               | Description |\n     * | ----- | ------------------ | ----------- |\n     * | 1     | NEAREST_SAMPLINGMODE or NEAREST_NEAREST_MIPLINEAR  | Nearest is: mag = nearest, min = nearest, mip = linear |\n     * | 2     | BILINEAR_SAMPLINGMODE or LINEAR_LINEAR_MIPNEAREST | Bilinear is: mag = linear, min = linear, mip = nearest |\n     * | 3     | TRILINEAR_SAMPLINGMODE or LINEAR_LINEAR_MIPLINEAR | Trilinear is: mag = linear, min = linear, mip = linear |\n     * | 4     | NEAREST_NEAREST_MIPNEAREST |             |\n     * | 5    | NEAREST_LINEAR_MIPNEAREST |             |\n     * | 6    | NEAREST_LINEAR_MIPLINEAR |             |\n     * | 7    | NEAREST_LINEAR |             |\n     * | 8    | NEAREST_NEAREST |             |\n     * | 9   | LINEAR_NEAREST_MIPNEAREST |             |\n     * | 10   | LINEAR_NEAREST_MIPLINEAR |             |\n     * | 11   | LINEAR_LINEAR |             |\n     * | 12   | LINEAR_NEAREST |             |\n     *\n     *    > _mag_: magnification filter (close to the viewer)\n     *    > _min_: minification filter (far from the viewer)\n     *    > _mip_: filter used between mip map levels\n     *@param samplingMode Define the new sampling mode of the texture\n     */\n    ThinTexture.prototype.updateSamplingMode = function (samplingMode) {\n        if (this._texture && this._engine) {\n            this._engine.updateTextureSamplingMode(samplingMode, this._texture);\n        }\n    };\n    /**\n     * Release and destroy the underlying lower level texture aka internalTexture.\n     */\n    ThinTexture.prototype.releaseInternalTexture = function () {\n        if (this._texture) {\n            this._texture.dispose();\n            this._texture = null;\n        }\n    };\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    ThinTexture.prototype.dispose = function () {\n        if (this._texture) {\n            this.releaseInternalTexture();\n            this._engine = null;\n        }\n    };\n    return ThinTexture;\n}());\nexport { ThinTexture };\n//# sourceMappingURL=thinTexture.js.map","import { __assign, __extends } from \"tslib\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { Texture } from \"../../Materials/Textures/texture.js\";\nimport \"../../Engines/Extensions/engine.videoTexture.js\";\nimport \"../../Engines/Extensions/engine.dynamicTexture.js\";\nfunction removeSource(video) {\n    // Remove any <source> elements, etc.\n    while (video.firstChild) {\n        video.removeChild(video.firstChild);\n    }\n    // detach srcObject\n    video.srcObject = null;\n    // Set a blank src (https://html.spec.whatwg.org/multipage/media.html#best-practices-for-authors-using-media-elements)\n    video.src = \"\";\n    // Prevent non-important errors maybe (https://twitter.com/beraliv/status/1205214277956775936)\n    video.removeAttribute(\"src\");\n}\n/**\n * If you want to display a video in your scene, this is the special texture for that.\n * This special texture works similar to other textures, with the exception of a few parameters.\n * @see https://doc.babylonjs.com/divingDeeper/materials/using/videoTexture\n */\nvar VideoTexture = /** @class */ (function (_super) {\n    __extends(VideoTexture, _super);\n    /**\n     * Creates a video texture.\n     * If you want to display a video in your scene, this is the special texture for that.\n     * This special texture works similar to other textures, with the exception of a few parameters.\n     * @see https://doc.babylonjs.com/how_to/video_texture\n     * @param name optional name, will detect from video source, if not defined\n     * @param src can be used to provide an url, array of urls or an already setup HTML video element.\n     * @param scene is obviously the current scene.\n     * @param generateMipMaps can be used to turn on mipmaps (Can be expensive for videoTextures because they are often updated).\n     * @param invertY is false by default but can be used to invert video on Y axis\n     * @param samplingMode controls the sampling method and is set to TRILINEAR_SAMPLINGMODE by default\n     * @param settings allows finer control over video usage\n     * @param onError defines a callback triggered when an error occurred during the loading session\n     */\n    function VideoTexture(name, src, scene, generateMipMaps, invertY, samplingMode, settings, onError) {\n        if (generateMipMaps === void 0) { generateMipMaps = false; }\n        if (invertY === void 0) { invertY = false; }\n        if (samplingMode === void 0) { samplingMode = Texture.TRILINEAR_SAMPLINGMODE; }\n        if (settings === void 0) { settings = {}; }\n        var _this = _super.call(this, null, scene, !generateMipMaps, invertY) || this;\n        _this._onUserActionRequestedObservable = null;\n        _this._stillImageCaptured = false;\n        _this._displayingPosterTexture = false;\n        _this._frameId = -1;\n        _this._currentSrc = null;\n        _this._errorFound = false;\n        _this._createInternalTexture = function () {\n            if (_this._texture != null) {\n                if (_this._displayingPosterTexture) {\n                    _this._texture.dispose();\n                    _this._displayingPosterTexture = false;\n                }\n                else {\n                    return;\n                }\n            }\n            if (!_this._getEngine().needPOTTextures || (Tools.IsExponentOfTwo(_this.video.videoWidth) && Tools.IsExponentOfTwo(_this.video.videoHeight))) {\n                _this.wrapU = Texture.WRAP_ADDRESSMODE;\n                _this.wrapV = Texture.WRAP_ADDRESSMODE;\n            }\n            else {\n                _this.wrapU = Texture.CLAMP_ADDRESSMODE;\n                _this.wrapV = Texture.CLAMP_ADDRESSMODE;\n                _this._generateMipMaps = false;\n            }\n            _this._texture = _this._getEngine().createDynamicTexture(_this.video.videoWidth, _this.video.videoHeight, _this._generateMipMaps, _this.samplingMode);\n            if (!_this.video.autoplay && !_this._settings.poster) {\n                var oldHandler_1 = _this.video.onplaying;\n                var oldMuted_1 = _this.video.muted;\n                _this.video.muted = true;\n                _this.video.onplaying = function () {\n                    _this.video.muted = oldMuted_1;\n                    _this.video.onplaying = oldHandler_1;\n                    _this._updateInternalTexture();\n                    if (!_this._errorFound) {\n                        _this.video.pause();\n                    }\n                    if (_this.onLoadObservable.hasObservers()) {\n                        _this.onLoadObservable.notifyObservers(_this);\n                    }\n                };\n                _this._handlePlay();\n            }\n            else {\n                _this._updateInternalTexture();\n                if (_this.onLoadObservable.hasObservers()) {\n                    _this.onLoadObservable.notifyObservers(_this);\n                }\n            }\n        };\n        _this._reset = function () {\n            if (_this._texture == null) {\n                return;\n            }\n            if (!_this._displayingPosterTexture) {\n                _this._texture.dispose();\n                _this._texture = null;\n            }\n        };\n        _this._updateInternalTexture = function () {\n            if (_this._texture == null) {\n                return;\n            }\n            if (_this.video.readyState < _this.video.HAVE_CURRENT_DATA) {\n                return;\n            }\n            if (_this._displayingPosterTexture) {\n                return;\n            }\n            var frameId = _this.getScene().getFrameId();\n            if (_this._frameId === frameId) {\n                return;\n            }\n            _this._frameId = frameId;\n            _this._getEngine().updateVideoTexture(_this._texture, _this.video, _this._invertY);\n        };\n        _this._settings = __assign({ autoPlay: true, loop: true, autoUpdateTexture: true }, settings);\n        _this._onError = onError;\n        _this._generateMipMaps = generateMipMaps;\n        _this._initialSamplingMode = samplingMode;\n        _this.autoUpdateTexture = _this._settings.autoUpdateTexture;\n        _this._currentSrc = src;\n        _this.name = name || _this._getName(src);\n        _this.video = _this._getVideo(src);\n        if (_this._settings.poster) {\n            _this.video.poster = _this._settings.poster;\n        }\n        if (_this._settings.autoPlay !== undefined) {\n            _this.video.autoplay = _this._settings.autoPlay;\n        }\n        if (_this._settings.loop !== undefined) {\n            _this.video.loop = _this._settings.loop;\n        }\n        if (_this._settings.muted !== undefined) {\n            _this.video.muted = _this._settings.muted;\n        }\n        _this.video.setAttribute(\"playsinline\", \"\");\n        _this.video.addEventListener(\"paused\", _this._updateInternalTexture);\n        _this.video.addEventListener(\"seeked\", _this._updateInternalTexture);\n        _this.video.addEventListener(\"emptied\", _this._reset);\n        _this._createInternalTextureOnEvent = _this._settings.poster && !_this._settings.autoPlay ? \"play\" : \"canplay\";\n        _this.video.addEventListener(_this._createInternalTextureOnEvent, _this._createInternalTexture);\n        if (_this._settings.autoPlay) {\n            _this._handlePlay();\n        }\n        var videoHasEnoughData = _this.video.readyState >= _this.video.HAVE_CURRENT_DATA;\n        if (_this._settings.poster && (!_this._settings.autoPlay || !videoHasEnoughData)) {\n            _this._texture = _this._getEngine().createTexture(_this._settings.poster, false, !_this.invertY, scene);\n            _this._displayingPosterTexture = true;\n        }\n        else if (videoHasEnoughData) {\n            _this._createInternalTexture();\n        }\n        return _this;\n    }\n    Object.defineProperty(VideoTexture.prototype, \"onUserActionRequestedObservable\", {\n        /**\n         * Event triggered when a dom action is required by the user to play the video.\n         * This happens due to recent changes in browser policies preventing video to auto start.\n         */\n        get: function () {\n            if (!this._onUserActionRequestedObservable) {\n                this._onUserActionRequestedObservable = new Observable();\n            }\n            return this._onUserActionRequestedObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    VideoTexture.prototype._processError = function (reason) {\n        this._errorFound = true;\n        if (this._onError) {\n            this._onError(reason === null || reason === void 0 ? void 0 : reason.message);\n        }\n        else {\n            Logger.Error(reason === null || reason === void 0 ? void 0 : reason.message);\n        }\n    };\n    VideoTexture.prototype._handlePlay = function () {\n        var _this = this;\n        this._errorFound = false;\n        this.video.play().catch(function (reason) {\n            if ((reason === null || reason === void 0 ? void 0 : reason.name) === \"NotAllowedError\") {\n                if (_this._onUserActionRequestedObservable && _this._onUserActionRequestedObservable.hasObservers()) {\n                    _this._onUserActionRequestedObservable.notifyObservers(_this);\n                    return;\n                }\n                else if (!_this.video.muted) {\n                    Logger.Warn(\"Unable to autoplay a video with sound. Trying again with muted turned true\");\n                    _this.video.muted = true;\n                    _this._errorFound = false;\n                    _this.video.play().catch(function (otherReason) {\n                        _this._processError(otherReason);\n                    });\n                    return;\n                }\n            }\n            _this._processError(reason);\n        });\n    };\n    /**\n     * Get the current class name of the video texture useful for serialization or dynamic coding.\n     * @returns \"VideoTexture\"\n     */\n    VideoTexture.prototype.getClassName = function () {\n        return \"VideoTexture\";\n    };\n    VideoTexture.prototype._getName = function (src) {\n        if (src instanceof HTMLVideoElement) {\n            return src.currentSrc;\n        }\n        if (typeof src === \"object\") {\n            return src.toString();\n        }\n        return src;\n    };\n    VideoTexture.prototype._getVideo = function (src) {\n        if (src.isNative) {\n            return src;\n        }\n        if (src instanceof HTMLVideoElement) {\n            Tools.SetCorsBehavior(src.currentSrc, src);\n            return src;\n        }\n        var video = document.createElement(\"video\");\n        if (typeof src === \"string\") {\n            Tools.SetCorsBehavior(src, video);\n            video.src = src;\n        }\n        else {\n            Tools.SetCorsBehavior(src[0], video);\n            src.forEach(function (url) {\n                var source = document.createElement(\"source\");\n                source.src = url;\n                video.appendChild(source);\n            });\n        }\n        this.onDisposeObservable.addOnce(function () {\n            removeSource(video);\n        });\n        return video;\n    };\n    /**\n     * @hidden Internal method to initiate `update`.\n     */\n    VideoTexture.prototype._rebuild = function () {\n        this.update();\n    };\n    /**\n     * Update Texture in the `auto` mode. Does not do anything if `settings.autoUpdateTexture` is false.\n     */\n    VideoTexture.prototype.update = function () {\n        if (!this.autoUpdateTexture) {\n            // Expecting user to call `updateTexture` manually\n            return;\n        }\n        this.updateTexture(true);\n    };\n    /**\n     * Update Texture in `manual` mode. Does not do anything if not visible or paused.\n     * @param isVisible Visibility state, detected by user using `scene.getActiveMeshes()` or otherwise.\n     */\n    VideoTexture.prototype.updateTexture = function (isVisible) {\n        if (!isVisible) {\n            return;\n        }\n        if (this.video.paused && this._stillImageCaptured) {\n            return;\n        }\n        this._stillImageCaptured = true;\n        this._updateInternalTexture();\n    };\n    /**\n     * Change video content. Changing video instance or setting multiple urls (as in constructor) is not supported.\n     * @param url New url.\n     */\n    VideoTexture.prototype.updateURL = function (url) {\n        this.video.src = url;\n        this._currentSrc = url;\n    };\n    /**\n     * Clones the texture.\n     * @returns the cloned texture\n     */\n    VideoTexture.prototype.clone = function () {\n        return new VideoTexture(this.name, this._currentSrc, this.getScene(), this._generateMipMaps, this.invertY, this.samplingMode, this._settings);\n    };\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    VideoTexture.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._currentSrc = null;\n        if (this._onUserActionRequestedObservable) {\n            this._onUserActionRequestedObservable.clear();\n            this._onUserActionRequestedObservable = null;\n        }\n        this.video.removeEventListener(this._createInternalTextureOnEvent, this._createInternalTexture);\n        this.video.removeEventListener(\"paused\", this._updateInternalTexture);\n        this.video.removeEventListener(\"seeked\", this._updateInternalTexture);\n        this.video.removeEventListener(\"emptied\", this._reset);\n        this.video.pause();\n    };\n    /**\n     * Creates a video texture straight from a stream.\n     * @param scene Define the scene the texture should be created in\n     * @param stream Define the stream the texture should be created from\n     * @param constraints video constraints\n     * @param invertY Defines if the video should be stored with invert Y set to true (true by default)\n     * @returns The created video texture as a promise\n     */\n    VideoTexture.CreateFromStreamAsync = function (scene, stream, constraints, invertY) {\n        if (invertY === void 0) { invertY = true; }\n        var video = scene.getEngine().createVideoElement(constraints);\n        if (scene.getEngine()._badOS) {\n            // Yes... I know and I hope to remove it soon...\n            document.body.appendChild(video);\n            video.style.transform = \"scale(0.0001, 0.0001)\";\n            video.style.opacity = \"0\";\n            video.style.position = \"fixed\";\n            video.style.bottom = \"0px\";\n            video.style.right = \"0px\";\n        }\n        video.setAttribute(\"autoplay\", \"\");\n        video.setAttribute(\"muted\", \"true\");\n        video.setAttribute(\"playsinline\", \"\");\n        video.muted = true;\n        if (video.mozSrcObject !== undefined) {\n            // hack for Firefox < 19\n            video.mozSrcObject = stream;\n        }\n        else {\n            if (typeof video.srcObject == \"object\") {\n                video.srcObject = stream;\n            }\n            else {\n                window.URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n                // older API. See https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL#using_object_urls_for_media_streams\n                video.src = window.URL && window.URL.createObjectURL(stream);\n            }\n        }\n        return new Promise(function (resolve) {\n            var onPlaying = function () {\n                var videoTexture = new VideoTexture(\"video\", video, scene, true, invertY);\n                if (scene.getEngine()._badOS) {\n                    videoTexture.onDisposeObservable.addOnce(function () {\n                        video.remove();\n                    });\n                }\n                videoTexture.onDisposeObservable.addOnce(function () {\n                    removeSource(video);\n                });\n                resolve(videoTexture);\n                video.removeEventListener(\"playing\", onPlaying);\n            };\n            video.addEventListener(\"playing\", onPlaying);\n            video.play();\n        });\n    };\n    /**\n     * Creates a video texture straight from your WebCam video feed.\n     * @param scene Define the scene the texture should be created in\n     * @param constraints Define the constraints to use to create the web cam feed from WebRTC\n     * @param audioConstaints Define the audio constraints to use to create the web cam feed from WebRTC\n     * @param invertY Defines if the video should be stored with invert Y set to true (true by default)\n     * @returns The created video texture as a promise\n     */\n    VideoTexture.CreateFromWebCamAsync = function (scene, constraints, audioConstaints, invertY) {\n        var _this = this;\n        if (audioConstaints === void 0) { audioConstaints = false; }\n        if (invertY === void 0) { invertY = true; }\n        var constraintsDeviceId;\n        if (constraints && constraints.deviceId) {\n            constraintsDeviceId = {\n                exact: constraints.deviceId,\n            };\n        }\n        if (navigator.mediaDevices) {\n            return navigator.mediaDevices\n                .getUserMedia({\n                video: constraints,\n                audio: audioConstaints,\n            })\n                .then(function (stream) {\n                return _this.CreateFromStreamAsync(scene, stream, constraints, invertY);\n            });\n        }\n        else {\n            var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n            if (getUserMedia) {\n                getUserMedia({\n                    video: {\n                        deviceId: constraintsDeviceId,\n                        width: {\n                            min: (constraints && constraints.minWidth) || 256,\n                            max: (constraints && constraints.maxWidth) || 640,\n                        },\n                        height: {\n                            min: (constraints && constraints.minHeight) || 256,\n                            max: (constraints && constraints.maxHeight) || 480,\n                        },\n                    },\n                    audio: audioConstaints,\n                }, function (stream) {\n                    return _this.CreateFromStreamAsync(scene, stream, constraints, invertY);\n                }, function (e) {\n                    Logger.Error(e.name);\n                });\n            }\n        }\n        return Promise.reject(\"No support for userMedia on this device\");\n    };\n    /**\n     * Creates a video texture straight from your WebCam video feed.\n     * @param scene Defines the scene the texture should be created in\n     * @param onReady Defines a callback to triggered once the texture will be ready\n     * @param constraints Defines the constraints to use to create the web cam feed from WebRTC\n     * @param audioConstaints Defines the audio constraints to use to create the web cam feed from WebRTC\n     * @param invertY Defines if the video should be stored with invert Y set to true (true by default)\n     */\n    VideoTexture.CreateFromWebCam = function (scene, onReady, constraints, audioConstaints, invertY) {\n        if (audioConstaints === void 0) { audioConstaints = false; }\n        if (invertY === void 0) { invertY = true; }\n        this.CreateFromWebCamAsync(scene, constraints, audioConstaints, invertY)\n            .then(function (videoTexture) {\n            if (onReady) {\n                onReady(videoTexture);\n            }\n        })\n            .catch(function (err) {\n            Logger.Error(err.name);\n        });\n    };\n    return VideoTexture;\n}(Texture));\nexport { VideoTexture };\n//# sourceMappingURL=videoTexture.js.map","import { __decorate } from \"tslib\";\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\n/**\n * The color grading curves provide additional color adjustment that is applied after any color grading transform (3D LUT).\n * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\n * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\n * corresponding to low luminance, medium luminance, and high luminance areas respectively.\n */\nvar ColorCurves = /** @class */ (function () {\n    function ColorCurves() {\n        this._dirty = true;\n        this._tempColor = new Color4(0, 0, 0, 0);\n        this._globalCurve = new Color4(0, 0, 0, 0);\n        this._highlightsCurve = new Color4(0, 0, 0, 0);\n        this._midtonesCurve = new Color4(0, 0, 0, 0);\n        this._shadowsCurve = new Color4(0, 0, 0, 0);\n        this._positiveCurve = new Color4(0, 0, 0, 0);\n        this._negativeCurve = new Color4(0, 0, 0, 0);\n        this._globalHue = 30;\n        this._globalDensity = 0;\n        this._globalSaturation = 0;\n        this._globalExposure = 0;\n        this._highlightsHue = 30;\n        this._highlightsDensity = 0;\n        this._highlightsSaturation = 0;\n        this._highlightsExposure = 0;\n        this._midtonesHue = 30;\n        this._midtonesDensity = 0;\n        this._midtonesSaturation = 0;\n        this._midtonesExposure = 0;\n        this._shadowsHue = 30;\n        this._shadowsDensity = 0;\n        this._shadowsSaturation = 0;\n        this._shadowsExposure = 0;\n    }\n    Object.defineProperty(ColorCurves.prototype, \"globalHue\", {\n        /**\n         * Gets the global Hue value.\n         * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\n         */\n        get: function () {\n            return this._globalHue;\n        },\n        /**\n         * Sets the global Hue value.\n         * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\n         */\n        set: function (value) {\n            this._globalHue = value;\n            this._dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorCurves.prototype, \"globalDensity\", {\n        /**\n         * Gets the global Density value.\n         * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\n         * Values less than zero provide a filter of opposite hue.\n         */\n        get: function () {\n            return this._globalDensity;\n        },\n        /**\n         * Sets the global Density value.\n         * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\n         * Values less than zero provide a filter of opposite hue.\n         */\n        set: function (value) {\n            this._globalDensity = value;\n            this._dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorCurves.prototype, \"globalSaturation\", {\n        /**\n         * Gets the global Saturation value.\n         * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\n         */\n        get: function () {\n            return this._globalSaturation;\n        },\n        /**\n         * Sets the global Saturation value.\n         * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\n         */\n        set: function (value) {\n            this._globalSaturation = value;\n            this._dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorCurves.prototype, \"globalExposure\", {\n        /**\n         * Gets the global Exposure value.\n         * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\n         */\n        get: function () {\n            return this._globalExposure;\n        },\n        /**\n         * Sets the global Exposure value.\n         * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\n         */\n        set: function (value) {\n            this._globalExposure = value;\n            this._dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorCurves.prototype, \"highlightsHue\", {\n        /**\n         * Gets the highlights Hue value.\n         * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\n         */\n        get: function () {\n            return this._highlightsHue;\n        },\n        /**\n         * Sets the highlights Hue value.\n         * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\n         */\n        set: function (value) {\n            this._highlightsHue = value;\n            this._dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorCurves.prototype, \"highlightsDensity\", {\n        /**\n         * Gets the highlights Density value.\n         * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\n         * Values less than zero provide a filter of opposite hue.\n         */\n        get: function () {\n            return this._highlightsDensity;\n        },\n        /**\n         * Sets the highlights Density value.\n         * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\n         * Values less than zero provide a filter of opposite hue.\n         */\n        set: function (value) {\n            this._highlightsDensity = value;\n            this._dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorCurves.prototype, \"highlightsSaturation\", {\n        /**\n         * Gets the highlights Saturation value.\n         * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\n         */\n        get: function () {\n            return this._highlightsSaturation;\n        },\n        /**\n         * Sets the highlights Saturation value.\n         * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\n         */\n        set: function (value) {\n            this._highlightsSaturation = value;\n            this._dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorCurves.prototype, \"highlightsExposure\", {\n        /**\n         * Gets the highlights Exposure value.\n         * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\n         */\n        get: function () {\n            return this._highlightsExposure;\n        },\n        /**\n         * Sets the highlights Exposure value.\n         * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\n         */\n        set: function (value) {\n            this._highlightsExposure = value;\n            this._dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorCurves.prototype, \"midtonesHue\", {\n        /**\n         * Gets the midtones Hue value.\n         * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\n         */\n        get: function () {\n            return this._midtonesHue;\n        },\n        /**\n         * Sets the midtones Hue value.\n         * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\n         */\n        set: function (value) {\n            this._midtonesHue = value;\n            this._dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorCurves.prototype, \"midtonesDensity\", {\n        /**\n         * Gets the midtones Density value.\n         * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\n         * Values less than zero provide a filter of opposite hue.\n         */\n        get: function () {\n            return this._midtonesDensity;\n        },\n        /**\n         * Sets the midtones Density value.\n         * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\n         * Values less than zero provide a filter of opposite hue.\n         */\n        set: function (value) {\n            this._midtonesDensity = value;\n            this._dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorCurves.prototype, \"midtonesSaturation\", {\n        /**\n         * Gets the midtones Saturation value.\n         * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\n         */\n        get: function () {\n            return this._midtonesSaturation;\n        },\n        /**\n         * Sets the midtones Saturation value.\n         * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\n         */\n        set: function (value) {\n            this._midtonesSaturation = value;\n            this._dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorCurves.prototype, \"midtonesExposure\", {\n        /**\n         * Gets the midtones Exposure value.\n         * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\n         */\n        get: function () {\n            return this._midtonesExposure;\n        },\n        /**\n         * Sets the midtones Exposure value.\n         * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\n         */\n        set: function (value) {\n            this._midtonesExposure = value;\n            this._dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorCurves.prototype, \"shadowsHue\", {\n        /**\n         * Gets the shadows Hue value.\n         * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\n         */\n        get: function () {\n            return this._shadowsHue;\n        },\n        /**\n         * Sets the shadows Hue value.\n         * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\n         */\n        set: function (value) {\n            this._shadowsHue = value;\n            this._dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorCurves.prototype, \"shadowsDensity\", {\n        /**\n         * Gets the shadows Density value.\n         * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\n         * Values less than zero provide a filter of opposite hue.\n         */\n        get: function () {\n            return this._shadowsDensity;\n        },\n        /**\n         * Sets the shadows Density value.\n         * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\n         * Values less than zero provide a filter of opposite hue.\n         */\n        set: function (value) {\n            this._shadowsDensity = value;\n            this._dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorCurves.prototype, \"shadowsSaturation\", {\n        /**\n         * Gets the shadows Saturation value.\n         * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\n         */\n        get: function () {\n            return this._shadowsSaturation;\n        },\n        /**\n         * Sets the shadows Saturation value.\n         * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\n         */\n        set: function (value) {\n            this._shadowsSaturation = value;\n            this._dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorCurves.prototype, \"shadowsExposure\", {\n        /**\n         * Gets the shadows Exposure value.\n         * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\n         */\n        get: function () {\n            return this._shadowsExposure;\n        },\n        /**\n         * Sets the shadows Exposure value.\n         * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\n         */\n        set: function (value) {\n            this._shadowsExposure = value;\n            this._dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns the class name\n     * @returns The class name\n     */\n    ColorCurves.prototype.getClassName = function () {\n        return \"ColorCurves\";\n    };\n    /**\n     * Binds the color curves to the shader.\n     * @param colorCurves The color curve to bind\n     * @param effect The effect to bind to\n     * @param positiveUniform The positive uniform shader parameter\n     * @param neutralUniform The neutral uniform shader parameter\n     * @param negativeUniform The negative uniform shader parameter\n     */\n    ColorCurves.Bind = function (colorCurves, effect, positiveUniform, neutralUniform, negativeUniform) {\n        if (positiveUniform === void 0) { positiveUniform = \"vCameraColorCurvePositive\"; }\n        if (neutralUniform === void 0) { neutralUniform = \"vCameraColorCurveNeutral\"; }\n        if (negativeUniform === void 0) { negativeUniform = \"vCameraColorCurveNegative\"; }\n        if (colorCurves._dirty) {\n            colorCurves._dirty = false;\n            // Fill in global info.\n            colorCurves._getColorGradingDataToRef(colorCurves._globalHue, colorCurves._globalDensity, colorCurves._globalSaturation, colorCurves._globalExposure, colorCurves._globalCurve);\n            // Compute highlights info.\n            colorCurves._getColorGradingDataToRef(colorCurves._highlightsHue, colorCurves._highlightsDensity, colorCurves._highlightsSaturation, colorCurves._highlightsExposure, colorCurves._tempColor);\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._highlightsCurve);\n            // Compute midtones info.\n            colorCurves._getColorGradingDataToRef(colorCurves._midtonesHue, colorCurves._midtonesDensity, colorCurves._midtonesSaturation, colorCurves._midtonesExposure, colorCurves._tempColor);\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._midtonesCurve);\n            // Compute shadows info.\n            colorCurves._getColorGradingDataToRef(colorCurves._shadowsHue, colorCurves._shadowsDensity, colorCurves._shadowsSaturation, colorCurves._shadowsExposure, colorCurves._tempColor);\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._shadowsCurve);\n            // Compute deltas (neutral is midtones).\n            colorCurves._highlightsCurve.subtractToRef(colorCurves._midtonesCurve, colorCurves._positiveCurve);\n            colorCurves._midtonesCurve.subtractToRef(colorCurves._shadowsCurve, colorCurves._negativeCurve);\n        }\n        if (effect) {\n            effect.setFloat4(positiveUniform, colorCurves._positiveCurve.r, colorCurves._positiveCurve.g, colorCurves._positiveCurve.b, colorCurves._positiveCurve.a);\n            effect.setFloat4(neutralUniform, colorCurves._midtonesCurve.r, colorCurves._midtonesCurve.g, colorCurves._midtonesCurve.b, colorCurves._midtonesCurve.a);\n            effect.setFloat4(negativeUniform, colorCurves._negativeCurve.r, colorCurves._negativeCurve.g, colorCurves._negativeCurve.b, colorCurves._negativeCurve.a);\n        }\n    };\n    /**\n     * Prepare the list of uniforms associated with the ColorCurves effects.\n     * @param uniformsList The list of uniforms used in the effect\n     */\n    ColorCurves.PrepareUniforms = function (uniformsList) {\n        uniformsList.push(\"vCameraColorCurveNeutral\", \"vCameraColorCurvePositive\", \"vCameraColorCurveNegative\");\n    };\n    /**\n     * Returns color grading data based on a hue, density, saturation and exposure value.\n     * @param hue\n     * @param density\n     * @param saturation The saturation.\n     * @param exposure The exposure.\n     * @param result The result data container.\n     */\n    ColorCurves.prototype._getColorGradingDataToRef = function (hue, density, saturation, exposure, result) {\n        if (hue == null) {\n            return;\n        }\n        hue = ColorCurves._Clamp(hue, 0, 360);\n        density = ColorCurves._Clamp(density, -100, 100);\n        saturation = ColorCurves._Clamp(saturation, -100, 100);\n        exposure = ColorCurves._Clamp(exposure, -100, 100);\n        // Remap the slider/config filter density with non-linear mapping and also scale by half\n        // so that the maximum filter density is only 50% control. This provides fine control\n        // for small values and reasonable range.\n        density = ColorCurves._ApplyColorGradingSliderNonlinear(density);\n        density *= 0.5;\n        exposure = ColorCurves._ApplyColorGradingSliderNonlinear(exposure);\n        if (density < 0) {\n            density *= -1;\n            hue = (hue + 180) % 360;\n        }\n        ColorCurves._FromHSBToRef(hue, density, 50 + 0.25 * exposure, result);\n        result.scaleToRef(2, result);\n        result.a = 1 + 0.01 * saturation;\n    };\n    /**\n     * Takes an input slider value and returns an adjusted value that provides extra control near the centre.\n     * @param value The input slider value in range [-100,100].\n     * @returns Adjusted value.\n     */\n    ColorCurves._ApplyColorGradingSliderNonlinear = function (value) {\n        value /= 100;\n        var x = Math.abs(value);\n        x = Math.pow(x, 2);\n        if (value < 0) {\n            x *= -1;\n        }\n        x *= 100;\n        return x;\n    };\n    /**\n     * Returns an RGBA Color4 based on Hue, Saturation and Brightness (also referred to as value, HSV).\n     * @param hue The hue (H) input.\n     * @param saturation The saturation (S) input.\n     * @param brightness The brightness (B) input.\n     * @param result\n     * @result An RGBA color represented as Vector4.\n     */\n    ColorCurves._FromHSBToRef = function (hue, saturation, brightness, result) {\n        var h = ColorCurves._Clamp(hue, 0, 360);\n        var s = ColorCurves._Clamp(saturation / 100, 0, 1);\n        var v = ColorCurves._Clamp(brightness / 100, 0, 1);\n        if (s === 0) {\n            result.r = v;\n            result.g = v;\n            result.b = v;\n        }\n        else {\n            // sector 0 to 5\n            h /= 60;\n            var i = Math.floor(h);\n            // fractional part of h\n            var f = h - i;\n            var p = v * (1 - s);\n            var q = v * (1 - s * f);\n            var t = v * (1 - s * (1 - f));\n            switch (i) {\n                case 0:\n                    result.r = v;\n                    result.g = t;\n                    result.b = p;\n                    break;\n                case 1:\n                    result.r = q;\n                    result.g = v;\n                    result.b = p;\n                    break;\n                case 2:\n                    result.r = p;\n                    result.g = v;\n                    result.b = t;\n                    break;\n                case 3:\n                    result.r = p;\n                    result.g = q;\n                    result.b = v;\n                    break;\n                case 4:\n                    result.r = t;\n                    result.g = p;\n                    result.b = v;\n                    break;\n                default:\n                    // case 5:\n                    result.r = v;\n                    result.g = p;\n                    result.b = q;\n                    break;\n            }\n        }\n        result.a = 1;\n    };\n    /**\n     * Returns a value clamped between min and max\n     * @param value The value to clamp\n     * @param min The minimum of value\n     * @param max The maximum of value\n     * @returns The clamped value.\n     */\n    ColorCurves._Clamp = function (value, min, max) {\n        return Math.min(Math.max(value, min), max);\n    };\n    /**\n     * Clones the current color curve instance.\n     * @return The cloned curves\n     */\n    ColorCurves.prototype.clone = function () {\n        return SerializationHelper.Clone(function () { return new ColorCurves(); }, this);\n    };\n    /**\n     * Serializes the current color curve instance to a json representation.\n     * @return a JSON representation\n     */\n    ColorCurves.prototype.serialize = function () {\n        return SerializationHelper.Serialize(this);\n    };\n    /**\n     * Parses the color curve from a json representation.\n     * @param source the JSON source to parse\n     * @return The parsed curves\n     */\n    ColorCurves.Parse = function (source) {\n        return SerializationHelper.Parse(function () { return new ColorCurves(); }, source, null, null);\n    };\n    __decorate([\n        serialize()\n    ], ColorCurves.prototype, \"_globalHue\", void 0);\n    __decorate([\n        serialize()\n    ], ColorCurves.prototype, \"_globalDensity\", void 0);\n    __decorate([\n        serialize()\n    ], ColorCurves.prototype, \"_globalSaturation\", void 0);\n    __decorate([\n        serialize()\n    ], ColorCurves.prototype, \"_globalExposure\", void 0);\n    __decorate([\n        serialize()\n    ], ColorCurves.prototype, \"_highlightsHue\", void 0);\n    __decorate([\n        serialize()\n    ], ColorCurves.prototype, \"_highlightsDensity\", void 0);\n    __decorate([\n        serialize()\n    ], ColorCurves.prototype, \"_highlightsSaturation\", void 0);\n    __decorate([\n        serialize()\n    ], ColorCurves.prototype, \"_highlightsExposure\", void 0);\n    __decorate([\n        serialize()\n    ], ColorCurves.prototype, \"_midtonesHue\", void 0);\n    __decorate([\n        serialize()\n    ], ColorCurves.prototype, \"_midtonesDensity\", void 0);\n    __decorate([\n        serialize()\n    ], ColorCurves.prototype, \"_midtonesSaturation\", void 0);\n    __decorate([\n        serialize()\n    ], ColorCurves.prototype, \"_midtonesExposure\", void 0);\n    return ColorCurves;\n}());\nexport { ColorCurves };\n// References the dependencies.\nSerializationHelper._ColorCurvesParser = ColorCurves.Parse;\n//# sourceMappingURL=colorCurves.js.map","/** @hidden */\nvar DrawWrapper = /** @class */ (function () {\n    function DrawWrapper(engine, createMaterialContext) {\n        if (createMaterialContext === void 0) { createMaterialContext = true; }\n        this.effect = null;\n        this.defines = null;\n        this.drawContext = engine.createDrawContext();\n        if (createMaterialContext) {\n            this.materialContext = engine.createMaterialContext();\n        }\n    }\n    DrawWrapper.IsWrapper = function (effect) {\n        return effect.getPipelineContext === undefined;\n    };\n    DrawWrapper.GetEffect = function (effect) {\n        return effect.getPipelineContext === undefined ? effect.effect : effect;\n    };\n    DrawWrapper.prototype.setEffect = function (effect, defines, resetContext) {\n        var _a;\n        if (resetContext === void 0) { resetContext = true; }\n        this.effect = effect;\n        if (defines !== undefined) {\n            this.defines = defines;\n        }\n        if (resetContext) {\n            (_a = this.drawContext) === null || _a === void 0 ? void 0 : _a.reset();\n        }\n    };\n    DrawWrapper.prototype.dispose = function () {\n        var _a;\n        (_a = this.drawContext) === null || _a === void 0 ? void 0 : _a.dispose();\n    };\n    return DrawWrapper;\n}());\nexport { DrawWrapper };\n//# sourceMappingURL=drawWrapper.js.map","import { Observable } from \"../Misc/observable.js\";\n\nimport { GetDOMTextContent, IsWindowObjectExist } from \"../Misc/domManagement.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { ShaderProcessor } from \"../Engines/Processors/shaderProcessor.js\";\nimport { ShaderStore as EngineShaderStore } from \"../Engines/shaderStore.js\";\nimport { ShaderLanguage } from \"./shaderLanguage.js\";\n/**\n * Effect containing vertex and fragment shader that can be executed on an object.\n */\nvar Effect = /** @class */ (function () {\n    /**\n     * Instantiates an effect.\n     * An effect can be used to create/manage/execute vertex and fragment shaders.\n     * @param baseName Name of the effect.\n     * @param attributesNamesOrOptions List of attribute names that will be passed to the shader or set of all options to create the effect.\n     * @param uniformsNamesOrEngine List of uniform variable names that will be passed to the shader or the engine that will be used to render effect.\n     * @param samplers List of sampler variables that will be passed to the shader.\n     * @param engine Engine to be used to render the effect\n     * @param defines Define statements to be added to the shader.\n     * @param fallbacks Possible fallbacks for this effect to improve performance when needed.\n     * @param onCompiled Callback that will be called when the shader is compiled.\n     * @param onError Callback that will be called if an error occurs during shader compilation.\n     * @param indexParameters Parameters to be used with Babylons include syntax to iterate over an array (eg. {lights: 10})\n     * @param key Effect Key identifying uniquely compiled shader variants\n     * @param shaderLanguage the language the shader is written in (default: GLSL)\n     */\n    function Effect(baseName, attributesNamesOrOptions, uniformsNamesOrEngine, samplers, engine, defines, fallbacks, onCompiled, onError, indexParameters, key, shaderLanguage) {\n        if (samplers === void 0) { samplers = null; }\n        if (defines === void 0) { defines = null; }\n        if (fallbacks === void 0) { fallbacks = null; }\n        if (onCompiled === void 0) { onCompiled = null; }\n        if (onError === void 0) { onError = null; }\n        if (key === void 0) { key = \"\"; }\n        if (shaderLanguage === void 0) { shaderLanguage = ShaderLanguage.GLSL; }\n        var _this = this;\n        var _a, _b, _c;\n        /**\n         * Name of the effect.\n         */\n        this.name = null;\n        /**\n         * String container all the define statements that should be set on the shader.\n         */\n        this.defines = \"\";\n        /**\n         * Callback that will be called when the shader is compiled.\n         */\n        this.onCompiled = null;\n        /**\n         * Callback that will be called if an error occurs during shader compilation.\n         */\n        this.onError = null;\n        /**\n         * Callback that will be called when effect is bound.\n         */\n        this.onBind = null;\n        /**\n         * Unique ID of the effect.\n         */\n        this.uniqueId = 0;\n        /**\n         * Observable that will be called when the shader is compiled.\n         * It is recommended to use executeWhenCompile() or to make sure that scene.isReady() is called to get this observable raised.\n         */\n        this.onCompileObservable = new Observable();\n        /**\n         * Observable that will be called if an error occurs during shader compilation.\n         */\n        this.onErrorObservable = new Observable();\n        /** @hidden */\n        this._onBindObservable = null;\n        /**\n         * @hidden\n         * Specifies if the effect was previously ready\n         */\n        this._wasPreviouslyReady = false;\n        this._isDisposed = false;\n        /** @hidden */\n        this._bonesComputationForcedToCPU = false;\n        /** @hidden */\n        this._uniformBuffersNames = {};\n        /** @hidden */\n        this._multiTarget = false;\n        this._samplers = {};\n        this._isReady = false;\n        this._compilationError = \"\";\n        this._allFallbacksProcessed = false;\n        this._uniforms = {};\n        /**\n         * Key for the effect.\n         * @hidden\n         */\n        this._key = \"\";\n        this._fallbacks = null;\n        this._vertexSourceCodeOverride = \"\";\n        this._fragmentSourceCodeOverride = \"\";\n        this._transformFeedbackVaryings = null;\n        /**\n         * Compiled shader to webGL program.\n         * @hidden\n         */\n        this._pipelineContext = null;\n        /** @hidden */\n        this._vertexSourceCode = \"\";\n        /** @hidden */\n        this._fragmentSourceCode = \"\";\n        /** @hidden */\n        this._rawVertexSourceCode = \"\";\n        /** @hidden */\n        this._rawFragmentSourceCode = \"\";\n        this.name = baseName;\n        this._key = key;\n        var processCodeAfterIncludes = undefined;\n        var processFinalCode = null;\n        if (attributesNamesOrOptions.attributes) {\n            var options = attributesNamesOrOptions;\n            this._engine = uniformsNamesOrEngine;\n            this._attributesNames = options.attributes;\n            this._uniformsNames = options.uniformsNames.concat(options.samplers);\n            this._samplerList = options.samplers.slice();\n            this.defines = options.defines;\n            this.onError = options.onError;\n            this.onCompiled = options.onCompiled;\n            this._fallbacks = options.fallbacks;\n            this._indexParameters = options.indexParameters;\n            this._transformFeedbackVaryings = options.transformFeedbackVaryings || null;\n            this._multiTarget = !!options.multiTarget;\n            this._shaderLanguage = (_a = options.shaderLanguage) !== null && _a !== void 0 ? _a : ShaderLanguage.GLSL;\n            if (options.uniformBuffersNames) {\n                this._uniformBuffersNamesList = options.uniformBuffersNames.slice();\n                for (var i = 0; i < options.uniformBuffersNames.length; i++) {\n                    this._uniformBuffersNames[options.uniformBuffersNames[i]] = i;\n                }\n            }\n            processFinalCode = (_b = options.processFinalCode) !== null && _b !== void 0 ? _b : null;\n            processCodeAfterIncludes = (_c = options.processCodeAfterIncludes) !== null && _c !== void 0 ? _c : undefined;\n        }\n        else {\n            this._engine = engine;\n            this.defines = defines == null ? \"\" : defines;\n            this._uniformsNames = uniformsNamesOrEngine.concat(samplers);\n            this._samplerList = samplers ? samplers.slice() : [];\n            this._attributesNames = attributesNamesOrOptions;\n            this._uniformBuffersNamesList = [];\n            this._shaderLanguage = shaderLanguage;\n            this.onError = onError;\n            this.onCompiled = onCompiled;\n            this._indexParameters = indexParameters;\n            this._fallbacks = fallbacks;\n        }\n        this._attributeLocationByName = {};\n        this.uniqueId = Effect._UniqueIdSeed++;\n        var vertexSource;\n        var fragmentSource;\n        var hostDocument = IsWindowObjectExist() ? this._engine.getHostDocument() : null;\n        if (baseName.vertexSource) {\n            vertexSource = \"source:\" + baseName.vertexSource;\n        }\n        else if (baseName.vertexElement) {\n            vertexSource = hostDocument ? hostDocument.getElementById(baseName.vertexElement) : null;\n            if (!vertexSource) {\n                vertexSource = baseName.vertexElement;\n            }\n        }\n        else {\n            vertexSource = baseName.vertex || baseName;\n        }\n        if (baseName.fragmentSource) {\n            fragmentSource = \"source:\" + baseName.fragmentSource;\n        }\n        else if (baseName.fragmentElement) {\n            fragmentSource = hostDocument ? hostDocument.getElementById(baseName.fragmentElement) : null;\n            if (!fragmentSource) {\n                fragmentSource = baseName.fragmentElement;\n            }\n        }\n        else {\n            fragmentSource = baseName.fragment || baseName;\n        }\n        this._processingContext = this._engine._getShaderProcessingContext(this._shaderLanguage);\n        var processorOptions = {\n            defines: this.defines.split(\"\\n\"),\n            indexParameters: this._indexParameters,\n            isFragment: false,\n            shouldUseHighPrecisionShader: this._engine._shouldUseHighPrecisionShader,\n            processor: this._engine._getShaderProcessor(this._shaderLanguage),\n            supportsUniformBuffers: this._engine.supportsUniformBuffers,\n            shadersRepository: EngineShaderStore.GetShadersRepository(this._shaderLanguage),\n            includesShadersStore: EngineShaderStore.GetIncludesShadersStore(this._shaderLanguage),\n            version: (this._engine.version * 100).toString(),\n            platformName: this._engine.shaderPlatformName,\n            processingContext: this._processingContext,\n            isNDCHalfZRange: this._engine.isNDCHalfZRange,\n            useReverseDepthBuffer: this._engine.useReverseDepthBuffer,\n            processCodeAfterIncludes: processCodeAfterIncludes,\n        };\n        var shaderCodes = [undefined, undefined];\n        var shadersLoaded = function () {\n            if (shaderCodes[0] && shaderCodes[1]) {\n                processorOptions.isFragment = true;\n                var migratedVertexCode_1 = shaderCodes[0], fragmentCode = shaderCodes[1];\n                ShaderProcessor.Process(fragmentCode, processorOptions, function (migratedFragmentCode) {\n                    if (processFinalCode) {\n                        migratedFragmentCode = processFinalCode(\"fragment\", migratedFragmentCode);\n                    }\n                    var finalShaders = ShaderProcessor.Finalize(migratedVertexCode_1, migratedFragmentCode, processorOptions);\n                    _this._useFinalCode(finalShaders.vertexCode, finalShaders.fragmentCode, baseName);\n                }, _this._engine);\n            }\n        };\n        this._loadShader(vertexSource, \"Vertex\", \"\", function (vertexCode) {\n            ShaderProcessor.Initialize(processorOptions);\n            ShaderProcessor.Process(vertexCode, processorOptions, function (migratedVertexCode) {\n                _this._rawVertexSourceCode = vertexCode;\n                if (processFinalCode) {\n                    migratedVertexCode = processFinalCode(\"vertex\", migratedVertexCode);\n                }\n                shaderCodes[0] = migratedVertexCode;\n                shadersLoaded();\n            }, _this._engine);\n        });\n        this._loadShader(fragmentSource, \"Fragment\", \"Pixel\", function (fragmentCode) {\n            _this._rawFragmentSourceCode = fragmentCode;\n            shaderCodes[1] = fragmentCode;\n            shadersLoaded();\n        });\n    }\n    Object.defineProperty(Effect, \"ShadersRepository\", {\n        /**\n         * Gets or sets the relative url used to load shaders if using the engine in non-minified mode\n         */\n        get: function () {\n            return EngineShaderStore.ShadersRepository;\n        },\n        set: function (repo) {\n            EngineShaderStore.ShadersRepository = repo;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Effect.prototype, \"onBindObservable\", {\n        /**\n         * Observable that will be called when effect is bound.\n         */\n        get: function () {\n            if (!this._onBindObservable) {\n                this._onBindObservable = new Observable();\n            }\n            return this._onBindObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Effect.prototype._useFinalCode = function (migratedVertexCode, migratedFragmentCode, baseName) {\n        if (baseName) {\n            var vertex = baseName.vertexElement || baseName.vertex || baseName.spectorName || baseName;\n            var fragment = baseName.fragmentElement || baseName.fragment || baseName.spectorName || baseName;\n            this._vertexSourceCode = (this._shaderLanguage === ShaderLanguage.WGSL ? \"//\" : \"\") + \"#define SHADER_NAME vertex:\" + vertex + \"\\n\" + migratedVertexCode;\n            this._fragmentSourceCode = (this._shaderLanguage === ShaderLanguage.WGSL ? \"//\" : \"\") + \"#define SHADER_NAME fragment:\" + fragment + \"\\n\" + migratedFragmentCode;\n        }\n        else {\n            this._vertexSourceCode = migratedVertexCode;\n            this._fragmentSourceCode = migratedFragmentCode;\n        }\n        this._prepareEffect();\n    };\n    Object.defineProperty(Effect.prototype, \"key\", {\n        /**\n         * Unique key for this effect\n         */\n        get: function () {\n            return this._key;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * If the effect has been compiled and prepared.\n     * @returns if the effect is compiled and prepared.\n     */\n    Effect.prototype.isReady = function () {\n        try {\n            return this._isReadyInternal();\n        }\n        catch (_a) {\n            return false;\n        }\n    };\n    Effect.prototype._isReadyInternal = function () {\n        if (this._isReady) {\n            return true;\n        }\n        if (this._pipelineContext) {\n            return this._pipelineContext.isReady;\n        }\n        return false;\n    };\n    /**\n     * The engine the effect was initialized with.\n     * @returns the engine.\n     */\n    Effect.prototype.getEngine = function () {\n        return this._engine;\n    };\n    /**\n     * The pipeline context for this effect\n     * @returns the associated pipeline context\n     */\n    Effect.prototype.getPipelineContext = function () {\n        return this._pipelineContext;\n    };\n    /**\n     * The set of names of attribute variables for the shader.\n     * @returns An array of attribute names.\n     */\n    Effect.prototype.getAttributesNames = function () {\n        return this._attributesNames;\n    };\n    /**\n     * Returns the attribute at the given index.\n     * @param index The index of the attribute.\n     * @returns The location of the attribute.\n     */\n    Effect.prototype.getAttributeLocation = function (index) {\n        return this._attributes[index];\n    };\n    /**\n     * Returns the attribute based on the name of the variable.\n     * @param name of the attribute to look up.\n     * @returns the attribute location.\n     */\n    Effect.prototype.getAttributeLocationByName = function (name) {\n        return this._attributeLocationByName[name];\n    };\n    /**\n     * The number of attributes.\n     * @returns the number of attributes.\n     */\n    Effect.prototype.getAttributesCount = function () {\n        return this._attributes.length;\n    };\n    /**\n     * Gets the index of a uniform variable.\n     * @param uniformName of the uniform to look up.\n     * @returns the index.\n     */\n    Effect.prototype.getUniformIndex = function (uniformName) {\n        return this._uniformsNames.indexOf(uniformName);\n    };\n    /**\n     * Returns the attribute based on the name of the variable.\n     * @param uniformName of the uniform to look up.\n     * @returns the location of the uniform.\n     */\n    Effect.prototype.getUniform = function (uniformName) {\n        return this._uniforms[uniformName];\n    };\n    /**\n     * Returns an array of sampler variable names\n     * @returns The array of sampler variable names.\n     */\n    Effect.prototype.getSamplers = function () {\n        return this._samplerList;\n    };\n    /**\n     * Returns an array of uniform variable names\n     * @returns The array of uniform variable names.\n     */\n    Effect.prototype.getUniformNames = function () {\n        return this._uniformsNames;\n    };\n    /**\n     * Returns an array of uniform buffer variable names\n     * @returns The array of uniform buffer variable names.\n     */\n    Effect.prototype.getUniformBuffersNames = function () {\n        return this._uniformBuffersNamesList;\n    };\n    /**\n     * Returns the index parameters used to create the effect\n     * @returns The index parameters object\n     */\n    Effect.prototype.getIndexParameters = function () {\n        return this._indexParameters;\n    };\n    /**\n     * The error from the last compilation.\n     * @returns the error string.\n     */\n    Effect.prototype.getCompilationError = function () {\n        return this._compilationError;\n    };\n    /**\n     * Gets a boolean indicating that all fallbacks were used during compilation\n     * @returns true if all fallbacks were used\n     */\n    Effect.prototype.allFallbacksProcessed = function () {\n        return this._allFallbacksProcessed;\n    };\n    /**\n     * Adds a callback to the onCompiled observable and call the callback immediately if already ready.\n     * @param func The callback to be used.\n     */\n    Effect.prototype.executeWhenCompiled = function (func) {\n        var _this = this;\n        if (this.isReady()) {\n            func(this);\n            return;\n        }\n        this.onCompileObservable.add(function (effect) {\n            func(effect);\n        });\n        if (!this._pipelineContext || this._pipelineContext.isAsync) {\n            setTimeout(function () {\n                _this._checkIsReady(null);\n            }, 16);\n        }\n    };\n    Effect.prototype._checkIsReady = function (previousPipelineContext) {\n        var _this = this;\n        try {\n            if (this._isReadyInternal()) {\n                return;\n            }\n        }\n        catch (e) {\n            this._processCompilationErrors(e, previousPipelineContext);\n            return;\n        }\n        if (this._isDisposed) {\n            return;\n        }\n        setTimeout(function () {\n            _this._checkIsReady(previousPipelineContext);\n        }, 16);\n    };\n    Effect.prototype._loadShader = function (shader, key, optionalKey, callback) {\n        if (typeof HTMLElement !== \"undefined\") {\n            // DOM element ?\n            if (shader instanceof HTMLElement) {\n                var shaderCode = GetDOMTextContent(shader);\n                callback(shaderCode);\n                return;\n            }\n        }\n        // Direct source ?\n        if (shader.substr(0, 7) === \"source:\") {\n            callback(shader.substr(7));\n            return;\n        }\n        // Base64 encoded ?\n        if (shader.substr(0, 7) === \"base64:\") {\n            var shaderBinary = window.atob(shader.substr(7));\n            callback(shaderBinary);\n            return;\n        }\n        var shaderStore = EngineShaderStore.GetShadersStore(this._shaderLanguage);\n        // Is in local store ?\n        if (shaderStore[shader + key + \"Shader\"]) {\n            callback(shaderStore[shader + key + \"Shader\"]);\n            return;\n        }\n        if (optionalKey && shaderStore[shader + optionalKey + \"Shader\"]) {\n            callback(shaderStore[shader + optionalKey + \"Shader\"]);\n            return;\n        }\n        var shaderUrl;\n        if (shader[0] === \".\" || shader[0] === \"/\" || shader.indexOf(\"http\") > -1) {\n            shaderUrl = shader;\n        }\n        else {\n            shaderUrl = EngineShaderStore.GetShadersRepository(this._shaderLanguage) + shader;\n        }\n        // Vertex shader\n        this._engine._loadFile(shaderUrl + \".\" + key.toLowerCase() + \".fx\", callback);\n    };\n    Object.defineProperty(Effect.prototype, \"vertexSourceCode\", {\n        /**\n         * Gets the vertex shader source code of this effect\n         */\n        get: function () {\n            var _a, _b;\n            return this._vertexSourceCodeOverride && this._fragmentSourceCodeOverride\n                ? this._vertexSourceCodeOverride\n                : (_b = (_a = this._pipelineContext) === null || _a === void 0 ? void 0 : _a._getVertexShaderCode()) !== null && _b !== void 0 ? _b : this._vertexSourceCode;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Effect.prototype, \"fragmentSourceCode\", {\n        /**\n         * Gets the fragment shader source code of this effect\n         */\n        get: function () {\n            var _a, _b;\n            return this._vertexSourceCodeOverride && this._fragmentSourceCodeOverride\n                ? this._fragmentSourceCodeOverride\n                : (_b = (_a = this._pipelineContext) === null || _a === void 0 ? void 0 : _a._getFragmentShaderCode()) !== null && _b !== void 0 ? _b : this._fragmentSourceCode;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Effect.prototype, \"rawVertexSourceCode\", {\n        /**\n         * Gets the vertex shader source code before it has been processed by the preprocessor\n         */\n        get: function () {\n            return this._rawVertexSourceCode;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Effect.prototype, \"rawFragmentSourceCode\", {\n        /**\n         * Gets the fragment shader source code before it has been processed by the preprocessor\n         */\n        get: function () {\n            return this._rawFragmentSourceCode;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Recompiles the webGL program\n     * @param vertexSourceCode The source code for the vertex shader.\n     * @param fragmentSourceCode The source code for the fragment shader.\n     * @param onCompiled Callback called when completed.\n     * @param onError Callback called on error.\n     * @hidden\n     */\n    Effect.prototype._rebuildProgram = function (vertexSourceCode, fragmentSourceCode, onCompiled, onError) {\n        var _this = this;\n        this._isReady = false;\n        this._vertexSourceCodeOverride = vertexSourceCode;\n        this._fragmentSourceCodeOverride = fragmentSourceCode;\n        this.onError = function (effect, error) {\n            if (onError) {\n                onError(error);\n            }\n        };\n        this.onCompiled = function () {\n            var scenes = _this.getEngine().scenes;\n            if (scenes) {\n                for (var i = 0; i < scenes.length; i++) {\n                    scenes[i].markAllMaterialsAsDirty(63);\n                }\n            }\n            _this._pipelineContext._handlesSpectorRebuildCallback(onCompiled);\n        };\n        this._fallbacks = null;\n        this._prepareEffect();\n    };\n    /**\n     * Prepares the effect\n     * @hidden\n     */\n    Effect.prototype._prepareEffect = function () {\n        var _this = this;\n        var attributesNames = this._attributesNames;\n        var defines = this.defines;\n        var previousPipelineContext = this._pipelineContext;\n        this._isReady = false;\n        try {\n            var engine_1 = this._engine;\n            this._pipelineContext = engine_1.createPipelineContext(this._processingContext);\n            this._pipelineContext._name = this._key;\n            var rebuildRebind = this._rebuildProgram.bind(this);\n            if (this._vertexSourceCodeOverride && this._fragmentSourceCodeOverride) {\n                engine_1._preparePipelineContext(this._pipelineContext, this._vertexSourceCodeOverride, this._fragmentSourceCodeOverride, true, this._rawVertexSourceCode, this._rawFragmentSourceCode, rebuildRebind, null, this._transformFeedbackVaryings, this._key);\n            }\n            else {\n                engine_1._preparePipelineContext(this._pipelineContext, this._vertexSourceCode, this._fragmentSourceCode, false, this._rawVertexSourceCode, this._rawFragmentSourceCode, rebuildRebind, defines, this._transformFeedbackVaryings, this._key);\n            }\n            engine_1._executeWhenRenderingStateIsCompiled(this._pipelineContext, function () {\n                _this._attributes = [];\n                _this._pipelineContext._fillEffectInformation(_this, _this._uniformBuffersNames, _this._uniformsNames, _this._uniforms, _this._samplerList, _this._samplers, attributesNames, _this._attributes);\n                // Caches attribute locations.\n                if (attributesNames) {\n                    for (var i = 0; i < attributesNames.length; i++) {\n                        var name_1 = attributesNames[i];\n                        _this._attributeLocationByName[name_1] = _this._attributes[i];\n                    }\n                }\n                engine_1.bindSamplers(_this);\n                _this._compilationError = \"\";\n                _this._isReady = true;\n                if (_this.onCompiled) {\n                    _this.onCompiled(_this);\n                }\n                _this.onCompileObservable.notifyObservers(_this);\n                _this.onCompileObservable.clear();\n                // Unbind mesh reference in fallbacks\n                if (_this._fallbacks) {\n                    _this._fallbacks.unBindMesh();\n                }\n                if (previousPipelineContext) {\n                    _this.getEngine()._deletePipelineContext(previousPipelineContext);\n                }\n            });\n            if (this._pipelineContext.isAsync) {\n                this._checkIsReady(previousPipelineContext);\n            }\n        }\n        catch (e) {\n            this._processCompilationErrors(e, previousPipelineContext);\n        }\n    };\n    Effect.prototype._getShaderCodeAndErrorLine = function (code, error, isFragment) {\n        var regexp = isFragment ? /FRAGMENT SHADER ERROR: 0:(\\d+?):/ : /VERTEX SHADER ERROR: 0:(\\d+?):/;\n        var errorLine = null;\n        if (error && code) {\n            var res = error.match(regexp);\n            if (res && res.length === 2) {\n                var lineNumber = parseInt(res[1]);\n                var lines = code.split(\"\\n\", -1);\n                if (lines.length >= lineNumber) {\n                    errorLine = \"Offending line [\".concat(lineNumber, \"] in \").concat(isFragment ? \"fragment\" : \"vertex\", \" code: \").concat(lines[lineNumber - 1]);\n                }\n            }\n        }\n        return [code, errorLine];\n    };\n    Effect.prototype._processCompilationErrors = function (e, previousPipelineContext) {\n        var _a, _b;\n        var _c, _d, _e;\n        if (previousPipelineContext === void 0) { previousPipelineContext = null; }\n        this._compilationError = e.message;\n        var attributesNames = this._attributesNames;\n        var fallbacks = this._fallbacks;\n        // Let's go through fallbacks then\n        Logger.Error(\"Unable to compile effect:\");\n        Logger.Error(\"Uniforms: \" +\n            this._uniformsNames.map(function (uniform) {\n                return \" \" + uniform;\n            }));\n        Logger.Error(\"Attributes: \" +\n            attributesNames.map(function (attribute) {\n                return \" \" + attribute;\n            }));\n        Logger.Error(\"Defines:\\r\\n\" + this.defines);\n        if (Effect.LogShaderCodeOnCompilationError) {\n            var lineErrorVertex = null, lineErrorFragment = null, code = null;\n            if ((_c = this._pipelineContext) === null || _c === void 0 ? void 0 : _c._getVertexShaderCode()) {\n                _a = this._getShaderCodeAndErrorLine(this._pipelineContext._getVertexShaderCode(), this._compilationError, false), code = _a[0], lineErrorVertex = _a[1];\n                if (code) {\n                    Logger.Error(\"Vertex code:\");\n                    Logger.Error(code);\n                }\n            }\n            if ((_d = this._pipelineContext) === null || _d === void 0 ? void 0 : _d._getFragmentShaderCode()) {\n                _b = this._getShaderCodeAndErrorLine((_e = this._pipelineContext) === null || _e === void 0 ? void 0 : _e._getFragmentShaderCode(), this._compilationError, true), code = _b[0], lineErrorFragment = _b[1];\n                if (code) {\n                    Logger.Error(\"Fragment code:\");\n                    Logger.Error(code);\n                }\n            }\n            if (lineErrorVertex) {\n                Logger.Error(lineErrorVertex);\n            }\n            if (lineErrorFragment) {\n                Logger.Error(lineErrorFragment);\n            }\n        }\n        Logger.Error(\"Error: \" + this._compilationError);\n        if (previousPipelineContext) {\n            this._pipelineContext = previousPipelineContext;\n            this._isReady = true;\n            if (this.onError) {\n                this.onError(this, this._compilationError);\n            }\n            this.onErrorObservable.notifyObservers(this);\n        }\n        if (fallbacks) {\n            this._pipelineContext = null;\n            if (fallbacks.hasMoreFallbacks) {\n                this._allFallbacksProcessed = false;\n                Logger.Error(\"Trying next fallback.\");\n                this.defines = fallbacks.reduce(this.defines, this);\n                this._prepareEffect();\n            }\n            else {\n                // Sorry we did everything we can\n                this._allFallbacksProcessed = true;\n                if (this.onError) {\n                    this.onError(this, this._compilationError);\n                }\n                this.onErrorObservable.notifyObservers(this);\n                this.onErrorObservable.clear();\n                // Unbind mesh reference in fallbacks\n                if (this._fallbacks) {\n                    this._fallbacks.unBindMesh();\n                }\n            }\n        }\n        else {\n            this._allFallbacksProcessed = true;\n        }\n    };\n    Object.defineProperty(Effect.prototype, \"isSupported\", {\n        /**\n         * Checks if the effect is supported. (Must be called after compilation)\n         */\n        get: function () {\n            return this._compilationError === \"\";\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Binds a texture to the engine to be used as output of the shader.\n     * @param channel Name of the output variable.\n     * @param texture Texture to bind.\n     * @hidden\n     */\n    Effect.prototype._bindTexture = function (channel, texture) {\n        this._engine._bindTexture(this._samplers[channel], texture, channel);\n    };\n    /**\n     * Sets a texture on the engine to be used in the shader.\n     * @param channel Name of the sampler variable.\n     * @param texture Texture to set.\n     */\n    Effect.prototype.setTexture = function (channel, texture) {\n        this._engine.setTexture(this._samplers[channel], this._uniforms[channel], texture, channel);\n    };\n    /**\n     * Sets a depth stencil texture from a render target on the engine to be used in the shader.\n     * @param channel Name of the sampler variable.\n     * @param texture Texture to set.\n     */\n    Effect.prototype.setDepthStencilTexture = function (channel, texture) {\n        this._engine.setDepthStencilTexture(this._samplers[channel], this._uniforms[channel], texture, channel);\n    };\n    /**\n     * Sets an array of textures on the engine to be used in the shader.\n     * @param channel Name of the variable.\n     * @param textures Textures to set.\n     */\n    Effect.prototype.setTextureArray = function (channel, textures) {\n        var exName = channel + \"Ex\";\n        if (this._samplerList.indexOf(exName + \"0\") === -1) {\n            var initialPos = this._samplerList.indexOf(channel);\n            for (var index = 1; index < textures.length; index++) {\n                var currentExName = exName + (index - 1).toString();\n                this._samplerList.splice(initialPos + index, 0, currentExName);\n            }\n            // Reset every channels\n            var channelIndex = 0;\n            for (var _i = 0, _a = this._samplerList; _i < _a.length; _i++) {\n                var key = _a[_i];\n                this._samplers[key] = channelIndex;\n                channelIndex += 1;\n            }\n        }\n        this._engine.setTextureArray(this._samplers[channel], this._uniforms[channel], textures, channel);\n    };\n    /**\n     * Sets a texture to be the input of the specified post process. (To use the output, pass in the next post process in the pipeline)\n     * @param channel Name of the sampler variable.\n     * @param postProcess Post process to get the input texture from.\n     */\n    Effect.prototype.setTextureFromPostProcess = function (channel, postProcess) {\n        this._engine.setTextureFromPostProcess(this._samplers[channel], postProcess, channel);\n    };\n    /**\n     * (Warning! setTextureFromPostProcessOutput may be desired instead)\n     * Sets the input texture of the passed in post process to be input of this effect. (To use the output of the passed in post process use setTextureFromPostProcessOutput)\n     * @param channel Name of the sampler variable.\n     * @param postProcess Post process to get the output texture from.\n     */\n    Effect.prototype.setTextureFromPostProcessOutput = function (channel, postProcess) {\n        this._engine.setTextureFromPostProcessOutput(this._samplers[channel], postProcess, channel);\n    };\n    /**\n     * Binds a buffer to a uniform.\n     * @param buffer Buffer to bind.\n     * @param name Name of the uniform variable to bind to.\n     */\n    Effect.prototype.bindUniformBuffer = function (buffer, name) {\n        var bufferName = this._uniformBuffersNames[name];\n        if (bufferName === undefined || (Effect._BaseCache[bufferName] === buffer && this._engine._features.useUBOBindingCache)) {\n            return;\n        }\n        Effect._BaseCache[bufferName] = buffer;\n        this._engine.bindUniformBufferBase(buffer, bufferName, name);\n    };\n    /**\n     * Binds block to a uniform.\n     * @param blockName Name of the block to bind.\n     * @param index Index to bind.\n     */\n    Effect.prototype.bindUniformBlock = function (blockName, index) {\n        this._engine.bindUniformBlock(this._pipelineContext, blockName, index);\n    };\n    /**\n     * Sets an integer value on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param value Value to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setInt = function (uniformName, value) {\n        this._pipelineContext.setInt(uniformName, value);\n        return this;\n    };\n    /**\n     * Sets an int2 value on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First int in int2.\n     * @param y Second int in int2.\n     * @returns this effect.\n     */\n    Effect.prototype.setInt2 = function (uniformName, x, y) {\n        this._pipelineContext.setInt2(uniformName, x, y);\n        return this;\n    };\n    /**\n     * Sets an int3 value on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First int in int3.\n     * @param y Second int in int3.\n     * @param z Third int in int3.\n     * @returns this effect.\n     */\n    Effect.prototype.setInt3 = function (uniformName, x, y, z) {\n        this._pipelineContext.setInt3(uniformName, x, y, z);\n        return this;\n    };\n    /**\n     * Sets an int4 value on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First int in int4.\n     * @param y Second int in int4.\n     * @param z Third int in int4.\n     * @param w Fourth int in int4.\n     * @returns this effect.\n     */\n    Effect.prototype.setInt4 = function (uniformName, x, y, z, w) {\n        this._pipelineContext.setInt4(uniformName, x, y, z, w);\n        return this;\n    };\n    /**\n     * Sets an int array on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setIntArray = function (uniformName, array) {\n        this._pipelineContext.setIntArray(uniformName, array);\n        return this;\n    };\n    /**\n     * Sets an int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setIntArray2 = function (uniformName, array) {\n        this._pipelineContext.setIntArray2(uniformName, array);\n        return this;\n    };\n    /**\n     * Sets an int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setIntArray3 = function (uniformName, array) {\n        this._pipelineContext.setIntArray3(uniformName, array);\n        return this;\n    };\n    /**\n     * Sets an int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setIntArray4 = function (uniformName, array) {\n        this._pipelineContext.setIntArray4(uniformName, array);\n        return this;\n    };\n    /**\n     * Sets an float array on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setFloatArray = function (uniformName, array) {\n        this._pipelineContext.setArray(uniformName, array);\n        return this;\n    };\n    /**\n     * Sets an float array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setFloatArray2 = function (uniformName, array) {\n        this._pipelineContext.setArray2(uniformName, array);\n        return this;\n    };\n    /**\n     * Sets an float array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setFloatArray3 = function (uniformName, array) {\n        this._pipelineContext.setArray3(uniformName, array);\n        return this;\n    };\n    /**\n     * Sets an float array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setFloatArray4 = function (uniformName, array) {\n        this._pipelineContext.setArray4(uniformName, array);\n        return this;\n    };\n    /**\n     * Sets an array on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setArray = function (uniformName, array) {\n        this._pipelineContext.setArray(uniformName, array);\n        return this;\n    };\n    /**\n     * Sets an array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setArray2 = function (uniformName, array) {\n        this._pipelineContext.setArray2(uniformName, array);\n        return this;\n    };\n    /**\n     * Sets an array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setArray3 = function (uniformName, array) {\n        this._pipelineContext.setArray3(uniformName, array);\n        return this;\n    };\n    /**\n     * Sets an array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n     * @param uniformName Name of the variable.\n     * @param array array to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setArray4 = function (uniformName, array) {\n        this._pipelineContext.setArray4(uniformName, array);\n        return this;\n    };\n    /**\n     * Sets matrices on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param matrices matrices to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setMatrices = function (uniformName, matrices) {\n        this._pipelineContext.setMatrices(uniformName, matrices);\n        return this;\n    };\n    /**\n     * Sets matrix on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param matrix matrix to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setMatrix = function (uniformName, matrix) {\n        this._pipelineContext.setMatrix(uniformName, matrix);\n        return this;\n    };\n    /**\n     * Sets a 3x3 matrix on a uniform variable. (Specified as [1,2,3,4,5,6,7,8,9] will result in [1,2,3][4,5,6][7,8,9] matrix)\n     * @param uniformName Name of the variable.\n     * @param matrix matrix to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setMatrix3x3 = function (uniformName, matrix) {\n        // the cast is ok because it is gl.uniformMatrix3fv() which is called at the end, and this function accepts Float32Array and Array<number>\n        this._pipelineContext.setMatrix3x3(uniformName, matrix);\n        return this;\n    };\n    /**\n     * Sets a 2x2 matrix on a uniform variable. (Specified as [1,2,3,4] will result in [1,2][3,4] matrix)\n     * @param uniformName Name of the variable.\n     * @param matrix matrix to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setMatrix2x2 = function (uniformName, matrix) {\n        // the cast is ok because it is gl.uniformMatrix3fv() which is called at the end, and this function accepts Float32Array and Array<number>\n        this._pipelineContext.setMatrix2x2(uniformName, matrix);\n        return this;\n    };\n    /**\n     * Sets a float on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param value value to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setFloat = function (uniformName, value) {\n        this._pipelineContext.setFloat(uniformName, value);\n        return this;\n    };\n    /**\n     * Sets a boolean on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param bool value to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setBool = function (uniformName, bool) {\n        this._pipelineContext.setInt(uniformName, bool ? 1 : 0);\n        return this;\n    };\n    /**\n     * Sets a Vector2 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param vector2 vector2 to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setVector2 = function (uniformName, vector2) {\n        this._pipelineContext.setVector2(uniformName, vector2);\n        return this;\n    };\n    /**\n     * Sets a float2 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First float in float2.\n     * @param y Second float in float2.\n     * @returns this effect.\n     */\n    Effect.prototype.setFloat2 = function (uniformName, x, y) {\n        this._pipelineContext.setFloat2(uniformName, x, y);\n        return this;\n    };\n    /**\n     * Sets a Vector3 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param vector3 Value to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setVector3 = function (uniformName, vector3) {\n        this._pipelineContext.setVector3(uniformName, vector3);\n        return this;\n    };\n    /**\n     * Sets a float3 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First float in float3.\n     * @param y Second float in float3.\n     * @param z Third float in float3.\n     * @returns this effect.\n     */\n    Effect.prototype.setFloat3 = function (uniformName, x, y, z) {\n        this._pipelineContext.setFloat3(uniformName, x, y, z);\n        return this;\n    };\n    /**\n     * Sets a Vector4 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param vector4 Value to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setVector4 = function (uniformName, vector4) {\n        this._pipelineContext.setVector4(uniformName, vector4);\n        return this;\n    };\n    /**\n     * Sets a Quaternion on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param quaternion Value to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setQuaternion = function (uniformName, quaternion) {\n        this._pipelineContext.setQuaternion(uniformName, quaternion);\n        return this;\n    };\n    /**\n     * Sets a float4 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param x First float in float4.\n     * @param y Second float in float4.\n     * @param z Third float in float4.\n     * @param w Fourth float in float4.\n     * @returns this effect.\n     */\n    Effect.prototype.setFloat4 = function (uniformName, x, y, z, w) {\n        this._pipelineContext.setFloat4(uniformName, x, y, z, w);\n        return this;\n    };\n    /**\n     * Sets a Color3 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param color3 Value to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setColor3 = function (uniformName, color3) {\n        this._pipelineContext.setColor3(uniformName, color3);\n        return this;\n    };\n    /**\n     * Sets a Color4 on a uniform variable.\n     * @param uniformName Name of the variable.\n     * @param color3 Value to be set.\n     * @param alpha Alpha value to be set.\n     * @returns this effect.\n     */\n    Effect.prototype.setColor4 = function (uniformName, color3, alpha) {\n        this._pipelineContext.setColor4(uniformName, color3, alpha);\n        return this;\n    };\n    /**\n     * Sets a Color4 on a uniform variable\n     * @param uniformName defines the name of the variable\n     * @param color4 defines the value to be set\n     * @returns this effect.\n     */\n    Effect.prototype.setDirectColor4 = function (uniformName, color4) {\n        this._pipelineContext.setDirectColor4(uniformName, color4);\n        return this;\n    };\n    /**\n     * Release all associated resources.\n     **/\n    Effect.prototype.dispose = function () {\n        if (this._pipelineContext) {\n            this._pipelineContext.dispose();\n        }\n        this._engine._releaseEffect(this);\n        this._isDisposed = true;\n    };\n    /**\n     * This function will add a new shader to the shader store\n     * @param name the name of the shader\n     * @param pixelShader optional pixel shader content\n     * @param vertexShader optional vertex shader content\n     * @param shaderLanguage the language the shader is written in (default: GLSL)\n     */\n    Effect.RegisterShader = function (name, pixelShader, vertexShader, shaderLanguage) {\n        if (shaderLanguage === void 0) { shaderLanguage = ShaderLanguage.GLSL; }\n        if (pixelShader) {\n            EngineShaderStore.GetShadersStore(shaderLanguage)[\"\".concat(name, \"PixelShader\")] = pixelShader;\n        }\n        if (vertexShader) {\n            EngineShaderStore.GetShadersStore(shaderLanguage)[\"\".concat(name, \"VertexShader\")] = vertexShader;\n        }\n    };\n    /**\n     * Resets the cache of effects.\n     */\n    Effect.ResetCache = function () {\n        Effect._BaseCache = {};\n    };\n    /**\n     * Enable logging of the shader code when a compilation error occurs\n     */\n    Effect.LogShaderCodeOnCompilationError = true;\n    Effect._UniqueIdSeed = 0;\n    Effect._BaseCache = {};\n    /**\n     * Store of each shader (The can be looked up using effect.key)\n     */\n    Effect.ShadersStore = EngineShaderStore.ShadersStore;\n    /**\n     * Store of each included file for a shader (The can be looked up using effect.key)\n     */\n    Effect.IncludesShadersStore = EngineShaderStore.IncludesShadersStore;\n    return Effect;\n}());\nexport { Effect };\n//# sourceMappingURL=effect.js.map","/**\n * EffectFallbacks can be used to add fallbacks (properties to disable) to certain properties when desired to improve performance.\n * (Eg. Start at high quality with reflection and fog, if fps is low, remove reflection, if still low remove fog)\n */\nvar EffectFallbacks = /** @class */ (function () {\n    function EffectFallbacks() {\n        this._defines = {};\n        this._currentRank = 32;\n        this._maxRank = -1;\n        this._mesh = null;\n    }\n    /**\n     * Removes the fallback from the bound mesh.\n     */\n    EffectFallbacks.prototype.unBindMesh = function () {\n        this._mesh = null;\n    };\n    /**\n     * Adds a fallback on the specified property.\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\n     * @param define The name of the define in the shader\n     */\n    EffectFallbacks.prototype.addFallback = function (rank, define) {\n        if (!this._defines[rank]) {\n            if (rank < this._currentRank) {\n                this._currentRank = rank;\n            }\n            if (rank > this._maxRank) {\n                this._maxRank = rank;\n            }\n            this._defines[rank] = new Array();\n        }\n        this._defines[rank].push(define);\n    };\n    /**\n     * Sets the mesh to use CPU skinning when needing to fallback.\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\n     * @param mesh The mesh to use the fallbacks.\n     */\n    EffectFallbacks.prototype.addCPUSkinningFallback = function (rank, mesh) {\n        this._mesh = mesh;\n        if (rank < this._currentRank) {\n            this._currentRank = rank;\n        }\n        if (rank > this._maxRank) {\n            this._maxRank = rank;\n        }\n    };\n    Object.defineProperty(EffectFallbacks.prototype, \"hasMoreFallbacks\", {\n        /**\n         * Checks to see if more fallbacks are still available.\n         */\n        get: function () {\n            return this._currentRank <= this._maxRank;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Removes the defines that should be removed when falling back.\n     * @param currentDefines defines the current define statements for the shader.\n     * @param effect defines the current effect we try to compile\n     * @returns The resulting defines with defines of the current rank removed.\n     */\n    EffectFallbacks.prototype.reduce = function (currentDefines, effect) {\n        // First we try to switch to CPU skinning\n        if (this._mesh && this._mesh.computeBonesUsingShaders && this._mesh.numBoneInfluencers > 0) {\n            this._mesh.computeBonesUsingShaders = false;\n            currentDefines = currentDefines.replace(\"#define NUM_BONE_INFLUENCERS \" + this._mesh.numBoneInfluencers, \"#define NUM_BONE_INFLUENCERS 0\");\n            effect._bonesComputationForcedToCPU = true;\n            var scene = this._mesh.getScene();\n            for (var index = 0; index < scene.meshes.length; index++) {\n                var otherMesh = scene.meshes[index];\n                if (!otherMesh.material) {\n                    if (!this._mesh.material && otherMesh.computeBonesUsingShaders && otherMesh.numBoneInfluencers > 0) {\n                        otherMesh.computeBonesUsingShaders = false;\n                    }\n                    continue;\n                }\n                if (!otherMesh.computeBonesUsingShaders || otherMesh.numBoneInfluencers === 0) {\n                    continue;\n                }\n                if (otherMesh.material.getEffect() === effect) {\n                    otherMesh.computeBonesUsingShaders = false;\n                }\n                else if (otherMesh.subMeshes) {\n                    for (var _i = 0, _a = otherMesh.subMeshes; _i < _a.length; _i++) {\n                        var subMesh = _a[_i];\n                        var subMeshEffect = subMesh.effect;\n                        if (subMeshEffect === effect) {\n                            otherMesh.computeBonesUsingShaders = false;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            var currentFallbacks = this._defines[this._currentRank];\n            if (currentFallbacks) {\n                for (var index = 0; index < currentFallbacks.length; index++) {\n                    currentDefines = currentDefines.replace(\"#define \" + currentFallbacks[index], \"\");\n                }\n            }\n            this._currentRank++;\n        }\n        return currentDefines;\n    };\n    return EffectFallbacks;\n}());\nexport { EffectFallbacks };\n//# sourceMappingURL=effectFallbacks.js.map","import { __assign } from \"tslib\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Viewport } from \"../Maths/math.viewport.js\";\n\nimport { Observable } from \"../Misc/observable.js\";\nimport { Effect } from \"./effect.js\";\nimport { DrawWrapper } from \"./drawWrapper.js\";\n// Prevents ES6 Crash if not imported.\nimport \"../Shaders/postprocess.vertex.js\";\n/**\n * Helper class to render one or more effects.\n * You can access the previous rendering in your shader by declaring a sampler named textureSampler\n */\nvar EffectRenderer = /** @class */ (function () {\n    /**\n     * Creates an effect renderer\n     * @param _engine the engine to use for rendering\n     * @param options defines the options of the effect renderer\n     */\n    function EffectRenderer(_engine, options) {\n        var _a;\n        if (options === void 0) { options = EffectRenderer._DefaultOptions; }\n        var _this = this;\n        this._engine = _engine;\n        this._fullscreenViewport = new Viewport(0, 0, 1, 1);\n        options = __assign(__assign({}, EffectRenderer._DefaultOptions), options);\n        this._vertexBuffers = (_a = {},\n            _a[VertexBuffer.PositionKind] = new VertexBuffer(_engine, options.positions, VertexBuffer.PositionKind, false, false, 2),\n            _a);\n        this._indexBuffer = _engine.createIndexBuffer(options.indices);\n        this._onContextRestoredObserver = _engine.onContextRestoredObservable.add(function () {\n            _this._indexBuffer = _engine.createIndexBuffer(options.indices);\n            for (var key in _this._vertexBuffers) {\n                var vertexBuffer = _this._vertexBuffers[key];\n                vertexBuffer._rebuild();\n            }\n        });\n    }\n    /**\n     * Sets the current viewport in normalized coordinates 0-1\n     * @param viewport Defines the viewport to set (defaults to 0 0 1 1)\n     */\n    EffectRenderer.prototype.setViewport = function (viewport) {\n        if (viewport === void 0) { viewport = this._fullscreenViewport; }\n        this._engine.setViewport(viewport);\n    };\n    /**\n     * Binds the embedded attributes buffer to the effect.\n     * @param effect Defines the effect to bind the attributes for\n     */\n    EffectRenderer.prototype.bindBuffers = function (effect) {\n        this._engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\n    };\n    /**\n     * Sets the current effect wrapper to use during draw.\n     * The effect needs to be ready before calling this api.\n     * This also sets the default full screen position attribute.\n     * @param effectWrapper Defines the effect to draw with\n     */\n    EffectRenderer.prototype.applyEffectWrapper = function (effectWrapper) {\n        this._engine.depthCullingState.depthTest = false;\n        this._engine.stencilState.stencilTest = false;\n        this._engine.enableEffect(effectWrapper._drawWrapper);\n        this.bindBuffers(effectWrapper.effect);\n        effectWrapper.onApplyObservable.notifyObservers({});\n    };\n    /**\n     * Restores engine states\n     */\n    EffectRenderer.prototype.restoreStates = function () {\n        this._engine.depthCullingState.depthTest = true;\n        this._engine.stencilState.stencilTest = true;\n    };\n    /**\n     * Draws a full screen quad.\n     */\n    EffectRenderer.prototype.draw = function () {\n        this._engine.drawElementsType(0, 0, 6);\n    };\n    EffectRenderer.prototype._isRenderTargetTexture = function (texture) {\n        return texture.renderTarget !== undefined;\n    };\n    /**\n     * renders one or more effects to a specified texture\n     * @param effectWrapper the effect to renderer\n     * @param outputTexture texture to draw to, if null it will render to the screen.\n     */\n    EffectRenderer.prototype.render = function (effectWrapper, outputTexture) {\n        if (outputTexture === void 0) { outputTexture = null; }\n        // Ensure effect is ready\n        if (!effectWrapper.effect.isReady()) {\n            return;\n        }\n        // Reset state\n        this.setViewport();\n        var out = outputTexture === null ? null : this._isRenderTargetTexture(outputTexture) ? outputTexture.renderTarget : outputTexture;\n        if (out) {\n            this._engine.bindFramebuffer(out);\n        }\n        this.applyEffectWrapper(effectWrapper);\n        this.draw();\n        if (out) {\n            this._engine.unBindFramebuffer(out);\n        }\n        this.restoreStates();\n    };\n    /**\n     * Disposes of the effect renderer\n     */\n    EffectRenderer.prototype.dispose = function () {\n        var vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\n        if (vertexBuffer) {\n            vertexBuffer.dispose();\n            delete this._vertexBuffers[VertexBuffer.PositionKind];\n        }\n        if (this._indexBuffer) {\n            this._engine._releaseBuffer(this._indexBuffer);\n        }\n        if (this._onContextRestoredObserver) {\n            this._engine.onContextRestoredObservable.remove(this._onContextRestoredObserver);\n            this._onContextRestoredObserver = null;\n        }\n    };\n    // Fullscreen quad buffers by default.\n    EffectRenderer._DefaultOptions = {\n        positions: [1, 1, -1, 1, -1, -1, 1, -1],\n        indices: [0, 1, 2, 0, 2, 3],\n    };\n    return EffectRenderer;\n}());\nexport { EffectRenderer };\n/**\n * Wraps an effect to be used for rendering\n */\nvar EffectWrapper = /** @class */ (function () {\n    /**\n     * Creates an effect to be renderer\n     * @param creationOptions options to create the effect\n     */\n    function EffectWrapper(creationOptions) {\n        var _this = this;\n        /**\n         * Event that is fired right before the effect is drawn (should be used to update uniforms)\n         */\n        this.onApplyObservable = new Observable();\n        var effectCreationOptions;\n        var uniformNames = creationOptions.uniformNames || [];\n        if (creationOptions.vertexShader) {\n            effectCreationOptions = {\n                fragmentSource: creationOptions.fragmentShader,\n                vertexSource: creationOptions.vertexShader,\n                spectorName: creationOptions.name || \"effectWrapper\",\n            };\n        }\n        else {\n            // Default scale to use in post process vertex shader.\n            uniformNames.push(\"scale\");\n            effectCreationOptions = {\n                fragmentSource: creationOptions.fragmentShader,\n                vertex: \"postprocess\",\n                spectorName: creationOptions.name || \"effectWrapper\",\n            };\n            // Sets the default scale to identity for the post process vertex shader.\n            this.onApplyObservable.add(function () {\n                _this.effect.setFloat2(\"scale\", 1, 1);\n            });\n        }\n        var defines = creationOptions.defines ? creationOptions.defines.join(\"\\n\") : \"\";\n        this._drawWrapper = new DrawWrapper(creationOptions.engine);\n        if (creationOptions.useShaderStore) {\n            effectCreationOptions.fragment = effectCreationOptions.fragmentSource;\n            if (!effectCreationOptions.vertex) {\n                effectCreationOptions.vertex = effectCreationOptions.vertexSource;\n            }\n            delete effectCreationOptions.fragmentSource;\n            delete effectCreationOptions.vertexSource;\n            this.effect = creationOptions.engine.createEffect(effectCreationOptions, creationOptions.attributeNames || [\"position\"], uniformNames, creationOptions.samplerNames, defines, undefined, creationOptions.onCompiled, undefined, undefined, creationOptions.shaderLanguage);\n        }\n        else {\n            this.effect = new Effect(effectCreationOptions, creationOptions.attributeNames || [\"position\"], uniformNames, creationOptions.samplerNames, creationOptions.engine, defines, undefined, creationOptions.onCompiled, undefined, undefined, undefined, creationOptions.shaderLanguage);\n            this._onContextRestoredObserver = creationOptions.engine.onContextRestoredObservable.add(function () {\n                _this.effect._pipelineContext = null; // because _prepareEffect will try to dispose this pipeline before recreating it and that would lead to webgl errors\n                _this.effect._wasPreviouslyReady = false;\n                _this.effect._prepareEffect();\n            });\n        }\n    }\n    Object.defineProperty(EffectWrapper.prototype, \"effect\", {\n        /**\n         * The underlying effect\n         */\n        get: function () {\n            return this._drawWrapper.effect;\n        },\n        set: function (effect) {\n            this._drawWrapper.effect = effect;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Disposes of the effect wrapper\n     */\n    EffectWrapper.prototype.dispose = function () {\n        if (this._onContextRestoredObserver) {\n            this.effect.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\n            this._onContextRestoredObserver = null;\n        }\n        this.effect.dispose();\n    };\n    return EffectWrapper;\n}());\nexport { EffectWrapper };\n//# sourceMappingURL=effectRenderer.js.map","import { __decorate, __extends } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { serialize, SerializationHelper, serializeAsTexture, serializeAsColorCurves, serializeAsColor4 } from \"../Misc/decorators.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { MaterialDefines } from \"../Materials/materialDefines.js\";\nimport { ColorCurves } from \"../Materials/colorCurves.js\";\n/**\n * @hidden\n */\nvar ImageProcessingConfigurationDefines = /** @class */ (function (_super) {\n    __extends(ImageProcessingConfigurationDefines, _super);\n    function ImageProcessingConfigurationDefines() {\n        var _this = _super.call(this) || this;\n        _this.IMAGEPROCESSING = false;\n        _this.VIGNETTE = false;\n        _this.VIGNETTEBLENDMODEMULTIPLY = false;\n        _this.VIGNETTEBLENDMODEOPAQUE = false;\n        _this.TONEMAPPING = false;\n        _this.TONEMAPPING_ACES = false;\n        _this.CONTRAST = false;\n        _this.COLORCURVES = false;\n        _this.COLORGRADING = false;\n        _this.COLORGRADING3D = false;\n        _this.SAMPLER3DGREENDEPTH = false;\n        _this.SAMPLER3DBGRMAP = false;\n        _this.IMAGEPROCESSINGPOSTPROCESS = false;\n        _this.EXPOSURE = false;\n        _this.SKIPFINALCOLORCLAMP = false;\n        _this.rebuild();\n        return _this;\n    }\n    return ImageProcessingConfigurationDefines;\n}(MaterialDefines));\nexport { ImageProcessingConfigurationDefines };\n/**\n * This groups together the common properties used for image processing either in direct forward pass\n * or through post processing effect depending on the use of the image processing pipeline in your scene\n * or not.\n */\nvar ImageProcessingConfiguration = /** @class */ (function () {\n    function ImageProcessingConfiguration() {\n        /**\n         * Color curves setup used in the effect if colorCurvesEnabled is set to true\n         */\n        this.colorCurves = new ColorCurves();\n        this._colorCurvesEnabled = false;\n        this._colorGradingEnabled = false;\n        this._colorGradingWithGreenDepth = true;\n        this._colorGradingBGR = true;\n        /** @hidden */\n        this._exposure = 1.0;\n        this._toneMappingEnabled = false;\n        this._toneMappingType = ImageProcessingConfiguration.TONEMAPPING_STANDARD;\n        this._contrast = 1.0;\n        /**\n         * Vignette stretch size.\n         */\n        this.vignetteStretch = 0;\n        /**\n         * Vignette centre X Offset.\n         */\n        this.vignetteCentreX = 0;\n        /**\n         * Vignette centre Y Offset.\n         */\n        this.vignetteCentreY = 0;\n        /**\n         * Vignette weight or intensity of the vignette effect.\n         */\n        this.vignetteWeight = 1.5;\n        /**\n         * Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\n         * if vignetteEnabled is set to true.\n         */\n        this.vignetteColor = new Color4(0, 0, 0, 0);\n        /**\n         * Camera field of view used by the Vignette effect.\n         */\n        this.vignetteCameraFov = 0.5;\n        this._vignetteBlendMode = ImageProcessingConfiguration.VIGNETTEMODE_MULTIPLY;\n        this._vignetteEnabled = false;\n        /** @hidden */\n        this._skipFinalColorClamp = false;\n        /** @hidden */\n        this._applyByPostProcess = false;\n        this._isEnabled = true;\n        /**\n         * An event triggered when the configuration changes and requires Shader to Update some parameters.\n         */\n        this.onUpdateParameters = new Observable();\n    }\n    Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorCurvesEnabled\", {\n        /**\n         * Gets whether the color curves effect is enabled.\n         */\n        get: function () {\n            return this._colorCurvesEnabled;\n        },\n        /**\n         * Sets whether the color curves effect is enabled.\n         */\n        set: function (value) {\n            if (this._colorCurvesEnabled === value) {\n                return;\n            }\n            this._colorCurvesEnabled = value;\n            this._updateParameters();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorGradingTexture\", {\n        /**\n         * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\n         */\n        get: function () {\n            return this._colorGradingTexture;\n        },\n        /**\n         * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\n         */\n        set: function (value) {\n            if (this._colorGradingTexture === value) {\n                return;\n            }\n            this._colorGradingTexture = value;\n            this._updateParameters();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorGradingEnabled\", {\n        /**\n         * Gets whether the color grading effect is enabled.\n         */\n        get: function () {\n            return this._colorGradingEnabled;\n        },\n        /**\n         * Sets whether the color grading effect is enabled.\n         */\n        set: function (value) {\n            if (this._colorGradingEnabled === value) {\n                return;\n            }\n            this._colorGradingEnabled = value;\n            this._updateParameters();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorGradingWithGreenDepth\", {\n        /**\n         * Gets whether the color grading effect is using a green depth for the 3d Texture.\n         */\n        get: function () {\n            return this._colorGradingWithGreenDepth;\n        },\n        /**\n         * Sets whether the color grading effect is using a green depth for the 3d Texture.\n         */\n        set: function (value) {\n            if (this._colorGradingWithGreenDepth === value) {\n                return;\n            }\n            this._colorGradingWithGreenDepth = value;\n            this._updateParameters();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorGradingBGR\", {\n        /**\n         * Gets whether the color grading texture contains BGR values.\n         */\n        get: function () {\n            return this._colorGradingBGR;\n        },\n        /**\n         * Sets whether the color grading texture contains BGR values.\n         */\n        set: function (value) {\n            if (this._colorGradingBGR === value) {\n                return;\n            }\n            this._colorGradingBGR = value;\n            this._updateParameters();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingConfiguration.prototype, \"exposure\", {\n        /**\n         * Gets the Exposure used in the effect.\n         */\n        get: function () {\n            return this._exposure;\n        },\n        /**\n         * Sets the Exposure used in the effect.\n         */\n        set: function (value) {\n            if (this._exposure === value) {\n                return;\n            }\n            this._exposure = value;\n            this._updateParameters();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingConfiguration.prototype, \"toneMappingEnabled\", {\n        /**\n         * Gets whether the tone mapping effect is enabled.\n         */\n        get: function () {\n            return this._toneMappingEnabled;\n        },\n        /**\n         * Sets whether the tone mapping effect is enabled.\n         */\n        set: function (value) {\n            if (this._toneMappingEnabled === value) {\n                return;\n            }\n            this._toneMappingEnabled = value;\n            this._updateParameters();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingConfiguration.prototype, \"toneMappingType\", {\n        /**\n         * Gets the type of tone mapping effect.\n         */\n        get: function () {\n            return this._toneMappingType;\n        },\n        /**\n         * Sets the type of tone mapping effect used in BabylonJS.\n         */\n        set: function (value) {\n            if (this._toneMappingType === value) {\n                return;\n            }\n            this._toneMappingType = value;\n            this._updateParameters();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingConfiguration.prototype, \"contrast\", {\n        /**\n         * Gets the contrast used in the effect.\n         */\n        get: function () {\n            return this._contrast;\n        },\n        /**\n         * Sets the contrast used in the effect.\n         */\n        set: function (value) {\n            if (this._contrast === value) {\n                return;\n            }\n            this._contrast = value;\n            this._updateParameters();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingConfiguration.prototype, \"vignetteBlendMode\", {\n        /**\n         * Gets the vignette blend mode allowing different kind of effect.\n         */\n        get: function () {\n            return this._vignetteBlendMode;\n        },\n        /**\n         * Sets the vignette blend mode allowing different kind of effect.\n         */\n        set: function (value) {\n            if (this._vignetteBlendMode === value) {\n                return;\n            }\n            this._vignetteBlendMode = value;\n            this._updateParameters();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingConfiguration.prototype, \"vignetteEnabled\", {\n        /**\n         * Gets whether the vignette effect is enabled.\n         */\n        get: function () {\n            return this._vignetteEnabled;\n        },\n        /**\n         * Sets whether the vignette effect is enabled.\n         */\n        set: function (value) {\n            if (this._vignetteEnabled === value) {\n                return;\n            }\n            this._vignetteEnabled = value;\n            this._updateParameters();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingConfiguration.prototype, \"skipFinalColorClamp\", {\n        /**\n         * If apply by post process is set to true, setting this to true will skip the the final color clamp step in the fragment shader\n         * Applies to PBR materials.\n         */\n        get: function () {\n            return this._skipFinalColorClamp;\n        },\n        /**\n         * If apply by post process is set to true, setting this to true will skip the the final color clamp step in the fragment shader\n         * Applies to PBR materials.\n         */\n        set: function (value) {\n            if (this._skipFinalColorClamp === value) {\n                return;\n            }\n            this._skipFinalColorClamp = value;\n            this._updateParameters();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingConfiguration.prototype, \"applyByPostProcess\", {\n        /**\n         * Gets whether the image processing is applied through a post process or not.\n         */\n        get: function () {\n            return this._applyByPostProcess;\n        },\n        /**\n         * Sets whether the image processing is applied through a post process or not.\n         */\n        set: function (value) {\n            if (this._applyByPostProcess === value) {\n                return;\n            }\n            this._applyByPostProcess = value;\n            this._updateParameters();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingConfiguration.prototype, \"isEnabled\", {\n        /**\n         * Gets whether the image processing is enabled or not.\n         */\n        get: function () {\n            return this._isEnabled;\n        },\n        /**\n         * Sets whether the image processing is enabled or not.\n         */\n        set: function (value) {\n            if (this._isEnabled === value) {\n                return;\n            }\n            this._isEnabled = value;\n            this._updateParameters();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Method called each time the image processing information changes requires to recompile the effect.\n     */\n    ImageProcessingConfiguration.prototype._updateParameters = function () {\n        this.onUpdateParameters.notifyObservers(this);\n    };\n    /**\n     * Gets the current class name.\n     * @return \"ImageProcessingConfiguration\"\n     */\n    ImageProcessingConfiguration.prototype.getClassName = function () {\n        return \"ImageProcessingConfiguration\";\n    };\n    /**\n     * Prepare the list of uniforms associated with the Image Processing effects.\n     * @param uniforms The list of uniforms used in the effect\n     * @param defines the list of defines currently in use\n     */\n    ImageProcessingConfiguration.PrepareUniforms = function (uniforms, defines) {\n        if (defines.EXPOSURE) {\n            uniforms.push(\"exposureLinear\");\n        }\n        if (defines.CONTRAST) {\n            uniforms.push(\"contrast\");\n        }\n        if (defines.COLORGRADING) {\n            uniforms.push(\"colorTransformSettings\");\n        }\n        if (defines.VIGNETTE) {\n            uniforms.push(\"vInverseScreenSize\");\n            uniforms.push(\"vignetteSettings1\");\n            uniforms.push(\"vignetteSettings2\");\n        }\n        if (defines.COLORCURVES) {\n            ColorCurves.PrepareUniforms(uniforms);\n        }\n    };\n    /**\n     * Prepare the list of samplers associated with the Image Processing effects.\n     * @param samplersList The list of uniforms used in the effect\n     * @param defines the list of defines currently in use\n     */\n    ImageProcessingConfiguration.PrepareSamplers = function (samplersList, defines) {\n        if (defines.COLORGRADING) {\n            samplersList.push(\"txColorTransform\");\n        }\n    };\n    /**\n     * Prepare the list of defines associated to the shader.\n     * @param defines the list of defines to complete\n     * @param forPostProcess Define if we are currently in post process mode or not\n     */\n    ImageProcessingConfiguration.prototype.prepareDefines = function (defines, forPostProcess) {\n        if (forPostProcess === void 0) { forPostProcess = false; }\n        if (forPostProcess !== this.applyByPostProcess || !this._isEnabled) {\n            defines.VIGNETTE = false;\n            defines.TONEMAPPING = false;\n            defines.TONEMAPPING_ACES = false;\n            defines.CONTRAST = false;\n            defines.EXPOSURE = false;\n            defines.COLORCURVES = false;\n            defines.COLORGRADING = false;\n            defines.COLORGRADING3D = false;\n            defines.IMAGEPROCESSING = false;\n            defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\n            defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess && this._isEnabled;\n            return;\n        }\n        defines.VIGNETTE = this.vignetteEnabled;\n        defines.VIGNETTEBLENDMODEMULTIPLY = this.vignetteBlendMode === ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY;\n        defines.VIGNETTEBLENDMODEOPAQUE = !defines.VIGNETTEBLENDMODEMULTIPLY;\n        defines.TONEMAPPING = this.toneMappingEnabled;\n        switch (this._toneMappingType) {\n            case ImageProcessingConfiguration.TONEMAPPING_ACES:\n                defines.TONEMAPPING_ACES = true;\n                break;\n            default:\n                defines.TONEMAPPING_ACES = false;\n                break;\n        }\n        defines.CONTRAST = this.contrast !== 1.0;\n        defines.EXPOSURE = this.exposure !== 1.0;\n        defines.COLORCURVES = this.colorCurvesEnabled && !!this.colorCurves;\n        defines.COLORGRADING = this.colorGradingEnabled && !!this.colorGradingTexture;\n        if (defines.COLORGRADING) {\n            defines.COLORGRADING3D = this.colorGradingTexture.is3D;\n        }\n        else {\n            defines.COLORGRADING3D = false;\n        }\n        defines.SAMPLER3DGREENDEPTH = this.colorGradingWithGreenDepth;\n        defines.SAMPLER3DBGRMAP = this.colorGradingBGR;\n        defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess;\n        defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\n        defines.IMAGEPROCESSING = defines.VIGNETTE || defines.TONEMAPPING || defines.CONTRAST || defines.EXPOSURE || defines.COLORCURVES || defines.COLORGRADING;\n    };\n    /**\n     * Returns true if all the image processing information are ready.\n     * @returns True if ready, otherwise, false\n     */\n    ImageProcessingConfiguration.prototype.isReady = function () {\n        // Color Grading texture can not be none blocking.\n        return !this.colorGradingEnabled || !this.colorGradingTexture || this.colorGradingTexture.isReady();\n    };\n    /**\n     * Binds the image processing to the shader.\n     * @param effect The effect to bind to\n     * @param overrideAspectRatio Override the aspect ratio of the effect\n     */\n    ImageProcessingConfiguration.prototype.bind = function (effect, overrideAspectRatio) {\n        // Color Curves\n        if (this._colorCurvesEnabled && this.colorCurves) {\n            ColorCurves.Bind(this.colorCurves, effect);\n        }\n        // Vignette\n        if (this._vignetteEnabled) {\n            var inverseWidth = 1 / effect.getEngine().getRenderWidth();\n            var inverseHeight = 1 / effect.getEngine().getRenderHeight();\n            effect.setFloat2(\"vInverseScreenSize\", inverseWidth, inverseHeight);\n            var aspectRatio = overrideAspectRatio != null ? overrideAspectRatio : inverseHeight / inverseWidth;\n            var vignetteScaleY = Math.tan(this.vignetteCameraFov * 0.5);\n            var vignetteScaleX = vignetteScaleY * aspectRatio;\n            var vignetteScaleGeometricMean = Math.sqrt(vignetteScaleX * vignetteScaleY);\n            vignetteScaleX = Tools.Mix(vignetteScaleX, vignetteScaleGeometricMean, this.vignetteStretch);\n            vignetteScaleY = Tools.Mix(vignetteScaleY, vignetteScaleGeometricMean, this.vignetteStretch);\n            effect.setFloat4(\"vignetteSettings1\", vignetteScaleX, vignetteScaleY, -vignetteScaleX * this.vignetteCentreX, -vignetteScaleY * this.vignetteCentreY);\n            var vignettePower = -2.0 * this.vignetteWeight;\n            effect.setFloat4(\"vignetteSettings2\", this.vignetteColor.r, this.vignetteColor.g, this.vignetteColor.b, vignettePower);\n        }\n        // Exposure\n        effect.setFloat(\"exposureLinear\", this.exposure);\n        // Contrast\n        effect.setFloat(\"contrast\", this.contrast);\n        // Color transform settings\n        if (this.colorGradingTexture) {\n            effect.setTexture(\"txColorTransform\", this.colorGradingTexture);\n            var textureSize = this.colorGradingTexture.getSize().height;\n            effect.setFloat4(\"colorTransformSettings\", (textureSize - 1) / textureSize, // textureScale\n            0.5 / textureSize, // textureOffset\n            textureSize, // textureSize\n            this.colorGradingTexture.level // weight\n            );\n        }\n    };\n    /**\n     * Clones the current image processing instance.\n     * @return The cloned image processing\n     */\n    ImageProcessingConfiguration.prototype.clone = function () {\n        return SerializationHelper.Clone(function () { return new ImageProcessingConfiguration(); }, this);\n    };\n    /**\n     * Serializes the current image processing instance to a json representation.\n     * @return a JSON representation\n     */\n    ImageProcessingConfiguration.prototype.serialize = function () {\n        return SerializationHelper.Serialize(this);\n    };\n    /**\n     * Parses the image processing from a json representation.\n     * @param source the JSON source to parse\n     * @return The parsed image processing\n     */\n    ImageProcessingConfiguration.Parse = function (source) {\n        return SerializationHelper.Parse(function () { return new ImageProcessingConfiguration(); }, source, null, null);\n    };\n    Object.defineProperty(ImageProcessingConfiguration, \"VIGNETTEMODE_MULTIPLY\", {\n        /**\n         * Used to apply the vignette as a mix with the pixel color.\n         */\n        get: function () {\n            return this._VIGNETTEMODE_MULTIPLY;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingConfiguration, \"VIGNETTEMODE_OPAQUE\", {\n        /**\n         * Used to apply the vignette as a replacement of the pixel color.\n         */\n        get: function () {\n            return this._VIGNETTEMODE_OPAQUE;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Default tone mapping applied in BabylonJS.\n     */\n    ImageProcessingConfiguration.TONEMAPPING_STANDARD = 0;\n    /**\n     * ACES Tone mapping (used by default in unreal and unity). This can help getting closer\n     * to other engines rendering to increase portability.\n     */\n    ImageProcessingConfiguration.TONEMAPPING_ACES = 1;\n    // Static constants associated to the image processing.\n    ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY = 0;\n    ImageProcessingConfiguration._VIGNETTEMODE_OPAQUE = 1;\n    __decorate([\n        serializeAsColorCurves()\n    ], ImageProcessingConfiguration.prototype, \"colorCurves\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"_colorCurvesEnabled\", void 0);\n    __decorate([\n        serializeAsTexture(\"colorGradingTexture\")\n    ], ImageProcessingConfiguration.prototype, \"_colorGradingTexture\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"_colorGradingEnabled\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"_colorGradingWithGreenDepth\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"_colorGradingBGR\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"_exposure\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"_toneMappingEnabled\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"_toneMappingType\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"_contrast\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"vignetteStretch\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"vignetteCentreX\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"vignetteCentreY\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"vignetteWeight\", void 0);\n    __decorate([\n        serializeAsColor4()\n    ], ImageProcessingConfiguration.prototype, \"vignetteColor\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"vignetteCameraFov\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"_vignetteBlendMode\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"_vignetteEnabled\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"_skipFinalColorClamp\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"_applyByPostProcess\", void 0);\n    __decorate([\n        serialize()\n    ], ImageProcessingConfiguration.prototype, \"_isEnabled\", void 0);\n    return ImageProcessingConfiguration;\n}());\nexport { ImageProcessingConfiguration };\n// References the dependencies.\nSerializationHelper._ImageProcessingConfigurationParser = ImageProcessingConfiguration.Parse;\n//# sourceMappingURL=imageProcessingConfiguration.js.map","import { DeepCopier } from \"../Misc/deepCopier.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\n\n/**\n * This represents all the required information to add a fresnel effect on a material:\n * @see https://doc.babylonjs.com/divingDeeper/materials/using/fresnelParameters\n */\nvar FresnelParameters = /** @class */ (function () {\n    /**\n     * Creates a new FresnelParameters object.\n     *\n     * @param options provide your own settings to optionally to override defaults\n     */\n    function FresnelParameters(options) {\n        if (options === void 0) { options = {}; }\n        this._isEnabled = true;\n        this.bias = options.bias === undefined ? 0 : options.bias;\n        this.power = options.power === undefined ? 1 : options.power;\n        this.leftColor = options.leftColor || Color3.White();\n        this.rightColor = options.rightColor || Color3.Black();\n        if (options.isEnabled === false) {\n            this.isEnabled = false;\n        }\n    }\n    Object.defineProperty(FresnelParameters.prototype, \"isEnabled\", {\n        /**\n         * Define if the fresnel effect is enable or not.\n         */\n        get: function () {\n            return this._isEnabled;\n        },\n        set: function (value) {\n            if (this._isEnabled === value) {\n                return;\n            }\n            this._isEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(4 | 16);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Clones the current fresnel and its values\n     * @returns a clone fresnel configuration\n     */\n    FresnelParameters.prototype.clone = function () {\n        var newFresnelParameters = new FresnelParameters();\n        DeepCopier.DeepCopy(this, newFresnelParameters);\n        return newFresnelParameters;\n    };\n    /**\n     * Determines equality between FresnelParameters objects\n     * @param otherFresnelParameters defines the second operand\n     * @returns true if the power, bias, leftColor, rightColor and isEnabled values are equal to the given ones\n     */\n    FresnelParameters.prototype.equals = function (otherFresnelParameters) {\n        return (otherFresnelParameters &&\n            this.bias === otherFresnelParameters.bias &&\n            this.power === otherFresnelParameters.power &&\n            this.leftColor.equals(otherFresnelParameters.leftColor) &&\n            this.rightColor.equals(otherFresnelParameters.rightColor) &&\n            this.isEnabled === otherFresnelParameters.isEnabled);\n    };\n    /**\n     * Serializes the current fresnel parameters to a JSON representation.\n     * @return the JSON serialization\n     */\n    FresnelParameters.prototype.serialize = function () {\n        return {\n            isEnabled: this.isEnabled,\n            leftColor: this.leftColor.asArray(),\n            rightColor: this.rightColor.asArray(),\n            bias: this.bias,\n            power: this.power,\n        };\n    };\n    /**\n     * Parse a JSON object and deserialize it to a new Fresnel parameter object.\n     * @param parsedFresnelParameters Define the JSON representation\n     * @returns the parsed parameters\n     */\n    FresnelParameters.Parse = function (parsedFresnelParameters) {\n        return new FresnelParameters({\n            isEnabled: parsedFresnelParameters.isEnabled,\n            leftColor: Color3.FromArray(parsedFresnelParameters.leftColor),\n            rightColor: Color3.FromArray(parsedFresnelParameters.rightColor),\n            bias: parsedFresnelParameters.bias,\n            power: parsedFresnelParameters.power || 1.0,\n        });\n    };\n    return FresnelParameters;\n}());\nexport { FresnelParameters };\n// References the dependencies.\nSerializationHelper._FresnelParametersParser = FresnelParameters.Parse;\n//# sourceMappingURL=fresnelParameters.js.map","import { Effect } from \"./effect.js\";\nimport { RandomGUID } from \"../Misc/guid.js\";\nimport { DrawWrapper } from \"./drawWrapper.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nvar MapMap = /** @class */ (function () {\n    function MapMap() {\n        this.mm = new Map();\n    }\n    MapMap.prototype.get = function (a, b) {\n        var m = this.mm.get(a);\n        if (m !== undefined) {\n            return m.get(b);\n        }\n        return undefined;\n    };\n    MapMap.prototype.set = function (a, b, v) {\n        var m = this.mm.get(a);\n        if (m === undefined) {\n            this.mm.set(a, (m = new Map()));\n        }\n        m.set(b, v);\n    };\n    return MapMap;\n}());\n/**\n * Class that can be used to wrap a base material to generate accurate shadows when using custom vertex/fragment code in the base material\n */\nvar ShadowDepthWrapper = /** @class */ (function () {\n    /**\n     * Instantiate a new shadow depth wrapper.\n     * It works by injecting some specific code in the vertex/fragment shaders of the base material and is used by a shadow generator to\n     * generate the shadow depth map. For more information, please refer to the documentation:\n     * https://doc.babylonjs.com/babylon101/shadows\n     * @param baseMaterial Material to wrap\n     * @param scene Define the scene the material belongs to\n     * @param options Options used to create the wrapper\n     */\n    function ShadowDepthWrapper(baseMaterial, scene, options) {\n        var _this = this;\n        this._baseMaterial = baseMaterial;\n        this._scene = scene !== null && scene !== void 0 ? scene : EngineStore.LastCreatedScene;\n        this._options = options;\n        this._subMeshToEffect = new Map();\n        this._subMeshToDepthWrapper = new MapMap();\n        this._meshes = new Map();\n        // Register for onEffectCreated to store the effect of the base material when it is (re)generated. This effect will be used\n        // to create the depth effect later on\n        this._onEffectCreatedObserver = this._baseMaterial.onEffectCreatedObservable.add(function (params) {\n            var _a;\n            var mesh = (_a = params.subMesh) === null || _a === void 0 ? void 0 : _a.getMesh();\n            if (mesh && !_this._meshes.has(mesh)) {\n                // Register for mesh onDispose to clean up our internal maps when a mesh is disposed\n                _this._meshes.set(mesh, mesh.onDisposeObservable.add(function (mesh) {\n                    var iterator = _this._subMeshToEffect.keys();\n                    for (var key = iterator.next(); key.done !== true; key = iterator.next()) {\n                        var subMesh = key.value;\n                        if ((subMesh === null || subMesh === void 0 ? void 0 : subMesh.getMesh()) === mesh) {\n                            _this._subMeshToEffect.delete(subMesh);\n                            _this._subMeshToDepthWrapper.mm.delete(subMesh);\n                        }\n                    }\n                }));\n            }\n            _this._subMeshToEffect.set(params.subMesh, [params.effect, _this._scene.getEngine().currentRenderPassId]);\n            _this._subMeshToDepthWrapper.mm.delete(params.subMesh); // trigger a depth effect recreation\n        });\n    }\n    Object.defineProperty(ShadowDepthWrapper.prototype, \"standalone\", {\n        /** Gets the standalone status of the wrapper */\n        get: function () {\n            var _a, _b;\n            return (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.standalone) !== null && _b !== void 0 ? _b : false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ShadowDepthWrapper.prototype, \"baseMaterial\", {\n        /** Gets the base material the wrapper is built upon */\n        get: function () {\n            return this._baseMaterial;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the effect to use to generate the depth map\n     * @param subMesh subMesh to get the effect for\n     * @param shadowGenerator shadow generator to get the effect for\n     * @param passIdForDrawWrapper Id of the pass for which the effect from the draw wrapper must be retrieved from\n     * @returns the effect to use to generate the depth map for the subMesh + shadow generator specified\n     */\n    ShadowDepthWrapper.prototype.getEffect = function (subMesh, shadowGenerator, passIdForDrawWrapper) {\n        var _a;\n        var entry = (_a = this._subMeshToDepthWrapper.mm.get(subMesh)) === null || _a === void 0 ? void 0 : _a.get(shadowGenerator);\n        if (!entry) {\n            return null;\n        }\n        var drawWrapper = entry.drawWrapper[passIdForDrawWrapper];\n        if (!drawWrapper) {\n            drawWrapper = entry.drawWrapper[passIdForDrawWrapper] = new DrawWrapper(this._scene.getEngine());\n            drawWrapper.setEffect(entry.mainDrawWrapper.effect, entry.mainDrawWrapper.defines);\n        }\n        return drawWrapper;\n    };\n    /**\n     * Specifies that the submesh is ready to be used for depth rendering\n     * @param subMesh submesh to check\n     * @param defines the list of defines to take into account when checking the effect\n     * @param shadowGenerator combined with subMesh, it defines the effect to check\n     * @param useInstances specifies that instances should be used\n     * @param passIdForDrawWrapper Id of the pass for which the draw wrapper should be created\n     * @returns a boolean indicating that the submesh is ready or not\n     */\n    ShadowDepthWrapper.prototype.isReadyForSubMesh = function (subMesh, defines, shadowGenerator, useInstances, passIdForDrawWrapper) {\n        var _a, _b;\n        if (this.standalone) {\n            // will ensure the effect is (re)created for the base material\n            if (!this._baseMaterial.isReadyForSubMesh(subMesh.getMesh(), subMesh, useInstances)) {\n                return false;\n            }\n        }\n        return (_b = (_a = this._makeEffect(subMesh, defines, shadowGenerator, passIdForDrawWrapper)) === null || _a === void 0 ? void 0 : _a.isReady()) !== null && _b !== void 0 ? _b : false;\n    };\n    /**\n     * Disposes the resources\n     */\n    ShadowDepthWrapper.prototype.dispose = function () {\n        this._baseMaterial.onEffectCreatedObservable.remove(this._onEffectCreatedObserver);\n        this._onEffectCreatedObserver = null;\n        var iterator = this._meshes.entries();\n        for (var entry = iterator.next(); entry.done !== true; entry = iterator.next()) {\n            var _a = entry.value, mesh = _a[0], observer = _a[1];\n            mesh.onDisposeObservable.remove(observer);\n        }\n    };\n    ShadowDepthWrapper.prototype._makeEffect = function (subMesh, defines, shadowGenerator, passIdForDrawWrapper) {\n        var _a, _b, _c;\n        var engine = this._scene.getEngine();\n        var origEffectAndRenderPassId = this._subMeshToEffect.get(subMesh);\n        if (!origEffectAndRenderPassId) {\n            return null;\n        }\n        var origEffect = origEffectAndRenderPassId[0], origRenderPassId = origEffectAndRenderPassId[1];\n        var params = this._subMeshToDepthWrapper.get(subMesh, shadowGenerator);\n        if (!params) {\n            var mainDrawWrapper = new DrawWrapper(engine);\n            mainDrawWrapper.defines = (_b = (_a = subMesh._getDrawWrapper(origRenderPassId)) === null || _a === void 0 ? void 0 : _a.defines) !== null && _b !== void 0 ? _b : null;\n            params = {\n                drawWrapper: [],\n                mainDrawWrapper: mainDrawWrapper,\n                depthDefines: \"\",\n                token: RandomGUID(),\n            };\n            params.drawWrapper[passIdForDrawWrapper] = mainDrawWrapper;\n            this._subMeshToDepthWrapper.set(subMesh, shadowGenerator, params);\n        }\n        var join = defines.join(\"\\n\");\n        if (params.mainDrawWrapper.effect) {\n            if (join === params.depthDefines) {\n                // we already created the depth effect and it is still up to date for this submesh + shadow generator\n                return params.mainDrawWrapper.effect;\n            }\n        }\n        params.depthDefines = join;\n        // the depth effect is either out of date or has not been created yet\n        var vertexCode = origEffect.rawVertexSourceCode, fragmentCode = origEffect.rawFragmentSourceCode;\n        // vertex code\n        var vertexNormalBiasCode = this._options && this._options.remappedVariables\n            ? \"#include<shadowMapVertexNormalBias>(\".concat(this._options.remappedVariables.join(\",\"), \")\")\n            : Effect.IncludesShadersStore[\"shadowMapVertexNormalBias\"], vertexMetricCode = this._options && this._options.remappedVariables\n            ? \"#include<shadowMapVertexMetric>(\".concat(this._options.remappedVariables.join(\",\"), \")\")\n            : Effect.IncludesShadersStore[\"shadowMapVertexMetric\"], fragmentSoftTransparentShadow = this._options && this._options.remappedVariables\n            ? \"#include<shadowMapFragmentSoftTransparentShadow>(\".concat(this._options.remappedVariables.join(\",\"), \")\")\n            : Effect.IncludesShadersStore[\"shadowMapFragmentSoftTransparentShadow\"], fragmentBlockCode = Effect.IncludesShadersStore[\"shadowMapFragment\"];\n        vertexCode = vertexCode.replace(/void\\s+?main/g, Effect.IncludesShadersStore[\"shadowMapVertexExtraDeclaration\"] + \"\\r\\nvoid main\");\n        vertexCode = vertexCode.replace(/#define SHADOWDEPTH_NORMALBIAS|#define CUSTOM_VERTEX_UPDATE_WORLDPOS/g, vertexNormalBiasCode);\n        if (vertexCode.indexOf(\"#define SHADOWDEPTH_METRIC\") !== -1) {\n            vertexCode = vertexCode.replace(/#define SHADOWDEPTH_METRIC/g, vertexMetricCode);\n        }\n        else {\n            vertexCode = vertexCode.replace(/}\\s*$/g, vertexMetricCode + \"\\r\\n}\");\n        }\n        vertexCode = vertexCode.replace(/#define SHADER_NAME.*?\\n|out vec4 glFragColor;\\n/g, \"\");\n        // fragment code\n        var hasLocationForSoftTransparentShadow = fragmentCode.indexOf(\"#define SHADOWDEPTH_SOFTTRANSPARENTSHADOW\") >= 0 || fragmentCode.indexOf(\"#define CUSTOM_FRAGMENT_BEFORE_FOG\") >= 0;\n        var hasLocationForFragment = fragmentCode.indexOf(\"#define SHADOWDEPTH_FRAGMENT\") !== -1;\n        var fragmentCodeToInjectAtEnd = \"\";\n        if (!hasLocationForSoftTransparentShadow) {\n            fragmentCodeToInjectAtEnd = fragmentSoftTransparentShadow + \"\\r\\n\";\n        }\n        else {\n            fragmentCode = fragmentCode.replace(/#define SHADOWDEPTH_SOFTTRANSPARENTSHADOW|#define CUSTOM_FRAGMENT_BEFORE_FOG/g, fragmentSoftTransparentShadow);\n        }\n        fragmentCode = fragmentCode.replace(/void\\s+?main/g, Effect.IncludesShadersStore[\"shadowMapFragmentExtraDeclaration\"] + \"\\r\\nvoid main\");\n        if (hasLocationForFragment) {\n            fragmentCode = fragmentCode.replace(/#define SHADOWDEPTH_FRAGMENT/g, fragmentBlockCode);\n        }\n        else {\n            fragmentCodeToInjectAtEnd += fragmentBlockCode + \"\\r\\n\";\n        }\n        if (fragmentCodeToInjectAtEnd) {\n            fragmentCode = fragmentCode.replace(/}\\s*$/g, fragmentCodeToInjectAtEnd + \"}\");\n        }\n        fragmentCode = fragmentCode.replace(/#define SHADER_NAME.*?\\n|out vec4 glFragColor;\\n/g, \"\");\n        var uniforms = origEffect.getUniformNames().slice();\n        uniforms.push(\"biasAndScaleSM\", \"depthValuesSM\", \"lightDataSM\", \"softTransparentShadowSM\");\n        params.mainDrawWrapper.effect = engine.createEffect({\n            vertexSource: vertexCode,\n            fragmentSource: fragmentCode,\n            vertexToken: params.token,\n            fragmentToken: params.token,\n        }, {\n            attributes: origEffect.getAttributesNames(),\n            uniformsNames: uniforms,\n            uniformBuffersNames: origEffect.getUniformBuffersNames(),\n            samplers: origEffect.getSamplers(),\n            defines: join + \"\\n\" + origEffect.defines.replace(\"#define SHADOWS\", \"\").replace(/#define SHADOW\\d/g, \"\"),\n            indexParameters: origEffect.getIndexParameters(),\n        }, engine);\n        for (var id = 0; id < params.drawWrapper.length; ++id) {\n            if (id !== passIdForDrawWrapper) {\n                (_c = params.drawWrapper[id]) === null || _c === void 0 ? void 0 : _c.setEffect(params.mainDrawWrapper.effect, params.mainDrawWrapper.defines);\n            }\n        }\n        return params.mainDrawWrapper.effect;\n    };\n    return ShadowDepthWrapper;\n}());\nexport { ShadowDepthWrapper };\n//# sourceMappingURL=shadowDepthWrapper.js.map","import { DetailMapConfiguration } from \"./material.detailMapConfiguration.js\";\nimport { PBRAnisotropicConfiguration } from \"./PBR/pbrAnisotropicConfiguration.js\";\nimport { PBRBaseMaterial } from \"./PBR/pbrBaseMaterial.js\";\nimport { PBRBRDFConfiguration } from \"./PBR/pbrBRDFConfiguration.js\";\nimport { PBRClearCoatConfiguration } from \"./PBR/pbrClearCoatConfiguration.js\";\nimport { PBRIridescenceConfiguration } from \"./PBR/pbrIridescenceConfiguration.js\";\nimport { PBRSheenConfiguration } from \"./PBR/pbrSheenConfiguration.js\";\nimport { PBRSubSurfaceConfiguration } from \"./PBR/pbrSubSurfaceConfiguration.js\";\nimport { StandardMaterial } from \"./standardMaterial.js\";\n/**\n * Creates an instance of the anisotropic plugin\n * @param material parent material the plugin will be created for\n * @returns the plugin instance or null if the plugin is incompatible with material\n */\nexport function createPBRAnisotropicPlugin(material) {\n    if (material instanceof PBRBaseMaterial) {\n        return new PBRAnisotropicConfiguration(material);\n    }\n    return null;\n}\n/**\n * Creates an instance of the brdf plugin\n * @param material parent material the plugin will be created for\n * @returns the plugin instance or null if the plugin is incompatible with material\n */\nexport function createPBRBRDFPlugin(material) {\n    if (material instanceof PBRBaseMaterial) {\n        return new PBRBRDFConfiguration(material);\n    }\n    return null;\n}\n/**\n * Creates an instance of the clear coat plugin\n * @param material parent material the plugin will be created for\n * @returns the plugin instance or null if the plugin is incompatible with material\n */\nexport function createPBRClearCoatPlugin(material) {\n    if (material instanceof PBRBaseMaterial) {\n        return new PBRClearCoatConfiguration(material);\n    }\n    return null;\n}\n/**\n * Creates an instance of the iridescence plugin\n * @param material parent material the plugin will be created for\n * @returns the plugin instance or null if the plugin is incompatible with material\n */\nexport function createPBRIridescencePlugin(material) {\n    if (material instanceof PBRBaseMaterial) {\n        return new PBRIridescenceConfiguration(material);\n    }\n    return null;\n}\n/**\n * Creates an instance of the sheen plugin\n * @param material parent material the plugin will be created for\n * @returns the plugin instance or null if the plugin is incompatible with material\n */\nexport function createPBRSheenPlugin(material) {\n    if (material instanceof PBRBaseMaterial) {\n        return new PBRSheenConfiguration(material);\n    }\n    return null;\n}\n/**\n * Creates an instance of the sub surface plugin\n * @param material parent material the plugin will be created for\n * @returns the plugin instance or null if the plugin is incompatible with material\n */\nexport function createPBRSubSurfacePlugin(material) {\n    if (material instanceof PBRBaseMaterial) {\n        return new PBRSubSurfaceConfiguration(material);\n    }\n    return null;\n}\n/**\n * Creates an instance of the detail map plugin\n * @param material parent material the plugin will be created for\n * @returns the plugin instance or null if the plugin is incompatible with material\n */\nexport function createDetailMapPlugin(material) {\n    if (material instanceof PBRBaseMaterial || material instanceof StandardMaterial) {\n        return new DetailMapConfiguration(material);\n    }\n    return null;\n}\n//# sourceMappingURL=materialPluginFactoryExport.js.map","import { __decorate, __extends } from \"tslib\";\nimport { Material } from \"./material.js\";\nimport { serialize, expandToProperty, serializeAsTexture } from \"../Misc/decorators.js\";\nimport { MaterialFlags } from \"./materialFlags.js\";\nimport { MaterialHelper } from \"./materialHelper.js\";\nimport { MaterialDefines } from \"./materialDefines.js\";\nimport { MaterialPluginBase } from \"./materialPluginBase.js\";\n\n/**\n * @hidden\n */\nvar MaterialDetailMapDefines = /** @class */ (function (_super) {\n    __extends(MaterialDetailMapDefines, _super);\n    function MaterialDetailMapDefines() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.DETAIL = false;\n        _this.DETAILDIRECTUV = 0;\n        _this.DETAIL_NORMALBLENDMETHOD = 0;\n        return _this;\n    }\n    return MaterialDetailMapDefines;\n}(MaterialDefines));\nexport { MaterialDetailMapDefines };\n/**\n * Plugin that implements the detail map component of a material\n *\n * Inspired from:\n *   Unity: https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@9.0/manual/Mask-Map-and-Detail-Map.html and https://docs.unity3d.com/Manual/StandardShaderMaterialParameterDetail.html\n *   Unreal: https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/HowTo/DetailTexturing/index.html\n *   Cryengine: https://docs.cryengine.com/display/SDKDOC2/Detail+Maps\n */\nvar DetailMapConfiguration = /** @class */ (function (_super) {\n    __extends(DetailMapConfiguration, _super);\n    function DetailMapConfiguration(material, addToPluginList) {\n        if (addToPluginList === void 0) { addToPluginList = true; }\n        var _this = _super.call(this, material, \"DetailMap\", 140, new MaterialDetailMapDefines(), addToPluginList) || this;\n        _this._texture = null;\n        /**\n         * Defines how strongly the detail diffuse/albedo channel is blended with the regular diffuse/albedo texture\n         * Bigger values mean stronger blending\n         */\n        _this.diffuseBlendLevel = 1;\n        /**\n         * Defines how strongly the detail roughness channel is blended with the regular roughness value\n         * Bigger values mean stronger blending. Only used with PBR materials\n         */\n        _this.roughnessBlendLevel = 1;\n        /**\n         * Defines how strong the bump effect from the detail map is\n         * Bigger values mean stronger effect\n         */\n        _this.bumpLevel = 1;\n        _this._normalBlendMethod = Material.MATERIAL_NORMALBLENDMETHOD_WHITEOUT;\n        _this._isEnabled = false;\n        /**\n         * Enable or disable the detail map on this material\n         */\n        _this.isEnabled = false;\n        _this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n        return _this;\n    }\n    /** @hidden */\n    DetailMapConfiguration.prototype._markAllSubMeshesAsTexturesDirty = function () {\n        this._enable(this._isEnabled);\n        this._internalMarkAllSubMeshesAsTexturesDirty();\n    };\n    DetailMapConfiguration.prototype.isReadyForSubMesh = function (defines, scene, engine) {\n        if (!this._isEnabled) {\n            return true;\n        }\n        if (defines._areTexturesDirty && scene.texturesEnabled) {\n            if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled) {\n                // Detail texture cannot be not blocking.\n                if (!this._texture.isReady()) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    DetailMapConfiguration.prototype.prepareDefines = function (defines, scene) {\n        if (this._isEnabled) {\n            defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\n            var engine = scene.getEngine();\n            if (defines._areTexturesDirty) {\n                if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled && this._isEnabled) {\n                    MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"DETAIL\");\n                    defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\n                }\n                else {\n                    defines.DETAIL = false;\n                }\n            }\n        }\n        else {\n            defines.DETAIL = false;\n        }\n    };\n    DetailMapConfiguration.prototype.bindForSubMesh = function (uniformBuffer, scene) {\n        if (!this._isEnabled) {\n            return;\n        }\n        var isFrozen = this._material.isFrozen;\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\n                uniformBuffer.updateFloat4(\"vDetailInfos\", this._texture.coordinatesIndex, this.diffuseBlendLevel, this.bumpLevel, this.roughnessBlendLevel);\n                MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"detail\");\n            }\n        }\n        // Textures\n        if (scene.texturesEnabled) {\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\n                uniformBuffer.setTexture(\"detailSampler\", this._texture);\n            }\n        }\n    };\n    DetailMapConfiguration.prototype.hasTexture = function (texture) {\n        if (this._texture === texture) {\n            return true;\n        }\n        return false;\n    };\n    DetailMapConfiguration.prototype.getActiveTextures = function (activeTextures) {\n        if (this._texture) {\n            activeTextures.push(this._texture);\n        }\n    };\n    DetailMapConfiguration.prototype.getAnimatables = function (animatables) {\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n            animatables.push(this._texture);\n        }\n    };\n    DetailMapConfiguration.prototype.dispose = function (forceDisposeTextures) {\n        var _a;\n        if (forceDisposeTextures) {\n            (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n        }\n    };\n    DetailMapConfiguration.prototype.getClassName = function () {\n        return \"DetailMapConfiguration\";\n    };\n    DetailMapConfiguration.prototype.getSamplers = function (samplers) {\n        samplers.push(\"detailSampler\");\n    };\n    DetailMapConfiguration.prototype.getUniforms = function () {\n        return {\n            ubo: [\n                { name: \"vDetailInfos\", size: 4, type: \"vec4\" },\n                { name: \"detailMatrix\", size: 16, type: \"mat4\" },\n            ],\n        };\n    };\n    __decorate([\n        serializeAsTexture(\"detailTexture\"),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], DetailMapConfiguration.prototype, \"texture\", void 0);\n    __decorate([\n        serialize()\n    ], DetailMapConfiguration.prototype, \"diffuseBlendLevel\", void 0);\n    __decorate([\n        serialize()\n    ], DetailMapConfiguration.prototype, \"roughnessBlendLevel\", void 0);\n    __decorate([\n        serialize()\n    ], DetailMapConfiguration.prototype, \"bumpLevel\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], DetailMapConfiguration.prototype, \"normalBlendMethod\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], DetailMapConfiguration.prototype, \"isEnabled\", void 0);\n    return DetailMapConfiguration;\n}(MaterialPluginBase));\nexport { DetailMapConfiguration };\n//# sourceMappingURL=material.detailMapConfiguration.js.map","import { __decorate } from \"tslib\";\n\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\n/**\n * Class that holds the different stencil states of a material\n * Usage example: https://playground.babylonjs.com/#CW5PRI#10\n */\nvar MaterialStencilState = /** @class */ (function () {\n    /**\n     * Creates a material stencil state instance\n     */\n    function MaterialStencilState() {\n        this.reset();\n    }\n    /**\n     * Resets all the stencil states to default values\n     */\n    MaterialStencilState.prototype.reset = function () {\n        this.enabled = false;\n        this.mask = 0xff;\n        this.func = 519;\n        this.funcRef = 1;\n        this.funcMask = 0xff;\n        this.opStencilFail = 7680;\n        this.opDepthFail = 7680;\n        this.opStencilDepthPass = 7681;\n    };\n    Object.defineProperty(MaterialStencilState.prototype, \"func\", {\n        /**\n         * Gets or sets the stencil function\n         */\n        get: function () {\n            return this._func;\n        },\n        set: function (value) {\n            this._func = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialStencilState.prototype, \"funcRef\", {\n        /**\n         * Gets or sets the stencil function reference\n         */\n        get: function () {\n            return this._funcRef;\n        },\n        set: function (value) {\n            this._funcRef = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialStencilState.prototype, \"funcMask\", {\n        /**\n         * Gets or sets the stencil function mask\n         */\n        get: function () {\n            return this._funcMask;\n        },\n        set: function (value) {\n            this._funcMask = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialStencilState.prototype, \"opStencilFail\", {\n        /**\n         * Gets or sets the operation when the stencil test fails\n         */\n        get: function () {\n            return this._opStencilFail;\n        },\n        set: function (value) {\n            this._opStencilFail = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialStencilState.prototype, \"opDepthFail\", {\n        /**\n         * Gets or sets the operation when the depth test fails\n         */\n        get: function () {\n            return this._opDepthFail;\n        },\n        set: function (value) {\n            this._opDepthFail = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialStencilState.prototype, \"opStencilDepthPass\", {\n        /**\n         * Gets or sets the operation when the stencil+depth test succeeds\n         */\n        get: function () {\n            return this._opStencilDepthPass;\n        },\n        set: function (value) {\n            this._opStencilDepthPass = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialStencilState.prototype, \"mask\", {\n        /**\n         * Gets or sets the stencil mask\n         */\n        get: function () {\n            return this._mask;\n        },\n        set: function (value) {\n            this._mask = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialStencilState.prototype, \"enabled\", {\n        /**\n         * Enables or disables the stencil test\n         */\n        get: function () {\n            return this._enabled;\n        },\n        set: function (value) {\n            this._enabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get the current class name, useful for serialization or dynamic coding.\n     * @returns \"MaterialStencilState\"\n     */\n    MaterialStencilState.prototype.getClassName = function () {\n        return \"MaterialStencilState\";\n    };\n    /**\n     * Makes a duplicate of the current configuration into another one.\n     * @param stencilState defines stencil state where to copy the info\n     */\n    MaterialStencilState.prototype.copyTo = function (stencilState) {\n        SerializationHelper.Clone(function () { return stencilState; }, this);\n    };\n    /**\n     * Serializes this stencil configuration.\n     * @returns - An object with the serialized config.\n     */\n    MaterialStencilState.prototype.serialize = function () {\n        return SerializationHelper.Serialize(this);\n    };\n    /**\n     * Parses a stencil state configuration from a serialized object.\n     * @param source - Serialized object.\n     * @param scene Defines the scene we are parsing for\n     * @param rootUrl Defines the rootUrl to load from\n     */\n    MaterialStencilState.prototype.parse = function (source, scene, rootUrl) {\n        var _this = this;\n        SerializationHelper.Parse(function () { return _this; }, source, scene, rootUrl);\n    };\n    __decorate([\n        serialize()\n    ], MaterialStencilState.prototype, \"func\", null);\n    __decorate([\n        serialize()\n    ], MaterialStencilState.prototype, \"funcRef\", null);\n    __decorate([\n        serialize()\n    ], MaterialStencilState.prototype, \"funcMask\", null);\n    __decorate([\n        serialize()\n    ], MaterialStencilState.prototype, \"opStencilFail\", null);\n    __decorate([\n        serialize()\n    ], MaterialStencilState.prototype, \"opDepthFail\", null);\n    __decorate([\n        serialize()\n    ], MaterialStencilState.prototype, \"opStencilDepthPass\", null);\n    __decorate([\n        serialize()\n    ], MaterialStencilState.prototype, \"mask\", null);\n    __decorate([\n        serialize()\n    ], MaterialStencilState.prototype, \"enabled\", null);\n    return MaterialStencilState;\n}());\nexport { MaterialStencilState };\n//# sourceMappingURL=materialStencilState.js.map","import { __assign, __decorate } from \"tslib\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { SubMesh } from \"../Meshes/subMesh.js\";\nimport { UniformBuffer } from \"./uniformBuffer.js\";\n\nimport { Logger } from \"../Misc/logger.js\";\nimport { Plane } from \"../Maths/math.plane.js\";\nimport { MaterialHelper } from \"./materialHelper.js\";\nimport { DrawWrapper } from \"./drawWrapper.js\";\nimport { MaterialStencilState } from \"./materialStencilState.js\";\nimport { MaterialPluginEvent } from \"./materialPluginEvent.js\";\n/**\n * Base class for the main features of a material in Babylon.js\n */\nvar Material = /** @class */ (function () {\n    /**\n     * Creates a material instance\n     * @param name defines the name of the material\n     * @param scene defines the scene to reference\n     * @param doNotAdd specifies if the material should be added to the scene\n     */\n    function Material(name, scene, doNotAdd) {\n        /**\n         * Custom shadow depth material to use for shadow rendering instead of the in-built one\n         */\n        this.shadowDepthWrapper = null;\n        /**\n         * Gets or sets a boolean indicating that the material is allowed (if supported) to do shader hot swapping.\n         * This means that the material can keep using a previous shader while a new one is being compiled.\n         * This is mostly used when shader parallel compilation is supported (true by default)\n         */\n        this.allowShaderHotSwapping = true;\n        /**\n         * Gets or sets user defined metadata\n         */\n        this.metadata = null;\n        /**\n         * For internal use only. Please do not use.\n         */\n        this.reservedDataStore = null;\n        /**\n         * Specifies if the ready state should be checked on each call\n         */\n        this.checkReadyOnEveryCall = false;\n        /**\n         * Specifies if the ready state should be checked once\n         */\n        this.checkReadyOnlyOnce = false;\n        /**\n         * The state of the material\n         */\n        this.state = \"\";\n        /**\n         * The alpha value of the material\n         */\n        this._alpha = 1.0;\n        /**\n         * Specifies if back face culling is enabled\n         */\n        this._backFaceCulling = true;\n        /**\n         * Specifies if back or front faces should be culled (when culling is enabled)\n         */\n        this._cullBackFaces = true;\n        /**\n         * Callback triggered when the material is compiled\n         */\n        this.onCompiled = null;\n        /**\n         * Callback triggered when an error occurs\n         */\n        this.onError = null;\n        /**\n         * Callback triggered to get the render target textures\n         */\n        this.getRenderTargetTextures = null;\n        /**\n         * Specifies if the material should be serialized\n         */\n        this.doNotSerialize = false;\n        /**\n         * @hidden\n         */\n        this._storeEffectOnSubMeshes = false;\n        /**\n         * Stores the animations for the material\n         */\n        this.animations = null;\n        /**\n         * An event triggered when the material is disposed\n         */\n        this.onDisposeObservable = new Observable();\n        /**\n         * An observer which watches for dispose events\n         */\n        this._onDisposeObserver = null;\n        this._onUnBindObservable = null;\n        /**\n         * An observer which watches for bind events\n         */\n        this._onBindObserver = null;\n        /**\n         * Stores the value of the alpha mode\n         */\n        this._alphaMode = 2;\n        /**\n         * Stores the state of the need depth pre-pass value\n         */\n        this._needDepthPrePass = false;\n        /**\n         * Specifies if depth writing should be disabled\n         */\n        this.disableDepthWrite = false;\n        /**\n         * Specifies if color writing should be disabled\n         */\n        this.disableColorWrite = false;\n        /**\n         * Specifies if depth writing should be forced\n         */\n        this.forceDepthWrite = false;\n        /**\n         * Specifies the depth function that should be used. 0 means the default engine function\n         */\n        this.depthFunction = 0;\n        /**\n         * Specifies if there should be a separate pass for culling\n         */\n        this.separateCullingPass = false;\n        /**\n         * Stores the state specifying if fog should be enabled\n         */\n        this._fogEnabled = true;\n        /**\n         * Stores the size of points\n         */\n        this.pointSize = 1.0;\n        /**\n         * Stores the z offset Factor value\n         */\n        this.zOffset = 0;\n        /**\n         * Stores the z offset Units value\n         */\n        this.zOffsetUnits = 0;\n        /**\n         * Gives access to the stencil properties of the material\n         */\n        this.stencil = new MaterialStencilState();\n        /**\n         * Specifies if uniform buffers should be used\n         */\n        this._useUBO = false;\n        /**\n         * Stores the fill mode state\n         */\n        this._fillMode = Material.TriangleFillMode;\n        /**\n         * Specifies if the depth write state should be cached\n         */\n        this._cachedDepthWriteState = false;\n        /**\n         * Specifies if the color write state should be cached\n         */\n        this._cachedColorWriteState = false;\n        /**\n         * Specifies if the depth function state should be cached\n         */\n        this._cachedDepthFunctionState = 0;\n        /** @hidden */\n        this._indexInSceneMaterialArray = -1;\n        /** @hidden */\n        this.meshMap = null;\n        /** @hidden */\n        this._parentContainer = null;\n        /** @hidden */\n        this._uniformBufferLayoutBuilt = false;\n        this._eventInfo = {}; // will be initialized before each event notification\n        /** @hidden */\n        this._callbackPluginEventGeneric = function () { return void 0; };\n        /** @hidden */\n        this._callbackPluginEventIsReadyForSubMesh = function () { return void 0; };\n        /** @hidden */\n        this._callbackPluginEventPrepareDefines = function () { return void 0; };\n        /** @hidden */\n        this._callbackPluginEventPrepareDefinesBeforeAttributes = function () { return void 0; };\n        /** @hidden */\n        this._callbackPluginEventHardBindForSubMesh = function () { return void 0; };\n        /** @hidden */\n        this._callbackPluginEventBindForSubMesh = function () { return void 0; };\n        /** @hidden */\n        this._callbackPluginEventHasRenderTargetTextures = function () { return void 0; };\n        /** @hidden */\n        this._callbackPluginEventFillRenderTargetTextures = function () { return void 0; };\n        /**\n         * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\n         */\n        this._forceAlphaTest = false;\n        /**\n         * The transparency mode of the material.\n         */\n        this._transparencyMode = null;\n        this.name = name;\n        var setScene = scene || EngineStore.LastCreatedScene;\n        if (!setScene) {\n            return;\n        }\n        this._scene = setScene;\n        this._dirtyCallbacks = {};\n        this._dirtyCallbacks[1] = this._markAllSubMeshesAsTexturesDirty.bind(this);\n        this._dirtyCallbacks[2] = this._markAllSubMeshesAsLightsDirty.bind(this);\n        this._dirtyCallbacks[4] = this._markAllSubMeshesAsFresnelDirty.bind(this);\n        this._dirtyCallbacks[8] = this._markAllSubMeshesAsAttributesDirty.bind(this);\n        this._dirtyCallbacks[16] = this._markAllSubMeshesAsMiscDirty.bind(this);\n        this._dirtyCallbacks[32] = this._markAllSubMeshesAsPrePassDirty.bind(this);\n        this._dirtyCallbacks[63] = this._markAllSubMeshesAsAllDirty.bind(this);\n        this.id = name || Tools.RandomId();\n        this.uniqueId = this._scene.getUniqueId();\n        this._materialContext = this._scene.getEngine().createMaterialContext();\n        this._drawWrapper = new DrawWrapper(this._scene.getEngine(), false);\n        this._drawWrapper.materialContext = this._materialContext;\n        if (this._scene.useRightHandedSystem) {\n            this.sideOrientation = Material.ClockWiseSideOrientation;\n        }\n        else {\n            this.sideOrientation = Material.CounterClockWiseSideOrientation;\n        }\n        this._uniformBuffer = new UniformBuffer(this._scene.getEngine(), undefined, undefined, name);\n        this._useUBO = this.getScene().getEngine().supportsUniformBuffers;\n        if (!doNotAdd) {\n            this._scene.addMaterial(this);\n        }\n        if (this._scene.useMaterialMeshMap) {\n            this.meshMap = {};\n        }\n        Material.OnEventObservable.notifyObservers(this, MaterialPluginEvent.Created);\n    }\n    Object.defineProperty(Material.prototype, \"canRenderToMRT\", {\n        /**\n         * If the material can be rendered to several textures with MRT extension\n         */\n        get: function () {\n            // By default, shaders are not compatible with MRTs\n            // Base classes should override that if their shader supports MRT\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Material.prototype, \"alpha\", {\n        /**\n         * Gets the alpha value of the material\n         */\n        get: function () {\n            return this._alpha;\n        },\n        /**\n         * Sets the alpha value of the material\n         */\n        set: function (value) {\n            if (this._alpha === value) {\n                return;\n            }\n            var oldValue = this._alpha;\n            this._alpha = value;\n            // Only call dirty when there is a state change (no alpha / alpha)\n            if (oldValue === 1 || value === 1) {\n                this.markAsDirty(Material.MiscDirtyFlag);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Material.prototype, \"backFaceCulling\", {\n        /**\n         * Gets the culling state\n         */\n        get: function () {\n            return this._backFaceCulling;\n        },\n        /**\n         * Sets the culling state (true to enable culling, false to disable)\n         */\n        set: function (value) {\n            if (this._backFaceCulling === value) {\n                return;\n            }\n            this._backFaceCulling = value;\n            this.markAsDirty(Material.TextureDirtyFlag);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Material.prototype, \"cullBackFaces\", {\n        /**\n         * Gets the type of faces that should be culled\n         */\n        get: function () {\n            return this._cullBackFaces;\n        },\n        /**\n         * Sets the type of faces that should be culled (true for back faces, false for front faces)\n         */\n        set: function (value) {\n            if (this._cullBackFaces === value) {\n                return;\n            }\n            this._cullBackFaces = value;\n            this.markAsDirty(Material.TextureDirtyFlag);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Material.prototype, \"hasRenderTargetTextures\", {\n        /**\n         * Gets a boolean indicating that current material needs to register RTT\n         */\n        get: function () {\n            this._eventInfo.hasRenderTargetTextures = false;\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\n            return this._eventInfo.hasRenderTargetTextures;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Material.prototype, \"onDispose\", {\n        /**\n         * Called during a dispose event\n         */\n        set: function (callback) {\n            if (this._onDisposeObserver) {\n                this.onDisposeObservable.remove(this._onDisposeObserver);\n            }\n            this._onDisposeObserver = this.onDisposeObservable.add(callback);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Material.prototype, \"onBindObservable\", {\n        /**\n         * An event triggered when the material is bound\n         */\n        get: function () {\n            if (!this._onBindObservable) {\n                this._onBindObservable = new Observable();\n            }\n            return this._onBindObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Material.prototype, \"onBind\", {\n        /**\n         * Called during a bind event\n         */\n        set: function (callback) {\n            if (this._onBindObserver) {\n                this.onBindObservable.remove(this._onBindObserver);\n            }\n            this._onBindObserver = this.onBindObservable.add(callback);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Material.prototype, \"onUnBindObservable\", {\n        /**\n         * An event triggered when the material is unbound\n         */\n        get: function () {\n            if (!this._onUnBindObservable) {\n                this._onUnBindObservable = new Observable();\n            }\n            return this._onUnBindObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Material.prototype, \"onEffectCreatedObservable\", {\n        /**\n         * An event triggered when the effect is (re)created\n         */\n        get: function () {\n            if (!this._onEffectCreatedObservable) {\n                this._onEffectCreatedObservable = new Observable();\n            }\n            return this._onEffectCreatedObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Material.prototype, \"alphaMode\", {\n        /**\n         * Gets the value of the alpha mode\n         */\n        get: function () {\n            return this._alphaMode;\n        },\n        /**\n         * Sets the value of the alpha mode.\n         *\n         * | Value | Type | Description |\n         * | --- | --- | --- |\n         * | 0 | ALPHA_DISABLE |   |\n         * | 1 | ALPHA_ADD |   |\n         * | 2 | ALPHA_COMBINE |   |\n         * | 3 | ALPHA_SUBTRACT |   |\n         * | 4 | ALPHA_MULTIPLY |   |\n         * | 5 | ALPHA_MAXIMIZED |   |\n         * | 6 | ALPHA_ONEONE |   |\n         * | 7 | ALPHA_PREMULTIPLIED |   |\n         * | 8 | ALPHA_PREMULTIPLIED_PORTERDUFF |   |\n         * | 9 | ALPHA_INTERPOLATE |   |\n         * | 10 | ALPHA_SCREENMODE |   |\n         *\n         */\n        set: function (value) {\n            if (this._alphaMode === value) {\n                return;\n            }\n            this._alphaMode = value;\n            this.markAsDirty(Material.TextureDirtyFlag);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Material.prototype, \"needDepthPrePass\", {\n        /**\n         * Gets the depth pre-pass value\n         */\n        get: function () {\n            return this._needDepthPrePass;\n        },\n        /**\n         * Sets the need depth pre-pass value\n         */\n        set: function (value) {\n            if (this._needDepthPrePass === value) {\n                return;\n            }\n            this._needDepthPrePass = value;\n            if (this._needDepthPrePass) {\n                this.checkReadyOnEveryCall = true;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Material.prototype, \"isPrePassCapable\", {\n        /**\n         * Can this material render to prepass\n         */\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Material.prototype, \"fogEnabled\", {\n        /**\n         * Gets the value of the fog enabled state\n         */\n        get: function () {\n            return this._fogEnabled;\n        },\n        /**\n         * Sets the state for enabling fog\n         */\n        set: function (value) {\n            if (this._fogEnabled === value) {\n                return;\n            }\n            this._fogEnabled = value;\n            this.markAsDirty(Material.MiscDirtyFlag);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Material.prototype, \"wireframe\", {\n        get: function () {\n            switch (this._fillMode) {\n                case Material.WireFrameFillMode:\n                case Material.LineListDrawMode:\n                case Material.LineLoopDrawMode:\n                case Material.LineStripDrawMode:\n                    return true;\n            }\n            return this._scene.forceWireframe;\n        },\n        /**\n         * Sets the state of wireframe mode\n         */\n        set: function (value) {\n            this.fillMode = value ? Material.WireFrameFillMode : Material.TriangleFillMode;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Material.prototype, \"pointsCloud\", {\n        /**\n         * Gets the value specifying if point clouds are enabled\n         */\n        get: function () {\n            switch (this._fillMode) {\n                case Material.PointFillMode:\n                case Material.PointListDrawMode:\n                    return true;\n            }\n            return this._scene.forcePointsCloud;\n        },\n        /**\n         * Sets the state of point cloud mode\n         */\n        set: function (value) {\n            this.fillMode = value ? Material.PointFillMode : Material.TriangleFillMode;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Material.prototype, \"fillMode\", {\n        /**\n         * Gets the material fill mode\n         */\n        get: function () {\n            return this._fillMode;\n        },\n        /**\n         * Sets the material fill mode\n         */\n        set: function (value) {\n            if (this._fillMode === value) {\n                return;\n            }\n            this._fillMode = value;\n            this.markAsDirty(Material.MiscDirtyFlag);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /** @hidden */\n    Material.prototype._getDrawWrapper = function () {\n        return this._drawWrapper;\n    };\n    /**\n     * @param drawWrapper\n     * @hidden\n     */\n    Material.prototype._setDrawWrapper = function (drawWrapper) {\n        this._drawWrapper = drawWrapper;\n    };\n    /**\n     * Returns a string representation of the current material\n     * @param fullDetails defines a boolean indicating which levels of logging is desired\n     * @returns a string with material information\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Material.prototype.toString = function (fullDetails) {\n        var ret = \"Name: \" + this.name;\n        return ret;\n    };\n    /**\n     * Gets the class name of the material\n     * @returns a string with the class name of the material\n     */\n    Material.prototype.getClassName = function () {\n        return \"Material\";\n    };\n    Object.defineProperty(Material.prototype, \"isFrozen\", {\n        /**\n         * Specifies if updates for the material been locked\n         */\n        get: function () {\n            return this.checkReadyOnlyOnce;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Locks updates for the material\n     */\n    Material.prototype.freeze = function () {\n        this.markDirty();\n        this.checkReadyOnlyOnce = true;\n    };\n    /**\n     * Unlocks updates for the material\n     */\n    Material.prototype.unfreeze = function () {\n        this.markDirty();\n        this.checkReadyOnlyOnce = false;\n    };\n    /**\n     * Specifies if the material is ready to be used\n     * @param mesh defines the mesh to check\n     * @param useInstances specifies if instances should be used\n     * @returns a boolean indicating if the material is ready to be used\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Material.prototype.isReady = function (mesh, useInstances) {\n        return true;\n    };\n    /**\n     * Specifies that the submesh is ready to be used\n     * @param mesh defines the mesh to check\n     * @param subMesh defines which submesh to check\n     * @param useInstances specifies that instances should be used\n     * @returns a boolean indicating that the submesh is ready or not\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Material.prototype.isReadyForSubMesh = function (mesh, subMesh, useInstances) {\n        var defines = subMesh.materialDefines;\n        if (!defines) {\n            return false;\n        }\n        this._eventInfo.isReadyForSubMesh = true;\n        this._eventInfo.defines = defines;\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\n        return this._eventInfo.isReadyForSubMesh;\n    };\n    /**\n     * Returns the material effect\n     * @returns the effect associated with the material\n     */\n    Material.prototype.getEffect = function () {\n        return this._drawWrapper.effect;\n    };\n    /**\n     * Returns the current scene\n     * @returns a Scene\n     */\n    Material.prototype.getScene = function () {\n        return this._scene;\n    };\n    Object.defineProperty(Material.prototype, \"transparencyMode\", {\n        /**\n         * Gets the current transparency mode.\n         */\n        get: function () {\n            return this._transparencyMode;\n        },\n        /**\n         * Sets the transparency mode of the material.\n         *\n         * | Value | Type                                | Description |\n         * | ----- | ----------------------------------- | ----------- |\n         * | 0     | OPAQUE                              |             |\n         * | 1     | ALPHATEST                           |             |\n         * | 2     | ALPHABLEND                          |             |\n         * | 3     | ALPHATESTANDBLEND                   |             |\n         *\n         */\n        set: function (value) {\n            if (this._transparencyMode === value) {\n                return;\n            }\n            this._transparencyMode = value;\n            this._forceAlphaTest = value === Material.MATERIAL_ALPHATESTANDBLEND;\n            this._markAllSubMeshesAsTexturesAndMiscDirty();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Material.prototype, \"_disableAlphaBlending\", {\n        /**\n         * Returns true if alpha blending should be disabled.\n         */\n        get: function () {\n            return this._transparencyMode === Material.MATERIAL_OPAQUE || this._transparencyMode === Material.MATERIAL_ALPHATEST;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Specifies whether or not this material should be rendered in alpha blend mode.\n     * @returns a boolean specifying if alpha blending is needed\n     */\n    Material.prototype.needAlphaBlending = function () {\n        if (this._disableAlphaBlending) {\n            return false;\n        }\n        return this.alpha < 1.0;\n    };\n    /**\n     * Specifies if the mesh will require alpha blending\n     * @param mesh defines the mesh to check\n     * @returns a boolean specifying if alpha blending is needed for the mesh\n     */\n    Material.prototype.needAlphaBlendingForMesh = function (mesh) {\n        if (this._disableAlphaBlending && mesh.visibility >= 1.0) {\n            return false;\n        }\n        return this.needAlphaBlending() || mesh.visibility < 1.0 || mesh.hasVertexAlpha;\n    };\n    /**\n     * Specifies whether or not this material should be rendered in alpha test mode.\n     * @returns a boolean specifying if an alpha test is needed.\n     */\n    Material.prototype.needAlphaTesting = function () {\n        if (this._forceAlphaTest) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Specifies if material alpha testing should be turned on for the mesh\n     * @param mesh defines the mesh to check\n     */\n    Material.prototype._shouldTurnAlphaTestOn = function (mesh) {\n        return !this.needAlphaBlendingForMesh(mesh) && this.needAlphaTesting();\n    };\n    /**\n     * Gets the texture used for the alpha test\n     * @returns the texture to use for alpha testing\n     */\n    Material.prototype.getAlphaTestTexture = function () {\n        return null;\n    };\n    /**\n     * Marks the material to indicate that it needs to be re-calculated\n     */\n    Material.prototype.markDirty = function () {\n        var meshes = this.getScene().meshes;\n        for (var _i = 0, meshes_1 = meshes; _i < meshes_1.length; _i++) {\n            var mesh = meshes_1[_i];\n            if (!mesh.subMeshes) {\n                continue;\n            }\n            for (var _a = 0, _b = mesh.subMeshes; _a < _b.length; _a++) {\n                var subMesh = _b[_a];\n                if (subMesh.getMaterial() !== this) {\n                    continue;\n                }\n                if (!subMesh.effect) {\n                    continue;\n                }\n                subMesh.effect._wasPreviouslyReady = false;\n            }\n        }\n    };\n    /**\n     * @param effect\n     * @param overrideOrientation\n     * @hidden\n     */\n    Material.prototype._preBind = function (effect, overrideOrientation) {\n        if (overrideOrientation === void 0) { overrideOrientation = null; }\n        var engine = this._scene.getEngine();\n        var orientation = overrideOrientation == null ? this.sideOrientation : overrideOrientation;\n        var reverse = orientation === Material.ClockWiseSideOrientation;\n        engine.enableEffect(effect ? effect : this._getDrawWrapper());\n        engine.setState(this.backFaceCulling, this.zOffset, false, reverse, this.cullBackFaces, this.stencil, this.zOffsetUnits);\n        return reverse;\n    };\n    /**\n     * Binds the material to the mesh\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh to bind the material to\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Material.prototype.bind = function (world, mesh) { };\n    /**\n     * Initializes the uniform buffer layout for the shader.\n     */\n    Material.prototype.buildUniformLayout = function () {\n        var ubo = this._uniformBuffer;\n        this._eventInfo.ubo = ubo;\n        this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareUniformBuffer, this._eventInfo);\n        ubo.create();\n        this._uniformBufferLayoutBuilt = true;\n    };\n    /**\n     * Binds the submesh to the material\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh containing the submesh\n     * @param subMesh defines the submesh to bind the material to\n     */\n    Material.prototype.bindForSubMesh = function (world, mesh, subMesh) {\n        var effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._eventInfo.subMesh = subMesh;\n        this._callbackPluginEventBindForSubMesh(this._eventInfo);\n    };\n    /**\n     * Binds the world matrix to the material\n     * @param world defines the world transformation matrix\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Material.prototype.bindOnlyWorldMatrix = function (world) { };\n    /**\n     * Binds the view matrix to the effect\n     * @param effect defines the effect to bind the view matrix to\n     */\n    Material.prototype.bindView = function (effect) {\n        if (!this._useUBO) {\n            effect.setMatrix(\"view\", this.getScene().getViewMatrix());\n        }\n        else {\n            this._needToBindSceneUbo = true;\n        }\n    };\n    /**\n     * Binds the view projection and projection matrices to the effect\n     * @param effect defines the effect to bind the view projection and projection matrices to\n     */\n    Material.prototype.bindViewProjection = function (effect) {\n        if (!this._useUBO) {\n            effect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\n            effect.setMatrix(\"projection\", this.getScene().getProjectionMatrix());\n        }\n        else {\n            this._needToBindSceneUbo = true;\n        }\n    };\n    /**\n     * Binds the view matrix to the effect\n     * @param effect defines the effect to bind the view matrix to\n     * @param variableName name of the shader variable that will hold the eye position\n     */\n    Material.prototype.bindEyePosition = function (effect, variableName) {\n        if (!this._useUBO) {\n            this._scene.bindEyePosition(effect, variableName);\n        }\n        else {\n            this._needToBindSceneUbo = true;\n        }\n    };\n    /**\n     * Processes to execute after binding the material to a mesh\n     * @param mesh defines the rendered mesh\n     * @param effect\n     */\n    Material.prototype._afterBind = function (mesh, effect) {\n        if (effect === void 0) { effect = null; }\n        this._scene._cachedMaterial = this;\n        if (this._needToBindSceneUbo) {\n            if (effect) {\n                this._needToBindSceneUbo = false;\n                MaterialHelper.BindSceneUniformBuffer(effect, this.getScene().getSceneUniformBuffer());\n                this._scene.finalizeSceneUbo();\n            }\n        }\n        if (mesh) {\n            this._scene._cachedVisibility = mesh.visibility;\n        }\n        else {\n            this._scene._cachedVisibility = 1;\n        }\n        if (this._onBindObservable && mesh) {\n            this._onBindObservable.notifyObservers(mesh);\n        }\n        if (this.disableDepthWrite) {\n            var engine = this._scene.getEngine();\n            this._cachedDepthWriteState = engine.getDepthWrite();\n            engine.setDepthWrite(false);\n        }\n        if (this.disableColorWrite) {\n            var engine = this._scene.getEngine();\n            this._cachedColorWriteState = engine.getColorWrite();\n            engine.setColorWrite(false);\n        }\n        if (this.depthFunction !== 0) {\n            var engine = this._scene.getEngine();\n            this._cachedDepthFunctionState = engine.getDepthFunction() || 0;\n            engine.setDepthFunction(this.depthFunction);\n        }\n    };\n    /**\n     * Unbinds the material from the mesh\n     */\n    Material.prototype.unbind = function () {\n        if (this._onUnBindObservable) {\n            this._onUnBindObservable.notifyObservers(this);\n        }\n        if (this.depthFunction !== 0) {\n            var engine = this._scene.getEngine();\n            engine.setDepthFunction(this._cachedDepthFunctionState);\n        }\n        if (this.disableDepthWrite) {\n            var engine = this._scene.getEngine();\n            engine.setDepthWrite(this._cachedDepthWriteState);\n        }\n        if (this.disableColorWrite) {\n            var engine = this._scene.getEngine();\n            engine.setColorWrite(this._cachedColorWriteState);\n        }\n    };\n    /**\n     * Returns the animatable textures.\n     * @returns - Array of animatable textures.\n     */\n    Material.prototype.getAnimatables = function () {\n        this._eventInfo.animatables = [];\n        this._callbackPluginEventGeneric(MaterialPluginEvent.GetAnimatables, this._eventInfo);\n        return this._eventInfo.animatables;\n    };\n    /**\n     * Gets the active textures from the material\n     * @returns an array of textures\n     */\n    Material.prototype.getActiveTextures = function () {\n        this._eventInfo.activeTextures = [];\n        this._callbackPluginEventGeneric(MaterialPluginEvent.GetActiveTextures, this._eventInfo);\n        return this._eventInfo.activeTextures;\n    };\n    /**\n     * Specifies if the material uses a texture\n     * @param texture defines the texture to check against the material\n     * @returns a boolean specifying if the material uses the texture\n     */\n    Material.prototype.hasTexture = function (texture) {\n        this._eventInfo.hasTexture = false;\n        this._eventInfo.texture = texture;\n        this._callbackPluginEventGeneric(MaterialPluginEvent.HasTexture, this._eventInfo);\n        return this._eventInfo.hasTexture;\n    };\n    /**\n     * Makes a duplicate of the material, and gives it a new name\n     * @param name defines the new name for the duplicated material\n     * @returns the cloned material\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Material.prototype.clone = function (name) {\n        return null;\n    };\n    /**\n     * Gets the meshes bound to the material\n     * @returns an array of meshes bound to the material\n     */\n    Material.prototype.getBindedMeshes = function () {\n        var _this = this;\n        if (this.meshMap) {\n            var result = new Array();\n            for (var meshId in this.meshMap) {\n                var mesh = this.meshMap[meshId];\n                if (mesh) {\n                    result.push(mesh);\n                }\n            }\n            return result;\n        }\n        else {\n            var meshes = this._scene.meshes;\n            return meshes.filter(function (mesh) { return mesh.material === _this; });\n        }\n    };\n    /**\n     * Force shader compilation\n     * @param mesh defines the mesh associated with this material\n     * @param onCompiled defines a function to execute once the material is compiled\n     * @param options defines the options to configure the compilation\n     * @param onError defines a function to execute if the material fails compiling\n     */\n    Material.prototype.forceCompilation = function (mesh, onCompiled, options, onError) {\n        var _this = this;\n        var localOptions = __assign({ clipPlane: false, useInstances: false }, options);\n        var scene = this.getScene();\n        var currentHotSwapingState = this.allowShaderHotSwapping;\n        this.allowShaderHotSwapping = false; // Turned off to let us evaluate the real compilation state\n        var checkReady = function () {\n            if (!_this._scene || !_this._scene.getEngine()) {\n                return;\n            }\n            var clipPlaneState = scene.clipPlane;\n            if (localOptions.clipPlane) {\n                scene.clipPlane = new Plane(0, 0, 0, 1);\n            }\n            if (_this._storeEffectOnSubMeshes) {\n                var allDone = true, lastError = null;\n                if (mesh.subMeshes) {\n                    var tempSubMesh = new SubMesh(0, 0, 0, 0, 0, mesh, undefined, false, false);\n                    if (tempSubMesh.materialDefines) {\n                        tempSubMesh.materialDefines._renderId = -1;\n                    }\n                    if (!_this.isReadyForSubMesh(mesh, tempSubMesh, localOptions.useInstances)) {\n                        if (tempSubMesh.effect && tempSubMesh.effect.getCompilationError() && tempSubMesh.effect.allFallbacksProcessed()) {\n                            lastError = tempSubMesh.effect.getCompilationError();\n                        }\n                        else {\n                            allDone = false;\n                            setTimeout(checkReady, 16);\n                        }\n                    }\n                }\n                if (allDone) {\n                    _this.allowShaderHotSwapping = currentHotSwapingState;\n                    if (lastError) {\n                        if (onError) {\n                            onError(lastError);\n                        }\n                    }\n                    if (onCompiled) {\n                        onCompiled(_this);\n                    }\n                }\n            }\n            else {\n                if (_this.isReady()) {\n                    _this.allowShaderHotSwapping = currentHotSwapingState;\n                    if (onCompiled) {\n                        onCompiled(_this);\n                    }\n                }\n                else {\n                    setTimeout(checkReady, 16);\n                }\n            }\n            if (localOptions.clipPlane) {\n                scene.clipPlane = clipPlaneState;\n            }\n        };\n        checkReady();\n    };\n    /**\n     * Force shader compilation\n     * @param mesh defines the mesh that will use this material\n     * @param options defines additional options for compiling the shaders\n     * @returns a promise that resolves when the compilation completes\n     */\n    Material.prototype.forceCompilationAsync = function (mesh, options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.forceCompilation(mesh, function () {\n                resolve();\n            }, options, function (reason) {\n                reject(reason);\n            });\n        });\n    };\n    /**\n     * Marks a define in the material to indicate that it needs to be re-computed\n     * @param flag defines a flag used to determine which parts of the material have to be marked as dirty\n     */\n    Material.prototype.markAsDirty = function (flag) {\n        if (this.getScene().blockMaterialDirtyMechanism) {\n            return;\n        }\n        Material._DirtyCallbackArray.length = 0;\n        if (flag & Material.TextureDirtyFlag) {\n            Material._DirtyCallbackArray.push(Material._TextureDirtyCallBack);\n        }\n        if (flag & Material.LightDirtyFlag) {\n            Material._DirtyCallbackArray.push(Material._LightsDirtyCallBack);\n        }\n        if (flag & Material.FresnelDirtyFlag) {\n            Material._DirtyCallbackArray.push(Material._FresnelDirtyCallBack);\n        }\n        if (flag & Material.AttributesDirtyFlag) {\n            Material._DirtyCallbackArray.push(Material._AttributeDirtyCallBack);\n        }\n        if (flag & Material.MiscDirtyFlag) {\n            Material._DirtyCallbackArray.push(Material._MiscDirtyCallBack);\n        }\n        if (flag & Material.PrePassDirtyFlag) {\n            Material._DirtyCallbackArray.push(Material._PrePassDirtyCallBack);\n        }\n        if (Material._DirtyCallbackArray.length) {\n            this._markAllSubMeshesAsDirty(Material._RunDirtyCallBacks);\n        }\n        this.getScene().resetCachedMaterial();\n    };\n    /**\n     * Resets the draw wrappers cache for all submeshes that are using this material\n     */\n    Material.prototype.resetDrawCache = function () {\n        var meshes = this.getScene().meshes;\n        for (var _i = 0, meshes_2 = meshes; _i < meshes_2.length; _i++) {\n            var mesh = meshes_2[_i];\n            if (!mesh.subMeshes) {\n                continue;\n            }\n            for (var _a = 0, _b = mesh.subMeshes; _a < _b.length; _a++) {\n                var subMesh = _b[_a];\n                if (subMesh.getMaterial() !== this) {\n                    continue;\n                }\n                subMesh.resetDrawCache();\n            }\n        }\n    };\n    /**\n     * Marks all submeshes of a material to indicate that their material defines need to be re-calculated\n     * @param func defines a function which checks material defines against the submeshes\n     */\n    Material.prototype._markAllSubMeshesAsDirty = function (func) {\n        if (this.getScene().blockMaterialDirtyMechanism) {\n            return;\n        }\n        var meshes = this.getScene().meshes;\n        for (var _i = 0, meshes_3 = meshes; _i < meshes_3.length; _i++) {\n            var mesh = meshes_3[_i];\n            if (!mesh.subMeshes) {\n                continue;\n            }\n            for (var _a = 0, _b = mesh.subMeshes; _a < _b.length; _a++) {\n                var subMesh = _b[_a];\n                // We want to skip the submeshes which are not using this material or which have not yet rendered at least once\n                if (subMesh.getMaterial(false) !== this) {\n                    continue;\n                }\n                for (var _c = 0, _d = subMesh._drawWrappers; _c < _d.length; _c++) {\n                    var drawWrapper = _d[_c];\n                    if (!drawWrapper || !drawWrapper.defines || !drawWrapper.defines.markAllAsDirty) {\n                        continue;\n                    }\n                    if (this._materialContext === drawWrapper.materialContext) {\n                        func(drawWrapper.defines);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Indicates that the scene should check if the rendering now needs a prepass\n     */\n    Material.prototype._markScenePrePassDirty = function () {\n        if (this.getScene().blockMaterialDirtyMechanism) {\n            return;\n        }\n        var prePassRenderer = this.getScene().enablePrePassRenderer();\n        if (prePassRenderer) {\n            prePassRenderer.markAsDirty();\n        }\n    };\n    /**\n     * Indicates that we need to re-calculated for all submeshes\n     */\n    Material.prototype._markAllSubMeshesAsAllDirty = function () {\n        this._markAllSubMeshesAsDirty(Material._AllDirtyCallBack);\n    };\n    /**\n     * Indicates that image processing needs to be re-calculated for all submeshes\n     */\n    Material.prototype._markAllSubMeshesAsImageProcessingDirty = function () {\n        this._markAllSubMeshesAsDirty(Material._ImageProcessingDirtyCallBack);\n    };\n    /**\n     * Indicates that textures need to be re-calculated for all submeshes\n     */\n    Material.prototype._markAllSubMeshesAsTexturesDirty = function () {\n        this._markAllSubMeshesAsDirty(Material._TextureDirtyCallBack);\n    };\n    /**\n     * Indicates that fresnel needs to be re-calculated for all submeshes\n     */\n    Material.prototype._markAllSubMeshesAsFresnelDirty = function () {\n        this._markAllSubMeshesAsDirty(Material._FresnelDirtyCallBack);\n    };\n    /**\n     * Indicates that fresnel and misc need to be re-calculated for all submeshes\n     */\n    Material.prototype._markAllSubMeshesAsFresnelAndMiscDirty = function () {\n        this._markAllSubMeshesAsDirty(Material._FresnelAndMiscDirtyCallBack);\n    };\n    /**\n     * Indicates that lights need to be re-calculated for all submeshes\n     */\n    Material.prototype._markAllSubMeshesAsLightsDirty = function () {\n        this._markAllSubMeshesAsDirty(Material._LightsDirtyCallBack);\n    };\n    /**\n     * Indicates that attributes need to be re-calculated for all submeshes\n     */\n    Material.prototype._markAllSubMeshesAsAttributesDirty = function () {\n        this._markAllSubMeshesAsDirty(Material._AttributeDirtyCallBack);\n    };\n    /**\n     * Indicates that misc needs to be re-calculated for all submeshes\n     */\n    Material.prototype._markAllSubMeshesAsMiscDirty = function () {\n        this._markAllSubMeshesAsDirty(Material._MiscDirtyCallBack);\n    };\n    /**\n     * Indicates that prepass needs to be re-calculated for all submeshes\n     */\n    Material.prototype._markAllSubMeshesAsPrePassDirty = function () {\n        this._markAllSubMeshesAsDirty(Material._MiscDirtyCallBack);\n    };\n    /**\n     * Indicates that textures and misc need to be re-calculated for all submeshes\n     */\n    Material.prototype._markAllSubMeshesAsTexturesAndMiscDirty = function () {\n        this._markAllSubMeshesAsDirty(Material._TextureAndMiscDirtyCallBack);\n    };\n    /**\n     * Sets the required values to the prepass renderer.\n     * @param prePassRenderer defines the prepass renderer to setup.\n     * @returns true if the pre pass is needed.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Material.prototype.setPrePassRenderer = function (prePassRenderer) {\n        // Do Nothing by default\n        return false;\n    };\n    /**\n     * Disposes the material\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\n     * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\n     */\n    Material.prototype.dispose = function (forceDisposeEffect, forceDisposeTextures, notBoundToMesh) {\n        var scene = this.getScene();\n        // Animations\n        scene.stopAnimation(this);\n        scene.freeProcessedMaterials();\n        // Remove from scene\n        scene.removeMaterial(this);\n        this._eventInfo.forceDisposeTextures = forceDisposeTextures;\n        this._callbackPluginEventGeneric(MaterialPluginEvent.Disposed, this._eventInfo);\n        if (this._parentContainer) {\n            var index = this._parentContainer.materials.indexOf(this);\n            if (index > -1) {\n                this._parentContainer.materials.splice(index, 1);\n            }\n            this._parentContainer = null;\n        }\n        if (notBoundToMesh !== true) {\n            // Remove from meshes\n            if (this.meshMap) {\n                for (var meshId in this.meshMap) {\n                    var mesh = this.meshMap[meshId];\n                    if (mesh) {\n                        mesh.material = null; // will set the entry in the map to undefined\n                        this.releaseVertexArrayObject(mesh, forceDisposeEffect);\n                    }\n                }\n            }\n            else {\n                var meshes = scene.meshes;\n                for (var _i = 0, meshes_4 = meshes; _i < meshes_4.length; _i++) {\n                    var mesh = meshes_4[_i];\n                    if (mesh.material === this && !mesh.sourceMesh) {\n                        mesh.material = null;\n                        this.releaseVertexArrayObject(mesh, forceDisposeEffect);\n                    }\n                }\n            }\n        }\n        this._uniformBuffer.dispose();\n        // Shader are kept in cache for further use but we can get rid of this by using forceDisposeEffect\n        if (forceDisposeEffect && this._drawWrapper.effect) {\n            if (!this._storeEffectOnSubMeshes) {\n                this._drawWrapper.effect.dispose();\n            }\n            this._drawWrapper.effect = null;\n        }\n        this.metadata = null;\n        // Callback\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n        if (this._onBindObservable) {\n            this._onBindObservable.clear();\n        }\n        if (this._onUnBindObservable) {\n            this._onUnBindObservable.clear();\n        }\n        if (this._onEffectCreatedObservable) {\n            this._onEffectCreatedObservable.clear();\n        }\n    };\n    /**\n     * @param mesh\n     * @param forceDisposeEffect\n     * @hidden\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Material.prototype.releaseVertexArrayObject = function (mesh, forceDisposeEffect) {\n        if (mesh.geometry) {\n            var geometry = mesh.geometry;\n            if (this._storeEffectOnSubMeshes) {\n                for (var _i = 0, _a = mesh.subMeshes; _i < _a.length; _i++) {\n                    var subMesh = _a[_i];\n                    geometry._releaseVertexArrayObject(subMesh.effect);\n                    if (forceDisposeEffect && subMesh.effect) {\n                        subMesh.effect.dispose();\n                    }\n                }\n            }\n            else {\n                geometry._releaseVertexArrayObject(this._drawWrapper.effect);\n            }\n        }\n    };\n    /**\n     * Serializes this material\n     * @returns the serialized material object\n     */\n    Material.prototype.serialize = function () {\n        var serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.stencil = this.stencil.serialize();\n        serializationObject.uniqueId = this.uniqueId;\n        return serializationObject;\n    };\n    /**\n     * Creates a material from parsed material data\n     * @param parsedMaterial defines parsed material data\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures\n     * @returns a new material\n     */\n    Material.Parse = function (parsedMaterial, scene, rootUrl) {\n        if (!parsedMaterial.customType) {\n            parsedMaterial.customType = \"BABYLON.StandardMaterial\";\n        }\n        else if (parsedMaterial.customType === \"BABYLON.PBRMaterial\" && parsedMaterial.overloadedAlbedo) {\n            parsedMaterial.customType = \"BABYLON.LegacyPBRMaterial\";\n            if (!BABYLON.LegacyPBRMaterial) {\n                Logger.Error(\"Your scene is trying to load a legacy version of the PBRMaterial, please, include it from the materials library.\");\n                return null;\n            }\n        }\n        var materialType = Tools.Instantiate(parsedMaterial.customType);\n        var material = materialType.Parse(parsedMaterial, scene, rootUrl);\n        material._loadedUniqueId = parsedMaterial.uniqueId;\n        return material;\n    };\n    /**\n     * Returns the triangle fill mode\n     */\n    Material.TriangleFillMode = 0;\n    /**\n     * Returns the wireframe mode\n     */\n    Material.WireFrameFillMode = 1;\n    /**\n     * Returns the point fill mode\n     */\n    Material.PointFillMode = 2;\n    /**\n     * Returns the point list draw mode\n     */\n    Material.PointListDrawMode = 3;\n    /**\n     * Returns the line list draw mode\n     */\n    Material.LineListDrawMode = 4;\n    /**\n     * Returns the line loop draw mode\n     */\n    Material.LineLoopDrawMode = 5;\n    /**\n     * Returns the line strip draw mode\n     */\n    Material.LineStripDrawMode = 6;\n    /**\n     * Returns the triangle strip draw mode\n     */\n    Material.TriangleStripDrawMode = 7;\n    /**\n     * Returns the triangle fan draw mode\n     */\n    Material.TriangleFanDrawMode = 8;\n    /**\n     * Stores the clock-wise side orientation\n     */\n    Material.ClockWiseSideOrientation = 0;\n    /**\n     * Stores the counter clock-wise side orientation\n     */\n    Material.CounterClockWiseSideOrientation = 1;\n    /**\n     * The dirty texture flag value\n     */\n    Material.TextureDirtyFlag = 1;\n    /**\n     * The dirty light flag value\n     */\n    Material.LightDirtyFlag = 2;\n    /**\n     * The dirty fresnel flag value\n     */\n    Material.FresnelDirtyFlag = 4;\n    /**\n     * The dirty attribute flag value\n     */\n    Material.AttributesDirtyFlag = 8;\n    /**\n     * The dirty misc flag value\n     */\n    Material.MiscDirtyFlag = 16;\n    /**\n     * The dirty prepass flag value\n     */\n    Material.PrePassDirtyFlag = 32;\n    /**\n     * The all dirty flag value\n     */\n    Material.AllDirtyFlag = 63;\n    /**\n     * MaterialTransparencyMode: No transparency mode, Alpha channel is not use.\n     */\n    Material.MATERIAL_OPAQUE = 0;\n    /**\n     * MaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\n     */\n    Material.MATERIAL_ALPHATEST = 1;\n    /**\n     * MaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\n     */\n    Material.MATERIAL_ALPHABLEND = 2;\n    /**\n     * MaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\n     * They are also discarded below the alpha cutoff threshold to improve performances.\n     */\n    Material.MATERIAL_ALPHATESTANDBLEND = 3;\n    /**\n     * The Whiteout method is used to blend normals.\n     * Details of the algorithm can be found here: https://blog.selfshadow.com/publications/blending-in-detail/\n     */\n    Material.MATERIAL_NORMALBLENDMETHOD_WHITEOUT = 0;\n    /**\n     * The Reoriented Normal Mapping method is used to blend normals.\n     * Details of the algorithm can be found here: https://blog.selfshadow.com/publications/blending-in-detail/\n     */\n    Material.MATERIAL_NORMALBLENDMETHOD_RNM = 1;\n    /**\n     * Event observable which raises global events common to all materials (like MaterialPluginEvent.Created)\n     */\n    Material.OnEventObservable = new Observable();\n    Material._AllDirtyCallBack = function (defines) { return defines.markAllAsDirty(); };\n    Material._ImageProcessingDirtyCallBack = function (defines) { return defines.markAsImageProcessingDirty(); };\n    Material._TextureDirtyCallBack = function (defines) { return defines.markAsTexturesDirty(); };\n    Material._FresnelDirtyCallBack = function (defines) { return defines.markAsFresnelDirty(); };\n    Material._MiscDirtyCallBack = function (defines) { return defines.markAsMiscDirty(); };\n    Material._PrePassDirtyCallBack = function (defines) { return defines.markAsPrePassDirty(); };\n    Material._LightsDirtyCallBack = function (defines) { return defines.markAsLightDirty(); };\n    Material._AttributeDirtyCallBack = function (defines) { return defines.markAsAttributesDirty(); };\n    Material._FresnelAndMiscDirtyCallBack = function (defines) {\n        Material._FresnelDirtyCallBack(defines);\n        Material._MiscDirtyCallBack(defines);\n    };\n    Material._TextureAndMiscDirtyCallBack = function (defines) {\n        Material._TextureDirtyCallBack(defines);\n        Material._MiscDirtyCallBack(defines);\n    };\n    Material._DirtyCallbackArray = [];\n    Material._RunDirtyCallBacks = function (defines) {\n        for (var _i = 0, _a = Material._DirtyCallbackArray; _i < _a.length; _i++) {\n            var cb = _a[_i];\n            cb(defines);\n        }\n    };\n    __decorate([\n        serialize()\n    ], Material.prototype, \"id\", void 0);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"uniqueId\", void 0);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"name\", void 0);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"metadata\", void 0);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"checkReadyOnEveryCall\", void 0);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"checkReadyOnlyOnce\", void 0);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"state\", void 0);\n    __decorate([\n        serialize(\"alpha\")\n    ], Material.prototype, \"_alpha\", void 0);\n    __decorate([\n        serialize(\"backFaceCulling\")\n    ], Material.prototype, \"_backFaceCulling\", void 0);\n    __decorate([\n        serialize(\"cullBackFaces\")\n    ], Material.prototype, \"_cullBackFaces\", void 0);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"sideOrientation\", void 0);\n    __decorate([\n        serialize(\"alphaMode\")\n    ], Material.prototype, \"_alphaMode\", void 0);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"_needDepthPrePass\", void 0);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"disableDepthWrite\", void 0);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"disableColorWrite\", void 0);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"forceDepthWrite\", void 0);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"depthFunction\", void 0);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"separateCullingPass\", void 0);\n    __decorate([\n        serialize(\"fogEnabled\")\n    ], Material.prototype, \"_fogEnabled\", void 0);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"pointSize\", void 0);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"zOffset\", void 0);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"zOffsetUnits\", void 0);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"pointsCloud\", null);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"fillMode\", null);\n    __decorate([\n        serialize()\n    ], Material.prototype, \"transparencyMode\", null);\n    return Material;\n}());\nexport { Material };\n//# sourceMappingURL=material.js.map","/**\n * Manages the defines for the Material\n */\nvar MaterialDefines = /** @class */ (function () {\n    /**\n     * Creates a new instance\n     * @param externalProperties list of external properties to inject into the object\n     */\n    function MaterialDefines(externalProperties) {\n        this._isDirty = true;\n        /** @hidden */\n        this._areLightsDirty = true;\n        /** @hidden */\n        this._areLightsDisposed = false;\n        /** @hidden */\n        this._areAttributesDirty = true;\n        /** @hidden */\n        this._areTexturesDirty = true;\n        /** @hidden */\n        this._areFresnelDirty = true;\n        /** @hidden */\n        this._areMiscDirty = true;\n        /** @hidden */\n        this._arePrePassDirty = true;\n        /** @hidden */\n        this._areImageProcessingDirty = true;\n        /** @hidden */\n        this._normals = false;\n        /** @hidden */\n        this._uvs = false;\n        /** @hidden */\n        this._needNormals = false;\n        /** @hidden */\n        this._needUVs = false;\n        this._externalProperties = externalProperties;\n        // Initialize External Properties\n        if (externalProperties) {\n            for (var prop in externalProperties) {\n                if (Object.prototype.hasOwnProperty.call(externalProperties, prop)) {\n                    this._setDefaultValue(prop);\n                }\n            }\n        }\n    }\n    Object.defineProperty(MaterialDefines.prototype, \"isDirty\", {\n        /**\n         * Specifies if the material needs to be re-calculated\n         */\n        get: function () {\n            return this._isDirty;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Marks the material to indicate that it has been re-calculated\n     */\n    MaterialDefines.prototype.markAsProcessed = function () {\n        this._isDirty = false;\n        this._areAttributesDirty = false;\n        this._areTexturesDirty = false;\n        this._areFresnelDirty = false;\n        this._areLightsDirty = false;\n        this._areLightsDisposed = false;\n        this._areMiscDirty = false;\n        this._arePrePassDirty = false;\n        this._areImageProcessingDirty = false;\n    };\n    /**\n     * Marks the material to indicate that it needs to be re-calculated\n     */\n    MaterialDefines.prototype.markAsUnprocessed = function () {\n        this._isDirty = true;\n    };\n    /**\n     * Marks the material to indicate all of its defines need to be re-calculated\n     */\n    MaterialDefines.prototype.markAllAsDirty = function () {\n        this._areTexturesDirty = true;\n        this._areAttributesDirty = true;\n        this._areLightsDirty = true;\n        this._areFresnelDirty = true;\n        this._areMiscDirty = true;\n        this._areImageProcessingDirty = true;\n        this._isDirty = true;\n    };\n    /**\n     * Marks the material to indicate that image processing needs to be re-calculated\n     */\n    MaterialDefines.prototype.markAsImageProcessingDirty = function () {\n        this._areImageProcessingDirty = true;\n        this._isDirty = true;\n    };\n    /**\n     * Marks the material to indicate the lights need to be re-calculated\n     * @param disposed Defines whether the light is dirty due to dispose or not\n     */\n    MaterialDefines.prototype.markAsLightDirty = function (disposed) {\n        if (disposed === void 0) { disposed = false; }\n        this._areLightsDirty = true;\n        this._areLightsDisposed = this._areLightsDisposed || disposed;\n        this._isDirty = true;\n    };\n    /**\n     * Marks the attribute state as changed\n     */\n    MaterialDefines.prototype.markAsAttributesDirty = function () {\n        this._areAttributesDirty = true;\n        this._isDirty = true;\n    };\n    /**\n     * Marks the texture state as changed\n     */\n    MaterialDefines.prototype.markAsTexturesDirty = function () {\n        this._areTexturesDirty = true;\n        this._isDirty = true;\n    };\n    /**\n     * Marks the fresnel state as changed\n     */\n    MaterialDefines.prototype.markAsFresnelDirty = function () {\n        this._areFresnelDirty = true;\n        this._isDirty = true;\n    };\n    /**\n     * Marks the misc state as changed\n     */\n    MaterialDefines.prototype.markAsMiscDirty = function () {\n        this._areMiscDirty = true;\n        this._isDirty = true;\n    };\n    /**\n     * Marks the prepass state as changed\n     */\n    MaterialDefines.prototype.markAsPrePassDirty = function () {\n        this._arePrePassDirty = true;\n        this._isDirty = true;\n    };\n    /**\n     * Rebuilds the material defines\n     */\n    MaterialDefines.prototype.rebuild = function () {\n        this._keys = [];\n        for (var _i = 0, _a = Object.keys(this); _i < _a.length; _i++) {\n            var key = _a[_i];\n            if (key[0] === \"_\") {\n                continue;\n            }\n            this._keys.push(key);\n        }\n        if (this._externalProperties) {\n            for (var name_1 in this._externalProperties) {\n                if (this._keys.indexOf(name_1) === -1) {\n                    this._keys.push(name_1);\n                }\n            }\n        }\n    };\n    /**\n     * Specifies if two material defines are equal\n     * @param other - A material define instance to compare to\n     * @returns - Boolean indicating if the material defines are equal (true) or not (false)\n     */\n    MaterialDefines.prototype.isEqual = function (other) {\n        if (this._keys.length !== other._keys.length) {\n            return false;\n        }\n        for (var index = 0; index < this._keys.length; index++) {\n            var prop = this._keys[index];\n            if (this[prop] !== other[prop]) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Clones this instance's defines to another instance\n     * @param other - material defines to clone values to\n     */\n    MaterialDefines.prototype.cloneTo = function (other) {\n        if (this._keys.length !== other._keys.length) {\n            other._keys = this._keys.slice(0);\n        }\n        for (var index = 0; index < this._keys.length; index++) {\n            var prop = this._keys[index];\n            other[prop] = this[prop];\n        }\n    };\n    /**\n     * Resets the material define values\n     */\n    MaterialDefines.prototype.reset = function () {\n        var _this = this;\n        this._keys.forEach(function (prop) { return _this._setDefaultValue(prop); });\n    };\n    MaterialDefines.prototype._setDefaultValue = function (prop) {\n        var _a, _b, _c, _d, _e;\n        var type = (_c = (_b = (_a = this._externalProperties) === null || _a === void 0 ? void 0 : _a[prop]) === null || _b === void 0 ? void 0 : _b.type) !== null && _c !== void 0 ? _c : typeof this[prop];\n        var defValue = (_e = (_d = this._externalProperties) === null || _d === void 0 ? void 0 : _d[prop]) === null || _e === void 0 ? void 0 : _e.default;\n        switch (type) {\n            case \"number\":\n                this[prop] = defValue !== null && defValue !== void 0 ? defValue : 0;\n                break;\n            case \"string\":\n                this[prop] = defValue !== null && defValue !== void 0 ? defValue : \"\";\n                break;\n            default:\n                this[prop] = defValue !== null && defValue !== void 0 ? defValue : false;\n                break;\n        }\n    };\n    /**\n     * Converts the material define values to a string\n     * @returns - String of material define information\n     */\n    MaterialDefines.prototype.toString = function () {\n        var result = \"\";\n        for (var index = 0; index < this._keys.length; index++) {\n            var prop = this._keys[index];\n            var value = this[prop];\n            var type = typeof value;\n            switch (type) {\n                case \"number\":\n                case \"string\":\n                    result += \"#define \" + prop + \" \" + value + \"\\n\";\n                    break;\n                default:\n                    if (value) {\n                        result += \"#define \" + prop + \"\\n\";\n                    }\n                    break;\n            }\n        }\n        return result;\n    };\n    return MaterialDefines;\n}());\nexport { MaterialDefines };\n//# sourceMappingURL=materialDefines.js.map","import { Engine } from \"../Engines/engine.js\";\n\n/**\n * This groups all the flags used to control the materials channel.\n */\nvar MaterialFlags = /** @class */ (function () {\n    function MaterialFlags() {\n    }\n    Object.defineProperty(MaterialFlags, \"DiffuseTextureEnabled\", {\n        /**\n         * Are diffuse textures enabled in the application.\n         */\n        get: function () {\n            return this._DiffuseTextureEnabled;\n        },\n        set: function (value) {\n            if (this._DiffuseTextureEnabled === value) {\n                return;\n            }\n            this._DiffuseTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"DetailTextureEnabled\", {\n        /**\n         * Are detail textures enabled in the application.\n         */\n        get: function () {\n            return this._DetailTextureEnabled;\n        },\n        set: function (value) {\n            if (this._DetailTextureEnabled === value) {\n                return;\n            }\n            this._DetailTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"AmbientTextureEnabled\", {\n        /**\n         * Are ambient textures enabled in the application.\n         */\n        get: function () {\n            return this._AmbientTextureEnabled;\n        },\n        set: function (value) {\n            if (this._AmbientTextureEnabled === value) {\n                return;\n            }\n            this._AmbientTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"OpacityTextureEnabled\", {\n        /**\n         * Are opacity textures enabled in the application.\n         */\n        get: function () {\n            return this._OpacityTextureEnabled;\n        },\n        set: function (value) {\n            if (this._OpacityTextureEnabled === value) {\n                return;\n            }\n            this._OpacityTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"ReflectionTextureEnabled\", {\n        /**\n         * Are reflection textures enabled in the application.\n         */\n        get: function () {\n            return this._ReflectionTextureEnabled;\n        },\n        set: function (value) {\n            if (this._ReflectionTextureEnabled === value) {\n                return;\n            }\n            this._ReflectionTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"EmissiveTextureEnabled\", {\n        /**\n         * Are emissive textures enabled in the application.\n         */\n        get: function () {\n            return this._EmissiveTextureEnabled;\n        },\n        set: function (value) {\n            if (this._EmissiveTextureEnabled === value) {\n                return;\n            }\n            this._EmissiveTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"SpecularTextureEnabled\", {\n        /**\n         * Are specular textures enabled in the application.\n         */\n        get: function () {\n            return this._SpecularTextureEnabled;\n        },\n        set: function (value) {\n            if (this._SpecularTextureEnabled === value) {\n                return;\n            }\n            this._SpecularTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"BumpTextureEnabled\", {\n        /**\n         * Are bump textures enabled in the application.\n         */\n        get: function () {\n            return this._BumpTextureEnabled;\n        },\n        set: function (value) {\n            if (this._BumpTextureEnabled === value) {\n                return;\n            }\n            this._BumpTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"LightmapTextureEnabled\", {\n        /**\n         * Are lightmap textures enabled in the application.\n         */\n        get: function () {\n            return this._LightmapTextureEnabled;\n        },\n        set: function (value) {\n            if (this._LightmapTextureEnabled === value) {\n                return;\n            }\n            this._LightmapTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"RefractionTextureEnabled\", {\n        /**\n         * Are refraction textures enabled in the application.\n         */\n        get: function () {\n            return this._RefractionTextureEnabled;\n        },\n        set: function (value) {\n            if (this._RefractionTextureEnabled === value) {\n                return;\n            }\n            this._RefractionTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"ColorGradingTextureEnabled\", {\n        /**\n         * Are color grading textures enabled in the application.\n         */\n        get: function () {\n            return this._ColorGradingTextureEnabled;\n        },\n        set: function (value) {\n            if (this._ColorGradingTextureEnabled === value) {\n                return;\n            }\n            this._ColorGradingTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"FresnelEnabled\", {\n        /**\n         * Are fresnels enabled in the application.\n         */\n        get: function () {\n            return this._FresnelEnabled;\n        },\n        set: function (value) {\n            if (this._FresnelEnabled === value) {\n                return;\n            }\n            this._FresnelEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(4);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"ClearCoatTextureEnabled\", {\n        /**\n         * Are clear coat textures enabled in the application.\n         */\n        get: function () {\n            return this._ClearCoatTextureEnabled;\n        },\n        set: function (value) {\n            if (this._ClearCoatTextureEnabled === value) {\n                return;\n            }\n            this._ClearCoatTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"ClearCoatBumpTextureEnabled\", {\n        /**\n         * Are clear coat bump textures enabled in the application.\n         */\n        get: function () {\n            return this._ClearCoatBumpTextureEnabled;\n        },\n        set: function (value) {\n            if (this._ClearCoatBumpTextureEnabled === value) {\n                return;\n            }\n            this._ClearCoatBumpTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"ClearCoatTintTextureEnabled\", {\n        /**\n         * Are clear coat tint textures enabled in the application.\n         */\n        get: function () {\n            return this._ClearCoatTintTextureEnabled;\n        },\n        set: function (value) {\n            if (this._ClearCoatTintTextureEnabled === value) {\n                return;\n            }\n            this._ClearCoatTintTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"SheenTextureEnabled\", {\n        /**\n         * Are sheen textures enabled in the application.\n         */\n        get: function () {\n            return this._SheenTextureEnabled;\n        },\n        set: function (value) {\n            if (this._SheenTextureEnabled === value) {\n                return;\n            }\n            this._SheenTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"AnisotropicTextureEnabled\", {\n        /**\n         * Are anisotropic textures enabled in the application.\n         */\n        get: function () {\n            return this._AnisotropicTextureEnabled;\n        },\n        set: function (value) {\n            if (this._AnisotropicTextureEnabled === value) {\n                return;\n            }\n            this._AnisotropicTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"ThicknessTextureEnabled\", {\n        /**\n         * Are thickness textures enabled in the application.\n         */\n        get: function () {\n            return this._ThicknessTextureEnabled;\n        },\n        set: function (value) {\n            if (this._ThicknessTextureEnabled === value) {\n                return;\n            }\n            this._ThicknessTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"RefractionIntensityTextureEnabled\", {\n        /**\n         * Are refraction intensity textures enabled in the application.\n         */\n        get: function () {\n            return this._ThicknessTextureEnabled;\n        },\n        set: function (value) {\n            if (this._RefractionIntensityTextureEnabled === value) {\n                return;\n            }\n            this._RefractionIntensityTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"TranslucencyIntensityTextureEnabled\", {\n        /**\n         * Are translucency intensity textures enabled in the application.\n         */\n        get: function () {\n            return this._ThicknessTextureEnabled;\n        },\n        set: function (value) {\n            if (this._TranslucencyIntensityTextureEnabled === value) {\n                return;\n            }\n            this._TranslucencyIntensityTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MaterialFlags, \"IridescenceTextureEnabled\", {\n        /**\n         * Are translucency intensity textures enabled in the application.\n         */\n        get: function () {\n            return this._IridescenceTextureEnabled;\n        },\n        set: function (value) {\n            if (this._IridescenceTextureEnabled === value) {\n                return;\n            }\n            this._IridescenceTextureEnabled = value;\n            Engine.MarkAllMaterialsAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // Flags used to enable or disable a type of texture for all Standard Materials\n    MaterialFlags._DiffuseTextureEnabled = true;\n    MaterialFlags._DetailTextureEnabled = true;\n    MaterialFlags._AmbientTextureEnabled = true;\n    MaterialFlags._OpacityTextureEnabled = true;\n    MaterialFlags._ReflectionTextureEnabled = true;\n    MaterialFlags._EmissiveTextureEnabled = true;\n    MaterialFlags._SpecularTextureEnabled = true;\n    MaterialFlags._BumpTextureEnabled = true;\n    MaterialFlags._LightmapTextureEnabled = true;\n    MaterialFlags._RefractionTextureEnabled = true;\n    MaterialFlags._ColorGradingTextureEnabled = true;\n    MaterialFlags._FresnelEnabled = true;\n    MaterialFlags._ClearCoatTextureEnabled = true;\n    MaterialFlags._ClearCoatBumpTextureEnabled = true;\n    MaterialFlags._ClearCoatTintTextureEnabled = true;\n    MaterialFlags._SheenTextureEnabled = true;\n    MaterialFlags._AnisotropicTextureEnabled = true;\n    MaterialFlags._ThicknessTextureEnabled = true;\n    MaterialFlags._RefractionIntensityTextureEnabled = true;\n    MaterialFlags._TranslucencyIntensityTextureEnabled = true;\n    MaterialFlags._IridescenceTextureEnabled = true;\n    return MaterialFlags;\n}());\nexport { MaterialFlags };\n//# sourceMappingURL=materialFlags.js.map","import { Logger } from \"../Misc/logger.js\";\nimport { Camera } from \"../Cameras/camera.js\";\nimport { Scene } from \"../scene.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Light } from \"../Lights/light.js\";\n\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { ThinMaterialHelper } from \"./thinMaterialHelper.js\";\n/**\n * \"Static Class\" containing the most commonly used helper while dealing with material for rendering purpose.\n *\n * It contains the basic tools to help defining defines, binding uniform for the common part of the materials.\n *\n * This works by convention in BabylonJS but is meant to be use only with shader following the in place naming rules and conventions.\n */\nvar MaterialHelper = /** @class */ (function () {\n    function MaterialHelper() {\n    }\n    /**\n     * Binds the scene's uniform buffer to the effect.\n     * @param effect defines the effect to bind to the scene uniform buffer\n     * @param sceneUbo defines the uniform buffer storing scene data\n     */\n    MaterialHelper.BindSceneUniformBuffer = function (effect, sceneUbo) {\n        sceneUbo.bindToEffect(effect, \"Scene\");\n    };\n    /**\n     * Helps preparing the defines values about the UVs in used in the effect.\n     * UVs are shared as much as we can across channels in the shaders.\n     * @param texture The texture we are preparing the UVs for\n     * @param defines The defines to update\n     * @param key The channel key \"diffuse\", \"specular\"... used in the shader\n     */\n    MaterialHelper.PrepareDefinesForMergedUV = function (texture, defines, key) {\n        defines._needUVs = true;\n        defines[key] = true;\n        if (texture.getTextureMatrix().isIdentityAs3x2()) {\n            defines[key + \"DIRECTUV\"] = texture.coordinatesIndex + 1;\n            defines[\"MAINUV\" + (texture.coordinatesIndex + 1)] = true;\n        }\n        else {\n            defines[key + \"DIRECTUV\"] = 0;\n        }\n    };\n    /**\n     * Binds a texture matrix value to its corresponding uniform\n     * @param texture The texture to bind the matrix for\n     * @param uniformBuffer The uniform buffer receiving the data\n     * @param key The channel key \"diffuse\", \"specular\"... used in the shader\n     */\n    MaterialHelper.BindTextureMatrix = function (texture, uniformBuffer, key) {\n        var matrix = texture.getTextureMatrix();\n        uniformBuffer.updateMatrix(key + \"Matrix\", matrix);\n    };\n    /**\n     * Gets the current status of the fog (should it be enabled?)\n     * @param mesh defines the mesh to evaluate for fog support\n     * @param scene defines the hosting scene\n     * @returns true if fog must be enabled\n     */\n    MaterialHelper.GetFogState = function (mesh, scene) {\n        return scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE;\n    };\n    /**\n     * Helper used to prepare the list of defines associated with misc. values for shader compilation\n     * @param mesh defines the current mesh\n     * @param scene defines the current scene\n     * @param useLogarithmicDepth defines if logarithmic depth has to be turned on\n     * @param pointsCloud defines if point cloud rendering has to be turned on\n     * @param fogEnabled defines if fog has to be turned on\n     * @param alphaTest defines if alpha testing has to be turned on\n     * @param defines defines the current list of defines\n     */\n    MaterialHelper.PrepareDefinesForMisc = function (mesh, scene, useLogarithmicDepth, pointsCloud, fogEnabled, alphaTest, defines) {\n        if (defines._areMiscDirty) {\n            defines[\"LOGARITHMICDEPTH\"] = useLogarithmicDepth;\n            defines[\"POINTSIZE\"] = pointsCloud;\n            defines[\"FOG\"] = fogEnabled && this.GetFogState(mesh, scene);\n            defines[\"NONUNIFORMSCALING\"] = mesh.nonUniformScaling;\n            defines[\"ALPHATEST\"] = alphaTest;\n        }\n    };\n    /**\n     * Helper used to prepare the list of defines associated with frame values for shader compilation\n     * @param scene defines the current scene\n     * @param engine defines the current engine\n     * @param defines specifies the list of active defines\n     * @param useInstances defines if instances have to be turned on\n     * @param useClipPlane defines if clip plane have to be turned on\n     * @param useThinInstances defines if thin instances have to be turned on\n     */\n    MaterialHelper.PrepareDefinesForFrameBoundValues = function (scene, engine, defines, useInstances, useClipPlane, useThinInstances) {\n        if (useClipPlane === void 0) { useClipPlane = null; }\n        if (useThinInstances === void 0) { useThinInstances = false; }\n        var changed = false;\n        var useClipPlane1 = false;\n        var useClipPlane2 = false;\n        var useClipPlane3 = false;\n        var useClipPlane4 = false;\n        var useClipPlane5 = false;\n        var useClipPlane6 = false;\n        useClipPlane1 = useClipPlane == null ? scene.clipPlane !== undefined && scene.clipPlane !== null : useClipPlane;\n        useClipPlane2 = useClipPlane == null ? scene.clipPlane2 !== undefined && scene.clipPlane2 !== null : useClipPlane;\n        useClipPlane3 = useClipPlane == null ? scene.clipPlane3 !== undefined && scene.clipPlane3 !== null : useClipPlane;\n        useClipPlane4 = useClipPlane == null ? scene.clipPlane4 !== undefined && scene.clipPlane4 !== null : useClipPlane;\n        useClipPlane5 = useClipPlane == null ? scene.clipPlane5 !== undefined && scene.clipPlane5 !== null : useClipPlane;\n        useClipPlane6 = useClipPlane == null ? scene.clipPlane6 !== undefined && scene.clipPlane6 !== null : useClipPlane;\n        if (defines[\"CLIPPLANE\"] !== useClipPlane1) {\n            defines[\"CLIPPLANE\"] = useClipPlane1;\n            changed = true;\n        }\n        if (defines[\"CLIPPLANE2\"] !== useClipPlane2) {\n            defines[\"CLIPPLANE2\"] = useClipPlane2;\n            changed = true;\n        }\n        if (defines[\"CLIPPLANE3\"] !== useClipPlane3) {\n            defines[\"CLIPPLANE3\"] = useClipPlane3;\n            changed = true;\n        }\n        if (defines[\"CLIPPLANE4\"] !== useClipPlane4) {\n            defines[\"CLIPPLANE4\"] = useClipPlane4;\n            changed = true;\n        }\n        if (defines[\"CLIPPLANE5\"] !== useClipPlane5) {\n            defines[\"CLIPPLANE5\"] = useClipPlane5;\n            changed = true;\n        }\n        if (defines[\"CLIPPLANE6\"] !== useClipPlane6) {\n            defines[\"CLIPPLANE6\"] = useClipPlane6;\n            changed = true;\n        }\n        if (defines[\"DEPTHPREPASS\"] !== !engine.getColorWrite()) {\n            defines[\"DEPTHPREPASS\"] = !defines[\"DEPTHPREPASS\"];\n            changed = true;\n        }\n        if (defines[\"INSTANCES\"] !== useInstances) {\n            defines[\"INSTANCES\"] = useInstances;\n            changed = true;\n        }\n        // ensure defines.INSTANCESCOLOR is not out of sync with instances\n        if (defines[\"INSTANCESCOLOR\"] && !defines[\"INSTANCES\"]) {\n            defines[\"INSTANCESCOLOR\"] = false;\n            changed = true;\n        }\n        if (defines[\"THIN_INSTANCES\"] !== useThinInstances) {\n            defines[\"THIN_INSTANCES\"] = useThinInstances;\n            changed = true;\n        }\n        if (changed) {\n            defines.markAsUnprocessed();\n        }\n    };\n    /**\n     * Prepares the defines for bones\n     * @param mesh The mesh containing the geometry data we will draw\n     * @param defines The defines to update\n     */\n    MaterialHelper.PrepareDefinesForBones = function (mesh, defines) {\n        if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\n            defines[\"NUM_BONE_INFLUENCERS\"] = mesh.numBoneInfluencers;\n            var materialSupportsBoneTexture = defines[\"BONETEXTURE\"] !== undefined;\n            if (mesh.skeleton.isUsingTextureForMatrices && materialSupportsBoneTexture) {\n                defines[\"BONETEXTURE\"] = true;\n            }\n            else {\n                defines[\"BonesPerMesh\"] = mesh.skeleton.bones.length + 1;\n                defines[\"BONETEXTURE\"] = materialSupportsBoneTexture ? false : undefined;\n                var prePassRenderer = mesh.getScene().prePassRenderer;\n                if (prePassRenderer && prePassRenderer.enabled) {\n                    var nonExcluded = prePassRenderer.excludedSkinnedMesh.indexOf(mesh) === -1;\n                    defines[\"BONES_VELOCITY_ENABLED\"] = nonExcluded;\n                }\n            }\n        }\n        else {\n            defines[\"NUM_BONE_INFLUENCERS\"] = 0;\n            defines[\"BonesPerMesh\"] = 0;\n        }\n    };\n    /**\n     * Prepares the defines for morph targets\n     * @param mesh The mesh containing the geometry data we will draw\n     * @param defines The defines to update\n     */\n    MaterialHelper.PrepareDefinesForMorphTargets = function (mesh, defines) {\n        var manager = mesh.morphTargetManager;\n        if (manager) {\n            defines[\"MORPHTARGETS_UV\"] = manager.supportsUVs && defines[\"UV1\"];\n            defines[\"MORPHTARGETS_TANGENT\"] = manager.supportsTangents && defines[\"TANGENT\"];\n            defines[\"MORPHTARGETS_NORMAL\"] = manager.supportsNormals && defines[\"NORMAL\"];\n            defines[\"MORPHTARGETS\"] = manager.numInfluencers > 0;\n            defines[\"NUM_MORPH_INFLUENCERS\"] = manager.numInfluencers;\n            defines[\"MORPHTARGETS_TEXTURE\"] = manager.isUsingTextureForTargets;\n        }\n        else {\n            defines[\"MORPHTARGETS_UV\"] = false;\n            defines[\"MORPHTARGETS_TANGENT\"] = false;\n            defines[\"MORPHTARGETS_NORMAL\"] = false;\n            defines[\"MORPHTARGETS\"] = false;\n            defines[\"NUM_MORPH_INFLUENCERS\"] = 0;\n        }\n    };\n    /**\n     * Prepares the defines for baked vertex animation\n     * @param mesh The mesh containing the geometry data we will draw\n     * @param defines The defines to update\n     */\n    MaterialHelper.PrepareDefinesForBakedVertexAnimation = function (mesh, defines) {\n        var manager = mesh.bakedVertexAnimationManager;\n        defines[\"BAKED_VERTEX_ANIMATION_TEXTURE\"] = manager && manager.isEnabled ? true : false;\n    };\n    /**\n     * Prepares the defines used in the shader depending on the attributes data available in the mesh\n     * @param mesh The mesh containing the geometry data we will draw\n     * @param defines The defines to update\n     * @param useVertexColor Precise whether vertex colors should be used or not (override mesh info)\n     * @param useBones Precise whether bones should be used or not (override mesh info)\n     * @param useMorphTargets Precise whether morph targets should be used or not (override mesh info)\n     * @param useVertexAlpha Precise whether vertex alpha should be used or not (override mesh info)\n     * @param useBakedVertexAnimation Precise whether baked vertex animation should be used or not (override mesh info)\n     * @returns false if defines are considered not dirty and have not been checked\n     */\n    MaterialHelper.PrepareDefinesForAttributes = function (mesh, defines, useVertexColor, useBones, useMorphTargets, useVertexAlpha, useBakedVertexAnimation) {\n        if (useMorphTargets === void 0) { useMorphTargets = false; }\n        if (useVertexAlpha === void 0) { useVertexAlpha = true; }\n        if (useBakedVertexAnimation === void 0) { useBakedVertexAnimation = true; }\n        if (!defines._areAttributesDirty && defines._needNormals === defines._normals && defines._needUVs === defines._uvs) {\n            return false;\n        }\n        defines._normals = defines._needNormals;\n        defines._uvs = defines._needUVs;\n        defines[\"NORMAL\"] = defines._needNormals && mesh.isVerticesDataPresent(VertexBuffer.NormalKind);\n        if (defines._needNormals && mesh.isVerticesDataPresent(VertexBuffer.TangentKind)) {\n            defines[\"TANGENT\"] = true;\n        }\n        for (var i = 1; i <= 6; ++i) {\n            defines[\"UV\" + i] = defines._needUVs ? mesh.isVerticesDataPresent(\"uv\".concat(i === 1 ? \"\" : i)) : false;\n        }\n        if (useVertexColor) {\n            var hasVertexColors = mesh.useVertexColors && mesh.isVerticesDataPresent(VertexBuffer.ColorKind);\n            defines[\"VERTEXCOLOR\"] = hasVertexColors;\n            defines[\"VERTEXALPHA\"] = mesh.hasVertexAlpha && hasVertexColors && useVertexAlpha;\n        }\n        if (mesh.isVerticesDataPresent(VertexBuffer.ColorInstanceKind) && (mesh.hasInstances || mesh.hasThinInstances)) {\n            defines[\"INSTANCESCOLOR\"] = true;\n        }\n        if (useBones) {\n            this.PrepareDefinesForBones(mesh, defines);\n        }\n        if (useMorphTargets) {\n            this.PrepareDefinesForMorphTargets(mesh, defines);\n        }\n        if (useBakedVertexAnimation) {\n            this.PrepareDefinesForBakedVertexAnimation(mesh, defines);\n        }\n        return true;\n    };\n    /**\n     * Prepares the defines related to multiview\n     * @param scene The scene we are intending to draw\n     * @param defines The defines to update\n     */\n    MaterialHelper.PrepareDefinesForMultiview = function (scene, defines) {\n        if (scene.activeCamera) {\n            var previousMultiview = defines.MULTIVIEW;\n            defines.MULTIVIEW = scene.activeCamera.outputRenderTarget !== null && scene.activeCamera.outputRenderTarget.getViewCount() > 1;\n            if (defines.MULTIVIEW != previousMultiview) {\n                defines.markAsUnprocessed();\n            }\n        }\n    };\n    /**\n     * Prepares the defines related to order independant transparency\n     * @param scene The scene we are intending to draw\n     * @param defines The defines to update\n     * @param needAlphaBlending Determines if the material needs alpha blending\n     */\n    MaterialHelper.PrepareDefinesForOIT = function (scene, defines, needAlphaBlending) {\n        var previousDefine = defines.ORDER_INDEPENDENT_TRANSPARENCY;\n        var previousDefine16Bits = defines.ORDER_INDEPENDENT_TRANSPARENCY_16BITS;\n        defines.ORDER_INDEPENDENT_TRANSPARENCY = scene.useOrderIndependentTransparency && needAlphaBlending;\n        defines.ORDER_INDEPENDENT_TRANSPARENCY_16BITS = !scene.getEngine().getCaps().textureFloatLinearFiltering;\n        if (previousDefine !== defines.ORDER_INDEPENDENT_TRANSPARENCY || previousDefine16Bits !== defines.ORDER_INDEPENDENT_TRANSPARENCY_16BITS) {\n            defines.markAsUnprocessed();\n        }\n    };\n    /**\n     * Prepares the defines related to the prepass\n     * @param scene The scene we are intending to draw\n     * @param defines The defines to update\n     * @param canRenderToMRT Indicates if this material renders to several textures in the prepass\n     */\n    MaterialHelper.PrepareDefinesForPrePass = function (scene, defines, canRenderToMRT) {\n        var previousPrePass = defines.PREPASS;\n        if (!defines._arePrePassDirty) {\n            return;\n        }\n        var texturesList = [\n            {\n                type: 1,\n                define: \"PREPASS_POSITION\",\n                index: \"PREPASS_POSITION_INDEX\",\n            },\n            {\n                type: 2,\n                define: \"PREPASS_VELOCITY\",\n                index: \"PREPASS_VELOCITY_INDEX\",\n            },\n            {\n                type: 3,\n                define: \"PREPASS_REFLECTIVITY\",\n                index: \"PREPASS_REFLECTIVITY_INDEX\",\n            },\n            {\n                type: 0,\n                define: \"PREPASS_IRRADIANCE\",\n                index: \"PREPASS_IRRADIANCE_INDEX\",\n            },\n            {\n                type: 7,\n                define: \"PREPASS_ALBEDO_SQRT\",\n                index: \"PREPASS_ALBEDO_SQRT_INDEX\",\n            },\n            {\n                type: 5,\n                define: \"PREPASS_DEPTH\",\n                index: \"PREPASS_DEPTH_INDEX\",\n            },\n            {\n                type: 6,\n                define: \"PREPASS_NORMAL\",\n                index: \"PREPASS_NORMAL_INDEX\",\n            },\n        ];\n        if (scene.prePassRenderer && scene.prePassRenderer.enabled && canRenderToMRT) {\n            defines.PREPASS = true;\n            defines.SCENE_MRT_COUNT = scene.prePassRenderer.mrtCount;\n            for (var i = 0; i < texturesList.length; i++) {\n                var index = scene.prePassRenderer.getIndex(texturesList[i].type);\n                if (index !== -1) {\n                    defines[texturesList[i].define] = true;\n                    defines[texturesList[i].index] = index;\n                }\n                else {\n                    defines[texturesList[i].define] = false;\n                }\n            }\n        }\n        else {\n            defines.PREPASS = false;\n            for (var i = 0; i < texturesList.length; i++) {\n                defines[texturesList[i].define] = false;\n            }\n        }\n        if (defines.PREPASS != previousPrePass) {\n            defines.markAsUnprocessed();\n            defines.markAsImageProcessingDirty();\n        }\n    };\n    /**\n     * Prepares the defines related to the light information passed in parameter\n     * @param scene The scene we are intending to draw\n     * @param mesh The mesh the effect is compiling for\n     * @param light The light the effect is compiling for\n     * @param lightIndex The index of the light\n     * @param defines The defines to update\n     * @param specularSupported Specifies whether specular is supported or not (override lights data)\n     * @param state Defines the current state regarding what is needed (normals, etc...)\n     * @param state.needNormals\n     * @param state.needRebuild\n     * @param state.shadowEnabled\n     * @param state.specularEnabled\n     * @param state.lightmapMode\n     */\n    MaterialHelper.PrepareDefinesForLight = function (scene, mesh, light, lightIndex, defines, specularSupported, state) {\n        state.needNormals = true;\n        if (defines[\"LIGHT\" + lightIndex] === undefined) {\n            state.needRebuild = true;\n        }\n        defines[\"LIGHT\" + lightIndex] = true;\n        defines[\"SPOTLIGHT\" + lightIndex] = false;\n        defines[\"HEMILIGHT\" + lightIndex] = false;\n        defines[\"POINTLIGHT\" + lightIndex] = false;\n        defines[\"DIRLIGHT\" + lightIndex] = false;\n        light.prepareLightSpecificDefines(defines, lightIndex);\n        // FallOff.\n        defines[\"LIGHT_FALLOFF_PHYSICAL\" + lightIndex] = false;\n        defines[\"LIGHT_FALLOFF_GLTF\" + lightIndex] = false;\n        defines[\"LIGHT_FALLOFF_STANDARD\" + lightIndex] = false;\n        switch (light.falloffType) {\n            case Light.FALLOFF_GLTF:\n                defines[\"LIGHT_FALLOFF_GLTF\" + lightIndex] = true;\n                break;\n            case Light.FALLOFF_PHYSICAL:\n                defines[\"LIGHT_FALLOFF_PHYSICAL\" + lightIndex] = true;\n                break;\n            case Light.FALLOFF_STANDARD:\n                defines[\"LIGHT_FALLOFF_STANDARD\" + lightIndex] = true;\n                break;\n        }\n        // Specular\n        if (specularSupported && !light.specular.equalsFloats(0, 0, 0)) {\n            state.specularEnabled = true;\n        }\n        // Shadows\n        defines[\"SHADOW\" + lightIndex] = false;\n        defines[\"SHADOWCSM\" + lightIndex] = false;\n        defines[\"SHADOWCSMDEBUG\" + lightIndex] = false;\n        defines[\"SHADOWCSMNUM_CASCADES\" + lightIndex] = false;\n        defines[\"SHADOWCSMUSESHADOWMAXZ\" + lightIndex] = false;\n        defines[\"SHADOWCSMNOBLEND\" + lightIndex] = false;\n        defines[\"SHADOWCSM_RIGHTHANDED\" + lightIndex] = false;\n        defines[\"SHADOWPCF\" + lightIndex] = false;\n        defines[\"SHADOWPCSS\" + lightIndex] = false;\n        defines[\"SHADOWPOISSON\" + lightIndex] = false;\n        defines[\"SHADOWESM\" + lightIndex] = false;\n        defines[\"SHADOWCLOSEESM\" + lightIndex] = false;\n        defines[\"SHADOWCUBE\" + lightIndex] = false;\n        defines[\"SHADOWLOWQUALITY\" + lightIndex] = false;\n        defines[\"SHADOWMEDIUMQUALITY\" + lightIndex] = false;\n        if (mesh && mesh.receiveShadows && scene.shadowsEnabled && light.shadowEnabled) {\n            var shadowGenerator = light.getShadowGenerator();\n            if (shadowGenerator) {\n                var shadowMap = shadowGenerator.getShadowMap();\n                if (shadowMap) {\n                    if (shadowMap.renderList && shadowMap.renderList.length > 0) {\n                        state.shadowEnabled = true;\n                        shadowGenerator.prepareDefines(defines, lightIndex);\n                    }\n                }\n            }\n        }\n        if (light.lightmapMode != Light.LIGHTMAP_DEFAULT) {\n            state.lightmapMode = true;\n            defines[\"LIGHTMAPEXCLUDED\" + lightIndex] = true;\n            defines[\"LIGHTMAPNOSPECULAR\" + lightIndex] = light.lightmapMode == Light.LIGHTMAP_SHADOWSONLY;\n        }\n        else {\n            defines[\"LIGHTMAPEXCLUDED\" + lightIndex] = false;\n            defines[\"LIGHTMAPNOSPECULAR\" + lightIndex] = false;\n        }\n    };\n    /**\n     * Prepares the defines related to the light information passed in parameter\n     * @param scene The scene we are intending to draw\n     * @param mesh The mesh the effect is compiling for\n     * @param defines The defines to update\n     * @param specularSupported Specifies whether specular is supported or not (override lights data)\n     * @param maxSimultaneousLights Specifies how manuy lights can be added to the effect at max\n     * @param disableLighting Specifies whether the lighting is disabled (override scene and light)\n     * @returns true if normals will be required for the rest of the effect\n     */\n    MaterialHelper.PrepareDefinesForLights = function (scene, mesh, defines, specularSupported, maxSimultaneousLights, disableLighting) {\n        if (maxSimultaneousLights === void 0) { maxSimultaneousLights = 4; }\n        if (disableLighting === void 0) { disableLighting = false; }\n        if (!defines._areLightsDirty) {\n            return defines._needNormals;\n        }\n        var lightIndex = 0;\n        var state = {\n            needNormals: false,\n            needRebuild: false,\n            lightmapMode: false,\n            shadowEnabled: false,\n            specularEnabled: false,\n        };\n        if (scene.lightsEnabled && !disableLighting) {\n            for (var _i = 0, _a = mesh.lightSources; _i < _a.length; _i++) {\n                var light = _a[_i];\n                this.PrepareDefinesForLight(scene, mesh, light, lightIndex, defines, specularSupported, state);\n                lightIndex++;\n                if (lightIndex === maxSimultaneousLights) {\n                    break;\n                }\n            }\n        }\n        defines[\"SPECULARTERM\"] = state.specularEnabled;\n        defines[\"SHADOWS\"] = state.shadowEnabled;\n        // Resetting all other lights if any\n        for (var index = lightIndex; index < maxSimultaneousLights; index++) {\n            if (defines[\"LIGHT\" + index] !== undefined) {\n                defines[\"LIGHT\" + index] = false;\n                defines[\"HEMILIGHT\" + index] = false;\n                defines[\"POINTLIGHT\" + index] = false;\n                defines[\"DIRLIGHT\" + index] = false;\n                defines[\"SPOTLIGHT\" + index] = false;\n                defines[\"SHADOW\" + index] = false;\n                defines[\"SHADOWCSM\" + index] = false;\n                defines[\"SHADOWCSMDEBUG\" + index] = false;\n                defines[\"SHADOWCSMNUM_CASCADES\" + index] = false;\n                defines[\"SHADOWCSMUSESHADOWMAXZ\" + index] = false;\n                defines[\"SHADOWCSMNOBLEND\" + index] = false;\n                defines[\"SHADOWCSM_RIGHTHANDED\" + index] = false;\n                defines[\"SHADOWPCF\" + index] = false;\n                defines[\"SHADOWPCSS\" + index] = false;\n                defines[\"SHADOWPOISSON\" + index] = false;\n                defines[\"SHADOWESM\" + index] = false;\n                defines[\"SHADOWCLOSEESM\" + index] = false;\n                defines[\"SHADOWCUBE\" + index] = false;\n                defines[\"SHADOWLOWQUALITY\" + index] = false;\n                defines[\"SHADOWMEDIUMQUALITY\" + index] = false;\n            }\n        }\n        var caps = scene.getEngine().getCaps();\n        if (defines[\"SHADOWFLOAT\"] === undefined) {\n            state.needRebuild = true;\n        }\n        defines[\"SHADOWFLOAT\"] =\n            state.shadowEnabled && ((caps.textureFloatRender && caps.textureFloatLinearFiltering) || (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering));\n        defines[\"LIGHTMAPEXCLUDED\"] = state.lightmapMode;\n        if (state.needRebuild) {\n            defines.rebuild();\n        }\n        return state.needNormals;\n    };\n    /**\n     * Prepares the uniforms and samplers list to be used in the effect (for a specific light)\n     * @param lightIndex defines the light index\n     * @param uniformsList The uniform list\n     * @param samplersList The sampler list\n     * @param projectedLightTexture defines if projected texture must be used\n     * @param uniformBuffersList defines an optional list of uniform buffers\n     * @param updateOnlyBuffersList True to only update the uniformBuffersList array\n     */\n    MaterialHelper.PrepareUniformsAndSamplersForLight = function (lightIndex, uniformsList, samplersList, projectedLightTexture, uniformBuffersList, updateOnlyBuffersList) {\n        if (uniformBuffersList === void 0) { uniformBuffersList = null; }\n        if (updateOnlyBuffersList === void 0) { updateOnlyBuffersList = false; }\n        if (uniformBuffersList) {\n            uniformBuffersList.push(\"Light\" + lightIndex);\n        }\n        if (updateOnlyBuffersList) {\n            return;\n        }\n        uniformsList.push(\"vLightData\" + lightIndex, \"vLightDiffuse\" + lightIndex, \"vLightSpecular\" + lightIndex, \"vLightDirection\" + lightIndex, \"vLightFalloff\" + lightIndex, \"vLightGround\" + lightIndex, \"lightMatrix\" + lightIndex, \"shadowsInfo\" + lightIndex, \"depthValues\" + lightIndex);\n        samplersList.push(\"shadowSampler\" + lightIndex);\n        samplersList.push(\"depthSampler\" + lightIndex);\n        uniformsList.push(\"viewFrustumZ\" + lightIndex, \"cascadeBlendFactor\" + lightIndex, \"lightSizeUVCorrection\" + lightIndex, \"depthCorrection\" + lightIndex, \"penumbraDarkness\" + lightIndex, \"frustumLengths\" + lightIndex);\n        if (projectedLightTexture) {\n            samplersList.push(\"projectionLightSampler\" + lightIndex);\n            uniformsList.push(\"textureProjectionMatrix\" + lightIndex);\n        }\n    };\n    /**\n     * Prepares the uniforms and samplers list to be used in the effect\n     * @param uniformsListOrOptions The uniform names to prepare or an EffectCreationOptions containing the list and extra information\n     * @param samplersList The sampler list\n     * @param defines The defines helping in the list generation\n     * @param maxSimultaneousLights The maximum number of simultaneous light allowed in the effect\n     */\n    MaterialHelper.PrepareUniformsAndSamplersList = function (uniformsListOrOptions, samplersList, defines, maxSimultaneousLights) {\n        if (maxSimultaneousLights === void 0) { maxSimultaneousLights = 4; }\n        var uniformsList;\n        var uniformBuffersList = null;\n        if (uniformsListOrOptions.uniformsNames) {\n            var options = uniformsListOrOptions;\n            uniformsList = options.uniformsNames;\n            uniformBuffersList = options.uniformBuffersNames;\n            samplersList = options.samplers;\n            defines = options.defines;\n            maxSimultaneousLights = options.maxSimultaneousLights || 0;\n        }\n        else {\n            uniformsList = uniformsListOrOptions;\n            if (!samplersList) {\n                samplersList = [];\n            }\n        }\n        for (var lightIndex = 0; lightIndex < maxSimultaneousLights; lightIndex++) {\n            if (!defines[\"LIGHT\" + lightIndex]) {\n                break;\n            }\n            this.PrepareUniformsAndSamplersForLight(lightIndex, uniformsList, samplersList, defines[\"PROJECTEDLIGHTTEXTURE\" + lightIndex], uniformBuffersList);\n        }\n        if (defines[\"NUM_MORPH_INFLUENCERS\"]) {\n            uniformsList.push(\"morphTargetInfluences\");\n        }\n        if (defines[\"BAKED_VERTEX_ANIMATION_TEXTURE\"]) {\n            uniformsList.push(\"bakedVertexAnimationSettings\");\n            uniformsList.push(\"bakedVertexAnimationTextureSizeInverted\");\n            uniformsList.push(\"bakedVertexAnimationTime\");\n            samplersList.push(\"bakedVertexAnimationTexture\");\n        }\n    };\n    /**\n     * This helps decreasing rank by rank the shadow quality (0 being the highest rank and quality)\n     * @param defines The defines to update while falling back\n     * @param fallbacks The authorized effect fallbacks\n     * @param maxSimultaneousLights The maximum number of lights allowed\n     * @param rank the current rank of the Effect\n     * @returns The newly affected rank\n     */\n    MaterialHelper.HandleFallbacksForShadows = function (defines, fallbacks, maxSimultaneousLights, rank) {\n        if (maxSimultaneousLights === void 0) { maxSimultaneousLights = 4; }\n        if (rank === void 0) { rank = 0; }\n        var lightFallbackRank = 0;\n        for (var lightIndex = 0; lightIndex < maxSimultaneousLights; lightIndex++) {\n            if (!defines[\"LIGHT\" + lightIndex]) {\n                break;\n            }\n            if (lightIndex > 0) {\n                lightFallbackRank = rank + lightIndex;\n                fallbacks.addFallback(lightFallbackRank, \"LIGHT\" + lightIndex);\n            }\n            if (!defines[\"SHADOWS\"]) {\n                if (defines[\"SHADOW\" + lightIndex]) {\n                    fallbacks.addFallback(rank, \"SHADOW\" + lightIndex);\n                }\n                if (defines[\"SHADOWPCF\" + lightIndex]) {\n                    fallbacks.addFallback(rank, \"SHADOWPCF\" + lightIndex);\n                }\n                if (defines[\"SHADOWPCSS\" + lightIndex]) {\n                    fallbacks.addFallback(rank, \"SHADOWPCSS\" + lightIndex);\n                }\n                if (defines[\"SHADOWPOISSON\" + lightIndex]) {\n                    fallbacks.addFallback(rank, \"SHADOWPOISSON\" + lightIndex);\n                }\n                if (defines[\"SHADOWESM\" + lightIndex]) {\n                    fallbacks.addFallback(rank, \"SHADOWESM\" + lightIndex);\n                }\n                if (defines[\"SHADOWCLOSEESM\" + lightIndex]) {\n                    fallbacks.addFallback(rank, \"SHADOWCLOSEESM\" + lightIndex);\n                }\n            }\n        }\n        return lightFallbackRank++;\n    };\n    /**\n     * Prepares the list of attributes required for morph targets according to the effect defines.\n     * @param attribs The current list of supported attribs\n     * @param mesh The mesh to prepare the morph targets attributes for\n     * @param influencers The number of influencers\n     */\n    MaterialHelper.PrepareAttributesForMorphTargetsInfluencers = function (attribs, mesh, influencers) {\n        this._TmpMorphInfluencers.NUM_MORPH_INFLUENCERS = influencers;\n        this.PrepareAttributesForMorphTargets(attribs, mesh, this._TmpMorphInfluencers);\n    };\n    /**\n     * Prepares the list of attributes required for morph targets according to the effect defines.\n     * @param attribs The current list of supported attribs\n     * @param mesh The mesh to prepare the morph targets attributes for\n     * @param defines The current Defines of the effect\n     */\n    MaterialHelper.PrepareAttributesForMorphTargets = function (attribs, mesh, defines) {\n        var influencers = defines[\"NUM_MORPH_INFLUENCERS\"];\n        if (influencers > 0 && EngineStore.LastCreatedEngine) {\n            var maxAttributesCount = EngineStore.LastCreatedEngine.getCaps().maxVertexAttribs;\n            var manager = mesh.morphTargetManager;\n            if (manager === null || manager === void 0 ? void 0 : manager.isUsingTextureForTargets) {\n                return;\n            }\n            var normal = manager && manager.supportsNormals && defines[\"NORMAL\"];\n            var tangent = manager && manager.supportsTangents && defines[\"TANGENT\"];\n            var uv = manager && manager.supportsUVs && defines[\"UV1\"];\n            for (var index = 0; index < influencers; index++) {\n                attribs.push(VertexBuffer.PositionKind + index);\n                if (normal) {\n                    attribs.push(VertexBuffer.NormalKind + index);\n                }\n                if (tangent) {\n                    attribs.push(VertexBuffer.TangentKind + index);\n                }\n                if (uv) {\n                    attribs.push(VertexBuffer.UVKind + \"_\" + index);\n                }\n                if (attribs.length > maxAttributesCount) {\n                    Logger.Error(\"Cannot add more vertex attributes for mesh \" + mesh.name);\n                }\n            }\n        }\n    };\n    /**\n     * Prepares the list of attributes required for baked vertex animations according to the effect defines.\n     * @param attribs The current list of supported attribs\n     * @param mesh The mesh to prepare the morph targets attributes for\n     * @param defines The current Defines of the effect\n     */\n    MaterialHelper.PrepareAttributesForBakedVertexAnimation = function (attribs, mesh, defines) {\n        var enabled = defines[\"BAKED_VERTEX_ANIMATION_TEXTURE\"] && defines[\"INSTANCES\"];\n        if (enabled) {\n            attribs.push(\"bakedVertexAnimationSettingsInstanced\");\n        }\n    };\n    /**\n     * Prepares the list of attributes required for bones according to the effect defines.\n     * @param attribs The current list of supported attribs\n     * @param mesh The mesh to prepare the bones attributes for\n     * @param defines The current Defines of the effect\n     * @param fallbacks The current effect fallback strategy\n     */\n    MaterialHelper.PrepareAttributesForBones = function (attribs, mesh, defines, fallbacks) {\n        if (defines[\"NUM_BONE_INFLUENCERS\"] > 0) {\n            fallbacks.addCPUSkinningFallback(0, mesh);\n            attribs.push(VertexBuffer.MatricesIndicesKind);\n            attribs.push(VertexBuffer.MatricesWeightsKind);\n            if (defines[\"NUM_BONE_INFLUENCERS\"] > 4) {\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\n            }\n        }\n    };\n    /**\n     * Check and prepare the list of attributes required for instances according to the effect defines.\n     * @param attribs The current list of supported attribs\n     * @param defines The current MaterialDefines of the effect\n     */\n    MaterialHelper.PrepareAttributesForInstances = function (attribs, defines) {\n        if (defines[\"INSTANCES\"] || defines[\"THIN_INSTANCES\"]) {\n            this.PushAttributesForInstances(attribs, !!defines[\"PREPASS_VELOCITY\"]);\n        }\n        if (defines.INSTANCESCOLOR) {\n            attribs.push(VertexBuffer.ColorInstanceKind);\n        }\n    };\n    /**\n     * Add the list of attributes required for instances to the attribs array.\n     * @param attribs The current list of supported attribs\n     * @param needsPreviousMatrices If the shader needs previous matrices\n     */\n    MaterialHelper.PushAttributesForInstances = function (attribs, needsPreviousMatrices) {\n        if (needsPreviousMatrices === void 0) { needsPreviousMatrices = false; }\n        attribs.push(\"world0\");\n        attribs.push(\"world1\");\n        attribs.push(\"world2\");\n        attribs.push(\"world3\");\n        if (needsPreviousMatrices) {\n            attribs.push(\"previousWorld0\");\n            attribs.push(\"previousWorld1\");\n            attribs.push(\"previousWorld2\");\n            attribs.push(\"previousWorld3\");\n        }\n    };\n    /**\n     * Binds the light information to the effect.\n     * @param light The light containing the generator\n     * @param effect The effect we are binding the data to\n     * @param lightIndex The light index in the effect used to render\n     */\n    MaterialHelper.BindLightProperties = function (light, effect, lightIndex) {\n        light.transferToEffect(effect, lightIndex + \"\");\n    };\n    /**\n     * Binds the lights information from the scene to the effect for the given mesh.\n     * @param light Light to bind\n     * @param lightIndex Light index\n     * @param scene The scene where the light belongs to\n     * @param effect The effect we are binding the data to\n     * @param useSpecular Defines if specular is supported\n     * @param receiveShadows Defines if the effect (mesh) we bind the light for receives shadows\n     */\n    MaterialHelper.BindLight = function (light, lightIndex, scene, effect, useSpecular, receiveShadows) {\n        if (receiveShadows === void 0) { receiveShadows = true; }\n        light._bindLight(lightIndex, scene, effect, useSpecular, receiveShadows);\n    };\n    /**\n     * Binds the lights information from the scene to the effect for the given mesh.\n     * @param scene The scene the lights belongs to\n     * @param mesh The mesh we are binding the information to render\n     * @param effect The effect we are binding the data to\n     * @param defines The generated defines for the effect\n     * @param maxSimultaneousLights The maximum number of light that can be bound to the effect\n     */\n    MaterialHelper.BindLights = function (scene, mesh, effect, defines, maxSimultaneousLights) {\n        if (maxSimultaneousLights === void 0) { maxSimultaneousLights = 4; }\n        var len = Math.min(mesh.lightSources.length, maxSimultaneousLights);\n        for (var i = 0; i < len; i++) {\n            var light = mesh.lightSources[i];\n            this.BindLight(light, i, scene, effect, typeof defines === \"boolean\" ? defines : defines[\"SPECULARTERM\"], mesh.receiveShadows);\n        }\n    };\n    /**\n     * Binds the fog information from the scene to the effect for the given mesh.\n     * @param scene The scene the lights belongs to\n     * @param mesh The mesh we are binding the information to render\n     * @param effect The effect we are binding the data to\n     * @param linearSpace Defines if the fog effect is applied in linear space\n     */\n    MaterialHelper.BindFogParameters = function (scene, mesh, effect, linearSpace) {\n        if (linearSpace === void 0) { linearSpace = false; }\n        if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\n            effect.setFloat4(\"vFogInfos\", scene.fogMode, scene.fogStart, scene.fogEnd, scene.fogDensity);\n            // Convert fog color to linear space if used in a linear space computed shader.\n            if (linearSpace) {\n                scene.fogColor.toLinearSpaceToRef(this._TempFogColor);\n                effect.setColor3(\"vFogColor\", this._TempFogColor);\n            }\n            else {\n                effect.setColor3(\"vFogColor\", scene.fogColor);\n            }\n        }\n    };\n    /**\n     * Binds the bones information from the mesh to the effect.\n     * @param mesh The mesh we are binding the information to render\n     * @param effect The effect we are binding the data to\n     * @param prePassConfiguration Configuration for the prepass, in case prepass is activated\n     */\n    MaterialHelper.BindBonesParameters = function (mesh, effect, prePassConfiguration) {\n        if (!effect || !mesh) {\n            return;\n        }\n        if (mesh.computeBonesUsingShaders && effect._bonesComputationForcedToCPU) {\n            mesh.computeBonesUsingShaders = false;\n        }\n        if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\n            var skeleton = mesh.skeleton;\n            if (skeleton.isUsingTextureForMatrices && effect.getUniformIndex(\"boneTextureWidth\") > -1) {\n                var boneTexture = skeleton.getTransformMatrixTexture(mesh);\n                effect.setTexture(\"boneSampler\", boneTexture);\n                effect.setFloat(\"boneTextureWidth\", 4.0 * (skeleton.bones.length + 1));\n            }\n            else {\n                var matrices = skeleton.getTransformMatrices(mesh);\n                if (matrices) {\n                    effect.setMatrices(\"mBones\", matrices);\n                    if (prePassConfiguration && mesh.getScene().prePassRenderer && mesh.getScene().prePassRenderer.getIndex(2)) {\n                        if (!prePassConfiguration.previousBones[mesh.uniqueId]) {\n                            prePassConfiguration.previousBones[mesh.uniqueId] = matrices.slice();\n                        }\n                        effect.setMatrices(\"mPreviousBones\", prePassConfiguration.previousBones[mesh.uniqueId]);\n                        MaterialHelper._CopyBonesTransformationMatrices(matrices, prePassConfiguration.previousBones[mesh.uniqueId]);\n                    }\n                }\n            }\n        }\n    };\n    // Copies the bones transformation matrices into the target array and returns the target's reference\n    MaterialHelper._CopyBonesTransformationMatrices = function (source, target) {\n        target.set(source);\n        return target;\n    };\n    /**\n     * Binds the morph targets information from the mesh to the effect.\n     * @param abstractMesh The mesh we are binding the information to render\n     * @param effect The effect we are binding the data to\n     */\n    MaterialHelper.BindMorphTargetParameters = function (abstractMesh, effect) {\n        var manager = abstractMesh.morphTargetManager;\n        if (!abstractMesh || !manager) {\n            return;\n        }\n        effect.setFloatArray(\"morphTargetInfluences\", manager.influences);\n    };\n    /**\n     * Binds the logarithmic depth information from the scene to the effect for the given defines.\n     * @param defines The generated defines used in the effect\n     * @param effect The effect we are binding the data to\n     * @param scene The scene we are willing to render with logarithmic scale for\n     */\n    MaterialHelper.BindLogDepth = function (defines, effect, scene) {\n        if (!defines || defines[\"LOGARITHMICDEPTH\"]) {\n            var camera = scene.activeCamera;\n            if (camera.mode === Camera.ORTHOGRAPHIC_CAMERA) {\n                Logger.Error(\"Logarithmic depth is not compatible with orthographic cameras!\", 20);\n            }\n            effect.setFloat(\"logarithmicDepthConstant\", 2.0 / (Math.log(camera.maxZ + 1.0) / Math.LN2));\n        }\n    };\n    /**\n     * Binds the clip plane information from the scene to the effect.\n     * @param effect The effect we are binding the data to\n     * @param scene The scene the clip plane information are extracted from\n     */\n    MaterialHelper.BindClipPlane = function (effect, scene) {\n        ThinMaterialHelper.BindClipPlane(effect, scene);\n    };\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    MaterialHelper._TmpMorphInfluencers = { NUM_MORPH_INFLUENCERS: 0 };\n    MaterialHelper._TempFogColor = Color3.Black();\n    return MaterialHelper;\n}());\nexport { MaterialHelper };\n//# sourceMappingURL=materialHelper.js.map","import { __decorate } from \"tslib\";\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\nimport { MaterialPluginManager } from \"./materialPluginManager.js\";\n\n/**\n * Base class for material plugins.\n * @since 5.0\n */\nvar MaterialPluginBase = /** @class */ (function () {\n    /**\n     * Creates a new material plugin\n     * @param material parent material of the plugin\n     * @param name name of the plugin\n     * @param priority priority of the plugin\n     * @param defines list of defines used by the plugin. The value of the property is the default value for this property\n     * @param addToPluginList true to add the plugin to the list of plugins managed by the material plugin manager of the material (default: true)\n     * @param enable true to enable the plugin (it is handy if the plugin does not handle properties to switch its current activation)\n     */\n    function MaterialPluginBase(material, name, priority, defines, addToPluginList, enable) {\n        if (addToPluginList === void 0) { addToPluginList = true; }\n        if (enable === void 0) { enable = false; }\n        /**\n         * Defines the priority of the plugin. Lower numbers run first.\n         */\n        this.priority = 500;\n        /**\n         * Indicates that this plugin should be notified for the extra events (HasRenderTargetTextures / FillRenderTargetTextures / HardBindForSubMesh)\n         */\n        this.registerForExtraEvents = false;\n        this._material = material;\n        this.name = name;\n        this.priority = priority;\n        if (!material.pluginManager) {\n            material.pluginManager = new MaterialPluginManager(material);\n        }\n        this._pluginDefineNames = defines;\n        this._pluginManager = material.pluginManager;\n        if (addToPluginList) {\n            this._pluginManager._addPlugin(this);\n        }\n        if (enable) {\n            this._enable(true);\n        }\n        this.markAllDefinesAsDirty = material._dirtyCallbacks[63];\n    }\n    MaterialPluginBase.prototype._enable = function (enable) {\n        if (enable) {\n            this._pluginManager._activatePlugin(this);\n        }\n    };\n    /**\n     * Gets the current class name useful for serialization or dynamic coding.\n     * @returns The class name.\n     */\n    MaterialPluginBase.prototype.getClassName = function () {\n        return \"MaterialPluginBase\";\n    };\n    /**\n     * Specifies that the submesh is ready to be used.\n     * @param defines the list of \"defines\" to update.\n     * @param scene defines the scene the material belongs to.\n     * @param engine the engine this scene belongs to.\n     * @param subMesh the submesh to check for readiness\n     * @returns - boolean indicating that the submesh is ready or not.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    MaterialPluginBase.prototype.isReadyForSubMesh = function (defines, scene, engine, subMesh) {\n        return true;\n    };\n    /**\n     * Binds the material data (this function is called even if mustRebind() returns false)\n     * @param uniformBuffer defines the Uniform buffer to fill in.\n     * @param scene defines the scene the material belongs to.\n     * @param engine defines the engine the material belongs to.\n     * @param subMesh the submesh to bind data for\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    MaterialPluginBase.prototype.hardBindForSubMesh = function (uniformBuffer, scene, engine, subMesh) { };\n    /**\n     * Binds the material data.\n     * @param uniformBuffer defines the Uniform buffer to fill in.\n     * @param scene defines the scene the material belongs to.\n     * @param engine the engine this scene belongs to.\n     * @param subMesh the submesh to bind data for\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    MaterialPluginBase.prototype.bindForSubMesh = function (uniformBuffer, scene, engine, subMesh) { };\n    /**\n     * Disposes the resources of the material.\n     * @param forceDisposeTextures - Forces the disposal of all textures.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    MaterialPluginBase.prototype.dispose = function (forceDisposeTextures) { };\n    /**\n     * Returns a list of custom shader code fragments to customize the shader.\n     * @param shaderType \"vertex\" or \"fragment\"\n     * @returns null if no code to be added, or a list of pointName => code.\n     * Note that `pointName` can also be a regular expression if it starts with a `!`.\n     * In that case, the string found by the regular expression (if any) will be\n     * replaced by the code provided.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    MaterialPluginBase.prototype.getCustomCode = function (shaderType) {\n        return null;\n    };\n    /**\n     * Collects all defines.\n     * @param defines The object to append to.\n     */\n    MaterialPluginBase.prototype.collectDefines = function (defines) {\n        if (!this._pluginDefineNames) {\n            return;\n        }\n        for (var _i = 0, _a = Object.keys(this._pluginDefineNames); _i < _a.length; _i++) {\n            var key = _a[_i];\n            if (key[0] === \"_\") {\n                continue;\n            }\n            var type = typeof this._pluginDefineNames[key];\n            defines[key] = {\n                type: type === \"number\" ? \"number\" : type === \"string\" ? \"string\" : type === \"boolean\" ? \"boolean\" : \"object\",\n                default: this._pluginDefineNames[key],\n            };\n        }\n    };\n    /**\n     * Sets the defines for the next rendering. Called before MaterialHelper.PrepareDefinesForAttributes is called.\n     * @param defines the list of \"defines\" to update.\n     * @param scene defines the scene to the material belongs to.\n     * @param mesh the mesh being rendered\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    MaterialPluginBase.prototype.prepareDefinesBeforeAttributes = function (defines, scene, mesh) { };\n    /**\n     * Sets the defines for the next rendering\n     * @param defines the list of \"defines\" to update.\n     * @param scene defines the scene to the material belongs to.\n     * @param mesh the mesh being rendered\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    MaterialPluginBase.prototype.prepareDefines = function (defines, scene, mesh) { };\n    /**\n     * Checks to see if a texture is used in the material.\n     * @param texture - Base texture to use.\n     * @returns - Boolean specifying if a texture is used in the material.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    MaterialPluginBase.prototype.hasTexture = function (texture) {\n        return false;\n    };\n    /**\n     * Gets a boolean indicating that current material needs to register RTT\n     * @returns true if this uses a render target otherwise false.\n     */\n    MaterialPluginBase.prototype.hasRenderTargetTextures = function () {\n        return false;\n    };\n    /**\n     * Fills the list of render target textures.\n     * @param renderTargets the list of render targets to update\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    MaterialPluginBase.prototype.fillRenderTargetTextures = function (renderTargets) { };\n    /**\n     * Returns an array of the actively used textures.\n     * @param activeTextures Array of BaseTextures\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    MaterialPluginBase.prototype.getActiveTextures = function (activeTextures) { };\n    /**\n     * Returns the animatable textures.\n     * @param animatables Array of animatable textures.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    MaterialPluginBase.prototype.getAnimatables = function (animatables) { };\n    /**\n     * Add fallbacks to the effect fallbacks list.\n     * @param defines defines the Base texture to use.\n     * @param fallbacks defines the current fallback list.\n     * @param currentRank defines the current fallback rank.\n     * @returns the new fallback rank.\n     */\n    MaterialPluginBase.prototype.addFallbacks = function (defines, fallbacks, currentRank) {\n        return currentRank;\n    };\n    /**\n     * Gets the samplers used by the plugin.\n     * @param samplers list that the sampler names should be added to.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    MaterialPluginBase.prototype.getSamplers = function (samplers) { };\n    /**\n     * Gets the attributes used by the plugin.\n     * @param attributes list that the attribute names should be added to.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    MaterialPluginBase.prototype.getAttributes = function (attributes) { };\n    /**\n     * Gets the uniform buffers names added by the plugin.\n     * @param ubos list that the ubo names should be added to.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    MaterialPluginBase.prototype.getUniformBuffersNames = function (ubos) { };\n    /**\n     * Gets the description of the uniforms to add to the ubo (if engine supports ubos) or to inject directly in the vertex/fragment shaders (if engine does not support ubos)\n     * @returns the description of the uniforms\n     */\n    MaterialPluginBase.prototype.getUniforms = function () {\n        return {};\n    };\n    /**\n     * Makes a duplicate of the current configuration into another one.\n     * @param plugin define the config where to copy the info\n     */\n    MaterialPluginBase.prototype.copyTo = function (plugin) {\n        SerializationHelper.Clone(function () { return plugin; }, this);\n    };\n    /**\n     * Serializes this clear coat configuration.\n     * @returns - An object with the serialized config.\n     */\n    MaterialPluginBase.prototype.serialize = function () {\n        return SerializationHelper.Serialize(this);\n    };\n    /**\n     * Parses a anisotropy Configuration from a serialized object.\n     * @param source - Serialized object.\n     * @param scene Defines the scene we are parsing for\n     * @param rootUrl Defines the rootUrl to load from\n     */\n    MaterialPluginBase.prototype.parse = function (source, scene, rootUrl) {\n        var _this = this;\n        SerializationHelper.Parse(function () { return _this; }, source, scene, rootUrl);\n    };\n    __decorate([\n        serialize()\n    ], MaterialPluginBase.prototype, \"name\", void 0);\n    __decorate([\n        serialize()\n    ], MaterialPluginBase.prototype, \"priority\", void 0);\n    __decorate([\n        serialize()\n    ], MaterialPluginBase.prototype, \"registerForExtraEvents\", void 0);\n    return MaterialPluginBase;\n}());\nexport { MaterialPluginBase };\n//# sourceMappingURL=materialPluginBase.js.map","/**\n * @hidden\n */\nexport var MaterialPluginEvent;\n(function (MaterialPluginEvent) {\n    MaterialPluginEvent[MaterialPluginEvent[\"Created\"] = 1] = \"Created\";\n    MaterialPluginEvent[MaterialPluginEvent[\"Disposed\"] = 2] = \"Disposed\";\n    MaterialPluginEvent[MaterialPluginEvent[\"GetDefineNames\"] = 4] = \"GetDefineNames\";\n    MaterialPluginEvent[MaterialPluginEvent[\"PrepareUniformBuffer\"] = 8] = \"PrepareUniformBuffer\";\n    MaterialPluginEvent[MaterialPluginEvent[\"IsReadyForSubMesh\"] = 16] = \"IsReadyForSubMesh\";\n    MaterialPluginEvent[MaterialPluginEvent[\"PrepareDefines\"] = 32] = \"PrepareDefines\";\n    MaterialPluginEvent[MaterialPluginEvent[\"BindForSubMesh\"] = 64] = \"BindForSubMesh\";\n    MaterialPluginEvent[MaterialPluginEvent[\"PrepareEffect\"] = 128] = \"PrepareEffect\";\n    MaterialPluginEvent[MaterialPluginEvent[\"GetAnimatables\"] = 256] = \"GetAnimatables\";\n    MaterialPluginEvent[MaterialPluginEvent[\"GetActiveTextures\"] = 512] = \"GetActiveTextures\";\n    MaterialPluginEvent[MaterialPluginEvent[\"HasTexture\"] = 1024] = \"HasTexture\";\n    MaterialPluginEvent[MaterialPluginEvent[\"FillRenderTargetTextures\"] = 2048] = \"FillRenderTargetTextures\";\n    MaterialPluginEvent[MaterialPluginEvent[\"HasRenderTargetTextures\"] = 4096] = \"HasRenderTargetTextures\";\n    MaterialPluginEvent[MaterialPluginEvent[\"HardBindForSubMesh\"] = 8192] = \"HardBindForSubMesh\";\n})(MaterialPluginEvent || (MaterialPluginEvent = {}));\n//# sourceMappingURL=materialPluginEvent.js.map","import { Material } from \"./material.js\";\nimport { MaterialPluginEvent } from \"./materialPluginEvent.js\";\n/**\n * Class that manages the plugins of a material\n * @since 5.0\n */\nvar MaterialPluginManager = /** @class */ (function () {\n    /**\n     * Creates a new instance of the plugin manager\n     * @param material material that this manager will manage the plugins for\n     */\n    function MaterialPluginManager(material) {\n        this._plugins = [];\n        this._activePlugins = [];\n        this._activePluginsForExtraEvents = [];\n        this._material = material;\n        this._scene = material.getScene();\n        this._engine = this._scene.getEngine();\n    }\n    /**\n     * @param plugin\n     * @hidden\n     */\n    MaterialPluginManager.prototype._addPlugin = function (plugin) {\n        for (var i = 0; i < this._plugins.length; ++i) {\n            if (this._plugins[i].name === plugin.name) {\n                throw \"Plugin \\\"\".concat(plugin.name, \"\\\" already added to the material \\\"\").concat(this._material.name, \"\\\"!\");\n            }\n        }\n        if (this._material._uniformBufferLayoutBuilt) {\n            throw \"The plugin \\\"\".concat(plugin.name, \"\\\" can't be added to the material \\\"\").concat(this._material.name, \"\\\" because this material has already been used for rendering! Please add plugins to materials before any rendering with this material occurs.\");\n        }\n        var pluginClassName = plugin.getClassName();\n        if (!MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName]) {\n            MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName] = \"MATERIALPLUGIN_\" + ++MaterialPluginManager._MaterialPluginCounter;\n        }\n        this._material._callbackPluginEventGeneric = this._handlePluginEvent.bind(this);\n        this._plugins.push(plugin);\n        this._plugins.sort(function (a, b) { return a.priority - b.priority; });\n        this._codeInjectionPoints = {};\n        var defineNamesFromPlugins = {};\n        defineNamesFromPlugins[MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName]] = {\n            type: \"boolean\",\n            default: true,\n        };\n        for (var _i = 0, _a = this._plugins; _i < _a.length; _i++) {\n            var plugin_1 = _a[_i];\n            plugin_1.collectDefines(defineNamesFromPlugins);\n            this._collectPointNames(\"vertex\", plugin_1.getCustomCode(\"vertex\"));\n            this._collectPointNames(\"fragment\", plugin_1.getCustomCode(\"fragment\"));\n        }\n        this._defineNamesFromPlugins = defineNamesFromPlugins;\n    };\n    /**\n     * @param plugin\n     * @hidden\n     */\n    MaterialPluginManager.prototype._activatePlugin = function (plugin) {\n        if (this._activePlugins.indexOf(plugin) === -1) {\n            this._activePlugins.push(plugin);\n            this._activePlugins.sort(function (a, b) { return a.priority - b.priority; });\n            this._material._callbackPluginEventIsReadyForSubMesh = this._handlePluginEventIsReadyForSubMesh.bind(this);\n            this._material._callbackPluginEventPrepareDefinesBeforeAttributes = this._handlePluginEventPrepareDefinesBeforeAttributes.bind(this);\n            this._material._callbackPluginEventPrepareDefines = this._handlePluginEventPrepareDefines.bind(this);\n            this._material._callbackPluginEventBindForSubMesh = this._handlePluginEventBindForSubMesh.bind(this);\n            if (plugin.registerForExtraEvents) {\n                this._activePluginsForExtraEvents.push(plugin);\n                this._activePluginsForExtraEvents.sort(function (a, b) { return a.priority - b.priority; });\n                this._material._callbackPluginEventHasRenderTargetTextures = this._handlePluginEventHasRenderTargetTextures.bind(this);\n                this._material._callbackPluginEventFillRenderTargetTextures = this._handlePluginEventFillRenderTargetTextures.bind(this);\n                this._material._callbackPluginEventHardBindForSubMesh = this._handlePluginEventHardBindForSubMesh.bind(this);\n            }\n        }\n    };\n    /**\n     * Gets a plugin from the list of plugins managed by this manager\n     * @param name name of the plugin\n     * @returns the plugin if found, else null\n     */\n    MaterialPluginManager.prototype.getPlugin = function (name) {\n        for (var i = 0; i < this._plugins.length; ++i) {\n            if (this._plugins[i].name === name) {\n                return this._plugins[i];\n            }\n        }\n        return null;\n    };\n    MaterialPluginManager.prototype._handlePluginEventIsReadyForSubMesh = function (eventData) {\n        var isReady = true;\n        for (var _i = 0, _a = this._activePlugins; _i < _a.length; _i++) {\n            var plugin = _a[_i];\n            isReady = isReady && plugin.isReadyForSubMesh(eventData.defines, this._scene, this._engine, eventData.subMesh);\n        }\n        eventData.isReadyForSubMesh = isReady;\n    };\n    MaterialPluginManager.prototype._handlePluginEventPrepareDefinesBeforeAttributes = function (eventData) {\n        for (var _i = 0, _a = this._activePlugins; _i < _a.length; _i++) {\n            var plugin = _a[_i];\n            plugin.prepareDefinesBeforeAttributes(eventData.defines, this._scene, eventData.mesh);\n        }\n    };\n    MaterialPluginManager.prototype._handlePluginEventPrepareDefines = function (eventData) {\n        for (var _i = 0, _a = this._activePlugins; _i < _a.length; _i++) {\n            var plugin = _a[_i];\n            plugin.prepareDefines(eventData.defines, this._scene, eventData.mesh);\n        }\n    };\n    MaterialPluginManager.prototype._handlePluginEventHardBindForSubMesh = function (eventData) {\n        for (var _i = 0, _a = this._activePluginsForExtraEvents; _i < _a.length; _i++) {\n            var plugin = _a[_i];\n            plugin.hardBindForSubMesh(this._material._uniformBuffer, this._scene, this._engine, eventData.subMesh);\n        }\n    };\n    MaterialPluginManager.prototype._handlePluginEventBindForSubMesh = function (eventData) {\n        for (var _i = 0, _a = this._activePlugins; _i < _a.length; _i++) {\n            var plugin = _a[_i];\n            plugin.bindForSubMesh(this._material._uniformBuffer, this._scene, this._engine, eventData.subMesh);\n        }\n    };\n    MaterialPluginManager.prototype._handlePluginEventHasRenderTargetTextures = function (eventData) {\n        var hasRenderTargetTextures = false;\n        for (var _i = 0, _a = this._activePluginsForExtraEvents; _i < _a.length; _i++) {\n            var plugin = _a[_i];\n            hasRenderTargetTextures = plugin.hasRenderTargetTextures();\n            if (hasRenderTargetTextures) {\n                break;\n            }\n        }\n        eventData.hasRenderTargetTextures = hasRenderTargetTextures;\n    };\n    MaterialPluginManager.prototype._handlePluginEventFillRenderTargetTextures = function (eventData) {\n        for (var _i = 0, _a = this._activePluginsForExtraEvents; _i < _a.length; _i++) {\n            var plugin = _a[_i];\n            plugin.fillRenderTargetTextures(eventData.renderTargets);\n        }\n    };\n    MaterialPluginManager.prototype._handlePluginEvent = function (id, info) {\n        var _a, _b, _c;\n        switch (id) {\n            case MaterialPluginEvent.GetActiveTextures: {\n                var eventData = info;\n                for (var _i = 0, _d = this._activePlugins; _i < _d.length; _i++) {\n                    var plugin = _d[_i];\n                    plugin.getActiveTextures(eventData.activeTextures);\n                }\n                break;\n            }\n            case MaterialPluginEvent.GetAnimatables: {\n                var eventData = info;\n                for (var _e = 0, _f = this._activePlugins; _e < _f.length; _e++) {\n                    var plugin = _f[_e];\n                    plugin.getAnimatables(eventData.animatables);\n                }\n                break;\n            }\n            case MaterialPluginEvent.HasTexture: {\n                var eventData = info;\n                var hasTexture = false;\n                for (var _g = 0, _h = this._activePlugins; _g < _h.length; _g++) {\n                    var plugin = _h[_g];\n                    hasTexture = plugin.hasTexture(eventData.texture);\n                    if (hasTexture) {\n                        break;\n                    }\n                }\n                eventData.hasTexture = hasTexture;\n                break;\n            }\n            case MaterialPluginEvent.Disposed: {\n                var eventData = info;\n                for (var _j = 0, _k = this._plugins; _j < _k.length; _j++) {\n                    var plugin = _k[_j];\n                    plugin.dispose(eventData.forceDisposeTextures);\n                }\n                break;\n            }\n            case MaterialPluginEvent.GetDefineNames: {\n                var eventData = info;\n                eventData.defineNames = this._defineNamesFromPlugins;\n                break;\n            }\n            case MaterialPluginEvent.PrepareEffect: {\n                var eventData = info;\n                for (var _l = 0, _m = this._activePlugins; _l < _m.length; _l++) {\n                    var plugin = _m[_l];\n                    eventData.fallbackRank = plugin.addFallbacks(eventData.defines, eventData.fallbacks, eventData.fallbackRank);\n                    plugin.getAttributes(eventData.attributes);\n                }\n                if (this._uniformList.length > 0) {\n                    (_a = eventData.uniforms).push.apply(_a, this._uniformList);\n                }\n                if (this._samplerList.length > 0) {\n                    (_b = eventData.samplers).push.apply(_b, this._samplerList);\n                }\n                if (this._uboList.length > 0) {\n                    (_c = eventData.uniformBuffersNames).push.apply(_c, this._uboList);\n                }\n                eventData.customCode = this._injectCustomCode(eventData.customCode);\n                break;\n            }\n            case MaterialPluginEvent.PrepareUniformBuffer: {\n                var eventData = info;\n                this._uboDeclaration = \"\";\n                this._vertexDeclaration = \"\";\n                this._fragmentDeclaration = \"\";\n                this._uniformList = [];\n                this._samplerList = [];\n                this._uboList = [];\n                for (var _o = 0, _p = this._plugins; _o < _p.length; _o++) {\n                    var plugin = _p[_o];\n                    var uniforms = plugin.getUniforms();\n                    if (uniforms) {\n                        if (uniforms.ubo) {\n                            for (var _q = 0, _r = uniforms.ubo; _q < _r.length; _q++) {\n                                var uniform = _r[_q];\n                                eventData.ubo.addUniform(uniform.name, uniform.size);\n                                this._uboDeclaration += \"\".concat(uniform.type, \" \").concat(uniform.name, \";\\r\\n\");\n                                this._uniformList.push(uniform.name);\n                            }\n                        }\n                        if (uniforms.vertex) {\n                            this._vertexDeclaration += uniforms.vertex + \"\\r\\n\";\n                        }\n                        if (uniforms.fragment) {\n                            this._fragmentDeclaration += uniforms.fragment + \"\\r\\n\";\n                        }\n                    }\n                    plugin.getSamplers(this._samplerList);\n                    plugin.getUniformBuffersNames(this._uboList);\n                }\n                break;\n            }\n        }\n    };\n    MaterialPluginManager.prototype._collectPointNames = function (shaderType, customCode) {\n        if (!customCode) {\n            return;\n        }\n        for (var pointName in customCode) {\n            if (!this._codeInjectionPoints[shaderType]) {\n                this._codeInjectionPoints[shaderType] = {};\n            }\n            this._codeInjectionPoints[shaderType][pointName] = true;\n        }\n    };\n    MaterialPluginManager.prototype._injectCustomCode = function (existingCallback) {\n        var _this = this;\n        return function (shaderType, code) {\n            var _a;\n            if (existingCallback) {\n                code = existingCallback(shaderType, code);\n            }\n            if (_this._uboDeclaration) {\n                code = code.replace(\"#define ADDITIONAL_UBO_DECLARATION\", _this._uboDeclaration);\n            }\n            if (_this._vertexDeclaration) {\n                code = code.replace(\"#define ADDITIONAL_VERTEX_DECLARATION\", _this._vertexDeclaration);\n            }\n            if (_this._fragmentDeclaration) {\n                code = code.replace(\"#define ADDITIONAL_FRAGMENT_DECLARATION\", _this._fragmentDeclaration);\n            }\n            var points = (_a = _this._codeInjectionPoints) === null || _a === void 0 ? void 0 : _a[shaderType];\n            if (!points) {\n                return code;\n            }\n            for (var pointName in points) {\n                var injectedCode = \"\";\n                for (var _i = 0, _b = _this._activePlugins; _i < _b.length; _i++) {\n                    var plugin = _b[_i];\n                    var customCode = plugin.getCustomCode(shaderType);\n                    if (customCode === null || customCode === void 0 ? void 0 : customCode[pointName]) {\n                        injectedCode += customCode[pointName] + \"\\r\\n\";\n                    }\n                }\n                if (injectedCode.length > 0) {\n                    if (pointName.charAt(0) === \"!\") {\n                        // pointName is a regular expression\n                        var rx = new RegExp(pointName.substring(1), \"g\");\n                        var match = rx.exec(code);\n                        while (match !== null) {\n                            var newCode = injectedCode;\n                            for (var i = 0; i < match.length; ++i) {\n                                newCode = newCode.replace(\"$\" + i, match[i]);\n                            }\n                            code = code.replace(match[0], newCode);\n                            match = rx.exec(code);\n                        }\n                    }\n                    else {\n                        var fullPointName = \"#define \" + pointName;\n                        code = code.replace(fullPointName, \"\\r\\n\" + injectedCode + \"\\r\\n\" + fullPointName);\n                    }\n                }\n            }\n            return code;\n        };\n    };\n    /** Map a plugin class name to a #define name (used in the vertex/fragment shaders as a marker of the plugin usage) */\n    MaterialPluginManager._MaterialPluginClassToMainDefine = {};\n    MaterialPluginManager._MaterialPluginCounter = 0;\n    return MaterialPluginManager;\n}());\nexport { MaterialPluginManager };\nvar plugins = [];\nvar inited = false;\n/**\n * Registers a new material plugin through a factory, or updates it. This makes the plugin available to all materials instantiated after its registration.\n * @param pluginName The plugin name\n * @param factory The factory function which allows to create the plugin\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function RegisterMaterialPlugin(pluginName, factory) {\n    if (!inited) {\n        Material.OnEventObservable.add(function (material) {\n            for (var _i = 0, plugins_1 = plugins; _i < plugins_1.length; _i++) {\n                var _a = plugins_1[_i], factory_1 = _a[1];\n                factory_1(material);\n            }\n        }, MaterialPluginEvent.Created);\n        inited = true;\n    }\n    var existing = plugins.filter(function (_a) {\n        var name = _a[0], _factory = _a[1];\n        return name === pluginName;\n    });\n    if (existing.length > 0) {\n        existing[0][1] = factory;\n    }\n    else {\n        plugins.push([pluginName, factory]);\n    }\n}\n/**\n * Removes a material plugin from the list of global plugins.\n * @param pluginName The plugin name\n * @returns true if the plugin has been removed, else false\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function UnregisterMaterialPlugin(pluginName) {\n    for (var i = 0; i < plugins.length; ++i) {\n        if (plugins[i][0] === pluginName) {\n            plugins.splice(i, 1);\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Clear the list of global material plugins\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function UnregisterAllMaterialPlugins() {\n    plugins.length = 0;\n}\n//# sourceMappingURL=materialPluginManager.js.map","import { __extends } from \"tslib\";\nimport { Material } from \"../Materials/material.js\";\nimport { Tags } from \"../Misc/tags.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * A multi-material is used to apply different materials to different parts of the same object without the need of\n * separate meshes. This can be use to improve performances.\n * @see https://doc.babylonjs.com/how_to/multi_materials\n */\nvar MultiMaterial = /** @class */ (function (_super) {\n    __extends(MultiMaterial, _super);\n    /**\n     * Instantiates a new Multi Material\n     * A multi-material is used to apply different materials to different parts of the same object without the need of\n     * separate meshes. This can be use to improve performances.\n     * @see https://doc.babylonjs.com/how_to/multi_materials\n     * @param name Define the name in the scene\n     * @param scene Define the scene the material belongs to\n     */\n    function MultiMaterial(name, scene) {\n        var _this = _super.call(this, name, scene, true) || this;\n        /** @hidden */\n        _this._waitingSubMaterialsUniqueIds = [];\n        _this.getScene().multiMaterials.push(_this);\n        _this.subMaterials = new Array();\n        _this._storeEffectOnSubMeshes = true; // multimaterial is considered like a push material\n        return _this;\n    }\n    Object.defineProperty(MultiMaterial.prototype, \"subMaterials\", {\n        /**\n         * Gets or Sets the list of Materials used within the multi material.\n         * They need to be ordered according to the submeshes order in the associated mesh\n         */\n        get: function () {\n            return this._subMaterials;\n        },\n        set: function (value) {\n            this._subMaterials = value;\n            this._hookArray(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Function used to align with Node.getChildren()\n     * @returns the list of Materials used within the multi material\n     */\n    MultiMaterial.prototype.getChildren = function () {\n        return this.subMaterials;\n    };\n    MultiMaterial.prototype._hookArray = function (array) {\n        var _this = this;\n        var oldPush = array.push;\n        array.push = function () {\n            var items = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                items[_i] = arguments[_i];\n            }\n            var result = oldPush.apply(array, items);\n            _this._markAllSubMeshesAsTexturesDirty();\n            return result;\n        };\n        var oldSplice = array.splice;\n        array.splice = function (index, deleteCount) {\n            var deleted = oldSplice.apply(array, [index, deleteCount]);\n            _this._markAllSubMeshesAsTexturesDirty();\n            return deleted;\n        };\n    };\n    /**\n     * Get one of the submaterial by its index in the submaterials array\n     * @param index The index to look the sub material at\n     * @returns The Material if the index has been defined\n     */\n    MultiMaterial.prototype.getSubMaterial = function (index) {\n        if (index < 0 || index >= this.subMaterials.length) {\n            return this.getScene().defaultMaterial;\n        }\n        return this.subMaterials[index];\n    };\n    /**\n     * Get the list of active textures for the whole sub materials list.\n     * @returns All the textures that will be used during the rendering\n     */\n    MultiMaterial.prototype.getActiveTextures = function () {\n        var _a;\n        return (_a = _super.prototype.getActiveTextures.call(this)).concat.apply(_a, this.subMaterials.map(function (subMaterial) {\n            if (subMaterial) {\n                return subMaterial.getActiveTextures();\n            }\n            else {\n                return [];\n            }\n        }));\n    };\n    /**\n     * Specifies if any sub-materials of this multi-material use a given texture.\n     * @param texture Defines the texture to check against this multi-material's sub-materials.\n     * @returns A boolean specifying if any sub-material of this multi-material uses the texture.\n     */\n    MultiMaterial.prototype.hasTexture = function (texture) {\n        var _a;\n        if (_super.prototype.hasTexture.call(this, texture)) {\n            return true;\n        }\n        for (var i = 0; i < this.subMaterials.length; i++) {\n            if ((_a = this.subMaterials[i]) === null || _a === void 0 ? void 0 : _a.hasTexture(texture)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Gets the current class name of the material e.g. \"MultiMaterial\"\n     * Mainly use in serialization.\n     * @returns the class name\n     */\n    MultiMaterial.prototype.getClassName = function () {\n        return \"MultiMaterial\";\n    };\n    /**\n     * Checks if the material is ready to render the requested sub mesh\n     * @param mesh Define the mesh the submesh belongs to\n     * @param subMesh Define the sub mesh to look readiness for\n     * @param useInstances Define whether or not the material is used with instances\n     * @returns true if ready, otherwise false\n     */\n    MultiMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh, useInstances) {\n        for (var index = 0; index < this.subMaterials.length; index++) {\n            var subMaterial = this.subMaterials[index];\n            if (subMaterial) {\n                if (subMaterial._storeEffectOnSubMeshes) {\n                    if (!subMaterial.isReadyForSubMesh(mesh, subMesh, useInstances)) {\n                        return false;\n                    }\n                    continue;\n                }\n                if (!subMaterial.isReady(mesh)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    /**\n     * Clones the current material and its related sub materials\n     * @param name Define the name of the newly cloned material\n     * @param cloneChildren Define if submaterial will be cloned or shared with the parent instance\n     * @returns the cloned material\n     */\n    MultiMaterial.prototype.clone = function (name, cloneChildren) {\n        var newMultiMaterial = new MultiMaterial(name, this.getScene());\n        for (var index = 0; index < this.subMaterials.length; index++) {\n            var subMaterial = null;\n            var current = this.subMaterials[index];\n            if (cloneChildren && current) {\n                subMaterial = current.clone(name + \"-\" + current.name);\n            }\n            else {\n                subMaterial = this.subMaterials[index];\n            }\n            newMultiMaterial.subMaterials.push(subMaterial);\n        }\n        return newMultiMaterial;\n    };\n    /**\n     * Serializes the materials into a JSON representation.\n     * @returns the JSON representation\n     */\n    MultiMaterial.prototype.serialize = function () {\n        var serializationObject = {};\n        serializationObject.name = this.name;\n        serializationObject.id = this.id;\n        serializationObject.uniqueId = this.uniqueId;\n        if (Tags) {\n            serializationObject.tags = Tags.GetTags(this);\n        }\n        serializationObject.materialsUniqueIds = [];\n        serializationObject.materials = [];\n        for (var matIndex = 0; matIndex < this.subMaterials.length; matIndex++) {\n            var subMat = this.subMaterials[matIndex];\n            if (subMat) {\n                serializationObject.materialsUniqueIds.push(subMat.uniqueId);\n                serializationObject.materials.push(subMat.id);\n            }\n            else {\n                serializationObject.materialsUniqueIds.push(null);\n                serializationObject.materials.push(null);\n            }\n        }\n        return serializationObject;\n    };\n    /**\n     * Dispose the material and release its associated resources\n     * @param forceDisposeEffect Define if we want to force disposing the associated effect (if false the shader is not released and could be reuse later on)\n     * @param forceDisposeTextures Define if we want to force disposing the associated textures (if false, they will not be disposed and can still be use elsewhere in the app)\n     * @param forceDisposeChildren Define if we want to force disposing the associated submaterials (if false, they will not be disposed and can still be use elsewhere in the app)\n     */\n    MultiMaterial.prototype.dispose = function (forceDisposeEffect, forceDisposeTextures, forceDisposeChildren) {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        if (forceDisposeChildren) {\n            for (var index_1 = 0; index_1 < this.subMaterials.length; index_1++) {\n                var subMaterial = this.subMaterials[index_1];\n                if (subMaterial) {\n                    subMaterial.dispose(forceDisposeEffect, forceDisposeTextures);\n                }\n            }\n        }\n        var index = scene.multiMaterials.indexOf(this);\n        if (index >= 0) {\n            scene.multiMaterials.splice(index, 1);\n        }\n        _super.prototype.dispose.call(this, forceDisposeEffect, forceDisposeTextures);\n    };\n    /**\n     * Creates a MultiMaterial from parsed MultiMaterial data.\n     * @param parsedMultiMaterial defines parsed MultiMaterial data.\n     * @param scene defines the hosting scene\n     * @returns a new MultiMaterial\n     */\n    MultiMaterial.ParseMultiMaterial = function (parsedMultiMaterial, scene) {\n        var multiMaterial = new MultiMaterial(parsedMultiMaterial.name, scene);\n        multiMaterial.id = parsedMultiMaterial.id;\n        multiMaterial._loadedUniqueId = parsedMultiMaterial.uniqueId;\n        if (Tags) {\n            Tags.AddTagsTo(multiMaterial, parsedMultiMaterial.tags);\n        }\n        if (parsedMultiMaterial.materialsUniqueIds) {\n            multiMaterial._waitingSubMaterialsUniqueIds = parsedMultiMaterial.materialsUniqueIds;\n        }\n        else {\n            parsedMultiMaterial.materials.forEach(function (subMatId) { return multiMaterial.subMaterials.push(scene.getLastMaterialById(subMatId)); });\n        }\n        return multiMaterial;\n    };\n    return MultiMaterial;\n}(Material));\nexport { MultiMaterial };\nRegisterClass(\"BABYLON.MultiMaterial\", MultiMaterial);\n//# sourceMappingURL=multiMaterial.js.map","\n/**\n * Configuration needed for prepass-capable materials\n */\nvar PrePassConfiguration = /** @class */ (function () {\n    function PrePassConfiguration() {\n        /**\n         * Previous world matrices of meshes carrying this material\n         * Used for computing velocity\n         */\n        this.previousWorldMatrices = {};\n        /**\n         * Previous bones of meshes carrying this material\n         * Used for computing velocity\n         */\n        this.previousBones = {};\n    }\n    /**\n     * Add the required uniforms to the current list.\n     * @param uniforms defines the current uniform list.\n     */\n    PrePassConfiguration.AddUniforms = function (uniforms) {\n        uniforms.push(\"previousWorld\", \"previousViewProjection\", \"mPreviousBones\");\n    };\n    /**\n     * Add the required samplers to the current list.\n     * @param samplers defines the current sampler list.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    PrePassConfiguration.AddSamplers = function (samplers) {\n        // pass\n    };\n    /**\n     * Binds the material data.\n     * @param effect defines the effect to update\n     * @param scene defines the scene the material belongs to.\n     * @param mesh The mesh\n     * @param world World matrix of this mesh\n     * @param isFrozen Is the material frozen\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    PrePassConfiguration.prototype.bindForSubMesh = function (effect, scene, mesh, world, isFrozen) {\n        if (scene.prePassRenderer && scene.prePassRenderer.enabled && scene.prePassRenderer.currentRTisSceneRT) {\n            if (scene.prePassRenderer.getIndex(2) !== -1) {\n                if (!this.previousWorldMatrices[mesh.uniqueId]) {\n                    this.previousWorldMatrices[mesh.uniqueId] = world.clone();\n                }\n                if (!this.previousViewProjection) {\n                    this.previousViewProjection = scene.getTransformMatrix().clone();\n                    this.currentViewProjection = scene.getTransformMatrix().clone();\n                }\n                var engine = scene.getEngine();\n                if (this.currentViewProjection.updateFlag !== scene.getTransformMatrix().updateFlag) {\n                    // First update of the prepass configuration for this rendering pass\n                    this._lastUpdateFrameId = engine.frameId;\n                    this.previousViewProjection.copyFrom(this.currentViewProjection);\n                    this.currentViewProjection.copyFrom(scene.getTransformMatrix());\n                }\n                else if (this._lastUpdateFrameId !== engine.frameId) {\n                    // The scene transformation did not change from the previous frame (so no camera motion), we must update previousViewProjection accordingly\n                    this._lastUpdateFrameId = engine.frameId;\n                    this.previousViewProjection.copyFrom(this.currentViewProjection);\n                }\n                effect.setMatrix(\"previousWorld\", this.previousWorldMatrices[mesh.uniqueId]);\n                effect.setMatrix(\"previousViewProjection\", this.previousViewProjection);\n                this.previousWorldMatrices[mesh.uniqueId] = world.clone();\n            }\n        }\n    };\n    return PrePassConfiguration;\n}());\nexport { PrePassConfiguration };\n//# sourceMappingURL=prePassConfiguration.js.map","import { __extends } from \"tslib\";\nimport { Matrix } from \"../Maths/math.vector.js\";\nimport { Material } from \"../Materials/material.js\";\n/**\n * Base class of materials working in push mode in babylon JS\n * @hidden\n */\nvar PushMaterial = /** @class */ (function (_super) {\n    __extends(PushMaterial, _super);\n    function PushMaterial(name, scene, storeEffectOnSubMeshes) {\n        if (storeEffectOnSubMeshes === void 0) { storeEffectOnSubMeshes = true; }\n        var _this = _super.call(this, name, scene) || this;\n        _this._normalMatrix = new Matrix();\n        _this._storeEffectOnSubMeshes = storeEffectOnSubMeshes;\n        return _this;\n    }\n    PushMaterial.prototype.getEffect = function () {\n        return this._storeEffectOnSubMeshes ? this._activeEffect : _super.prototype.getEffect.call(this);\n    };\n    PushMaterial.prototype.isReady = function (mesh, useInstances) {\n        if (!mesh) {\n            return false;\n        }\n        if (!this._storeEffectOnSubMeshes) {\n            return true;\n        }\n        if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\n            return true;\n        }\n        return this.isReadyForSubMesh(mesh, mesh.subMeshes[0], useInstances);\n    };\n    PushMaterial.prototype._isReadyForSubMesh = function (subMesh) {\n        var defines = subMesh.materialDefines;\n        if (!this.checkReadyOnEveryCall && subMesh.effect && defines) {\n            if (defines._renderId === this.getScene().getRenderId()) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Binds the given world matrix to the active effect\n     *\n     * @param world the matrix to bind\n     */\n    PushMaterial.prototype.bindOnlyWorldMatrix = function (world) {\n        this._activeEffect.setMatrix(\"world\", world);\n    };\n    /**\n     * Binds the given normal matrix to the active effect\n     *\n     * @param normalMatrix the matrix to bind\n     */\n    PushMaterial.prototype.bindOnlyNormalMatrix = function (normalMatrix) {\n        this._activeEffect.setMatrix(\"normalMatrix\", normalMatrix);\n    };\n    PushMaterial.prototype.bind = function (world, mesh) {\n        if (!mesh) {\n            return;\n        }\n        this.bindForSubMesh(world, mesh, mesh.subMeshes[0]);\n    };\n    PushMaterial.prototype._afterBind = function (mesh, effect) {\n        if (effect === void 0) { effect = null; }\n        _super.prototype._afterBind.call(this, mesh, effect);\n        this.getScene()._cachedEffect = effect;\n    };\n    PushMaterial.prototype._mustRebind = function (scene, effect, visibility) {\n        if (visibility === void 0) { visibility = 1; }\n        return scene.isCachedMaterialInvalid(this, effect, visibility);\n    };\n    return PushMaterial;\n}(Material));\nexport { PushMaterial };\n//# sourceMappingURL=pushMaterial.js.map","/**\n * Language of the shader code\n */\nexport var ShaderLanguage;\n(function (ShaderLanguage) {\n    /** language is GLSL (used by WebGL) */\n    ShaderLanguage[ShaderLanguage[\"GLSL\"] = 0] = \"GLSL\";\n    /** language is WGSL (used by WebGPU) */\n    ShaderLanguage[ShaderLanguage[\"WGSL\"] = 1] = \"WGSL\";\n})(ShaderLanguage || (ShaderLanguage = {}));\n//# sourceMappingURL=shaderLanguage.js.map","import { __assign, __extends } from \"tslib\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\nimport { Matrix, Vector3, Vector2, Vector4 } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { MaterialHelper } from \"./materialHelper.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { Color3, Color4 } from \"../Maths/math.color.js\";\nimport { EffectFallbacks } from \"./effectFallbacks.js\";\nimport { WebRequest } from \"../Misc/webRequest.js\";\nimport { PushMaterial } from \"./pushMaterial.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n\nvar onCreatedEffectParameters = { effect: null, subMesh: null };\n/**\n * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\n *\n * This returned material effects how the mesh will look based on the code in the shaders.\n *\n * @see https://doc.babylonjs.com/advanced_topics/shaders/shaderMaterial\n */\nvar ShaderMaterial = /** @class */ (function (_super) {\n    __extends(ShaderMaterial, _super);\n    /**\n     * Instantiate a new shader material.\n     * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\n     * This returned material effects how the mesh will look based on the code in the shaders.\n     * @see https://doc.babylonjs.com/how_to/shader_material\n     * @param name Define the name of the material in the scene\n     * @param scene Define the scene the material belongs to\n     * @param shaderPath Defines  the route to the shader code in one of three ways:\n     *  * object: { vertex: \"custom\", fragment: \"custom\" }, used with Effect.ShadersStore[\"customVertexShader\"] and Effect.ShadersStore[\"customFragmentShader\"]\n     *  * object: { vertexElement: \"vertexShaderCode\", fragmentElement: \"fragmentShaderCode\" }, used with shader code in script tags\n     *  * object: { vertexSource: \"vertex shader code string\", fragmentSource: \"fragment shader code string\" } using with strings containing the shaders code\n     *  * string: \"./COMMON_NAME\", used with external files COMMON_NAME.vertex.fx and COMMON_NAME.fragment.fx in index.html folder.\n     * @param options Define the options used to create the shader\n     * @param storeEffectOnSubMeshes true to store effect on submeshes, false to store the effect directly in the material class.\n     */\n    function ShaderMaterial(name, scene, shaderPath, options, storeEffectOnSubMeshes) {\n        if (options === void 0) { options = {}; }\n        if (storeEffectOnSubMeshes === void 0) { storeEffectOnSubMeshes = true; }\n        var _this = _super.call(this, name, scene, storeEffectOnSubMeshes) || this;\n        _this._textures = {};\n        _this._textureArrays = {};\n        _this._externalTextures = {};\n        _this._floats = {};\n        _this._ints = {};\n        _this._floatsArrays = {};\n        _this._colors3 = {};\n        _this._colors3Arrays = {};\n        _this._colors4 = {};\n        _this._colors4Arrays = {};\n        _this._vectors2 = {};\n        _this._vectors3 = {};\n        _this._vectors4 = {};\n        _this._matrices = {};\n        _this._matrixArrays = {};\n        _this._matrices3x3 = {};\n        _this._matrices2x2 = {};\n        _this._vectors2Arrays = {};\n        _this._vectors3Arrays = {};\n        _this._vectors4Arrays = {};\n        _this._uniformBuffers = {};\n        _this._textureSamplers = {};\n        _this._storageBuffers = {};\n        _this._cachedWorldViewMatrix = new Matrix();\n        _this._cachedWorldViewProjectionMatrix = new Matrix();\n        _this._multiview = false;\n        _this._shaderPath = shaderPath;\n        _this._options = __assign({ needAlphaBlending: false, needAlphaTesting: false, attributes: [\"position\", \"normal\", \"uv\"], uniforms: [\"worldViewProjection\"], uniformBuffers: [], samplers: [], externalTextures: [], samplerObjects: [], storageBuffers: [], defines: [], useClipPlane: false }, options);\n        return _this;\n    }\n    Object.defineProperty(ShaderMaterial.prototype, \"shaderPath\", {\n        /**\n         * Gets the shader path used to define the shader code\n         * It can be modified to trigger a new compilation\n         */\n        get: function () {\n            return this._shaderPath;\n        },\n        /**\n         * Sets the shader path used to define the shader code\n         * It can be modified to trigger a new compilation\n         */\n        set: function (shaderPath) {\n            this._shaderPath = shaderPath;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ShaderMaterial.prototype, \"options\", {\n        /**\n         * Gets the options used to compile the shader.\n         * They can be modified to trigger a new compilation\n         */\n        get: function () {\n            return this._options;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the current class name of the material e.g. \"ShaderMaterial\"\n     * Mainly use in serialization.\n     * @returns the class name\n     */\n    ShaderMaterial.prototype.getClassName = function () {\n        return \"ShaderMaterial\";\n    };\n    /**\n     * Specifies if the material will require alpha blending\n     * @returns a boolean specifying if alpha blending is needed\n     */\n    ShaderMaterial.prototype.needAlphaBlending = function () {\n        return this.alpha < 1.0 || this._options.needAlphaBlending;\n    };\n    /**\n     * Specifies if this material should be rendered in alpha test mode\n     * @returns a boolean specifying if an alpha test is needed.\n     */\n    ShaderMaterial.prototype.needAlphaTesting = function () {\n        return this._options.needAlphaTesting;\n    };\n    ShaderMaterial.prototype._checkUniform = function (uniformName) {\n        if (this._options.uniforms.indexOf(uniformName) === -1) {\n            this._options.uniforms.push(uniformName);\n        }\n    };\n    /**\n     * Set a texture in the shader.\n     * @param name Define the name of the uniform samplers as defined in the shader\n     * @param texture Define the texture to bind to this sampler\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setTexture = function (name, texture) {\n        if (this._options.samplers.indexOf(name) === -1) {\n            this._options.samplers.push(name);\n        }\n        this._textures[name] = texture;\n        return this;\n    };\n    /**\n     * Set a texture array in the shader.\n     * @param name Define the name of the uniform sampler array as defined in the shader\n     * @param textures Define the list of textures to bind to this sampler\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setTextureArray = function (name, textures) {\n        if (this._options.samplers.indexOf(name) === -1) {\n            this._options.samplers.push(name);\n        }\n        this._checkUniform(name);\n        this._textureArrays[name] = textures;\n        return this;\n    };\n    /**\n     * Set an internal texture in the shader.\n     * @param name Define the name of the uniform samplers as defined in the shader\n     * @param texture Define the texture to bind to this sampler\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setExternalTexture = function (name, texture) {\n        if (this._options.externalTextures.indexOf(name) === -1) {\n            this._options.externalTextures.push(name);\n        }\n        this._externalTextures[name] = texture;\n        return this;\n    };\n    /**\n     * Set a float in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setFloat = function (name, value) {\n        this._checkUniform(name);\n        this._floats[name] = value;\n        return this;\n    };\n    /**\n     * Set a int in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setInt = function (name, value) {\n        this._checkUniform(name);\n        this._ints[name] = value;\n        return this;\n    };\n    /**\n     * Set an array of floats in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setFloats = function (name, value) {\n        this._checkUniform(name);\n        this._floatsArrays[name] = value;\n        return this;\n    };\n    /**\n     * Set a vec3 in the shader from a Color3.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setColor3 = function (name, value) {\n        this._checkUniform(name);\n        this._colors3[name] = value;\n        return this;\n    };\n    /**\n     * Set a vec3 array in the shader from a Color3 array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setColor3Array = function (name, value) {\n        this._checkUniform(name);\n        this._colors3Arrays[name] = value.reduce(function (arr, color) {\n            color.toArray(arr, arr.length);\n            return arr;\n        }, []);\n        return this;\n    };\n    /**\n     * Set a vec4 in the shader from a Color4.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setColor4 = function (name, value) {\n        this._checkUniform(name);\n        this._colors4[name] = value;\n        return this;\n    };\n    /**\n     * Set a vec4 array in the shader from a Color4 array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setColor4Array = function (name, value) {\n        this._checkUniform(name);\n        this._colors4Arrays[name] = value.reduce(function (arr, color) {\n            color.toArray(arr, arr.length);\n            return arr;\n        }, []);\n        return this;\n    };\n    /**\n     * Set a vec2 in the shader from a Vector2.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setVector2 = function (name, value) {\n        this._checkUniform(name);\n        this._vectors2[name] = value;\n        return this;\n    };\n    /**\n     * Set a vec3 in the shader from a Vector3.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setVector3 = function (name, value) {\n        this._checkUniform(name);\n        this._vectors3[name] = value;\n        return this;\n    };\n    /**\n     * Set a vec4 in the shader from a Vector4.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setVector4 = function (name, value) {\n        this._checkUniform(name);\n        this._vectors4[name] = value;\n        return this;\n    };\n    /**\n     * Set a mat4 in the shader from a Matrix.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setMatrix = function (name, value) {\n        this._checkUniform(name);\n        this._matrices[name] = value;\n        return this;\n    };\n    /**\n     * Set a float32Array in the shader from a matrix array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setMatrices = function (name, value) {\n        this._checkUniform(name);\n        var float32Array = new Float32Array(value.length * 16);\n        for (var index = 0; index < value.length; index++) {\n            var matrix = value[index];\n            matrix.copyToArray(float32Array, index * 16);\n        }\n        this._matrixArrays[name] = float32Array;\n        return this;\n    };\n    /**\n     * Set a mat3 in the shader from a Float32Array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setMatrix3x3 = function (name, value) {\n        this._checkUniform(name);\n        this._matrices3x3[name] = value;\n        return this;\n    };\n    /**\n     * Set a mat2 in the shader from a Float32Array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setMatrix2x2 = function (name, value) {\n        this._checkUniform(name);\n        this._matrices2x2[name] = value;\n        return this;\n    };\n    /**\n     * Set a vec2 array in the shader from a number array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setArray2 = function (name, value) {\n        this._checkUniform(name);\n        this._vectors2Arrays[name] = value;\n        return this;\n    };\n    /**\n     * Set a vec3 array in the shader from a number array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setArray3 = function (name, value) {\n        this._checkUniform(name);\n        this._vectors3Arrays[name] = value;\n        return this;\n    };\n    /**\n     * Set a vec4 array in the shader from a number array.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setArray4 = function (name, value) {\n        this._checkUniform(name);\n        this._vectors4Arrays[name] = value;\n        return this;\n    };\n    /**\n     * Set a uniform buffer in the shader\n     * @param name Define the name of the uniform as defined in the shader\n     * @param buffer Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setUniformBuffer = function (name, buffer) {\n        if (this._options.uniformBuffers.indexOf(name) === -1) {\n            this._options.uniformBuffers.push(name);\n        }\n        this._uniformBuffers[name] = buffer;\n        return this;\n    };\n    /**\n     * Set a texture sampler in the shader\n     * @param name Define the name of the uniform as defined in the shader\n     * @param sampler Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setTextureSampler = function (name, sampler) {\n        if (this._options.samplerObjects.indexOf(name) === -1) {\n            this._options.samplerObjects.push(name);\n        }\n        this._textureSamplers[name] = sampler;\n        return this;\n    };\n    /**\n     * Set a storage buffer in the shader\n     * @param name Define the name of the storage buffer as defined in the shader\n     * @param buffer Define the value to give to the uniform\n     * @return the material itself allowing \"fluent\" like uniform updates\n     */\n    ShaderMaterial.prototype.setStorageBuffer = function (name, buffer) {\n        if (this._options.storageBuffers.indexOf(name) === -1) {\n            this._options.storageBuffers.push(name);\n        }\n        this._storageBuffers[name] = buffer;\n        return this;\n    };\n    /**\n     * Specifies that the submesh is ready to be used\n     * @param mesh defines the mesh to check\n     * @param subMesh defines which submesh to check\n     * @param useInstances specifies that instances should be used\n     * @returns a boolean indicating that the submesh is ready or not\n     */\n    ShaderMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh, useInstances) {\n        return this.isReady(mesh, useInstances, subMesh);\n    };\n    /**\n     * Checks if the material is ready to render the requested mesh\n     * @param mesh Define the mesh to render\n     * @param useInstances Define whether or not the material is used with instances\n     * @param subMesh defines which submesh to render\n     * @returns true if ready, otherwise false\n     */\n    ShaderMaterial.prototype.isReady = function (mesh, useInstances, subMesh) {\n        var _a, _b, _c, _d;\n        var storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\n        if (this.isFrozen) {\n            if (storeEffectOnSubMeshes) {\n                if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n                    return true;\n                }\n            }\n            else {\n                var effect_1 = this._drawWrapper.effect;\n                if (effect_1 && effect_1._wasPreviouslyReady && this._effectUsesInstances === useInstances) {\n                    return true;\n                }\n            }\n        }\n        var scene = this.getScene();\n        var engine = scene.getEngine();\n        // Instances\n        var defines = [];\n        var attribs = [];\n        var fallbacks = new EffectFallbacks();\n        var shaderName = this._shaderPath, uniforms = this._options.uniforms, uniformBuffers = this._options.uniformBuffers, samplers = this._options.samplers;\n        // global multiview\n        if (engine.getCaps().multiview && scene.activeCamera && scene.activeCamera.outputRenderTarget && scene.activeCamera.outputRenderTarget.getViewCount() > 1) {\n            this._multiview = true;\n            defines.push(\"#define MULTIVIEW\");\n            if (this._options.uniforms.indexOf(\"viewProjection\") !== -1 && this._options.uniforms.indexOf(\"viewProjectionR\") === -1) {\n                this._options.uniforms.push(\"viewProjectionR\");\n            }\n        }\n        for (var index = 0; index < this._options.defines.length; index++) {\n            var defineToAdd = this._options.defines[index].indexOf(\"#define\") === 0 ? this._options.defines[index] : \"#define \".concat(this._options.defines[index]);\n            defines.push(defineToAdd);\n        }\n        for (var index = 0; index < this._options.attributes.length; index++) {\n            attribs.push(this._options.attributes[index]);\n        }\n        if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorKind)) {\n            attribs.push(VertexBuffer.ColorKind);\n            defines.push(\"#define VERTEXCOLOR\");\n        }\n        if (useInstances) {\n            defines.push(\"#define INSTANCES\");\n            MaterialHelper.PushAttributesForInstances(attribs);\n            if (mesh === null || mesh === void 0 ? void 0 : mesh.hasThinInstances) {\n                defines.push(\"#define THIN_INSTANCES\");\n                if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorInstanceKind)) {\n                    attribs.push(VertexBuffer.ColorInstanceKind);\n                    defines.push(\"#define INSTANCESCOLOR\");\n                }\n            }\n        }\n        // Bones\n        if (mesh && mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\n            attribs.push(VertexBuffer.MatricesIndicesKind);\n            attribs.push(VertexBuffer.MatricesWeightsKind);\n            if (mesh.numBoneInfluencers > 4) {\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\n            }\n            var skeleton = mesh.skeleton;\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\n            fallbacks.addCPUSkinningFallback(0, mesh);\n            if (skeleton.isUsingTextureForMatrices) {\n                defines.push(\"#define BONETEXTURE\");\n                if (this._options.uniforms.indexOf(\"boneTextureWidth\") === -1) {\n                    this._options.uniforms.push(\"boneTextureWidth\");\n                }\n                if (this._options.samplers.indexOf(\"boneSampler\") === -1) {\n                    this._options.samplers.push(\"boneSampler\");\n                }\n            }\n            else {\n                defines.push(\"#define BonesPerMesh \" + (skeleton.bones.length + 1));\n                if (this._options.uniforms.indexOf(\"mBones\") === -1) {\n                    this._options.uniforms.push(\"mBones\");\n                }\n            }\n        }\n        else {\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\n        }\n        // Morph\n        var numInfluencers = 0;\n        var manager = mesh ? mesh.morphTargetManager : null;\n        if (manager) {\n            var uv = manager.supportsUVs && defines.indexOf(\"#define UV1\") !== -1;\n            var tangent = manager.supportsTangents && defines.indexOf(\"#define TANGENT\") !== -1;\n            var normal = manager.supportsNormals && defines.indexOf(\"#define NORMAL\") !== -1;\n            numInfluencers = manager.numInfluencers;\n            if (uv) {\n                defines.push(\"#define MORPHTARGETS_UV\");\n            }\n            if (tangent) {\n                defines.push(\"#define MORPHTARGETS_TANGENT\");\n            }\n            if (normal) {\n                defines.push(\"#define MORPHTARGETS_NORMAL\");\n            }\n            if (numInfluencers > 0) {\n                defines.push(\"#define MORPHTARGETS\");\n            }\n            if (manager.isUsingTextureForTargets) {\n                defines.push(\"#define MORPHTARGETS_TEXTURE\");\n                if (this._options.uniforms.indexOf(\"morphTargetTextureIndices\") === -1) {\n                    this._options.uniforms.push(\"morphTargetTextureIndices\");\n                }\n                if (this._options.samplers.indexOf(\"morphTargets\") === -1) {\n                    this._options.samplers.push(\"morphTargets\");\n                }\n            }\n            defines.push(\"#define NUM_MORPH_INFLUENCERS \" + numInfluencers);\n            for (var index = 0; index < numInfluencers; index++) {\n                attribs.push(VertexBuffer.PositionKind + index);\n                if (normal) {\n                    attribs.push(VertexBuffer.NormalKind + index);\n                }\n                if (tangent) {\n                    attribs.push(VertexBuffer.TangentKind + index);\n                }\n                if (uv) {\n                    attribs.push(VertexBuffer.UVKind + \"_\" + index);\n                }\n            }\n            if (numInfluencers > 0) {\n                uniforms = uniforms.slice();\n                uniforms.push(\"morphTargetInfluences\");\n                uniforms.push(\"morphTargetTextureInfo\");\n                uniforms.push(\"morphTargetTextureIndices\");\n            }\n        }\n        else {\n            defines.push(\"#define NUM_MORPH_INFLUENCERS 0\");\n        }\n        // Baked Vertex Animation\n        if (mesh) {\n            var bvaManager = mesh.bakedVertexAnimationManager;\n            if (bvaManager && bvaManager.isEnabled) {\n                defines.push(\"#define BAKED_VERTEX_ANIMATION_TEXTURE\");\n                if (this._options.uniforms.indexOf(\"bakedVertexAnimationSettings\") === -1) {\n                    this._options.uniforms.push(\"bakedVertexAnimationSettings\");\n                }\n                if (this._options.uniforms.indexOf(\"bakedVertexAnimationTextureSizeInverted\") === -1) {\n                    this._options.uniforms.push(\"bakedVertexAnimationTextureSizeInverted\");\n                }\n                if (this._options.uniforms.indexOf(\"bakedVertexAnimationTime\") === -1) {\n                    this._options.uniforms.push(\"bakedVertexAnimationTime\");\n                }\n                if (this._options.samplers.indexOf(\"bakedVertexAnimationTexture\") === -1) {\n                    this._options.samplers.push(\"bakedVertexAnimationTexture\");\n                }\n            }\n            MaterialHelper.PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\n        }\n        // Textures\n        for (var name_1 in this._textures) {\n            if (!this._textures[name_1].isReady()) {\n                return false;\n            }\n        }\n        // Alpha test\n        if (mesh && this._shouldTurnAlphaTestOn(mesh)) {\n            defines.push(\"#define ALPHATEST\");\n        }\n        // Clip planes\n        if ((this._options.useClipPlane === null && !!scene.clipPlane) || this._options.useClipPlane) {\n            defines.push(\"#define CLIPPLANE\");\n            if (uniforms.indexOf(\"vClipPlane\") === -1) {\n                uniforms.push(\"vClipPlane\");\n            }\n        }\n        if ((this._options.useClipPlane === null && !!scene.clipPlane2) || this._options.useClipPlane) {\n            defines.push(\"#define CLIPPLANE2\");\n            if (uniforms.indexOf(\"vClipPlane2\") === -1) {\n                uniforms.push(\"vClipPlane2\");\n            }\n        }\n        if ((this._options.useClipPlane === null && !!scene.clipPlane3) || this._options.useClipPlane) {\n            defines.push(\"#define CLIPPLANE3\");\n            if (uniforms.indexOf(\"vClipPlane3\") === -1) {\n                uniforms.push(\"vClipPlane3\");\n            }\n        }\n        if ((this._options.useClipPlane === null && !!scene.clipPlane4) || this._options.useClipPlane) {\n            defines.push(\"#define CLIPPLANE4\");\n            if (uniforms.indexOf(\"vClipPlane4\") === -1) {\n                uniforms.push(\"vClipPlane4\");\n            }\n        }\n        if ((this._options.useClipPlane === null && !!scene.clipPlane5) || this._options.useClipPlane) {\n            defines.push(\"#define CLIPPLANE5\");\n            if (uniforms.indexOf(\"vClipPlane5\") === -1) {\n                uniforms.push(\"vClipPlane5\");\n            }\n        }\n        if ((this._options.useClipPlane === null && !!scene.clipPlane6) || this._options.useClipPlane) {\n            defines.push(\"#define CLIPPLANE6\");\n            if (uniforms.indexOf(\"vClipPlane6\") === -1) {\n                uniforms.push(\"vClipPlane6\");\n            }\n        }\n        if (this.customShaderNameResolve) {\n            uniforms = uniforms.slice();\n            uniformBuffers = uniformBuffers.slice();\n            samplers = samplers.slice();\n            shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs);\n        }\n        var drawWrapper = storeEffectOnSubMeshes ? subMesh._getDrawWrapper() : this._drawWrapper;\n        var previousEffect = (_a = drawWrapper === null || drawWrapper === void 0 ? void 0 : drawWrapper.effect) !== null && _a !== void 0 ? _a : null;\n        var previousDefines = (_b = drawWrapper === null || drawWrapper === void 0 ? void 0 : drawWrapper.defines) !== null && _b !== void 0 ? _b : null;\n        var join = defines.join(\"\\n\");\n        var effect = previousEffect;\n        if (previousDefines !== join) {\n            effect = engine.createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters: { maxSimultaneousMorphTargets: numInfluencers },\n                shaderLanguage: this._options.shaderLanguage,\n            }, engine);\n            if (storeEffectOnSubMeshes) {\n                subMesh.setEffect(effect, join, this._materialContext);\n            }\n            else if (drawWrapper) {\n                drawWrapper.setEffect(effect, join);\n            }\n            if (this._onEffectCreatedObservable) {\n                onCreatedEffectParameters.effect = effect;\n                onCreatedEffectParameters.subMesh = (_c = subMesh !== null && subMesh !== void 0 ? subMesh : mesh === null || mesh === void 0 ? void 0 : mesh.subMeshes[0]) !== null && _c !== void 0 ? _c : null;\n                this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n            }\n        }\n        this._effectUsesInstances = !!useInstances;\n        if ((_d = !(effect === null || effect === void 0 ? void 0 : effect.isReady())) !== null && _d !== void 0 ? _d : true) {\n            return false;\n        }\n        if (previousEffect !== effect) {\n            scene.resetCachedMaterial();\n        }\n        effect._wasPreviouslyReady = true;\n        return true;\n    };\n    /**\n     * Binds the world matrix to the material\n     * @param world defines the world transformation matrix\n     * @param effectOverride - If provided, use this effect instead of internal effect\n     */\n    ShaderMaterial.prototype.bindOnlyWorldMatrix = function (world, effectOverride) {\n        var scene = this.getScene();\n        var effect = effectOverride !== null && effectOverride !== void 0 ? effectOverride : this.getEffect();\n        if (!effect) {\n            return;\n        }\n        if (this._options.uniforms.indexOf(\"world\") !== -1) {\n            effect.setMatrix(\"world\", world);\n        }\n        if (this._options.uniforms.indexOf(\"worldView\") !== -1) {\n            world.multiplyToRef(scene.getViewMatrix(), this._cachedWorldViewMatrix);\n            effect.setMatrix(\"worldView\", this._cachedWorldViewMatrix);\n        }\n        if (this._options.uniforms.indexOf(\"worldViewProjection\") !== -1) {\n            world.multiplyToRef(scene.getTransformMatrix(), this._cachedWorldViewProjectionMatrix);\n            effect.setMatrix(\"worldViewProjection\", this._cachedWorldViewProjectionMatrix);\n        }\n    };\n    /**\n     * Binds the submesh to this material by preparing the effect and shader to draw\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh containing the submesh\n     * @param subMesh defines the submesh to bind the material to\n     */\n    ShaderMaterial.prototype.bindForSubMesh = function (world, mesh, subMesh) {\n        var _a;\n        this.bind(world, mesh, (_a = subMesh._drawWrapperOverride) === null || _a === void 0 ? void 0 : _a.effect, subMesh);\n    };\n    /**\n     * Binds the material to the mesh\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh to bind the material to\n     * @param effectOverride - If provided, use this effect instead of internal effect\n     * @param subMesh defines the submesh to bind the material to\n     */\n    ShaderMaterial.prototype.bind = function (world, mesh, effectOverride, subMesh) {\n        var _a;\n        // Std values\n        var storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\n        var effect = effectOverride !== null && effectOverride !== void 0 ? effectOverride : (storeEffectOnSubMeshes ? subMesh.effect : this.getEffect());\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        this.bindOnlyWorldMatrix(world, effectOverride);\n        var uniformBuffers = this._options.uniformBuffers;\n        var useSceneUBO = false;\n        if (effect && uniformBuffers && uniformBuffers.length > 0 && this.getScene().getEngine().supportsUniformBuffers) {\n            for (var i = 0; i < uniformBuffers.length; ++i) {\n                var bufferName = uniformBuffers[i];\n                switch (bufferName) {\n                    case \"Mesh\":\n                        if (mesh) {\n                            mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n                            mesh.transferToEffect(world);\n                        }\n                        break;\n                    case \"Scene\":\n                        MaterialHelper.BindSceneUniformBuffer(effect, this.getScene().getSceneUniformBuffer());\n                        this.getScene().finalizeSceneUbo();\n                        useSceneUBO = true;\n                        break;\n                }\n            }\n        }\n        var mustRebind = mesh && storeEffectOnSubMeshes ? this._mustRebind(this.getScene(), effect, mesh.visibility) : this.getScene().getCachedMaterial() !== this;\n        if (effect && mustRebind) {\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"view\") !== -1) {\n                effect.setMatrix(\"view\", this.getScene().getViewMatrix());\n            }\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"projection\") !== -1) {\n                effect.setMatrix(\"projection\", this.getScene().getProjectionMatrix());\n            }\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"viewProjection\") !== -1) {\n                effect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\n                if (this._multiview) {\n                    effect.setMatrix(\"viewProjectionR\", this.getScene()._transformMatrixR);\n                }\n            }\n            if (this.getScene().activeCamera && this._options.uniforms.indexOf(\"cameraPosition\") !== -1) {\n                effect.setVector3(\"cameraPosition\", this.getScene().activeCamera.globalPosition);\n            }\n            // Bones\n            MaterialHelper.BindBonesParameters(mesh, effect);\n            // Clip plane\n            MaterialHelper.BindClipPlane(effect, this.getScene());\n            var name_2;\n            // Texture\n            for (name_2 in this._textures) {\n                effect.setTexture(name_2, this._textures[name_2]);\n            }\n            // Texture arrays\n            for (name_2 in this._textureArrays) {\n                effect.setTextureArray(name_2, this._textureArrays[name_2]);\n            }\n            // External texture\n            for (name_2 in this._externalTextures) {\n                effect.setExternalTexture(name_2, this._externalTextures[name_2]);\n            }\n            // Int\n            for (name_2 in this._ints) {\n                effect.setInt(name_2, this._ints[name_2]);\n            }\n            // Float\n            for (name_2 in this._floats) {\n                effect.setFloat(name_2, this._floats[name_2]);\n            }\n            // Floats\n            for (name_2 in this._floatsArrays) {\n                effect.setArray(name_2, this._floatsArrays[name_2]);\n            }\n            // Color3\n            for (name_2 in this._colors3) {\n                effect.setColor3(name_2, this._colors3[name_2]);\n            }\n            // Color3Array\n            for (name_2 in this._colors3Arrays) {\n                effect.setArray3(name_2, this._colors3Arrays[name_2]);\n            }\n            // Color4\n            for (name_2 in this._colors4) {\n                var color = this._colors4[name_2];\n                effect.setFloat4(name_2, color.r, color.g, color.b, color.a);\n            }\n            // Color4Array\n            for (name_2 in this._colors4Arrays) {\n                effect.setArray4(name_2, this._colors4Arrays[name_2]);\n            }\n            // Vector2\n            for (name_2 in this._vectors2) {\n                effect.setVector2(name_2, this._vectors2[name_2]);\n            }\n            // Vector3\n            for (name_2 in this._vectors3) {\n                effect.setVector3(name_2, this._vectors3[name_2]);\n            }\n            // Vector4\n            for (name_2 in this._vectors4) {\n                effect.setVector4(name_2, this._vectors4[name_2]);\n            }\n            // Matrix\n            for (name_2 in this._matrices) {\n                effect.setMatrix(name_2, this._matrices[name_2]);\n            }\n            // MatrixArray\n            for (name_2 in this._matrixArrays) {\n                effect.setMatrices(name_2, this._matrixArrays[name_2]);\n            }\n            // Matrix 3x3\n            for (name_2 in this._matrices3x3) {\n                effect.setMatrix3x3(name_2, this._matrices3x3[name_2]);\n            }\n            // Matrix 2x2\n            for (name_2 in this._matrices2x2) {\n                effect.setMatrix2x2(name_2, this._matrices2x2[name_2]);\n            }\n            // Vector2Array\n            for (name_2 in this._vectors2Arrays) {\n                effect.setArray2(name_2, this._vectors2Arrays[name_2]);\n            }\n            // Vector3Array\n            for (name_2 in this._vectors3Arrays) {\n                effect.setArray3(name_2, this._vectors3Arrays[name_2]);\n            }\n            // Vector4Array\n            for (name_2 in this._vectors4Arrays) {\n                effect.setArray4(name_2, this._vectors4Arrays[name_2]);\n            }\n            // Uniform buffers\n            for (name_2 in this._uniformBuffers) {\n                var buffer = this._uniformBuffers[name_2].getBuffer();\n                if (buffer) {\n                    effect.bindUniformBuffer(buffer, name_2);\n                }\n            }\n            // Samplers\n            for (name_2 in this._textureSamplers) {\n                effect.setTextureSampler(name_2, this._textureSamplers[name_2]);\n            }\n            // Storage buffers\n            for (name_2 in this._storageBuffers) {\n                effect.setStorageBuffer(name_2, this._storageBuffers[name_2]);\n            }\n        }\n        if (effect && mesh && (mustRebind || !this.isFrozen)) {\n            // Morph targets\n            var manager = mesh.morphTargetManager;\n            if (manager && manager.numInfluencers > 0) {\n                MaterialHelper.BindMorphTargetParameters(mesh, effect);\n            }\n            var bvaManager = mesh.bakedVertexAnimationManager;\n            if (bvaManager && bvaManager.isEnabled) {\n                (_a = mesh.bakedVertexAnimationManager) === null || _a === void 0 ? void 0 : _a.bind(effect, this._effectUsesInstances);\n            }\n        }\n        this._afterBind(mesh, effect);\n    };\n    /**\n     * Gets the active textures from the material\n     * @returns an array of textures\n     */\n    ShaderMaterial.prototype.getActiveTextures = function () {\n        var activeTextures = _super.prototype.getActiveTextures.call(this);\n        for (var name_3 in this._textures) {\n            activeTextures.push(this._textures[name_3]);\n        }\n        for (var name_4 in this._textureArrays) {\n            var array = this._textureArrays[name_4];\n            for (var index = 0; index < array.length; index++) {\n                activeTextures.push(array[index]);\n            }\n        }\n        return activeTextures;\n    };\n    /**\n     * Specifies if the material uses a texture\n     * @param texture defines the texture to check against the material\n     * @returns a boolean specifying if the material uses the texture\n     */\n    ShaderMaterial.prototype.hasTexture = function (texture) {\n        if (_super.prototype.hasTexture.call(this, texture)) {\n            return true;\n        }\n        for (var name_5 in this._textures) {\n            if (this._textures[name_5] === texture) {\n                return true;\n            }\n        }\n        for (var name_6 in this._textureArrays) {\n            var array = this._textureArrays[name_6];\n            for (var index = 0; index < array.length; index++) {\n                if (array[index] === texture) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     * Makes a duplicate of the material, and gives it a new name\n     * @param name defines the new name for the duplicated material\n     * @returns the cloned material\n     */\n    ShaderMaterial.prototype.clone = function (name) {\n        var _this = this;\n        var result = SerializationHelper.Clone(function () { return new ShaderMaterial(name, _this.getScene(), _this._shaderPath, _this._options, _this._storeEffectOnSubMeshes); }, this);\n        result.name = name;\n        result.id = name;\n        // Shader code path\n        if (typeof result._shaderPath === \"object\") {\n            result._shaderPath = __assign({}, result._shaderPath);\n        }\n        // Options\n        this._options = __assign({}, this._options);\n        Object.keys(this._options).forEach(function (propName) {\n            var propValue = _this._options[propName];\n            if (Array.isArray(propValue)) {\n                _this._options[propName] = propValue.slice(0);\n            }\n        });\n        // Stencil\n        this.stencil.copyTo(result.stencil);\n        // Texture\n        for (var key in this._textures) {\n            result.setTexture(key, this._textures[key]);\n        }\n        // TextureArray\n        for (var key in this._textureArrays) {\n            result.setTextureArray(key, this._textureArrays[key]);\n        }\n        // External texture\n        for (var key in this._externalTextures) {\n            result.setExternalTexture(key, this._externalTextures[key]);\n        }\n        // Int\n        for (var key in this._ints) {\n            result.setInt(key, this._ints[key]);\n        }\n        // Float\n        for (var key in this._floats) {\n            result.setFloat(key, this._floats[key]);\n        }\n        // Floats\n        for (var key in this._floatsArrays) {\n            result.setFloats(key, this._floatsArrays[key]);\n        }\n        // Color3\n        for (var key in this._colors3) {\n            result.setColor3(key, this._colors3[key]);\n        }\n        // Color3Array\n        for (var key in this._colors3Arrays) {\n            result._colors3Arrays[key] = this._colors3Arrays[key];\n        }\n        // Color4\n        for (var key in this._colors4) {\n            result.setColor4(key, this._colors4[key]);\n        }\n        // Color4Array\n        for (var key in this._colors4Arrays) {\n            result._colors4Arrays[key] = this._colors4Arrays[key];\n        }\n        // Vector2\n        for (var key in this._vectors2) {\n            result.setVector2(key, this._vectors2[key]);\n        }\n        // Vector3\n        for (var key in this._vectors3) {\n            result.setVector3(key, this._vectors3[key]);\n        }\n        // Vector4\n        for (var key in this._vectors4) {\n            result.setVector4(key, this._vectors4[key]);\n        }\n        // Matrix\n        for (var key in this._matrices) {\n            result.setMatrix(key, this._matrices[key]);\n        }\n        // MatrixArray\n        for (var key in this._matrixArrays) {\n            result._matrixArrays[key] = this._matrixArrays[key].slice();\n        }\n        // Matrix 3x3\n        for (var key in this._matrices3x3) {\n            result.setMatrix3x3(key, this._matrices3x3[key]);\n        }\n        // Matrix 2x2\n        for (var key in this._matrices2x2) {\n            result.setMatrix2x2(key, this._matrices2x2[key]);\n        }\n        // Vector2Array\n        for (var key in this._vectors2Arrays) {\n            result.setArray2(key, this._vectors2Arrays[key]);\n        }\n        // Vector3Array\n        for (var key in this._vectors3Arrays) {\n            result.setArray3(key, this._vectors3Arrays[key]);\n        }\n        // Vector4Array\n        for (var key in this._vectors4Arrays) {\n            result.setArray4(key, this._vectors4Arrays[key]);\n        }\n        // Uniform buffers\n        for (var key in this._uniformBuffers) {\n            result.setUniformBuffer(key, this._uniformBuffers[key]);\n        }\n        // Samplers\n        for (var key in this._textureSamplers) {\n            result.setTextureSampler(key, this._textureSamplers[key]);\n        }\n        // Storag buffers\n        for (var key in this._storageBuffers) {\n            result.setStorageBuffer(key, this._storageBuffers[key]);\n        }\n        return result;\n    };\n    /**\n     * Disposes the material\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\n     * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\n     */\n    ShaderMaterial.prototype.dispose = function (forceDisposeEffect, forceDisposeTextures, notBoundToMesh) {\n        if (forceDisposeTextures) {\n            var name_7;\n            for (name_7 in this._textures) {\n                this._textures[name_7].dispose();\n            }\n            for (name_7 in this._textureArrays) {\n                var array = this._textureArrays[name_7];\n                for (var index = 0; index < array.length; index++) {\n                    array[index].dispose();\n                }\n            }\n        }\n        this._textures = {};\n        _super.prototype.dispose.call(this, forceDisposeEffect, forceDisposeTextures, notBoundToMesh);\n    };\n    /**\n     * Serializes this material in a JSON representation\n     * @returns the serialized material object\n     */\n    ShaderMaterial.prototype.serialize = function () {\n        var serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"BABYLON.ShaderMaterial\";\n        serializationObject.uniqueId = this.uniqueId;\n        serializationObject.options = this._options;\n        serializationObject.shaderPath = this._shaderPath;\n        serializationObject.storeEffectOnSubMeshes = this._storeEffectOnSubMeshes;\n        var name;\n        // Stencil\n        serializationObject.stencil = this.stencil.serialize();\n        // Texture\n        serializationObject.textures = {};\n        for (name in this._textures) {\n            serializationObject.textures[name] = this._textures[name].serialize();\n        }\n        // Texture arrays\n        serializationObject.textureArrays = {};\n        for (name in this._textureArrays) {\n            serializationObject.textureArrays[name] = [];\n            var array = this._textureArrays[name];\n            for (var index = 0; index < array.length; index++) {\n                serializationObject.textureArrays[name].push(array[index].serialize());\n            }\n        }\n        // Int\n        serializationObject.ints = {};\n        for (name in this._ints) {\n            serializationObject.ints[name] = this._ints[name];\n        }\n        // Float\n        serializationObject.floats = {};\n        for (name in this._floats) {\n            serializationObject.floats[name] = this._floats[name];\n        }\n        // Floats\n        serializationObject.FloatArrays = {};\n        for (name in this._floatsArrays) {\n            serializationObject.FloatArrays[name] = this._floatsArrays[name];\n        }\n        // Color3\n        serializationObject.colors3 = {};\n        for (name in this._colors3) {\n            serializationObject.colors3[name] = this._colors3[name].asArray();\n        }\n        // Color3 array\n        serializationObject.colors3Arrays = {};\n        for (name in this._colors3Arrays) {\n            serializationObject.colors3Arrays[name] = this._colors3Arrays[name];\n        }\n        // Color4\n        serializationObject.colors4 = {};\n        for (name in this._colors4) {\n            serializationObject.colors4[name] = this._colors4[name].asArray();\n        }\n        // Color4 array\n        serializationObject.colors4Arrays = {};\n        for (name in this._colors4Arrays) {\n            serializationObject.colors4Arrays[name] = this._colors4Arrays[name];\n        }\n        // Vector2\n        serializationObject.vectors2 = {};\n        for (name in this._vectors2) {\n            serializationObject.vectors2[name] = this._vectors2[name].asArray();\n        }\n        // Vector3\n        serializationObject.vectors3 = {};\n        for (name in this._vectors3) {\n            serializationObject.vectors3[name] = this._vectors3[name].asArray();\n        }\n        // Vector4\n        serializationObject.vectors4 = {};\n        for (name in this._vectors4) {\n            serializationObject.vectors4[name] = this._vectors4[name].asArray();\n        }\n        // Matrix\n        serializationObject.matrices = {};\n        for (name in this._matrices) {\n            serializationObject.matrices[name] = this._matrices[name].asArray();\n        }\n        // MatrixArray\n        serializationObject.matrixArray = {};\n        for (name in this._matrixArrays) {\n            serializationObject.matrixArray[name] = this._matrixArrays[name];\n        }\n        // Matrix 3x3\n        serializationObject.matrices3x3 = {};\n        for (name in this._matrices3x3) {\n            serializationObject.matrices3x3[name] = this._matrices3x3[name];\n        }\n        // Matrix 2x2\n        serializationObject.matrices2x2 = {};\n        for (name in this._matrices2x2) {\n            serializationObject.matrices2x2[name] = this._matrices2x2[name];\n        }\n        // Vector2Array\n        serializationObject.vectors2Arrays = {};\n        for (name in this._vectors2Arrays) {\n            serializationObject.vectors2Arrays[name] = this._vectors2Arrays[name];\n        }\n        // Vector3Array\n        serializationObject.vectors3Arrays = {};\n        for (name in this._vectors3Arrays) {\n            serializationObject.vectors3Arrays[name] = this._vectors3Arrays[name];\n        }\n        // Vector4Array\n        serializationObject.vectors4Arrays = {};\n        for (name in this._vectors4Arrays) {\n            serializationObject.vectors4Arrays[name] = this._vectors4Arrays[name];\n        }\n        return serializationObject;\n    };\n    /**\n     * Creates a shader material from parsed shader material data\n     * @param source defines the JSON representation of the material\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a new material\n     */\n    ShaderMaterial.Parse = function (source, scene, rootUrl) {\n        var material = SerializationHelper.Parse(function () { return new ShaderMaterial(source.name, scene, source.shaderPath, source.options, source.storeEffectOnSubMeshes); }, source, scene, rootUrl);\n        var name;\n        // Stencil\n        if (source.stencil) {\n            material.stencil.parse(source.stencil, scene, rootUrl);\n        }\n        // Texture\n        for (name in source.textures) {\n            material.setTexture(name, Texture.Parse(source.textures[name], scene, rootUrl));\n        }\n        // Texture arrays\n        for (name in source.textureArrays) {\n            var array = source.textureArrays[name];\n            var textureArray = new Array();\n            for (var index = 0; index < array.length; index++) {\n                textureArray.push(Texture.Parse(array[index], scene, rootUrl));\n            }\n            material.setTextureArray(name, textureArray);\n        }\n        // Int\n        for (name in source.ints) {\n            material.setInt(name, source.ints[name]);\n        }\n        // Float\n        for (name in source.floats) {\n            material.setFloat(name, source.floats[name]);\n        }\n        // Floats\n        for (name in source.floatsArrays) {\n            material.setFloats(name, source.floatsArrays[name]);\n        }\n        // Color3\n        for (name in source.colors3) {\n            material.setColor3(name, Color3.FromArray(source.colors3[name]));\n        }\n        // Color3 arrays\n        for (name in source.colors3Arrays) {\n            var colors = source.colors3Arrays[name]\n                .reduce(function (arr, num, i) {\n                if (i % 3 === 0) {\n                    arr.push([num]);\n                }\n                else {\n                    arr[arr.length - 1].push(num);\n                }\n                return arr;\n            }, [])\n                .map(function (color) { return Color3.FromArray(color); });\n            material.setColor3Array(name, colors);\n        }\n        // Color4\n        for (name in source.colors4) {\n            material.setColor4(name, Color4.FromArray(source.colors4[name]));\n        }\n        // Color4 arrays\n        for (name in source.colors4Arrays) {\n            var colors = source.colors4Arrays[name]\n                .reduce(function (arr, num, i) {\n                if (i % 4 === 0) {\n                    arr.push([num]);\n                }\n                else {\n                    arr[arr.length - 1].push(num);\n                }\n                return arr;\n            }, [])\n                .map(function (color) { return Color4.FromArray(color); });\n            material.setColor4Array(name, colors);\n        }\n        // Vector2\n        for (name in source.vectors2) {\n            material.setVector2(name, Vector2.FromArray(source.vectors2[name]));\n        }\n        // Vector3\n        for (name in source.vectors3) {\n            material.setVector3(name, Vector3.FromArray(source.vectors3[name]));\n        }\n        // Vector4\n        for (name in source.vectors4) {\n            material.setVector4(name, Vector4.FromArray(source.vectors4[name]));\n        }\n        // Matrix\n        for (name in source.matrices) {\n            material.setMatrix(name, Matrix.FromArray(source.matrices[name]));\n        }\n        // MatrixArray\n        for (name in source.matrixArray) {\n            material._matrixArrays[name] = new Float32Array(source.matrixArray[name]);\n        }\n        // Matrix 3x3\n        for (name in source.matrices3x3) {\n            material.setMatrix3x3(name, source.matrices3x3[name]);\n        }\n        // Matrix 2x2\n        for (name in source.matrices2x2) {\n            material.setMatrix2x2(name, source.matrices2x2[name]);\n        }\n        // Vector2Array\n        for (name in source.vectors2Arrays) {\n            material.setArray2(name, source.vectors2Arrays[name]);\n        }\n        // Vector3Array\n        for (name in source.vectors3Arrays) {\n            material.setArray3(name, source.vectors3Arrays[name]);\n        }\n        // Vector4Array\n        for (name in source.vectors4Arrays) {\n            material.setArray4(name, source.vectors4Arrays[name]);\n        }\n        return material;\n    };\n    /**\n     * Creates a new ShaderMaterial from a snippet saved in a remote file\n     * @param name defines the name of the ShaderMaterial to create (can be null or empty to use the one from the json data)\n     * @param url defines the url to load from\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a promise that will resolve to the new ShaderMaterial\n     */\n    ShaderMaterial.ParseFromFileAsync = function (name, url, scene, rootUrl) {\n        var _this = this;\n        if (rootUrl === void 0) { rootUrl = \"\"; }\n        return new Promise(function (resolve, reject) {\n            var request = new WebRequest();\n            request.addEventListener(\"readystatechange\", function () {\n                if (request.readyState == 4) {\n                    if (request.status == 200) {\n                        var serializationObject = JSON.parse(request.responseText);\n                        var output = _this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\n                        if (name) {\n                            output.name = name;\n                        }\n                        resolve(output);\n                    }\n                    else {\n                        reject(\"Unable to load the ShaderMaterial\");\n                    }\n                }\n            });\n            request.open(\"GET\", url);\n            request.send();\n        });\n    };\n    /**\n     * Creates a ShaderMaterial from a snippet saved by the Inspector\n     * @param snippetId defines the snippet to load\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a promise that will resolve to the new ShaderMaterial\n     */\n    ShaderMaterial.CreateFromSnippetAsync = function (snippetId, scene, rootUrl) {\n        var _this = this;\n        if (rootUrl === void 0) { rootUrl = \"\"; }\n        return new Promise(function (resolve, reject) {\n            var request = new WebRequest();\n            request.addEventListener(\"readystatechange\", function () {\n                if (request.readyState == 4) {\n                    if (request.status == 200) {\n                        var snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\n                        var serializationObject = JSON.parse(snippet.shaderMaterial);\n                        var output = _this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\n                        output.snippetId = snippetId;\n                        resolve(output);\n                    }\n                    else {\n                        reject(\"Unable to load the snippet \" + snippetId);\n                    }\n                }\n            });\n            request.open(\"GET\", _this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\n            request.send();\n        });\n    };\n    /** Define the Url to load snippets */\n    ShaderMaterial.SnippetUrl = `https://snippet.babylonjs.com`;\n    return ShaderMaterial;\n}(PushMaterial));\nexport { ShaderMaterial };\nRegisterClass(\"BABYLON.ShaderMaterial\", ShaderMaterial);\n//# sourceMappingURL=shaderMaterial.js.map","import { __decorate, __extends } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { serialize, SerializationHelper, serializeAsColor3, expandToProperty, serializeAsFresnelParameters, serializeAsTexture } from \"../Misc/decorators.js\";\nimport { SmartArray } from \"../Misc/smartArray.js\";\nimport { Scene } from \"../scene.js\";\nimport { Matrix } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { PrePassConfiguration } from \"./prePassConfiguration.js\";\nimport { ImageProcessingConfiguration } from \"./imageProcessingConfiguration.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { MaterialPluginEvent } from \"./materialPluginEvent.js\";\nimport { MaterialDefines } from \"../Materials/materialDefines.js\";\nimport { PushMaterial } from \"./pushMaterial.js\";\nimport { MaterialHelper } from \"./materialHelper.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { MaterialFlags } from \"./materialFlags.js\";\nimport \"../Shaders/default.fragment.js\";\nimport \"../Shaders/default.vertex.js\";\n\nimport { EffectFallbacks } from \"./effectFallbacks.js\";\nimport { DetailMapConfiguration } from \"./material.detailMapConfiguration.js\";\nvar onCreatedEffectParameters = { effect: null, subMesh: null };\n/** @hidden */\nvar StandardMaterialDefines = /** @class */ (function (_super) {\n    __extends(StandardMaterialDefines, _super);\n    /**\n     * Initializes the Standard Material defines.\n     * @param externalProperties The external properties\n     */\n    function StandardMaterialDefines(externalProperties) {\n        var _this = _super.call(this, externalProperties) || this;\n        _this.MAINUV1 = false;\n        _this.MAINUV2 = false;\n        _this.MAINUV3 = false;\n        _this.MAINUV4 = false;\n        _this.MAINUV5 = false;\n        _this.MAINUV6 = false;\n        _this.DIFFUSE = false;\n        _this.DIFFUSEDIRECTUV = 0;\n        _this.BAKED_VERTEX_ANIMATION_TEXTURE = false;\n        _this.AMBIENT = false;\n        _this.AMBIENTDIRECTUV = 0;\n        _this.OPACITY = false;\n        _this.OPACITYDIRECTUV = 0;\n        _this.OPACITYRGB = false;\n        _this.REFLECTION = false;\n        _this.EMISSIVE = false;\n        _this.EMISSIVEDIRECTUV = 0;\n        _this.SPECULAR = false;\n        _this.SPECULARDIRECTUV = 0;\n        _this.BUMP = false;\n        _this.BUMPDIRECTUV = 0;\n        _this.PARALLAX = false;\n        _this.PARALLAXOCCLUSION = false;\n        _this.SPECULAROVERALPHA = false;\n        _this.CLIPPLANE = false;\n        _this.CLIPPLANE2 = false;\n        _this.CLIPPLANE3 = false;\n        _this.CLIPPLANE4 = false;\n        _this.CLIPPLANE5 = false;\n        _this.CLIPPLANE6 = false;\n        _this.ALPHATEST = false;\n        _this.DEPTHPREPASS = false;\n        _this.ALPHAFROMDIFFUSE = false;\n        _this.POINTSIZE = false;\n        _this.FOG = false;\n        _this.SPECULARTERM = false;\n        _this.DIFFUSEFRESNEL = false;\n        _this.OPACITYFRESNEL = false;\n        _this.REFLECTIONFRESNEL = false;\n        _this.REFRACTIONFRESNEL = false;\n        _this.EMISSIVEFRESNEL = false;\n        _this.FRESNEL = false;\n        _this.NORMAL = false;\n        _this.TANGENT = false;\n        _this.UV1 = false;\n        _this.UV2 = false;\n        _this.UV3 = false;\n        _this.UV4 = false;\n        _this.UV5 = false;\n        _this.UV6 = false;\n        _this.VERTEXCOLOR = false;\n        _this.VERTEXALPHA = false;\n        _this.NUM_BONE_INFLUENCERS = 0;\n        _this.BonesPerMesh = 0;\n        _this.BONETEXTURE = false;\n        _this.BONES_VELOCITY_ENABLED = false;\n        _this.INSTANCES = false;\n        _this.THIN_INSTANCES = false;\n        _this.INSTANCESCOLOR = false;\n        _this.GLOSSINESS = false;\n        _this.ROUGHNESS = false;\n        _this.EMISSIVEASILLUMINATION = false;\n        _this.LINKEMISSIVEWITHDIFFUSE = false;\n        _this.REFLECTIONFRESNELFROMSPECULAR = false;\n        _this.LIGHTMAP = false;\n        _this.LIGHTMAPDIRECTUV = 0;\n        _this.OBJECTSPACE_NORMALMAP = false;\n        _this.USELIGHTMAPASSHADOWMAP = false;\n        _this.REFLECTIONMAP_3D = false;\n        _this.REFLECTIONMAP_SPHERICAL = false;\n        _this.REFLECTIONMAP_PLANAR = false;\n        _this.REFLECTIONMAP_CUBIC = false;\n        _this.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\n        _this.USE_LOCAL_REFRACTIONMAP_CUBIC = false;\n        _this.REFLECTIONMAP_PROJECTION = false;\n        _this.REFLECTIONMAP_SKYBOX = false;\n        _this.REFLECTIONMAP_EXPLICIT = false;\n        _this.REFLECTIONMAP_EQUIRECTANGULAR = false;\n        _this.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n        _this.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n        _this.REFLECTIONMAP_OPPOSITEZ = false;\n        _this.INVERTCUBICMAP = false;\n        _this.LOGARITHMICDEPTH = false;\n        _this.REFRACTION = false;\n        _this.REFRACTIONMAP_3D = false;\n        _this.REFLECTIONOVERALPHA = false;\n        _this.TWOSIDEDLIGHTING = false;\n        _this.SHADOWFLOAT = false;\n        _this.MORPHTARGETS = false;\n        _this.MORPHTARGETS_NORMAL = false;\n        _this.MORPHTARGETS_TANGENT = false;\n        _this.MORPHTARGETS_UV = false;\n        _this.NUM_MORPH_INFLUENCERS = 0;\n        _this.MORPHTARGETS_TEXTURE = false;\n        _this.NONUNIFORMSCALING = false; // https://playground.babylonjs.com#V6DWIH\n        _this.PREMULTIPLYALPHA = false; // https://playground.babylonjs.com#LNVJJ7\n        _this.ALPHATEST_AFTERALLALPHACOMPUTATIONS = false;\n        _this.ALPHABLEND = true;\n        _this.PREPASS = false;\n        _this.PREPASS_IRRADIANCE = false;\n        _this.PREPASS_IRRADIANCE_INDEX = -1;\n        _this.PREPASS_ALBEDO_SQRT = false;\n        _this.PREPASS_ALBEDO_SQRT_INDEX = -1;\n        _this.PREPASS_DEPTH = false;\n        _this.PREPASS_DEPTH_INDEX = -1;\n        _this.PREPASS_NORMAL = false;\n        _this.PREPASS_NORMAL_INDEX = -1;\n        _this.PREPASS_POSITION = false;\n        _this.PREPASS_POSITION_INDEX = -1;\n        _this.PREPASS_VELOCITY = false;\n        _this.PREPASS_VELOCITY_INDEX = -1;\n        _this.PREPASS_REFLECTIVITY = false;\n        _this.PREPASS_REFLECTIVITY_INDEX = -1;\n        _this.SCENE_MRT_COUNT = 0;\n        _this.RGBDLIGHTMAP = false;\n        _this.RGBDREFLECTION = false;\n        _this.RGBDREFRACTION = false;\n        _this.IMAGEPROCESSING = false;\n        _this.VIGNETTE = false;\n        _this.VIGNETTEBLENDMODEMULTIPLY = false;\n        _this.VIGNETTEBLENDMODEOPAQUE = false;\n        _this.TONEMAPPING = false;\n        _this.TONEMAPPING_ACES = false;\n        _this.CONTRAST = false;\n        _this.COLORCURVES = false;\n        _this.COLORGRADING = false;\n        _this.COLORGRADING3D = false;\n        _this.SAMPLER3DGREENDEPTH = false;\n        _this.SAMPLER3DBGRMAP = false;\n        _this.IMAGEPROCESSINGPOSTPROCESS = false;\n        _this.SKIPFINALCOLORCLAMP = false;\n        _this.MULTIVIEW = false;\n        _this.ORDER_INDEPENDENT_TRANSPARENCY = false;\n        _this.ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\n        /**\n         * If the reflection texture on this material is in linear color space\n         * @hidden\n         */\n        _this.IS_REFLECTION_LINEAR = false;\n        /**\n         * If the refraction texture on this material is in linear color space\n         * @hidden\n         */\n        _this.IS_REFRACTION_LINEAR = false;\n        _this.EXPOSURE = false;\n        _this.rebuild();\n        return _this;\n    }\n    StandardMaterialDefines.prototype.setReflectionMode = function (modeToEnable) {\n        var modes = [\n            \"REFLECTIONMAP_CUBIC\",\n            \"REFLECTIONMAP_EXPLICIT\",\n            \"REFLECTIONMAP_PLANAR\",\n            \"REFLECTIONMAP_PROJECTION\",\n            \"REFLECTIONMAP_PROJECTION\",\n            \"REFLECTIONMAP_SKYBOX\",\n            \"REFLECTIONMAP_SPHERICAL\",\n            \"REFLECTIONMAP_EQUIRECTANGULAR\",\n            \"REFLECTIONMAP_EQUIRECTANGULAR_FIXED\",\n            \"REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\",\n        ];\n        for (var _i = 0, modes_1 = modes; _i < modes_1.length; _i++) {\n            var mode = modes_1[_i];\n            this[mode] = mode === modeToEnable;\n        }\n    };\n    return StandardMaterialDefines;\n}(MaterialDefines));\nexport { StandardMaterialDefines };\n/**\n * This is the default material used in Babylon. It is the best trade off between quality\n * and performances.\n * @see https://doc.babylonjs.com/babylon101/materials\n */\nvar StandardMaterial = /** @class */ (function (_super) {\n    __extends(StandardMaterial, _super);\n    /**\n     * Instantiates a new standard material.\n     * This is the default material used in Babylon. It is the best trade off between quality\n     * and performances.\n     * @see https://doc.babylonjs.com/babylon101/materials\n     * @param name Define the name of the material in the scene\n     * @param scene Define the scene the material belong to\n     */\n    function StandardMaterial(name, scene) {\n        var _this = _super.call(this, name, scene) || this;\n        _this._diffuseTexture = null;\n        _this._ambientTexture = null;\n        _this._opacityTexture = null;\n        _this._reflectionTexture = null;\n        _this._emissiveTexture = null;\n        _this._specularTexture = null;\n        _this._bumpTexture = null;\n        _this._lightmapTexture = null;\n        _this._refractionTexture = null;\n        /**\n         * The color of the material lit by the environmental background lighting.\n         * @see https://doc.babylonjs.com/babylon101/materials#ambient-color-example\n         */\n        _this.ambientColor = new Color3(0, 0, 0);\n        /**\n         * The basic color of the material as viewed under a light.\n         */\n        _this.diffuseColor = new Color3(1, 1, 1);\n        /**\n         * Define how the color and intensity of the highlight given by the light in the material.\n         */\n        _this.specularColor = new Color3(1, 1, 1);\n        /**\n         * Define the color of the material as if self lit.\n         * This will be mixed in the final result even in the absence of light.\n         */\n        _this.emissiveColor = new Color3(0, 0, 0);\n        /**\n         * Defines how sharp are the highlights in the material.\n         * The bigger the value the sharper giving a more glossy feeling to the result.\n         * Reversely, the smaller the value the blurrier giving a more rough feeling to the result.\n         */\n        _this.specularPower = 64;\n        _this._useAlphaFromDiffuseTexture = false;\n        _this._useEmissiveAsIllumination = false;\n        _this._linkEmissiveWithDiffuse = false;\n        _this._useSpecularOverAlpha = false;\n        _this._useReflectionOverAlpha = false;\n        _this._disableLighting = false;\n        _this._useObjectSpaceNormalMap = false;\n        _this._useParallax = false;\n        _this._useParallaxOcclusion = false;\n        /**\n         * Apply a scaling factor that determine which \"depth\" the height map should reprensent. A value between 0.05 and 0.1 is reasonnable in Parallax, you can reach 0.2 using Parallax Occlusion.\n         */\n        _this.parallaxScaleBias = 0.05;\n        _this._roughness = 0;\n        /**\n         * In case of refraction, define the value of the index of refraction.\n         * @see https://doc.babylonjs.com/how_to/reflect#how-to-obtain-reflections-and-refractions\n         */\n        _this.indexOfRefraction = 0.98;\n        /**\n         * Invert the refraction texture alongside the y axis.\n         * It can be useful with procedural textures or probe for instance.\n         * @see https://doc.babylonjs.com/how_to/reflect#how-to-obtain-reflections-and-refractions\n         */\n        _this.invertRefractionY = true;\n        /**\n         * Defines the alpha limits in alpha test mode.\n         */\n        _this.alphaCutOff = 0.4;\n        _this._useLightmapAsShadowmap = false;\n        _this._useReflectionFresnelFromSpecular = false;\n        _this._useGlossinessFromSpecularMapAlpha = false;\n        _this._maxSimultaneousLights = 4;\n        _this._invertNormalMapX = false;\n        _this._invertNormalMapY = false;\n        _this._twoSidedLighting = false;\n        _this._renderTargets = new SmartArray(16);\n        _this._worldViewProjectionMatrix = Matrix.Zero();\n        _this._globalAmbientColor = new Color3(0, 0, 0);\n        _this._cacheHasRenderTargetTextures = false;\n        _this.detailMap = new DetailMapConfiguration(_this);\n        // Setup the default processing configuration to the scene.\n        _this._attachImageProcessingConfiguration(null);\n        _this.prePassConfiguration = new PrePassConfiguration();\n        _this.getRenderTargetTextures = function () {\n            _this._renderTargets.reset();\n            if (StandardMaterial.ReflectionTextureEnabled && _this._reflectionTexture && _this._reflectionTexture.isRenderTarget) {\n                _this._renderTargets.push(_this._reflectionTexture);\n            }\n            if (StandardMaterial.RefractionTextureEnabled && _this._refractionTexture && _this._refractionTexture.isRenderTarget) {\n                _this._renderTargets.push(_this._refractionTexture);\n            }\n            _this._eventInfo.renderTargets = _this._renderTargets;\n            _this._callbackPluginEventFillRenderTargetTextures(_this._eventInfo);\n            return _this._renderTargets;\n        };\n        return _this;\n    }\n    Object.defineProperty(StandardMaterial.prototype, \"imageProcessingConfiguration\", {\n        /**\n         * Gets the image processing configuration used either in this material.\n         */\n        get: function () {\n            return this._imageProcessingConfiguration;\n        },\n        /**\n         * Sets the Default image processing configuration used either in the this material.\n         *\n         * If sets to null, the scene one is in use.\n         */\n        set: function (value) {\n            this._attachImageProcessingConfiguration(value);\n            // Ensure the effect will be rebuilt.\n            this._markAllSubMeshesAsTexturesDirty();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Attaches a new image processing configuration to the Standard Material.\n     * @param configuration\n     */\n    StandardMaterial.prototype._attachImageProcessingConfiguration = function (configuration) {\n        var _this = this;\n        if (configuration === this._imageProcessingConfiguration) {\n            return;\n        }\n        // Detaches observer\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        // Pick the scene configuration if needed\n        if (!configuration) {\n            this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\n        }\n        else {\n            this._imageProcessingConfiguration = configuration;\n        }\n        // Attaches observer\n        if (this._imageProcessingConfiguration) {\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(function () {\n                _this._markAllSubMeshesAsImageProcessingDirty();\n            });\n        }\n    };\n    Object.defineProperty(StandardMaterial.prototype, \"isPrePassCapable\", {\n        /**\n         * Can this material render to prepass\n         */\n        get: function () {\n            return !this.disableDepthWrite;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial.prototype, \"cameraColorCurvesEnabled\", {\n        /**\n         * Gets whether the color curves effect is enabled.\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.colorCurvesEnabled;\n        },\n        /**\n         * Sets whether the color curves effect is enabled.\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.colorCurvesEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial.prototype, \"cameraColorGradingEnabled\", {\n        /**\n         * Gets whether the color grading effect is enabled.\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.colorGradingEnabled;\n        },\n        /**\n         * Gets whether the color grading effect is enabled.\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.colorGradingEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial.prototype, \"cameraToneMappingEnabled\", {\n        /**\n         * Gets whether tonemapping is enabled or not.\n         */\n        get: function () {\n            return this._imageProcessingConfiguration.toneMappingEnabled;\n        },\n        /**\n         * Sets whether tonemapping is enabled or not\n         */\n        set: function (value) {\n            this._imageProcessingConfiguration.toneMappingEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial.prototype, \"cameraExposure\", {\n        /**\n         * The camera exposure used on this material.\n         * This property is here and not in the camera to allow controlling exposure without full screen post process.\n         * This corresponds to a photographic exposure.\n         */\n        get: function () {\n            return this._imageProcessingConfiguration.exposure;\n        },\n        /**\n         * The camera exposure used on this material.\n         * This property is here and not in the camera to allow controlling exposure without full screen post process.\n         * This corresponds to a photographic exposure.\n         */\n        set: function (value) {\n            this._imageProcessingConfiguration.exposure = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial.prototype, \"cameraContrast\", {\n        /**\n         * Gets The camera contrast used on this material.\n         */\n        get: function () {\n            return this._imageProcessingConfiguration.contrast;\n        },\n        /**\n         * Sets The camera contrast used on this material.\n         */\n        set: function (value) {\n            this._imageProcessingConfiguration.contrast = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial.prototype, \"cameraColorGradingTexture\", {\n        /**\n         * Gets the Color Grading 2D Lookup Texture.\n         */\n        get: function () {\n            return this._imageProcessingConfiguration.colorGradingTexture;\n        },\n        /**\n         * Sets the Color Grading 2D Lookup Texture.\n         */\n        set: function (value) {\n            this._imageProcessingConfiguration.colorGradingTexture = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial.prototype, \"cameraColorCurves\", {\n        /**\n         * The color grading curves provide additional color adjustmnent that is applied after any color grading transform (3D LUT).\n         * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\n         * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\n         * corresponding to low luminance, medium luminance, and high luminance areas respectively.\n         */\n        get: function () {\n            return this._imageProcessingConfiguration.colorCurves;\n        },\n        /**\n         * The color grading curves provide additional color adjustment that is applied after any color grading transform (3D LUT).\n         * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\n         * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\n         * corresponding to low luminance, medium luminance, and high luminance areas respectively.\n         */\n        set: function (value) {\n            this._imageProcessingConfiguration.colorCurves = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial.prototype, \"canRenderToMRT\", {\n        /**\n         * Can this material render to several textures at once\n         */\n        get: function () {\n            return true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial.prototype, \"hasRenderTargetTextures\", {\n        /**\n         * Gets a boolean indicating that current material needs to register RTT\n         */\n        get: function () {\n            if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n                return true;\n            }\n            if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\n                return true;\n            }\n            return this._cacheHasRenderTargetTextures;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the current class name of the material e.g. \"StandardMaterial\"\n     * Mainly use in serialization.\n     * @returns the class name\n     */\n    StandardMaterial.prototype.getClassName = function () {\n        return \"StandardMaterial\";\n    };\n    Object.defineProperty(StandardMaterial.prototype, \"useLogarithmicDepth\", {\n        /**\n         * In case the depth buffer does not allow enough depth precision for your scene (might be the case in large scenes)\n         * You can try switching to logarithmic depth.\n         * @see https://doc.babylonjs.com/how_to/using_logarithmic_depth_buffer\n         */\n        get: function () {\n            return this._useLogarithmicDepth;\n        },\n        set: function (value) {\n            this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\n            this._markAllSubMeshesAsMiscDirty();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Specifies if the material will require alpha blending\n     * @returns a boolean specifying if alpha blending is needed\n     */\n    StandardMaterial.prototype.needAlphaBlending = function () {\n        if (this._disableAlphaBlending) {\n            return false;\n        }\n        return (this.alpha < 1.0 ||\n            this._opacityTexture != null ||\n            this._shouldUseAlphaFromDiffuseTexture() ||\n            (this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled));\n    };\n    /**\n     * Specifies if this material should be rendered in alpha test mode\n     * @returns a boolean specifying if an alpha test is needed.\n     */\n    StandardMaterial.prototype.needAlphaTesting = function () {\n        if (this._forceAlphaTest) {\n            return true;\n        }\n        return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === Material.MATERIAL_ALPHATEST);\n    };\n    /**\n     * Specifies whether or not the alpha value of the diffuse texture should be used for alpha blending.\n     */\n    StandardMaterial.prototype._shouldUseAlphaFromDiffuseTexture = function () {\n        return this._diffuseTexture != null && this._diffuseTexture.hasAlpha && this._useAlphaFromDiffuseTexture && this._transparencyMode !== Material.MATERIAL_OPAQUE;\n    };\n    /**\n     * Specifies whether or not there is a usable alpha channel for transparency.\n     */\n    StandardMaterial.prototype._hasAlphaChannel = function () {\n        return (this._diffuseTexture != null && this._diffuseTexture.hasAlpha) || this._opacityTexture != null;\n    };\n    /**\n     * Get the texture used for alpha test purpose.\n     * @returns the diffuse texture in case of the standard material.\n     */\n    StandardMaterial.prototype.getAlphaTestTexture = function () {\n        return this._diffuseTexture;\n    };\n    /**\n     * Get if the submesh is ready to be used and all its information available.\n     * Child classes can use it to update shaders\n     * @param mesh defines the mesh to check\n     * @param subMesh defines which submesh to check\n     * @param useInstances specifies that instances should be used\n     * @returns a boolean indicating that the submesh is ready or not\n     */\n    StandardMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh, useInstances) {\n        if (useInstances === void 0) { useInstances = false; }\n        if (!this._uniformBufferLayoutBuilt) {\n            this.buildUniformLayout();\n        }\n        if (subMesh.effect && this.isFrozen) {\n            if (subMesh.effect._wasPreviouslyReady) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\n            subMesh.materialDefines = new StandardMaterialDefines(this._eventInfo.defineNames);\n        }\n        var scene = this.getScene();\n        var defines = subMesh.materialDefines;\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        var engine = scene.getEngine();\n        // Lights\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\n        // Multiview\n        MaterialHelper.PrepareDefinesForMultiview(scene, defines);\n        // PrePass\n        var oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\n        MaterialHelper.PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\n        // Order independant transparency\n        MaterialHelper.PrepareDefinesForOIT(scene, defines, oit);\n        // Textures\n        if (defines._areTexturesDirty) {\n            this._eventInfo.hasRenderTargetTextures = false;\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\n            defines._needUVs = false;\n            for (var i = 1; i <= 6; ++i) {\n                defines[\"MAINUV\" + i] = false;\n            }\n            if (scene.texturesEnabled) {\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                    if (!this._diffuseTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._diffuseTexture, defines, \"DIFFUSE\");\n                    }\n                }\n                else {\n                    defines.DIFFUSE = false;\n                }\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\n                    if (!this._ambientTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\n                    }\n                }\n                else {\n                    defines.AMBIENT = false;\n                }\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\n                    if (!this._opacityTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\n                        defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\n                    }\n                }\n                else {\n                    defines.OPACITY = false;\n                }\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\n                    if (!this._reflectionTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        defines._needNormals = true;\n                        defines.REFLECTION = true;\n                        defines.ROUGHNESS = this._roughness > 0;\n                        defines.REFLECTIONOVERALPHA = this._useReflectionOverAlpha;\n                        defines.INVERTCUBICMAP = this._reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE;\n                        defines.REFLECTIONMAP_3D = this._reflectionTexture.isCube;\n                        defines.REFLECTIONMAP_OPPOSITEZ =\n                            defines.REFLECTIONMAP_3D && this.getScene().useRightHandedSystem ? !this._reflectionTexture.invertZ : this._reflectionTexture.invertZ;\n                        defines.RGBDREFLECTION = this._reflectionTexture.isRGBD;\n                        switch (this._reflectionTexture.coordinatesMode) {\n                            case Texture.EXPLICIT_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_EXPLICIT\");\n                                break;\n                            case Texture.PLANAR_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_PLANAR\");\n                                break;\n                            case Texture.PROJECTION_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_PROJECTION\");\n                                break;\n                            case Texture.SKYBOX_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_SKYBOX\");\n                                break;\n                            case Texture.SPHERICAL_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_SPHERICAL\");\n                                break;\n                            case Texture.EQUIRECTANGULAR_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_EQUIRECTANGULAR\");\n                                break;\n                            case Texture.FIXED_EQUIRECTANGULAR_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_EQUIRECTANGULAR_FIXED\");\n                                break;\n                            case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\n                                defines.setReflectionMode(\"REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\");\n                                break;\n                            case Texture.CUBIC_MODE:\n                            case Texture.INVCUBIC_MODE:\n                            default:\n                                defines.setReflectionMode(\"REFLECTIONMAP_CUBIC\");\n                                break;\n                        }\n                        defines.USE_LOCAL_REFLECTIONMAP_CUBIC = this._reflectionTexture.boundingBoxSize ? true : false;\n                    }\n                }\n                else {\n                    defines.REFLECTION = false;\n                    defines.REFLECTIONMAP_OPPOSITEZ = false;\n                }\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\n                    if (!this._emissiveTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\n                    }\n                }\n                else {\n                    defines.EMISSIVE = false;\n                }\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\n                    if (!this._lightmapTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\n                        defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\n                        defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\n                    }\n                }\n                else {\n                    defines.LIGHTMAP = false;\n                }\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\n                    if (!this._specularTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._specularTexture, defines, \"SPECULAR\");\n                        defines.GLOSSINESS = this._useGlossinessFromSpecularMapAlpha;\n                    }\n                }\n                else {\n                    defines.SPECULAR = false;\n                }\n                if (scene.getEngine().getCaps().standardDerivatives && this._bumpTexture && StandardMaterial.BumpTextureEnabled) {\n                    // Bump texture can not be not blocking.\n                    if (!this._bumpTexture.isReady()) {\n                        return false;\n                    }\n                    else {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\n                        defines.PARALLAX = this._useParallax;\n                        defines.PARALLAXOCCLUSION = this._useParallaxOcclusion;\n                    }\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\n                }\n                else {\n                    defines.BUMP = false;\n                }\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\n                    if (!this._refractionTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    else {\n                        defines._needUVs = true;\n                        defines.REFRACTION = true;\n                        defines.REFRACTIONMAP_3D = this._refractionTexture.isCube;\n                        defines.RGBDREFRACTION = this._refractionTexture.isRGBD;\n                        defines.USE_LOCAL_REFRACTIONMAP_CUBIC = this._refractionTexture.boundingBoxSize ? true : false;\n                    }\n                }\n                else {\n                    defines.REFRACTION = false;\n                }\n                defines.TWOSIDEDLIGHTING = !this._backFaceCulling && this._twoSidedLighting;\n            }\n            else {\n                defines.DIFFUSE = false;\n                defines.AMBIENT = false;\n                defines.OPACITY = false;\n                defines.REFLECTION = false;\n                defines.EMISSIVE = false;\n                defines.LIGHTMAP = false;\n                defines.BUMP = false;\n                defines.REFRACTION = false;\n            }\n            defines.ALPHAFROMDIFFUSE = this._shouldUseAlphaFromDiffuseTexture();\n            defines.EMISSIVEASILLUMINATION = this._useEmissiveAsIllumination;\n            defines.LINKEMISSIVEWITHDIFFUSE = this._linkEmissiveWithDiffuse;\n            defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\n            defines.PREMULTIPLYALPHA = this.alphaMode === 7 || this.alphaMode === 8;\n            defines.ALPHATEST_AFTERALLALPHACOMPUTATIONS = this.transparencyMode !== null;\n            defines.ALPHABLEND = this.transparencyMode === null || this.needAlphaBlendingForMesh(mesh); // check on null for backward compatibility\n        }\n        this._eventInfo.isReadyForSubMesh = true;\n        this._eventInfo.defines = defines;\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\n        if (!this._eventInfo.isReadyForSubMesh) {\n            return false;\n        }\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n            if (!this._imageProcessingConfiguration.isReady()) {\n                return false;\n            }\n            this._imageProcessingConfiguration.prepareDefines(defines);\n            defines.IS_REFLECTION_LINEAR = this.reflectionTexture != null && !this.reflectionTexture.gammaSpace;\n            defines.IS_REFRACTION_LINEAR = this.refractionTexture != null && !this.refractionTexture.gammaSpace;\n        }\n        if (defines._areFresnelDirty) {\n            if (StandardMaterial.FresnelEnabled) {\n                // Fresnel\n                if (this._diffuseFresnelParameters ||\n                    this._opacityFresnelParameters ||\n                    this._emissiveFresnelParameters ||\n                    this._refractionFresnelParameters ||\n                    this._reflectionFresnelParameters) {\n                    defines.DIFFUSEFRESNEL = this._diffuseFresnelParameters && this._diffuseFresnelParameters.isEnabled;\n                    defines.OPACITYFRESNEL = this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled;\n                    defines.REFLECTIONFRESNEL = this._reflectionFresnelParameters && this._reflectionFresnelParameters.isEnabled;\n                    defines.REFLECTIONFRESNELFROMSPECULAR = this._useReflectionFresnelFromSpecular;\n                    defines.REFRACTIONFRESNEL = this._refractionFresnelParameters && this._refractionFresnelParameters.isEnabled;\n                    defines.EMISSIVEFRESNEL = this._emissiveFresnelParameters && this._emissiveFresnelParameters.isEnabled;\n                    defines._needNormals = true;\n                    defines.FRESNEL = true;\n                }\n            }\n            else {\n                defines.FRESNEL = false;\n            }\n        }\n        // Misc.\n        MaterialHelper.PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh) || this._forceAlphaTest, defines);\n        // Values that need to be evaluated on every frame\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\n        // External config\n        this._eventInfo.defines = defines;\n        this._eventInfo.mesh = mesh;\n        this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true, true);\n        // External config\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\n        // Get correct effect\n        if (defines.isDirty) {\n            var lightDisposed = defines._areLightsDisposed;\n            defines.markAsProcessed();\n            // Fallbacks\n            var fallbacks = new EffectFallbacks();\n            if (defines.REFLECTION) {\n                fallbacks.addFallback(0, \"REFLECTION\");\n            }\n            if (defines.SPECULAR) {\n                fallbacks.addFallback(0, \"SPECULAR\");\n            }\n            if (defines.BUMP) {\n                fallbacks.addFallback(0, \"BUMP\");\n            }\n            if (defines.PARALLAX) {\n                fallbacks.addFallback(1, \"PARALLAX\");\n            }\n            if (defines.PARALLAXOCCLUSION) {\n                fallbacks.addFallback(0, \"PARALLAXOCCLUSION\");\n            }\n            if (defines.SPECULAROVERALPHA) {\n                fallbacks.addFallback(0, \"SPECULAROVERALPHA\");\n            }\n            if (defines.FOG) {\n                fallbacks.addFallback(1, \"FOG\");\n            }\n            if (defines.POINTSIZE) {\n                fallbacks.addFallback(0, \"POINTSIZE\");\n            }\n            if (defines.LOGARITHMICDEPTH) {\n                fallbacks.addFallback(0, \"LOGARITHMICDEPTH\");\n            }\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights);\n            if (defines.SPECULARTERM) {\n                fallbacks.addFallback(0, \"SPECULARTERM\");\n            }\n            if (defines.DIFFUSEFRESNEL) {\n                fallbacks.addFallback(1, \"DIFFUSEFRESNEL\");\n            }\n            if (defines.OPACITYFRESNEL) {\n                fallbacks.addFallback(2, \"OPACITYFRESNEL\");\n            }\n            if (defines.REFLECTIONFRESNEL) {\n                fallbacks.addFallback(3, \"REFLECTIONFRESNEL\");\n            }\n            if (defines.EMISSIVEFRESNEL) {\n                fallbacks.addFallback(4, \"EMISSIVEFRESNEL\");\n            }\n            if (defines.FRESNEL) {\n                fallbacks.addFallback(4, \"FRESNEL\");\n            }\n            if (defines.MULTIVIEW) {\n                fallbacks.addFallback(0, \"MULTIVIEW\");\n            }\n            //Attributes\n            var attribs = [VertexBuffer.PositionKind];\n            if (defines.NORMAL) {\n                attribs.push(VertexBuffer.NormalKind);\n            }\n            if (defines.TANGENT) {\n                attribs.push(VertexBuffer.TangentKind);\n            }\n            for (var i = 1; i <= 6; ++i) {\n                if (defines[\"UV\" + i]) {\n                    attribs.push(\"uv\".concat(i === 1 ? \"\" : i));\n                }\n            }\n            if (defines.VERTEXCOLOR) {\n                attribs.push(VertexBuffer.ColorKind);\n            }\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n            MaterialHelper.PrepareAttributesForMorphTargets(attribs, mesh, defines);\n            MaterialHelper.PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\n            var shaderName = \"default\";\n            var uniforms = [\n                \"world\",\n                \"view\",\n                \"viewProjection\",\n                \"vEyePosition\",\n                \"vLightsType\",\n                \"vAmbientColor\",\n                \"vDiffuseColor\",\n                \"vSpecularColor\",\n                \"vEmissiveColor\",\n                \"visibility\",\n                \"vFogInfos\",\n                \"vFogColor\",\n                \"pointSize\",\n                \"vDiffuseInfos\",\n                \"vAmbientInfos\",\n                \"vOpacityInfos\",\n                \"vReflectionInfos\",\n                \"vEmissiveInfos\",\n                \"vSpecularInfos\",\n                \"vBumpInfos\",\n                \"vLightmapInfos\",\n                \"vRefractionInfos\",\n                \"mBones\",\n                \"vClipPlane\",\n                \"vClipPlane2\",\n                \"vClipPlane3\",\n                \"vClipPlane4\",\n                \"vClipPlane5\",\n                \"vClipPlane6\",\n                \"diffuseMatrix\",\n                \"ambientMatrix\",\n                \"opacityMatrix\",\n                \"reflectionMatrix\",\n                \"emissiveMatrix\",\n                \"specularMatrix\",\n                \"bumpMatrix\",\n                \"normalMatrix\",\n                \"lightmapMatrix\",\n                \"refractionMatrix\",\n                \"diffuseLeftColor\",\n                \"diffuseRightColor\",\n                \"opacityParts\",\n                \"reflectionLeftColor\",\n                \"reflectionRightColor\",\n                \"emissiveLeftColor\",\n                \"emissiveRightColor\",\n                \"refractionLeftColor\",\n                \"refractionRightColor\",\n                \"vReflectionPosition\",\n                \"vReflectionSize\",\n                \"vRefractionPosition\",\n                \"vRefractionSize\",\n                \"logarithmicDepthConstant\",\n                \"vTangentSpaceParams\",\n                \"alphaCutOff\",\n                \"boneTextureWidth\",\n                \"morphTargetTextureInfo\",\n                \"morphTargetTextureIndices\",\n            ];\n            var samplers = [\n                \"diffuseSampler\",\n                \"ambientSampler\",\n                \"opacitySampler\",\n                \"reflectionCubeSampler\",\n                \"reflection2DSampler\",\n                \"emissiveSampler\",\n                \"specularSampler\",\n                \"bumpSampler\",\n                \"lightmapSampler\",\n                \"refractionCubeSampler\",\n                \"refraction2DSampler\",\n                \"boneSampler\",\n                \"morphTargets\",\n                \"oitDepthSampler\",\n                \"oitFrontColorSampler\",\n            ];\n            var uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\n            this._eventInfo.fallbacks = fallbacks;\n            this._eventInfo.fallbackRank = 0;\n            this._eventInfo.defines = defines;\n            this._eventInfo.uniforms = uniforms;\n            this._eventInfo.attributes = attribs;\n            this._eventInfo.samplers = samplers;\n            this._eventInfo.uniformBuffersNames = uniformBuffers;\n            this._eventInfo.customCode = undefined;\n            this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareEffect, this._eventInfo);\n            PrePassConfiguration.AddUniforms(uniforms);\n            PrePassConfiguration.AddSamplers(samplers);\n            if (ImageProcessingConfiguration) {\n                ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\n                ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\n            }\n            MaterialHelper.PrepareUniformsAndSamplersList({\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: defines,\n                maxSimultaneousLights: this._maxSimultaneousLights,\n            });\n            var csnrOptions = {};\n            if (this.customShaderNameResolve) {\n                shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\n            }\n            var join = defines.toString();\n            var previousEffect = subMesh.effect;\n            var effect = scene.getEngine().createEffect(shaderName, {\n                attributes: attribs,\n                uniformsNames: uniforms,\n                uniformBuffersNames: uniformBuffers,\n                samplers: samplers,\n                defines: join,\n                fallbacks: fallbacks,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n                indexParameters: { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS },\n                processFinalCode: csnrOptions.processFinalCode,\n                processCodeAfterIncludes: this._eventInfo.customCode,\n                multiTarget: defines.PREPASS,\n            }, engine);\n            if (effect) {\n                if (this._onEffectCreatedObservable) {\n                    onCreatedEffectParameters.effect = effect;\n                    onCreatedEffectParameters.subMesh = subMesh;\n                    this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n                }\n                // Use previous effect while new one is compiling\n                if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\n                    effect = previousEffect;\n                    defines.markAsUnprocessed();\n                    if (lightDisposed) {\n                        // re register in case it takes more than one frame.\n                        defines._areLightsDisposed = true;\n                        return false;\n                    }\n                }\n                else {\n                    scene.resetCachedMaterial();\n                    subMesh.setEffect(effect, defines, this._materialContext);\n                }\n            }\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        subMesh.effect._wasPreviouslyReady = true;\n        return true;\n    };\n    /**\n     * Builds the material UBO layouts.\n     * Used internally during the effect preparation.\n     */\n    StandardMaterial.prototype.buildUniformLayout = function () {\n        // Order is important !\n        var ubo = this._uniformBuffer;\n        ubo.addUniform(\"diffuseLeftColor\", 4);\n        ubo.addUniform(\"diffuseRightColor\", 4);\n        ubo.addUniform(\"opacityParts\", 4);\n        ubo.addUniform(\"reflectionLeftColor\", 4);\n        ubo.addUniform(\"reflectionRightColor\", 4);\n        ubo.addUniform(\"refractionLeftColor\", 4);\n        ubo.addUniform(\"refractionRightColor\", 4);\n        ubo.addUniform(\"emissiveLeftColor\", 4);\n        ubo.addUniform(\"emissiveRightColor\", 4);\n        ubo.addUniform(\"vDiffuseInfos\", 2);\n        ubo.addUniform(\"vAmbientInfos\", 2);\n        ubo.addUniform(\"vOpacityInfos\", 2);\n        ubo.addUniform(\"vReflectionInfos\", 2);\n        ubo.addUniform(\"vReflectionPosition\", 3);\n        ubo.addUniform(\"vReflectionSize\", 3);\n        ubo.addUniform(\"vEmissiveInfos\", 2);\n        ubo.addUniform(\"vLightmapInfos\", 2);\n        ubo.addUniform(\"vSpecularInfos\", 2);\n        ubo.addUniform(\"vBumpInfos\", 3);\n        ubo.addUniform(\"diffuseMatrix\", 16);\n        ubo.addUniform(\"ambientMatrix\", 16);\n        ubo.addUniform(\"opacityMatrix\", 16);\n        ubo.addUniform(\"reflectionMatrix\", 16);\n        ubo.addUniform(\"emissiveMatrix\", 16);\n        ubo.addUniform(\"lightmapMatrix\", 16);\n        ubo.addUniform(\"specularMatrix\", 16);\n        ubo.addUniform(\"bumpMatrix\", 16);\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\n        ubo.addUniform(\"pointSize\", 1);\n        ubo.addUniform(\"alphaCutOff\", 1);\n        ubo.addUniform(\"refractionMatrix\", 16);\n        ubo.addUniform(\"vRefractionInfos\", 4);\n        ubo.addUniform(\"vRefractionPosition\", 3);\n        ubo.addUniform(\"vRefractionSize\", 3);\n        ubo.addUniform(\"vSpecularColor\", 4);\n        ubo.addUniform(\"vEmissiveColor\", 3);\n        ubo.addUniform(\"vDiffuseColor\", 4);\n        ubo.addUniform(\"vAmbientColor\", 3);\n        _super.prototype.buildUniformLayout.call(this);\n    };\n    /**\n     * Binds the submesh to this material by preparing the effect and shader to draw\n     * @param world defines the world transformation matrix\n     * @param mesh defines the mesh containing the submesh\n     * @param subMesh defines the submesh to bind the material to\n     */\n    StandardMaterial.prototype.bindForSubMesh = function (world, mesh, subMesh) {\n        var _a;\n        var scene = this.getScene();\n        var defines = subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        var effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices Mesh.\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n        mesh.transferToEffect(world);\n        // Binding unconditionally\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\n        this._eventInfo.subMesh = subMesh;\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\n        // Normal Matrix\n        if (defines.OBJECTSPACE_NORMALMAP) {\n            world.toNormalMatrix(this._normalMatrix);\n            this.bindOnlyNormalMatrix(this._normalMatrix);\n        }\n        var mustRebind = this._mustRebind(scene, effect, mesh.visibility);\n        // Bones\n        MaterialHelper.BindBonesParameters(mesh, effect);\n        var ubo = this._uniformBuffer;\n        if (mustRebind) {\n            this.bindViewProjection(effect);\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync) {\n                if (StandardMaterial.FresnelEnabled && defines.FRESNEL) {\n                    // Fresnel\n                    if (this.diffuseFresnelParameters && this.diffuseFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"diffuseLeftColor\", this.diffuseFresnelParameters.leftColor, this.diffuseFresnelParameters.power);\n                        ubo.updateColor4(\"diffuseRightColor\", this.diffuseFresnelParameters.rightColor, this.diffuseFresnelParameters.bias);\n                    }\n                    if (this.opacityFresnelParameters && this.opacityFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"opacityParts\", new Color3(this.opacityFresnelParameters.leftColor.toLuminance(), this.opacityFresnelParameters.rightColor.toLuminance(), this.opacityFresnelParameters.bias), this.opacityFresnelParameters.power);\n                    }\n                    if (this.reflectionFresnelParameters && this.reflectionFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"reflectionLeftColor\", this.reflectionFresnelParameters.leftColor, this.reflectionFresnelParameters.power);\n                        ubo.updateColor4(\"reflectionRightColor\", this.reflectionFresnelParameters.rightColor, this.reflectionFresnelParameters.bias);\n                    }\n                    if (this.refractionFresnelParameters && this.refractionFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"refractionLeftColor\", this.refractionFresnelParameters.leftColor, this.refractionFresnelParameters.power);\n                        ubo.updateColor4(\"refractionRightColor\", this.refractionFresnelParameters.rightColor, this.refractionFresnelParameters.bias);\n                    }\n                    if (this.emissiveFresnelParameters && this.emissiveFresnelParameters.isEnabled) {\n                        ubo.updateColor4(\"emissiveLeftColor\", this.emissiveFresnelParameters.leftColor, this.emissiveFresnelParameters.power);\n                        ubo.updateColor4(\"emissiveRightColor\", this.emissiveFresnelParameters.rightColor, this.emissiveFresnelParameters.bias);\n                    }\n                }\n                // Textures\n                if (scene.texturesEnabled) {\n                    if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                        ubo.updateFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._diffuseTexture, ubo, \"diffuse\");\n                    }\n                    if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\n                        ubo.updateFloat2(\"vAmbientInfos\", this._ambientTexture.coordinatesIndex, this._ambientTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\n                    }\n                    if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\n                        ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\n                    }\n                    if (this._hasAlphaChannel()) {\n                        ubo.updateFloat(\"alphaCutOff\", this.alphaCutOff);\n                    }\n                    if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\n                        ubo.updateFloat2(\"vReflectionInfos\", this._reflectionTexture.level, this.roughness);\n                        ubo.updateMatrix(\"reflectionMatrix\", this._reflectionTexture.getReflectionTextureMatrix());\n                        if (this._reflectionTexture.boundingBoxSize) {\n                            var cubeTexture = this._reflectionTexture;\n                            ubo.updateVector3(\"vReflectionPosition\", cubeTexture.boundingBoxPosition);\n                            ubo.updateVector3(\"vReflectionSize\", cubeTexture.boundingBoxSize);\n                        }\n                    }\n                    if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\n                        ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\n                    }\n                    if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\n                        ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\n                    }\n                    if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\n                        ubo.updateFloat2(\"vSpecularInfos\", this._specularTexture.coordinatesIndex, this._specularTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._specularTexture, ubo, \"specular\");\n                    }\n                    if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\n                        ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, 1.0 / this._bumpTexture.level, this.parallaxScaleBias);\n                        MaterialHelper.BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\n                        if (scene._mirroredCameraPosition) {\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\n                        }\n                        else {\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\n                        }\n                    }\n                    if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\n                        var depth = 1.0;\n                        if (!this._refractionTexture.isCube) {\n                            ubo.updateMatrix(\"refractionMatrix\", this._refractionTexture.getReflectionTextureMatrix());\n                            if (this._refractionTexture.depth) {\n                                depth = this._refractionTexture.depth;\n                            }\n                        }\n                        ubo.updateFloat4(\"vRefractionInfos\", this._refractionTexture.level, this.indexOfRefraction, depth, this.invertRefractionY ? -1 : 1);\n                        if (this._refractionTexture.boundingBoxSize) {\n                            var cubeTexture = this._refractionTexture;\n                            ubo.updateVector3(\"vRefractionPosition\", cubeTexture.boundingBoxPosition);\n                            ubo.updateVector3(\"vRefractionSize\", cubeTexture.boundingBoxSize);\n                        }\n                    }\n                }\n                // Point size\n                if (this.pointsCloud) {\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\n                }\n                if (defines.SPECULARTERM) {\n                    ubo.updateColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\n                }\n                ubo.updateColor3(\"vEmissiveColor\", StandardMaterial.EmissiveTextureEnabled ? this.emissiveColor : Color3.BlackReadOnly);\n                ubo.updateColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha);\n                scene.ambientColor.multiplyToRef(this.ambientColor, this._globalAmbientColor);\n                ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\n            }\n            // Textures\n            if (scene.texturesEnabled) {\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\n                    effect.setTexture(\"diffuseSampler\", this._diffuseTexture);\n                }\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\n                    effect.setTexture(\"ambientSampler\", this._ambientTexture);\n                }\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\n                    effect.setTexture(\"opacitySampler\", this._opacityTexture);\n                }\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\n                    if (this._reflectionTexture.isCube) {\n                        effect.setTexture(\"reflectionCubeSampler\", this._reflectionTexture);\n                    }\n                    else {\n                        effect.setTexture(\"reflection2DSampler\", this._reflectionTexture);\n                    }\n                }\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\n                    effect.setTexture(\"emissiveSampler\", this._emissiveTexture);\n                }\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\n                    effect.setTexture(\"lightmapSampler\", this._lightmapTexture);\n                }\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\n                    effect.setTexture(\"specularSampler\", this._specularTexture);\n                }\n                if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\n                    effect.setTexture(\"bumpSampler\", this._bumpTexture);\n                }\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\n                    if (this._refractionTexture.isCube) {\n                        effect.setTexture(\"refractionCubeSampler\", this._refractionTexture);\n                    }\n                    else {\n                        effect.setTexture(\"refraction2DSampler\", this._refractionTexture);\n                    }\n                }\n            }\n            // OIT with depth peeling\n            if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\n                this.getScene().depthPeelingRenderer.bind(effect);\n            }\n            this._eventInfo.subMesh = subMesh;\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\n            // Clip plane\n            MaterialHelper.BindClipPlane(effect, scene);\n            // Colors\n            this.bindEyePosition(effect);\n        }\n        else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\n            this._needToBindSceneUbo = true;\n        }\n        if (mustRebind || !this.isFrozen) {\n            // Lights\n            if (scene.lightsEnabled && !this._disableLighting) {\n                MaterialHelper.BindLights(scene, mesh, effect, defines, this._maxSimultaneousLights);\n            }\n            // View\n            if ((scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) ||\n                this._reflectionTexture ||\n                this._refractionTexture ||\n                mesh.receiveShadows ||\n                defines.PREPASS) {\n                this.bindView(effect);\n            }\n            // Fog\n            MaterialHelper.BindFogParameters(scene, mesh, effect);\n            // Morph targets\n            if (defines.NUM_MORPH_INFLUENCERS) {\n                MaterialHelper.BindMorphTargetParameters(mesh, effect);\n            }\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\n                (_a = mesh.bakedVertexAnimationManager) === null || _a === void 0 ? void 0 : _a.bind(effect, defines.INSTANCES);\n            }\n            // Log. depth\n            if (this.useLogarithmicDepth) {\n                MaterialHelper.BindLogDepth(defines, effect, scene);\n            }\n            // image processing\n            if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\n                this._imageProcessingConfiguration.bind(this._activeEffect);\n            }\n        }\n        this._afterBind(mesh, this._activeEffect);\n        ubo.update();\n    };\n    /**\n     * Get the list of animatables in the material.\n     * @returns the list of animatables object used in the material\n     */\n    StandardMaterial.prototype.getAnimatables = function () {\n        var results = _super.prototype.getAnimatables.call(this);\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\n            results.push(this._diffuseTexture);\n        }\n        if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\n            results.push(this._ambientTexture);\n        }\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\n            results.push(this._opacityTexture);\n        }\n        if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\n            results.push(this._reflectionTexture);\n        }\n        if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\n            results.push(this._emissiveTexture);\n        }\n        if (this._specularTexture && this._specularTexture.animations && this._specularTexture.animations.length > 0) {\n            results.push(this._specularTexture);\n        }\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n            results.push(this._bumpTexture);\n        }\n        if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\n            results.push(this._lightmapTexture);\n        }\n        if (this._refractionTexture && this._refractionTexture.animations && this._refractionTexture.animations.length > 0) {\n            results.push(this._refractionTexture);\n        }\n        return results;\n    };\n    /**\n     * Gets the active textures from the material\n     * @returns an array of textures\n     */\n    StandardMaterial.prototype.getActiveTextures = function () {\n        var activeTextures = _super.prototype.getActiveTextures.call(this);\n        if (this._diffuseTexture) {\n            activeTextures.push(this._diffuseTexture);\n        }\n        if (this._ambientTexture) {\n            activeTextures.push(this._ambientTexture);\n        }\n        if (this._opacityTexture) {\n            activeTextures.push(this._opacityTexture);\n        }\n        if (this._reflectionTexture) {\n            activeTextures.push(this._reflectionTexture);\n        }\n        if (this._emissiveTexture) {\n            activeTextures.push(this._emissiveTexture);\n        }\n        if (this._specularTexture) {\n            activeTextures.push(this._specularTexture);\n        }\n        if (this._bumpTexture) {\n            activeTextures.push(this._bumpTexture);\n        }\n        if (this._lightmapTexture) {\n            activeTextures.push(this._lightmapTexture);\n        }\n        if (this._refractionTexture) {\n            activeTextures.push(this._refractionTexture);\n        }\n        return activeTextures;\n    };\n    /**\n     * Specifies if the material uses a texture\n     * @param texture defines the texture to check against the material\n     * @returns a boolean specifying if the material uses the texture\n     */\n    StandardMaterial.prototype.hasTexture = function (texture) {\n        if (_super.prototype.hasTexture.call(this, texture)) {\n            return true;\n        }\n        if (this._diffuseTexture === texture) {\n            return true;\n        }\n        if (this._ambientTexture === texture) {\n            return true;\n        }\n        if (this._opacityTexture === texture) {\n            return true;\n        }\n        if (this._reflectionTexture === texture) {\n            return true;\n        }\n        if (this._emissiveTexture === texture) {\n            return true;\n        }\n        if (this._specularTexture === texture) {\n            return true;\n        }\n        if (this._bumpTexture === texture) {\n            return true;\n        }\n        if (this._lightmapTexture === texture) {\n            return true;\n        }\n        if (this._refractionTexture === texture) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Disposes the material\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\n     */\n    StandardMaterial.prototype.dispose = function (forceDisposeEffect, forceDisposeTextures) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        if (forceDisposeTextures) {\n            (_a = this._diffuseTexture) === null || _a === void 0 ? void 0 : _a.dispose();\n            (_b = this._ambientTexture) === null || _b === void 0 ? void 0 : _b.dispose();\n            (_c = this._opacityTexture) === null || _c === void 0 ? void 0 : _c.dispose();\n            (_d = this._reflectionTexture) === null || _d === void 0 ? void 0 : _d.dispose();\n            (_e = this._emissiveTexture) === null || _e === void 0 ? void 0 : _e.dispose();\n            (_f = this._specularTexture) === null || _f === void 0 ? void 0 : _f.dispose();\n            (_g = this._bumpTexture) === null || _g === void 0 ? void 0 : _g.dispose();\n            (_h = this._lightmapTexture) === null || _h === void 0 ? void 0 : _h.dispose();\n            (_j = this._refractionTexture) === null || _j === void 0 ? void 0 : _j.dispose();\n        }\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        _super.prototype.dispose.call(this, forceDisposeEffect, forceDisposeTextures);\n    };\n    /**\n     * Makes a duplicate of the material, and gives it a new name\n     * @param name defines the new name for the duplicated material\n     * @returns the cloned material\n     */\n    StandardMaterial.prototype.clone = function (name) {\n        var _this = this;\n        var result = SerializationHelper.Clone(function () { return new StandardMaterial(name, _this.getScene()); }, this);\n        result.name = name;\n        result.id = name;\n        this.stencil.copyTo(result.stencil);\n        return result;\n    };\n    /**\n     * Creates a standard material from parsed material data\n     * @param source defines the JSON representation of the material\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a new standard material\n     */\n    StandardMaterial.Parse = function (source, scene, rootUrl) {\n        var material = SerializationHelper.Parse(function () { return new StandardMaterial(source.name, scene); }, source, scene, rootUrl);\n        if (source.stencil) {\n            material.stencil.parse(source.stencil, scene, rootUrl);\n        }\n        return material;\n    };\n    Object.defineProperty(StandardMaterial, \"DiffuseTextureEnabled\", {\n        // Flags used to enable or disable a type of texture for all Standard Materials\n        /**\n         * Are diffuse textures enabled in the application.\n         */\n        get: function () {\n            return MaterialFlags.DiffuseTextureEnabled;\n        },\n        set: function (value) {\n            MaterialFlags.DiffuseTextureEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial, \"DetailTextureEnabled\", {\n        /**\n         * Are detail textures enabled in the application.\n         */\n        get: function () {\n            return MaterialFlags.DetailTextureEnabled;\n        },\n        set: function (value) {\n            MaterialFlags.DetailTextureEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial, \"AmbientTextureEnabled\", {\n        /**\n         * Are ambient textures enabled in the application.\n         */\n        get: function () {\n            return MaterialFlags.AmbientTextureEnabled;\n        },\n        set: function (value) {\n            MaterialFlags.AmbientTextureEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial, \"OpacityTextureEnabled\", {\n        /**\n         * Are opacity textures enabled in the application.\n         */\n        get: function () {\n            return MaterialFlags.OpacityTextureEnabled;\n        },\n        set: function (value) {\n            MaterialFlags.OpacityTextureEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial, \"ReflectionTextureEnabled\", {\n        /**\n         * Are reflection textures enabled in the application.\n         */\n        get: function () {\n            return MaterialFlags.ReflectionTextureEnabled;\n        },\n        set: function (value) {\n            MaterialFlags.ReflectionTextureEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial, \"EmissiveTextureEnabled\", {\n        /**\n         * Are emissive textures enabled in the application.\n         */\n        get: function () {\n            return MaterialFlags.EmissiveTextureEnabled;\n        },\n        set: function (value) {\n            MaterialFlags.EmissiveTextureEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial, \"SpecularTextureEnabled\", {\n        /**\n         * Are specular textures enabled in the application.\n         */\n        get: function () {\n            return MaterialFlags.SpecularTextureEnabled;\n        },\n        set: function (value) {\n            MaterialFlags.SpecularTextureEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial, \"BumpTextureEnabled\", {\n        /**\n         * Are bump textures enabled in the application.\n         */\n        get: function () {\n            return MaterialFlags.BumpTextureEnabled;\n        },\n        set: function (value) {\n            MaterialFlags.BumpTextureEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial, \"LightmapTextureEnabled\", {\n        /**\n         * Are lightmap textures enabled in the application.\n         */\n        get: function () {\n            return MaterialFlags.LightmapTextureEnabled;\n        },\n        set: function (value) {\n            MaterialFlags.LightmapTextureEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial, \"RefractionTextureEnabled\", {\n        /**\n         * Are refraction textures enabled in the application.\n         */\n        get: function () {\n            return MaterialFlags.RefractionTextureEnabled;\n        },\n        set: function (value) {\n            MaterialFlags.RefractionTextureEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial, \"ColorGradingTextureEnabled\", {\n        /**\n         * Are color grading textures enabled in the application.\n         */\n        get: function () {\n            return MaterialFlags.ColorGradingTextureEnabled;\n        },\n        set: function (value) {\n            MaterialFlags.ColorGradingTextureEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardMaterial, \"FresnelEnabled\", {\n        /**\n         * Are fresnels enabled in the application.\n         */\n        get: function () {\n            return MaterialFlags.FresnelEnabled;\n        },\n        set: function (value) {\n            MaterialFlags.FresnelEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    __decorate([\n        serializeAsTexture(\"diffuseTexture\")\n    ], StandardMaterial.prototype, \"_diffuseTexture\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n    ], StandardMaterial.prototype, \"diffuseTexture\", void 0);\n    __decorate([\n        serializeAsTexture(\"ambientTexture\")\n    ], StandardMaterial.prototype, \"_ambientTexture\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"ambientTexture\", void 0);\n    __decorate([\n        serializeAsTexture(\"opacityTexture\")\n    ], StandardMaterial.prototype, \"_opacityTexture\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n    ], StandardMaterial.prototype, \"opacityTexture\", void 0);\n    __decorate([\n        serializeAsTexture(\"reflectionTexture\")\n    ], StandardMaterial.prototype, \"_reflectionTexture\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"reflectionTexture\", void 0);\n    __decorate([\n        serializeAsTexture(\"emissiveTexture\")\n    ], StandardMaterial.prototype, \"_emissiveTexture\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"emissiveTexture\", void 0);\n    __decorate([\n        serializeAsTexture(\"specularTexture\")\n    ], StandardMaterial.prototype, \"_specularTexture\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"specularTexture\", void 0);\n    __decorate([\n        serializeAsTexture(\"bumpTexture\")\n    ], StandardMaterial.prototype, \"_bumpTexture\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"bumpTexture\", void 0);\n    __decorate([\n        serializeAsTexture(\"lightmapTexture\")\n    ], StandardMaterial.prototype, \"_lightmapTexture\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"lightmapTexture\", void 0);\n    __decorate([\n        serializeAsTexture(\"refractionTexture\")\n    ], StandardMaterial.prototype, \"_refractionTexture\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"refractionTexture\", void 0);\n    __decorate([\n        serializeAsColor3(\"ambient\")\n    ], StandardMaterial.prototype, \"ambientColor\", void 0);\n    __decorate([\n        serializeAsColor3(\"diffuse\")\n    ], StandardMaterial.prototype, \"diffuseColor\", void 0);\n    __decorate([\n        serializeAsColor3(\"specular\")\n    ], StandardMaterial.prototype, \"specularColor\", void 0);\n    __decorate([\n        serializeAsColor3(\"emissive\")\n    ], StandardMaterial.prototype, \"emissiveColor\", void 0);\n    __decorate([\n        serialize()\n    ], StandardMaterial.prototype, \"specularPower\", void 0);\n    __decorate([\n        serialize(\"useAlphaFromDiffuseTexture\")\n    ], StandardMaterial.prototype, \"_useAlphaFromDiffuseTexture\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n    ], StandardMaterial.prototype, \"useAlphaFromDiffuseTexture\", void 0);\n    __decorate([\n        serialize(\"useEmissiveAsIllumination\")\n    ], StandardMaterial.prototype, \"_useEmissiveAsIllumination\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"useEmissiveAsIllumination\", void 0);\n    __decorate([\n        serialize(\"linkEmissiveWithDiffuse\")\n    ], StandardMaterial.prototype, \"_linkEmissiveWithDiffuse\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"linkEmissiveWithDiffuse\", void 0);\n    __decorate([\n        serialize(\"useSpecularOverAlpha\")\n    ], StandardMaterial.prototype, \"_useSpecularOverAlpha\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"useSpecularOverAlpha\", void 0);\n    __decorate([\n        serialize(\"useReflectionOverAlpha\")\n    ], StandardMaterial.prototype, \"_useReflectionOverAlpha\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"useReflectionOverAlpha\", void 0);\n    __decorate([\n        serialize(\"disableLighting\")\n    ], StandardMaterial.prototype, \"_disableLighting\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    ], StandardMaterial.prototype, \"disableLighting\", void 0);\n    __decorate([\n        serialize(\"useObjectSpaceNormalMap\")\n    ], StandardMaterial.prototype, \"_useObjectSpaceNormalMap\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"useObjectSpaceNormalMap\", void 0);\n    __decorate([\n        serialize(\"useParallax\")\n    ], StandardMaterial.prototype, \"_useParallax\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"useParallax\", void 0);\n    __decorate([\n        serialize(\"useParallaxOcclusion\")\n    ], StandardMaterial.prototype, \"_useParallaxOcclusion\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"useParallaxOcclusion\", void 0);\n    __decorate([\n        serialize()\n    ], StandardMaterial.prototype, \"parallaxScaleBias\", void 0);\n    __decorate([\n        serialize(\"roughness\")\n    ], StandardMaterial.prototype, \"_roughness\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"roughness\", void 0);\n    __decorate([\n        serialize()\n    ], StandardMaterial.prototype, \"indexOfRefraction\", void 0);\n    __decorate([\n        serialize()\n    ], StandardMaterial.prototype, \"invertRefractionY\", void 0);\n    __decorate([\n        serialize()\n    ], StandardMaterial.prototype, \"alphaCutOff\", void 0);\n    __decorate([\n        serialize(\"useLightmapAsShadowmap\")\n    ], StandardMaterial.prototype, \"_useLightmapAsShadowmap\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"useLightmapAsShadowmap\", void 0);\n    __decorate([\n        serializeAsFresnelParameters(\"diffuseFresnelParameters\")\n    ], StandardMaterial.prototype, \"_diffuseFresnelParameters\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n    ], StandardMaterial.prototype, \"diffuseFresnelParameters\", void 0);\n    __decorate([\n        serializeAsFresnelParameters(\"opacityFresnelParameters\")\n    ], StandardMaterial.prototype, \"_opacityFresnelParameters\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsFresnelAndMiscDirty\")\n    ], StandardMaterial.prototype, \"opacityFresnelParameters\", void 0);\n    __decorate([\n        serializeAsFresnelParameters(\"reflectionFresnelParameters\")\n    ], StandardMaterial.prototype, \"_reflectionFresnelParameters\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n    ], StandardMaterial.prototype, \"reflectionFresnelParameters\", void 0);\n    __decorate([\n        serializeAsFresnelParameters(\"refractionFresnelParameters\")\n    ], StandardMaterial.prototype, \"_refractionFresnelParameters\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n    ], StandardMaterial.prototype, \"refractionFresnelParameters\", void 0);\n    __decorate([\n        serializeAsFresnelParameters(\"emissiveFresnelParameters\")\n    ], StandardMaterial.prototype, \"_emissiveFresnelParameters\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n    ], StandardMaterial.prototype, \"emissiveFresnelParameters\", void 0);\n    __decorate([\n        serialize(\"useReflectionFresnelFromSpecular\")\n    ], StandardMaterial.prototype, \"_useReflectionFresnelFromSpecular\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\n    ], StandardMaterial.prototype, \"useReflectionFresnelFromSpecular\", void 0);\n    __decorate([\n        serialize(\"useGlossinessFromSpecularMapAlpha\")\n    ], StandardMaterial.prototype, \"_useGlossinessFromSpecularMapAlpha\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"useGlossinessFromSpecularMapAlpha\", void 0);\n    __decorate([\n        serialize(\"maxSimultaneousLights\")\n    ], StandardMaterial.prototype, \"_maxSimultaneousLights\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    ], StandardMaterial.prototype, \"maxSimultaneousLights\", void 0);\n    __decorate([\n        serialize(\"invertNormalMapX\")\n    ], StandardMaterial.prototype, \"_invertNormalMapX\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"invertNormalMapX\", void 0);\n    __decorate([\n        serialize(\"invertNormalMapY\")\n    ], StandardMaterial.prototype, \"_invertNormalMapY\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"invertNormalMapY\", void 0);\n    __decorate([\n        serialize(\"twoSidedLighting\")\n    ], StandardMaterial.prototype, \"_twoSidedLighting\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], StandardMaterial.prototype, \"twoSidedLighting\", void 0);\n    __decorate([\n        serialize()\n    ], StandardMaterial.prototype, \"useLogarithmicDepth\", null);\n    return StandardMaterial;\n}(PushMaterial));\nexport { StandardMaterial };\nRegisterClass(\"BABYLON.StandardMaterial\", StandardMaterial);\nScene.DefaultMaterialFactory = function (scene) {\n    return new StandardMaterial(\"default material\", scene);\n};\n//# sourceMappingURL=standardMaterial.js.map","/**\n * \"Static Class\" containing a few commonly used helper while dealing with material for rendering purpose.\n *\n * It is complementary with MaterialHelper but provides completely independent functions (for tree shaking sake)\n *\n * This works by convention in BabylonJS but is meant to be use only with shader following the in place naming rules and conventions.\n */\nvar ThinMaterialHelper = /** @class */ (function () {\n    function ThinMaterialHelper() {\n    }\n    /**\n     * Binds the clip plane information from the holder to the effect.\n     * @param effect The effect we are binding the data to\n     * @param holder The entity containing the clip plane information\n     */\n    ThinMaterialHelper.BindClipPlane = function (effect, holder) {\n        if (holder.clipPlane) {\n            var clipPlane = holder.clipPlane;\n            effect.setFloat4(\"vClipPlane\", clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.d);\n        }\n        if (holder.clipPlane2) {\n            var clipPlane = holder.clipPlane2;\n            effect.setFloat4(\"vClipPlane2\", clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.d);\n        }\n        if (holder.clipPlane3) {\n            var clipPlane = holder.clipPlane3;\n            effect.setFloat4(\"vClipPlane3\", clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.d);\n        }\n        if (holder.clipPlane4) {\n            var clipPlane = holder.clipPlane4;\n            effect.setFloat4(\"vClipPlane4\", clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.d);\n        }\n        if (holder.clipPlane5) {\n            var clipPlane = holder.clipPlane5;\n            effect.setFloat4(\"vClipPlane5\", clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.d);\n        }\n        if (holder.clipPlane6) {\n            var clipPlane = holder.clipPlane6;\n            effect.setFloat4(\"vClipPlane6\", clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.d);\n        }\n    };\n    return ThinMaterialHelper;\n}());\nexport { ThinMaterialHelper };\n//# sourceMappingURL=thinMaterialHelper.js.map","import { Logger } from \"../Misc/logger.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport \"../Engines/Extensions/engine.uniformBuffer.js\";\n/**\n * Uniform buffer objects.\n *\n * Handles blocks of uniform on the GPU.\n *\n * If WebGL 2 is not available, this class falls back on traditional setUniformXXX calls.\n *\n * For more information, please refer to :\n * https://www.khronos.org/opengl/wiki/Uniform_Buffer_Object\n */\nvar UniformBuffer = /** @class */ (function () {\n    /**\n     * Instantiates a new Uniform buffer objects.\n     *\n     * Handles blocks of uniform on the GPU.\n     *\n     * If WebGL 2 is not available, this class falls back on traditional setUniformXXX calls.\n     *\n     * For more information, please refer to :\n     * @see https://www.khronos.org/opengl/wiki/Uniform_Buffer_Object\n     * @param engine Define the engine the buffer is associated with\n     * @param data Define the data contained in the buffer\n     * @param dynamic Define if the buffer is updatable\n     * @param name to assign to the buffer (debugging purpose)\n     * @param forceNoUniformBuffer define that this object must not rely on UBO objects\n     */\n    function UniformBuffer(engine, data, dynamic, name, forceNoUniformBuffer) {\n        if (forceNoUniformBuffer === void 0) { forceNoUniformBuffer = false; }\n        // Matrix cache\n        this._valueCache = {};\n        this._engine = engine;\n        this._noUBO = !engine.supportsUniformBuffers || forceNoUniformBuffer;\n        this._dynamic = dynamic;\n        this._name = name !== null && name !== void 0 ? name : \"no-name\";\n        this._data = data || [];\n        this._uniformLocations = {};\n        this._uniformSizes = {};\n        this._uniformArraySizes = {};\n        this._uniformLocationPointer = 0;\n        this._needSync = false;\n        if (this._engine._features.trackUbosInFrame) {\n            this._buffers = [];\n            this._bufferIndex = -1;\n            this._createBufferOnWrite = false;\n            this._currentFrameId = 0;\n        }\n        if (this._noUBO) {\n            this.updateMatrix3x3 = this._updateMatrix3x3ForEffect;\n            this.updateMatrix2x2 = this._updateMatrix2x2ForEffect;\n            this.updateFloat = this._updateFloatForEffect;\n            this.updateFloat2 = this._updateFloat2ForEffect;\n            this.updateFloat3 = this._updateFloat3ForEffect;\n            this.updateFloat4 = this._updateFloat4ForEffect;\n            this.updateFloatArray = this._updateFloatArrayForEffect;\n            this.updateArray = this._updateArrayForEffect;\n            this.updateIntArray = this._updateIntArrayForEffect;\n            this.updateMatrix = this._updateMatrixForEffect;\n            this.updateMatrices = this._updateMatricesForEffect;\n            this.updateVector3 = this._updateVector3ForEffect;\n            this.updateVector4 = this._updateVector4ForEffect;\n            this.updateColor3 = this._updateColor3ForEffect;\n            this.updateColor4 = this._updateColor4ForEffect;\n            this.updateDirectColor4 = this._updateDirectColor4ForEffect;\n            this.updateInt = this._updateIntForEffect;\n            this.updateInt2 = this._updateInt2ForEffect;\n            this.updateInt3 = this._updateInt3ForEffect;\n            this.updateInt4 = this._updateInt4ForEffect;\n        }\n        else {\n            this._engine._uniformBuffers.push(this);\n            this.updateMatrix3x3 = this._updateMatrix3x3ForUniform;\n            this.updateMatrix2x2 = this._updateMatrix2x2ForUniform;\n            this.updateFloat = this._updateFloatForUniform;\n            this.updateFloat2 = this._updateFloat2ForUniform;\n            this.updateFloat3 = this._updateFloat3ForUniform;\n            this.updateFloat4 = this._updateFloat4ForUniform;\n            this.updateFloatArray = this._updateFloatArrayForUniform;\n            this.updateArray = this._updateArrayForUniform;\n            this.updateIntArray = this._updateIntArrayForUniform;\n            this.updateMatrix = this._updateMatrixForUniform;\n            this.updateMatrices = this._updateMatricesForUniform;\n            this.updateVector3 = this._updateVector3ForUniform;\n            this.updateVector4 = this._updateVector4ForUniform;\n            this.updateColor3 = this._updateColor3ForUniform;\n            this.updateColor4 = this._updateColor4ForUniform;\n            this.updateDirectColor4 = this._updateDirectColor4ForUniform;\n            this.updateInt = this._updateIntForUniform;\n            this.updateInt2 = this._updateInt2ForUniform;\n            this.updateInt3 = this._updateInt3ForUniform;\n            this.updateInt4 = this._updateInt4ForUniform;\n        }\n    }\n    Object.defineProperty(UniformBuffer.prototype, \"useUbo\", {\n        /**\n         * Indicates if the buffer is using the WebGL2 UBO implementation,\n         * or just falling back on setUniformXXX calls.\n         */\n        get: function () {\n            return !this._noUBO;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(UniformBuffer.prototype, \"isSync\", {\n        /**\n         * Indicates if the WebGL underlying uniform buffer is in sync\n         * with the javascript cache data.\n         */\n        get: function () {\n            return !this._needSync;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Indicates if the WebGL underlying uniform buffer is dynamic.\n     * Also, a dynamic UniformBuffer will disable cache verification and always\n     * update the underlying WebGL uniform buffer to the GPU.\n     * @returns if Dynamic, otherwise false\n     */\n    UniformBuffer.prototype.isDynamic = function () {\n        return this._dynamic !== undefined;\n    };\n    /**\n     * The data cache on JS side.\n     * @returns the underlying data as a float array\n     */\n    UniformBuffer.prototype.getData = function () {\n        return this._bufferData;\n    };\n    /**\n     * The underlying WebGL Uniform buffer.\n     * @returns the webgl buffer\n     */\n    UniformBuffer.prototype.getBuffer = function () {\n        return this._buffer;\n    };\n    /**\n     * std140 layout specifies how to align data within an UBO structure.\n     * See https://khronos.org/registry/OpenGL/specs/gl/glspec45.core.pdf#page=159\n     * for specs.\n     * @param size\n     */\n    UniformBuffer.prototype._fillAlignment = function (size) {\n        // This code has been simplified because we only use floats, vectors of 1, 2, 3, 4 components\n        // and 4x4 matrices\n        // TODO : change if other types are used\n        var alignment;\n        if (size <= 2) {\n            alignment = size;\n        }\n        else {\n            alignment = 4;\n        }\n        if (this._uniformLocationPointer % alignment !== 0) {\n            var oldPointer = this._uniformLocationPointer;\n            this._uniformLocationPointer += alignment - (this._uniformLocationPointer % alignment);\n            var diff = this._uniformLocationPointer - oldPointer;\n            for (var i = 0; i < diff; i++) {\n                this._data.push(0);\n            }\n        }\n    };\n    /**\n     * Adds an uniform in the buffer.\n     * Warning : the subsequents calls of this function must be in the same order as declared in the shader\n     * for the layout to be correct ! The addUniform function only handles types like float, vec2, vec3, vec4, mat4,\n     * meaning size=1,2,3,4 or 16. It does not handle struct types.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     * @param size Data size, or data directly.\n     * @param arraySize The number of elements in the array, 0 if not an array.\n     */\n    UniformBuffer.prototype.addUniform = function (name, size, arraySize) {\n        if (arraySize === void 0) { arraySize = 0; }\n        if (this._noUBO) {\n            return;\n        }\n        if (this._uniformLocations[name] !== undefined) {\n            // Already existing uniform\n            return;\n        }\n        // This function must be called in the order of the shader layout !\n        // size can be the size of the uniform, or data directly\n        var data;\n        // std140 FTW...\n        if (arraySize > 0) {\n            if (size instanceof Array) {\n                throw \"addUniform should not be use with Array in UBO: \" + name;\n            }\n            this._fillAlignment(4);\n            this._uniformArraySizes[name] = { strideSize: size, arraySize: arraySize };\n            if (size == 16) {\n                size = size * arraySize;\n            }\n            else {\n                var perElementPadding = 4 - size;\n                var totalPadding = perElementPadding * arraySize;\n                size = size * arraySize + totalPadding;\n            }\n            data = [];\n            // Fill with zeros\n            for (var i = 0; i < size; i++) {\n                data.push(0);\n            }\n        }\n        else {\n            if (size instanceof Array) {\n                data = size;\n                size = data.length;\n            }\n            else {\n                size = size;\n                data = [];\n                // Fill with zeros\n                for (var i = 0; i < size; i++) {\n                    data.push(0);\n                }\n            }\n            this._fillAlignment(size);\n        }\n        this._uniformSizes[name] = size;\n        this._uniformLocations[name] = this._uniformLocationPointer;\n        this._uniformLocationPointer += size;\n        for (var i = 0; i < size; i++) {\n            this._data.push(data[i]);\n        }\n        this._needSync = true;\n    };\n    /**\n     * Adds a Matrix 4x4 to the uniform buffer.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     * @param mat A 4x4 matrix.\n     */\n    UniformBuffer.prototype.addMatrix = function (name, mat) {\n        this.addUniform(name, Array.prototype.slice.call(mat.toArray()));\n    };\n    /**\n     * Adds a vec2 to the uniform buffer.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     * @param x Define the x component value of the vec2\n     * @param y Define the y component value of the vec2\n     */\n    UniformBuffer.prototype.addFloat2 = function (name, x, y) {\n        var temp = [x, y];\n        this.addUniform(name, temp);\n    };\n    /**\n     * Adds a vec3 to the uniform buffer.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     * @param x Define the x component value of the vec3\n     * @param y Define the y component value of the vec3\n     * @param z Define the z component value of the vec3\n     */\n    UniformBuffer.prototype.addFloat3 = function (name, x, y, z) {\n        var temp = [x, y, z];\n        this.addUniform(name, temp);\n    };\n    /**\n     * Adds a vec3 to the uniform buffer.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     * @param color Define the vec3 from a Color\n     */\n    UniformBuffer.prototype.addColor3 = function (name, color) {\n        var temp = [color.r, color.g, color.b];\n        this.addUniform(name, temp);\n    };\n    /**\n     * Adds a vec4 to the uniform buffer.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     * @param color Define the rgb components from a Color\n     * @param alpha Define the a component of the vec4\n     */\n    UniformBuffer.prototype.addColor4 = function (name, color, alpha) {\n        var temp = [color.r, color.g, color.b, alpha];\n        this.addUniform(name, temp);\n    };\n    /**\n     * Adds a vec3 to the uniform buffer.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     * @param vector Define the vec3 components from a Vector\n     */\n    UniformBuffer.prototype.addVector3 = function (name, vector) {\n        var temp = [vector.x, vector.y, vector.z];\n        this.addUniform(name, temp);\n    };\n    /**\n     * Adds a Matrix 3x3 to the uniform buffer.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     */\n    UniformBuffer.prototype.addMatrix3x3 = function (name) {\n        this.addUniform(name, 12);\n    };\n    /**\n     * Adds a Matrix 2x2 to the uniform buffer.\n     * @param name Name of the uniform, as used in the uniform block in the shader.\n     */\n    UniformBuffer.prototype.addMatrix2x2 = function (name) {\n        this.addUniform(name, 8);\n    };\n    /**\n     * Effectively creates the WebGL Uniform Buffer, once layout is completed with `addUniform`.\n     */\n    UniformBuffer.prototype.create = function () {\n        if (this._noUBO) {\n            return;\n        }\n        if (this._buffer) {\n            return; // nothing to do\n        }\n        // See spec, alignment must be filled as a vec4\n        this._fillAlignment(4);\n        this._bufferData = new Float32Array(this._data);\n        this._rebuild();\n        this._needSync = true;\n    };\n    /** @hidden */\n    UniformBuffer.prototype._rebuild = function () {\n        if (this._noUBO || !this._bufferData) {\n            return;\n        }\n        if (this._dynamic) {\n            this._buffer = this._engine.createDynamicUniformBuffer(this._bufferData);\n        }\n        else {\n            this._buffer = this._engine.createUniformBuffer(this._bufferData);\n        }\n        if (this._engine._features.trackUbosInFrame) {\n            this._buffers.push([this._buffer, this._engine._features.checkUbosContentBeforeUpload ? this._bufferData.slice() : undefined]);\n            this._bufferIndex = this._buffers.length - 1;\n            this._createBufferOnWrite = false;\n        }\n    };\n    Object.defineProperty(UniformBuffer.prototype, \"_numBuffers\", {\n        /** @hidden */\n        get: function () {\n            return this._buffers.length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(UniformBuffer.prototype, \"_indexBuffer\", {\n        /** @hidden */\n        get: function () {\n            return this._bufferIndex;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(UniformBuffer.prototype, \"name\", {\n        /** Gets the name of this buffer */\n        get: function () {\n            return this._name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    UniformBuffer.prototype._buffersEqual = function (buf1, buf2) {\n        for (var i = 0; i < buf1.length; ++i) {\n            if (buf1[i] !== buf2[i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n    UniformBuffer.prototype._copyBuffer = function (src, dst) {\n        for (var i = 0; i < src.length; ++i) {\n            dst[i] = src[i];\n        }\n    };\n    /**\n     * Updates the WebGL Uniform Buffer on the GPU.\n     * If the `dynamic` flag is set to true, no cache comparison is done.\n     * Otherwise, the buffer will be updated only if the cache differs.\n     */\n    UniformBuffer.prototype.update = function () {\n        if (this._noUBO) {\n            return;\n        }\n        this.bindUniformBuffer();\n        if (!this._buffer) {\n            this.create();\n            return;\n        }\n        if (!this._dynamic && !this._needSync) {\n            this._createBufferOnWrite = this._engine._features.trackUbosInFrame;\n            return;\n        }\n        if (this._buffers && this._buffers.length > 1 && this._buffers[this._bufferIndex][1]) {\n            if (this._buffersEqual(this._bufferData, this._buffers[this._bufferIndex][1])) {\n                this._needSync = false;\n                this._createBufferOnWrite = this._engine._features.trackUbosInFrame;\n                return;\n            }\n            else {\n                this._copyBuffer(this._bufferData, this._buffers[this._bufferIndex][1]);\n            }\n        }\n        this._engine.updateUniformBuffer(this._buffer, this._bufferData);\n        if (this._engine._features._collectUbosUpdatedInFrame) {\n            if (!UniformBuffer._UpdatedUbosInFrame[this._name]) {\n                UniformBuffer._UpdatedUbosInFrame[this._name] = 0;\n            }\n            UniformBuffer._UpdatedUbosInFrame[this._name]++;\n        }\n        this._needSync = false;\n        this._createBufferOnWrite = this._engine._features.trackUbosInFrame;\n    };\n    UniformBuffer.prototype._createNewBuffer = function () {\n        if (this._bufferIndex + 1 < this._buffers.length) {\n            this._bufferIndex++;\n            this._buffer = this._buffers[this._bufferIndex][0];\n            this._createBufferOnWrite = false;\n            this._needSync = true;\n        }\n        else {\n            this._rebuild();\n        }\n    };\n    UniformBuffer.prototype._checkNewFrame = function () {\n        if (this._engine._features.trackUbosInFrame && this._currentFrameId !== this._engine.frameId) {\n            this._currentFrameId = this._engine.frameId;\n            this._createBufferOnWrite = false;\n            if (this._buffers && this._buffers.length > 0) {\n                this._needSync = this._bufferIndex !== 0;\n                this._bufferIndex = 0;\n                this._buffer = this._buffers[this._bufferIndex][0];\n            }\n            else {\n                this._bufferIndex = -1;\n            }\n        }\n    };\n    /**\n     * Updates the value of an uniform. The `update` method must be called afterwards to make it effective in the GPU.\n     * @param uniformName Define the name of the uniform, as used in the uniform block in the shader.\n     * @param data Define the flattened data\n     * @param size Define the size of the data.\n     */\n    UniformBuffer.prototype.updateUniform = function (uniformName, data, size) {\n        this._checkNewFrame();\n        var location = this._uniformLocations[uniformName];\n        if (location === undefined) {\n            if (this._buffer) {\n                // Cannot add an uniform if the buffer is already created\n                Logger.Error(\"Cannot add an uniform after UBO has been created.\");\n                return;\n            }\n            this.addUniform(uniformName, size);\n            location = this._uniformLocations[uniformName];\n        }\n        if (!this._buffer) {\n            this.create();\n        }\n        if (!this._dynamic) {\n            // Cache for static uniform buffers\n            var changed = false;\n            for (var i = 0; i < size; i++) {\n                // We are checking the matrix cache before calling updateUniform so we do not need to check it here\n                // Hence the test for size === 16 to simply commit the matrix values\n                if ((size === 16 && !this._engine._features.uniformBufferHardCheckMatrix) || this._bufferData[location + i] !== Tools.FloatRound(data[i])) {\n                    changed = true;\n                    if (this._createBufferOnWrite) {\n                        this._createNewBuffer();\n                    }\n                    this._bufferData[location + i] = data[i];\n                }\n            }\n            this._needSync = this._needSync || changed;\n        }\n        else {\n            // No cache for dynamic\n            for (var i = 0; i < size; i++) {\n                this._bufferData[location + i] = data[i];\n            }\n        }\n    };\n    /**\n     * Updates the value of an uniform. The `update` method must be called afterwards to make it effective in the GPU.\n     * @param uniformName Define the name of the uniform, as used in the uniform block in the shader.\n     * @param data Define the flattened data\n     * @param size Define the size of the data.\n     */\n    UniformBuffer.prototype.updateUniformArray = function (uniformName, data, size) {\n        this._checkNewFrame();\n        var location = this._uniformLocations[uniformName];\n        if (location === undefined) {\n            Logger.Error(\"Cannot add an uniform Array dynamically. Please, add it using addUniform.\");\n            return;\n        }\n        if (!this._buffer) {\n            this.create();\n        }\n        var arraySizes = this._uniformArraySizes[uniformName];\n        if (!this._dynamic) {\n            // Cache for static uniform buffers\n            var changed = false;\n            var countToFour = 0;\n            var baseStride = 0;\n            for (var i = 0; i < size; i++) {\n                if (this._bufferData[location + baseStride * 4 + countToFour] !== Tools.FloatRound(data[i])) {\n                    changed = true;\n                    if (this._createBufferOnWrite) {\n                        this._createNewBuffer();\n                    }\n                    this._bufferData[location + baseStride * 4 + countToFour] = data[i];\n                }\n                countToFour++;\n                if (countToFour === arraySizes.strideSize) {\n                    for (; countToFour < 4; countToFour++) {\n                        this._bufferData[location + baseStride * 4 + countToFour] = 0;\n                    }\n                    countToFour = 0;\n                    baseStride++;\n                }\n            }\n            this._needSync = this._needSync || changed;\n        }\n        else {\n            // No cache for dynamic\n            for (var i = 0; i < size; i++) {\n                this._bufferData[location + i] = data[i];\n            }\n        }\n    };\n    UniformBuffer.prototype._cacheMatrix = function (name, matrix) {\n        this._checkNewFrame();\n        var cache = this._valueCache[name];\n        var flag = matrix.updateFlag;\n        if (cache !== undefined && cache === flag) {\n            return false;\n        }\n        this._valueCache[name] = flag;\n        return true;\n    };\n    // Update methods\n    UniformBuffer.prototype._updateMatrix3x3ForUniform = function (name, matrix) {\n        // To match std140, matrix must be realigned\n        for (var i = 0; i < 3; i++) {\n            UniformBuffer._TempBuffer[i * 4] = matrix[i * 3];\n            UniformBuffer._TempBuffer[i * 4 + 1] = matrix[i * 3 + 1];\n            UniformBuffer._TempBuffer[i * 4 + 2] = matrix[i * 3 + 2];\n            UniformBuffer._TempBuffer[i * 4 + 3] = 0.0;\n        }\n        this.updateUniform(name, UniformBuffer._TempBuffer, 12);\n    };\n    UniformBuffer.prototype._updateMatrix3x3ForEffect = function (name, matrix) {\n        this._currentEffect.setMatrix3x3(name, matrix);\n    };\n    UniformBuffer.prototype._updateMatrix2x2ForEffect = function (name, matrix) {\n        this._currentEffect.setMatrix2x2(name, matrix);\n    };\n    UniformBuffer.prototype._updateMatrix2x2ForUniform = function (name, matrix) {\n        // To match std140, matrix must be realigned\n        for (var i = 0; i < 2; i++) {\n            UniformBuffer._TempBuffer[i * 4] = matrix[i * 2];\n            UniformBuffer._TempBuffer[i * 4 + 1] = matrix[i * 2 + 1];\n            UniformBuffer._TempBuffer[i * 4 + 2] = 0.0;\n            UniformBuffer._TempBuffer[i * 4 + 3] = 0.0;\n        }\n        this.updateUniform(name, UniformBuffer._TempBuffer, 8);\n    };\n    UniformBuffer.prototype._updateFloatForEffect = function (name, x) {\n        this._currentEffect.setFloat(name, x);\n    };\n    UniformBuffer.prototype._updateFloatForUniform = function (name, x) {\n        UniformBuffer._TempBuffer[0] = x;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 1);\n    };\n    UniformBuffer.prototype._updateFloat2ForEffect = function (name, x, y, suffix) {\n        if (suffix === void 0) { suffix = \"\"; }\n        this._currentEffect.setFloat2(name + suffix, x, y);\n    };\n    UniformBuffer.prototype._updateFloat2ForUniform = function (name, x, y) {\n        UniformBuffer._TempBuffer[0] = x;\n        UniformBuffer._TempBuffer[1] = y;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 2);\n    };\n    UniformBuffer.prototype._updateFloat3ForEffect = function (name, x, y, z, suffix) {\n        if (suffix === void 0) { suffix = \"\"; }\n        this._currentEffect.setFloat3(name + suffix, x, y, z);\n    };\n    UniformBuffer.prototype._updateFloat3ForUniform = function (name, x, y, z) {\n        UniformBuffer._TempBuffer[0] = x;\n        UniformBuffer._TempBuffer[1] = y;\n        UniformBuffer._TempBuffer[2] = z;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 3);\n    };\n    UniformBuffer.prototype._updateFloat4ForEffect = function (name, x, y, z, w, suffix) {\n        if (suffix === void 0) { suffix = \"\"; }\n        this._currentEffect.setFloat4(name + suffix, x, y, z, w);\n    };\n    UniformBuffer.prototype._updateFloat4ForUniform = function (name, x, y, z, w) {\n        UniformBuffer._TempBuffer[0] = x;\n        UniformBuffer._TempBuffer[1] = y;\n        UniformBuffer._TempBuffer[2] = z;\n        UniformBuffer._TempBuffer[3] = w;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 4);\n    };\n    UniformBuffer.prototype._updateFloatArrayForEffect = function (name, array) {\n        this._currentEffect.setFloatArray(name, array);\n    };\n    UniformBuffer.prototype._updateFloatArrayForUniform = function (name, array) {\n        this.updateUniformArray(name, array, array.length);\n    };\n    UniformBuffer.prototype._updateArrayForEffect = function (name, array) {\n        this._currentEffect.setArray(name, array);\n    };\n    UniformBuffer.prototype._updateArrayForUniform = function (name, array) {\n        this.updateUniformArray(name, array, array.length);\n    };\n    UniformBuffer.prototype._updateIntArrayForEffect = function (name, array) {\n        this._currentEffect.setIntArray(name, array);\n    };\n    UniformBuffer.prototype._updateIntArrayForUniform = function (name, array) {\n        UniformBuffer._TempBufferInt32View.set(array);\n        this.updateUniformArray(name, UniformBuffer._TempBuffer, array.length);\n    };\n    UniformBuffer.prototype._updateMatrixForEffect = function (name, mat) {\n        this._currentEffect.setMatrix(name, mat);\n    };\n    UniformBuffer.prototype._updateMatrixForUniform = function (name, mat) {\n        if (this._cacheMatrix(name, mat)) {\n            this.updateUniform(name, mat.toArray(), 16);\n        }\n    };\n    UniformBuffer.prototype._updateMatricesForEffect = function (name, mat) {\n        this._currentEffect.setMatrices(name, mat);\n    };\n    UniformBuffer.prototype._updateMatricesForUniform = function (name, mat) {\n        this.updateUniform(name, mat, mat.length);\n    };\n    UniformBuffer.prototype._updateVector3ForEffect = function (name, vector) {\n        this._currentEffect.setVector3(name, vector);\n    };\n    UniformBuffer.prototype._updateVector3ForUniform = function (name, vector) {\n        UniformBuffer._TempBuffer[0] = vector.x;\n        UniformBuffer._TempBuffer[1] = vector.y;\n        UniformBuffer._TempBuffer[2] = vector.z;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 3);\n    };\n    UniformBuffer.prototype._updateVector4ForEffect = function (name, vector) {\n        this._currentEffect.setVector4(name, vector);\n    };\n    UniformBuffer.prototype._updateVector4ForUniform = function (name, vector) {\n        UniformBuffer._TempBuffer[0] = vector.x;\n        UniformBuffer._TempBuffer[1] = vector.y;\n        UniformBuffer._TempBuffer[2] = vector.z;\n        UniformBuffer._TempBuffer[3] = vector.w;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 4);\n    };\n    UniformBuffer.prototype._updateColor3ForEffect = function (name, color, suffix) {\n        if (suffix === void 0) { suffix = \"\"; }\n        this._currentEffect.setColor3(name + suffix, color);\n    };\n    UniformBuffer.prototype._updateColor3ForUniform = function (name, color) {\n        UniformBuffer._TempBuffer[0] = color.r;\n        UniformBuffer._TempBuffer[1] = color.g;\n        UniformBuffer._TempBuffer[2] = color.b;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 3);\n    };\n    UniformBuffer.prototype._updateColor4ForEffect = function (name, color, alpha, suffix) {\n        if (suffix === void 0) { suffix = \"\"; }\n        this._currentEffect.setColor4(name + suffix, color, alpha);\n    };\n    UniformBuffer.prototype._updateDirectColor4ForEffect = function (name, color, suffix) {\n        if (suffix === void 0) { suffix = \"\"; }\n        this._currentEffect.setDirectColor4(name + suffix, color);\n    };\n    UniformBuffer.prototype._updateColor4ForUniform = function (name, color, alpha) {\n        UniformBuffer._TempBuffer[0] = color.r;\n        UniformBuffer._TempBuffer[1] = color.g;\n        UniformBuffer._TempBuffer[2] = color.b;\n        UniformBuffer._TempBuffer[3] = alpha;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 4);\n    };\n    UniformBuffer.prototype._updateDirectColor4ForUniform = function (name, color) {\n        UniformBuffer._TempBuffer[0] = color.r;\n        UniformBuffer._TempBuffer[1] = color.g;\n        UniformBuffer._TempBuffer[2] = color.b;\n        UniformBuffer._TempBuffer[3] = color.a;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 4);\n    };\n    UniformBuffer.prototype._updateIntForEffect = function (name, x, suffix) {\n        if (suffix === void 0) { suffix = \"\"; }\n        this._currentEffect.setInt(name + suffix, x);\n    };\n    UniformBuffer.prototype._updateIntForUniform = function (name, x) {\n        UniformBuffer._TempBufferInt32View[0] = x;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 1);\n    };\n    UniformBuffer.prototype._updateInt2ForEffect = function (name, x, y, suffix) {\n        if (suffix === void 0) { suffix = \"\"; }\n        this._currentEffect.setInt2(name + suffix, x, y);\n    };\n    UniformBuffer.prototype._updateInt2ForUniform = function (name, x, y) {\n        UniformBuffer._TempBufferInt32View[0] = x;\n        UniformBuffer._TempBufferInt32View[1] = y;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 2);\n    };\n    UniformBuffer.prototype._updateInt3ForEffect = function (name, x, y, z, suffix) {\n        if (suffix === void 0) { suffix = \"\"; }\n        this._currentEffect.setInt3(name + suffix, x, y, z);\n    };\n    UniformBuffer.prototype._updateInt3ForUniform = function (name, x, y, z) {\n        UniformBuffer._TempBufferInt32View[0] = x;\n        UniformBuffer._TempBufferInt32View[1] = y;\n        UniformBuffer._TempBufferInt32View[2] = z;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 3);\n    };\n    UniformBuffer.prototype._updateInt4ForEffect = function (name, x, y, z, w, suffix) {\n        if (suffix === void 0) { suffix = \"\"; }\n        this._currentEffect.setInt4(name + suffix, x, y, z, w);\n    };\n    UniformBuffer.prototype._updateInt4ForUniform = function (name, x, y, z, w) {\n        UniformBuffer._TempBufferInt32View[0] = x;\n        UniformBuffer._TempBufferInt32View[1] = y;\n        UniformBuffer._TempBufferInt32View[2] = z;\n        UniformBuffer._TempBufferInt32View[3] = w;\n        this.updateUniform(name, UniformBuffer._TempBuffer, 4);\n    };\n    /**\n     * Sets a sampler uniform on the effect.\n     * @param name Define the name of the sampler.\n     * @param texture Define the texture to set in the sampler\n     */\n    UniformBuffer.prototype.setTexture = function (name, texture) {\n        this._currentEffect.setTexture(name, texture);\n    };\n    /**\n     * Directly updates the value of the uniform in the cache AND on the GPU.\n     * @param uniformName Define the name of the uniform, as used in the uniform block in the shader.\n     * @param data Define the flattened data\n     */\n    UniformBuffer.prototype.updateUniformDirectly = function (uniformName, data) {\n        this.updateUniform(uniformName, data, data.length);\n        this.update();\n    };\n    /**\n     * Associates an effect to this uniform buffer\n     * @param effect Define the effect to associate the buffer to\n     * @param name Name of the uniform block in the shader.\n     */\n    UniformBuffer.prototype.bindToEffect = function (effect, name) {\n        this._currentEffect = effect;\n        this._currentEffectName = name;\n    };\n    /**\n     * Binds the current (GPU) buffer to the effect\n     */\n    UniformBuffer.prototype.bindUniformBuffer = function () {\n        if (!this._noUBO && this._buffer && this._currentEffect) {\n            this._currentEffect.bindUniformBuffer(this._buffer, this._currentEffectName);\n        }\n    };\n    /**\n     * Dissociates the current effect from this uniform buffer\n     */\n    UniformBuffer.prototype.unbindEffect = function () {\n        this._currentEffect = undefined;\n        this._currentEffectName = undefined;\n    };\n    /**\n     * Sets the current state of the class (_bufferIndex, _buffer) to point to the data buffer passed in parameter if this buffer is one of the buffers handled by the class (meaning if it can be found in the _buffers array)\n     * This method is meant to be able to update a buffer at any time: just call setDataBuffer to set the class in the right state, call some updateXXX methods and then call udpate() => that will update the GPU buffer on the graphic card\n     * @param dataBuffer buffer to look for\n     * @returns true if the buffer has been found and the class internal state points to it, else false\n     */\n    UniformBuffer.prototype.setDataBuffer = function (dataBuffer) {\n        if (!this._buffers) {\n            return this._buffer === dataBuffer;\n        }\n        for (var b = 0; b < this._buffers.length; ++b) {\n            var buffer = this._buffers[b];\n            if (buffer[0] === dataBuffer) {\n                this._bufferIndex = b;\n                this._buffer = dataBuffer;\n                this._createBufferOnWrite = false;\n                this._currentEffect = undefined;\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Disposes the uniform buffer.\n     */\n    UniformBuffer.prototype.dispose = function () {\n        if (this._noUBO) {\n            return;\n        }\n        var uniformBuffers = this._engine._uniformBuffers;\n        var index = uniformBuffers.indexOf(this);\n        if (index !== -1) {\n            uniformBuffers[index] = uniformBuffers[uniformBuffers.length - 1];\n            uniformBuffers.pop();\n        }\n        if (this._engine._features.trackUbosInFrame && this._buffers) {\n            for (var i = 0; i < this._buffers.length; ++i) {\n                var buffer = this._buffers[i][0];\n                this._engine._releaseBuffer(buffer);\n            }\n        }\n        else if (this._buffer && this._engine._releaseBuffer(this._buffer)) {\n            this._buffer = null;\n        }\n    };\n    /** @hidden */\n    UniformBuffer._UpdatedUbosInFrame = {};\n    // Pool for avoiding memory leaks\n    UniformBuffer._MAX_UNIFORM_SIZE = 256;\n    UniformBuffer._TempBuffer = new Float32Array(UniformBuffer._MAX_UNIFORM_SIZE);\n    UniformBuffer._TempBufferInt32View = new Uint32Array(UniformBuffer._TempBuffer.buffer);\n    return UniformBuffer;\n}());\nexport { UniformBuffer };\n//# sourceMappingURL=uniformBuffer.js.map","/** @hidden */\nvar UniformBufferEffectCommonAccessor = /** @class */ (function () {\n    function UniformBufferEffectCommonAccessor(uboOrEffect) {\n        if (this._isUbo(uboOrEffect)) {\n            this.setMatrix3x3 = uboOrEffect.updateMatrix3x3.bind(uboOrEffect);\n            this.setMatrix2x2 = uboOrEffect.updateMatrix2x2.bind(uboOrEffect);\n            this.setFloat = uboOrEffect.updateFloat.bind(uboOrEffect);\n            this.setFloat2 = uboOrEffect.updateFloat2.bind(uboOrEffect);\n            this.setFloat3 = uboOrEffect.updateFloat3.bind(uboOrEffect);\n            this.setFloat4 = uboOrEffect.updateFloat4.bind(uboOrEffect);\n            this.setFloatArray = uboOrEffect.updateFloatArray.bind(uboOrEffect);\n            this.setArray = uboOrEffect.updateArray.bind(uboOrEffect);\n            this.setIntArray = uboOrEffect.updateIntArray.bind(uboOrEffect);\n            this.setMatrix = uboOrEffect.updateMatrix.bind(uboOrEffect);\n            this.setMatrices = uboOrEffect.updateMatrices.bind(uboOrEffect);\n            this.setVector3 = uboOrEffect.updateVector3.bind(uboOrEffect);\n            this.setVector4 = uboOrEffect.updateVector4.bind(uboOrEffect);\n            this.setColor3 = uboOrEffect.updateColor3.bind(uboOrEffect);\n            this.setColor4 = uboOrEffect.updateColor4.bind(uboOrEffect);\n            this.setDirectColor4 = uboOrEffect.updateDirectColor4.bind(uboOrEffect);\n            this.setInt = uboOrEffect.updateInt.bind(uboOrEffect);\n            this.setInt2 = uboOrEffect.updateInt2.bind(uboOrEffect);\n            this.setInt3 = uboOrEffect.updateInt3.bind(uboOrEffect);\n            this.setInt4 = uboOrEffect.updateInt4.bind(uboOrEffect);\n        }\n        else {\n            this.setMatrix3x3 = uboOrEffect.setMatrix3x3.bind(uboOrEffect);\n            this.setMatrix2x2 = uboOrEffect.setMatrix2x2.bind(uboOrEffect);\n            this.setFloat = uboOrEffect.setFloat.bind(uboOrEffect);\n            this.setFloat2 = uboOrEffect.setFloat2.bind(uboOrEffect);\n            this.setFloat3 = uboOrEffect.setFloat3.bind(uboOrEffect);\n            this.setFloat4 = uboOrEffect.setFloat4.bind(uboOrEffect);\n            this.setFloatArray = uboOrEffect.setFloatArray.bind(uboOrEffect);\n            this.setArray = uboOrEffect.setArray.bind(uboOrEffect);\n            this.setIntArray = uboOrEffect.setIntArray.bind(uboOrEffect);\n            this.setMatrix = uboOrEffect.setMatrix.bind(uboOrEffect);\n            this.setMatrices = uboOrEffect.setMatrices.bind(uboOrEffect);\n            this.setVector3 = uboOrEffect.setVector3.bind(uboOrEffect);\n            this.setVector4 = uboOrEffect.setVector4.bind(uboOrEffect);\n            this.setColor3 = uboOrEffect.setColor3.bind(uboOrEffect);\n            this.setColor4 = uboOrEffect.setColor4.bind(uboOrEffect);\n            this.setDirectColor4 = uboOrEffect.setDirectColor4.bind(uboOrEffect);\n            this.setInt = uboOrEffect.setInt.bind(uboOrEffect);\n            this.setInt2 = uboOrEffect.setInt2.bind(uboOrEffect);\n            this.setInt3 = uboOrEffect.setInt3.bind(uboOrEffect);\n            this.setInt4 = uboOrEffect.setInt4.bind(uboOrEffect);\n        }\n    }\n    UniformBufferEffectCommonAccessor.prototype._isUbo = function (uboOrEffect) {\n        return uboOrEffect.addUniform !== undefined;\n    };\n    return UniformBufferEffectCommonAccessor;\n}());\nexport { UniformBufferEffectCommonAccessor };\n//# sourceMappingURL=uniformBufferEffectCommonAccessor.js.map"],"names":["ThinRenderTargetTexture","_super","engine","size","options","_this","call","this","_renderTarget","_engine","_renderTargetOptions","resize","Object","defineProperty","prototype","get","enumerable","configurable","_a","dispose","_texture","_size","createRenderTargetTexture","renderTarget","texture","getInternalTexture","getClassName","disposeOnlyFramebuffers","ThinTexture","internalTexture","_wrapU","_wrapV","wrapR","anisotropicFilteringLevel","delayLoadState","_cachedSize","_cachedBaseSize","_initialSamplingMode","getEngine","set","value","isCube","is3D","is2DArray","isReady","delayLoad","getSize","width","height","getBaseSize","baseWidth","baseHeight","samplingMode","updateSamplingMode","updateTextureSamplingMode","releaseInternalTexture","removeSource","video","firstChild","removeChild","srcObject","src","removeAttribute","VideoTexture","name","scene","generateMipMaps","invertY","settings","onError","_onUserActionRequestedObservable","_stillImageCaptured","_displayingPosterTexture","_frameId","_currentSrc","_errorFound","_createInternalTexture","_getEngine","needPOTTextures","videoWidth","videoHeight","wrapU","wrapV","_generateMipMaps","createDynamicTexture","autoplay","_settings","poster","_updateInternalTexture","onLoadObservable","hasObservers","notifyObservers","oldHandler_1","onplaying","oldMuted_1","muted","pause","_handlePlay","_reset","readyState","HAVE_CURRENT_DATA","frameId","getScene","getFrameId","updateVideoTexture","_invertY","autoPlay","loop","autoUpdateTexture","_onError","_getName","_getVideo","undefined","setAttribute","addEventListener","_createInternalTextureOnEvent","videoHasEnoughData","createTexture","_processError","reason","message","play","catch","otherReason","HTMLVideoElement","currentSrc","toString","isNative","document","createElement","forEach","url","source","appendChild","onDisposeObservable","addOnce","_rebuild","update","updateTexture","isVisible","paused","updateURL","clone","clear","removeEventListener","CreateFromStreamAsync","stream","constraints","createVideoElement","_badOS","body","style","transform","opacity","position","bottom","right","mozSrcObject","window","URL","webkitURL","mozURL","msURL","createObjectURL","Promise","resolve","onPlaying","videoTexture","remove","CreateFromWebCamAsync","audioConstaints","constraintsDeviceId","deviceId","exact","navigator","mediaDevices","getUserMedia","audio","then","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","min","minWidth","max","maxWidth","minHeight","maxHeight","e","reject","CreateFromWebCam","onReady","err","ColorCurves","_dirty","_tempColor","_globalCurve","_highlightsCurve","_midtonesCurve","_shadowsCurve","_positiveCurve","_negativeCurve","_globalHue","_globalDensity","_globalSaturation","_globalExposure","_highlightsHue","_highlightsDensity","_highlightsSaturation","_highlightsExposure","_midtonesHue","_midtonesDensity","_midtonesSaturation","_midtonesExposure","_shadowsHue","_shadowsDensity","_shadowsSaturation","_shadowsExposure","Bind","colorCurves","effect","positiveUniform","neutralUniform","negativeUniform","_getColorGradingDataToRef","multiplyToRef","subtractToRef","setFloat4","r","g","b","a","PrepareUniforms","uniformsList","push","hue","density","saturation","exposure","result","_Clamp","_ApplyColorGradingSliderNonlinear","_FromHSBToRef","scaleToRef","x","Math","abs","pow","brightness","h","s","v","i","floor","f","p","q","t","serialize","Parse","DrawWrapper","createMaterialContext","defines","drawContext","createDrawContext","materialContext","IsWrapper","getPipelineContext","GetEffect","setEffect","resetContext","reset","Effect","baseName","attributesNamesOrOptions","uniformsNamesOrEngine","samplers","fallbacks","onCompiled","indexParameters","key","shaderLanguage","_b","_c","onBind","uniqueId","onCompileObservable","onErrorObservable","_onBindObservable","_wasPreviouslyReady","_isDisposed","_bonesComputationForcedToCPU","_uniformBuffersNames","_multiTarget","_samplers","_isReady","_compilationError","_allFallbacksProcessed","_uniforms","_key","_fallbacks","_vertexSourceCodeOverride","_fragmentSourceCodeOverride","_transformFeedbackVaryings","_pipelineContext","_vertexSourceCode","_fragmentSourceCode","_rawVertexSourceCode","_rawFragmentSourceCode","vertexSource","fragmentSource","processCodeAfterIncludes","processFinalCode","attributes","_attributesNames","_uniformsNames","uniformsNames","concat","_samplerList","slice","_indexParameters","transformFeedbackVaryings","multiTarget","_shaderLanguage","uniformBuffersNames","_uniformBuffersNamesList","length","_attributeLocationByName","_UniqueIdSeed","hostDocument","getHostDocument","vertexElement","getElementById","vertex","fragmentElement","fragment","_processingContext","_getShaderProcessingContext","processorOptions","split","isFragment","shouldUseHighPrecisionShader","_shouldUseHighPrecisionShader","processor","_getShaderProcessor","supportsUniformBuffers","shadersRepository","includesShadersStore","version","platformName","shaderPlatformName","processingContext","isNDCHalfZRange","useReverseDepthBuffer","shaderCodes","shadersLoaded","migratedVertexCode_1","fragmentCode","migratedFragmentCode","finalShaders","_useFinalCode","vertexCode","_loadShader","migratedVertexCode","repo","spectorName","_prepareEffect","_isReadyInternal","getAttributesNames","getAttributeLocation","index","_attributes","getAttributeLocationByName","getAttributesCount","getUniformIndex","uniformName","indexOf","getUniform","getSamplers","getUniformNames","getUniformBuffersNames","getIndexParameters","getCompilationError","allFallbacksProcessed","executeWhenCompiled","func","add","isAsync","setTimeout","_checkIsReady","previousPipelineContext","_processCompilationErrors","shader","optionalKey","callback","HTMLElement","substr","shaderUrl","shaderStore","_loadFile","toLowerCase","atob","_getVertexShaderCode","_getFragmentShaderCode","_rebuildProgram","vertexSourceCode","fragmentSourceCode","error","scenes","markAllMaterialsAsDirty","_handlesSpectorRebuildCallback","attributesNames","engine_1","createPipelineContext","_name","rebuildRebind","bind","_preparePipelineContext","_executeWhenRenderingStateIsCompiled","_fillEffectInformation","name_1","bindSamplers","unBindMesh","_deletePipelineContext","_getShaderCodeAndErrorLine","code","regexp","errorLine","res","match","lineNumber","parseInt","lines","_d","_e","map","uniform","attribute","LogShaderCodeOnCompilationError","lineErrorVertex","lineErrorFragment","hasMoreFallbacks","reduce","_bindTexture","channel","setTexture","setDepthStencilTexture","setTextureArray","textures","exName","initialPos","currentExName","splice","channelIndex","_i","setTextureFromPostProcess","postProcess","setTextureFromPostProcessOutput","bindUniformBuffer","buffer","bufferName","_BaseCache","_features","useUBOBindingCache","bindUniformBufferBase","bindUniformBlock","blockName","setInt","setInt2","y","setInt3","z","setInt4","w","setIntArray","array","setIntArray2","setIntArray3","setIntArray4","setFloatArray","setArray","setFloatArray2","setArray2","setFloatArray3","setArray3","setFloatArray4","setArray4","setMatrices","matrices","setMatrix","matrix","setMatrix3x3","setMatrix2x2","setFloat","setBool","bool","setVector2","vector2","setFloat2","setVector3","vector3","setFloat3","setVector4","vector4","setQuaternion","quaternion","setColor3","color3","setColor4","alpha","setDirectColor4","color4","_releaseEffect","RegisterShader","pixelShader","vertexShader","ResetCache","ShadersStore","IncludesShadersStore","EffectFallbacks","_defines","_currentRank","_maxRank","_mesh","addFallback","rank","define","Array","addCPUSkinningFallback","mesh","currentDefines","computeBonesUsingShaders","numBoneInfluencers","replace","meshes","otherMesh","material","getEffect","subMeshes","currentFallbacks","EffectRenderer","_DefaultOptions","_fullscreenViewport","_vertexBuffers","positions","_indexBuffer","createIndexBuffer","indices","_onContextRestoredObserver","onContextRestoredObservable","setViewport","viewport","bindBuffers","applyEffectWrapper","effectWrapper","depthCullingState","depthTest","stencilState","stencilTest","enableEffect","_drawWrapper","onApplyObservable","restoreStates","draw","drawElementsType","_isRenderTargetTexture","render","outputTexture","out","bindFramebuffer","unBindFramebuffer","vertexBuffer","_releaseBuffer","EffectWrapper","creationOptions","effectCreationOptions","uniformNames","fragmentShader","join","useShaderStore","createEffect","attributeNames","samplerNames","ImageProcessingConfigurationDefines","IMAGEPROCESSING","VIGNETTE","VIGNETTEBLENDMODEMULTIPLY","VIGNETTEBLENDMODEOPAQUE","TONEMAPPING","TONEMAPPING_ACES","CONTRAST","COLORCURVES","COLORGRADING","COLORGRADING3D","SAMPLER3DGREENDEPTH","SAMPLER3DBGRMAP","IMAGEPROCESSINGPOSTPROCESS","EXPOSURE","SKIPFINALCOLORCLAMP","rebuild","ImageProcessingConfiguration","_colorCurvesEnabled","_colorGradingEnabled","_colorGradingWithGreenDepth","_colorGradingBGR","_exposure","_toneMappingEnabled","_toneMappingType","TONEMAPPING_STANDARD","_contrast","vignetteStretch","vignetteCentreX","vignetteCentreY","vignetteWeight","vignetteColor","vignetteCameraFov","_vignetteBlendMode","VIGNETTEMODE_MULTIPLY","_vignetteEnabled","_skipFinalColorClamp","_applyByPostProcess","_isEnabled","onUpdateParameters","_updateParameters","_colorGradingTexture","uniforms","PrepareSamplers","samplersList","prepareDefines","forPostProcess","applyByPostProcess","skipFinalColorClamp","vignetteEnabled","vignetteBlendMode","_VIGNETTEMODE_MULTIPLY","toneMappingEnabled","contrast","colorCurvesEnabled","colorGradingEnabled","colorGradingTexture","colorGradingWithGreenDepth","colorGradingBGR","overrideAspectRatio","inverseWidth","getRenderWidth","inverseHeight","getRenderHeight","aspectRatio","vignetteScaleY","tan","vignetteScaleX","vignetteScaleGeometricMean","sqrt","vignettePower","textureSize","level","_VIGNETTEMODE_OPAQUE","FresnelParameters","bias","power","leftColor","rightColor","isEnabled","newFresnelParameters","equals","otherFresnelParameters","asArray","parsedFresnelParameters","MapMap","mm","Map","m","ShadowDepthWrapper","baseMaterial","_baseMaterial","_scene","_options","_subMeshToEffect","_subMeshToDepthWrapper","_meshes","_onEffectCreatedObserver","onEffectCreatedObservable","params","subMesh","getMesh","has","iterator","keys","next","done","delete","currentRenderPassId","standalone","shadowGenerator","passIdForDrawWrapper","entry","drawWrapper","mainDrawWrapper","isReadyForSubMesh","useInstances","_makeEffect","entries","observer","origEffectAndRenderPassId","origEffect","origRenderPassId","_getDrawWrapper","depthDefines","token","rawVertexSourceCode","rawFragmentSourceCode","vertexNormalBiasCode","remappedVariables","vertexMetricCode","fragmentSoftTransparentShadow","fragmentBlockCode","hasLocationForSoftTransparentShadow","hasLocationForFragment","fragmentCodeToInjectAtEnd","vertexToken","fragmentToken","id","createPBRAnisotropicPlugin","createPBRBRDFPlugin","createPBRClearCoatPlugin","createPBRIridescencePlugin","createPBRSheenPlugin","createPBRSubSurfacePlugin","createDetailMapPlugin","MaterialDetailMapDefines","apply","arguments","DETAIL","DETAILDIRECTUV","DETAIL_NORMALBLENDMETHOD","DetailMapConfiguration","addToPluginList","diffuseBlendLevel","roughnessBlendLevel","bumpLevel","_normalBlendMethod","_internalMarkAllSubMeshesAsTexturesDirty","_dirtyCallbacks","_markAllSubMeshesAsTexturesDirty","_enable","_areTexturesDirty","texturesEnabled","getCaps","standardDerivatives","bindForSubMesh","uniformBuffer","isFrozen","_material","useUbo","isSync","updateFloat4","coordinatesIndex","hasTexture","getActiveTextures","activeTextures","getAnimatables","animatables","animations","forceDisposeTextures","getUniforms","ubo","type","MaterialStencilState","enabled","mask","funcRef","funcMask","opStencilFail","opDepthFail","opStencilDepthPass","_func","_funcRef","_funcMask","_opStencilFail","_opDepthFail","_opStencilDepthPass","_mask","_enabled","copyTo","parse","rootUrl","Material","doNotAdd","shadowDepthWrapper","allowShaderHotSwapping","metadata","reservedDataStore","checkReadyOnEveryCall","checkReadyOnlyOnce","state","_alpha","_backFaceCulling","_cullBackFaces","getRenderTargetTextures","doNotSerialize","_storeEffectOnSubMeshes","_onDisposeObserver","_onUnBindObservable","_onBindObserver","_alphaMode","_needDepthPrePass","disableDepthWrite","disableColorWrite","forceDepthWrite","depthFunction","separateCullingPass","_fogEnabled","pointSize","zOffset","zOffsetUnits","stencil","_useUBO","_fillMode","TriangleFillMode","_cachedDepthWriteState","_cachedColorWriteState","_cachedDepthFunctionState","_indexInSceneMaterialArray","meshMap","_parentContainer","_uniformBufferLayoutBuilt","_eventInfo","_callbackPluginEventGeneric","_callbackPluginEventIsReadyForSubMesh","_callbackPluginEventPrepareDefines","_callbackPluginEventPrepareDefinesBeforeAttributes","_callbackPluginEventHardBindForSubMesh","_callbackPluginEventBindForSubMesh","_callbackPluginEventHasRenderTargetTextures","_callbackPluginEventFillRenderTargetTextures","_forceAlphaTest","_transparencyMode","setScene","_markAllSubMeshesAsLightsDirty","_markAllSubMeshesAsFresnelDirty","_markAllSubMeshesAsAttributesDirty","_markAllSubMeshesAsMiscDirty","_markAllSubMeshesAsPrePassDirty","_markAllSubMeshesAsAllDirty","getUniqueId","_materialContext","useRightHandedSystem","sideOrientation","ClockWiseSideOrientation","CounterClockWiseSideOrientation","_uniformBuffer","addMaterial","useMaterialMeshMap","OnEventObservable","oldValue","markAsDirty","MiscDirtyFlag","TextureDirtyFlag","hasRenderTargetTextures","onBindObservable","_onEffectCreatedObservable","WireFrameFillMode","LineListDrawMode","LineLoopDrawMode","LineStripDrawMode","forceWireframe","fillMode","PointFillMode","PointListDrawMode","forcePointsCloud","_setDrawWrapper","fullDetails","freeze","markDirty","unfreeze","materialDefines","MATERIAL_ALPHATESTANDBLEND","_markAllSubMeshesAsTexturesAndMiscDirty","MATERIAL_OPAQUE","MATERIAL_ALPHATEST","needAlphaBlending","_disableAlphaBlending","needAlphaBlendingForMesh","visibility","hasVertexAlpha","needAlphaTesting","_shouldTurnAlphaTestOn","getAlphaTestTexture","meshes_1","getMaterial","_preBind","overrideOrientation","reverse","setState","backFaceCulling","cullBackFaces","world","buildUniformLayout","create","bindOnlyWorldMatrix","bindView","_needToBindSceneUbo","getViewMatrix","bindViewProjection","getTransformMatrix","getProjectionMatrix","bindEyePosition","variableName","_afterBind","_cachedMaterial","getSceneUniformBuffer","finalizeSceneUbo","_cachedVisibility","getDepthWrite","setDepthWrite","getColorWrite","setColorWrite","getDepthFunction","setDepthFunction","unbind","getBindedMeshes","meshId","filter","forceCompilation","localOptions","clipPlane","currentHotSwapingState","checkReady","clipPlaneState","allDone","lastError","tempSubMesh","_renderId","forceCompilationAsync","flag","blockMaterialDirtyMechanism","_DirtyCallbackArray","_TextureDirtyCallBack","LightDirtyFlag","_LightsDirtyCallBack","FresnelDirtyFlag","_FresnelDirtyCallBack","AttributesDirtyFlag","_AttributeDirtyCallBack","_MiscDirtyCallBack","PrePassDirtyFlag","_PrePassDirtyCallBack","_markAllSubMeshesAsDirty","_RunDirtyCallBacks","resetCachedMaterial","resetDrawCache","meshes_2","meshes_3","_drawWrappers","markAllAsDirty","_markScenePrePassDirty","prePassRenderer","enablePrePassRenderer","_AllDirtyCallBack","_markAllSubMeshesAsImageProcessingDirty","_ImageProcessingDirtyCallBack","_markAllSubMeshesAsFresnelAndMiscDirty","_FresnelAndMiscDirtyCallBack","_TextureAndMiscDirtyCallBack","setPrePassRenderer","forceDisposeEffect","notBoundToMesh","stopAnimation","freeProcessedMaterials","removeMaterial","materials","releaseVertexArrayObject","meshes_4","sourceMesh","geometry","_releaseVertexArrayObject","serializationObject","parsedMaterial","customType","overloadedAlbedo","BABYLON","LegacyPBRMaterial","_loadedUniqueId","TriangleStripDrawMode","TriangleFanDrawMode","AllDirtyFlag","MATERIAL_ALPHABLEND","MATERIAL_NORMALBLENDMETHOD_WHITEOUT","MATERIAL_NORMALBLENDMETHOD_RNM","markAsImageProcessingDirty","markAsTexturesDirty","markAsFresnelDirty","markAsMiscDirty","markAsPrePassDirty","markAsLightDirty","markAsAttributesDirty","cb","MaterialDefines","externalProperties","_isDirty","_areLightsDirty","_areLightsDisposed","_areAttributesDirty","_areFresnelDirty","_areMiscDirty","_arePrePassDirty","_areImageProcessingDirty","_normals","_uvs","_needNormals","_needUVs","_externalProperties","prop","hasOwnProperty","_setDefaultValue","markAsProcessed","markAsUnprocessed","disposed","_keys","isEqual","other","cloneTo","defValue","default","MaterialFlags","_DiffuseTextureEnabled","_DetailTextureEnabled","_AmbientTextureEnabled","_OpacityTextureEnabled","_ReflectionTextureEnabled","_EmissiveTextureEnabled","_SpecularTextureEnabled","_BumpTextureEnabled","_LightmapTextureEnabled","_RefractionTextureEnabled","_ColorGradingTextureEnabled","_FresnelEnabled","_ClearCoatTextureEnabled","_ClearCoatBumpTextureEnabled","_ClearCoatTintTextureEnabled","_SheenTextureEnabled","_AnisotropicTextureEnabled","_ThicknessTextureEnabled","_RefractionIntensityTextureEnabled","_TranslucencyIntensityTextureEnabled","_IridescenceTextureEnabled","MaterialHelper","BindSceneUniformBuffer","sceneUbo","bindToEffect","PrepareDefinesForMergedUV","getTextureMatrix","isIdentityAs3x2","BindTextureMatrix","updateMatrix","GetFogState","fogEnabled","applyFog","fogMode","PrepareDefinesForMisc","useLogarithmicDepth","pointsCloud","alphaTest","nonUniformScaling","PrepareDefinesForFrameBoundValues","useClipPlane","useThinInstances","useClipPlane1","useClipPlane2","useClipPlane3","useClipPlane4","useClipPlane5","useClipPlane6","changed","clipPlane2","clipPlane3","clipPlane4","clipPlane5","clipPlane6","PrepareDefinesForBones","useBones","skeleton","materialSupportsBoneTexture","isUsingTextureForMatrices","bones","nonExcluded","excludedSkinnedMesh","PrepareDefinesForMorphTargets","manager","morphTargetManager","supportsUVs","supportsTangents","supportsNormals","numInfluencers","isUsingTextureForTargets","PrepareDefinesForBakedVertexAnimation","bakedVertexAnimationManager","PrepareDefinesForAttributes","useVertexColor","useMorphTargets","useVertexAlpha","useBakedVertexAnimation","isVerticesDataPresent","hasVertexColors","useVertexColors","hasInstances","hasThinInstances","PrepareDefinesForMultiview","activeCamera","previousMultiview","MULTIVIEW","outputRenderTarget","getViewCount","PrepareDefinesForOIT","previousDefine","ORDER_INDEPENDENT_TRANSPARENCY","previousDefine16Bits","ORDER_INDEPENDENT_TRANSPARENCY_16BITS","useOrderIndependentTransparency","textureFloatLinearFiltering","PrepareDefinesForPrePass","canRenderToMRT","previousPrePass","PREPASS","texturesList","SCENE_MRT_COUNT","mrtCount","getIndex","PrepareDefinesForLight","light","lightIndex","specularSupported","needNormals","needRebuild","prepareLightSpecificDefines","falloffType","specular","equalsFloats","specularEnabled","receiveShadows","shadowsEnabled","shadowEnabled","getShadowGenerator","shadowMap","getShadowMap","renderList","lightmapMode","PrepareDefinesForLights","maxSimultaneousLights","disableLighting","lightsEnabled","lightSources","caps","textureFloatRender","textureHalfFloatRender","textureHalfFloatLinearFiltering","PrepareUniformsAndSamplersForLight","projectedLightTexture","uniformBuffersList","updateOnlyBuffersList","PrepareUniformsAndSamplersList","uniformsListOrOptions","HandleFallbacksForShadows","lightFallbackRank","PrepareAttributesForMorphTargetsInfluencers","attribs","influencers","_TmpMorphInfluencers","NUM_MORPH_INFLUENCERS","PrepareAttributesForMorphTargets","maxAttributesCount","maxVertexAttribs","normal","tangent","uv","PrepareAttributesForBakedVertexAnimation","PrepareAttributesForBones","PrepareAttributesForInstances","PushAttributesForInstances","INSTANCESCOLOR","needsPreviousMatrices","BindLightProperties","transferToEffect","BindLight","useSpecular","_bindLight","BindLights","len","BindFogParameters","linearSpace","fogStart","fogEnd","fogDensity","fogColor","toLinearSpaceToRef","_TempFogColor","BindBonesParameters","prePassConfiguration","boneTexture","getTransformMatrixTexture","getTransformMatrices","previousBones","_CopyBonesTransformationMatrices","target","BindMorphTargetParameters","abstractMesh","influences","BindLogDepth","camera","mode","log","maxZ","LN2","BindClipPlane","MaterialPluginBase","priority","enable","registerForExtraEvents","pluginManager","_pluginDefineNames","_pluginManager","_addPlugin","markAllDefinesAsDirty","_activatePlugin","hardBindForSubMesh","getCustomCode","shaderType","collectDefines","prepareDefinesBeforeAttributes","fillRenderTargetTextures","renderTargets","addFallbacks","currentRank","getAttributes","ubos","plugin","MaterialPluginEvent","MaterialPluginManager","_plugins","_activePlugins","_activePluginsForExtraEvents","pluginClassName","_MaterialPluginClassToMainDefine","_MaterialPluginCounter","_handlePluginEvent","sort","_codeInjectionPoints","defineNamesFromPlugins","plugin_1","_collectPointNames","_defineNamesFromPlugins","_handlePluginEventIsReadyForSubMesh","_handlePluginEventPrepareDefinesBeforeAttributes","_handlePluginEventPrepareDefines","_handlePluginEventBindForSubMesh","_handlePluginEventHasRenderTargetTextures","_handlePluginEventFillRenderTargetTextures","_handlePluginEventHardBindForSubMesh","getPlugin","eventData","info","_f","_g","_h","_j","_k","defineNames","_l","_m","fallbackRank","_uniformList","_uboList","customCode","_injectCustomCode","_uboDeclaration","_vertexDeclaration","_fragmentDeclaration","_o","_p","_q","_r","addUniform","pointName","existingCallback","points","injectedCode","charAt","rx","RegExp","substring","exec","newCode","fullPointName","plugins","inited","RegisterMaterialPlugin","pluginName","factory","plugins_1","factory_1","existing","UnregisterMaterialPlugin","UnregisterAllMaterialPlugins","MultiMaterial","_waitingSubMaterialsUniqueIds","multiMaterials","subMaterials","_subMaterials","_hookArray","getChildren","oldPush","items","oldSplice","deleteCount","deleted","getSubMaterial","defaultMaterial","subMaterial","cloneChildren","newMultiMaterial","current","tags","materialsUniqueIds","matIndex","subMat","forceDisposeChildren","index_1","ParseMultiMaterial","parsedMultiMaterial","multiMaterial","subMatId","getLastMaterialById","PrePassConfiguration","previousWorldMatrices","AddUniforms","AddSamplers","currentRTisSceneRT","previousViewProjection","currentViewProjection","updateFlag","_lastUpdateFrameId","copyFrom","PushMaterial","storeEffectOnSubMeshes","_normalMatrix","_activeEffect","_isReadyForSubMesh","getRenderId","bindOnlyNormalMatrix","normalMatrix","_cachedEffect","_mustRebind","isCachedMaterialInvalid","ShaderLanguage","onCreatedEffectParameters","ShaderMaterial","shaderPath","_textures","_textureArrays","_externalTextures","_floats","_ints","_floatsArrays","_colors3","_colors3Arrays","_colors4","_colors4Arrays","_vectors2","_vectors3","_vectors4","_matrices","_matrixArrays","_matrices3x3","_matrices2x2","_vectors2Arrays","_vectors3Arrays","_vectors4Arrays","_uniformBuffers","_textureSamplers","_storageBuffers","_cachedWorldViewMatrix","_cachedWorldViewProjectionMatrix","_multiview","_shaderPath","uniformBuffers","externalTextures","samplerObjects","storageBuffers","_checkUniform","setExternalTexture","setFloats","setColor3Array","arr","color","toArray","setColor4Array","float32Array","Float32Array","copyToArray","setUniformBuffer","setTextureSampler","sampler","setStorageBuffer","effect_1","_effectUsesInstances","shaderName","multiview","defineToAdd","bvaManager","customShaderNameResolve","previousEffect","previousDefines","maxSimultaneousMorphTargets","effectOverride","_drawWrapperOverride","useSceneUBO","getMeshUniformBuffer","mustRebind","getCachedMaterial","name_2","_transformMatrixR","globalPosition","getBuffer","name_3","name_4","name_5","name_6","propName","propValue","isArray","name_7","textureArrays","ints","floats","FloatArrays","colors3","colors3Arrays","colors4","colors4Arrays","vectors2","vectors3","vectors4","matrixArray","matrices3x3","matrices2x2","vectors2Arrays","vectors3Arrays","vectors4Arrays","textureArray","floatsArrays","colors","num","ParseFromFileAsync","request","status","JSON","responseText","output","open","send","CreateFromSnippetAsync","snippetId","snippet","jsonPayload","shaderMaterial","SnippetUrl","StandardMaterialDefines","MAINUV1","MAINUV2","MAINUV3","MAINUV4","MAINUV5","MAINUV6","DIFFUSE","DIFFUSEDIRECTUV","BAKED_VERTEX_ANIMATION_TEXTURE","AMBIENT","AMBIENTDIRECTUV","OPACITY","OPACITYDIRECTUV","OPACITYRGB","REFLECTION","EMISSIVE","EMISSIVEDIRECTUV","SPECULAR","SPECULARDIRECTUV","BUMP","BUMPDIRECTUV","PARALLAX","PARALLAXOCCLUSION","SPECULAROVERALPHA","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","CLIPPLANE5","CLIPPLANE6","ALPHATEST","DEPTHPREPASS","ALPHAFROMDIFFUSE","POINTSIZE","FOG","SPECULARTERM","DIFFUSEFRESNEL","OPACITYFRESNEL","REFLECTIONFRESNEL","REFRACTIONFRESNEL","EMISSIVEFRESNEL","FRESNEL","NORMAL","TANGENT","UV1","UV2","UV3","UV4","UV5","UV6","VERTEXCOLOR","VERTEXALPHA","NUM_BONE_INFLUENCERS","BonesPerMesh","BONETEXTURE","BONES_VELOCITY_ENABLED","INSTANCES","THIN_INSTANCES","GLOSSINESS","ROUGHNESS","EMISSIVEASILLUMINATION","LINKEMISSIVEWITHDIFFUSE","REFLECTIONFRESNELFROMSPECULAR","LIGHTMAP","LIGHTMAPDIRECTUV","OBJECTSPACE_NORMALMAP","USELIGHTMAPASSHADOWMAP","REFLECTIONMAP_3D","REFLECTIONMAP_SPHERICAL","REFLECTIONMAP_PLANAR","REFLECTIONMAP_CUBIC","USE_LOCAL_REFLECTIONMAP_CUBIC","USE_LOCAL_REFRACTIONMAP_CUBIC","REFLECTIONMAP_PROJECTION","REFLECTIONMAP_SKYBOX","REFLECTIONMAP_EXPLICIT","REFLECTIONMAP_EQUIRECTANGULAR","REFLECTIONMAP_EQUIRECTANGULAR_FIXED","REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED","REFLECTIONMAP_OPPOSITEZ","INVERTCUBICMAP","LOGARITHMICDEPTH","REFRACTION","REFRACTIONMAP_3D","REFLECTIONOVERALPHA","TWOSIDEDLIGHTING","SHADOWFLOAT","MORPHTARGETS","MORPHTARGETS_NORMAL","MORPHTARGETS_TANGENT","MORPHTARGETS_UV","MORPHTARGETS_TEXTURE","NONUNIFORMSCALING","PREMULTIPLYALPHA","ALPHATEST_AFTERALLALPHACOMPUTATIONS","ALPHABLEND","PREPASS_IRRADIANCE","PREPASS_IRRADIANCE_INDEX","PREPASS_ALBEDO_SQRT","PREPASS_ALBEDO_SQRT_INDEX","PREPASS_DEPTH","PREPASS_DEPTH_INDEX","PREPASS_NORMAL","PREPASS_NORMAL_INDEX","PREPASS_POSITION","PREPASS_POSITION_INDEX","PREPASS_VELOCITY","PREPASS_VELOCITY_INDEX","PREPASS_REFLECTIVITY","PREPASS_REFLECTIVITY_INDEX","RGBDLIGHTMAP","RGBDREFLECTION","RGBDREFRACTION","IS_REFLECTION_LINEAR","IS_REFRACTION_LINEAR","setReflectionMode","modeToEnable","modes_1","StandardMaterial","_diffuseTexture","_ambientTexture","_opacityTexture","_reflectionTexture","_emissiveTexture","_specularTexture","_bumpTexture","_lightmapTexture","_refractionTexture","ambientColor","diffuseColor","specularColor","emissiveColor","specularPower","_useAlphaFromDiffuseTexture","_useEmissiveAsIllumination","_linkEmissiveWithDiffuse","_useSpecularOverAlpha","_useReflectionOverAlpha","_disableLighting","_useObjectSpaceNormalMap","_useParallax","_useParallaxOcclusion","parallaxScaleBias","_roughness","indexOfRefraction","invertRefractionY","alphaCutOff","_useLightmapAsShadowmap","_useReflectionFresnelFromSpecular","_useGlossinessFromSpecularMapAlpha","_maxSimultaneousLights","_invertNormalMapX","_invertNormalMapY","_twoSidedLighting","_renderTargets","_worldViewProjectionMatrix","_globalAmbientColor","_cacheHasRenderTargetTextures","detailMap","_attachImageProcessingConfiguration","ReflectionTextureEnabled","isRenderTarget","RefractionTextureEnabled","_imageProcessingConfiguration","configuration","_imageProcessingObserver","imageProcessingConfiguration","_useLogarithmicDepth","fragmentDepthSupported","_shouldUseAlphaFromDiffuseTexture","_opacityFresnelParameters","_hasAlphaChannel","hasAlpha","oit","DiffuseTextureEnabled","isReadyOrNotBlocking","AmbientTextureEnabled","OpacityTextureEnabled","getAlphaFromRGB","coordinatesMode","invertZ","isRGBD","boundingBoxSize","EmissiveTextureEnabled","LightmapTextureEnabled","SpecularTextureEnabled","BumpTextureEnabled","alphaMode","transparencyMode","reflectionTexture","gammaSpace","refractionTexture","FresnelEnabled","_diffuseFresnelParameters","_emissiveFresnelParameters","_refractionFresnelParameters","_reflectionFresnelParameters","getRenderingMesh","isDirty","lightDisposed","csnrOptions","toNormalMatrix","diffuseFresnelParameters","updateColor4","opacityFresnelParameters","toLuminance","reflectionFresnelParameters","refractionFresnelParameters","emissiveFresnelParameters","updateFloat2","updateFloat","roughness","getReflectionTextureMatrix","cubeTexture","updateVector3","boundingBoxPosition","updateFloat3","_mirroredCameraPosition","depth","updateColor3","depthPeelingRenderer","needToAlwaysBindUniformBuffers","results","ThinMaterialHelper","holder","d","UniformBuffer","data","dynamic","forceNoUniformBuffer","_valueCache","_noUBO","_dynamic","_data","_uniformLocations","_uniformSizes","_uniformArraySizes","_uniformLocationPointer","_needSync","trackUbosInFrame","_buffers","_bufferIndex","_createBufferOnWrite","_currentFrameId","updateMatrix3x3","_updateMatrix3x3ForEffect","updateMatrix2x2","_updateMatrix2x2ForEffect","_updateFloatForEffect","_updateFloat2ForEffect","_updateFloat3ForEffect","_updateFloat4ForEffect","updateFloatArray","_updateFloatArrayForEffect","updateArray","_updateArrayForEffect","updateIntArray","_updateIntArrayForEffect","_updateMatrixForEffect","updateMatrices","_updateMatricesForEffect","_updateVector3ForEffect","updateVector4","_updateVector4ForEffect","_updateColor3ForEffect","_updateColor4ForEffect","updateDirectColor4","_updateDirectColor4ForEffect","updateInt","_updateIntForEffect","updateInt2","_updateInt2ForEffect","updateInt3","_updateInt3ForEffect","updateInt4","_updateInt4ForEffect","_updateMatrix3x3ForUniform","_updateMatrix2x2ForUniform","_updateFloatForUniform","_updateFloat2ForUniform","_updateFloat3ForUniform","_updateFloat4ForUniform","_updateFloatArrayForUniform","_updateArrayForUniform","_updateIntArrayForUniform","_updateMatrixForUniform","_updateMatricesForUniform","_updateVector3ForUniform","_updateVector4ForUniform","_updateColor3ForUniform","_updateColor4ForUniform","_updateDirectColor4ForUniform","_updateIntForUniform","_updateInt2ForUniform","_updateInt3ForUniform","_updateInt4ForUniform","isDynamic","getData","_bufferData","_buffer","_fillAlignment","alignment","oldPointer","diff","arraySize","strideSize","addMatrix","mat","addFloat2","temp","addFloat3","addColor3","addColor4","addVector3","vector","addMatrix3x3","addMatrix2x2","createDynamicUniformBuffer","createUniformBuffer","checkUbosContentBeforeUpload","_buffersEqual","buf1","buf2","_copyBuffer","dst","updateUniformBuffer","_collectUbosUpdatedInFrame","_UpdatedUbosInFrame","_createNewBuffer","_checkNewFrame","updateUniform","location","uniformBufferHardCheckMatrix","updateUniformArray","arraySizes","countToFour","baseStride","_cacheMatrix","cache","_TempBuffer","_currentEffect","suffix","_TempBufferInt32View","updateUniformDirectly","_currentEffectName","unbindEffect","setDataBuffer","dataBuffer","pop","_MAX_UNIFORM_SIZE","Uint32Array","UniformBufferEffectCommonAccessor","uboOrEffect","_isUbo"],"sourceRoot":""}