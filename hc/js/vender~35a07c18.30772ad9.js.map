{"version":3,"file":"js/vender~35a07c18.30772ad9.js","mappings":"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","sources":["webpack:///../../../node_modules/@babylonjs/core/Particles/EmitterTypes/boxParticleEmitter.js","webpack:///../../../node_modules/@babylonjs/core/Particles/EmitterTypes/customParticleEmitter.js","webpack:///../../../node_modules/@babylonjs/core/Particles/EmitterTypes/coneParticleEmitter.js","webpack:///../../../node_modules/@babylonjs/core/Particles/EmitterTypes/cylinderParticleEmitter.js","webpack:///../../../node_modules/@babylonjs/core/Particles/EmitterTypes/hemisphericParticleEmitter.js","webpack:///../../../node_modules/@babylonjs/core/Particles/EmitterTypes/pointParticleEmitter.js","webpack:///../../../node_modules/@babylonjs/core/Particles/EmitterTypes/sphereParticleEmitter.js","webpack:///../../../node_modules/@babylonjs/core/Particles/EmitterTypes/meshParticleEmitter.js","webpack:///../../../node_modules/@babylonjs/core/Particles/baseParticleSystem.js","webpack:///../../../node_modules/@babylonjs/core/Particles/webgl2ParticleSystem.js","webpack:///../../../node_modules/@babylonjs/core/Particles/computeShaderParticleSystem.js","webpack:///../../../node_modules/@babylonjs/core/Particles/gpuParticleSystem.js","webpack:///../../../node_modules/@babylonjs/core/Particles/particleSystemSet.js","webpack:///../../../node_modules/@babylonjs/core/Particles/particleHelper.js","webpack:///../../../node_modules/@babylonjs/core/Particles/particleSystemComponent.js","webpack:///../../../node_modules/@babylonjs/core/Particles/pointsCloudSystem.js","webpack:///../../../node_modules/@babylonjs/core/Particles/solidParticle.js","webpack:///../../../node_modules/@babylonjs/core/Particles/solidParticleSystem.js","webpack:///../../../node_modules/@babylonjs/core/Particles/cloudPoint.js","webpack:///../../../node_modules/@babylonjs/core/Particles/particle.js","webpack:///../../../node_modules/@babylonjs/core/Particles/particleSystem.js","webpack:///../../../node_modules/@babylonjs/core/Particles/subEmitter.js","webpack:///../../../node_modules/@babylonjs/core/Physics/Plugins/ammoJSPlugin.js"],"sourcesContent":["import { DeepCopier } from \"../../Misc/deepCopier.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\n/**\n * Particle emitter emitting particles from the inside of a box.\n * It emits the particles randomly between 2 given directions.\n */\nvar BoxParticleEmitter = /** @class */ (function () {\n    /**\n     * Creates a new instance BoxParticleEmitter\n     */\n    function BoxParticleEmitter() {\n        /**\n         * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\n         */\n        this.direction1 = new Vector3(0, 1.0, 0);\n        /**\n         * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\n         */\n        this.direction2 = new Vector3(0, 1.0, 0);\n        /**\n         * Minimum box point around our emitter. Our emitter is the center of particles source, but if you want your particles to emit from more than one point, then you can tell it to do so.\n         */\n        this.minEmitBox = new Vector3(-0.5, -0.5, -0.5);\n        /**\n         * Maximum box point around our emitter. Our emitter is the center of particles source, but if you want your particles to emit from more than one point, then you can tell it to do so.\n         */\n        this.maxEmitBox = new Vector3(0.5, 0.5, 0.5);\n    }\n    /**\n     * Called by the particle System when the direction is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param directionToUpdate is the direction vector to update with the result\n     * @param particle is the particle we are computed the direction for\n     * @param isLocal defines if the direction should be set in local space\n     */\n    BoxParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle, isLocal) {\n        var randX = Scalar.RandomRange(this.direction1.x, this.direction2.x);\n        var randY = Scalar.RandomRange(this.direction1.y, this.direction2.y);\n        var randZ = Scalar.RandomRange(this.direction1.z, this.direction2.z);\n        if (isLocal) {\n            directionToUpdate.x = randX;\n            directionToUpdate.y = randY;\n            directionToUpdate.z = randZ;\n            return;\n        }\n        Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\n    };\n    /**\n     * Called by the particle System when the position is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param positionToUpdate is the position vector to update with the result\n     * @param particle is the particle we are computed the position for\n     * @param isLocal defines if the position should be set in local space\n     */\n    BoxParticleEmitter.prototype.startPositionFunction = function (worldMatrix, positionToUpdate, particle, isLocal) {\n        var randX = Scalar.RandomRange(this.minEmitBox.x, this.maxEmitBox.x);\n        var randY = Scalar.RandomRange(this.minEmitBox.y, this.maxEmitBox.y);\n        var randZ = Scalar.RandomRange(this.minEmitBox.z, this.maxEmitBox.z);\n        if (isLocal) {\n            positionToUpdate.x = randX;\n            positionToUpdate.y = randY;\n            positionToUpdate.z = randZ;\n            return;\n        }\n        Vector3.TransformCoordinatesFromFloatsToRef(randX, randY, randZ, worldMatrix, positionToUpdate);\n    };\n    /**\n     * Clones the current emitter and returns a copy of it\n     * @returns the new emitter\n     */\n    BoxParticleEmitter.prototype.clone = function () {\n        var newOne = new BoxParticleEmitter();\n        DeepCopier.DeepCopy(this, newOne);\n        return newOne;\n    };\n    /**\n     * Called by the GPUParticleSystem to setup the update shader\n     * @param uboOrEffect defines the update shader\n     */\n    BoxParticleEmitter.prototype.applyToShader = function (uboOrEffect) {\n        uboOrEffect.setVector3(\"direction1\", this.direction1);\n        uboOrEffect.setVector3(\"direction2\", this.direction2);\n        uboOrEffect.setVector3(\"minEmitBox\", this.minEmitBox);\n        uboOrEffect.setVector3(\"maxEmitBox\", this.maxEmitBox);\n    };\n    /**\n     * Creates the structure of the ubo for this particle emitter\n     * @param ubo ubo to create the structure for\n     */\n    BoxParticleEmitter.prototype.buildUniformLayout = function (ubo) {\n        ubo.addUniform(\"direction1\", 3);\n        ubo.addUniform(\"direction2\", 3);\n        ubo.addUniform(\"minEmitBox\", 3);\n        ubo.addUniform(\"maxEmitBox\", 3);\n    };\n    /**\n     * Returns a string to use to update the GPU particles update shader\n     * @returns a string containing the defines string\n     */\n    BoxParticleEmitter.prototype.getEffectDefines = function () {\n        return \"#define BOXEMITTER\";\n    };\n    /**\n     * Returns the string \"BoxParticleEmitter\"\n     * @returns a string containing the class name\n     */\n    BoxParticleEmitter.prototype.getClassName = function () {\n        return \"BoxParticleEmitter\";\n    };\n    /**\n     * Serializes the particle system to a JSON object.\n     * @returns the JSON object\n     */\n    BoxParticleEmitter.prototype.serialize = function () {\n        var serializationObject = {};\n        serializationObject.type = this.getClassName();\n        serializationObject.direction1 = this.direction1.asArray();\n        serializationObject.direction2 = this.direction2.asArray();\n        serializationObject.minEmitBox = this.minEmitBox.asArray();\n        serializationObject.maxEmitBox = this.maxEmitBox.asArray();\n        return serializationObject;\n    };\n    /**\n     * Parse properties from a JSON object\n     * @param serializationObject defines the JSON object\n     */\n    BoxParticleEmitter.prototype.parse = function (serializationObject) {\n        Vector3.FromArrayToRef(serializationObject.direction1, 0, this.direction1);\n        Vector3.FromArrayToRef(serializationObject.direction2, 0, this.direction2);\n        Vector3.FromArrayToRef(serializationObject.minEmitBox, 0, this.minEmitBox);\n        Vector3.FromArrayToRef(serializationObject.maxEmitBox, 0, this.maxEmitBox);\n    };\n    return BoxParticleEmitter;\n}());\nexport { BoxParticleEmitter };\n//# sourceMappingURL=boxParticleEmitter.js.map","import { DeepCopier } from \"../../Misc/deepCopier.js\";\nimport { Vector3, TmpVectors } from \"../../Maths/math.vector.js\";\n/**\n * Particle emitter emitting particles from a custom list of positions.\n */\nvar CustomParticleEmitter = /** @class */ (function () {\n    /**\n     * Creates a new instance CustomParticleEmitter\n     */\n    function CustomParticleEmitter() {\n        /**\n         * Gets or sets the position generator that will create the initial position of each particle.\n         * Index will be provided when used with GPU particle. Particle will be provided when used with CPU particles\n         */\n        this.particlePositionGenerator = function () { };\n        /**\n         * Gets or sets the destination generator that will create the final destination of each particle.\n         *  * Index will be provided when used with GPU particle. Particle will be provided when used with CPU particles\n         */\n        this.particleDestinationGenerator = function () { };\n    }\n    /**\n     * Called by the particle System when the direction is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param directionToUpdate is the direction vector to update with the result\n     * @param particle is the particle we are computed the direction for\n     * @param isLocal defines if the direction should be set in local space\n     */\n    CustomParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle, isLocal) {\n        var tmpVector = TmpVectors.Vector3[0];\n        if (this.particleDestinationGenerator) {\n            this.particleDestinationGenerator(-1, particle, tmpVector);\n            // Get direction\n            var diffVector = TmpVectors.Vector3[1];\n            tmpVector.subtractToRef(particle.position, diffVector);\n            diffVector.scaleToRef(1 / particle.lifeTime, tmpVector);\n        }\n        else {\n            tmpVector.set(0, 0, 0);\n        }\n        if (isLocal) {\n            directionToUpdate.copyFrom(tmpVector);\n            return;\n        }\n        Vector3.TransformNormalToRef(tmpVector, worldMatrix, directionToUpdate);\n    };\n    /**\n     * Called by the particle System when the position is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param positionToUpdate is the position vector to update with the result\n     * @param particle is the particle we are computed the position for\n     * @param isLocal defines if the position should be set in local space\n     */\n    CustomParticleEmitter.prototype.startPositionFunction = function (worldMatrix, positionToUpdate, particle, isLocal) {\n        var tmpVector = TmpVectors.Vector3[0];\n        if (this.particlePositionGenerator) {\n            this.particlePositionGenerator(-1, particle, tmpVector);\n        }\n        else {\n            tmpVector.set(0, 0, 0);\n        }\n        if (isLocal) {\n            positionToUpdate.copyFrom(tmpVector);\n            return;\n        }\n        Vector3.TransformCoordinatesToRef(tmpVector, worldMatrix, positionToUpdate);\n    };\n    /**\n     * Clones the current emitter and returns a copy of it\n     * @returns the new emitter\n     */\n    CustomParticleEmitter.prototype.clone = function () {\n        var newOne = new CustomParticleEmitter();\n        DeepCopier.DeepCopy(this, newOne);\n        return newOne;\n    };\n    /**\n     * Called by the GPUParticleSystem to setup the update shader\n     * @param uboOrEffect defines the update shader\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    CustomParticleEmitter.prototype.applyToShader = function (uboOrEffect) { };\n    /**\n     * Creates the structure of the ubo for this particle emitter\n     * @param ubo ubo to create the structure for\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    CustomParticleEmitter.prototype.buildUniformLayout = function (ubo) { };\n    /**\n     * Returns a string to use to update the GPU particles update shader\n     * @returns a string containing the defines string\n     */\n    CustomParticleEmitter.prototype.getEffectDefines = function () {\n        return \"#define CUSTOMEMITTER\";\n    };\n    /**\n     * Returns the string \"PointParticleEmitter\"\n     * @returns a string containing the class name\n     */\n    CustomParticleEmitter.prototype.getClassName = function () {\n        return \"CustomParticleEmitter\";\n    };\n    /**\n     * Serializes the particle system to a JSON object.\n     * @returns the JSON object\n     */\n    CustomParticleEmitter.prototype.serialize = function () {\n        var serializationObject = {};\n        serializationObject.type = this.getClassName();\n        return serializationObject;\n    };\n    /**\n     * Parse properties from a JSON object\n     * @param serializationObject defines the JSON object\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    CustomParticleEmitter.prototype.parse = function (serializationObject) { };\n    return CustomParticleEmitter;\n}());\nexport { CustomParticleEmitter };\n//# sourceMappingURL=customParticleEmitter.js.map","import { DeepCopier } from \"../../Misc/deepCopier.js\";\nimport { Vector3, TmpVectors } from \"../../Maths/math.vector.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\n/**\n * Particle emitter emitting particles from the inside of a cone.\n * It emits the particles alongside the cone volume from the base to the particle.\n * The emission direction might be randomized.\n */\nvar ConeParticleEmitter = /** @class */ (function () {\n    /**\n     * Creates a new instance ConeParticleEmitter\n     * @param radius the radius of the emission cone (1 by default)\n     * @param angle the cone base angle (PI by default)\n     * @param directionRandomizer defines how much to randomize the particle direction [0-1] (default is 0)\n     */\n    function ConeParticleEmitter(radius, angle, \n    /** defines how much to randomize the particle direction [0-1] (default is 0) */\n    directionRandomizer) {\n        if (radius === void 0) { radius = 1; }\n        if (angle === void 0) { angle = Math.PI; }\n        if (directionRandomizer === void 0) { directionRandomizer = 0; }\n        this.directionRandomizer = directionRandomizer;\n        /**\n         * Gets or sets a value indicating where on the radius the start position should be picked (1 = everywhere, 0 = only surface)\n         */\n        this.radiusRange = 1;\n        /**\n         * Gets or sets a value indicating where on the height the start position should be picked (1 = everywhere, 0 = only surface)\n         */\n        this.heightRange = 1;\n        /**\n         * Gets or sets a value indicating if all the particles should be emitted from the spawn point only (the base of the cone)\n         */\n        this.emitFromSpawnPointOnly = false;\n        this.angle = angle;\n        this.radius = radius;\n    }\n    Object.defineProperty(ConeParticleEmitter.prototype, \"radius\", {\n        /**\n         * Gets or sets the radius of the emission cone\n         */\n        get: function () {\n            return this._radius;\n        },\n        set: function (value) {\n            this._radius = value;\n            this._buildHeight();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ConeParticleEmitter.prototype, \"angle\", {\n        /**\n         * Gets or sets the angle of the emission cone\n         */\n        get: function () {\n            return this._angle;\n        },\n        set: function (value) {\n            this._angle = value;\n            this._buildHeight();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ConeParticleEmitter.prototype._buildHeight = function () {\n        if (this._angle !== 0) {\n            this._height = this._radius / Math.tan(this._angle / 2);\n        }\n        else {\n            this._height = 1;\n        }\n    };\n    /**\n     * Called by the particle System when the direction is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param directionToUpdate is the direction vector to update with the result\n     * @param particle is the particle we are computed the direction for\n     * @param isLocal defines if the direction should be set in local space\n     */\n    ConeParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle, isLocal) {\n        if (isLocal) {\n            TmpVectors.Vector3[0].copyFrom(particle._localPosition).normalize();\n        }\n        else {\n            particle.position.subtractToRef(worldMatrix.getTranslation(), TmpVectors.Vector3[0]).normalize();\n        }\n        var randX = Scalar.RandomRange(0, this.directionRandomizer);\n        var randY = Scalar.RandomRange(0, this.directionRandomizer);\n        var randZ = Scalar.RandomRange(0, this.directionRandomizer);\n        directionToUpdate.x = TmpVectors.Vector3[0].x + randX;\n        directionToUpdate.y = TmpVectors.Vector3[0].y + randY;\n        directionToUpdate.z = TmpVectors.Vector3[0].z + randZ;\n        directionToUpdate.normalize();\n    };\n    /**\n     * Called by the particle System when the position is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param positionToUpdate is the position vector to update with the result\n     * @param particle is the particle we are computed the position for\n     * @param isLocal defines if the position should be set in local space\n     */\n    ConeParticleEmitter.prototype.startPositionFunction = function (worldMatrix, positionToUpdate, particle, isLocal) {\n        var s = Scalar.RandomRange(0, Math.PI * 2);\n        var h;\n        if (!this.emitFromSpawnPointOnly) {\n            h = Scalar.RandomRange(0, this.heightRange);\n            // Better distribution in a cone at normal angles.\n            h = 1 - h * h;\n        }\n        else {\n            h = 0.0001;\n        }\n        var radius = this._radius - Scalar.RandomRange(0, this._radius * this.radiusRange);\n        radius = radius * h;\n        var randX = radius * Math.sin(s);\n        var randZ = radius * Math.cos(s);\n        var randY = h * this._height;\n        if (isLocal) {\n            positionToUpdate.x = randX;\n            positionToUpdate.y = randY;\n            positionToUpdate.z = randZ;\n            return;\n        }\n        Vector3.TransformCoordinatesFromFloatsToRef(randX, randY, randZ, worldMatrix, positionToUpdate);\n    };\n    /**\n     * Clones the current emitter and returns a copy of it\n     * @returns the new emitter\n     */\n    ConeParticleEmitter.prototype.clone = function () {\n        var newOne = new ConeParticleEmitter(this._radius, this._angle, this.directionRandomizer);\n        DeepCopier.DeepCopy(this, newOne);\n        return newOne;\n    };\n    /**\n     * Called by the GPUParticleSystem to setup the update shader\n     * @param uboOrEffect defines the update shader\n     */\n    ConeParticleEmitter.prototype.applyToShader = function (uboOrEffect) {\n        uboOrEffect.setFloat2(\"radius\", this._radius, this.radiusRange);\n        uboOrEffect.setFloat(\"coneAngle\", this._angle);\n        uboOrEffect.setFloat2(\"height\", this._height, this.heightRange);\n        uboOrEffect.setFloat(\"directionRandomizer\", this.directionRandomizer);\n    };\n    /**\n     * Creates the structure of the ubo for this particle emitter\n     * @param ubo ubo to create the structure for\n     */\n    ConeParticleEmitter.prototype.buildUniformLayout = function (ubo) {\n        ubo.addUniform(\"radius\", 2);\n        ubo.addUniform(\"coneAngle\", 1);\n        ubo.addUniform(\"height\", 2);\n        ubo.addUniform(\"directionRandomizer\", 1);\n    };\n    /**\n     * Returns a string to use to update the GPU particles update shader\n     * @returns a string containing the defines string\n     */\n    ConeParticleEmitter.prototype.getEffectDefines = function () {\n        var defines = \"#define CONEEMITTER\";\n        if (this.emitFromSpawnPointOnly) {\n            defines += \"\\n#define CONEEMITTERSPAWNPOINT\";\n        }\n        return defines;\n    };\n    /**\n     * Returns the string \"ConeParticleEmitter\"\n     * @returns a string containing the class name\n     */\n    ConeParticleEmitter.prototype.getClassName = function () {\n        return \"ConeParticleEmitter\";\n    };\n    /**\n     * Serializes the particle system to a JSON object.\n     * @returns the JSON object\n     */\n    ConeParticleEmitter.prototype.serialize = function () {\n        var serializationObject = {};\n        serializationObject.type = this.getClassName();\n        serializationObject.radius = this._radius;\n        serializationObject.angle = this._angle;\n        serializationObject.directionRandomizer = this.directionRandomizer;\n        serializationObject.radiusRange = this.radiusRange;\n        serializationObject.heightRange = this.heightRange;\n        serializationObject.emitFromSpawnPointOnly = this.emitFromSpawnPointOnly;\n        return serializationObject;\n    };\n    /**\n     * Parse properties from a JSON object\n     * @param serializationObject defines the JSON object\n     */\n    ConeParticleEmitter.prototype.parse = function (serializationObject) {\n        this.radius = serializationObject.radius;\n        this.angle = serializationObject.angle;\n        this.directionRandomizer = serializationObject.directionRandomizer;\n        this.radiusRange = serializationObject.radiusRange !== undefined ? serializationObject.radiusRange : 1;\n        this.heightRange = serializationObject.radiusRange !== undefined ? serializationObject.heightRange : 1;\n        this.emitFromSpawnPointOnly = serializationObject.emitFromSpawnPointOnly !== undefined ? serializationObject.emitFromSpawnPointOnly : false;\n    };\n    return ConeParticleEmitter;\n}());\nexport { ConeParticleEmitter };\n//# sourceMappingURL=coneParticleEmitter.js.map","import { __extends } from \"tslib\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\nimport { DeepCopier } from \"../../Misc/deepCopier.js\";\n/**\n * Particle emitter emitting particles from the inside of a cylinder.\n * It emits the particles alongside the cylinder radius. The emission direction might be randomized.\n */\nvar CylinderParticleEmitter = /** @class */ (function () {\n    /**\n     * Creates a new instance CylinderParticleEmitter\n     * @param radius the radius of the emission cylinder (1 by default)\n     * @param height the height of the emission cylinder (1 by default)\n     * @param radiusRange the range of the emission cylinder [0-1] 0 Surface only, 1 Entire Radius (1 by default)\n     * @param directionRandomizer defines how much to randomize the particle direction [0-1]\n     */\n    function CylinderParticleEmitter(\n    /**\n     * The radius of the emission cylinder.\n     */\n    radius, \n    /**\n     * The height of the emission cylinder.\n     */\n    height, \n    /**\n     * The range of emission [0-1] 0 Surface only, 1 Entire Radius.\n     */\n    radiusRange, \n    /**\n     * How much to randomize the particle direction [0-1].\n     */\n    directionRandomizer) {\n        if (radius === void 0) { radius = 1; }\n        if (height === void 0) { height = 1; }\n        if (radiusRange === void 0) { radiusRange = 1; }\n        if (directionRandomizer === void 0) { directionRandomizer = 0; }\n        this.radius = radius;\n        this.height = height;\n        this.radiusRange = radiusRange;\n        this.directionRandomizer = directionRandomizer;\n        this._tempVector = Vector3.Zero();\n    }\n    /**\n     * Called by the particle System when the direction is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param directionToUpdate is the direction vector to update with the result\n     * @param particle is the particle we are computed the direction for\n     * @param isLocal defines if the direction should be set in local space\n     * @param inverseWorldMatrix defines the inverted world matrix to use if isLocal is false\n     */\n    CylinderParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle, isLocal, inverseWorldMatrix) {\n        particle.position.subtractToRef(worldMatrix.getTranslation(), this._tempVector);\n        this._tempVector.normalize();\n        Vector3.TransformNormalToRef(this._tempVector, inverseWorldMatrix, this._tempVector);\n        var randY = Scalar.RandomRange(-this.directionRandomizer / 2, this.directionRandomizer / 2);\n        var angle = Math.atan2(this._tempVector.x, this._tempVector.z);\n        angle += Scalar.RandomRange(-Math.PI / 2, Math.PI / 2) * this.directionRandomizer;\n        this._tempVector.y = randY; // set direction y to rand y to mirror normal of cylinder surface\n        this._tempVector.x = Math.sin(angle);\n        this._tempVector.z = Math.cos(angle);\n        this._tempVector.normalize();\n        if (isLocal) {\n            directionToUpdate.copyFrom(this._tempVector);\n            return;\n        }\n        Vector3.TransformNormalFromFloatsToRef(this._tempVector.x, this._tempVector.y, this._tempVector.z, worldMatrix, directionToUpdate);\n    };\n    /**\n     * Called by the particle System when the position is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param positionToUpdate is the position vector to update with the result\n     * @param particle is the particle we are computed the position for\n     * @param isLocal defines if the position should be set in local space\n     */\n    CylinderParticleEmitter.prototype.startPositionFunction = function (worldMatrix, positionToUpdate, particle, isLocal) {\n        var yPos = Scalar.RandomRange(-this.height / 2, this.height / 2);\n        var angle = Scalar.RandomRange(0, 2 * Math.PI);\n        // Pick a properly distributed point within the circle https://programming.guide/random-point-within-circle.html\n        var radiusDistribution = Scalar.RandomRange((1 - this.radiusRange) * (1 - this.radiusRange), 1);\n        var positionRadius = Math.sqrt(radiusDistribution) * this.radius;\n        var xPos = positionRadius * Math.cos(angle);\n        var zPos = positionRadius * Math.sin(angle);\n        if (isLocal) {\n            positionToUpdate.copyFromFloats(xPos, yPos, zPos);\n            return;\n        }\n        Vector3.TransformCoordinatesFromFloatsToRef(xPos, yPos, zPos, worldMatrix, positionToUpdate);\n    };\n    /**\n     * Clones the current emitter and returns a copy of it\n     * @returns the new emitter\n     */\n    CylinderParticleEmitter.prototype.clone = function () {\n        var newOne = new CylinderParticleEmitter(this.radius, this.directionRandomizer);\n        DeepCopier.DeepCopy(this, newOne);\n        return newOne;\n    };\n    /**\n     * Called by the GPUParticleSystem to setup the update shader\n     * @param uboOrEffect defines the update shader\n     */\n    CylinderParticleEmitter.prototype.applyToShader = function (uboOrEffect) {\n        uboOrEffect.setFloat(\"radius\", this.radius);\n        uboOrEffect.setFloat(\"height\", this.height);\n        uboOrEffect.setFloat(\"radiusRange\", this.radiusRange);\n        uboOrEffect.setFloat(\"directionRandomizer\", this.directionRandomizer);\n    };\n    /**\n     * Creates the structure of the ubo for this particle emitter\n     * @param ubo ubo to create the structure for\n     */\n    CylinderParticleEmitter.prototype.buildUniformLayout = function (ubo) {\n        ubo.addUniform(\"radius\", 1);\n        ubo.addUniform(\"height\", 1);\n        ubo.addUniform(\"radiusRange\", 1);\n        ubo.addUniform(\"directionRandomizer\", 1);\n    };\n    /**\n     * Returns a string to use to update the GPU particles update shader\n     * @returns a string containing the defines string\n     */\n    CylinderParticleEmitter.prototype.getEffectDefines = function () {\n        return \"#define CYLINDEREMITTER\";\n    };\n    /**\n     * Returns the string \"CylinderParticleEmitter\"\n     * @returns a string containing the class name\n     */\n    CylinderParticleEmitter.prototype.getClassName = function () {\n        return \"CylinderParticleEmitter\";\n    };\n    /**\n     * Serializes the particle system to a JSON object.\n     * @returns the JSON object\n     */\n    CylinderParticleEmitter.prototype.serialize = function () {\n        var serializationObject = {};\n        serializationObject.type = this.getClassName();\n        serializationObject.radius = this.radius;\n        serializationObject.height = this.height;\n        serializationObject.radiusRange = this.radiusRange;\n        serializationObject.directionRandomizer = this.directionRandomizer;\n        return serializationObject;\n    };\n    /**\n     * Parse properties from a JSON object\n     * @param serializationObject defines the JSON object\n     */\n    CylinderParticleEmitter.prototype.parse = function (serializationObject) {\n        this.radius = serializationObject.radius;\n        this.height = serializationObject.height;\n        this.radiusRange = serializationObject.radiusRange;\n        this.directionRandomizer = serializationObject.directionRandomizer;\n    };\n    return CylinderParticleEmitter;\n}());\nexport { CylinderParticleEmitter };\n/**\n * Particle emitter emitting particles from the inside of a cylinder.\n * It emits the particles randomly between two vectors.\n */\nvar CylinderDirectedParticleEmitter = /** @class */ (function (_super) {\n    __extends(CylinderDirectedParticleEmitter, _super);\n    /**\n     * Creates a new instance CylinderDirectedParticleEmitter\n     * @param radius the radius of the emission cylinder (1 by default)\n     * @param height the height of the emission cylinder (1 by default)\n     * @param radiusRange the range of the emission cylinder [0-1] 0 Surface only, 1 Entire Radius (1 by default)\n     * @param direction1 the min limit of the emission direction (up vector by default)\n     * @param direction2 the max limit of the emission direction (up vector by default)\n     */\n    function CylinderDirectedParticleEmitter(radius, height, radiusRange, \n    /**\n     * The min limit of the emission direction.\n     */\n    direction1, \n    /**\n     * The max limit of the emission direction.\n     */\n    direction2) {\n        if (radius === void 0) { radius = 1; }\n        if (height === void 0) { height = 1; }\n        if (radiusRange === void 0) { radiusRange = 1; }\n        if (direction1 === void 0) { direction1 = new Vector3(0, 1, 0); }\n        if (direction2 === void 0) { direction2 = new Vector3(0, 1, 0); }\n        var _this = _super.call(this, radius, height, radiusRange) || this;\n        _this.direction1 = direction1;\n        _this.direction2 = direction2;\n        return _this;\n    }\n    /**\n     * Called by the particle System when the direction is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param directionToUpdate is the direction vector to update with the result\n     */\n    CylinderDirectedParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate) {\n        var randX = Scalar.RandomRange(this.direction1.x, this.direction2.x);\n        var randY = Scalar.RandomRange(this.direction1.y, this.direction2.y);\n        var randZ = Scalar.RandomRange(this.direction1.z, this.direction2.z);\n        Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\n    };\n    /**\n     * Clones the current emitter and returns a copy of it\n     * @returns the new emitter\n     */\n    CylinderDirectedParticleEmitter.prototype.clone = function () {\n        var newOne = new CylinderDirectedParticleEmitter(this.radius, this.height, this.radiusRange, this.direction1, this.direction2);\n        DeepCopier.DeepCopy(this, newOne);\n        return newOne;\n    };\n    /**\n     * Called by the GPUParticleSystem to setup the update shader\n     * @param uboOrEffect defines the update shader\n     */\n    CylinderDirectedParticleEmitter.prototype.applyToShader = function (uboOrEffect) {\n        uboOrEffect.setFloat(\"radius\", this.radius);\n        uboOrEffect.setFloat(\"height\", this.height);\n        uboOrEffect.setFloat(\"radiusRange\", this.radiusRange);\n        uboOrEffect.setVector3(\"direction1\", this.direction1);\n        uboOrEffect.setVector3(\"direction2\", this.direction2);\n    };\n    /**\n     * Creates the structure of the ubo for this particle emitter\n     * @param ubo ubo to create the structure for\n     */\n    CylinderDirectedParticleEmitter.prototype.buildUniformLayout = function (ubo) {\n        ubo.addUniform(\"radius\", 1);\n        ubo.addUniform(\"height\", 1);\n        ubo.addUniform(\"radiusRange\", 1);\n        ubo.addUniform(\"direction1\", 3);\n        ubo.addUniform(\"direction2\", 3);\n    };\n    /**\n     * Returns a string to use to update the GPU particles update shader\n     * @returns a string containing the defines string\n     */\n    CylinderDirectedParticleEmitter.prototype.getEffectDefines = function () {\n        return \"#define CYLINDEREMITTER\\n#define DIRECTEDCYLINDEREMITTER\";\n    };\n    /**\n     * Returns the string \"CylinderDirectedParticleEmitter\"\n     * @returns a string containing the class name\n     */\n    CylinderDirectedParticleEmitter.prototype.getClassName = function () {\n        return \"CylinderDirectedParticleEmitter\";\n    };\n    /**\n     * Serializes the particle system to a JSON object.\n     * @returns the JSON object\n     */\n    CylinderDirectedParticleEmitter.prototype.serialize = function () {\n        var serializationObject = _super.prototype.serialize.call(this);\n        serializationObject.direction1 = this.direction1.asArray();\n        serializationObject.direction2 = this.direction2.asArray();\n        return serializationObject;\n    };\n    /**\n     * Parse properties from a JSON object\n     * @param serializationObject defines the JSON object\n     */\n    CylinderDirectedParticleEmitter.prototype.parse = function (serializationObject) {\n        _super.prototype.parse.call(this, serializationObject);\n        this.direction1.copyFrom(serializationObject.direction1);\n        this.direction2.copyFrom(serializationObject.direction2);\n    };\n    return CylinderDirectedParticleEmitter;\n}(CylinderParticleEmitter));\nexport { CylinderDirectedParticleEmitter };\n//# sourceMappingURL=cylinderParticleEmitter.js.map","import { DeepCopier } from \"../../Misc/deepCopier.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\n/**\n * Particle emitter emitting particles from the inside of a hemisphere.\n * It emits the particles alongside the hemisphere radius. The emission direction might be randomized.\n */\nvar HemisphericParticleEmitter = /** @class */ (function () {\n    /**\n     * Creates a new instance HemisphericParticleEmitter\n     * @param radius the radius of the emission hemisphere (1 by default)\n     * @param radiusRange the range of the emission hemisphere [0-1] 0 Surface only, 1 Entire Radius (1 by default)\n     * @param directionRandomizer defines how much to randomize the particle direction [0-1]\n     */\n    function HemisphericParticleEmitter(\n    /**\n     * The radius of the emission hemisphere.\n     */\n    radius, \n    /**\n     * The range of emission [0-1] 0 Surface only, 1 Entire Radius.\n     */\n    radiusRange, \n    /**\n     * How much to randomize the particle direction [0-1].\n     */\n    directionRandomizer) {\n        if (radius === void 0) { radius = 1; }\n        if (radiusRange === void 0) { radiusRange = 1; }\n        if (directionRandomizer === void 0) { directionRandomizer = 0; }\n        this.radius = radius;\n        this.radiusRange = radiusRange;\n        this.directionRandomizer = directionRandomizer;\n    }\n    /**\n     * Called by the particle System when the direction is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param directionToUpdate is the direction vector to update with the result\n     * @param particle is the particle we are computed the direction for\n     * @param isLocal defines if the direction should be set in local space\n     */\n    HemisphericParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle, isLocal) {\n        var direction = particle.position.subtract(worldMatrix.getTranslation()).normalize();\n        var randX = Scalar.RandomRange(0, this.directionRandomizer);\n        var randY = Scalar.RandomRange(0, this.directionRandomizer);\n        var randZ = Scalar.RandomRange(0, this.directionRandomizer);\n        direction.x += randX;\n        direction.y += randY;\n        direction.z += randZ;\n        direction.normalize();\n        if (isLocal) {\n            directionToUpdate.copyFrom(direction);\n            return;\n        }\n        Vector3.TransformNormalFromFloatsToRef(direction.x, direction.y, direction.z, worldMatrix, directionToUpdate);\n    };\n    /**\n     * Called by the particle System when the position is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param positionToUpdate is the position vector to update with the result\n     * @param particle is the particle we are computed the position for\n     * @param isLocal defines if the position should be set in local space\n     */\n    HemisphericParticleEmitter.prototype.startPositionFunction = function (worldMatrix, positionToUpdate, particle, isLocal) {\n        var randRadius = this.radius - Scalar.RandomRange(0, this.radius * this.radiusRange);\n        var v = Scalar.RandomRange(0, 1.0);\n        var phi = Scalar.RandomRange(0, 2 * Math.PI);\n        var theta = Math.acos(2 * v - 1);\n        var randX = randRadius * Math.cos(phi) * Math.sin(theta);\n        var randY = randRadius * Math.cos(theta);\n        var randZ = randRadius * Math.sin(phi) * Math.sin(theta);\n        if (isLocal) {\n            positionToUpdate.copyFromFloats(randX, Math.abs(randY), randZ);\n            return;\n        }\n        Vector3.TransformCoordinatesFromFloatsToRef(randX, Math.abs(randY), randZ, worldMatrix, positionToUpdate);\n    };\n    /**\n     * Clones the current emitter and returns a copy of it\n     * @returns the new emitter\n     */\n    HemisphericParticleEmitter.prototype.clone = function () {\n        var newOne = new HemisphericParticleEmitter(this.radius, this.directionRandomizer);\n        DeepCopier.DeepCopy(this, newOne);\n        return newOne;\n    };\n    /**\n     * Called by the GPUParticleSystem to setup the update shader\n     * @param uboOrEffect defines the update shader\n     */\n    HemisphericParticleEmitter.prototype.applyToShader = function (uboOrEffect) {\n        uboOrEffect.setFloat(\"radius\", this.radius);\n        uboOrEffect.setFloat(\"radiusRange\", this.radiusRange);\n        uboOrEffect.setFloat(\"directionRandomizer\", this.directionRandomizer);\n    };\n    /**\n     * Creates the structure of the ubo for this particle emitter\n     * @param ubo ubo to create the structure for\n     */\n    HemisphericParticleEmitter.prototype.buildUniformLayout = function (ubo) {\n        ubo.addUniform(\"radius\", 1);\n        ubo.addUniform(\"radiusRange\", 1);\n        ubo.addUniform(\"directionRandomizer\", 1);\n    };\n    /**\n     * Returns a string to use to update the GPU particles update shader\n     * @returns a string containing the defines string\n     */\n    HemisphericParticleEmitter.prototype.getEffectDefines = function () {\n        return \"#define HEMISPHERICEMITTER\";\n    };\n    /**\n     * Returns the string \"HemisphericParticleEmitter\"\n     * @returns a string containing the class name\n     */\n    HemisphericParticleEmitter.prototype.getClassName = function () {\n        return \"HemisphericParticleEmitter\";\n    };\n    /**\n     * Serializes the particle system to a JSON object.\n     * @returns the JSON object\n     */\n    HemisphericParticleEmitter.prototype.serialize = function () {\n        var serializationObject = {};\n        serializationObject.type = this.getClassName();\n        serializationObject.radius = this.radius;\n        serializationObject.radiusRange = this.radiusRange;\n        serializationObject.directionRandomizer = this.directionRandomizer;\n        return serializationObject;\n    };\n    /**\n     * Parse properties from a JSON object\n     * @param serializationObject defines the JSON object\n     */\n    HemisphericParticleEmitter.prototype.parse = function (serializationObject) {\n        this.radius = serializationObject.radius;\n        this.radiusRange = serializationObject.radiusRange;\n        this.directionRandomizer = serializationObject.directionRandomizer;\n    };\n    return HemisphericParticleEmitter;\n}());\nexport { HemisphericParticleEmitter };\n//# sourceMappingURL=hemisphericParticleEmitter.js.map","import { DeepCopier } from \"../../Misc/deepCopier.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\n/**\n * Particle emitter emitting particles from a point.\n * It emits the particles randomly between 2 given directions.\n */\nvar PointParticleEmitter = /** @class */ (function () {\n    /**\n     * Creates a new instance PointParticleEmitter\n     */\n    function PointParticleEmitter() {\n        /**\n         * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\n         */\n        this.direction1 = new Vector3(0, 1.0, 0);\n        /**\n         * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\n         */\n        this.direction2 = new Vector3(0, 1.0, 0);\n    }\n    /**\n     * Called by the particle System when the direction is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param directionToUpdate is the direction vector to update with the result\n     * @param particle is the particle we are computed the direction for\n     * @param isLocal defines if the direction should be set in local space\n     */\n    PointParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle, isLocal) {\n        var randX = Scalar.RandomRange(this.direction1.x, this.direction2.x);\n        var randY = Scalar.RandomRange(this.direction1.y, this.direction2.y);\n        var randZ = Scalar.RandomRange(this.direction1.z, this.direction2.z);\n        if (isLocal) {\n            directionToUpdate.copyFromFloats(randX, randY, randZ);\n            return;\n        }\n        Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\n    };\n    /**\n     * Called by the particle System when the position is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param positionToUpdate is the position vector to update with the result\n     * @param particle is the particle we are computed the position for\n     * @param isLocal defines if the position should be set in local space\n     */\n    PointParticleEmitter.prototype.startPositionFunction = function (worldMatrix, positionToUpdate, particle, isLocal) {\n        if (isLocal) {\n            positionToUpdate.copyFromFloats(0, 0, 0);\n            return;\n        }\n        Vector3.TransformCoordinatesFromFloatsToRef(0, 0, 0, worldMatrix, positionToUpdate);\n    };\n    /**\n     * Clones the current emitter and returns a copy of it\n     * @returns the new emitter\n     */\n    PointParticleEmitter.prototype.clone = function () {\n        var newOne = new PointParticleEmitter();\n        DeepCopier.DeepCopy(this, newOne);\n        return newOne;\n    };\n    /**\n     * Called by the GPUParticleSystem to setup the update shader\n     * @param uboOrEffect defines the update shader\n     */\n    PointParticleEmitter.prototype.applyToShader = function (uboOrEffect) {\n        uboOrEffect.setVector3(\"direction1\", this.direction1);\n        uboOrEffect.setVector3(\"direction2\", this.direction2);\n    };\n    /**\n     * Creates the structure of the ubo for this particle emitter\n     * @param ubo ubo to create the structure for\n     */\n    PointParticleEmitter.prototype.buildUniformLayout = function (ubo) {\n        ubo.addUniform(\"direction1\", 3);\n        ubo.addUniform(\"direction2\", 3);\n    };\n    /**\n     * Returns a string to use to update the GPU particles update shader\n     * @returns a string containing the defines string\n     */\n    PointParticleEmitter.prototype.getEffectDefines = function () {\n        return \"#define POINTEMITTER\";\n    };\n    /**\n     * Returns the string \"PointParticleEmitter\"\n     * @returns a string containing the class name\n     */\n    PointParticleEmitter.prototype.getClassName = function () {\n        return \"PointParticleEmitter\";\n    };\n    /**\n     * Serializes the particle system to a JSON object.\n     * @returns the JSON object\n     */\n    PointParticleEmitter.prototype.serialize = function () {\n        var serializationObject = {};\n        serializationObject.type = this.getClassName();\n        serializationObject.direction1 = this.direction1.asArray();\n        serializationObject.direction2 = this.direction2.asArray();\n        return serializationObject;\n    };\n    /**\n     * Parse properties from a JSON object\n     * @param serializationObject defines the JSON object\n     */\n    PointParticleEmitter.prototype.parse = function (serializationObject) {\n        Vector3.FromArrayToRef(serializationObject.direction1, 0, this.direction1);\n        Vector3.FromArrayToRef(serializationObject.direction2, 0, this.direction2);\n    };\n    return PointParticleEmitter;\n}());\nexport { PointParticleEmitter };\n//# sourceMappingURL=pointParticleEmitter.js.map","import { __extends } from \"tslib\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\nimport { DeepCopier } from \"../../Misc/deepCopier.js\";\n/**\n * Particle emitter emitting particles from the inside of a sphere.\n * It emits the particles alongside the sphere radius. The emission direction might be randomized.\n */\nvar SphereParticleEmitter = /** @class */ (function () {\n    /**\n     * Creates a new instance SphereParticleEmitter\n     * @param radius the radius of the emission sphere (1 by default)\n     * @param radiusRange the range of the emission sphere [0-1] 0 Surface only, 1 Entire Radius (1 by default)\n     * @param directionRandomizer defines how much to randomize the particle direction [0-1]\n     */\n    function SphereParticleEmitter(\n    /**\n     * The radius of the emission sphere.\n     */\n    radius, \n    /**\n     * The range of emission [0-1] 0 Surface only, 1 Entire Radius.\n     */\n    radiusRange, \n    /**\n     * How much to randomize the particle direction [0-1].\n     */\n    directionRandomizer) {\n        if (radius === void 0) { radius = 1; }\n        if (radiusRange === void 0) { radiusRange = 1; }\n        if (directionRandomizer === void 0) { directionRandomizer = 0; }\n        this.radius = radius;\n        this.radiusRange = radiusRange;\n        this.directionRandomizer = directionRandomizer;\n    }\n    /**\n     * Called by the particle System when the direction is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param directionToUpdate is the direction vector to update with the result\n     * @param particle is the particle we are computed the direction for\n     * @param isLocal defines if the direction should be set in local space\n     */\n    SphereParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle, isLocal) {\n        var direction = particle.position.subtract(worldMatrix.getTranslation()).normalize();\n        var randX = Scalar.RandomRange(0, this.directionRandomizer);\n        var randY = Scalar.RandomRange(0, this.directionRandomizer);\n        var randZ = Scalar.RandomRange(0, this.directionRandomizer);\n        direction.x += randX;\n        direction.y += randY;\n        direction.z += randZ;\n        direction.normalize();\n        if (isLocal) {\n            directionToUpdate.copyFrom(direction);\n            return;\n        }\n        Vector3.TransformNormalFromFloatsToRef(direction.x, direction.y, direction.z, worldMatrix, directionToUpdate);\n    };\n    /**\n     * Called by the particle System when the position is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param positionToUpdate is the position vector to update with the result\n     * @param particle is the particle we are computed the position for\n     * @param isLocal defines if the position should be set in local space\n     */\n    SphereParticleEmitter.prototype.startPositionFunction = function (worldMatrix, positionToUpdate, particle, isLocal) {\n        var randRadius = this.radius - Scalar.RandomRange(0, this.radius * this.radiusRange);\n        var v = Scalar.RandomRange(0, 1.0);\n        var phi = Scalar.RandomRange(0, 2 * Math.PI);\n        var theta = Math.acos(2 * v - 1);\n        var randX = randRadius * Math.cos(phi) * Math.sin(theta);\n        var randY = randRadius * Math.cos(theta);\n        var randZ = randRadius * Math.sin(phi) * Math.sin(theta);\n        if (isLocal) {\n            positionToUpdate.copyFromFloats(randX, randY, randZ);\n            return;\n        }\n        Vector3.TransformCoordinatesFromFloatsToRef(randX, randY, randZ, worldMatrix, positionToUpdate);\n    };\n    /**\n     * Clones the current emitter and returns a copy of it\n     * @returns the new emitter\n     */\n    SphereParticleEmitter.prototype.clone = function () {\n        var newOne = new SphereParticleEmitter(this.radius, this.directionRandomizer);\n        DeepCopier.DeepCopy(this, newOne);\n        return newOne;\n    };\n    /**\n     * Called by the GPUParticleSystem to setup the update shader\n     * @param uboOrEffect defines the update shader\n     */\n    SphereParticleEmitter.prototype.applyToShader = function (uboOrEffect) {\n        uboOrEffect.setFloat(\"radius\", this.radius);\n        uboOrEffect.setFloat(\"radiusRange\", this.radiusRange);\n        uboOrEffect.setFloat(\"directionRandomizer\", this.directionRandomizer);\n    };\n    /**\n     * Creates the structure of the ubo for this particle emitter\n     * @param ubo ubo to create the structure for\n     */\n    SphereParticleEmitter.prototype.buildUniformLayout = function (ubo) {\n        ubo.addUniform(\"radius\", 1);\n        ubo.addUniform(\"radiusRange\", 1);\n        ubo.addUniform(\"directionRandomizer\", 1);\n    };\n    /**\n     * Returns a string to use to update the GPU particles update shader\n     * @returns a string containing the defines string\n     */\n    SphereParticleEmitter.prototype.getEffectDefines = function () {\n        return \"#define SPHEREEMITTER\";\n    };\n    /**\n     * Returns the string \"SphereParticleEmitter\"\n     * @returns a string containing the class name\n     */\n    SphereParticleEmitter.prototype.getClassName = function () {\n        return \"SphereParticleEmitter\";\n    };\n    /**\n     * Serializes the particle system to a JSON object.\n     * @returns the JSON object\n     */\n    SphereParticleEmitter.prototype.serialize = function () {\n        var serializationObject = {};\n        serializationObject.type = this.getClassName();\n        serializationObject.radius = this.radius;\n        serializationObject.radiusRange = this.radiusRange;\n        serializationObject.directionRandomizer = this.directionRandomizer;\n        return serializationObject;\n    };\n    /**\n     * Parse properties from a JSON object\n     * @param serializationObject defines the JSON object\n     */\n    SphereParticleEmitter.prototype.parse = function (serializationObject) {\n        this.radius = serializationObject.radius;\n        this.radiusRange = serializationObject.radiusRange;\n        this.directionRandomizer = serializationObject.directionRandomizer;\n    };\n    return SphereParticleEmitter;\n}());\nexport { SphereParticleEmitter };\n/**\n * Particle emitter emitting particles from the inside of a sphere.\n * It emits the particles randomly between two vectors.\n */\nvar SphereDirectedParticleEmitter = /** @class */ (function (_super) {\n    __extends(SphereDirectedParticleEmitter, _super);\n    /**\n     * Creates a new instance SphereDirectedParticleEmitter\n     * @param radius the radius of the emission sphere (1 by default)\n     * @param direction1 the min limit of the emission direction (up vector by default)\n     * @param direction2 the max limit of the emission direction (up vector by default)\n     */\n    function SphereDirectedParticleEmitter(radius, \n    /**\n     * The min limit of the emission direction.\n     */\n    direction1, \n    /**\n     * The max limit of the emission direction.\n     */\n    direction2) {\n        if (radius === void 0) { radius = 1; }\n        if (direction1 === void 0) { direction1 = new Vector3(0, 1, 0); }\n        if (direction2 === void 0) { direction2 = new Vector3(0, 1, 0); }\n        var _this = _super.call(this, radius) || this;\n        _this.direction1 = direction1;\n        _this.direction2 = direction2;\n        return _this;\n    }\n    /**\n     * Called by the particle System when the direction is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param directionToUpdate is the direction vector to update with the result\n     */\n    SphereDirectedParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate) {\n        var randX = Scalar.RandomRange(this.direction1.x, this.direction2.x);\n        var randY = Scalar.RandomRange(this.direction1.y, this.direction2.y);\n        var randZ = Scalar.RandomRange(this.direction1.z, this.direction2.z);\n        Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\n    };\n    /**\n     * Clones the current emitter and returns a copy of it\n     * @returns the new emitter\n     */\n    SphereDirectedParticleEmitter.prototype.clone = function () {\n        var newOne = new SphereDirectedParticleEmitter(this.radius, this.direction1, this.direction2);\n        DeepCopier.DeepCopy(this, newOne);\n        return newOne;\n    };\n    /**\n     * Called by the GPUParticleSystem to setup the update shader\n     * @param uboOrEffect defines the update shader\n     */\n    SphereDirectedParticleEmitter.prototype.applyToShader = function (uboOrEffect) {\n        uboOrEffect.setFloat(\"radius\", this.radius);\n        uboOrEffect.setFloat(\"radiusRange\", this.radiusRange);\n        uboOrEffect.setVector3(\"direction1\", this.direction1);\n        uboOrEffect.setVector3(\"direction2\", this.direction2);\n    };\n    /**\n     * Creates the structure of the ubo for this particle emitter\n     * @param ubo ubo to create the structure for\n     */\n    SphereDirectedParticleEmitter.prototype.buildUniformLayout = function (ubo) {\n        ubo.addUniform(\"radius\", 1);\n        ubo.addUniform(\"radiusRange\", 1);\n        ubo.addUniform(\"direction1\", 3);\n        ubo.addUniform(\"direction2\", 3);\n    };\n    /**\n     * Returns a string to use to update the GPU particles update shader\n     * @returns a string containing the defines string\n     */\n    SphereDirectedParticleEmitter.prototype.getEffectDefines = function () {\n        return \"#define SPHEREEMITTER\\n#define DIRECTEDSPHEREEMITTER\";\n    };\n    /**\n     * Returns the string \"SphereDirectedParticleEmitter\"\n     * @returns a string containing the class name\n     */\n    SphereDirectedParticleEmitter.prototype.getClassName = function () {\n        return \"SphereDirectedParticleEmitter\";\n    };\n    /**\n     * Serializes the particle system to a JSON object.\n     * @returns the JSON object\n     */\n    SphereDirectedParticleEmitter.prototype.serialize = function () {\n        var serializationObject = _super.prototype.serialize.call(this);\n        serializationObject.direction1 = this.direction1.asArray();\n        serializationObject.direction2 = this.direction2.asArray();\n        return serializationObject;\n    };\n    /**\n     * Parse properties from a JSON object\n     * @param serializationObject defines the JSON object\n     */\n    SphereDirectedParticleEmitter.prototype.parse = function (serializationObject) {\n        _super.prototype.parse.call(this, serializationObject);\n        this.direction1.copyFrom(serializationObject.direction1);\n        this.direction2.copyFrom(serializationObject.direction2);\n    };\n    return SphereDirectedParticleEmitter;\n}(SphereParticleEmitter));\nexport { SphereDirectedParticleEmitter };\n//# sourceMappingURL=sphereParticleEmitter.js.map","import { DeepCopier } from \"../../Misc/deepCopier.js\";\nimport { Vector3, TmpVectors } from \"../../Maths/math.vector.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\nimport { VertexBuffer } from \"../../Buffers/buffer.js\";\n/**\n * Particle emitter emitting particles from the inside of a box.\n * It emits the particles randomly between 2 given directions.\n */\nvar MeshParticleEmitter = /** @class */ (function () {\n    /**\n     * Creates a new instance MeshParticleEmitter\n     * @param mesh defines the mesh to use as source\n     */\n    function MeshParticleEmitter(mesh) {\n        if (mesh === void 0) { mesh = null; }\n        this._indices = null;\n        this._positions = null;\n        this._normals = null;\n        this._storedNormal = Vector3.Zero();\n        this._mesh = null;\n        /**\n         * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\n         */\n        this.direction1 = new Vector3(0, 1.0, 0);\n        /**\n         * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\n         */\n        this.direction2 = new Vector3(0, 1.0, 0);\n        /**\n         * Gets or sets a boolean indicating that particle directions must be built from mesh face normals\n         */\n        this.useMeshNormalsForDirection = true;\n        this.mesh = mesh;\n    }\n    Object.defineProperty(MeshParticleEmitter.prototype, \"mesh\", {\n        /** Defines the mesh to use as source */\n        get: function () {\n            return this._mesh;\n        },\n        set: function (value) {\n            if (this._mesh === value) {\n                return;\n            }\n            this._mesh = value;\n            if (value) {\n                this._indices = value.getIndices();\n                this._positions = value.getVerticesData(VertexBuffer.PositionKind);\n                this._normals = value.getVerticesData(VertexBuffer.NormalKind);\n            }\n            else {\n                this._indices = null;\n                this._positions = null;\n                this._normals = null;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Called by the particle System when the direction is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param directionToUpdate is the direction vector to update with the result\n     * @param particle is the particle we are computed the direction for\n     * @param isLocal defines if the direction should be set in local space\n     */\n    MeshParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle, isLocal) {\n        if (this.useMeshNormalsForDirection && this._normals) {\n            Vector3.TransformNormalToRef(this._storedNormal, worldMatrix, directionToUpdate);\n            return;\n        }\n        var randX = Scalar.RandomRange(this.direction1.x, this.direction2.x);\n        var randY = Scalar.RandomRange(this.direction1.y, this.direction2.y);\n        var randZ = Scalar.RandomRange(this.direction1.z, this.direction2.z);\n        if (isLocal) {\n            directionToUpdate.copyFromFloats(randX, randY, randZ);\n            return;\n        }\n        Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\n    };\n    /**\n     * Called by the particle System when the position is computed for the created particle.\n     * @param worldMatrix is the world matrix of the particle system\n     * @param positionToUpdate is the position vector to update with the result\n     * @param particle is the particle we are computed the position for\n     * @param isLocal defines if the position should be set in local space\n     */\n    MeshParticleEmitter.prototype.startPositionFunction = function (worldMatrix, positionToUpdate, particle, isLocal) {\n        if (!this._indices || !this._positions) {\n            return;\n        }\n        var randomFaceIndex = (3 * Math.random() * (this._indices.length / 3)) | 0;\n        var bu = Math.random();\n        var bv = Math.random() * (1.0 - bu);\n        var bw = 1.0 - bu - bv;\n        var faceIndexA = this._indices[randomFaceIndex];\n        var faceIndexB = this._indices[randomFaceIndex + 1];\n        var faceIndexC = this._indices[randomFaceIndex + 2];\n        var vertexA = TmpVectors.Vector3[0];\n        var vertexB = TmpVectors.Vector3[1];\n        var vertexC = TmpVectors.Vector3[2];\n        var randomVertex = TmpVectors.Vector3[3];\n        Vector3.FromArrayToRef(this._positions, faceIndexA * 3, vertexA);\n        Vector3.FromArrayToRef(this._positions, faceIndexB * 3, vertexB);\n        Vector3.FromArrayToRef(this._positions, faceIndexC * 3, vertexC);\n        randomVertex.x = bu * vertexA.x + bv * vertexB.x + bw * vertexC.x;\n        randomVertex.y = bu * vertexA.y + bv * vertexB.y + bw * vertexC.y;\n        randomVertex.z = bu * vertexA.z + bv * vertexB.z + bw * vertexC.z;\n        if (isLocal) {\n            positionToUpdate.copyFromFloats(randomVertex.x, randomVertex.y, randomVertex.z);\n        }\n        else {\n            Vector3.TransformCoordinatesFromFloatsToRef(randomVertex.x, randomVertex.y, randomVertex.z, worldMatrix, positionToUpdate);\n        }\n        if (this.useMeshNormalsForDirection && this._normals) {\n            Vector3.FromArrayToRef(this._normals, faceIndexA * 3, vertexA);\n            Vector3.FromArrayToRef(this._normals, faceIndexB * 3, vertexB);\n            Vector3.FromArrayToRef(this._normals, faceIndexC * 3, vertexC);\n            this._storedNormal.x = bu * vertexA.x + bv * vertexB.x + bw * vertexC.x;\n            this._storedNormal.y = bu * vertexA.y + bv * vertexB.y + bw * vertexC.y;\n            this._storedNormal.z = bu * vertexA.z + bv * vertexB.z + bw * vertexC.z;\n        }\n    };\n    /**\n     * Clones the current emitter and returns a copy of it\n     * @returns the new emitter\n     */\n    MeshParticleEmitter.prototype.clone = function () {\n        var newOne = new MeshParticleEmitter(this.mesh);\n        DeepCopier.DeepCopy(this, newOne);\n        return newOne;\n    };\n    /**\n     * Called by the GPUParticleSystem to setup the update shader\n     * @param uboOrEffect defines the update shader\n     */\n    MeshParticleEmitter.prototype.applyToShader = function (uboOrEffect) {\n        uboOrEffect.setVector3(\"direction1\", this.direction1);\n        uboOrEffect.setVector3(\"direction2\", this.direction2);\n    };\n    /**\n     * Creates the structure of the ubo for this particle emitter\n     * @param ubo ubo to create the structure for\n     */\n    MeshParticleEmitter.prototype.buildUniformLayout = function (ubo) {\n        ubo.addUniform(\"direction1\", 3);\n        ubo.addUniform(\"direction2\", 3);\n    };\n    /**\n     * Returns a string to use to update the GPU particles update shader\n     * @returns a string containing the defines string\n     */\n    MeshParticleEmitter.prototype.getEffectDefines = function () {\n        return \"\";\n    };\n    /**\n     * Returns the string \"BoxParticleEmitter\"\n     * @returns a string containing the class name\n     */\n    MeshParticleEmitter.prototype.getClassName = function () {\n        return \"MeshParticleEmitter\";\n    };\n    /**\n     * Serializes the particle system to a JSON object.\n     * @returns the JSON object\n     */\n    MeshParticleEmitter.prototype.serialize = function () {\n        var _a;\n        var serializationObject = {};\n        serializationObject.type = this.getClassName();\n        serializationObject.direction1 = this.direction1.asArray();\n        serializationObject.direction2 = this.direction2.asArray();\n        serializationObject.meshId = (_a = this.mesh) === null || _a === void 0 ? void 0 : _a.id;\n        serializationObject.useMeshNormalsForDirection = this.useMeshNormalsForDirection;\n        return serializationObject;\n    };\n    /**\n     * Parse properties from a JSON object\n     * @param serializationObject defines the JSON object\n     * @param scene defines the hosting scene\n     */\n    MeshParticleEmitter.prototype.parse = function (serializationObject, scene) {\n        Vector3.FromArrayToRef(serializationObject.direction1, 0, this.direction1);\n        Vector3.FromArrayToRef(serializationObject.direction2, 0, this.direction2);\n        if (serializationObject.meshId && scene) {\n            this.mesh = scene.getLastMeshById(serializationObject.meshId);\n        }\n        this.useMeshNormalsForDirection = serializationObject.useMeshNormalsForDirection;\n    };\n    return MeshParticleEmitter;\n}());\nexport { MeshParticleEmitter };\n//# sourceMappingURL=meshParticleEmitter.js.map","import { Vector2, Vector3 } from \"../Maths/math.vector.js\";\nimport { ImageProcessingConfigurationDefines } from \"../Materials/imageProcessingConfiguration.js\";\nimport { BoxParticleEmitter, PointParticleEmitter, HemisphericParticleEmitter, SphereParticleEmitter, SphereDirectedParticleEmitter, CylinderParticleEmitter, CylinderDirectedParticleEmitter, ConeParticleEmitter, } from \"../Particles/EmitterTypes/index.js\";\n\nimport { Color4 } from \"../Maths/math.color.js\";\nimport \"../Engines/Extensions/engine.dynamicBuffer.js\";\n/**\n * This represents the base class for particle system in Babylon.\n * Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.\n * Particles can take different shapes while emitted like box, sphere, cone or you can write your custom function.\n * @example https://doc.babylonjs.com/babylon101/particles\n */\nvar BaseParticleSystem = /** @class */ (function () {\n    /**\n     * Instantiates a particle system.\n     * Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.\n     * @param name The name of the particle system\n     */\n    function BaseParticleSystem(name) {\n        /**\n         * List of animations used by the particle system.\n         */\n        this.animations = [];\n        /**\n         * The rendering group used by the Particle system to chose when to render.\n         */\n        this.renderingGroupId = 0;\n        /**\n         * The emitter represents the Mesh or position we are attaching the particle system to.\n         */\n        this.emitter = Vector3.Zero();\n        /**\n         * The maximum number of particles to emit per frame\n         */\n        this.emitRate = 10;\n        /**\n         * If you want to launch only a few particles at once, that can be done, as well.\n         */\n        this.manualEmitCount = -1;\n        /**\n         * The overall motion speed (0.01 is default update speed, faster updates = faster animation)\n         */\n        this.updateSpeed = 0.01;\n        /**\n         * The amount of time the particle system is running (depends of the overall update speed).\n         */\n        this.targetStopDuration = 0;\n        /**\n         * Specifies whether the particle system will be disposed once it reaches the end of the animation.\n         */\n        this.disposeOnStop = false;\n        /**\n         * Minimum power of emitting particles.\n         */\n        this.minEmitPower = 1;\n        /**\n         * Maximum power of emitting particles.\n         */\n        this.maxEmitPower = 1;\n        /**\n         * Minimum life time of emitting particles.\n         */\n        this.minLifeTime = 1;\n        /**\n         * Maximum life time of emitting particles.\n         */\n        this.maxLifeTime = 1;\n        /**\n         * Minimum Size of emitting particles.\n         */\n        this.minSize = 1;\n        /**\n         * Maximum Size of emitting particles.\n         */\n        this.maxSize = 1;\n        /**\n         * Minimum scale of emitting particles on X axis.\n         */\n        this.minScaleX = 1;\n        /**\n         * Maximum scale of emitting particles on X axis.\n         */\n        this.maxScaleX = 1;\n        /**\n         * Minimum scale of emitting particles on Y axis.\n         */\n        this.minScaleY = 1;\n        /**\n         * Maximum scale of emitting particles on Y axis.\n         */\n        this.maxScaleY = 1;\n        /**\n         * Gets or sets the minimal initial rotation in radians.\n         */\n        this.minInitialRotation = 0;\n        /**\n         * Gets or sets the maximal initial rotation in radians.\n         */\n        this.maxInitialRotation = 0;\n        /**\n         * Minimum angular speed of emitting particles (Z-axis rotation for each particle).\n         */\n        this.minAngularSpeed = 0;\n        /**\n         * Maximum angular speed of emitting particles (Z-axis rotation for each particle).\n         */\n        this.maxAngularSpeed = 0;\n        /**\n         * The layer mask we are rendering the particles through.\n         */\n        this.layerMask = 0x0fffffff;\n        /**\n         * This can help using your own shader to render the particle system.\n         * The according effect will be created\n         */\n        this.customShader = null;\n        /**\n         * By default particle system starts as soon as they are created. This prevents the\n         * automatic start to happen and let you decide when to start emitting particles.\n         */\n        this.preventAutoStart = false;\n        this._rootUrl = \"\";\n        /** Gets or sets the strength to apply to the noise value (default is (10, 10, 10)) */\n        this.noiseStrength = new Vector3(10, 10, 10);\n        /**\n         * Callback triggered when the particle animation is ending.\n         */\n        this.onAnimationEnd = null;\n        /**\n         * Blend mode use to render the particle, it can be either ParticleSystem.BLENDMODE_ONEONE or ParticleSystem.BLENDMODE_STANDARD.\n         */\n        this.blendMode = BaseParticleSystem.BLENDMODE_ONEONE;\n        /**\n         * Forces the particle to write their depth information to the depth buffer. This can help preventing other draw calls\n         * to override the particles.\n         */\n        this.forceDepthWrite = false;\n        /** Gets or sets a value indicating how many cycles (or frames) must be executed before first rendering (this value has to be set before starting the system). Default is 0 */\n        this.preWarmCycles = 0;\n        /** Gets or sets a value indicating the time step multiplier to use in pre-warm mode (default is 1) */\n        this.preWarmStepOffset = 1;\n        /**\n         * If using a spritesheet (isAnimationSheetEnabled) defines the speed of the sprite loop (default is 1 meaning the animation will play once during the entire particle lifetime)\n         */\n        this.spriteCellChangeSpeed = 1;\n        /**\n         * If using a spritesheet (isAnimationSheetEnabled) defines the first sprite cell to display\n         */\n        this.startSpriteCellID = 0;\n        /**\n         * If using a spritesheet (isAnimationSheetEnabled) defines the last sprite cell to display\n         */\n        this.endSpriteCellID = 0;\n        /**\n         * If using a spritesheet (isAnimationSheetEnabled), defines the sprite cell width to use\n         */\n        this.spriteCellWidth = 0;\n        /**\n         * If using a spritesheet (isAnimationSheetEnabled), defines the sprite cell height to use\n         */\n        this.spriteCellHeight = 0;\n        /**\n         * If using a spritesheet (isAnimationSheetEnabled), defines wether the sprite animation is looping\n         */\n        this.spriteCellLoop = true;\n        /**\n         * This allows the system to random pick the start cell ID between startSpriteCellID and endSpriteCellID\n         */\n        this.spriteRandomStartCell = false;\n        /** Gets or sets a Vector2 used to move the pivot (by default (0,0)) */\n        this.translationPivot = new Vector2(0, 0);\n        /**\n         * Gets or sets a boolean indicating that hosted animations (in the system.animations array) must be started when system.start() is called\n         */\n        this.beginAnimationOnStart = false;\n        /**\n         * Gets or sets the frame to start the animation from when beginAnimationOnStart is true\n         */\n        this.beginAnimationFrom = 0;\n        /**\n         * Gets or sets the frame to end the animation on when beginAnimationOnStart is true\n         */\n        this.beginAnimationTo = 60;\n        /**\n         * Gets or sets a boolean indicating if animations must loop when beginAnimationOnStart is true\n         */\n        this.beginAnimationLoop = false;\n        /**\n         * Gets or sets a world offset applied to all particles\n         */\n        this.worldOffset = new Vector3(0, 0, 0);\n        /**\n         * You can use gravity if you want to give an orientation to your particles.\n         */\n        this.gravity = Vector3.Zero();\n        this._colorGradients = null;\n        this._sizeGradients = null;\n        this._lifeTimeGradients = null;\n        this._angularSpeedGradients = null;\n        this._velocityGradients = null;\n        this._limitVelocityGradients = null;\n        this._dragGradients = null;\n        this._emitRateGradients = null;\n        this._startSizeGradients = null;\n        this._rampGradients = null;\n        this._colorRemapGradients = null;\n        this._alphaRemapGradients = null;\n        /**\n         * Defines the delay in milliseconds before starting the system (0 by default)\n         */\n        this.startDelay = 0;\n        /** Gets or sets a value indicating the damping to apply if the limit velocity factor is reached */\n        this.limitVelocityDamping = 0.4;\n        /**\n         * Random color of each particle after it has been emitted, between color1 and color2 vectors\n         */\n        this.color1 = new Color4(1.0, 1.0, 1.0, 1.0);\n        /**\n         * Random color of each particle after it has been emitted, between color1 and color2 vectors\n         */\n        this.color2 = new Color4(1.0, 1.0, 1.0, 1.0);\n        /**\n         * Color the particle will have at the end of its lifetime\n         */\n        this.colorDead = new Color4(0, 0, 0, 1.0);\n        /**\n         * An optional mask to filter some colors out of the texture, or filter a part of the alpha channel\n         */\n        this.textureMask = new Color4(1.0, 1.0, 1.0, 1.0);\n        /** @hidden */\n        this._isSubEmitter = false;\n        /** @hidden */\n        this._billboardMode = 7;\n        /** @hidden */\n        this._isBillboardBased = true;\n        /**\n         * Local cache of defines for image processing.\n         */\n        this._imageProcessingConfigurationDefines = new ImageProcessingConfigurationDefines();\n        this.id = name;\n        this.name = name;\n    }\n    Object.defineProperty(BaseParticleSystem.prototype, \"noiseTexture\", {\n        /**\n         * Gets or sets a texture used to add random noise to particle positions\n         */\n        get: function () {\n            return this._noiseTexture;\n        },\n        set: function (value) {\n            if (this._noiseTexture === value) {\n                return;\n            }\n            this._noiseTexture = value;\n            this._reset();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseParticleSystem.prototype, \"isAnimationSheetEnabled\", {\n        /**\n         * Gets or sets whether an animation sprite sheet is enabled or not on the particle system\n         */\n        get: function () {\n            return this._isAnimationSheetEnabled;\n        },\n        set: function (value) {\n            if (this._isAnimationSheetEnabled == value) {\n                return;\n            }\n            this._isAnimationSheetEnabled = value;\n            this._reset();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get hosting scene\n     * @returns the scene\n     */\n    BaseParticleSystem.prototype.getScene = function () {\n        return this._scene;\n    };\n    BaseParticleSystem.prototype._hasTargetStopDurationDependantGradient = function () {\n        return ((this._startSizeGradients && this._startSizeGradients.length > 0) ||\n            (this._emitRateGradients && this._emitRateGradients.length > 0) ||\n            (this._lifeTimeGradients && this._lifeTimeGradients.length > 0));\n    };\n    /**\n     * Gets the current list of drag gradients.\n     * You must use addDragGradient and removeDragGradient to update this list\n     * @returns the list of drag gradients\n     */\n    BaseParticleSystem.prototype.getDragGradients = function () {\n        return this._dragGradients;\n    };\n    /**\n     * Gets the current list of limit velocity gradients.\n     * You must use addLimitVelocityGradient and removeLimitVelocityGradient to update this list\n     * @returns the list of limit velocity gradients\n     */\n    BaseParticleSystem.prototype.getLimitVelocityGradients = function () {\n        return this._limitVelocityGradients;\n    };\n    /**\n     * Gets the current list of color gradients.\n     * You must use addColorGradient and removeColorGradient to update this list\n     * @returns the list of color gradients\n     */\n    BaseParticleSystem.prototype.getColorGradients = function () {\n        return this._colorGradients;\n    };\n    /**\n     * Gets the current list of size gradients.\n     * You must use addSizeGradient and removeSizeGradient to update this list\n     * @returns the list of size gradients\n     */\n    BaseParticleSystem.prototype.getSizeGradients = function () {\n        return this._sizeGradients;\n    };\n    /**\n     * Gets the current list of color remap gradients.\n     * You must use addColorRemapGradient and removeColorRemapGradient to update this list\n     * @returns the list of color remap gradients\n     */\n    BaseParticleSystem.prototype.getColorRemapGradients = function () {\n        return this._colorRemapGradients;\n    };\n    /**\n     * Gets the current list of alpha remap gradients.\n     * You must use addAlphaRemapGradient and removeAlphaRemapGradient to update this list\n     * @returns the list of alpha remap gradients\n     */\n    BaseParticleSystem.prototype.getAlphaRemapGradients = function () {\n        return this._alphaRemapGradients;\n    };\n    /**\n     * Gets the current list of life time gradients.\n     * You must use addLifeTimeGradient and removeLifeTimeGradient to update this list\n     * @returns the list of life time gradients\n     */\n    BaseParticleSystem.prototype.getLifeTimeGradients = function () {\n        return this._lifeTimeGradients;\n    };\n    /**\n     * Gets the current list of angular speed gradients.\n     * You must use addAngularSpeedGradient and removeAngularSpeedGradient to update this list\n     * @returns the list of angular speed gradients\n     */\n    BaseParticleSystem.prototype.getAngularSpeedGradients = function () {\n        return this._angularSpeedGradients;\n    };\n    /**\n     * Gets the current list of velocity gradients.\n     * You must use addVelocityGradient and removeVelocityGradient to update this list\n     * @returns the list of velocity gradients\n     */\n    BaseParticleSystem.prototype.getVelocityGradients = function () {\n        return this._velocityGradients;\n    };\n    /**\n     * Gets the current list of start size gradients.\n     * You must use addStartSizeGradient and removeStartSizeGradient to update this list\n     * @returns the list of start size gradients\n     */\n    BaseParticleSystem.prototype.getStartSizeGradients = function () {\n        return this._startSizeGradients;\n    };\n    /**\n     * Gets the current list of emit rate gradients.\n     * You must use addEmitRateGradient and removeEmitRateGradient to update this list\n     * @returns the list of emit rate gradients\n     */\n    BaseParticleSystem.prototype.getEmitRateGradients = function () {\n        return this._emitRateGradients;\n    };\n    Object.defineProperty(BaseParticleSystem.prototype, \"direction1\", {\n        /**\n         * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\n         * This only works when particleEmitterTyps is a BoxParticleEmitter\n         */\n        get: function () {\n            if (this.particleEmitterType.direction1) {\n                return this.particleEmitterType.direction1;\n            }\n            return Vector3.Zero();\n        },\n        set: function (value) {\n            if (this.particleEmitterType.direction1) {\n                this.particleEmitterType.direction1 = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseParticleSystem.prototype, \"direction2\", {\n        /**\n         * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\n         * This only works when particleEmitterTyps is a BoxParticleEmitter\n         */\n        get: function () {\n            if (this.particleEmitterType.direction2) {\n                return this.particleEmitterType.direction2;\n            }\n            return Vector3.Zero();\n        },\n        set: function (value) {\n            if (this.particleEmitterType.direction2) {\n                this.particleEmitterType.direction2 = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseParticleSystem.prototype, \"minEmitBox\", {\n        /**\n         * Minimum box point around our emitter. Our emitter is the center of particles source, but if you want your particles to emit from more than one point, then you can tell it to do so.\n         * This only works when particleEmitterTyps is a BoxParticleEmitter\n         */\n        get: function () {\n            if (this.particleEmitterType.minEmitBox) {\n                return this.particleEmitterType.minEmitBox;\n            }\n            return Vector3.Zero();\n        },\n        set: function (value) {\n            if (this.particleEmitterType.minEmitBox) {\n                this.particleEmitterType.minEmitBox = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseParticleSystem.prototype, \"maxEmitBox\", {\n        /**\n         * Maximum box point around our emitter. Our emitter is the center of particles source, but if you want your particles to emit from more than one point, then you can tell it to do so.\n         * This only works when particleEmitterTyps is a BoxParticleEmitter\n         */\n        get: function () {\n            if (this.particleEmitterType.maxEmitBox) {\n                return this.particleEmitterType.maxEmitBox;\n            }\n            return Vector3.Zero();\n        },\n        set: function (value) {\n            if (this.particleEmitterType.maxEmitBox) {\n                this.particleEmitterType.maxEmitBox = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseParticleSystem.prototype, \"billboardMode\", {\n        /**\n         * Gets or sets the billboard mode to use when isBillboardBased = true.\n         * Value can be: ParticleSystem.BILLBOARDMODE_ALL, ParticleSystem.BILLBOARDMODE_Y, ParticleSystem.BILLBOARDMODE_STRETCHED\n         */\n        get: function () {\n            return this._billboardMode;\n        },\n        set: function (value) {\n            if (this._billboardMode === value) {\n                return;\n            }\n            this._billboardMode = value;\n            this._reset();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseParticleSystem.prototype, \"isBillboardBased\", {\n        /**\n         * Gets or sets a boolean indicating if the particles must be rendered as billboard or aligned with the direction\n         */\n        get: function () {\n            return this._isBillboardBased;\n        },\n        set: function (value) {\n            if (this._isBillboardBased === value) {\n                return;\n            }\n            this._isBillboardBased = value;\n            this._reset();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseParticleSystem.prototype, \"imageProcessingConfiguration\", {\n        /**\n         * Gets the image processing configuration used either in this material.\n         */\n        get: function () {\n            return this._imageProcessingConfiguration;\n        },\n        /**\n         * Sets the Default image processing configuration used either in the this material.\n         *\n         * If sets to null, the scene one is in use.\n         */\n        set: function (value) {\n            this._attachImageProcessingConfiguration(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Attaches a new image processing configuration to the Standard Material.\n     * @param configuration\n     */\n    BaseParticleSystem.prototype._attachImageProcessingConfiguration = function (configuration) {\n        if (configuration === this._imageProcessingConfiguration) {\n            return;\n        }\n        // Pick the scene configuration if needed.\n        if (!configuration && this._scene) {\n            this._imageProcessingConfiguration = this._scene.imageProcessingConfiguration;\n        }\n        else {\n            this._imageProcessingConfiguration = configuration;\n        }\n    };\n    /** @hidden */\n    BaseParticleSystem.prototype._reset = function () { };\n    /**\n     * @param gradient\n     * @param gradients\n     * @param texture\n     * @hidden\n     */\n    BaseParticleSystem.prototype._removeGradientAndTexture = function (gradient, gradients, texture) {\n        if (!gradients) {\n            return this;\n        }\n        var index = 0;\n        for (var _i = 0, gradients_1 = gradients; _i < gradients_1.length; _i++) {\n            var valueGradient = gradients_1[_i];\n            if (valueGradient.gradient === gradient) {\n                gradients.splice(index, 1);\n                break;\n            }\n            index++;\n        }\n        if (texture) {\n            texture.dispose();\n        }\n        return this;\n    };\n    /**\n     * Creates a Point Emitter for the particle system (emits directly from the emitter position)\n     * @param direction1 Particles are emitted between the direction1 and direction2 from within the box\n     * @param direction2 Particles are emitted between the direction1 and direction2 from within the box\n     * @returns the emitter\n     */\n    BaseParticleSystem.prototype.createPointEmitter = function (direction1, direction2) {\n        var particleEmitter = new PointParticleEmitter();\n        particleEmitter.direction1 = direction1;\n        particleEmitter.direction2 = direction2;\n        this.particleEmitterType = particleEmitter;\n        return particleEmitter;\n    };\n    /**\n     * Creates a Hemisphere Emitter for the particle system (emits along the hemisphere radius)\n     * @param radius The radius of the hemisphere to emit from\n     * @param radiusRange The range of the hemisphere to emit from [0-1] 0 Surface Only, 1 Entire Radius\n     * @returns the emitter\n     */\n    BaseParticleSystem.prototype.createHemisphericEmitter = function (radius, radiusRange) {\n        if (radius === void 0) { radius = 1; }\n        if (radiusRange === void 0) { radiusRange = 1; }\n        var particleEmitter = new HemisphericParticleEmitter(radius, radiusRange);\n        this.particleEmitterType = particleEmitter;\n        return particleEmitter;\n    };\n    /**\n     * Creates a Sphere Emitter for the particle system (emits along the sphere radius)\n     * @param radius The radius of the sphere to emit from\n     * @param radiusRange The range of the sphere to emit from [0-1] 0 Surface Only, 1 Entire Radius\n     * @returns the emitter\n     */\n    BaseParticleSystem.prototype.createSphereEmitter = function (radius, radiusRange) {\n        if (radius === void 0) { radius = 1; }\n        if (radiusRange === void 0) { radiusRange = 1; }\n        var particleEmitter = new SphereParticleEmitter(radius, radiusRange);\n        this.particleEmitterType = particleEmitter;\n        return particleEmitter;\n    };\n    /**\n     * Creates a Directed Sphere Emitter for the particle system (emits between direction1 and direction2)\n     * @param radius The radius of the sphere to emit from\n     * @param direction1 Particles are emitted between the direction1 and direction2 from within the sphere\n     * @param direction2 Particles are emitted between the direction1 and direction2 from within the sphere\n     * @returns the emitter\n     */\n    BaseParticleSystem.prototype.createDirectedSphereEmitter = function (radius, direction1, direction2) {\n        if (radius === void 0) { radius = 1; }\n        if (direction1 === void 0) { direction1 = new Vector3(0, 1.0, 0); }\n        if (direction2 === void 0) { direction2 = new Vector3(0, 1.0, 0); }\n        var particleEmitter = new SphereDirectedParticleEmitter(radius, direction1, direction2);\n        this.particleEmitterType = particleEmitter;\n        return particleEmitter;\n    };\n    /**\n     * Creates a Cylinder Emitter for the particle system (emits from the cylinder to the particle position)\n     * @param radius The radius of the emission cylinder\n     * @param height The height of the emission cylinder\n     * @param radiusRange The range of emission [0-1] 0 Surface only, 1 Entire Radius\n     * @param directionRandomizer How much to randomize the particle direction [0-1]\n     * @returns the emitter\n     */\n    BaseParticleSystem.prototype.createCylinderEmitter = function (radius, height, radiusRange, directionRandomizer) {\n        if (radius === void 0) { radius = 1; }\n        if (height === void 0) { height = 1; }\n        if (radiusRange === void 0) { radiusRange = 1; }\n        if (directionRandomizer === void 0) { directionRandomizer = 0; }\n        var particleEmitter = new CylinderParticleEmitter(radius, height, radiusRange, directionRandomizer);\n        this.particleEmitterType = particleEmitter;\n        return particleEmitter;\n    };\n    /**\n     * Creates a Directed Cylinder Emitter for the particle system (emits between direction1 and direction2)\n     * @param radius The radius of the cylinder to emit from\n     * @param height The height of the emission cylinder\n     * @param radiusRange the range of the emission cylinder [0-1] 0 Surface only, 1 Entire Radius (1 by default)\n     * @param direction1 Particles are emitted between the direction1 and direction2 from within the cylinder\n     * @param direction2 Particles are emitted between the direction1 and direction2 from within the cylinder\n     * @returns the emitter\n     */\n    BaseParticleSystem.prototype.createDirectedCylinderEmitter = function (radius, height, radiusRange, direction1, direction2) {\n        if (radius === void 0) { radius = 1; }\n        if (height === void 0) { height = 1; }\n        if (radiusRange === void 0) { radiusRange = 1; }\n        if (direction1 === void 0) { direction1 = new Vector3(0, 1.0, 0); }\n        if (direction2 === void 0) { direction2 = new Vector3(0, 1.0, 0); }\n        var particleEmitter = new CylinderDirectedParticleEmitter(radius, height, radiusRange, direction1, direction2);\n        this.particleEmitterType = particleEmitter;\n        return particleEmitter;\n    };\n    /**\n     * Creates a Cone Emitter for the particle system (emits from the cone to the particle position)\n     * @param radius The radius of the cone to emit from\n     * @param angle The base angle of the cone\n     * @returns the emitter\n     */\n    BaseParticleSystem.prototype.createConeEmitter = function (radius, angle) {\n        if (radius === void 0) { radius = 1; }\n        if (angle === void 0) { angle = Math.PI / 4; }\n        var particleEmitter = new ConeParticleEmitter(radius, angle);\n        this.particleEmitterType = particleEmitter;\n        return particleEmitter;\n    };\n    /**\n     * Creates a Box Emitter for the particle system. (emits between direction1 and direction2 from withing the box defined by minEmitBox and maxEmitBox)\n     * @param direction1 Particles are emitted between the direction1 and direction2 from within the box\n     * @param direction2 Particles are emitted between the direction1 and direction2 from within the box\n     * @param minEmitBox Particles are emitted from the box between minEmitBox and maxEmitBox\n     * @param maxEmitBox  Particles are emitted from the box between minEmitBox and maxEmitBox\n     * @returns the emitter\n     */\n    BaseParticleSystem.prototype.createBoxEmitter = function (direction1, direction2, minEmitBox, maxEmitBox) {\n        var particleEmitter = new BoxParticleEmitter();\n        this.particleEmitterType = particleEmitter;\n        this.direction1 = direction1;\n        this.direction2 = direction2;\n        this.minEmitBox = minEmitBox;\n        this.maxEmitBox = maxEmitBox;\n        return particleEmitter;\n    };\n    /**\n     * Source color is added to the destination color without alpha affecting the result\n     */\n    BaseParticleSystem.BLENDMODE_ONEONE = 0;\n    /**\n     * Blend current color and particle color using particle’s alpha\n     */\n    BaseParticleSystem.BLENDMODE_STANDARD = 1;\n    /**\n     * Add current color and particle color multiplied by particle’s alpha\n     */\n    BaseParticleSystem.BLENDMODE_ADD = 2;\n    /**\n     * Multiply current color with particle color\n     */\n    BaseParticleSystem.BLENDMODE_MULTIPLY = 3;\n    /**\n     * Multiply current color with particle color then add current color and particle color multiplied by particle’s alpha\n     */\n    BaseParticleSystem.BLENDMODE_MULTIPLYADD = 4;\n    return BaseParticleSystem;\n}());\nexport { BaseParticleSystem };\n//# sourceMappingURL=baseParticleSystem.js.map","import { Effect } from \"../Materials/effect.js\";\nimport { CustomParticleEmitter } from \"./EmitterTypes/customParticleEmitter.js\";\nimport { UniformBufferEffectCommonAccessor } from \"../Materials/uniformBufferEffectCommonAccessor.js\";\n\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport \"../Shaders/gpuUpdateParticles.fragment.js\";\nimport \"../Shaders/gpuUpdateParticles.vertex.js\";\n/** @hidden */\nvar WebGL2ParticleSystem = /** @class */ (function () {\n    function WebGL2ParticleSystem(parent, engine) {\n        this._renderVAO = [];\n        this._updateVAO = [];\n        this.alignDataInBuffer = false;\n        this._parent = parent;\n        this._engine = engine;\n        this._updateEffectOptions = {\n            attributes: [\n                \"position\",\n                \"initialPosition\",\n                \"age\",\n                \"life\",\n                \"seed\",\n                \"size\",\n                \"color\",\n                \"direction\",\n                \"initialDirection\",\n                \"angle\",\n                \"cellIndex\",\n                \"cellStartOffset\",\n                \"noiseCoordinates1\",\n                \"noiseCoordinates2\",\n            ],\n            uniformsNames: [\n                \"currentCount\",\n                \"timeDelta\",\n                \"emitterWM\",\n                \"lifeTime\",\n                \"color1\",\n                \"color2\",\n                \"sizeRange\",\n                \"scaleRange\",\n                \"gravity\",\n                \"emitPower\",\n                \"direction1\",\n                \"direction2\",\n                \"minEmitBox\",\n                \"maxEmitBox\",\n                \"radius\",\n                \"directionRandomizer\",\n                \"height\",\n                \"coneAngle\",\n                \"stopFactor\",\n                \"angleRange\",\n                \"radiusRange\",\n                \"cellInfos\",\n                \"noiseStrength\",\n                \"limitVelocityDamping\",\n            ],\n            uniformBuffersNames: [],\n            samplers: [\n                \"randomSampler\",\n                \"randomSampler2\",\n                \"sizeGradientSampler\",\n                \"angularSpeedGradientSampler\",\n                \"velocityGradientSampler\",\n                \"limitVelocityGradientSampler\",\n                \"noiseSampler\",\n                \"dragGradientSampler\",\n            ],\n            defines: \"\",\n            fallbacks: null,\n            onCompiled: null,\n            onError: null,\n            indexParameters: null,\n            maxSimultaneousLights: 0,\n            transformFeedbackVaryings: [],\n        };\n    }\n    WebGL2ParticleSystem.prototype.isUpdateBufferCreated = function () {\n        return !!this._updateEffect;\n    };\n    WebGL2ParticleSystem.prototype.isUpdateBufferReady = function () {\n        var _a, _b;\n        return (_b = (_a = this._updateEffect) === null || _a === void 0 ? void 0 : _a.isReady()) !== null && _b !== void 0 ? _b : false;\n    };\n    WebGL2ParticleSystem.prototype.createUpdateBuffer = function (defines) {\n        this._updateEffectOptions.transformFeedbackVaryings = [\"outPosition\"];\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outAge\");\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outSize\");\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outLife\");\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outSeed\");\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outDirection\");\n        if (this._parent.particleEmitterType instanceof CustomParticleEmitter) {\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outInitialPosition\");\n        }\n        if (!this._parent._colorGradientsTexture) {\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outColor\");\n        }\n        if (!this._parent._isBillboardBased) {\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outInitialDirection\");\n        }\n        if (this._parent.noiseTexture) {\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outNoiseCoordinates1\");\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outNoiseCoordinates2\");\n        }\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outAngle\");\n        if (this._parent.isAnimationSheetEnabled) {\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outCellIndex\");\n            if (this._parent.spriteRandomStartCell) {\n                this._updateEffectOptions.transformFeedbackVaryings.push(\"outCellStartOffset\");\n            }\n        }\n        this._updateEffectOptions.defines = defines;\n        this._updateEffect = new Effect(\"gpuUpdateParticles\", this._updateEffectOptions, this._engine);\n        return new UniformBufferEffectCommonAccessor(this._updateEffect);\n    };\n    WebGL2ParticleSystem.prototype.createVertexBuffers = function (updateBuffer, renderVertexBuffers) {\n        this._updateVAO.push(this._createUpdateVAO(updateBuffer));\n        this._renderVAO.push(this._engine.recordVertexArrayObject(renderVertexBuffers, null, this._parent._getWrapper(this._parent.blendMode).effect));\n        this._engine.bindArrayBuffer(null);\n    };\n    WebGL2ParticleSystem.prototype.createParticleBuffer = function (data) {\n        return data;\n    };\n    WebGL2ParticleSystem.prototype.bindDrawBuffers = function (index) {\n        this._engine.bindVertexArrayObject(this._renderVAO[index], null);\n    };\n    WebGL2ParticleSystem.prototype.preUpdateParticleBuffer = function () {\n        var engine = this._engine;\n        this._engine.enableEffect(this._updateEffect);\n        if (!engine.setState) {\n            throw new Error(\"GPU particles cannot work without a full Engine. ThinEngine is not supported\");\n        }\n    };\n    WebGL2ParticleSystem.prototype.updateParticleBuffer = function (index, targetBuffer, currentActiveCount) {\n        this._updateEffect.setTexture(\"randomSampler\", this._parent._randomTexture);\n        this._updateEffect.setTexture(\"randomSampler2\", this._parent._randomTexture2);\n        if (this._parent._sizeGradientsTexture) {\n            this._updateEffect.setTexture(\"sizeGradientSampler\", this._parent._sizeGradientsTexture);\n        }\n        if (this._parent._angularSpeedGradientsTexture) {\n            this._updateEffect.setTexture(\"angularSpeedGradientSampler\", this._parent._angularSpeedGradientsTexture);\n        }\n        if (this._parent._velocityGradientsTexture) {\n            this._updateEffect.setTexture(\"velocityGradientSampler\", this._parent._velocityGradientsTexture);\n        }\n        if (this._parent._limitVelocityGradientsTexture) {\n            this._updateEffect.setTexture(\"limitVelocityGradientSampler\", this._parent._limitVelocityGradientsTexture);\n        }\n        if (this._parent._dragGradientsTexture) {\n            this._updateEffect.setTexture(\"dragGradientSampler\", this._parent._dragGradientsTexture);\n        }\n        if (this._parent.noiseTexture) {\n            this._updateEffect.setTexture(\"noiseSampler\", this._parent.noiseTexture);\n        }\n        // Bind source VAO\n        this._engine.bindVertexArrayObject(this._updateVAO[index], null);\n        // Update\n        var engine = this._engine;\n        engine.bindTransformFeedbackBuffer(targetBuffer.getBuffer());\n        engine.setRasterizerState(false);\n        engine.beginTransformFeedback(true);\n        engine.drawArraysType(3, 0, currentActiveCount);\n        engine.endTransformFeedback();\n        engine.setRasterizerState(true);\n        engine.bindTransformFeedbackBuffer(null);\n    };\n    WebGL2ParticleSystem.prototype.releaseBuffers = function () { };\n    WebGL2ParticleSystem.prototype.releaseVertexBuffers = function () {\n        for (var index = 0; index < this._updateVAO.length; index++) {\n            this._engine.releaseVertexArrayObject(this._updateVAO[index]);\n        }\n        this._updateVAO = [];\n        for (var index = 0; index < this._renderVAO.length; index++) {\n            this._engine.releaseVertexArrayObject(this._renderVAO[index]);\n        }\n        this._renderVAO = [];\n    };\n    WebGL2ParticleSystem.prototype._createUpdateVAO = function (source) {\n        var updateVertexBuffers = {};\n        updateVertexBuffers[\"position\"] = source.createVertexBuffer(\"position\", 0, 3);\n        var offset = 3;\n        updateVertexBuffers[\"age\"] = source.createVertexBuffer(\"age\", offset, 1);\n        offset += 1;\n        updateVertexBuffers[\"size\"] = source.createVertexBuffer(\"size\", offset, 3);\n        offset += 3;\n        updateVertexBuffers[\"life\"] = source.createVertexBuffer(\"life\", offset, 1);\n        offset += 1;\n        updateVertexBuffers[\"seed\"] = source.createVertexBuffer(\"seed\", offset, 4);\n        offset += 4;\n        updateVertexBuffers[\"direction\"] = source.createVertexBuffer(\"direction\", offset, 3);\n        offset += 3;\n        if (this._parent.particleEmitterType instanceof CustomParticleEmitter) {\n            updateVertexBuffers[\"initialPosition\"] = source.createVertexBuffer(\"initialPosition\", offset, 3);\n            offset += 3;\n        }\n        if (!this._parent._colorGradientsTexture) {\n            updateVertexBuffers[\"color\"] = source.createVertexBuffer(\"color\", offset, 4);\n            offset += 4;\n        }\n        if (!this._parent._isBillboardBased) {\n            updateVertexBuffers[\"initialDirection\"] = source.createVertexBuffer(\"initialDirection\", offset, 3);\n            offset += 3;\n        }\n        if (this._parent.noiseTexture) {\n            updateVertexBuffers[\"noiseCoordinates1\"] = source.createVertexBuffer(\"noiseCoordinates1\", offset, 3);\n            offset += 3;\n            updateVertexBuffers[\"noiseCoordinates2\"] = source.createVertexBuffer(\"noiseCoordinates2\", offset, 3);\n            offset += 3;\n        }\n        if (this._parent._angularSpeedGradientsTexture) {\n            updateVertexBuffers[\"angle\"] = source.createVertexBuffer(\"angle\", offset, 1);\n            offset += 1;\n        }\n        else {\n            updateVertexBuffers[\"angle\"] = source.createVertexBuffer(\"angle\", offset, 2);\n            offset += 2;\n        }\n        if (this._parent._isAnimationSheetEnabled) {\n            updateVertexBuffers[\"cellIndex\"] = source.createVertexBuffer(\"cellIndex\", offset, 1);\n            offset += 1;\n            if (this._parent.spriteRandomStartCell) {\n                updateVertexBuffers[\"cellStartOffset\"] = source.createVertexBuffer(\"cellStartOffset\", offset, 1);\n                offset += 1;\n            }\n        }\n        var vao = this._engine.recordVertexArrayObject(updateVertexBuffers, null, this._updateEffect);\n        this._engine.bindArrayBuffer(null);\n        return vao;\n    };\n    return WebGL2ParticleSystem;\n}());\nexport { WebGL2ParticleSystem };\nRegisterClass(\"BABYLON.WebGL2ParticleSystem\", WebGL2ParticleSystem);\n//# sourceMappingURL=webgl2ParticleSystem.js.map","import { StorageBuffer } from \"../Buffers/storageBuffer.js\";\nimport { ComputeShader } from \"../Compute/computeShader.js\";\nimport { UniformBuffer } from \"../Materials/uniformBuffer.js\";\n\nimport { UniformBufferEffectCommonAccessor } from \"../Materials/uniformBufferEffectCommonAccessor.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport \"../ShadersWGSL/gpuUpdateParticles.compute.js\";\n/** @hidden */\nvar ComputeShaderParticleSystem = /** @class */ (function () {\n    function ComputeShaderParticleSystem(parent, engine) {\n        this._bufferComputeShader = [];\n        this._renderVertexBuffers = [];\n        this.alignDataInBuffer = true;\n        this._parent = parent;\n        this._engine = engine;\n    }\n    ComputeShaderParticleSystem.prototype.isUpdateBufferCreated = function () {\n        return !!this._updateComputeShader;\n    };\n    ComputeShaderParticleSystem.prototype.isUpdateBufferReady = function () {\n        var _a, _b;\n        return (_b = (_a = this._updateComputeShader) === null || _a === void 0 ? void 0 : _a.isReady()) !== null && _b !== void 0 ? _b : false;\n    };\n    ComputeShaderParticleSystem.prototype.createUpdateBuffer = function (defines) {\n        var _a;\n        var bindingsMapping = {\n            params: { group: 0, binding: 0 },\n            particlesIn: { group: 0, binding: 1 },\n            particlesOut: { group: 0, binding: 2 },\n            randomTexture: { group: 0, binding: 3 },\n            randomTexture2: { group: 0, binding: 4 },\n        };\n        if (this._parent._sizeGradientsTexture) {\n            bindingsMapping[\"sizeGradientTexture\"] = { group: 1, binding: 1 };\n        }\n        if (this._parent._angularSpeedGradientsTexture) {\n            bindingsMapping[\"angularSpeedGradientTexture\"] = { group: 1, binding: 3 };\n        }\n        if (this._parent._velocityGradientsTexture) {\n            bindingsMapping[\"velocityGradientTexture\"] = { group: 1, binding: 5 };\n        }\n        if (this._parent._limitVelocityGradientsTexture) {\n            bindingsMapping[\"limitVelocityGradientTexture\"] = { group: 1, binding: 7 };\n        }\n        if (this._parent._dragGradientsTexture) {\n            bindingsMapping[\"dragGradientTexture\"] = { group: 1, binding: 9 };\n        }\n        if (this._parent.noiseTexture) {\n            bindingsMapping[\"noiseTexture\"] = { group: 1, binding: 11 };\n        }\n        this._updateComputeShader = new ComputeShader(\"updateParticles\", this._engine, \"gpuUpdateParticles\", { bindingsMapping: bindingsMapping, defines: defines.split(\"\\n\") });\n        (_a = this._simParamsComputeShader) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._simParamsComputeShader = new UniformBuffer(this._engine);\n        this._simParamsComputeShader.addUniform(\"currentCount\", 1);\n        this._simParamsComputeShader.addUniform(\"timeDelta\", 1);\n        this._simParamsComputeShader.addUniform(\"stopFactor\", 1);\n        this._simParamsComputeShader.addUniform(\"randomTextureSize\", 1);\n        this._simParamsComputeShader.addUniform(\"lifeTime\", 2);\n        this._simParamsComputeShader.addUniform(\"emitPower\", 2);\n        if (!this._parent._colorGradientsTexture) {\n            this._simParamsComputeShader.addUniform(\"color1\", 4);\n            this._simParamsComputeShader.addUniform(\"color2\", 4);\n        }\n        this._simParamsComputeShader.addUniform(\"sizeRange\", 2);\n        this._simParamsComputeShader.addUniform(\"scaleRange\", 4);\n        this._simParamsComputeShader.addUniform(\"angleRange\", 4);\n        this._simParamsComputeShader.addUniform(\"gravity\", 3);\n        if (this._parent._limitVelocityGradientsTexture) {\n            this._simParamsComputeShader.addUniform(\"limitVelocityDamping\", 1);\n        }\n        if (this._parent.isAnimationSheetEnabled) {\n            this._simParamsComputeShader.addUniform(\"cellInfos\", 4);\n        }\n        if (this._parent.noiseTexture) {\n            this._simParamsComputeShader.addUniform(\"noiseStrength\", 3);\n        }\n        if (!this._parent.isLocal) {\n            this._simParamsComputeShader.addUniform(\"emitterWM\", 16);\n        }\n        if (this._parent.particleEmitterType) {\n            this._parent.particleEmitterType.buildUniformLayout(this._simParamsComputeShader);\n        }\n        this._updateComputeShader.setUniformBuffer(\"params\", this._simParamsComputeShader);\n        return new UniformBufferEffectCommonAccessor(this._simParamsComputeShader);\n    };\n    ComputeShaderParticleSystem.prototype.createVertexBuffers = function (updateBuffer, renderVertexBuffers) {\n        this._renderVertexBuffers.push(renderVertexBuffers);\n    };\n    ComputeShaderParticleSystem.prototype.createParticleBuffer = function (data) {\n        var buffer = new StorageBuffer(this._engine, data.length * 4, 3 | 8);\n        buffer.update(data);\n        this._bufferComputeShader.push(buffer);\n        return buffer.getBuffer();\n    };\n    ComputeShaderParticleSystem.prototype.bindDrawBuffers = function (index, effect) {\n        this._engine.bindBuffers(this._renderVertexBuffers[index], null, effect);\n    };\n    ComputeShaderParticleSystem.prototype.preUpdateParticleBuffer = function () { };\n    ComputeShaderParticleSystem.prototype.updateParticleBuffer = function (index, targetBuffer, currentActiveCount) {\n        this._simParamsComputeShader.update();\n        this._updateComputeShader.setTexture(\"randomTexture\", this._parent._randomTexture, false);\n        this._updateComputeShader.setTexture(\"randomTexture2\", this._parent._randomTexture2, false);\n        if (this._parent._sizeGradientsTexture) {\n            this._updateComputeShader.setTexture(\"sizeGradientTexture\", this._parent._sizeGradientsTexture);\n        }\n        if (this._parent._angularSpeedGradientsTexture) {\n            this._updateComputeShader.setTexture(\"angularSpeedGradientTexture\", this._parent._angularSpeedGradientsTexture);\n        }\n        if (this._parent._velocityGradientsTexture) {\n            this._updateComputeShader.setTexture(\"velocityGradientTexture\", this._parent._velocityGradientsTexture);\n        }\n        if (this._parent._limitVelocityGradientsTexture) {\n            this._updateComputeShader.setTexture(\"limitVelocityGradientTexture\", this._parent._limitVelocityGradientsTexture);\n        }\n        if (this._parent._dragGradientsTexture) {\n            this._updateComputeShader.setTexture(\"dragGradientTexture\", this._parent._dragGradientsTexture);\n        }\n        if (this._parent.noiseTexture) {\n            this._updateComputeShader.setTexture(\"noiseTexture\", this._parent.noiseTexture);\n        }\n        this._updateComputeShader.setStorageBuffer(\"particlesIn\", this._bufferComputeShader[index]);\n        this._updateComputeShader.setStorageBuffer(\"particlesOut\", this._bufferComputeShader[index ^ 1]);\n        this._updateComputeShader.dispatch(Math.ceil(currentActiveCount / 64));\n    };\n    ComputeShaderParticleSystem.prototype.releaseBuffers = function () {\n        var _a;\n        for (var i = 0; i < this._bufferComputeShader.length; ++i) {\n            this._bufferComputeShader[i].dispose();\n        }\n        this._bufferComputeShader = [];\n        (_a = this._simParamsComputeShader) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._simParamsComputeShader = null;\n        this._updateComputeShader = null;\n    };\n    ComputeShaderParticleSystem.prototype.releaseVertexBuffers = function () {\n        this._renderVertexBuffers = [];\n    };\n    return ComputeShaderParticleSystem;\n}());\nexport { ComputeShaderParticleSystem };\nRegisterClass(\"BABYLON.ComputeShaderParticleSystem\", ComputeShaderParticleSystem);\n//# sourceMappingURL=computeShaderParticleSystem.js.map","import { __assign, __extends } from \"tslib\";\nimport { FactorGradient, ColorGradient, GradientHelper } from \"../Misc/gradients.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Matrix, TmpVectors } from \"../Maths/math.vector.js\";\nimport { Color4, TmpColors } from \"../Maths/math.color.js\";\nimport { Scalar } from \"../Maths/math.scalar.js\";\nimport { VertexBuffer, Buffer } from \"../Buffers/buffer.js\";\nimport { BaseParticleSystem } from \"./baseParticleSystem.js\";\nimport { ParticleSystem } from \"./particleSystem.js\";\nimport { BoxParticleEmitter } from \"../Particles/EmitterTypes/boxParticleEmitter.js\";\nimport { MaterialHelper } from \"../Materials/materialHelper.js\";\nimport { ImageProcessingConfiguration } from \"../Materials/imageProcessingConfiguration.js\";\nimport { RawTexture } from \"../Materials/Textures/rawTexture.js\";\n\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { CustomParticleEmitter } from \"./EmitterTypes/customParticleEmitter.js\";\nimport { ThinEngine } from \"../Engines/thinEngine.js\";\nimport { DrawWrapper } from \"../Materials/drawWrapper.js\";\nimport \"../Shaders/gpuRenderParticles.fragment.js\";\nimport \"../Shaders/gpuRenderParticles.vertex.js\";\nimport { GetClass } from \"../Misc/typeStore.js\";\n/**\n * This represents a GPU particle system in Babylon\n * This is the fastest particle system in Babylon as it uses the GPU to update the individual particle data\n * @see https://www.babylonjs-playground.com/#PU4WYI#4\n */\nvar GPUParticleSystem = /** @class */ (function (_super) {\n    __extends(GPUParticleSystem, _super);\n    /**\n     * Instantiates a GPU particle system.\n     * Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.\n     * @param name The name of the particle system\n     * @param options The options used to create the system\n     * @param sceneOrEngine The scene the particle system belongs to or the engine to use if no scene\n     * @param customEffect a custom effect used to change the way particles are rendered by default\n     * @param isAnimationSheetEnabled Must be true if using a spritesheet to animate the particles texture\n     */\n    function GPUParticleSystem(name, options, sceneOrEngine, customEffect, isAnimationSheetEnabled) {\n        if (customEffect === void 0) { customEffect = null; }\n        if (isAnimationSheetEnabled === void 0) { isAnimationSheetEnabled = false; }\n        var _this = _super.call(this, name) || this;\n        /**\n         * The layer mask we are rendering the particles through.\n         */\n        _this.layerMask = 0x0fffffff;\n        _this._accumulatedCount = 0;\n        _this._targetIndex = 0;\n        _this._currentRenderId = -1;\n        _this._currentRenderingCameraUniqueId = -1;\n        _this._started = false;\n        _this._stopped = false;\n        _this._timeDelta = 0;\n        _this._actualFrame = 0;\n        _this._rawTextureWidth = 256;\n        /**\n         * An event triggered when the system is disposed.\n         */\n        _this.onDisposeObservable = new Observable();\n        /**\n         * An event triggered when the system is stopped\n         */\n        _this.onStoppedObservable = new Observable();\n        /**\n         * Forces the particle to write their depth information to the depth buffer. This can help preventing other draw calls\n         * to override the particles.\n         */\n        _this.forceDepthWrite = false;\n        _this._preWarmDone = false;\n        /**\n         * Specifies if the particles are updated in emitter local space or world space.\n         */\n        _this.isLocal = false;\n        /** @hidden */\n        _this._onBeforeDrawParticlesObservable = null;\n        if (!sceneOrEngine || sceneOrEngine.getClassName() === \"Scene\") {\n            _this._scene = sceneOrEngine || EngineStore.LastCreatedScene;\n            _this._engine = _this._scene.getEngine();\n            _this.uniqueId = _this._scene.getUniqueId();\n            _this._scene.particleSystems.push(_this);\n        }\n        else {\n            _this._engine = sceneOrEngine;\n            _this.defaultProjectionMatrix = Matrix.PerspectiveFovLH(0.8, 1, 0.1, 100, _this._engine.isNDCHalfZRange);\n        }\n        if (_this._engine.getCaps().supportComputeShaders) {\n            if (!GetClass(\"BABYLON.ComputeShaderParticleSystem\")) {\n                throw new Error(\"The ComputeShaderParticleSystem class is not available! Make sure you have imported it.\");\n            }\n            _this._platform = new (GetClass(\"BABYLON.ComputeShaderParticleSystem\"))(_this, _this._engine);\n        }\n        else {\n            if (!GetClass(\"BABYLON.WebGL2ParticleSystem\")) {\n                throw new Error(\"The WebGL2ParticleSystem class is not available! Make sure you have imported it.\");\n            }\n            _this._platform = new (GetClass(\"BABYLON.WebGL2ParticleSystem\"))(_this, _this._engine);\n        }\n        _this._customWrappers = { 0: new DrawWrapper(_this._engine) };\n        _this._customWrappers[0].effect = customEffect;\n        _this._drawWrappers = { 0: new DrawWrapper(_this._engine) };\n        if (_this._drawWrappers[0].drawContext) {\n            _this._drawWrappers[0].drawContext.useInstancing = true;\n        }\n        // Setup the default processing configuration to the scene.\n        _this._attachImageProcessingConfiguration(null);\n        options = options !== null && options !== void 0 ? options : {};\n        if (!options.randomTextureSize) {\n            delete options.randomTextureSize;\n        }\n        var fullOptions = __assign({ capacity: 50000, randomTextureSize: _this._engine.getCaps().maxTextureSize }, options);\n        var optionsAsNumber = options;\n        if (isFinite(optionsAsNumber)) {\n            fullOptions.capacity = optionsAsNumber;\n        }\n        _this._capacity = fullOptions.capacity;\n        _this._activeCount = fullOptions.capacity;\n        _this._currentActiveCount = 0;\n        _this._isAnimationSheetEnabled = isAnimationSheetEnabled;\n        _this.particleEmitterType = new BoxParticleEmitter();\n        // Random data\n        var maxTextureSize = Math.min(_this._engine.getCaps().maxTextureSize, fullOptions.randomTextureSize);\n        var d = [];\n        for (var i = 0; i < maxTextureSize; ++i) {\n            d.push(Math.random());\n            d.push(Math.random());\n            d.push(Math.random());\n            d.push(Math.random());\n        }\n        _this._randomTexture = new RawTexture(new Float32Array(d), maxTextureSize, 1, 5, sceneOrEngine, false, false, 1, 1);\n        _this._randomTexture.name = \"GPUParticleSystem_random1\";\n        _this._randomTexture.wrapU = 1;\n        _this._randomTexture.wrapV = 1;\n        d = [];\n        for (var i = 0; i < maxTextureSize; ++i) {\n            d.push(Math.random());\n            d.push(Math.random());\n            d.push(Math.random());\n            d.push(Math.random());\n        }\n        _this._randomTexture2 = new RawTexture(new Float32Array(d), maxTextureSize, 1, 5, sceneOrEngine, false, false, 1, 1);\n        _this._randomTexture2.name = \"GPUParticleSystem_random2\";\n        _this._randomTexture2.wrapU = 1;\n        _this._randomTexture2.wrapV = 1;\n        _this._randomTextureSize = maxTextureSize;\n        return _this;\n    }\n    Object.defineProperty(GPUParticleSystem, \"IsSupported\", {\n        /**\n         * Gets a boolean indicating if the GPU particles can be rendered on current browser\n         */\n        get: function () {\n            if (!EngineStore.LastCreatedEngine) {\n                return false;\n            }\n            var caps = EngineStore.LastCreatedEngine.getCaps();\n            return caps.supportTransformFeedbacks || caps.supportComputeShaders;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the maximum number of particles active at the same time.\n     * @returns The max number of active particles.\n     */\n    GPUParticleSystem.prototype.getCapacity = function () {\n        return this._capacity;\n    };\n    Object.defineProperty(GPUParticleSystem.prototype, \"activeParticleCount\", {\n        /**\n         * Gets or set the number of active particles\n         */\n        get: function () {\n            return this._activeCount;\n        },\n        set: function (value) {\n            this._activeCount = Math.min(value, this._capacity);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Is this system ready to be used/rendered\n     * @return true if the system is ready\n     */\n    GPUParticleSystem.prototype.isReady = function () {\n        if (!this.emitter || (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.isReady()) || !this.particleTexture || !this.particleTexture.isReady()) {\n            return false;\n        }\n        if (this.blendMode !== ParticleSystem.BLENDMODE_MULTIPLYADD) {\n            if (!this._getWrapper(this.blendMode).effect.isReady()) {\n                return false;\n            }\n        }\n        else {\n            if (!this._getWrapper(ParticleSystem.BLENDMODE_MULTIPLY).effect.isReady()) {\n                return false;\n            }\n            if (!this._getWrapper(ParticleSystem.BLENDMODE_ADD).effect.isReady()) {\n                return false;\n            }\n        }\n        if (!this._platform.isUpdateBufferCreated()) {\n            this._recreateUpdateEffect();\n            return false;\n        }\n        return this._platform.isUpdateBufferReady();\n    };\n    /**\n     * Gets if the system has been started. (Note: this will still be true after stop is called)\n     * @returns True if it has been started, otherwise false.\n     */\n    GPUParticleSystem.prototype.isStarted = function () {\n        return this._started;\n    };\n    /**\n     * Gets if the system has been stopped. (Note: rendering is still happening but the system is frozen)\n     * @returns True if it has been stopped, otherwise false.\n     */\n    GPUParticleSystem.prototype.isStopped = function () {\n        return this._stopped;\n    };\n    /**\n     * Gets a boolean indicating that the system is stopping\n     * @returns true if the system is currently stopping\n     */\n    GPUParticleSystem.prototype.isStopping = function () {\n        return false; // Stop is immediate on GPU\n    };\n    /**\n     * Gets the number of particles active at the same time.\n     * @returns The number of active particles.\n     */\n    GPUParticleSystem.prototype.getActiveCount = function () {\n        return this._currentActiveCount;\n    };\n    /**\n     * Starts the particle system and begins to emit\n     * @param delay defines the delay in milliseconds before starting the system (this.startDelay by default)\n     */\n    GPUParticleSystem.prototype.start = function (delay) {\n        var _this = this;\n        if (delay === void 0) { delay = this.startDelay; }\n        if (!this.targetStopDuration && this._hasTargetStopDurationDependantGradient()) {\n            throw \"Particle system started with a targetStopDuration dependant gradient (eg. startSizeGradients) but no targetStopDuration set\";\n        }\n        if (delay) {\n            setTimeout(function () {\n                _this.start(0);\n            }, delay);\n            return;\n        }\n        this._started = true;\n        this._stopped = false;\n        this._preWarmDone = false;\n        // Animations\n        if (this.beginAnimationOnStart && this.animations && this.animations.length > 0 && this._scene) {\n            this._scene.beginAnimation(this, this.beginAnimationFrom, this.beginAnimationTo, this.beginAnimationLoop);\n        }\n    };\n    /**\n     * Stops the particle system.\n     */\n    GPUParticleSystem.prototype.stop = function () {\n        if (this._stopped) {\n            return;\n        }\n        this._stopped = true;\n    };\n    /**\n     * Remove all active particles\n     */\n    GPUParticleSystem.prototype.reset = function () {\n        this._releaseBuffers();\n        this._platform.releaseVertexBuffers();\n        this._currentActiveCount = 0;\n        this._targetIndex = 0;\n    };\n    /**\n     * Returns the string \"GPUParticleSystem\"\n     * @returns a string containing the class name\n     */\n    GPUParticleSystem.prototype.getClassName = function () {\n        return \"GPUParticleSystem\";\n    };\n    /**\n     * Gets the custom effect used to render the particles\n     * @param blendMode Blend mode for which the effect should be retrieved\n     * @returns The effect\n     */\n    GPUParticleSystem.prototype.getCustomEffect = function (blendMode) {\n        var _a, _b;\n        if (blendMode === void 0) { blendMode = 0; }\n        return (_b = (_a = this._customWrappers[blendMode]) === null || _a === void 0 ? void 0 : _a.effect) !== null && _b !== void 0 ? _b : this._customWrappers[0].effect;\n    };\n    GPUParticleSystem.prototype._getCustomDrawWrapper = function (blendMode) {\n        var _a;\n        if (blendMode === void 0) { blendMode = 0; }\n        return (_a = this._customWrappers[blendMode]) !== null && _a !== void 0 ? _a : this._customWrappers[0];\n    };\n    /**\n     * Sets the custom effect used to render the particles\n     * @param effect The effect to set\n     * @param blendMode Blend mode for which the effect should be set\n     */\n    GPUParticleSystem.prototype.setCustomEffect = function (effect, blendMode) {\n        if (blendMode === void 0) { blendMode = 0; }\n        this._customWrappers[blendMode] = new DrawWrapper(this._engine);\n        this._customWrappers[blendMode].effect = effect;\n    };\n    Object.defineProperty(GPUParticleSystem.prototype, \"onBeforeDrawParticlesObservable\", {\n        /**\n         * Observable that will be called just before the particles are drawn\n         */\n        get: function () {\n            if (!this._onBeforeDrawParticlesObservable) {\n                this._onBeforeDrawParticlesObservable = new Observable();\n            }\n            return this._onBeforeDrawParticlesObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GPUParticleSystem.prototype, \"vertexShaderName\", {\n        /**\n         * Gets the name of the particle vertex shader\n         */\n        get: function () {\n            return \"gpuRenderParticles\";\n        },\n        enumerable: false,\n        configurable: true\n    });\n    GPUParticleSystem.prototype._removeGradientAndTexture = function (gradient, gradients, texture) {\n        _super.prototype._removeGradientAndTexture.call(this, gradient, gradients, texture);\n        this._releaseBuffers();\n        return this;\n    };\n    /**\n     * Adds a new color gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param color1 defines the color to affect to the specified gradient\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.addColorGradient = function (gradient, color1) {\n        if (!this._colorGradients) {\n            this._colorGradients = [];\n        }\n        var colorGradient = new ColorGradient(gradient, color1);\n        this._colorGradients.push(colorGradient);\n        this._refreshColorGradient(true);\n        this._releaseBuffers();\n        return this;\n    };\n    GPUParticleSystem.prototype._refreshColorGradient = function (reorder) {\n        if (reorder === void 0) { reorder = false; }\n        if (this._colorGradients) {\n            if (reorder) {\n                this._colorGradients.sort(function (a, b) {\n                    if (a.gradient < b.gradient) {\n                        return -1;\n                    }\n                    else if (a.gradient > b.gradient) {\n                        return 1;\n                    }\n                    return 0;\n                });\n            }\n            if (this._colorGradientsTexture) {\n                this._colorGradientsTexture.dispose();\n                this._colorGradientsTexture = null;\n            }\n        }\n    };\n    /** Force the system to rebuild all gradients that need to be resync */\n    GPUParticleSystem.prototype.forceRefreshGradients = function () {\n        this._refreshColorGradient();\n        this._refreshFactorGradient(this._sizeGradients, \"_sizeGradientsTexture\");\n        this._refreshFactorGradient(this._angularSpeedGradients, \"_angularSpeedGradientsTexture\");\n        this._refreshFactorGradient(this._velocityGradients, \"_velocityGradientsTexture\");\n        this._refreshFactorGradient(this._limitVelocityGradients, \"_limitVelocityGradientsTexture\");\n        this._refreshFactorGradient(this._dragGradients, \"_dragGradientsTexture\");\n        this.reset();\n    };\n    /**\n     * Remove a specific color gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.removeColorGradient = function (gradient) {\n        this._removeGradientAndTexture(gradient, this._colorGradients, this._colorGradientsTexture);\n        this._colorGradientsTexture = null;\n        return this;\n    };\n    /**\n     * Resets the draw wrappers cache\n     */\n    GPUParticleSystem.prototype.resetDrawCache = function () {\n        var _a;\n        for (var blendMode in this._drawWrappers) {\n            var drawWrapper = this._drawWrappers[blendMode];\n            (_a = drawWrapper.drawContext) === null || _a === void 0 ? void 0 : _a.reset();\n        }\n    };\n    GPUParticleSystem.prototype._addFactorGradient = function (factorGradients, gradient, factor) {\n        var valueGradient = new FactorGradient(gradient, factor);\n        factorGradients.push(valueGradient);\n        this._releaseBuffers();\n    };\n    /**\n     * Adds a new size gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the size factor to affect to the specified gradient\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.addSizeGradient = function (gradient, factor) {\n        if (!this._sizeGradients) {\n            this._sizeGradients = [];\n        }\n        this._addFactorGradient(this._sizeGradients, gradient, factor);\n        this._refreshFactorGradient(this._sizeGradients, \"_sizeGradientsTexture\", true);\n        this._releaseBuffers();\n        return this;\n    };\n    /**\n     * Remove a specific size gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.removeSizeGradient = function (gradient) {\n        this._removeGradientAndTexture(gradient, this._sizeGradients, this._sizeGradientsTexture);\n        this._sizeGradientsTexture = null;\n        return this;\n    };\n    GPUParticleSystem.prototype._refreshFactorGradient = function (factorGradients, textureName, reorder) {\n        if (reorder === void 0) { reorder = false; }\n        if (!factorGradients) {\n            return;\n        }\n        if (reorder) {\n            factorGradients.sort(function (a, b) {\n                if (a.gradient < b.gradient) {\n                    return -1;\n                }\n                else if (a.gradient > b.gradient) {\n                    return 1;\n                }\n                return 0;\n            });\n        }\n        var that = this;\n        if (that[textureName]) {\n            that[textureName].dispose();\n            that[textureName] = null;\n        }\n    };\n    /**\n     * Adds a new angular speed gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the angular speed to affect to the specified gradient\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.addAngularSpeedGradient = function (gradient, factor) {\n        if (!this._angularSpeedGradients) {\n            this._angularSpeedGradients = [];\n        }\n        this._addFactorGradient(this._angularSpeedGradients, gradient, factor);\n        this._refreshFactorGradient(this._angularSpeedGradients, \"_angularSpeedGradientsTexture\", true);\n        this._releaseBuffers();\n        return this;\n    };\n    /**\n     * Remove a specific angular speed gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.removeAngularSpeedGradient = function (gradient) {\n        this._removeGradientAndTexture(gradient, this._angularSpeedGradients, this._angularSpeedGradientsTexture);\n        this._angularSpeedGradientsTexture = null;\n        return this;\n    };\n    /**\n     * Adds a new velocity gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the velocity to affect to the specified gradient\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.addVelocityGradient = function (gradient, factor) {\n        if (!this._velocityGradients) {\n            this._velocityGradients = [];\n        }\n        this._addFactorGradient(this._velocityGradients, gradient, factor);\n        this._refreshFactorGradient(this._velocityGradients, \"_velocityGradientsTexture\", true);\n        this._releaseBuffers();\n        return this;\n    };\n    /**\n     * Remove a specific velocity gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.removeVelocityGradient = function (gradient) {\n        this._removeGradientAndTexture(gradient, this._velocityGradients, this._velocityGradientsTexture);\n        this._velocityGradientsTexture = null;\n        return this;\n    };\n    /**\n     * Adds a new limit velocity gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the limit velocity value to affect to the specified gradient\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.addLimitVelocityGradient = function (gradient, factor) {\n        if (!this._limitVelocityGradients) {\n            this._limitVelocityGradients = [];\n        }\n        this._addFactorGradient(this._limitVelocityGradients, gradient, factor);\n        this._refreshFactorGradient(this._limitVelocityGradients, \"_limitVelocityGradientsTexture\", true);\n        this._releaseBuffers();\n        return this;\n    };\n    /**\n     * Remove a specific limit velocity gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.removeLimitVelocityGradient = function (gradient) {\n        this._removeGradientAndTexture(gradient, this._limitVelocityGradients, this._limitVelocityGradientsTexture);\n        this._limitVelocityGradientsTexture = null;\n        return this;\n    };\n    /**\n     * Adds a new drag gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the drag value to affect to the specified gradient\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.addDragGradient = function (gradient, factor) {\n        if (!this._dragGradients) {\n            this._dragGradients = [];\n        }\n        this._addFactorGradient(this._dragGradients, gradient, factor);\n        this._refreshFactorGradient(this._dragGradients, \"_dragGradientsTexture\", true);\n        this._releaseBuffers();\n        return this;\n    };\n    /**\n     * Remove a specific drag gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.removeDragGradient = function (gradient) {\n        this._removeGradientAndTexture(gradient, this._dragGradients, this._dragGradientsTexture);\n        this._dragGradientsTexture = null;\n        return this;\n    };\n    /**\n     * Not supported by GPUParticleSystem\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.addEmitRateGradient = function () {\n        // Do nothing as emit rate is not supported by GPUParticleSystem\n        return this;\n    };\n    /**\n     * Not supported by GPUParticleSystem\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.removeEmitRateGradient = function () {\n        // Do nothing as emit rate is not supported by GPUParticleSystem\n        return this;\n    };\n    /**\n     * Not supported by GPUParticleSystem\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.addStartSizeGradient = function () {\n        // Do nothing as start size is not supported by GPUParticleSystem\n        return this;\n    };\n    /**\n     * Not supported by GPUParticleSystem\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.removeStartSizeGradient = function () {\n        // Do nothing as start size is not supported by GPUParticleSystem\n        return this;\n    };\n    /**\n     * Not supported by GPUParticleSystem\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.addColorRemapGradient = function () {\n        // Do nothing as start size is not supported by GPUParticleSystem\n        return this;\n    };\n    /**\n     * Not supported by GPUParticleSystem\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.removeColorRemapGradient = function () {\n        // Do nothing as start size is not supported by GPUParticleSystem\n        return this;\n    };\n    /**\n     * Not supported by GPUParticleSystem\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.addAlphaRemapGradient = function () {\n        // Do nothing as start size is not supported by GPUParticleSystem\n        return this;\n    };\n    /**\n     * Not supported by GPUParticleSystem\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.removeAlphaRemapGradient = function () {\n        // Do nothing as start size is not supported by GPUParticleSystem\n        return this;\n    };\n    /**\n     * Not supported by GPUParticleSystem\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.addRampGradient = function () {\n        //Not supported by GPUParticleSystem\n        return this;\n    };\n    /**\n     * Not supported by GPUParticleSystem\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.removeRampGradient = function () {\n        //Not supported by GPUParticleSystem\n        return this;\n    };\n    /**\n     * Not supported by GPUParticleSystem\n     * @returns the list of ramp gradients\n     */\n    GPUParticleSystem.prototype.getRampGradients = function () {\n        return null;\n    };\n    Object.defineProperty(GPUParticleSystem.prototype, \"useRampGradients\", {\n        /**\n         * Not supported by GPUParticleSystem\n         * Gets or sets a boolean indicating that ramp gradients must be used\n         * @see https://doc.babylonjs.com/babylon101/particles#ramp-gradients\n         */\n        get: function () {\n            //Not supported by GPUParticleSystem\n            return false;\n        },\n        set: function (value) {\n            //Not supported by GPUParticleSystem\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Not supported by GPUParticleSystem\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.addLifeTimeGradient = function () {\n        //Not supported by GPUParticleSystem\n        return this;\n    };\n    /**\n     * Not supported by GPUParticleSystem\n     * @returns the current particle system\n     */\n    GPUParticleSystem.prototype.removeLifeTimeGradient = function () {\n        //Not supported by GPUParticleSystem\n        return this;\n    };\n    GPUParticleSystem.prototype._reset = function () {\n        this._releaseBuffers();\n    };\n    GPUParticleSystem.prototype._createVertexBuffers = function (updateBuffer, renderBuffer, spriteSource) {\n        var renderVertexBuffers = {};\n        renderVertexBuffers[\"position\"] = renderBuffer.createVertexBuffer(\"position\", 0, 3, this._attributesStrideSize, true);\n        var offset = 3;\n        renderVertexBuffers[\"age\"] = renderBuffer.createVertexBuffer(\"age\", offset, 1, this._attributesStrideSize, true);\n        offset += 1;\n        renderVertexBuffers[\"size\"] = renderBuffer.createVertexBuffer(\"size\", offset, 3, this._attributesStrideSize, true);\n        offset += 3;\n        renderVertexBuffers[\"life\"] = renderBuffer.createVertexBuffer(\"life\", offset, 1, this._attributesStrideSize, true);\n        offset += 1;\n        offset += 4; // seed\n        if (this.billboardMode === ParticleSystem.BILLBOARDMODE_STRETCHED) {\n            renderVertexBuffers[\"direction\"] = renderBuffer.createVertexBuffer(\"direction\", offset, 3, this._attributesStrideSize, true);\n        }\n        offset += 3; // direction\n        if (this._platform.alignDataInBuffer) {\n            offset += 1;\n        }\n        if (this.particleEmitterType instanceof CustomParticleEmitter) {\n            offset += 3;\n            if (this._platform.alignDataInBuffer) {\n                offset += 1;\n            }\n        }\n        if (!this._colorGradientsTexture) {\n            renderVertexBuffers[\"color\"] = renderBuffer.createVertexBuffer(\"color\", offset, 4, this._attributesStrideSize, true);\n            offset += 4;\n        }\n        if (!this._isBillboardBased) {\n            renderVertexBuffers[\"initialDirection\"] = renderBuffer.createVertexBuffer(\"initialDirection\", offset, 3, this._attributesStrideSize, true);\n            offset += 3;\n            if (this._platform.alignDataInBuffer) {\n                offset += 1;\n            }\n        }\n        if (this.noiseTexture) {\n            renderVertexBuffers[\"noiseCoordinates1\"] = renderBuffer.createVertexBuffer(\"noiseCoordinates1\", offset, 3, this._attributesStrideSize, true);\n            offset += 3;\n            if (this._platform.alignDataInBuffer) {\n                offset += 1;\n            }\n            renderVertexBuffers[\"noiseCoordinates2\"] = renderBuffer.createVertexBuffer(\"noiseCoordinates2\", offset, 3, this._attributesStrideSize, true);\n            offset += 3;\n            if (this._platform.alignDataInBuffer) {\n                offset += 1;\n            }\n        }\n        renderVertexBuffers[\"angle\"] = renderBuffer.createVertexBuffer(\"angle\", offset, 1, this._attributesStrideSize, true);\n        if (this._angularSpeedGradientsTexture) {\n            offset++;\n        }\n        else {\n            offset += 2;\n        }\n        if (this._isAnimationSheetEnabled) {\n            renderVertexBuffers[\"cellIndex\"] = renderBuffer.createVertexBuffer(\"cellIndex\", offset, 1, this._attributesStrideSize, true);\n            offset += 1;\n            if (this.spriteRandomStartCell) {\n                renderVertexBuffers[\"cellStartOffset\"] = renderBuffer.createVertexBuffer(\"cellStartOffset\", offset, 1, this._attributesStrideSize, true);\n                offset += 1;\n            }\n        }\n        renderVertexBuffers[\"offset\"] = spriteSource.createVertexBuffer(\"offset\", 0, 2);\n        renderVertexBuffers[\"uv\"] = spriteSource.createVertexBuffer(\"uv\", 2, 2);\n        this._platform.createVertexBuffers(updateBuffer, renderVertexBuffers);\n        this.resetDrawCache();\n    };\n    GPUParticleSystem.prototype._initialize = function (force) {\n        if (force === void 0) { force = false; }\n        if (this._buffer0 && !force) {\n            return;\n        }\n        var engine = this._engine;\n        var data = new Array();\n        this._attributesStrideSize = 21;\n        this._targetIndex = 0;\n        if (this._platform.alignDataInBuffer) {\n            this._attributesStrideSize += 1;\n        }\n        if (this.particleEmitterType instanceof CustomParticleEmitter) {\n            this._attributesStrideSize += 3;\n            if (this._platform.alignDataInBuffer) {\n                this._attributesStrideSize += 1;\n            }\n        }\n        if (!this.isBillboardBased) {\n            this._attributesStrideSize += 3;\n            if (this._platform.alignDataInBuffer) {\n                this._attributesStrideSize += 1;\n            }\n        }\n        if (this._colorGradientsTexture) {\n            this._attributesStrideSize -= 4;\n        }\n        if (this._angularSpeedGradientsTexture) {\n            this._attributesStrideSize -= 1;\n        }\n        if (this._isAnimationSheetEnabled) {\n            this._attributesStrideSize += 1;\n            if (this.spriteRandomStartCell) {\n                this._attributesStrideSize += 1;\n            }\n        }\n        if (this.noiseTexture) {\n            this._attributesStrideSize += 6;\n            if (this._platform.alignDataInBuffer) {\n                this._attributesStrideSize += 2;\n            }\n        }\n        if (this._platform.alignDataInBuffer) {\n            this._attributesStrideSize += 3 - ((this._attributesStrideSize + 3) & 3); // round to multiple of 4\n        }\n        var usingCustomEmitter = this.particleEmitterType instanceof CustomParticleEmitter;\n        var tmpVector = TmpVectors.Vector3[0];\n        var offset = 0;\n        for (var particleIndex = 0; particleIndex < this._capacity; particleIndex++) {\n            // position\n            data.push(0.0);\n            data.push(0.0);\n            data.push(0.0);\n            // Age\n            data.push(0.0); // create the particle as a dead one to create a new one at start\n            // Size\n            data.push(0.0);\n            data.push(0.0);\n            data.push(0.0);\n            // life\n            data.push(0.0);\n            // Seed\n            data.push(Math.random());\n            data.push(Math.random());\n            data.push(Math.random());\n            data.push(Math.random());\n            // direction\n            if (usingCustomEmitter) {\n                this.particleEmitterType.particleDestinationGenerator(particleIndex, null, tmpVector);\n                data.push(tmpVector.x);\n                data.push(tmpVector.y);\n                data.push(tmpVector.z);\n            }\n            else {\n                data.push(0.0);\n                data.push(0.0);\n                data.push(0.0);\n            }\n            if (this._platform.alignDataInBuffer) {\n                data.push(0.0); // dummy0\n            }\n            offset += 16; // position, age, size, life, seed, direction, dummy0\n            if (usingCustomEmitter) {\n                this.particleEmitterType.particlePositionGenerator(particleIndex, null, tmpVector);\n                data.push(tmpVector.x);\n                data.push(tmpVector.y);\n                data.push(tmpVector.z);\n                if (this._platform.alignDataInBuffer) {\n                    data.push(0.0); // dummy1\n                }\n                offset += 4;\n            }\n            if (!this._colorGradientsTexture) {\n                // color\n                data.push(0.0);\n                data.push(0.0);\n                data.push(0.0);\n                data.push(0.0);\n                offset += 4;\n            }\n            if (!this.isBillboardBased) {\n                // initialDirection\n                data.push(0.0);\n                data.push(0.0);\n                data.push(0.0);\n                if (this._platform.alignDataInBuffer) {\n                    data.push(0.0); // dummy2\n                }\n                offset += 4;\n            }\n            if (this.noiseTexture) {\n                // Random coordinates for reading into noise texture\n                data.push(Math.random());\n                data.push(Math.random());\n                data.push(Math.random());\n                if (this._platform.alignDataInBuffer) {\n                    data.push(0.0); // dummy3\n                }\n                data.push(Math.random());\n                data.push(Math.random());\n                data.push(Math.random());\n                if (this._platform.alignDataInBuffer) {\n                    data.push(0.0); // dummy4\n                }\n                offset += 8;\n            }\n            // angle\n            data.push(0.0);\n            offset += 1;\n            if (!this._angularSpeedGradientsTexture) {\n                data.push(0.0);\n                offset += 1;\n            }\n            if (this._isAnimationSheetEnabled) {\n                data.push(0.0);\n                offset += 1;\n                if (this.spriteRandomStartCell) {\n                    data.push(0.0);\n                    offset += 1;\n                }\n            }\n            if (this._platform.alignDataInBuffer) {\n                var numDummies = 3 - ((offset + 3) & 3);\n                offset += numDummies;\n                while (numDummies-- > 0) {\n                    data.push(0.0);\n                }\n            }\n        }\n        // Sprite data\n        var spriteData = new Float32Array([0.5, 0.5, 1, 1, -0.5, 0.5, 0, 1, 0.5, -0.5, 1, 0, -0.5, -0.5, 0, 0]);\n        var bufferData1 = this._platform.createParticleBuffer(data);\n        var bufferData2 = this._platform.createParticleBuffer(data);\n        // Buffers\n        this._buffer0 = new Buffer(engine, bufferData1, false, this._attributesStrideSize);\n        this._buffer1 = new Buffer(engine, bufferData2, false, this._attributesStrideSize);\n        this._spriteBuffer = new Buffer(engine, spriteData, false, 4);\n        // Update & Render vertex buffers\n        this._createVertexBuffers(this._buffer0, this._buffer1, this._spriteBuffer);\n        this._createVertexBuffers(this._buffer1, this._buffer0, this._spriteBuffer);\n        // Links\n        this._sourceBuffer = this._buffer0;\n        this._targetBuffer = this._buffer1;\n    };\n    /** @hidden */\n    GPUParticleSystem.prototype._recreateUpdateEffect = function () {\n        var defines = this.particleEmitterType ? this.particleEmitterType.getEffectDefines() : \"\";\n        if (this._isBillboardBased) {\n            defines += \"\\n#define BILLBOARD\";\n        }\n        if (this._colorGradientsTexture) {\n            defines += \"\\n#define COLORGRADIENTS\";\n        }\n        if (this._sizeGradientsTexture) {\n            defines += \"\\n#define SIZEGRADIENTS\";\n        }\n        if (this._angularSpeedGradientsTexture) {\n            defines += \"\\n#define ANGULARSPEEDGRADIENTS\";\n        }\n        if (this._velocityGradientsTexture) {\n            defines += \"\\n#define VELOCITYGRADIENTS\";\n        }\n        if (this._limitVelocityGradientsTexture) {\n            defines += \"\\n#define LIMITVELOCITYGRADIENTS\";\n        }\n        if (this._dragGradientsTexture) {\n            defines += \"\\n#define DRAGGRADIENTS\";\n        }\n        if (this.isAnimationSheetEnabled) {\n            defines += \"\\n#define ANIMATESHEET\";\n            if (this.spriteRandomStartCell) {\n                defines += \"\\n#define ANIMATESHEETRANDOMSTART\";\n            }\n        }\n        if (this.noiseTexture) {\n            defines += \"\\n#define NOISE\";\n        }\n        if (this.isLocal) {\n            defines += \"\\n#define LOCAL\";\n        }\n        if (this._platform.isUpdateBufferCreated() && this._cachedUpdateDefines === defines) {\n            return;\n        }\n        this._cachedUpdateDefines = defines;\n        this._updateBuffer = this._platform.createUpdateBuffer(defines);\n    };\n    /**\n     * @param blendMode\n     * @hidden\n     */\n    GPUParticleSystem.prototype._getWrapper = function (blendMode) {\n        var customWrapper = this._getCustomDrawWrapper(blendMode);\n        if (customWrapper === null || customWrapper === void 0 ? void 0 : customWrapper.effect) {\n            return customWrapper;\n        }\n        var defines = [];\n        this.fillDefines(defines, blendMode);\n        // Effect\n        var drawWrapper = this._drawWrappers[blendMode];\n        if (!drawWrapper) {\n            drawWrapper = new DrawWrapper(this._engine);\n            if (drawWrapper.drawContext) {\n                drawWrapper.drawContext.useInstancing = true;\n            }\n            this._drawWrappers[blendMode] = drawWrapper;\n        }\n        var join = defines.join(\"\\n\");\n        if (drawWrapper.defines !== join) {\n            var attributes = [];\n            var uniforms = [];\n            var samplers = [];\n            this.fillUniformsAttributesAndSamplerNames(uniforms, attributes, samplers);\n            drawWrapper.setEffect(this._engine.createEffect(\"gpuRenderParticles\", attributes, uniforms, samplers, join), join);\n        }\n        return drawWrapper;\n    };\n    /**\n     * @param hasColorGradients\n     * @param isAnimationSheetEnabled\n     * @param isBillboardBased\n     * @param isBillboardStretched\n     * @hidden\n     */\n    GPUParticleSystem._GetAttributeNamesOrOptions = function (hasColorGradients, isAnimationSheetEnabled, isBillboardBased, isBillboardStretched) {\n        if (hasColorGradients === void 0) { hasColorGradients = false; }\n        if (isAnimationSheetEnabled === void 0) { isAnimationSheetEnabled = false; }\n        if (isBillboardBased === void 0) { isBillboardBased = false; }\n        if (isBillboardStretched === void 0) { isBillboardStretched = false; }\n        var attributeNamesOrOptions = [VertexBuffer.PositionKind, \"age\", \"life\", \"size\", \"angle\"];\n        if (!hasColorGradients) {\n            attributeNamesOrOptions.push(VertexBuffer.ColorKind);\n        }\n        if (isAnimationSheetEnabled) {\n            attributeNamesOrOptions.push(\"cellIndex\");\n        }\n        if (!isBillboardBased) {\n            attributeNamesOrOptions.push(\"initialDirection\");\n        }\n        if (!isBillboardStretched) {\n            attributeNamesOrOptions.push(\"direction\");\n        }\n        attributeNamesOrOptions.push(\"offset\", VertexBuffer.UVKind);\n        return attributeNamesOrOptions;\n    };\n    /**\n     * @param isAnimationSheetEnabled\n     * @hidden\n     */\n    GPUParticleSystem._GetEffectCreationOptions = function (isAnimationSheetEnabled) {\n        if (isAnimationSheetEnabled === void 0) { isAnimationSheetEnabled = false; }\n        var effectCreationOption = [\n            \"emitterWM\",\n            \"worldOffset\",\n            \"view\",\n            \"projection\",\n            \"colorDead\",\n            \"invView\",\n            \"vClipPlane\",\n            \"vClipPlane2\",\n            \"vClipPlane3\",\n            \"vClipPlane4\",\n            \"vClipPlane5\",\n            \"vClipPlane6\",\n            \"translationPivot\",\n            \"eyePosition\",\n        ];\n        if (isAnimationSheetEnabled) {\n            effectCreationOption.push(\"sheetInfos\");\n        }\n        return effectCreationOption;\n    };\n    /**\n     * Fill the defines array according to the current settings of the particle system\n     * @param defines Array to be updated\n     * @param blendMode blend mode to take into account when updating the array\n     */\n    GPUParticleSystem.prototype.fillDefines = function (defines, blendMode) {\n        if (blendMode === void 0) { blendMode = 0; }\n        if (this._scene) {\n            if (this._scene.clipPlane) {\n                defines.push(\"#define CLIPPLANE\");\n            }\n            if (this._scene.clipPlane2) {\n                defines.push(\"#define CLIPPLANE2\");\n            }\n            if (this._scene.clipPlane3) {\n                defines.push(\"#define CLIPPLANE3\");\n            }\n            if (this._scene.clipPlane4) {\n                defines.push(\"#define CLIPPLANE4\");\n            }\n            if (this._scene.clipPlane5) {\n                defines.push(\"#define CLIPPLANE5\");\n            }\n            if (this._scene.clipPlane6) {\n                defines.push(\"#define CLIPPLANE6\");\n            }\n        }\n        if (blendMode === ParticleSystem.BLENDMODE_MULTIPLY) {\n            defines.push(\"#define BLENDMULTIPLYMODE\");\n        }\n        if (this.isLocal) {\n            defines.push(\"#define LOCAL\");\n        }\n        if (this._isBillboardBased) {\n            defines.push(\"#define BILLBOARD\");\n            switch (this.billboardMode) {\n                case ParticleSystem.BILLBOARDMODE_Y:\n                    defines.push(\"#define BILLBOARDY\");\n                    break;\n                case ParticleSystem.BILLBOARDMODE_STRETCHED:\n                    defines.push(\"#define BILLBOARDSTRETCHED\");\n                    break;\n                case ParticleSystem.BILLBOARDMODE_ALL:\n                    defines.push(\"#define BILLBOARDMODE_ALL\");\n                    break;\n                default:\n                    break;\n            }\n        }\n        if (this._colorGradientsTexture) {\n            defines.push(\"#define COLORGRADIENTS\");\n        }\n        if (this.isAnimationSheetEnabled) {\n            defines.push(\"#define ANIMATESHEET\");\n        }\n        if (this._imageProcessingConfiguration) {\n            this._imageProcessingConfiguration.prepareDefines(this._imageProcessingConfigurationDefines);\n            defines.push(\"\" + this._imageProcessingConfigurationDefines.toString());\n        }\n    };\n    /**\n     * Fill the uniforms, attributes and samplers arrays according to the current settings of the particle system\n     * @param uniforms Uniforms array to fill\n     * @param attributes Attributes array to fill\n     * @param samplers Samplers array to fill\n     */\n    GPUParticleSystem.prototype.fillUniformsAttributesAndSamplerNames = function (uniforms, attributes, samplers) {\n        attributes.push.apply(attributes, GPUParticleSystem._GetAttributeNamesOrOptions(!!this._colorGradientsTexture, this._isAnimationSheetEnabled, this._isBillboardBased, this._isBillboardBased && this.billboardMode === ParticleSystem.BILLBOARDMODE_STRETCHED));\n        uniforms.push.apply(uniforms, GPUParticleSystem._GetEffectCreationOptions(this._isAnimationSheetEnabled));\n        samplers.push(\"diffuseSampler\", \"colorGradientSampler\");\n        if (this._imageProcessingConfiguration) {\n            ImageProcessingConfiguration.PrepareUniforms(uniforms, this._imageProcessingConfigurationDefines);\n            ImageProcessingConfiguration.PrepareSamplers(samplers, this._imageProcessingConfigurationDefines);\n        }\n    };\n    /**\n     * Animates the particle system for the current frame by emitting new particles and or animating the living ones.\n     * @param preWarm defines if we are in the pre-warmimg phase\n     */\n    GPUParticleSystem.prototype.animate = function (preWarm) {\n        var _a;\n        if (preWarm === void 0) { preWarm = false; }\n        this._timeDelta = this.updateSpeed * (preWarm ? this.preWarmStepOffset : ((_a = this._scene) === null || _a === void 0 ? void 0 : _a.getAnimationRatio()) || 1);\n        this._actualFrame += this._timeDelta;\n        if (!this._stopped) {\n            if (this.targetStopDuration && this._actualFrame >= this.targetStopDuration) {\n                this.stop();\n            }\n        }\n    };\n    GPUParticleSystem.prototype._createFactorGradientTexture = function (factorGradients, textureName) {\n        var texture = this[textureName];\n        if (!factorGradients || !factorGradients.length || texture) {\n            return;\n        }\n        var data = new Float32Array(this._rawTextureWidth);\n        var _loop_1 = function (x) {\n            var ratio = x / this_1._rawTextureWidth;\n            GradientHelper.GetCurrentGradient(ratio, factorGradients, function (currentGradient, nextGradient, scale) {\n                data[x] = Scalar.Lerp(currentGradient.factor1, nextGradient.factor1, scale);\n            });\n        };\n        var this_1 = this;\n        for (var x = 0; x < this._rawTextureWidth; x++) {\n            _loop_1(x);\n        }\n        this[textureName] = RawTexture.CreateRTexture(data, this._rawTextureWidth, 1, this._scene || this._engine, false, false, 1);\n    };\n    GPUParticleSystem.prototype._createSizeGradientTexture = function () {\n        this._createFactorGradientTexture(this._sizeGradients, \"_sizeGradientsTexture\");\n    };\n    GPUParticleSystem.prototype._createAngularSpeedGradientTexture = function () {\n        this._createFactorGradientTexture(this._angularSpeedGradients, \"_angularSpeedGradientsTexture\");\n    };\n    GPUParticleSystem.prototype._createVelocityGradientTexture = function () {\n        this._createFactorGradientTexture(this._velocityGradients, \"_velocityGradientsTexture\");\n    };\n    GPUParticleSystem.prototype._createLimitVelocityGradientTexture = function () {\n        this._createFactorGradientTexture(this._limitVelocityGradients, \"_limitVelocityGradientsTexture\");\n    };\n    GPUParticleSystem.prototype._createDragGradientTexture = function () {\n        this._createFactorGradientTexture(this._dragGradients, \"_dragGradientsTexture\");\n    };\n    GPUParticleSystem.prototype._createColorGradientTexture = function () {\n        if (!this._colorGradients || !this._colorGradients.length || this._colorGradientsTexture) {\n            return;\n        }\n        var data = new Uint8Array(this._rawTextureWidth * 4);\n        var tmpColor = TmpColors.Color4[0];\n        var _loop_2 = function (x) {\n            var ratio = x / this_2._rawTextureWidth;\n            GradientHelper.GetCurrentGradient(ratio, this_2._colorGradients, function (currentGradient, nextGradient, scale) {\n                Color4.LerpToRef(currentGradient.color1, nextGradient.color1, scale, tmpColor);\n                data[x * 4] = tmpColor.r * 255;\n                data[x * 4 + 1] = tmpColor.g * 255;\n                data[x * 4 + 2] = tmpColor.b * 255;\n                data[x * 4 + 3] = tmpColor.a * 255;\n            });\n        };\n        var this_2 = this;\n        for (var x = 0; x < this._rawTextureWidth; x++) {\n            _loop_2(x);\n        }\n        this._colorGradientsTexture = RawTexture.CreateRGBATexture(data, this._rawTextureWidth, 1, this._scene, false, false, 1);\n    };\n    GPUParticleSystem.prototype._render = function (blendMode, emitterWM) {\n        var _a, _b;\n        // Enable render effect\n        var drawWrapper = this._getWrapper(blendMode);\n        var effect = drawWrapper.effect;\n        this._engine.enableEffect(drawWrapper);\n        var viewMatrix = ((_a = this._scene) === null || _a === void 0 ? void 0 : _a.getViewMatrix()) || Matrix.IdentityReadOnly;\n        effect.setMatrix(\"view\", viewMatrix);\n        effect.setMatrix(\"projection\", (_b = this.defaultProjectionMatrix) !== null && _b !== void 0 ? _b : this._scene.getProjectionMatrix());\n        effect.setTexture(\"diffuseSampler\", this.particleTexture);\n        effect.setVector2(\"translationPivot\", this.translationPivot);\n        effect.setVector3(\"worldOffset\", this.worldOffset);\n        if (this.isLocal) {\n            effect.setMatrix(\"emitterWM\", emitterWM);\n        }\n        if (this._colorGradientsTexture) {\n            effect.setTexture(\"colorGradientSampler\", this._colorGradientsTexture);\n        }\n        else {\n            effect.setDirectColor4(\"colorDead\", this.colorDead);\n        }\n        if (this._isAnimationSheetEnabled && this.particleTexture) {\n            var baseSize = this.particleTexture.getBaseSize();\n            effect.setFloat3(\"sheetInfos\", this.spriteCellWidth / baseSize.width, this.spriteCellHeight / baseSize.height, baseSize.width / this.spriteCellWidth);\n        }\n        if (this._isBillboardBased && this._scene) {\n            var camera = this._scene.activeCamera;\n            effect.setVector3(\"eyePosition\", camera.globalPosition);\n        }\n        var defines = effect.defines;\n        if (this._scene) {\n            if (this._scene.clipPlane || this._scene.clipPlane2 || this._scene.clipPlane3 || this._scene.clipPlane4 || this._scene.clipPlane5 || this._scene.clipPlane6) {\n                MaterialHelper.BindClipPlane(effect, this._scene);\n            }\n        }\n        if (defines.indexOf(\"#define BILLBOARDMODE_ALL\") >= 0) {\n            var invView = viewMatrix.clone();\n            invView.invert();\n            effect.setMatrix(\"invView\", invView);\n        }\n        // image processing\n        if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\n            this._imageProcessingConfiguration.bind(effect);\n        }\n        // Draw order\n        switch (blendMode) {\n            case ParticleSystem.BLENDMODE_ADD:\n                this._engine.setAlphaMode(1);\n                break;\n            case ParticleSystem.BLENDMODE_ONEONE:\n                this._engine.setAlphaMode(6);\n                break;\n            case ParticleSystem.BLENDMODE_STANDARD:\n                this._engine.setAlphaMode(2);\n                break;\n            case ParticleSystem.BLENDMODE_MULTIPLY:\n                this._engine.setAlphaMode(4);\n                break;\n        }\n        // Bind source VAO\n        this._platform.bindDrawBuffers(this._targetIndex, effect);\n        if (this._onBeforeDrawParticlesObservable) {\n            this._onBeforeDrawParticlesObservable.notifyObservers(effect);\n        }\n        // Render\n        this._engine.drawArraysType(7, 0, 4, this._currentActiveCount);\n        this._engine.setAlphaMode(0);\n        return this._currentActiveCount;\n    };\n    /**\n     * Renders the particle system in its current state\n     * @param preWarm defines if the system should only update the particles but not render them\n     * @param forceUpdateOnly if true, force to only update the particles and never display them (meaning, even if preWarm=false, when forceUpdateOnly=true the particles won't be displayed)\n     * @returns the current number of particles\n     */\n    GPUParticleSystem.prototype.render = function (preWarm, forceUpdateOnly) {\n        if (preWarm === void 0) { preWarm = false; }\n        if (forceUpdateOnly === void 0) { forceUpdateOnly = false; }\n        if (!this._started) {\n            return 0;\n        }\n        this._createColorGradientTexture();\n        this._createSizeGradientTexture();\n        this._createAngularSpeedGradientTexture();\n        this._createVelocityGradientTexture();\n        this._createLimitVelocityGradientTexture();\n        this._createDragGradientTexture();\n        this._recreateUpdateEffect();\n        if (!this.isReady()) {\n            return 0;\n        }\n        if (!preWarm && this._scene) {\n            if (!this._preWarmDone && this.preWarmCycles) {\n                for (var index = 0; index < this.preWarmCycles; index++) {\n                    this.animate(true);\n                    this.render(true, true);\n                }\n                this._preWarmDone = true;\n            }\n            if (this._currentRenderId === this._scene.getFrameId() &&\n                (!this._scene.activeCamera || (this._scene.activeCamera && this._currentRenderingCameraUniqueId === this._scene.activeCamera.uniqueId))) {\n                return 0;\n            }\n            this._currentRenderId = this._scene.getFrameId();\n            if (this._scene.activeCamera) {\n                this._currentRenderingCameraUniqueId = this._scene.activeCamera.uniqueId;\n            }\n        }\n        // Get everything ready to render\n        this._initialize();\n        this._accumulatedCount += this.emitRate * this._timeDelta;\n        if (this._accumulatedCount > 1) {\n            var intPart = this._accumulatedCount | 0;\n            this._accumulatedCount -= intPart;\n            this._currentActiveCount = Math.min(this._activeCount, this._currentActiveCount + intPart);\n        }\n        if (!this._currentActiveCount) {\n            return 0;\n        }\n        // Enable update effect\n        var emitterWM;\n        if (this.emitter.position) {\n            var emitterMesh = this.emitter;\n            emitterWM = emitterMesh.getWorldMatrix();\n        }\n        else {\n            var emitterPosition = this.emitter;\n            emitterWM = Matrix.Translation(emitterPosition.x, emitterPosition.y, emitterPosition.z);\n        }\n        var engine = this._engine;\n        this._platform.preUpdateParticleBuffer();\n        this._updateBuffer.setFloat(\"currentCount\", this._currentActiveCount);\n        this._updateBuffer.setFloat(\"timeDelta\", this._timeDelta);\n        this._updateBuffer.setFloat(\"stopFactor\", this._stopped ? 0 : 1);\n        this._updateBuffer.setInt(\"randomTextureSize\", this._randomTextureSize);\n        this._updateBuffer.setFloat2(\"lifeTime\", this.minLifeTime, this.maxLifeTime);\n        this._updateBuffer.setFloat2(\"emitPower\", this.minEmitPower, this.maxEmitPower);\n        if (!this._colorGradientsTexture) {\n            this._updateBuffer.setDirectColor4(\"color1\", this.color1);\n            this._updateBuffer.setDirectColor4(\"color2\", this.color2);\n        }\n        this._updateBuffer.setFloat2(\"sizeRange\", this.minSize, this.maxSize);\n        this._updateBuffer.setFloat4(\"scaleRange\", this.minScaleX, this.maxScaleX, this.minScaleY, this.maxScaleY);\n        this._updateBuffer.setFloat4(\"angleRange\", this.minAngularSpeed, this.maxAngularSpeed, this.minInitialRotation, this.maxInitialRotation);\n        this._updateBuffer.setVector3(\"gravity\", this.gravity);\n        if (this._limitVelocityGradientsTexture) {\n            this._updateBuffer.setFloat(\"limitVelocityDamping\", this.limitVelocityDamping);\n        }\n        if (this.particleEmitterType) {\n            this.particleEmitterType.applyToShader(this._updateBuffer);\n        }\n        if (this._isAnimationSheetEnabled) {\n            this._updateBuffer.setFloat4(\"cellInfos\", this.startSpriteCellID, this.endSpriteCellID, this.spriteCellChangeSpeed, this.spriteCellLoop ? 1 : 0);\n        }\n        if (this.noiseTexture) {\n            this._updateBuffer.setVector3(\"noiseStrength\", this.noiseStrength);\n        }\n        if (!this.isLocal) {\n            this._updateBuffer.setMatrix(\"emitterWM\", emitterWM);\n        }\n        this._platform.updateParticleBuffer(this._targetIndex, this._targetBuffer, this._currentActiveCount);\n        var outparticles = 0;\n        if (!preWarm && !forceUpdateOnly) {\n            engine.setState(false);\n            if (this.forceDepthWrite) {\n                engine.setDepthWrite(true);\n            }\n            if (this.blendMode === ParticleSystem.BLENDMODE_MULTIPLYADD) {\n                outparticles = this._render(ParticleSystem.BLENDMODE_MULTIPLY, emitterWM) + this._render(ParticleSystem.BLENDMODE_ADD, emitterWM);\n            }\n            else {\n                outparticles = this._render(this.blendMode, emitterWM);\n            }\n            this._engine.setAlphaMode(0);\n        }\n        // Switch VAOs\n        this._targetIndex++;\n        if (this._targetIndex === 2) {\n            this._targetIndex = 0;\n        }\n        // Switch buffers\n        var tmpBuffer = this._sourceBuffer;\n        this._sourceBuffer = this._targetBuffer;\n        this._targetBuffer = tmpBuffer;\n        return outparticles;\n    };\n    /**\n     * Rebuilds the particle system\n     */\n    GPUParticleSystem.prototype.rebuild = function () {\n        this._initialize(true);\n    };\n    GPUParticleSystem.prototype._releaseBuffers = function () {\n        if (this._buffer0) {\n            this._buffer0.dispose();\n            this._buffer0 = null;\n        }\n        if (this._buffer1) {\n            this._buffer1.dispose();\n            this._buffer1 = null;\n        }\n        if (this._spriteBuffer) {\n            this._spriteBuffer.dispose();\n            this._spriteBuffer = null;\n        }\n        this._platform.releaseBuffers();\n    };\n    /**\n     * Disposes the particle system and free the associated resources\n     * @param disposeTexture defines if the particule texture must be disposed as well (true by default)\n     */\n    GPUParticleSystem.prototype.dispose = function (disposeTexture) {\n        if (disposeTexture === void 0) { disposeTexture = true; }\n        for (var blendMode in this._drawWrappers) {\n            var drawWrapper = this._drawWrappers[blendMode];\n            drawWrapper.dispose();\n        }\n        this._drawWrappers = {};\n        if (this._scene) {\n            var index = this._scene.particleSystems.indexOf(this);\n            if (index > -1) {\n                this._scene.particleSystems.splice(index, 1);\n            }\n        }\n        this._releaseBuffers();\n        this._platform.releaseVertexBuffers();\n        if (this._colorGradientsTexture) {\n            this._colorGradientsTexture.dispose();\n            this._colorGradientsTexture = null;\n        }\n        if (this._sizeGradientsTexture) {\n            this._sizeGradientsTexture.dispose();\n            this._sizeGradientsTexture = null;\n        }\n        if (this._angularSpeedGradientsTexture) {\n            this._angularSpeedGradientsTexture.dispose();\n            this._angularSpeedGradientsTexture = null;\n        }\n        if (this._velocityGradientsTexture) {\n            this._velocityGradientsTexture.dispose();\n            this._velocityGradientsTexture = null;\n        }\n        if (this._limitVelocityGradientsTexture) {\n            this._limitVelocityGradientsTexture.dispose();\n            this._limitVelocityGradientsTexture = null;\n        }\n        if (this._dragGradientsTexture) {\n            this._dragGradientsTexture.dispose();\n            this._dragGradientsTexture = null;\n        }\n        if (this._randomTexture) {\n            this._randomTexture.dispose();\n            this._randomTexture = null;\n        }\n        if (this._randomTexture2) {\n            this._randomTexture2.dispose();\n            this._randomTexture2 = null;\n        }\n        if (disposeTexture && this.particleTexture) {\n            this.particleTexture.dispose();\n            this.particleTexture = null;\n        }\n        if (disposeTexture && this.noiseTexture) {\n            this.noiseTexture.dispose();\n            this.noiseTexture = null;\n        }\n        // Callback\n        this.onStoppedObservable.clear();\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n    };\n    /**\n     * Clones the particle system.\n     * @param name The name of the cloned object\n     * @param newEmitter The new emitter to use\n     * @returns the cloned particle system\n     */\n    GPUParticleSystem.prototype.clone = function (name, newEmitter) {\n        var custom = __assign({}, this._customWrappers);\n        var program = null;\n        var engine = this._engine;\n        if (engine.createEffectForParticles) {\n            if (this.customShader != null) {\n                program = this.customShader;\n                var defines = program.shaderOptions.defines.length > 0 ? program.shaderOptions.defines.join(\"\\n\") : \"\";\n                custom[0] = engine.createEffectForParticles(program.shaderPath.fragmentElement, program.shaderOptions.uniforms, program.shaderOptions.samplers, defines, undefined, undefined, undefined, this);\n            }\n        }\n        var serialization = this.serialize();\n        var result = GPUParticleSystem.Parse(serialization, this._scene || this._engine, this._rootUrl);\n        result.name = name;\n        result.customShader = program;\n        result._customWrappers = custom;\n        if (newEmitter === undefined) {\n            newEmitter = this.emitter;\n        }\n        if (this.noiseTexture) {\n            result.noiseTexture = this.noiseTexture.clone();\n        }\n        result.emitter = newEmitter;\n        return result;\n    };\n    /**\n     * Serializes the particle system to a JSON object\n     * @param serializeTexture defines if the texture must be serialized as well\n     * @returns the JSON object\n     */\n    GPUParticleSystem.prototype.serialize = function (serializeTexture) {\n        if (serializeTexture === void 0) { serializeTexture = false; }\n        var serializationObject = {};\n        ParticleSystem._Serialize(serializationObject, this, serializeTexture);\n        serializationObject.activeParticleCount = this.activeParticleCount;\n        serializationObject.randomTextureSize = this._randomTextureSize;\n        serializationObject.customShader = this.customShader;\n        return serializationObject;\n    };\n    /**\n     * Parses a JSON object to create a GPU particle system.\n     * @param parsedParticleSystem The JSON object to parse\n     * @param sceneOrEngine The scene or the engine to create the particle system in\n     * @param rootUrl The root url to use to load external dependencies like texture\n     * @param doNotStart Ignore the preventAutoStart attribute and does not start\n     * @param capacity defines the system capacity (if null or undefined the sotred capacity will be used)\n     * @returns the parsed GPU particle system\n     */\n    GPUParticleSystem.Parse = function (parsedParticleSystem, sceneOrEngine, rootUrl, doNotStart, capacity) {\n        if (doNotStart === void 0) { doNotStart = false; }\n        var name = parsedParticleSystem.name;\n        var engine;\n        var scene;\n        if (sceneOrEngine instanceof ThinEngine) {\n            engine = sceneOrEngine;\n        }\n        else {\n            scene = sceneOrEngine;\n            engine = scene.getEngine();\n        }\n        var particleSystem = new GPUParticleSystem(name, { capacity: capacity || parsedParticleSystem.capacity, randomTextureSize: parsedParticleSystem.randomTextureSize }, sceneOrEngine, null, parsedParticleSystem.isAnimationSheetEnabled);\n        particleSystem._rootUrl = rootUrl;\n        if (parsedParticleSystem.customShader && engine.createEffectForParticles) {\n            var program = parsedParticleSystem.customShader;\n            var defines = program.shaderOptions.defines.length > 0 ? program.shaderOptions.defines.join(\"\\n\") : \"\";\n            var custom = engine.createEffectForParticles(program.shaderPath.fragmentElement, program.shaderOptions.uniforms, program.shaderOptions.samplers, defines, undefined, undefined, undefined, particleSystem);\n            particleSystem.setCustomEffect(custom, 0);\n            particleSystem.customShader = program;\n        }\n        if (parsedParticleSystem.id) {\n            particleSystem.id = parsedParticleSystem.id;\n        }\n        if (parsedParticleSystem.activeParticleCount) {\n            particleSystem.activeParticleCount = parsedParticleSystem.activeParticleCount;\n        }\n        ParticleSystem._Parse(parsedParticleSystem, particleSystem, sceneOrEngine, rootUrl);\n        // Auto start\n        if (parsedParticleSystem.preventAutoStart) {\n            particleSystem.preventAutoStart = parsedParticleSystem.preventAutoStart;\n        }\n        if (!doNotStart && !particleSystem.preventAutoStart) {\n            particleSystem.start();\n        }\n        return particleSystem;\n    };\n    return GPUParticleSystem;\n}(BaseParticleSystem));\nexport { GPUParticleSystem };\n//# sourceMappingURL=gpuParticleSystem.js.map","import { Color3 } from \"../Maths/math.color.js\";\nimport { CreateSphere } from \"../Meshes/Builders/sphereBuilder.js\";\nimport { GPUParticleSystem } from \"./gpuParticleSystem.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { ParticleSystem } from \"../Particles/particleSystem.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\n/** Internal class used to store shapes for emitters */\nvar ParticleSystemSetEmitterCreationOptions = /** @class */ (function () {\n    function ParticleSystemSetEmitterCreationOptions() {\n    }\n    return ParticleSystemSetEmitterCreationOptions;\n}());\n/**\n * Represents a set of particle systems working together to create a specific effect\n */\nvar ParticleSystemSet = /** @class */ (function () {\n    function ParticleSystemSet() {\n        this._emitterNodeIsOwned = true;\n        /**\n         * Gets the particle system list\n         */\n        this.systems = new Array();\n    }\n    Object.defineProperty(ParticleSystemSet.prototype, \"emitterNode\", {\n        /**\n         * Gets or sets the emitter node used with this set\n         */\n        get: function () {\n            return this._emitterNode;\n        },\n        set: function (value) {\n            if (this._emitterNodeIsOwned && this._emitterNode) {\n                if (this._emitterNode.dispose) {\n                    this._emitterNode.dispose();\n                }\n                this._emitterNodeIsOwned = false;\n            }\n            for (var _i = 0, _a = this.systems; _i < _a.length; _i++) {\n                var system = _a[_i];\n                system.emitter = value;\n            }\n            this._emitterNode = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Creates a new emitter mesh as a sphere\n     * @param options defines the options used to create the sphere\n     * @param options.diameter\n     * @param options.segments\n     * @param options.color\n     * @param renderingGroupId defines the renderingGroupId to use for the sphere\n     * @param scene defines the hosting scene\n     */\n    ParticleSystemSet.prototype.setEmitterAsSphere = function (options, renderingGroupId, scene) {\n        if (this._emitterNodeIsOwned && this._emitterNode) {\n            if (this._emitterNode.dispose) {\n                this._emitterNode.dispose();\n            }\n        }\n        this._emitterNodeIsOwned = true;\n        this._emitterCreationOptions = {\n            kind: \"Sphere\",\n            options: options,\n            renderingGroupId: renderingGroupId,\n        };\n        var emitterMesh = CreateSphere(\"emitterSphere\", { diameter: options.diameter, segments: options.segments }, scene);\n        emitterMesh.renderingGroupId = renderingGroupId;\n        var material = new StandardMaterial(\"emitterSphereMaterial\", scene);\n        material.emissiveColor = options.color;\n        emitterMesh.material = material;\n        for (var _i = 0, _a = this.systems; _i < _a.length; _i++) {\n            var system = _a[_i];\n            system.emitter = emitterMesh;\n        }\n        this._emitterNode = emitterMesh;\n    };\n    /**\n     * Starts all particle systems of the set\n     * @param emitter defines an optional mesh to use as emitter for the particle systems\n     */\n    ParticleSystemSet.prototype.start = function (emitter) {\n        for (var _i = 0, _a = this.systems; _i < _a.length; _i++) {\n            var system = _a[_i];\n            if (emitter) {\n                system.emitter = emitter;\n            }\n            system.start();\n        }\n    };\n    /**\n     * Release all associated resources\n     */\n    ParticleSystemSet.prototype.dispose = function () {\n        for (var _i = 0, _a = this.systems; _i < _a.length; _i++) {\n            var system = _a[_i];\n            system.dispose();\n        }\n        this.systems = [];\n        if (this._emitterNode) {\n            if (this._emitterNode.dispose) {\n                this._emitterNode.dispose();\n            }\n            this._emitterNode = null;\n        }\n    };\n    /**\n     * Serialize the set into a JSON compatible object\n     * @param serializeTexture defines if the texture must be serialized as well\n     * @returns a JSON compatible representation of the set\n     */\n    ParticleSystemSet.prototype.serialize = function (serializeTexture) {\n        if (serializeTexture === void 0) { serializeTexture = false; }\n        var result = {};\n        result.systems = [];\n        for (var _i = 0, _a = this.systems; _i < _a.length; _i++) {\n            var system = _a[_i];\n            result.systems.push(system.serialize(serializeTexture));\n        }\n        if (this._emitterNode) {\n            result.emitter = this._emitterCreationOptions;\n        }\n        return result;\n    };\n    /**\n     * Parse a new ParticleSystemSet from a serialized source\n     * @param data defines a JSON compatible representation of the set\n     * @param scene defines the hosting scene\n     * @param gpu defines if we want GPU particles or CPU particles\n     * @param capacity defines the system capacity (if null or undefined the sotred capacity will be used)\n     * @returns a new ParticleSystemSet\n     */\n    ParticleSystemSet.Parse = function (data, scene, gpu, capacity) {\n        if (gpu === void 0) { gpu = false; }\n        var result = new ParticleSystemSet();\n        var rootUrl = this.BaseAssetsUrl + \"/textures/\";\n        scene = scene || EngineStore.LastCreatedScene;\n        for (var _i = 0, _a = data.systems; _i < _a.length; _i++) {\n            var system = _a[_i];\n            result.systems.push(gpu ? GPUParticleSystem.Parse(system, scene, rootUrl, true, capacity) : ParticleSystem.Parse(system, scene, rootUrl, true, capacity));\n        }\n        if (data.emitter) {\n            var options = data.emitter.options;\n            switch (data.emitter.kind) {\n                case \"Sphere\":\n                    result.setEmitterAsSphere({\n                        diameter: options.diameter,\n                        segments: options.segments,\n                        color: Color3.FromArray(options.color),\n                    }, data.emitter.renderingGroupId, scene);\n                    break;\n            }\n        }\n        return result;\n    };\n    /**\n     * Gets or sets base Assets URL\n     */\n    ParticleSystemSet.BaseAssetsUrl = \"https://assets.babylonjs.com/particles\";\n    return ParticleSystemSet;\n}());\nexport { ParticleSystemSet };\n//# sourceMappingURL=particleSystemSet.js.map","import { Tools } from \"../Misc/tools.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { GPUParticleSystem } from \"./gpuParticleSystem.js\";\nimport { ParticleSystemSet } from \"./particleSystemSet.js\";\nimport { ParticleSystem } from \"./particleSystem.js\";\nimport { WebRequest } from \"../Misc/webRequest.js\";\n\n/**\n * This class is made for on one-liner static method to help creating particle system set.\n */\nvar ParticleHelper = /** @class */ (function () {\n    function ParticleHelper() {\n    }\n    /**\n     * Create a default particle system that you can tweak\n     * @param emitter defines the emitter to use\n     * @param capacity defines the system capacity (default is 500 particles)\n     * @param scene defines the hosting scene\n     * @param useGPU defines if a GPUParticleSystem must be created (default is false)\n     * @returns the new Particle system\n     */\n    ParticleHelper.CreateDefault = function (emitter, capacity, scene, useGPU) {\n        if (capacity === void 0) { capacity = 500; }\n        if (useGPU === void 0) { useGPU = false; }\n        var system;\n        if (useGPU) {\n            system = new GPUParticleSystem(\"default system\", { capacity: capacity }, scene);\n        }\n        else {\n            system = new ParticleSystem(\"default system\", capacity, scene);\n        }\n        system.emitter = emitter;\n        system.particleTexture = new Texture(\"https://assets.babylonjs.com/textures/flare.png\", system.getScene());\n        system.createConeEmitter(0.1, Math.PI / 4);\n        // Particle color\n        system.color1 = new Color4(1.0, 1.0, 1.0, 1.0);\n        system.color2 = new Color4(1.0, 1.0, 1.0, 1.0);\n        system.colorDead = new Color4(1.0, 1.0, 1.0, 0.0);\n        // Particle Size\n        system.minSize = 0.1;\n        system.maxSize = 0.1;\n        // Emission speed\n        system.minEmitPower = 2;\n        system.maxEmitPower = 2;\n        // Update speed\n        system.updateSpeed = 1 / 60;\n        system.emitRate = 30;\n        return system;\n    };\n    /**\n     * This is the main static method (one-liner) of this helper to create different particle systems\n     * @param type This string represents the type to the particle system to create\n     * @param scene The scene where the particle system should live\n     * @param gpu If the system will use gpu\n     * @param capacity defines the system capacity (if null or undefined the sotred capacity will be used)\n     * @returns the ParticleSystemSet created\n     */\n    ParticleHelper.CreateAsync = function (type, scene, gpu, capacity) {\n        if (gpu === void 0) { gpu = false; }\n        if (!scene) {\n            scene = EngineStore.LastCreatedScene;\n        }\n        var token = {};\n        scene._addPendingData(token);\n        return new Promise(function (resolve, reject) {\n            if (gpu && !GPUParticleSystem.IsSupported) {\n                scene._removePendingData(token);\n                return reject(\"Particle system with GPU is not supported.\");\n            }\n            Tools.LoadFile(\"\".concat(ParticleHelper.BaseAssetsUrl, \"/systems/\").concat(type, \".json\"), function (data) {\n                scene._removePendingData(token);\n                var newData = JSON.parse(data.toString());\n                return resolve(ParticleSystemSet.Parse(newData, scene, gpu, capacity));\n            }, undefined, undefined, undefined, function () {\n                scene._removePendingData(token);\n                return reject(\"An error occurred with the creation of your particle system. Check if your type '\".concat(type, \"' exists.\"));\n            });\n        });\n    };\n    /**\n     * Static function used to export a particle system to a ParticleSystemSet variable.\n     * Please note that the emitter shape is not exported\n     * @param systems defines the particle systems to export\n     * @returns the created particle system set\n     */\n    ParticleHelper.ExportSet = function (systems) {\n        var set = new ParticleSystemSet();\n        for (var _i = 0, systems_1 = systems; _i < systems_1.length; _i++) {\n            var system = systems_1[_i];\n            set.systems.push(system);\n        }\n        return set;\n    };\n    /**\n     * Creates a particle system from a snippet saved in a remote file\n     * @param name defines the name of the particle system to create (can be null or empty to use the one from the json data)\n     * @param url defines the url to load from\n     * @param scene defines the hosting scene\n     * @param gpu If the system will use gpu\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @param capacity defines the system capacity (if null or undefined the sotred capacity will be used)\n     * @returns a promise that will resolve to the new particle system\n     */\n    ParticleHelper.ParseFromFileAsync = function (name, url, scene, gpu, rootUrl, capacity) {\n        if (gpu === void 0) { gpu = false; }\n        if (rootUrl === void 0) { rootUrl = \"\"; }\n        return new Promise(function (resolve, reject) {\n            var request = new WebRequest();\n            request.addEventListener(\"readystatechange\", function () {\n                if (request.readyState == 4) {\n                    if (request.status == 200) {\n                        var serializationObject = JSON.parse(request.responseText);\n                        var output = void 0;\n                        if (gpu) {\n                            output = GPUParticleSystem.Parse(serializationObject, scene, rootUrl, false, capacity);\n                        }\n                        else {\n                            output = ParticleSystem.Parse(serializationObject, scene, rootUrl, false, capacity);\n                        }\n                        if (name) {\n                            output.name = name;\n                        }\n                        resolve(output);\n                    }\n                    else {\n                        reject(\"Unable to load the particle system\");\n                    }\n                }\n            });\n            request.open(\"GET\", url);\n            request.send();\n        });\n    };\n    /**\n     * Creates a particle system from a snippet saved by the particle system editor\n     * @param snippetId defines the snippet to load (can be set to _BLANK to create a default one)\n     * @param scene defines the hosting scene\n     * @param gpu If the system will use gpu\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @param capacity defines the system capacity (if null or undefined the sotred capacity will be used)\n     * @returns a promise that will resolve to the new particle system\n     */\n    ParticleHelper.CreateFromSnippetAsync = function (snippetId, scene, gpu, rootUrl, capacity) {\n        var _this = this;\n        if (gpu === void 0) { gpu = false; }\n        if (rootUrl === void 0) { rootUrl = \"\"; }\n        if (snippetId === \"_BLANK\") {\n            var system = this.CreateDefault(null);\n            system.start();\n            return Promise.resolve(system);\n        }\n        return new Promise(function (resolve, reject) {\n            var request = new WebRequest();\n            request.addEventListener(\"readystatechange\", function () {\n                if (request.readyState == 4) {\n                    if (request.status == 200) {\n                        var snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\n                        var serializationObject = JSON.parse(snippet.particleSystem);\n                        var output = void 0;\n                        if (gpu) {\n                            output = GPUParticleSystem.Parse(serializationObject, scene, rootUrl, false, capacity);\n                        }\n                        else {\n                            output = ParticleSystem.Parse(serializationObject, scene, rootUrl, false, capacity);\n                        }\n                        output.snippetId = snippetId;\n                        resolve(output);\n                    }\n                    else {\n                        reject(\"Unable to load the snippet \" + snippetId);\n                    }\n                }\n            });\n            request.open(\"GET\", _this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\n            request.send();\n        });\n    };\n    /**\n     * Gets or sets base Assets URL\n     */\n    ParticleHelper.BaseAssetsUrl = ParticleSystemSet.BaseAssetsUrl;\n    /** Define the Url to load snippets */\n    ParticleHelper.SnippetUrl = `https://snippet.babylonjs.com`;\n    return ParticleHelper;\n}());\nexport { ParticleHelper };\n//# sourceMappingURL=particleHelper.js.map","import { Mesh } from \"../Meshes/mesh.js\";\nimport { GPUParticleSystem } from \"./gpuParticleSystem.js\";\nimport { AbstractScene } from \"../abstractScene.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { ParticleSystem } from \"./particleSystem.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport \"../Shaders/particles.vertex.js\";\n// Adds the parsers to the scene parsers.\nAbstractScene.AddParser(SceneComponentConstants.NAME_PARTICLESYSTEM, function (parsedData, scene, container, rootUrl) {\n    var individualParser = AbstractScene.GetIndividualParser(SceneComponentConstants.NAME_PARTICLESYSTEM);\n    if (!individualParser) {\n        return;\n    }\n    // Particles Systems\n    if (parsedData.particleSystems !== undefined && parsedData.particleSystems !== null) {\n        for (var index = 0, cache = parsedData.particleSystems.length; index < cache; index++) {\n            var parsedParticleSystem = parsedData.particleSystems[index];\n            container.particleSystems.push(individualParser(parsedParticleSystem, scene, rootUrl));\n        }\n    }\n});\nAbstractScene.AddIndividualParser(SceneComponentConstants.NAME_PARTICLESYSTEM, function (parsedParticleSystem, scene, rootUrl) {\n    if (parsedParticleSystem.activeParticleCount) {\n        var ps = GPUParticleSystem.Parse(parsedParticleSystem, scene, rootUrl);\n        return ps;\n    }\n    else {\n        var ps = ParticleSystem.Parse(parsedParticleSystem, scene, rootUrl);\n        return ps;\n    }\n});\nEngine.prototype.createEffectForParticles = function (fragmentName, uniformsNames, samplers, defines, fallbacks, onCompiled, onError, particleSystem) {\n    var _a;\n    if (uniformsNames === void 0) { uniformsNames = []; }\n    if (samplers === void 0) { samplers = []; }\n    if (defines === void 0) { defines = \"\"; }\n    var attributesNamesOrOptions = [];\n    var effectCreationOption = [];\n    var allSamplers = [];\n    if (particleSystem) {\n        particleSystem.fillUniformsAttributesAndSamplerNames(effectCreationOption, attributesNamesOrOptions, allSamplers);\n    }\n    else {\n        attributesNamesOrOptions = ParticleSystem._GetAttributeNamesOrOptions();\n        effectCreationOption = ParticleSystem._GetEffectCreationOptions();\n    }\n    if (defines.indexOf(\" BILLBOARD\") === -1) {\n        defines += \"\\n#define BILLBOARD\\n\";\n    }\n    if (samplers.indexOf(\"diffuseSampler\") === -1) {\n        samplers.push(\"diffuseSampler\");\n    }\n    return this.createEffect({\n        vertex: (_a = particleSystem === null || particleSystem === void 0 ? void 0 : particleSystem.vertexShaderName) !== null && _a !== void 0 ? _a : \"particles\",\n        fragmentElement: fragmentName,\n    }, attributesNamesOrOptions, effectCreationOption.concat(uniformsNames), allSamplers.concat(samplers), defines, fallbacks, onCompiled, onError);\n};\nMesh.prototype.getEmittedParticleSystems = function () {\n    var results = new Array();\n    for (var index = 0; index < this.getScene().particleSystems.length; index++) {\n        var particleSystem = this.getScene().particleSystems[index];\n        if (particleSystem.emitter === this) {\n            results.push(particleSystem);\n        }\n    }\n    return results;\n};\nMesh.prototype.getHierarchyEmittedParticleSystems = function () {\n    var results = new Array();\n    var descendants = this.getDescendants();\n    descendants.push(this);\n    for (var index = 0; index < this.getScene().particleSystems.length; index++) {\n        var particleSystem = this.getScene().particleSystems[index];\n        var emitter = particleSystem.emitter;\n        if (emitter.position && descendants.indexOf(emitter) !== -1) {\n            results.push(particleSystem);\n        }\n    }\n    return results;\n};\n//# sourceMappingURL=particleSystemComponent.js.map","import { Color4, Color3 } from \"../Maths/math.js\";\nimport { Vector2, Vector3, Vector4, TmpVectors, Matrix } from \"../Maths/math.vector.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { VertexData } from \"../Meshes/mesh.vertexData.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { CloudPoint, PointsGroup } from \"./cloudPoint.js\";\nimport { Ray } from \"../Culling/ray.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { BaseTexture } from \"./../Materials/Textures/baseTexture.js\";\nimport { Scalar } from \"../Maths/math.scalar.js\";\n/** Defines the 4 color options */\nexport var PointColor;\n(function (PointColor) {\n    /** color value */\n    PointColor[PointColor[\"Color\"] = 2] = \"Color\";\n    /** uv value */\n    PointColor[PointColor[\"UV\"] = 1] = \"UV\";\n    /** random value */\n    PointColor[PointColor[\"Random\"] = 0] = \"Random\";\n    /** stated value */\n    PointColor[PointColor[\"Stated\"] = 3] = \"Stated\";\n})(PointColor || (PointColor = {}));\n/**\n * The PointCloudSystem (PCS) is a single updatable mesh. The points corresponding to the vertices of this big mesh.\n * As it is just a mesh, the PointCloudSystem has all the same properties as any other BJS mesh : not more, not less. It can be scaled, rotated, translated, enlighted, textured, moved, etc.\n\n * The PointCloudSystem is also a particle system, with each point being a particle. It provides some methods to manage the particles.\n * However it is behavior agnostic. This means it has no emitter, no particle physics, no particle recycler. You have to implement your own behavior.\n *\n * Full documentation here : TO BE ENTERED\n */\nvar PointsCloudSystem = /** @class */ (function () {\n    /**\n     * Creates a PCS (Points Cloud System) object\n     * @param name (String) is the PCS name, this will be the underlying mesh name\n     * @param pointSize (number) is the size for each point. Has no effect on a WebGPU engine.\n     * @param scene (Scene) is the scene in which the PCS is added\n     * @param options defines the options of the PCS e.g.\n     * * updatable (optional boolean, default true) : if the PCS must be updatable or immutable\n     * @param options.updatable\n     */\n    function PointsCloudSystem(name, pointSize, scene, options) {\n        /**\n         *  The PCS array of cloud point objects. Just access each particle as with any classic array.\n         *  Example : var p = SPS.particles[i];\n         */\n        this.particles = new Array();\n        /**\n         * The PCS total number of particles. Read only. Use PCS.counter instead if you need to set your own value.\n         */\n        this.nbParticles = 0;\n        /**\n         * This a counter for your own usage. It's not set by any SPS functions.\n         */\n        this.counter = 0;\n        /**\n         * This empty object is intended to store some PCS specific or temporary values in order to lower the Garbage Collector activity.\n         * Please read :\n         */\n        this.vars = {};\n        this._promises = [];\n        this._positions = new Array();\n        this._indices = new Array();\n        this._normals = new Array();\n        this._colors = new Array();\n        this._uvs = new Array();\n        this._updatable = true;\n        this._isVisibilityBoxLocked = false;\n        this._alwaysVisible = false;\n        this._groups = new Array(); //start indices for each group of particles\n        this._groupCounter = 0;\n        this._computeParticleColor = true;\n        this._computeParticleTexture = true;\n        this._computeParticleRotation = true;\n        this._computeBoundingBox = false;\n        this._isReady = false;\n        this.name = name;\n        this._size = pointSize;\n        this._scene = scene || EngineStore.LastCreatedScene;\n        if (options && options.updatable !== undefined) {\n            this._updatable = options.updatable;\n        }\n        else {\n            this._updatable = true;\n        }\n    }\n    Object.defineProperty(PointsCloudSystem.prototype, \"positions\", {\n        /**\n         * Gets the particle positions computed by the Point Cloud System\n         */\n        get: function () {\n            return this._positions32;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PointsCloudSystem.prototype, \"colors\", {\n        /**\n         * Gets the particle colors computed by the Point Cloud System\n         */\n        get: function () {\n            return this._colors32;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PointsCloudSystem.prototype, \"uvs\", {\n        /**\n         * Gets the particle uvs computed by the Point Cloud System\n         */\n        get: function () {\n            return this._uvs32;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Builds the PCS underlying mesh. Returns a standard Mesh.\n     * If no points were added to the PCS, the returned mesh is just a single point.\n     * @param material The material to use to render the mesh. If not provided, will create a default one\n     * @returns a promise for the created mesh\n     */\n    PointsCloudSystem.prototype.buildMeshAsync = function (material) {\n        var _this = this;\n        return Promise.all(this._promises).then(function () {\n            _this._isReady = true;\n            return _this._buildMesh(material);\n        });\n    };\n    /**\n     * @param material\n     * @hidden\n     */\n    PointsCloudSystem.prototype._buildMesh = function (material) {\n        if (this.nbParticles === 0) {\n            this.addPoints(1);\n        }\n        this._positions32 = new Float32Array(this._positions);\n        this._uvs32 = new Float32Array(this._uvs);\n        this._colors32 = new Float32Array(this._colors);\n        var vertexData = new VertexData();\n        vertexData.set(this._positions32, VertexBuffer.PositionKind);\n        if (this._uvs32.length > 0) {\n            vertexData.set(this._uvs32, VertexBuffer.UVKind);\n        }\n        var ec = 0; //emissive color value 0 for UVs, 1 for color\n        if (this._colors32.length > 0) {\n            ec = 1;\n            vertexData.set(this._colors32, VertexBuffer.ColorKind);\n        }\n        var mesh = new Mesh(this.name, this._scene);\n        vertexData.applyToMesh(mesh, this._updatable);\n        this.mesh = mesh;\n        // free memory\n        this._positions = null;\n        this._uvs = null;\n        this._colors = null;\n        if (!this._updatable) {\n            this.particles.length = 0;\n        }\n        var mat = material;\n        if (!mat) {\n            mat = new StandardMaterial(\"point cloud material\", this._scene);\n            mat.emissiveColor = new Color3(ec, ec, ec);\n            mat.disableLighting = true;\n            mat.pointsCloud = true;\n            mat.pointSize = this._size;\n        }\n        mesh.material = mat;\n        return new Promise(function (resolve) { return resolve(mesh); });\n    };\n    // adds a new particle object in the particles array\n    PointsCloudSystem.prototype._addParticle = function (idx, group, groupId, idxInGroup) {\n        var cp = new CloudPoint(idx, group, groupId, idxInGroup, this);\n        this.particles.push(cp);\n        return cp;\n    };\n    PointsCloudSystem.prototype._randomUnitVector = function (particle) {\n        particle.position = new Vector3(Math.random(), Math.random(), Math.random());\n        particle.color = new Color4(1, 1, 1, 1);\n    };\n    PointsCloudSystem.prototype._getColorIndicesForCoord = function (pointsGroup, x, y, width) {\n        var imageData = pointsGroup._groupImageData;\n        var color = y * (width * 4) + x * 4;\n        var colorIndices = [color, color + 1, color + 2, color + 3];\n        var redIndex = colorIndices[0];\n        var greenIndex = colorIndices[1];\n        var blueIndex = colorIndices[2];\n        var alphaIndex = colorIndices[3];\n        var redForCoord = imageData[redIndex];\n        var greenForCoord = imageData[greenIndex];\n        var blueForCoord = imageData[blueIndex];\n        var alphaForCoord = imageData[alphaIndex];\n        return new Color4(redForCoord / 255, greenForCoord / 255, blueForCoord / 255, alphaForCoord);\n    };\n    PointsCloudSystem.prototype._setPointsColorOrUV = function (mesh, pointsGroup, isVolume, colorFromTexture, hasTexture, color, range) {\n        if (isVolume) {\n            mesh.updateFacetData();\n        }\n        var boundInfo = mesh.getBoundingInfo();\n        var diameter = 2 * boundInfo.boundingSphere.radius;\n        var meshPos = mesh.getVerticesData(VertexBuffer.PositionKind);\n        var meshInd = mesh.getIndices();\n        var meshUV = mesh.getVerticesData(VertexBuffer.UVKind);\n        var meshCol = mesh.getVerticesData(VertexBuffer.ColorKind);\n        var place = Vector3.Zero();\n        mesh.computeWorldMatrix();\n        var meshMatrix = mesh.getWorldMatrix();\n        if (!meshMatrix.isIdentity()) {\n            meshPos = meshPos.slice(0);\n            for (var p = 0; p < meshPos.length / 3; p++) {\n                Vector3.TransformCoordinatesFromFloatsToRef(meshPos[3 * p], meshPos[3 * p + 1], meshPos[3 * p + 2], meshMatrix, place);\n                meshPos[3 * p] = place.x;\n                meshPos[3 * p + 1] = place.y;\n                meshPos[3 * p + 2] = place.z;\n            }\n        }\n        var idxPoints = 0;\n        var id0 = 0;\n        var id1 = 0;\n        var id2 = 0;\n        var v0X = 0;\n        var v0Y = 0;\n        var v0Z = 0;\n        var v1X = 0;\n        var v1Y = 0;\n        var v1Z = 0;\n        var v2X = 0;\n        var v2Y = 0;\n        var v2Z = 0;\n        var vertex0 = Vector3.Zero();\n        var vertex1 = Vector3.Zero();\n        var vertex2 = Vector3.Zero();\n        var vec0 = Vector3.Zero();\n        var vec1 = Vector3.Zero();\n        var uv0X = 0;\n        var uv0Y = 0;\n        var uv1X = 0;\n        var uv1Y = 0;\n        var uv2X = 0;\n        var uv2Y = 0;\n        var uv0 = Vector2.Zero();\n        var uv1 = Vector2.Zero();\n        var uv2 = Vector2.Zero();\n        var uvec0 = Vector2.Zero();\n        var uvec1 = Vector2.Zero();\n        var col0X = 0;\n        var col0Y = 0;\n        var col0Z = 0;\n        var col0A = 0;\n        var col1X = 0;\n        var col1Y = 0;\n        var col1Z = 0;\n        var col1A = 0;\n        var col2X = 0;\n        var col2Y = 0;\n        var col2Z = 0;\n        var col2A = 0;\n        var col0 = Vector4.Zero();\n        var col1 = Vector4.Zero();\n        var col2 = Vector4.Zero();\n        var colvec0 = Vector4.Zero();\n        var colvec1 = Vector4.Zero();\n        var lamda = 0;\n        var mu = 0;\n        range = range ? range : 0;\n        var facetPoint;\n        var uvPoint;\n        var colPoint = new Vector4(0, 0, 0, 0);\n        var norm = Vector3.Zero();\n        var tang = Vector3.Zero();\n        var biNorm = Vector3.Zero();\n        var angle = 0;\n        var facetPlaneVec = Vector3.Zero();\n        var gap = 0;\n        var distance = 0;\n        var ray = new Ray(Vector3.Zero(), new Vector3(1, 0, 0));\n        var pickInfo;\n        var direction = Vector3.Zero();\n        for (var index = 0; index < meshInd.length / 3; index++) {\n            id0 = meshInd[3 * index];\n            id1 = meshInd[3 * index + 1];\n            id2 = meshInd[3 * index + 2];\n            v0X = meshPos[3 * id0];\n            v0Y = meshPos[3 * id0 + 1];\n            v0Z = meshPos[3 * id0 + 2];\n            v1X = meshPos[3 * id1];\n            v1Y = meshPos[3 * id1 + 1];\n            v1Z = meshPos[3 * id1 + 2];\n            v2X = meshPos[3 * id2];\n            v2Y = meshPos[3 * id2 + 1];\n            v2Z = meshPos[3 * id2 + 2];\n            vertex0.set(v0X, v0Y, v0Z);\n            vertex1.set(v1X, v1Y, v1Z);\n            vertex2.set(v2X, v2Y, v2Z);\n            vertex1.subtractToRef(vertex0, vec0);\n            vertex2.subtractToRef(vertex1, vec1);\n            if (meshUV) {\n                uv0X = meshUV[2 * id0];\n                uv0Y = meshUV[2 * id0 + 1];\n                uv1X = meshUV[2 * id1];\n                uv1Y = meshUV[2 * id1 + 1];\n                uv2X = meshUV[2 * id2];\n                uv2Y = meshUV[2 * id2 + 1];\n                uv0.set(uv0X, uv0Y);\n                uv1.set(uv1X, uv1Y);\n                uv2.set(uv2X, uv2Y);\n                uv1.subtractToRef(uv0, uvec0);\n                uv2.subtractToRef(uv1, uvec1);\n            }\n            if (meshCol && colorFromTexture) {\n                col0X = meshCol[4 * id0];\n                col0Y = meshCol[4 * id0 + 1];\n                col0Z = meshCol[4 * id0 + 2];\n                col0A = meshCol[4 * id0 + 3];\n                col1X = meshCol[4 * id1];\n                col1Y = meshCol[4 * id1 + 1];\n                col1Z = meshCol[4 * id1 + 2];\n                col1A = meshCol[4 * id1 + 3];\n                col2X = meshCol[4 * id2];\n                col2Y = meshCol[4 * id2 + 1];\n                col2Z = meshCol[4 * id2 + 2];\n                col2A = meshCol[4 * id2 + 3];\n                col0.set(col0X, col0Y, col0Z, col0A);\n                col1.set(col1X, col1Y, col1Z, col1A);\n                col2.set(col2X, col2Y, col2Z, col2A);\n                col1.subtractToRef(col0, colvec0);\n                col2.subtractToRef(col1, colvec1);\n            }\n            var width = void 0;\n            var height = void 0;\n            var deltaS = void 0;\n            var deltaV = void 0;\n            var h = void 0;\n            var s = void 0;\n            var v = void 0;\n            var hsvCol = void 0;\n            var statedColor = new Color3(0, 0, 0);\n            var colPoint3 = new Color3(0, 0, 0);\n            var pointColors = void 0;\n            var particle = void 0;\n            for (var i = 0; i < pointsGroup._groupDensity[index]; i++) {\n                idxPoints = this.particles.length;\n                this._addParticle(idxPoints, pointsGroup, this._groupCounter, index + i);\n                particle = this.particles[idxPoints];\n                //form a point inside the facet v0, v1, v2;\n                lamda = Scalar.RandomRange(0, 1);\n                mu = Scalar.RandomRange(0, 1);\n                facetPoint = vertex0.add(vec0.scale(lamda)).add(vec1.scale(lamda * mu));\n                if (isVolume) {\n                    norm = mesh.getFacetNormal(index).normalize().scale(-1);\n                    tang = vec0.clone().normalize();\n                    biNorm = Vector3.Cross(norm, tang);\n                    angle = Scalar.RandomRange(0, 2 * Math.PI);\n                    facetPlaneVec = tang.scale(Math.cos(angle)).add(biNorm.scale(Math.sin(angle)));\n                    angle = Scalar.RandomRange(0.1, Math.PI / 2);\n                    direction = facetPlaneVec.scale(Math.cos(angle)).add(norm.scale(Math.sin(angle)));\n                    ray.origin = facetPoint.add(direction.scale(0.00001));\n                    ray.direction = direction;\n                    ray.length = diameter;\n                    pickInfo = ray.intersectsMesh(mesh);\n                    if (pickInfo.hit) {\n                        distance = pickInfo.pickedPoint.subtract(facetPoint).length();\n                        gap = Scalar.RandomRange(0, 1) * distance;\n                        facetPoint.addInPlace(direction.scale(gap));\n                    }\n                }\n                particle.position = facetPoint.clone();\n                this._positions.push(particle.position.x, particle.position.y, particle.position.z);\n                if (colorFromTexture !== undefined) {\n                    if (meshUV) {\n                        uvPoint = uv0.add(uvec0.scale(lamda)).add(uvec1.scale(lamda * mu));\n                        if (colorFromTexture) {\n                            //Set particle color to texture color\n                            if (hasTexture && pointsGroup._groupImageData !== null) {\n                                width = pointsGroup._groupImgWidth;\n                                height = pointsGroup._groupImgHeight;\n                                pointColors = this._getColorIndicesForCoord(pointsGroup, Math.round(uvPoint.x * width), Math.round(uvPoint.y * height), width);\n                                particle.color = pointColors;\n                                this._colors.push(pointColors.r, pointColors.g, pointColors.b, pointColors.a);\n                            }\n                            else {\n                                if (meshCol) {\n                                    //failure in texture and colors available\n                                    colPoint = col0.add(colvec0.scale(lamda)).add(colvec1.scale(lamda * mu));\n                                    particle.color = new Color4(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\n                                    this._colors.push(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\n                                }\n                                else {\n                                    colPoint = col0.set(Math.random(), Math.random(), Math.random(), 1);\n                                    particle.color = new Color4(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\n                                    this._colors.push(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\n                                }\n                            }\n                        }\n                        else {\n                            //Set particle uv based on a mesh uv\n                            particle.uv = uvPoint.clone();\n                            this._uvs.push(particle.uv.x, particle.uv.y);\n                        }\n                    }\n                }\n                else {\n                    if (color) {\n                        statedColor.set(color.r, color.g, color.b);\n                        deltaS = Scalar.RandomRange(-range, range);\n                        deltaV = Scalar.RandomRange(-range, range);\n                        hsvCol = statedColor.toHSV();\n                        h = hsvCol.r;\n                        s = hsvCol.g + deltaS;\n                        v = hsvCol.b + deltaV;\n                        if (s < 0) {\n                            s = 0;\n                        }\n                        if (s > 1) {\n                            s = 1;\n                        }\n                        if (v < 0) {\n                            v = 0;\n                        }\n                        if (v > 1) {\n                            v = 1;\n                        }\n                        Color3.HSVtoRGBToRef(h, s, v, colPoint3);\n                        colPoint.set(colPoint3.r, colPoint3.g, colPoint3.b, 1);\n                    }\n                    else {\n                        colPoint = col0.set(Math.random(), Math.random(), Math.random(), 1);\n                    }\n                    particle.color = new Color4(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\n                    this._colors.push(colPoint.x, colPoint.y, colPoint.z, colPoint.w);\n                }\n            }\n        }\n    };\n    // stores mesh texture in dynamic texture for color pixel retrieval\n    // when pointColor type is color for surface points\n    PointsCloudSystem.prototype._colorFromTexture = function (mesh, pointsGroup, isVolume) {\n        var _this = this;\n        if (mesh.material === null) {\n            Logger.Warn(mesh.name + \"has no material.\");\n            pointsGroup._groupImageData = null;\n            this._setPointsColorOrUV(mesh, pointsGroup, isVolume, true, false);\n            return;\n        }\n        var mat = mesh.material;\n        var textureList = mat.getActiveTextures();\n        if (textureList.length === 0) {\n            Logger.Warn(mesh.name + \"has no usable texture.\");\n            pointsGroup._groupImageData = null;\n            this._setPointsColorOrUV(mesh, pointsGroup, isVolume, true, false);\n            return;\n        }\n        var clone = mesh.clone();\n        clone.setEnabled(false);\n        this._promises.push(new Promise(function (resolve) {\n            BaseTexture.WhenAllReady(textureList, function () {\n                var n = pointsGroup._textureNb;\n                if (n < 0) {\n                    n = 0;\n                }\n                if (n > textureList.length - 1) {\n                    n = textureList.length - 1;\n                }\n                var finalize = function () {\n                    pointsGroup._groupImgWidth = textureList[n].getSize().width;\n                    pointsGroup._groupImgHeight = textureList[n].getSize().height;\n                    _this._setPointsColorOrUV(clone, pointsGroup, isVolume, true, true);\n                    clone.dispose();\n                    resolve();\n                };\n                pointsGroup._groupImageData = null;\n                var dataPromise = textureList[n].readPixels();\n                if (!dataPromise) {\n                    finalize();\n                }\n                else {\n                    dataPromise.then(function (data) {\n                        pointsGroup._groupImageData = data;\n                        finalize();\n                    });\n                }\n            });\n        }));\n    };\n    // calculates the point density per facet of a mesh for surface points\n    PointsCloudSystem.prototype._calculateDensity = function (nbPoints, positions, indices) {\n        var density = new Array();\n        var id0;\n        var id1;\n        var id2;\n        var v0X;\n        var v0Y;\n        var v0Z;\n        var v1X;\n        var v1Y;\n        var v1Z;\n        var v2X;\n        var v2Y;\n        var v2Z;\n        var vertex0 = Vector3.Zero();\n        var vertex1 = Vector3.Zero();\n        var vertex2 = Vector3.Zero();\n        var vec0 = Vector3.Zero();\n        var vec1 = Vector3.Zero();\n        var vec2 = Vector3.Zero();\n        var a; //length of side of triangle\n        var b; //length of side of triangle\n        var c; //length of side of triangle\n        var p; //perimeter of triangle\n        var area;\n        var areas = new Array();\n        var surfaceArea = 0;\n        var nbFacets = indices.length / 3;\n        //surface area\n        for (var index = 0; index < nbFacets; index++) {\n            id0 = indices[3 * index];\n            id1 = indices[3 * index + 1];\n            id2 = indices[3 * index + 2];\n            v0X = positions[3 * id0];\n            v0Y = positions[3 * id0 + 1];\n            v0Z = positions[3 * id0 + 2];\n            v1X = positions[3 * id1];\n            v1Y = positions[3 * id1 + 1];\n            v1Z = positions[3 * id1 + 2];\n            v2X = positions[3 * id2];\n            v2Y = positions[3 * id2 + 1];\n            v2Z = positions[3 * id2 + 2];\n            vertex0.set(v0X, v0Y, v0Z);\n            vertex1.set(v1X, v1Y, v1Z);\n            vertex2.set(v2X, v2Y, v2Z);\n            vertex1.subtractToRef(vertex0, vec0);\n            vertex2.subtractToRef(vertex1, vec1);\n            vertex2.subtractToRef(vertex0, vec2);\n            a = vec0.length();\n            b = vec1.length();\n            c = vec2.length();\n            p = (a + b + c) / 2;\n            area = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n            surfaceArea += area;\n            areas[index] = area;\n        }\n        var pointCount = 0;\n        for (var index = 0; index < nbFacets; index++) {\n            density[index] = Math.floor((nbPoints * areas[index]) / surfaceArea);\n            pointCount += density[index];\n        }\n        var diff = nbPoints - pointCount;\n        var pointsPerFacet = Math.floor(diff / nbFacets);\n        var extraPoints = diff % nbFacets;\n        if (pointsPerFacet > 0) {\n            density = density.map(function (x) { return x + pointsPerFacet; });\n        }\n        for (var index = 0; index < extraPoints; index++) {\n            density[index] += 1;\n        }\n        return density;\n    };\n    /**\n     * Adds points to the PCS in random positions within a unit sphere\n     * @param nb (positive integer) the number of particles to be created from this model\n     * @param pointFunction is an optional javascript function to be called for each particle on PCS creation\n     * @returns the number of groups in the system\n     */\n    PointsCloudSystem.prototype.addPoints = function (nb, pointFunction) {\n        if (pointFunction === void 0) { pointFunction = this._randomUnitVector; }\n        var pointsGroup = new PointsGroup(this._groupCounter, pointFunction);\n        var cp;\n        // particles\n        var idx = this.nbParticles;\n        for (var i = 0; i < nb; i++) {\n            cp = this._addParticle(idx, pointsGroup, this._groupCounter, i);\n            if (pointsGroup && pointsGroup._positionFunction) {\n                pointsGroup._positionFunction(cp, idx, i);\n            }\n            this._positions.push(cp.position.x, cp.position.y, cp.position.z);\n            if (cp.color) {\n                this._colors.push(cp.color.r, cp.color.g, cp.color.b, cp.color.a);\n            }\n            if (cp.uv) {\n                this._uvs.push(cp.uv.x, cp.uv.y);\n            }\n            idx++;\n        }\n        this.nbParticles += nb;\n        this._groupCounter++;\n        return this._groupCounter;\n    };\n    /**\n     * Adds points to the PCS from the surface of the model shape\n     * @param mesh is any Mesh object that will be used as a surface model for the points\n     * @param nb (positive integer) the number of particles to be created from this model\n     * @param colorWith determines whether a point is colored using color (default), uv, random, stated or none (invisible)\n     * @param color (color4) to be used when colorWith is stated or color (number) when used to specify texture position\n     * @param range (number from 0 to 1) to determine the variation in shape and tone for a stated color\n     * @returns the number of groups in the system\n     */\n    PointsCloudSystem.prototype.addSurfacePoints = function (mesh, nb, colorWith, color, range) {\n        var colored = colorWith ? colorWith : PointColor.Random;\n        if (isNaN(colored) || colored < 0 || colored > 3) {\n            colored = PointColor.Random;\n        }\n        var meshPos = mesh.getVerticesData(VertexBuffer.PositionKind);\n        var meshInd = mesh.getIndices();\n        this._groups.push(this._groupCounter);\n        var pointsGroup = new PointsGroup(this._groupCounter, null);\n        pointsGroup._groupDensity = this._calculateDensity(nb, meshPos, meshInd);\n        if (colored === PointColor.Color) {\n            pointsGroup._textureNb = color ? color : 0;\n        }\n        else {\n            color = color ? color : new Color4(1, 1, 1, 1);\n        }\n        switch (colored) {\n            case PointColor.Color:\n                this._colorFromTexture(mesh, pointsGroup, false);\n                break;\n            case PointColor.UV:\n                this._setPointsColorOrUV(mesh, pointsGroup, false, false, false);\n                break;\n            case PointColor.Random:\n                this._setPointsColorOrUV(mesh, pointsGroup, false);\n                break;\n            case PointColor.Stated:\n                this._setPointsColorOrUV(mesh, pointsGroup, false, undefined, undefined, color, range);\n                break;\n        }\n        this.nbParticles += nb;\n        this._groupCounter++;\n        return this._groupCounter - 1;\n    };\n    /**\n     * Adds points to the PCS inside the model shape\n     * @param mesh is any Mesh object that will be used as a surface model for the points\n     * @param nb (positive integer) the number of particles to be created from this model\n     * @param colorWith determines whether a point is colored using color (default), uv, random, stated or none (invisible)\n     * @param color (color4) to be used when colorWith is stated or color (number) when used to specify texture position\n     * @param range (number from 0 to 1) to determine the variation in shape and tone for a stated color\n     * @returns the number of groups in the system\n     */\n    PointsCloudSystem.prototype.addVolumePoints = function (mesh, nb, colorWith, color, range) {\n        var colored = colorWith ? colorWith : PointColor.Random;\n        if (isNaN(colored) || colored < 0 || colored > 3) {\n            colored = PointColor.Random;\n        }\n        var meshPos = mesh.getVerticesData(VertexBuffer.PositionKind);\n        var meshInd = mesh.getIndices();\n        this._groups.push(this._groupCounter);\n        var pointsGroup = new PointsGroup(this._groupCounter, null);\n        pointsGroup._groupDensity = this._calculateDensity(nb, meshPos, meshInd);\n        if (colored === PointColor.Color) {\n            pointsGroup._textureNb = color ? color : 0;\n        }\n        else {\n            color = color ? color : new Color4(1, 1, 1, 1);\n        }\n        switch (colored) {\n            case PointColor.Color:\n                this._colorFromTexture(mesh, pointsGroup, true);\n                break;\n            case PointColor.UV:\n                this._setPointsColorOrUV(mesh, pointsGroup, true, false, false);\n                break;\n            case PointColor.Random:\n                this._setPointsColorOrUV(mesh, pointsGroup, true);\n                break;\n            case PointColor.Stated:\n                this._setPointsColorOrUV(mesh, pointsGroup, true, undefined, undefined, color, range);\n                break;\n        }\n        this.nbParticles += nb;\n        this._groupCounter++;\n        return this._groupCounter - 1;\n    };\n    /**\n     *  Sets all the particles : this method actually really updates the mesh according to the particle positions, rotations, colors, textures, etc.\n     *  This method calls `updateParticle()` for each particle of the SPS.\n     *  For an animated SPS, it is usually called within the render loop.\n     * @param start The particle index in the particle array where to start to compute the particle property values _(default 0)_\n     * @param end The particle index in the particle array where to stop to compute the particle property values _(default nbParticle - 1)_\n     * @param update If the mesh must be finally updated on this call after all the particle computations _(default true)_\n     * @returns the PCS.\n     */\n    PointsCloudSystem.prototype.setParticles = function (start, end, update) {\n        if (start === void 0) { start = 0; }\n        if (end === void 0) { end = this.nbParticles - 1; }\n        if (update === void 0) { update = true; }\n        if (!this._updatable || !this._isReady) {\n            return this;\n        }\n        // custom beforeUpdate\n        this.beforeUpdateParticles(start, end, update);\n        var rotMatrix = TmpVectors.Matrix[0];\n        var mesh = this.mesh;\n        var colors32 = this._colors32;\n        var positions32 = this._positions32;\n        var uvs32 = this._uvs32;\n        var tempVectors = TmpVectors.Vector3;\n        var camAxisX = tempVectors[5].copyFromFloats(1.0, 0.0, 0.0);\n        var camAxisY = tempVectors[6].copyFromFloats(0.0, 1.0, 0.0);\n        var camAxisZ = tempVectors[7].copyFromFloats(0.0, 0.0, 1.0);\n        var minimum = tempVectors[8].setAll(Number.MAX_VALUE);\n        var maximum = tempVectors[9].setAll(-Number.MAX_VALUE);\n        Matrix.IdentityToRef(rotMatrix);\n        var idx = 0; // current index of the particle\n        if (this.mesh.isFacetDataEnabled) {\n            this._computeBoundingBox = true;\n        }\n        end = end >= this.nbParticles ? this.nbParticles - 1 : end;\n        if (this._computeBoundingBox) {\n            if (start != 0 || end != this.nbParticles - 1) {\n                // only some particles are updated, then use the current existing BBox basis. Note : it can only increase.\n                var boundingInfo = this.mesh.getBoundingInfo();\n                if (boundingInfo) {\n                    minimum.copyFrom(boundingInfo.minimum);\n                    maximum.copyFrom(boundingInfo.maximum);\n                }\n            }\n        }\n        idx = 0; // particle index\n        var pindex = 0; //index in positions array\n        var cindex = 0; //index in color array\n        var uindex = 0; //index in uv array\n        // particle loop\n        for (var p = start; p <= end; p++) {\n            var particle = this.particles[p];\n            idx = particle.idx;\n            pindex = 3 * idx;\n            cindex = 4 * idx;\n            uindex = 2 * idx;\n            // call to custom user function to update the particle properties\n            this.updateParticle(particle);\n            var particleRotationMatrix = particle._rotationMatrix;\n            var particlePosition = particle.position;\n            var particleGlobalPosition = particle._globalPosition;\n            if (this._computeParticleRotation) {\n                particle.getRotationMatrix(rotMatrix);\n            }\n            var particleHasParent = particle.parentId !== null;\n            if (particleHasParent) {\n                var parent_1 = this.particles[particle.parentId];\n                var parentRotationMatrix = parent_1._rotationMatrix;\n                var parentGlobalPosition = parent_1._globalPosition;\n                var rotatedY_1 = particlePosition.x * parentRotationMatrix[1] + particlePosition.y * parentRotationMatrix[4] + particlePosition.z * parentRotationMatrix[7];\n                var rotatedX_1 = particlePosition.x * parentRotationMatrix[0] + particlePosition.y * parentRotationMatrix[3] + particlePosition.z * parentRotationMatrix[6];\n                var rotatedZ_1 = particlePosition.x * parentRotationMatrix[2] + particlePosition.y * parentRotationMatrix[5] + particlePosition.z * parentRotationMatrix[8];\n                particleGlobalPosition.x = parentGlobalPosition.x + rotatedX_1;\n                particleGlobalPosition.y = parentGlobalPosition.y + rotatedY_1;\n                particleGlobalPosition.z = parentGlobalPosition.z + rotatedZ_1;\n                if (this._computeParticleRotation) {\n                    var rotMatrixValues = rotMatrix.m;\n                    particleRotationMatrix[0] =\n                        rotMatrixValues[0] * parentRotationMatrix[0] + rotMatrixValues[1] * parentRotationMatrix[3] + rotMatrixValues[2] * parentRotationMatrix[6];\n                    particleRotationMatrix[1] =\n                        rotMatrixValues[0] * parentRotationMatrix[1] + rotMatrixValues[1] * parentRotationMatrix[4] + rotMatrixValues[2] * parentRotationMatrix[7];\n                    particleRotationMatrix[2] =\n                        rotMatrixValues[0] * parentRotationMatrix[2] + rotMatrixValues[1] * parentRotationMatrix[5] + rotMatrixValues[2] * parentRotationMatrix[8];\n                    particleRotationMatrix[3] =\n                        rotMatrixValues[4] * parentRotationMatrix[0] + rotMatrixValues[5] * parentRotationMatrix[3] + rotMatrixValues[6] * parentRotationMatrix[6];\n                    particleRotationMatrix[4] =\n                        rotMatrixValues[4] * parentRotationMatrix[1] + rotMatrixValues[5] * parentRotationMatrix[4] + rotMatrixValues[6] * parentRotationMatrix[7];\n                    particleRotationMatrix[5] =\n                        rotMatrixValues[4] * parentRotationMatrix[2] + rotMatrixValues[5] * parentRotationMatrix[5] + rotMatrixValues[6] * parentRotationMatrix[8];\n                    particleRotationMatrix[6] =\n                        rotMatrixValues[8] * parentRotationMatrix[0] + rotMatrixValues[9] * parentRotationMatrix[3] + rotMatrixValues[10] * parentRotationMatrix[6];\n                    particleRotationMatrix[7] =\n                        rotMatrixValues[8] * parentRotationMatrix[1] + rotMatrixValues[9] * parentRotationMatrix[4] + rotMatrixValues[10] * parentRotationMatrix[7];\n                    particleRotationMatrix[8] =\n                        rotMatrixValues[8] * parentRotationMatrix[2] + rotMatrixValues[9] * parentRotationMatrix[5] + rotMatrixValues[10] * parentRotationMatrix[8];\n                }\n            }\n            else {\n                particleGlobalPosition.x = 0;\n                particleGlobalPosition.y = 0;\n                particleGlobalPosition.z = 0;\n                if (this._computeParticleRotation) {\n                    var rotMatrixValues = rotMatrix.m;\n                    particleRotationMatrix[0] = rotMatrixValues[0];\n                    particleRotationMatrix[1] = rotMatrixValues[1];\n                    particleRotationMatrix[2] = rotMatrixValues[2];\n                    particleRotationMatrix[3] = rotMatrixValues[4];\n                    particleRotationMatrix[4] = rotMatrixValues[5];\n                    particleRotationMatrix[5] = rotMatrixValues[6];\n                    particleRotationMatrix[6] = rotMatrixValues[8];\n                    particleRotationMatrix[7] = rotMatrixValues[9];\n                    particleRotationMatrix[8] = rotMatrixValues[10];\n                }\n            }\n            var pivotBackTranslation = tempVectors[11];\n            if (particle.translateFromPivot) {\n                pivotBackTranslation.setAll(0.0);\n            }\n            else {\n                pivotBackTranslation.copyFrom(particle.pivot);\n            }\n            // positions\n            var tmpVertex = tempVectors[0];\n            tmpVertex.copyFrom(particle.position);\n            var vertexX = tmpVertex.x - particle.pivot.x;\n            var vertexY = tmpVertex.y - particle.pivot.y;\n            var vertexZ = tmpVertex.z - particle.pivot.z;\n            var rotatedX = vertexX * particleRotationMatrix[0] + vertexY * particleRotationMatrix[3] + vertexZ * particleRotationMatrix[6];\n            var rotatedY = vertexX * particleRotationMatrix[1] + vertexY * particleRotationMatrix[4] + vertexZ * particleRotationMatrix[7];\n            var rotatedZ = vertexX * particleRotationMatrix[2] + vertexY * particleRotationMatrix[5] + vertexZ * particleRotationMatrix[8];\n            rotatedX += pivotBackTranslation.x;\n            rotatedY += pivotBackTranslation.y;\n            rotatedZ += pivotBackTranslation.z;\n            var px = (positions32[pindex] = particleGlobalPosition.x + camAxisX.x * rotatedX + camAxisY.x * rotatedY + camAxisZ.x * rotatedZ);\n            var py = (positions32[pindex + 1] = particleGlobalPosition.y + camAxisX.y * rotatedX + camAxisY.y * rotatedY + camAxisZ.y * rotatedZ);\n            var pz = (positions32[pindex + 2] = particleGlobalPosition.z + camAxisX.z * rotatedX + camAxisY.z * rotatedY + camAxisZ.z * rotatedZ);\n            if (this._computeBoundingBox) {\n                minimum.minimizeInPlaceFromFloats(px, py, pz);\n                maximum.maximizeInPlaceFromFloats(px, py, pz);\n            }\n            if (this._computeParticleColor && particle.color) {\n                var color = particle.color;\n                var colors32_1 = this._colors32;\n                colors32_1[cindex] = color.r;\n                colors32_1[cindex + 1] = color.g;\n                colors32_1[cindex + 2] = color.b;\n                colors32_1[cindex + 3] = color.a;\n            }\n            if (this._computeParticleTexture && particle.uv) {\n                var uv = particle.uv;\n                var uvs32_1 = this._uvs32;\n                uvs32_1[uindex] = uv.x;\n                uvs32_1[uindex + 1] = uv.y;\n            }\n        }\n        // if the VBO must be updated\n        if (update) {\n            if (this._computeParticleColor) {\n                mesh.updateVerticesData(VertexBuffer.ColorKind, colors32, false, false);\n            }\n            if (this._computeParticleTexture) {\n                mesh.updateVerticesData(VertexBuffer.UVKind, uvs32, false, false);\n            }\n            mesh.updateVerticesData(VertexBuffer.PositionKind, positions32, false, false);\n        }\n        if (this._computeBoundingBox) {\n            if (mesh.hasBoundingInfo) {\n                mesh.getBoundingInfo().reConstruct(minimum, maximum, mesh._worldMatrix);\n            }\n            else {\n                mesh.buildBoundingInfo(minimum, maximum, mesh._worldMatrix);\n            }\n        }\n        this.afterUpdateParticles(start, end, update);\n        return this;\n    };\n    /**\n     * Disposes the PCS.\n     */\n    PointsCloudSystem.prototype.dispose = function () {\n        this.mesh.dispose();\n        this.vars = null;\n        // drop references to internal big arrays for the GC\n        this._positions = null;\n        this._indices = null;\n        this._normals = null;\n        this._uvs = null;\n        this._colors = null;\n        this._indices32 = null;\n        this._positions32 = null;\n        this._uvs32 = null;\n        this._colors32 = null;\n    };\n    /**\n     * Visibility helper : Recomputes the visible size according to the mesh bounding box\n     * doc :\n     * @returns the PCS.\n     */\n    PointsCloudSystem.prototype.refreshVisibleSize = function () {\n        if (!this._isVisibilityBoxLocked) {\n            this.mesh.refreshBoundingInfo();\n        }\n        return this;\n    };\n    /**\n     * Visibility helper : Sets the size of a visibility box, this sets the underlying mesh bounding box.\n     * @param size the size (float) of the visibility box\n     * note : this doesn't lock the PCS mesh bounding box.\n     * doc :\n     */\n    PointsCloudSystem.prototype.setVisibilityBox = function (size) {\n        var vis = size / 2;\n        this.mesh.buildBoundingInfo(new Vector3(-vis, -vis, -vis), new Vector3(vis, vis, vis));\n    };\n    Object.defineProperty(PointsCloudSystem.prototype, \"isAlwaysVisible\", {\n        /**\n         * Gets whether the PCS is always visible or not\n         * doc :\n         */\n        get: function () {\n            return this._alwaysVisible;\n        },\n        /**\n         * Sets the PCS as always visible or not\n         * doc :\n         */\n        set: function (val) {\n            this._alwaysVisible = val;\n            this.mesh.alwaysSelectAsActiveMesh = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PointsCloudSystem.prototype, \"computeParticleRotation\", {\n        /**\n         * Tells to `setParticles()` to compute the particle rotations or not\n         * Default value : false. The PCS is faster when it's set to false\n         * Note : particle rotations are only applied to parent particles\n         * Note : the particle rotations aren't stored values, so setting `computeParticleRotation` to false will prevents the particle to rotate\n         */\n        set: function (val) {\n            this._computeParticleRotation = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PointsCloudSystem.prototype, \"computeParticleColor\", {\n        /**\n         * Gets if `setParticles()` computes the particle colors or not.\n         * Default value : false. The PCS is faster when it's set to false.\n         * Note : the particle colors are stored values, so setting `computeParticleColor` to false will keep yet the last colors set.\n         */\n        get: function () {\n            return this._computeParticleColor;\n        },\n        /**\n         * Tells to `setParticles()` to compute the particle colors or not.\n         * Default value : true. The PCS is faster when it's set to false.\n         * Note : the particle colors are stored values, so setting `computeParticleColor` to false will keep yet the last colors set.\n         */\n        set: function (val) {\n            this._computeParticleColor = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PointsCloudSystem.prototype, \"computeParticleTexture\", {\n        /**\n         * Gets if `setParticles()` computes the particle textures or not.\n         * Default value : false. The PCS is faster when it's set to false.\n         * Note : the particle textures are stored values, so setting `computeParticleTexture` to false will keep yet the last colors set.\n         */\n        get: function () {\n            return this._computeParticleTexture;\n        },\n        set: function (val) {\n            this._computeParticleTexture = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PointsCloudSystem.prototype, \"computeBoundingBox\", {\n        /**\n         * Gets if `setParticles()` computes or not the mesh bounding box when computing the particle positions.\n         */\n        get: function () {\n            return this._computeBoundingBox;\n        },\n        /**\n         * Tells to `setParticles()` to compute or not the mesh bounding box when computing the particle positions.\n         */\n        set: function (val) {\n            this._computeBoundingBox = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // =======================================================================\n    // Particle behavior logic\n    // these following methods may be overwritten by users to fit their needs\n    /**\n     * This function does nothing. It may be overwritten to set all the particle first values.\n     * The PCS doesn't call this function, you may have to call it by your own.\n     * doc :\n     */\n    PointsCloudSystem.prototype.initParticles = function () { };\n    /**\n     * This function does nothing. It may be overwritten to recycle a particle\n     * The PCS doesn't call this function, you can to call it\n     * doc :\n     * @param particle The particle to recycle\n     * @returns the recycled particle\n     */\n    PointsCloudSystem.prototype.recycleParticle = function (particle) {\n        return particle;\n    };\n    /**\n     * Updates a particle : this function should  be overwritten by the user.\n     * It is called on each particle by `setParticles()`. This is the place to code each particle behavior.\n     * doc :\n     * @example : just set a particle position or velocity and recycle conditions\n     * @param particle The particle to update\n     * @returns the updated particle\n     */\n    PointsCloudSystem.prototype.updateParticle = function (particle) {\n        return particle;\n    };\n    /**\n     * This will be called before any other treatment by `setParticles()` and will be passed three parameters.\n     * This does nothing and may be overwritten by the user.\n     * @param start the particle index in the particle array where to start to iterate, same than the value passed to setParticle()\n     * @param stop the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\n     * @param update the boolean update value actually passed to setParticles()\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    PointsCloudSystem.prototype.beforeUpdateParticles = function (start, stop, update) { };\n    /**\n     * This will be called  by `setParticles()` after all the other treatments and just before the actual mesh update.\n     * This will be passed three parameters.\n     * This does nothing and may be overwritten by the user.\n     * @param start the particle index in the particle array where to start to iterate, same than the value passed to setParticle()\n     * @param stop the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\n     * @param update the boolean update value actually passed to setParticles()\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    PointsCloudSystem.prototype.afterUpdateParticles = function (start, stop, update) { };\n    return PointsCloudSystem;\n}());\nexport { PointsCloudSystem };\n//# sourceMappingURL=pointsCloudSystem.js.map","import { Vector3, TmpVectors, Quaternion, Vector4, Vector2 } from \"../Maths/math.vector.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { BoundingInfo } from \"../Culling/boundingInfo.js\";\nimport { BoundingSphere } from \"../Culling/boundingSphere.js\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh.js\";\n/**\n * Represents one particle of a solid particle system.\n */\nvar SolidParticle = /** @class */ (function () {\n    /**\n     * Creates a Solid Particle object.\n     * Don't create particles manually, use instead the Solid Particle System internal tools like _addParticle()\n     * @param particleIndex (integer) is the particle index in the Solid Particle System pool.\n     * @param particleId (integer) is the particle identifier. Unless some particles are removed from the SPS, it's the same value than the particle idx.\n     * @param positionIndex (integer) is the starting index of the particle vertices in the SPS \"positions\" array.\n     * @param indiceIndex (integer) is the starting index of the particle indices in the SPS \"indices\" array.\n     * @param model (ModelShape) is a reference to the model shape on what the particle is designed.\n     * @param shapeId (integer) is the model shape identifier in the SPS.\n     * @param idxInShape (integer) is the index of the particle in the current model (ex: the 10th box of addShape(box, 30))\n     * @param sps defines the sps it is associated to\n     * @param modelBoundingInfo is the reference to the model BoundingInfo used for intersection computations.\n     * @param materialIndex is the particle material identifier (integer) when the MultiMaterials are enabled in the SPS.\n     */\n    function SolidParticle(particleIndex, particleId, positionIndex, indiceIndex, model, shapeId, idxInShape, sps, modelBoundingInfo, materialIndex) {\n        if (modelBoundingInfo === void 0) { modelBoundingInfo = null; }\n        if (materialIndex === void 0) { materialIndex = null; }\n        /**\n         * particle global index\n         */\n        this.idx = 0;\n        /**\n         * particle identifier\n         */\n        this.id = 0;\n        /**\n         * The color of the particle\n         */\n        this.color = new Color4(1.0, 1.0, 1.0, 1.0);\n        /**\n         * The world space position of the particle.\n         */\n        this.position = Vector3.Zero();\n        /**\n         * The world space rotation of the particle. (Not use if rotationQuaternion is set)\n         */\n        this.rotation = Vector3.Zero();\n        /**\n         * The scaling of the particle.\n         */\n        this.scaling = Vector3.One();\n        /**\n         * The uvs of the particle.\n         */\n        this.uvs = new Vector4(0.0, 0.0, 1.0, 1.0);\n        /**\n         * The current speed of the particle.\n         */\n        this.velocity = Vector3.Zero();\n        /**\n         * The pivot point in the particle local space.\n         */\n        this.pivot = Vector3.Zero();\n        /**\n         * Must the particle be translated from its pivot point in its local space ?\n         * In this case, the pivot point is set at the origin of the particle local space and the particle is translated.\n         * Default : false\n         */\n        this.translateFromPivot = false;\n        /**\n         * Is the particle active or not ?\n         */\n        this.alive = true;\n        /**\n         * Is the particle visible or not ?\n         */\n        this.isVisible = true;\n        /**\n         * Index of this particle in the global \"positions\" array (Internal use)\n         * @hidden\n         */\n        this._pos = 0;\n        /**\n         * @hidden Index of this particle in the global \"indices\" array (Internal use)\n         */\n        this._ind = 0;\n        /**\n         * ModelShape id of this particle\n         */\n        this.shapeId = 0;\n        /**\n         * Index of the particle in its shape id\n         */\n        this.idxInShape = 0;\n        /**\n         * @hidden Still set as invisible in order to skip useless computations (Internal use)\n         */\n        this._stillInvisible = false;\n        /**\n         * @hidden Last computed particle rotation matrix\n         */\n        this._rotationMatrix = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];\n        /**\n         * Parent particle Id, if any.\n         * Default null.\n         */\n        this.parentId = null;\n        /**\n         * The particle material identifier (integer) when MultiMaterials are enabled in the SPS.\n         */\n        this.materialIndex = null;\n        /**\n         * Custom object or properties.\n         */\n        this.props = null;\n        /**\n         * The culling strategy to use to check whether the solid particle must be culled or not when using isInFrustum().\n         * The possible values are :\n         * - AbstractMesh.CULLINGSTRATEGY_STANDARD\n         * - AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY\n         * - AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION\n         * - AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY\n         * The default value for solid particles is AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY\n         * Please read each static variable documentation in the class AbstractMesh to get details about the culling process.\n         * */\n        this.cullingStrategy = AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY;\n        /**\n         * @hidden Internal global position in the SPS.\n         */\n        this._globalPosition = Vector3.Zero();\n        this.idx = particleIndex;\n        this.id = particleId;\n        this._pos = positionIndex;\n        this._ind = indiceIndex;\n        this._model = model;\n        this.shapeId = shapeId;\n        this.idxInShape = idxInShape;\n        this._sps = sps;\n        if (modelBoundingInfo) {\n            this._modelBoundingInfo = modelBoundingInfo;\n            this._boundingInfo = new BoundingInfo(modelBoundingInfo.minimum, modelBoundingInfo.maximum);\n        }\n        if (materialIndex !== null) {\n            this.materialIndex = materialIndex;\n        }\n    }\n    /**\n     * Particle BoundingInfo object\n     * @returns a BoundingInfo\n     */\n    SolidParticle.prototype.getBoundingInfo = function () {\n        return this._boundingInfo;\n    };\n    Object.defineProperty(SolidParticle.prototype, \"hasBoundingInfo\", {\n        /**\n         * Returns true if there is already a bounding info\n         */\n        get: function () {\n            return this._boundingInfo !== null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Copies the particle property values into the existing target : position, rotation, scaling, uvs, colors, pivot, parent, visibility, alive\n     * @param target the particle target\n     * @returns the current particle\n     */\n    SolidParticle.prototype.copyToRef = function (target) {\n        target.position.copyFrom(this.position);\n        target.rotation.copyFrom(this.rotation);\n        if (this.rotationQuaternion) {\n            if (target.rotationQuaternion) {\n                target.rotationQuaternion.copyFrom(this.rotationQuaternion);\n            }\n            else {\n                target.rotationQuaternion = this.rotationQuaternion.clone();\n            }\n        }\n        target.scaling.copyFrom(this.scaling);\n        if (this.color) {\n            if (target.color) {\n                target.color.copyFrom(this.color);\n            }\n            else {\n                target.color = this.color.clone();\n            }\n        }\n        target.uvs.copyFrom(this.uvs);\n        target.velocity.copyFrom(this.velocity);\n        target.pivot.copyFrom(this.pivot);\n        target.translateFromPivot = this.translateFromPivot;\n        target.alive = this.alive;\n        target.isVisible = this.isVisible;\n        target.parentId = this.parentId;\n        target.cullingStrategy = this.cullingStrategy;\n        if (this.materialIndex !== null) {\n            target.materialIndex = this.materialIndex;\n        }\n        return this;\n    };\n    Object.defineProperty(SolidParticle.prototype, \"scale\", {\n        /**\n         * Legacy support, changed scale to scaling\n         */\n        get: function () {\n            return this.scaling;\n        },\n        /**\n         * Legacy support, changed scale to scaling\n         */\n        set: function (scale) {\n            this.scaling = scale;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SolidParticle.prototype, \"quaternion\", {\n        /**\n         * Legacy support, changed quaternion to rotationQuaternion\n         */\n        get: function () {\n            return this.rotationQuaternion;\n        },\n        /**\n         * Legacy support, changed quaternion to rotationQuaternion\n         */\n        set: function (q) {\n            this.rotationQuaternion = q;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns a boolean. True if the particle intersects another particle or another mesh, else false.\n     * The intersection is computed on the particle bounding sphere and Axis Aligned Bounding Box (AABB)\n     * @param target is the object (solid particle or mesh) what the intersection is computed against.\n     * @returns true if it intersects\n     */\n    SolidParticle.prototype.intersectsMesh = function (target) {\n        if (!this._boundingInfo || !target.hasBoundingInfo) {\n            return false;\n        }\n        if (this._sps._bSphereOnly) {\n            return BoundingSphere.Intersects(this._boundingInfo.boundingSphere, target.getBoundingInfo().boundingSphere);\n        }\n        return this._boundingInfo.intersects(target.getBoundingInfo(), false);\n    };\n    /**\n     * Returns `true` if the solid particle is within the frustum defined by the passed array of planes.\n     * A particle is in the frustum if its bounding box intersects the frustum\n     * @param frustumPlanes defines the frustum to test\n     * @returns true if the particle is in the frustum planes\n     */\n    SolidParticle.prototype.isInFrustum = function (frustumPlanes) {\n        return this._boundingInfo !== null && this._boundingInfo.isInFrustum(frustumPlanes, this.cullingStrategy);\n    };\n    /**\n     * get the rotation matrix of the particle\n     * @param m\n     * @hidden\n     */\n    SolidParticle.prototype.getRotationMatrix = function (m) {\n        var quaternion;\n        if (this.rotationQuaternion) {\n            quaternion = this.rotationQuaternion;\n        }\n        else {\n            quaternion = TmpVectors.Quaternion[0];\n            var rotation = this.rotation;\n            Quaternion.RotationYawPitchRollToRef(rotation.y, rotation.x, rotation.z, quaternion);\n        }\n        quaternion.toRotationMatrix(m);\n    };\n    return SolidParticle;\n}());\nexport { SolidParticle };\n/**\n * Represents the shape of the model used by one particle of a solid particle system.\n * SPS internal tool, don't use it manually.\n */\nvar ModelShape = /** @class */ (function () {\n    /**\n     * Creates a ModelShape object. This is an internal simplified reference to a mesh used as for a model to replicate particles from by the SPS.\n     * SPS internal tool, don't use it manually.\n     * @param id\n     * @param shape\n     * @param indices\n     * @param normals\n     * @param colors\n     * @param shapeUV\n     * @param posFunction\n     * @param vtxFunction\n     * @param material\n     * @hidden\n     */\n    function ModelShape(id, shape, indices, normals, colors, shapeUV, posFunction, vtxFunction, material) {\n        /**\n         * length of the shape in the model indices array (internal use)\n         * @hidden\n         */\n        this._indicesLength = 0;\n        this.shapeId = id;\n        this._shape = shape;\n        this._indices = indices;\n        this._indicesLength = indices.length;\n        this._shapeUV = shapeUV;\n        this._shapeColors = colors;\n        this._normals = normals;\n        this._positionFunction = posFunction;\n        this._vertexFunction = vtxFunction;\n        this._material = material;\n    }\n    Object.defineProperty(ModelShape.prototype, \"shapeID\", {\n        /**\n         * Get or set the shapeId\n         * @deprecated Please use shapeId instead\n         */\n        get: function () {\n            return this.shapeId;\n        },\n        set: function (shapeID) {\n            this.shapeId = shapeID;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ModelShape;\n}());\nexport { ModelShape };\n/**\n * Represents a Depth Sorted Particle in the solid particle system.\n * @hidden\n */\nvar DepthSortedParticle = /** @class */ (function () {\n    /**\n     * Creates a new sorted particle\n     * @param idx\n     * @param ind\n     * @param indLength\n     * @param materialIndex\n     */\n    function DepthSortedParticle(idx, ind, indLength, materialIndex) {\n        /**\n         * Particle index\n         */\n        this.idx = 0;\n        /**\n         * Index of the particle in the \"indices\" array\n         */\n        this.ind = 0;\n        /**\n         * Length of the particle shape in the \"indices\" array\n         */\n        this.indicesLength = 0;\n        /**\n         * Squared distance from the particle to the camera\n         */\n        this.sqDistance = 0.0;\n        /**\n         * Material index when used with MultiMaterials\n         */\n        this.materialIndex = 0;\n        this.idx = idx;\n        this.ind = ind;\n        this.indicesLength = indLength;\n        this.materialIndex = materialIndex;\n    }\n    return DepthSortedParticle;\n}());\nexport { DepthSortedParticle };\n/**\n * Represents a solid particle vertex\n */\nvar SolidParticleVertex = /** @class */ (function () {\n    /**\n     * Creates a new solid particle vertex\n     */\n    function SolidParticleVertex() {\n        this.position = Vector3.Zero();\n        this.color = new Color4(1.0, 1.0, 1.0, 1.0);\n        this.uv = Vector2.Zero();\n    }\n    Object.defineProperty(SolidParticleVertex.prototype, \"x\", {\n        // Getters and Setters for back-compatibility\n        /** Vertex x coordinate */\n        get: function () {\n            return this.position.x;\n        },\n        set: function (val) {\n            this.position.x = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SolidParticleVertex.prototype, \"y\", {\n        /** Vertex y coordinate */\n        get: function () {\n            return this.position.y;\n        },\n        set: function (val) {\n            this.position.y = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SolidParticleVertex.prototype, \"z\", {\n        /** Vertex z coordinate */\n        get: function () {\n            return this.position.z;\n        },\n        set: function (val) {\n            this.position.z = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return SolidParticleVertex;\n}());\nexport { SolidParticleVertex };\n//# sourceMappingURL=solidParticle.js.map","import { Vector3, Matrix, TmpVectors, Quaternion } from \"../Maths/math.vector.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { VertexData } from \"../Meshes/mesh.vertexData.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { CreateDisc } from \"../Meshes/Builders/discBuilder.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { DepthSortedParticle, SolidParticle, ModelShape, SolidParticleVertex } from \"./solidParticle.js\";\nimport { BoundingInfo } from \"../Culling/boundingInfo.js\";\nimport { Axis } from \"../Maths/math.axis.js\";\nimport { SubMesh } from \"../Meshes/subMesh.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { MultiMaterial } from \"../Materials/multiMaterial.js\";\n/**\n * The SPS is a single updatable mesh. The solid particles are simply separate parts or faces fo this big mesh.\n *As it is just a mesh, the SPS has all the same properties than any other BJS mesh : not more, not less. It can be scaled, rotated, translated, enlighted, textured, moved, etc.\n\n * The SPS is also a particle system. It provides some methods to manage the particles.\n * However it is behavior agnostic. This means it has no emitter, no particle physics, no particle recycler. You have to implement your own behavior.\n *\n * Full documentation here : https://doc.babylonjs.com/how_to/Solid_Particle_System\n */\nvar SolidParticleSystem = /** @class */ (function () {\n    /**\n     * Creates a SPS (Solid Particle System) object.\n     * @param name (String) is the SPS name, this will be the underlying mesh name.\n     * @param scene (Scene) is the scene in which the SPS is added.\n     * @param options defines the options of the sps e.g.\n     * * updatable (optional boolean, default true) : if the SPS must be updatable or immutable.\n     * * isPickable (optional boolean, default false) : if the solid particles must be pickable.\n     * * enableDepthSort (optional boolean, default false) : if the solid particles must be sorted in the geometry according to their distance to the camera.\n     * * useModelMaterial (optional boolean, default false) : if the model materials must be used to create the SPS multimaterial. This enables the multimaterial supports of the SPS.\n     * * enableMultiMaterial (optional boolean, default false) : if the solid particles can be given different materials.\n     * * expandable (optional boolean, default false) : if particles can still be added after the initial SPS mesh creation.\n     * * particleIntersection (optional boolean, default false) : if the solid particle intersections must be computed.\n     * * boundingSphereOnly (optional boolean, default false) : if the particle intersection must be computed only with the bounding sphere (no bounding box computation, so faster).\n     * * bSphereRadiusFactor (optional float, default 1.0) : a number to multiply the bounding sphere radius by in order to reduce it for instance.\n     * @param options.updatable\n     * @param options.isPickable\n     * @param options.enableDepthSort\n     * @param options.particleIntersection\n     * @param options.boundingSphereOnly\n     * @param options.bSphereRadiusFactor\n     * @param options.expandable\n     * @param options.useModelMaterial\n     * @param options.enableMultiMaterial\n     * @example bSphereRadiusFactor = 1.0 / Math.sqrt(3.0) => the bounding sphere exactly matches a spherical mesh.\n     */\n    function SolidParticleSystem(name, scene, options) {\n        /**\n         *  The SPS array of Solid Particle objects. Just access each particle as with any classic array.\n         *  Example : var p = SPS.particles[i];\n         */\n        this.particles = new Array();\n        /**\n         * The SPS total number of particles. Read only. Use SPS.counter instead if you need to set your own value.\n         */\n        this.nbParticles = 0;\n        /**\n         * If the particles must ever face the camera (default false). Useful for planar particles.\n         */\n        this.billboard = false;\n        /**\n         * Recompute normals when adding a shape\n         */\n        this.recomputeNormals = false;\n        /**\n         * This a counter ofr your own usage. It's not set by any SPS functions.\n         */\n        this.counter = 0;\n        /**\n         * This empty object is intended to store some SPS specific or temporary values in order to lower the Garbage Collector activity.\n         * Please read : https://doc.babylonjs.com/how_to/Solid_Particle_System#garbage-collector-concerns\n         */\n        this.vars = {};\n        /**\n         * If the particle intersection must be computed only with the bounding sphere (no bounding box computation, so faster). (Internal use only)\n         * @hidden\n         */\n        this._bSphereOnly = false;\n        /**\n         * A number to multiply the bounding sphere radius by in order to reduce it for instance. (Internal use only)\n         * @hidden\n         */\n        this._bSphereRadiusFactor = 1.0;\n        this._positions = new Array();\n        this._indices = new Array();\n        this._normals = new Array();\n        this._colors = new Array();\n        this._uvs = new Array();\n        this._index = 0; // indices index\n        this._updatable = true;\n        this._pickable = false;\n        this._isVisibilityBoxLocked = false;\n        this._alwaysVisible = false;\n        this._depthSort = false;\n        this._expandable = false;\n        this._shapeCounter = 0;\n        this._copy = new SolidParticle(0, 0, 0, 0, null, 0, 0, this);\n        this._color = new Color4(0, 0, 0, 0);\n        this._computeParticleColor = true;\n        this._computeParticleTexture = true;\n        this._computeParticleRotation = true;\n        this._computeParticleVertex = false;\n        this._computeBoundingBox = false;\n        this._depthSortParticles = true;\n        this._mustUnrotateFixedNormals = false;\n        this._particlesIntersect = false;\n        this._needs32Bits = false;\n        this._isNotBuilt = true;\n        this._lastParticleId = 0;\n        this._idxOfId = []; // array : key = particle.id / value = particle.idx\n        this._multimaterialEnabled = false;\n        this._useModelMaterial = false;\n        this._depthSortFunction = function (p1, p2) { return p2.sqDistance - p1.sqDistance; };\n        this._materialSortFunction = function (p1, p2) { return p1.materialIndex - p2.materialIndex; };\n        this._autoUpdateSubMeshes = false;\n        this.name = name;\n        this._scene = scene || EngineStore.LastCreatedScene;\n        this._camera = scene.activeCamera;\n        this._pickable = options ? options.isPickable : false;\n        this._depthSort = options ? options.enableDepthSort : false;\n        this._multimaterialEnabled = options ? options.enableMultiMaterial : false;\n        this._useModelMaterial = options ? options.useModelMaterial : false;\n        this._multimaterialEnabled = this._useModelMaterial ? true : this._multimaterialEnabled;\n        this._expandable = options ? options.expandable : false;\n        this._particlesIntersect = options ? options.particleIntersection : false;\n        this._bSphereOnly = options ? options.boundingSphereOnly : false;\n        this._bSphereRadiusFactor = options && options.bSphereRadiusFactor ? options.bSphereRadiusFactor : 1.0;\n        if (options && options.updatable !== undefined) {\n            this._updatable = options.updatable;\n        }\n        else {\n            this._updatable = true;\n        }\n        if (this._pickable) {\n            this.pickedBySubMesh = [[]];\n            this.pickedParticles = this.pickedBySubMesh[0];\n        }\n        if (this._depthSort || this._multimaterialEnabled) {\n            this.depthSortedParticles = [];\n        }\n        if (this._multimaterialEnabled) {\n            this._multimaterial = new MultiMaterial(this.name + \"MultiMaterial\", this._scene);\n            this._materials = [];\n            this._materialIndexesById = {};\n        }\n        this._tmpVertex = new SolidParticleVertex();\n    }\n    /**\n     * Builds the SPS underlying mesh. Returns a standard Mesh.\n     * If no model shape was added to the SPS, the returned mesh is just a single triangular plane.\n     * @returns the created mesh\n     */\n    SolidParticleSystem.prototype.buildMesh = function () {\n        if (!this._isNotBuilt && this.mesh) {\n            return this.mesh;\n        }\n        if (this.nbParticles === 0 && !this.mesh) {\n            var triangle = CreateDisc(\"\", { radius: 1, tessellation: 3 }, this._scene);\n            this.addShape(triangle, 1);\n            triangle.dispose();\n        }\n        this._indices32 = this._needs32Bits ? new Uint32Array(this._indices) : new Uint16Array(this._indices);\n        this._positions32 = new Float32Array(this._positions);\n        this._uvs32 = new Float32Array(this._uvs);\n        this._colors32 = new Float32Array(this._colors);\n        if (!this.mesh) {\n            // in case it's already expanded\n            var mesh = new Mesh(this.name, this._scene);\n            this.mesh = mesh;\n        }\n        if (!this._updatable && this._multimaterialEnabled) {\n            this._sortParticlesByMaterial(); // this may reorder the indices32\n        }\n        if (this.recomputeNormals) {\n            VertexData.ComputeNormals(this._positions32, this._indices32, this._normals);\n        }\n        this._normals32 = new Float32Array(this._normals);\n        this._fixedNormal32 = new Float32Array(this._normals);\n        if (this._mustUnrotateFixedNormals) {\n            // the particles could be created already rotated in the mesh with a positionFunction\n            this._unrotateFixedNormals();\n        }\n        var vertexData = new VertexData();\n        vertexData.indices = this._depthSort ? this._indices : this._indices32;\n        vertexData.set(this._positions32, VertexBuffer.PositionKind);\n        vertexData.set(this._normals32, VertexBuffer.NormalKind);\n        if (this._uvs32.length > 0) {\n            vertexData.set(this._uvs32, VertexBuffer.UVKind);\n        }\n        if (this._colors32.length > 0) {\n            vertexData.set(this._colors32, VertexBuffer.ColorKind);\n        }\n        vertexData.applyToMesh(this.mesh, this._updatable);\n        this.mesh.isPickable = this._pickable;\n        if (this._pickable) {\n            var faceId = 0;\n            for (var p = 0; p < this.nbParticles; p++) {\n                var part = this.particles[p];\n                var lind = part._model._indicesLength;\n                for (var i = 0; i < lind; i++) {\n                    var f = i % 3;\n                    if (f == 0) {\n                        var pickedData = { idx: part.idx, faceId: faceId };\n                        this.pickedParticles[faceId] = pickedData;\n                        faceId++;\n                    }\n                }\n            }\n        }\n        if (this._multimaterialEnabled) {\n            this.setMultiMaterial(this._materials);\n        }\n        if (!this._expandable) {\n            // free memory\n            if (!this._depthSort && !this._multimaterialEnabled) {\n                this._indices = null;\n            }\n            this._positions = null;\n            this._normals = null;\n            this._uvs = null;\n            this._colors = null;\n            if (!this._updatable) {\n                this.particles.length = 0;\n            }\n        }\n        this._isNotBuilt = false;\n        this.recomputeNormals = false;\n        return this.mesh;\n    };\n    /**\n     * Digests the mesh and generates as many solid particles in the system as wanted. Returns the SPS.\n     * These particles will have the same geometry than the mesh parts and will be positioned at the same localisation than the mesh original places.\n     * Thus the particles generated from `digest()` have their property `position` set yet.\n     * @param mesh ( Mesh ) is the mesh to be digested\n     * @param options {facetNb} (optional integer, default 1) is the number of mesh facets per particle, this parameter is overridden by the parameter `number` if any\n     * {delta} (optional integer, default 0) is the random extra number of facets per particle , each particle will have between `facetNb` and `facetNb + delta` facets\n     * {number} (optional positive integer) is the wanted number of particles : each particle is built with `mesh_total_facets / number` facets\n     * {storage} (optional existing array) is an array where the particles will be stored for a further use instead of being inserted in the SPS.\n     * @param options.facetNb\n     * @param options.number\n     * @param options.delta\n     * @param options.storage\n     * @returns the current SPS\n     */\n    SolidParticleSystem.prototype.digest = function (mesh, options) {\n        var size = (options && options.facetNb) || 1;\n        var number = (options && options.number) || 0;\n        var delta = (options && options.delta) || 0;\n        var meshPos = mesh.getVerticesData(VertexBuffer.PositionKind);\n        var meshInd = mesh.getIndices();\n        var meshUV = mesh.getVerticesData(VertexBuffer.UVKind);\n        var meshCol = mesh.getVerticesData(VertexBuffer.ColorKind);\n        var meshNor = mesh.getVerticesData(VertexBuffer.NormalKind);\n        var storage = options && options.storage ? options.storage : null;\n        var f = 0; // facet counter\n        var totalFacets = meshInd.length / 3; // a facet is a triangle, so 3 indices\n        // compute size from number\n        if (number) {\n            number = number > totalFacets ? totalFacets : number;\n            size = Math.round(totalFacets / number);\n            delta = 0;\n        }\n        else {\n            size = size > totalFacets ? totalFacets : size;\n        }\n        var facetPos = []; // submesh positions\n        var facetNor = [];\n        var facetInd = []; // submesh indices\n        var facetUV = []; // submesh UV\n        var facetCol = []; // submesh colors\n        var barycenter = Vector3.Zero();\n        var sizeO = size;\n        while (f < totalFacets) {\n            size = sizeO + Math.floor((1 + delta) * Math.random());\n            if (f > totalFacets - size) {\n                size = totalFacets - f;\n            }\n            // reset temp arrays\n            facetPos.length = 0;\n            facetNor.length = 0;\n            facetInd.length = 0;\n            facetUV.length = 0;\n            facetCol.length = 0;\n            // iterate over \"size\" facets\n            var fi = 0;\n            for (var j = f * 3; j < (f + size) * 3; j++) {\n                facetInd.push(fi);\n                var i = meshInd[j];\n                var i3 = i * 3;\n                facetPos.push(meshPos[i3], meshPos[i3 + 1], meshPos[i3 + 2]);\n                facetNor.push(meshNor[i3], meshNor[i3 + 1], meshNor[i3 + 2]);\n                if (meshUV) {\n                    var i2 = i * 2;\n                    facetUV.push(meshUV[i2], meshUV[i2 + 1]);\n                }\n                if (meshCol) {\n                    var i4 = i * 4;\n                    facetCol.push(meshCol[i4], meshCol[i4 + 1], meshCol[i4 + 2], meshCol[i4 + 3]);\n                }\n                fi++;\n            }\n            // create a model shape for each single particle\n            var idx = this.nbParticles;\n            var shape = this._posToShape(facetPos);\n            var shapeUV = this._uvsToShapeUV(facetUV);\n            var shapeInd = facetInd.slice();\n            var shapeCol = facetCol.slice();\n            var shapeNor = facetNor.slice();\n            // compute the barycenter of the shape\n            barycenter.copyFromFloats(0, 0, 0);\n            var v = void 0;\n            for (v = 0; v < shape.length; v++) {\n                barycenter.addInPlace(shape[v]);\n            }\n            barycenter.scaleInPlace(1 / shape.length);\n            // shift the shape from its barycenter to the origin\n            // and compute the BBox required for intersection.\n            var minimum = new Vector3(Infinity, Infinity, Infinity);\n            var maximum = new Vector3(-Infinity, -Infinity, -Infinity);\n            for (v = 0; v < shape.length; v++) {\n                shape[v].subtractInPlace(barycenter);\n                minimum.minimizeInPlaceFromFloats(shape[v].x, shape[v].y, shape[v].z);\n                maximum.maximizeInPlaceFromFloats(shape[v].x, shape[v].y, shape[v].z);\n            }\n            var bInfo = void 0;\n            if (this._particlesIntersect) {\n                bInfo = new BoundingInfo(minimum, maximum);\n            }\n            var material = null;\n            if (this._useModelMaterial) {\n                material = mesh.material ? mesh.material : this._setDefaultMaterial();\n            }\n            var modelShape = new ModelShape(this._shapeCounter, shape, shapeInd, shapeNor, shapeCol, shapeUV, null, null, material);\n            // add the particle in the SPS\n            var currentPos = this._positions.length;\n            var currentInd = this._indices.length;\n            this._meshBuilder(this._index, currentInd, shape, this._positions, shapeInd, this._indices, facetUV, this._uvs, shapeCol, this._colors, shapeNor, this._normals, idx, 0, null, modelShape);\n            this._addParticle(idx, this._lastParticleId, currentPos, currentInd, modelShape, this._shapeCounter, 0, bInfo, storage);\n            // initialize the particle position\n            this.particles[this.nbParticles].position.addInPlace(barycenter);\n            if (!storage) {\n                this._index += shape.length;\n                idx++;\n                this.nbParticles++;\n                this._lastParticleId++;\n            }\n            this._shapeCounter++;\n            f += size;\n        }\n        this._isNotBuilt = true; // buildMesh() is now expected for setParticles() to work\n        return this;\n    };\n    /**\n     * Unrotate the fixed normals in case the mesh was built with pre-rotated particles, ex : use of positionFunction in addShape()\n     * @hidden\n     */\n    SolidParticleSystem.prototype._unrotateFixedNormals = function () {\n        var index = 0;\n        var idx = 0;\n        var tmpNormal = TmpVectors.Vector3[0];\n        var quaternion = TmpVectors.Quaternion[0];\n        var invertedRotMatrix = TmpVectors.Matrix[0];\n        for (var p = 0; p < this.particles.length; p++) {\n            var particle = this.particles[p];\n            var shape = particle._model._shape;\n            // computing the inverse of the rotation matrix from the quaternion\n            // is equivalent to computing the matrix of the inverse quaternion, i.e of the conjugate quaternion\n            if (particle.rotationQuaternion) {\n                particle.rotationQuaternion.conjugateToRef(quaternion);\n            }\n            else {\n                var rotation = particle.rotation;\n                Quaternion.RotationYawPitchRollToRef(rotation.y, rotation.x, rotation.z, quaternion);\n                quaternion.conjugateInPlace();\n            }\n            quaternion.toRotationMatrix(invertedRotMatrix);\n            for (var pt = 0; pt < shape.length; pt++) {\n                idx = index + pt * 3;\n                Vector3.TransformNormalFromFloatsToRef(this._normals32[idx], this._normals32[idx + 1], this._normals32[idx + 2], invertedRotMatrix, tmpNormal);\n                tmpNormal.toArray(this._fixedNormal32, idx);\n            }\n            index = idx + 3;\n        }\n    };\n    /**\n     * Resets the temporary working copy particle\n     * @hidden\n     */\n    SolidParticleSystem.prototype._resetCopy = function () {\n        var copy = this._copy;\n        copy.position.setAll(0);\n        copy.rotation.setAll(0);\n        copy.rotationQuaternion = null;\n        copy.scaling.setAll(1);\n        copy.uvs.copyFromFloats(0.0, 0.0, 1.0, 1.0);\n        copy.color = null;\n        copy.translateFromPivot = false;\n        copy.shapeId = 0;\n        copy.materialIndex = null;\n    };\n    /**\n     * Inserts the shape model geometry in the global SPS mesh by updating the positions, indices, normals, colors, uvs arrays\n     * @param p the current index in the positions array to be updated\n     * @param ind the current index in the indices array\n     * @param shape a Vector3 array, the shape geometry\n     * @param positions the positions array to be updated\n     * @param meshInd the shape indices array\n     * @param indices the indices array to be updated\n     * @param meshUV the shape uv array\n     * @param uvs the uv array to be updated\n     * @param meshCol the shape color array\n     * @param colors the color array to be updated\n     * @param meshNor the shape normals array\n     * @param normals the normals array to be updated\n     * @param idx the particle index\n     * @param idxInShape the particle index in its shape\n     * @param options the addShape() method  passed options\n     * @param model\n     * @model the particle model\n     * @hidden\n     */\n    SolidParticleSystem.prototype._meshBuilder = function (p, ind, shape, positions, meshInd, indices, meshUV, uvs, meshCol, colors, meshNor, normals, idx, idxInShape, options, model) {\n        var i;\n        var u = 0;\n        var c = 0;\n        var n = 0;\n        this._resetCopy();\n        var copy = this._copy;\n        var storeApart = options && options.storage ? true : false;\n        copy.idx = idx;\n        copy.idxInShape = idxInShape;\n        copy.shapeId = model.shapeId;\n        if (this._useModelMaterial) {\n            var materialId = model._material.uniqueId;\n            var materialIndexesById = this._materialIndexesById;\n            if (!Object.prototype.hasOwnProperty.call(materialIndexesById, materialId)) {\n                materialIndexesById[materialId] = this._materials.length;\n                this._materials.push(model._material);\n            }\n            var matIdx = materialIndexesById[materialId];\n            copy.materialIndex = matIdx;\n        }\n        if (options && options.positionFunction) {\n            // call to custom positionFunction\n            options.positionFunction(copy, idx, idxInShape);\n            this._mustUnrotateFixedNormals = true;\n        }\n        // in case the particle geometry must NOT be inserted in the SPS mesh geometry\n        if (storeApart) {\n            return copy;\n        }\n        var rotMatrix = TmpVectors.Matrix[0];\n        var tmpVertex = this._tmpVertex;\n        var tmpVector = tmpVertex.position;\n        var tmpColor = tmpVertex.color;\n        var tmpUV = tmpVertex.uv;\n        var tmpRotated = TmpVectors.Vector3[1];\n        var pivotBackTranslation = TmpVectors.Vector3[2];\n        var scaledPivot = TmpVectors.Vector3[3];\n        Matrix.IdentityToRef(rotMatrix);\n        copy.getRotationMatrix(rotMatrix);\n        copy.pivot.multiplyToRef(copy.scaling, scaledPivot);\n        if (copy.translateFromPivot) {\n            pivotBackTranslation.setAll(0.0);\n        }\n        else {\n            pivotBackTranslation.copyFrom(scaledPivot);\n        }\n        var someVertexFunction = options && options.vertexFunction;\n        for (i = 0; i < shape.length; i++) {\n            tmpVector.copyFrom(shape[i]);\n            if (copy.color) {\n                tmpColor.copyFrom(copy.color);\n            }\n            if (meshUV) {\n                tmpUV.copyFromFloats(meshUV[u], meshUV[u + 1]);\n            }\n            if (someVertexFunction) {\n                options.vertexFunction(copy, tmpVertex, i);\n            }\n            tmpVector.multiplyInPlace(copy.scaling).subtractInPlace(scaledPivot);\n            Vector3.TransformCoordinatesToRef(tmpVector, rotMatrix, tmpRotated);\n            tmpRotated.addInPlace(pivotBackTranslation).addInPlace(copy.position);\n            positions.push(tmpRotated.x, tmpRotated.y, tmpRotated.z);\n            if (meshUV) {\n                var copyUvs = copy.uvs;\n                uvs.push((copyUvs.z - copyUvs.x) * tmpUV.x + copyUvs.x, (copyUvs.w - copyUvs.y) * tmpUV.y + copyUvs.y);\n                u += 2;\n            }\n            if (copy.color) {\n                this._color.copyFrom(tmpColor);\n            }\n            else {\n                var color = this._color;\n                if (meshCol && meshCol[c] !== undefined) {\n                    color.r = meshCol[c];\n                    color.g = meshCol[c + 1];\n                    color.b = meshCol[c + 2];\n                    color.a = meshCol[c + 3];\n                }\n                else {\n                    color.r = 1.0;\n                    color.g = 1.0;\n                    color.b = 1.0;\n                    color.a = 1.0;\n                }\n            }\n            colors.push(this._color.r, this._color.g, this._color.b, this._color.a);\n            c += 4;\n            if (!this.recomputeNormals && meshNor) {\n                Vector3.TransformNormalFromFloatsToRef(meshNor[n], meshNor[n + 1], meshNor[n + 2], rotMatrix, tmpVector);\n                normals.push(tmpVector.x, tmpVector.y, tmpVector.z);\n                n += 3;\n            }\n        }\n        for (i = 0; i < meshInd.length; i++) {\n            var current_ind = p + meshInd[i];\n            indices.push(current_ind);\n            if (current_ind > 65535) {\n                this._needs32Bits = true;\n            }\n        }\n        if (this._depthSort || this._multimaterialEnabled) {\n            var matIndex = copy.materialIndex !== null ? copy.materialIndex : 0;\n            this.depthSortedParticles.push(new DepthSortedParticle(idx, ind, meshInd.length, matIndex));\n        }\n        return copy;\n    };\n    /**\n     * Returns a shape Vector3 array from positions float array\n     * @param positions float array\n     * @returns a vector3 array\n     * @hidden\n     */\n    SolidParticleSystem.prototype._posToShape = function (positions) {\n        var shape = [];\n        for (var i = 0; i < positions.length; i += 3) {\n            shape.push(Vector3.FromArray(positions, i));\n        }\n        return shape;\n    };\n    /**\n     * Returns a shapeUV array from a float uvs (array deep copy)\n     * @param uvs as a float array\n     * @returns a shapeUV array\n     * @hidden\n     */\n    SolidParticleSystem.prototype._uvsToShapeUV = function (uvs) {\n        var shapeUV = [];\n        if (uvs) {\n            for (var i = 0; i < uvs.length; i++) {\n                shapeUV.push(uvs[i]);\n            }\n        }\n        return shapeUV;\n    };\n    /**\n     * Adds a new particle object in the particles array\n     * @param idx particle index in particles array\n     * @param id particle id\n     * @param idxpos positionIndex : the starting index of the particle vertices in the SPS \"positions\" array\n     * @param idxind indiceIndex : he starting index of the particle indices in the SPS \"indices\" array\n     * @param model particle ModelShape object\n     * @param shapeId model shape identifier\n     * @param idxInShape index of the particle in the current model\n     * @param bInfo model bounding info object\n     * @param storage target storage array, if any\n     * @hidden\n     */\n    SolidParticleSystem.prototype._addParticle = function (idx, id, idxpos, idxind, model, shapeId, idxInShape, bInfo, storage) {\n        if (bInfo === void 0) { bInfo = null; }\n        if (storage === void 0) { storage = null; }\n        var sp = new SolidParticle(idx, id, idxpos, idxind, model, shapeId, idxInShape, this, bInfo);\n        var target = storage ? storage : this.particles;\n        target.push(sp);\n        return sp;\n    };\n    /**\n     * Adds some particles to the SPS from the model shape. Returns the shape id.\n     * Please read the doc : https://doc.babylonjs.com/how_to/Solid_Particle_System#create-an-immutable-sps\n     * @param mesh is any Mesh object that will be used as a model for the solid particles.\n     * @param nb (positive integer) the number of particles to be created from this model\n     * @param options {positionFunction} is an optional javascript function to called for each particle on SPS creation.\n     * {vertexFunction} is an optional javascript function to called for each vertex of each particle on SPS creation\n     * {storage} (optional existing array) is an array where the particles will be stored for a further use instead of being inserted in the SPS.\n     * @param options.positionFunction\n     * @param options.vertexFunction\n     * @param options.storage\n     * @returns the number of shapes in the system\n     */\n    SolidParticleSystem.prototype.addShape = function (mesh, nb, options) {\n        var meshPos = mesh.getVerticesData(VertexBuffer.PositionKind);\n        var meshInd = mesh.getIndices();\n        var meshUV = mesh.getVerticesData(VertexBuffer.UVKind);\n        var meshCol = mesh.getVerticesData(VertexBuffer.ColorKind);\n        var meshNor = mesh.getVerticesData(VertexBuffer.NormalKind);\n        this.recomputeNormals = meshNor ? false : true;\n        var indices = Array.from(meshInd);\n        var shapeNormals = Array.from(meshNor);\n        var shapeColors = meshCol ? Array.from(meshCol) : [];\n        var storage = options && options.storage ? options.storage : null;\n        var bbInfo = null;\n        if (this._particlesIntersect) {\n            bbInfo = mesh.getBoundingInfo();\n        }\n        var shape = this._posToShape(meshPos);\n        var shapeUV = this._uvsToShapeUV(meshUV);\n        var posfunc = options ? options.positionFunction : null;\n        var vtxfunc = options ? options.vertexFunction : null;\n        var material = null;\n        if (this._useModelMaterial) {\n            material = mesh.material ? mesh.material : this._setDefaultMaterial();\n        }\n        var modelShape = new ModelShape(this._shapeCounter, shape, indices, shapeNormals, shapeColors, shapeUV, posfunc, vtxfunc, material);\n        // particles\n        for (var i = 0; i < nb; i++) {\n            this._insertNewParticle(this.nbParticles, i, modelShape, shape, meshInd, meshUV, meshCol, meshNor, bbInfo, storage, options);\n        }\n        this._shapeCounter++;\n        this._isNotBuilt = true; // buildMesh() call is now expected for setParticles() to work\n        return this._shapeCounter - 1;\n    };\n    /**\n     * Rebuilds a particle back to its just built status : if needed, recomputes the custom positions and vertices\n     * @param particle\n     * @param reset\n     * @hidden\n     */\n    SolidParticleSystem.prototype._rebuildParticle = function (particle, reset) {\n        if (reset === void 0) { reset = false; }\n        this._resetCopy();\n        var copy = this._copy;\n        if (particle._model._positionFunction) {\n            // recall to stored custom positionFunction\n            particle._model._positionFunction(copy, particle.idx, particle.idxInShape);\n        }\n        var rotMatrix = TmpVectors.Matrix[0];\n        var tmpVertex = TmpVectors.Vector3[0];\n        var tmpRotated = TmpVectors.Vector3[1];\n        var pivotBackTranslation = TmpVectors.Vector3[2];\n        var scaledPivot = TmpVectors.Vector3[3];\n        copy.getRotationMatrix(rotMatrix);\n        particle.pivot.multiplyToRef(particle.scaling, scaledPivot);\n        if (copy.translateFromPivot) {\n            pivotBackTranslation.copyFromFloats(0.0, 0.0, 0.0);\n        }\n        else {\n            pivotBackTranslation.copyFrom(scaledPivot);\n        }\n        var shape = particle._model._shape;\n        for (var pt = 0; pt < shape.length; pt++) {\n            tmpVertex.copyFrom(shape[pt]);\n            if (particle._model._vertexFunction) {\n                particle._model._vertexFunction(copy, tmpVertex, pt); // recall to stored vertexFunction\n            }\n            tmpVertex.multiplyInPlace(copy.scaling).subtractInPlace(scaledPivot);\n            Vector3.TransformCoordinatesToRef(tmpVertex, rotMatrix, tmpRotated);\n            tmpRotated\n                .addInPlace(pivotBackTranslation)\n                .addInPlace(copy.position)\n                .toArray(this._positions32, particle._pos + pt * 3);\n        }\n        if (reset) {\n            particle.position.setAll(0.0);\n            particle.rotation.setAll(0.0);\n            particle.rotationQuaternion = null;\n            particle.scaling.setAll(1.0);\n            particle.uvs.setAll(0.0);\n            particle.pivot.setAll(0.0);\n            particle.translateFromPivot = false;\n            particle.parentId = null;\n        }\n    };\n    /**\n     * Rebuilds the whole mesh and updates the VBO : custom positions and vertices are recomputed if needed.\n     * @param reset boolean, default false : if the particles must be reset at position and rotation zero, scaling 1, color white, initial UVs and not parented.\n     * @returns the SPS.\n     */\n    SolidParticleSystem.prototype.rebuildMesh = function (reset) {\n        if (reset === void 0) { reset = false; }\n        for (var p = 0; p < this.particles.length; p++) {\n            this._rebuildParticle(this.particles[p], reset);\n        }\n        this.mesh.updateVerticesData(VertexBuffer.PositionKind, this._positions32, false, false);\n        return this;\n    };\n    /** Removes the particles from the start-th to the end-th included from an expandable SPS (required).\n     *  Returns an array with the removed particles.\n     *  If the number of particles to remove is lower than zero or greater than the global remaining particle number, then an empty array is returned.\n     *  The SPS can't be empty so at least one particle needs to remain in place.\n     *  Under the hood, the VertexData array, so the VBO buffer, is recreated each call.\n     * @param start index of the first particle to remove\n     * @param end index of the last particle to remove (included)\n     * @returns an array populated with the removed particles\n     */\n    SolidParticleSystem.prototype.removeParticles = function (start, end) {\n        var nb = end - start + 1;\n        if (!this._expandable || nb <= 0 || nb >= this.nbParticles || !this._updatable) {\n            return [];\n        }\n        var particles = this.particles;\n        var currentNb = this.nbParticles;\n        if (end < currentNb - 1) {\n            // update the particle indexes in the positions array in case they're remaining particles after the last removed\n            var firstRemaining = end + 1;\n            var shiftPos = particles[firstRemaining]._pos - particles[start]._pos;\n            var shifInd = particles[firstRemaining]._ind - particles[start]._ind;\n            for (var i = firstRemaining; i < currentNb; i++) {\n                var part = particles[i];\n                part._pos -= shiftPos;\n                part._ind -= shifInd;\n            }\n        }\n        var removed = particles.splice(start, nb);\n        this._positions.length = 0;\n        this._indices.length = 0;\n        this._colors.length = 0;\n        this._uvs.length = 0;\n        this._normals.length = 0;\n        this._index = 0;\n        this._idxOfId.length = 0;\n        if (this._depthSort || this._multimaterialEnabled) {\n            this.depthSortedParticles = [];\n        }\n        var ind = 0;\n        var particlesLength = particles.length;\n        for (var p = 0; p < particlesLength; p++) {\n            var particle = particles[p];\n            var model = particle._model;\n            var shape = model._shape;\n            var modelIndices = model._indices;\n            var modelNormals = model._normals;\n            var modelColors = model._shapeColors;\n            var modelUVs = model._shapeUV;\n            particle.idx = p;\n            this._idxOfId[particle.id] = p;\n            this._meshBuilder(this._index, ind, shape, this._positions, modelIndices, this._indices, modelUVs, this._uvs, modelColors, this._colors, modelNormals, this._normals, particle.idx, particle.idxInShape, null, model);\n            this._index += shape.length;\n            ind += modelIndices.length;\n        }\n        this.nbParticles -= nb;\n        this._isNotBuilt = true; // buildMesh() call is now expected for setParticles() to work\n        return removed;\n    };\n    /**\n     * Inserts some pre-created particles in the solid particle system so that they can be managed by setParticles().\n     * @param solidParticleArray an array populated with Solid Particles objects\n     * @returns the SPS\n     */\n    SolidParticleSystem.prototype.insertParticlesFromArray = function (solidParticleArray) {\n        if (!this._expandable) {\n            return this;\n        }\n        var idxInShape = 0;\n        var currentShapeId = solidParticleArray[0].shapeId;\n        var nb = solidParticleArray.length;\n        for (var i = 0; i < nb; i++) {\n            var sp = solidParticleArray[i];\n            var model = sp._model;\n            var shape = model._shape;\n            var meshInd = model._indices;\n            var meshUV = model._shapeUV;\n            var meshCol = model._shapeColors;\n            var meshNor = model._normals;\n            var noNor = meshNor ? false : true;\n            this.recomputeNormals = noNor || this.recomputeNormals;\n            var bbInfo = sp.getBoundingInfo();\n            var newPart = this._insertNewParticle(this.nbParticles, idxInShape, model, shape, meshInd, meshUV, meshCol, meshNor, bbInfo, null, null);\n            sp.copyToRef(newPart);\n            idxInShape++;\n            if (currentShapeId != sp.shapeId) {\n                currentShapeId = sp.shapeId;\n                idxInShape = 0;\n            }\n        }\n        this._isNotBuilt = true; // buildMesh() call is now expected for setParticles() to work\n        return this;\n    };\n    /**\n     * Creates a new particle and modifies the SPS mesh geometry :\n     * - calls _meshBuilder() to increase the SPS mesh geometry step by step\n     * - calls _addParticle() to populate the particle array\n     * factorized code from addShape() and insertParticlesFromArray()\n     * @param idx particle index in the particles array\n     * @param i particle index in its shape\n     * @param modelShape particle ModelShape object\n     * @param shape shape vertex array\n     * @param meshInd shape indices array\n     * @param meshUV shape uv array\n     * @param meshCol shape color array\n     * @param meshNor shape normals array\n     * @param bbInfo shape bounding info\n     * @param storage target particle storage\n     * @param options\n     * @options addShape() passed options\n     * @hidden\n     */\n    SolidParticleSystem.prototype._insertNewParticle = function (idx, i, modelShape, shape, meshInd, meshUV, meshCol, meshNor, bbInfo, storage, options) {\n        var currentPos = this._positions.length;\n        var currentInd = this._indices.length;\n        var currentCopy = this._meshBuilder(this._index, currentInd, shape, this._positions, meshInd, this._indices, meshUV, this._uvs, meshCol, this._colors, meshNor, this._normals, idx, i, options, modelShape);\n        var sp = null;\n        if (this._updatable) {\n            sp = this._addParticle(this.nbParticles, this._lastParticleId, currentPos, currentInd, modelShape, this._shapeCounter, i, bbInfo, storage);\n            sp.position.copyFrom(currentCopy.position);\n            sp.rotation.copyFrom(currentCopy.rotation);\n            if (currentCopy.rotationQuaternion) {\n                if (sp.rotationQuaternion) {\n                    sp.rotationQuaternion.copyFrom(currentCopy.rotationQuaternion);\n                }\n                else {\n                    sp.rotationQuaternion = currentCopy.rotationQuaternion.clone();\n                }\n            }\n            if (currentCopy.color) {\n                if (sp.color) {\n                    sp.color.copyFrom(currentCopy.color);\n                }\n                else {\n                    sp.color = currentCopy.color.clone();\n                }\n            }\n            sp.scaling.copyFrom(currentCopy.scaling);\n            sp.uvs.copyFrom(currentCopy.uvs);\n            if (currentCopy.materialIndex !== null) {\n                sp.materialIndex = currentCopy.materialIndex;\n            }\n            if (this.expandable) {\n                this._idxOfId[sp.id] = sp.idx;\n            }\n        }\n        if (!storage) {\n            this._index += shape.length;\n            this.nbParticles++;\n            this._lastParticleId++;\n        }\n        return sp;\n    };\n    /**\n     *  Sets all the particles : this method actually really updates the mesh according to the particle positions, rotations, colors, textures, etc.\n     *  This method calls `updateParticle()` for each particle of the SPS.\n     *  For an animated SPS, it is usually called within the render loop.\n     * This methods does nothing if called on a non updatable or not yet built SPS. Example : buildMesh() not called after having added or removed particles from an expandable SPS.\n     * @param start The particle index in the particle array where to start to compute the particle property values _(default 0)_\n     * @param end The particle index in the particle array where to stop to compute the particle property values _(default nbParticle - 1)_\n     * @param update If the mesh must be finally updated on this call after all the particle computations _(default true)_\n     * @returns the SPS.\n     */\n    SolidParticleSystem.prototype.setParticles = function (start, end, update) {\n        if (start === void 0) { start = 0; }\n        if (end === void 0) { end = this.nbParticles - 1; }\n        if (update === void 0) { update = true; }\n        if (!this._updatable || this._isNotBuilt) {\n            return this;\n        }\n        // custom beforeUpdate\n        this.beforeUpdateParticles(start, end, update);\n        var rotMatrix = TmpVectors.Matrix[0];\n        var invertedMatrix = TmpVectors.Matrix[1];\n        var mesh = this.mesh;\n        var colors32 = this._colors32;\n        var positions32 = this._positions32;\n        var normals32 = this._normals32;\n        var uvs32 = this._uvs32;\n        var indices32 = this._indices32;\n        var indices = this._indices;\n        var fixedNormal32 = this._fixedNormal32;\n        var tempVectors = TmpVectors.Vector3;\n        var camAxisX = tempVectors[5].copyFromFloats(1.0, 0.0, 0.0);\n        var camAxisY = tempVectors[6].copyFromFloats(0.0, 1.0, 0.0);\n        var camAxisZ = tempVectors[7].copyFromFloats(0.0, 0.0, 1.0);\n        var minimum = tempVectors[8].setAll(Number.MAX_VALUE);\n        var maximum = tempVectors[9].setAll(-Number.MAX_VALUE);\n        var camInvertedPosition = tempVectors[10].setAll(0);\n        var tmpVertex = this._tmpVertex;\n        var tmpVector = tmpVertex.position;\n        var tmpColor = tmpVertex.color;\n        var tmpUV = tmpVertex.uv;\n        // cases when the World Matrix is to be computed first\n        if (this.billboard || this._depthSort) {\n            this.mesh.computeWorldMatrix(true);\n            this.mesh._worldMatrix.invertToRef(invertedMatrix);\n        }\n        // if the particles will always face the camera\n        if (this.billboard) {\n            // compute the camera position and un-rotate it by the current mesh rotation\n            var tmpVector0 = tempVectors[0];\n            this._camera.getDirectionToRef(Axis.Z, tmpVector0);\n            Vector3.TransformNormalToRef(tmpVector0, invertedMatrix, camAxisZ);\n            camAxisZ.normalize();\n            // same for camera up vector extracted from the cam view matrix\n            var view = this._camera.getViewMatrix(true);\n            Vector3.TransformNormalFromFloatsToRef(view.m[1], view.m[5], view.m[9], invertedMatrix, camAxisY);\n            Vector3.CrossToRef(camAxisY, camAxisZ, camAxisX);\n            camAxisY.normalize();\n            camAxisX.normalize();\n        }\n        // if depthSort, compute the camera global position in the mesh local system\n        if (this._depthSort) {\n            Vector3.TransformCoordinatesToRef(this._camera.globalPosition, invertedMatrix, camInvertedPosition); // then un-rotate the camera\n        }\n        Matrix.IdentityToRef(rotMatrix);\n        var idx = 0; // current position index in the global array positions32\n        var index = 0; // position start index in the global array positions32 of the current particle\n        var colidx = 0; // current color index in the global array colors32\n        var colorIndex = 0; // color start index in the global array colors32 of the current particle\n        var uvidx = 0; // current uv index in the global array uvs32\n        var uvIndex = 0; // uv start index in the global array uvs32 of the current particle\n        var pt = 0; // current index in the particle model shape\n        if (this.mesh.isFacetDataEnabled) {\n            this._computeBoundingBox = true;\n        }\n        end = end >= this.nbParticles ? this.nbParticles - 1 : end;\n        if (this._computeBoundingBox) {\n            if (start != 0 || end != this.nbParticles - 1) {\n                // only some particles are updated, then use the current existing BBox basis. Note : it can only increase.\n                var boundingInfo = this.mesh.getBoundingInfo();\n                if (boundingInfo) {\n                    minimum.copyFrom(boundingInfo.minimum);\n                    maximum.copyFrom(boundingInfo.maximum);\n                }\n            }\n        }\n        // particle loop\n        index = this.particles[start]._pos;\n        var vpos = (index / 3) | 0;\n        colorIndex = vpos * 4;\n        uvIndex = vpos * 2;\n        for (var p = start; p <= end; p++) {\n            var particle = this.particles[p];\n            // call to custom user function to update the particle properties\n            this.updateParticle(particle);\n            var shape = particle._model._shape;\n            var shapeUV = particle._model._shapeUV;\n            var particleRotationMatrix = particle._rotationMatrix;\n            var particlePosition = particle.position;\n            var particleRotation = particle.rotation;\n            var particleScaling = particle.scaling;\n            var particleGlobalPosition = particle._globalPosition;\n            // camera-particle distance for depth sorting\n            if (this._depthSort && this._depthSortParticles) {\n                var dsp = this.depthSortedParticles[p];\n                dsp.idx = particle.idx;\n                dsp.ind = particle._ind;\n                dsp.indicesLength = particle._model._indicesLength;\n                dsp.sqDistance = Vector3.DistanceSquared(particle.position, camInvertedPosition);\n            }\n            // skip the computations for inactive or already invisible particles\n            if (!particle.alive || (particle._stillInvisible && !particle.isVisible)) {\n                // increment indexes for the next particle\n                pt = shape.length;\n                index += pt * 3;\n                colorIndex += pt * 4;\n                uvIndex += pt * 2;\n                continue;\n            }\n            if (particle.isVisible) {\n                particle._stillInvisible = false; // un-mark permanent invisibility\n                var scaledPivot = tempVectors[12];\n                particle.pivot.multiplyToRef(particleScaling, scaledPivot);\n                // particle rotation matrix\n                if (this.billboard) {\n                    particleRotation.x = 0.0;\n                    particleRotation.y = 0.0;\n                }\n                if (this._computeParticleRotation || this.billboard) {\n                    particle.getRotationMatrix(rotMatrix);\n                }\n                var particleHasParent = particle.parentId !== null;\n                if (particleHasParent) {\n                    var parent_1 = this.getParticleById(particle.parentId);\n                    if (parent_1) {\n                        var parentRotationMatrix = parent_1._rotationMatrix;\n                        var parentGlobalPosition = parent_1._globalPosition;\n                        var rotatedY = particlePosition.x * parentRotationMatrix[1] + particlePosition.y * parentRotationMatrix[4] + particlePosition.z * parentRotationMatrix[7];\n                        var rotatedX = particlePosition.x * parentRotationMatrix[0] + particlePosition.y * parentRotationMatrix[3] + particlePosition.z * parentRotationMatrix[6];\n                        var rotatedZ = particlePosition.x * parentRotationMatrix[2] + particlePosition.y * parentRotationMatrix[5] + particlePosition.z * parentRotationMatrix[8];\n                        particleGlobalPosition.x = parentGlobalPosition.x + rotatedX;\n                        particleGlobalPosition.y = parentGlobalPosition.y + rotatedY;\n                        particleGlobalPosition.z = parentGlobalPosition.z + rotatedZ;\n                        if (this._computeParticleRotation || this.billboard) {\n                            var rotMatrixValues = rotMatrix.m;\n                            particleRotationMatrix[0] =\n                                rotMatrixValues[0] * parentRotationMatrix[0] + rotMatrixValues[1] * parentRotationMatrix[3] + rotMatrixValues[2] * parentRotationMatrix[6];\n                            particleRotationMatrix[1] =\n                                rotMatrixValues[0] * parentRotationMatrix[1] + rotMatrixValues[1] * parentRotationMatrix[4] + rotMatrixValues[2] * parentRotationMatrix[7];\n                            particleRotationMatrix[2] =\n                                rotMatrixValues[0] * parentRotationMatrix[2] + rotMatrixValues[1] * parentRotationMatrix[5] + rotMatrixValues[2] * parentRotationMatrix[8];\n                            particleRotationMatrix[3] =\n                                rotMatrixValues[4] * parentRotationMatrix[0] + rotMatrixValues[5] * parentRotationMatrix[3] + rotMatrixValues[6] * parentRotationMatrix[6];\n                            particleRotationMatrix[4] =\n                                rotMatrixValues[4] * parentRotationMatrix[1] + rotMatrixValues[5] * parentRotationMatrix[4] + rotMatrixValues[6] * parentRotationMatrix[7];\n                            particleRotationMatrix[5] =\n                                rotMatrixValues[4] * parentRotationMatrix[2] + rotMatrixValues[5] * parentRotationMatrix[5] + rotMatrixValues[6] * parentRotationMatrix[8];\n                            particleRotationMatrix[6] =\n                                rotMatrixValues[8] * parentRotationMatrix[0] + rotMatrixValues[9] * parentRotationMatrix[3] + rotMatrixValues[10] * parentRotationMatrix[6];\n                            particleRotationMatrix[7] =\n                                rotMatrixValues[8] * parentRotationMatrix[1] + rotMatrixValues[9] * parentRotationMatrix[4] + rotMatrixValues[10] * parentRotationMatrix[7];\n                            particleRotationMatrix[8] =\n                                rotMatrixValues[8] * parentRotationMatrix[2] + rotMatrixValues[9] * parentRotationMatrix[5] + rotMatrixValues[10] * parentRotationMatrix[8];\n                        }\n                    }\n                    else {\n                        // in case the parent were removed at some moment\n                        particle.parentId = null;\n                    }\n                }\n                else {\n                    particleGlobalPosition.x = particlePosition.x;\n                    particleGlobalPosition.y = particlePosition.y;\n                    particleGlobalPosition.z = particlePosition.z;\n                    if (this._computeParticleRotation || this.billboard) {\n                        var rotMatrixValues = rotMatrix.m;\n                        particleRotationMatrix[0] = rotMatrixValues[0];\n                        particleRotationMatrix[1] = rotMatrixValues[1];\n                        particleRotationMatrix[2] = rotMatrixValues[2];\n                        particleRotationMatrix[3] = rotMatrixValues[4];\n                        particleRotationMatrix[4] = rotMatrixValues[5];\n                        particleRotationMatrix[5] = rotMatrixValues[6];\n                        particleRotationMatrix[6] = rotMatrixValues[8];\n                        particleRotationMatrix[7] = rotMatrixValues[9];\n                        particleRotationMatrix[8] = rotMatrixValues[10];\n                    }\n                }\n                var pivotBackTranslation = tempVectors[11];\n                if (particle.translateFromPivot) {\n                    pivotBackTranslation.setAll(0.0);\n                }\n                else {\n                    pivotBackTranslation.copyFrom(scaledPivot);\n                }\n                // particle vertex loop\n                for (pt = 0; pt < shape.length; pt++) {\n                    idx = index + pt * 3;\n                    colidx = colorIndex + pt * 4;\n                    uvidx = uvIndex + pt * 2;\n                    var iu = 2 * pt;\n                    var iv = iu + 1;\n                    tmpVector.copyFrom(shape[pt]);\n                    if (this._computeParticleColor && particle.color) {\n                        tmpColor.copyFrom(particle.color);\n                    }\n                    if (this._computeParticleTexture) {\n                        tmpUV.copyFromFloats(shapeUV[iu], shapeUV[iv]);\n                    }\n                    if (this._computeParticleVertex) {\n                        this.updateParticleVertex(particle, tmpVertex, pt);\n                    }\n                    // positions\n                    var vertexX = tmpVector.x * particleScaling.x - scaledPivot.x;\n                    var vertexY = tmpVector.y * particleScaling.y - scaledPivot.y;\n                    var vertexZ = tmpVector.z * particleScaling.z - scaledPivot.z;\n                    var rotatedX = vertexX * particleRotationMatrix[0] + vertexY * particleRotationMatrix[3] + vertexZ * particleRotationMatrix[6];\n                    var rotatedY = vertexX * particleRotationMatrix[1] + vertexY * particleRotationMatrix[4] + vertexZ * particleRotationMatrix[7];\n                    var rotatedZ = vertexX * particleRotationMatrix[2] + vertexY * particleRotationMatrix[5] + vertexZ * particleRotationMatrix[8];\n                    rotatedX += pivotBackTranslation.x;\n                    rotatedY += pivotBackTranslation.y;\n                    rotatedZ += pivotBackTranslation.z;\n                    var px = (positions32[idx] = particleGlobalPosition.x + camAxisX.x * rotatedX + camAxisY.x * rotatedY + camAxisZ.x * rotatedZ);\n                    var py = (positions32[idx + 1] = particleGlobalPosition.y + camAxisX.y * rotatedX + camAxisY.y * rotatedY + camAxisZ.y * rotatedZ);\n                    var pz = (positions32[idx + 2] = particleGlobalPosition.z + camAxisX.z * rotatedX + camAxisY.z * rotatedY + camAxisZ.z * rotatedZ);\n                    if (this._computeBoundingBox) {\n                        minimum.minimizeInPlaceFromFloats(px, py, pz);\n                        maximum.maximizeInPlaceFromFloats(px, py, pz);\n                    }\n                    // normals : if the particles can't be morphed then just rotate the normals, what is much more faster than ComputeNormals()\n                    if (!this._computeParticleVertex) {\n                        var normalx = fixedNormal32[idx];\n                        var normaly = fixedNormal32[idx + 1];\n                        var normalz = fixedNormal32[idx + 2];\n                        var rotatedx = normalx * particleRotationMatrix[0] + normaly * particleRotationMatrix[3] + normalz * particleRotationMatrix[6];\n                        var rotatedy = normalx * particleRotationMatrix[1] + normaly * particleRotationMatrix[4] + normalz * particleRotationMatrix[7];\n                        var rotatedz = normalx * particleRotationMatrix[2] + normaly * particleRotationMatrix[5] + normalz * particleRotationMatrix[8];\n                        normals32[idx] = camAxisX.x * rotatedx + camAxisY.x * rotatedy + camAxisZ.x * rotatedz;\n                        normals32[idx + 1] = camAxisX.y * rotatedx + camAxisY.y * rotatedy + camAxisZ.y * rotatedz;\n                        normals32[idx + 2] = camAxisX.z * rotatedx + camAxisY.z * rotatedy + camAxisZ.z * rotatedz;\n                    }\n                    if (this._computeParticleColor && particle.color) {\n                        var colors32_1 = this._colors32;\n                        colors32_1[colidx] = tmpColor.r;\n                        colors32_1[colidx + 1] = tmpColor.g;\n                        colors32_1[colidx + 2] = tmpColor.b;\n                        colors32_1[colidx + 3] = tmpColor.a;\n                    }\n                    if (this._computeParticleTexture) {\n                        var uvs = particle.uvs;\n                        uvs32[uvidx] = tmpUV.x * (uvs.z - uvs.x) + uvs.x;\n                        uvs32[uvidx + 1] = tmpUV.y * (uvs.w - uvs.y) + uvs.y;\n                    }\n                }\n            }\n            // particle just set invisible : scaled to zero and positioned at the origin\n            else {\n                particle._stillInvisible = true; // mark the particle as invisible\n                for (pt = 0; pt < shape.length; pt++) {\n                    idx = index + pt * 3;\n                    colidx = colorIndex + pt * 4;\n                    uvidx = uvIndex + pt * 2;\n                    positions32[idx] = positions32[idx + 1] = positions32[idx + 2] = 0;\n                    normals32[idx] = normals32[idx + 1] = normals32[idx + 2] = 0;\n                    if (this._computeParticleColor && particle.color) {\n                        var color = particle.color;\n                        colors32[colidx] = color.r;\n                        colors32[colidx + 1] = color.g;\n                        colors32[colidx + 2] = color.b;\n                        colors32[colidx + 3] = color.a;\n                    }\n                    if (this._computeParticleTexture) {\n                        var uvs = particle.uvs;\n                        uvs32[uvidx] = shapeUV[pt * 2] * (uvs.z - uvs.x) + uvs.x;\n                        uvs32[uvidx + 1] = shapeUV[pt * 2 + 1] * (uvs.w - uvs.y) + uvs.y;\n                    }\n                }\n            }\n            // if the particle intersections must be computed : update the bbInfo\n            if (this._particlesIntersect) {\n                var bInfo = particle.getBoundingInfo();\n                var bBox = bInfo.boundingBox;\n                var bSphere = bInfo.boundingSphere;\n                var modelBoundingInfo = particle._modelBoundingInfo;\n                if (!this._bSphereOnly) {\n                    // place, scale and rotate the particle bbox within the SPS local system, then update it\n                    var modelBoundingInfoVectors = modelBoundingInfo.boundingBox.vectors;\n                    var tempMin = tempVectors[1];\n                    var tempMax = tempVectors[2];\n                    tempMin.setAll(Number.MAX_VALUE);\n                    tempMax.setAll(-Number.MAX_VALUE);\n                    for (var b = 0; b < 8; b++) {\n                        var scaledX = modelBoundingInfoVectors[b].x * particleScaling.x;\n                        var scaledY = modelBoundingInfoVectors[b].y * particleScaling.y;\n                        var scaledZ = modelBoundingInfoVectors[b].z * particleScaling.z;\n                        var rotatedX = scaledX * particleRotationMatrix[0] + scaledY * particleRotationMatrix[3] + scaledZ * particleRotationMatrix[6];\n                        var rotatedY = scaledX * particleRotationMatrix[1] + scaledY * particleRotationMatrix[4] + scaledZ * particleRotationMatrix[7];\n                        var rotatedZ = scaledX * particleRotationMatrix[2] + scaledY * particleRotationMatrix[5] + scaledZ * particleRotationMatrix[8];\n                        var x = particlePosition.x + camAxisX.x * rotatedX + camAxisY.x * rotatedY + camAxisZ.x * rotatedZ;\n                        var y = particlePosition.y + camAxisX.y * rotatedX + camAxisY.y * rotatedY + camAxisZ.y * rotatedZ;\n                        var z = particlePosition.z + camAxisX.z * rotatedX + camAxisY.z * rotatedY + camAxisZ.z * rotatedZ;\n                        tempMin.minimizeInPlaceFromFloats(x, y, z);\n                        tempMax.maximizeInPlaceFromFloats(x, y, z);\n                    }\n                    bBox.reConstruct(tempMin, tempMax, mesh._worldMatrix);\n                }\n                // place and scale the particle bouding sphere in the SPS local system, then update it\n                var minBbox = modelBoundingInfo.minimum.multiplyToRef(particleScaling, tempVectors[1]);\n                var maxBbox = modelBoundingInfo.maximum.multiplyToRef(particleScaling, tempVectors[2]);\n                var bSphereCenter = maxBbox.addToRef(minBbox, tempVectors[3]).scaleInPlace(0.5).addInPlace(particleGlobalPosition);\n                var halfDiag = maxBbox.subtractToRef(minBbox, tempVectors[4]).scaleInPlace(0.5 * this._bSphereRadiusFactor);\n                var bSphereMinBbox = bSphereCenter.subtractToRef(halfDiag, tempVectors[1]);\n                var bSphereMaxBbox = bSphereCenter.addToRef(halfDiag, tempVectors[2]);\n                bSphere.reConstruct(bSphereMinBbox, bSphereMaxBbox, mesh._worldMatrix);\n            }\n            // increment indexes for the next particle\n            index = idx + 3;\n            colorIndex = colidx + 4;\n            uvIndex = uvidx + 2;\n        }\n        // if the VBO must be updated\n        if (update) {\n            if (this._computeParticleColor) {\n                var vb = mesh.getVertexBuffer(VertexBuffer.ColorKind);\n                if (vb && !mesh.isPickable) {\n                    vb.updateDirectly(colors32, 0);\n                }\n                else {\n                    mesh.updateVerticesData(VertexBuffer.ColorKind, colors32, false, false);\n                }\n            }\n            if (this._computeParticleTexture) {\n                var vb = mesh.getVertexBuffer(VertexBuffer.UVKind);\n                if (vb && !mesh.isPickable) {\n                    vb.updateDirectly(uvs32, 0);\n                }\n                else {\n                    mesh.updateVerticesData(VertexBuffer.UVKind, uvs32, false, false);\n                }\n            }\n            var vbp = mesh.getVertexBuffer(VertexBuffer.PositionKind);\n            if (vbp && !mesh.isPickable) {\n                vbp.updateDirectly(positions32, 0);\n            }\n            else {\n                mesh.updateVerticesData(VertexBuffer.PositionKind, positions32, false, false);\n            }\n            if (!mesh.areNormalsFrozen || mesh.isFacetDataEnabled) {\n                if (this._computeParticleVertex || mesh.isFacetDataEnabled) {\n                    // recompute the normals only if the particles can be morphed, update then also the normal reference array _fixedNormal32[]\n                    var params = mesh.isFacetDataEnabled ? mesh.getFacetDataParameters() : null;\n                    VertexData.ComputeNormals(positions32, indices32, normals32, params);\n                    for (var i = 0; i < normals32.length; i++) {\n                        fixedNormal32[i] = normals32[i];\n                    }\n                }\n                if (!mesh.areNormalsFrozen) {\n                    var vb = mesh.getVertexBuffer(VertexBuffer.NormalKind);\n                    if (vb && !mesh.isPickable) {\n                        vb.updateDirectly(normals32, 0);\n                    }\n                    else {\n                        mesh.updateVerticesData(VertexBuffer.NormalKind, normals32, false, false);\n                    }\n                }\n            }\n            if (this._depthSort && this._depthSortParticles) {\n                var depthSortedParticles = this.depthSortedParticles;\n                depthSortedParticles.sort(this._depthSortFunction);\n                var dspl = depthSortedParticles.length;\n                var sid = 0;\n                var faceId = 0;\n                for (var sorted = 0; sorted < dspl; sorted++) {\n                    var sortedParticle = depthSortedParticles[sorted];\n                    var lind = sortedParticle.indicesLength;\n                    var sind = sortedParticle.ind;\n                    for (var i = 0; i < lind; i++) {\n                        indices32[sid] = indices[sind + i];\n                        sid++;\n                        if (this._pickable) {\n                            var f = i % 3;\n                            if (f == 0) {\n                                var pickedData = this.pickedParticles[faceId];\n                                pickedData.idx = sortedParticle.idx;\n                                pickedData.faceId = faceId;\n                                faceId++;\n                            }\n                        }\n                    }\n                }\n                mesh.updateIndices(indices32);\n            }\n        }\n        if (this._computeBoundingBox) {\n            if (mesh.hasBoundingInfo) {\n                mesh.getBoundingInfo().reConstruct(minimum, maximum, mesh._worldMatrix);\n            }\n            else {\n                mesh.buildBoundingInfo(minimum, maximum, mesh._worldMatrix);\n            }\n        }\n        if (this._autoUpdateSubMeshes) {\n            this.computeSubMeshes();\n        }\n        this.afterUpdateParticles(start, end, update);\n        return this;\n    };\n    /**\n     * Disposes the SPS.\n     */\n    SolidParticleSystem.prototype.dispose = function () {\n        this.mesh.dispose();\n        this.vars = null;\n        // drop references to internal big arrays for the GC\n        this._positions = null;\n        this._indices = null;\n        this._normals = null;\n        this._uvs = null;\n        this._colors = null;\n        this._indices32 = null;\n        this._positions32 = null;\n        this._normals32 = null;\n        this._fixedNormal32 = null;\n        this._uvs32 = null;\n        this._colors32 = null;\n        this.pickedParticles = null;\n        this.pickedBySubMesh = null;\n        this._materials = null;\n        this._materialIndexes = null;\n        this._indicesByMaterial = null;\n        this._idxOfId = null;\n    };\n    /** Returns an object {idx: number faceId: number} for the picked particle from the passed pickingInfo object.\n     * idx is the particle index in the SPS\n     * faceId is the picked face index counted within this particle.\n     * Returns null if the pickInfo can't identify a picked particle.\n     * @param pickingInfo (PickingInfo object)\n     * @returns {idx: number, faceId: number} or null\n     */\n    SolidParticleSystem.prototype.pickedParticle = function (pickingInfo) {\n        if (pickingInfo.hit) {\n            var subMesh = pickingInfo.subMeshId;\n            var faceId = pickingInfo.faceId - this.mesh.subMeshes[subMesh].indexStart / 3;\n            var picked = this.pickedBySubMesh;\n            if (picked[subMesh] && picked[subMesh][faceId]) {\n                return picked[subMesh][faceId];\n            }\n        }\n        return null;\n    };\n    /**\n     * Returns a SolidParticle object from its identifier : particle.id\n     * @param id (integer) the particle Id\n     * @returns the searched particle or null if not found in the SPS.\n     */\n    SolidParticleSystem.prototype.getParticleById = function (id) {\n        var p = this.particles[id];\n        if (p && p.id == id) {\n            return p;\n        }\n        var particles = this.particles;\n        var idx = this._idxOfId[id];\n        if (idx !== undefined) {\n            return particles[idx];\n        }\n        var i = 0;\n        var nb = this.nbParticles;\n        while (i < nb) {\n            var particle = particles[i];\n            if (particle.id == id) {\n                return particle;\n            }\n            i++;\n        }\n        return null;\n    };\n    /**\n     * Returns a new array populated with the particles having the passed shapeId.\n     * @param shapeId (integer) the shape identifier\n     * @returns a new solid particle array\n     */\n    SolidParticleSystem.prototype.getParticlesByShapeId = function (shapeId) {\n        var ref = [];\n        this.getParticlesByShapeIdToRef(shapeId, ref);\n        return ref;\n    };\n    /**\n     * Populates the passed array \"ref\" with the particles having the passed shapeId.\n     * @param shapeId the shape identifier\n     * @returns the SPS\n     * @param ref\n     */\n    SolidParticleSystem.prototype.getParticlesByShapeIdToRef = function (shapeId, ref) {\n        ref.length = 0;\n        for (var i = 0; i < this.nbParticles; i++) {\n            var p = this.particles[i];\n            if (p.shapeId == shapeId) {\n                ref.push(p);\n            }\n        }\n        return this;\n    };\n    /**\n     * Computes the required SubMeshes according the materials assigned to the particles.\n     * @returns the solid particle system.\n     * Does nothing if called before the SPS mesh is built.\n     */\n    SolidParticleSystem.prototype.computeSubMeshes = function () {\n        if (!this.mesh || !this._multimaterialEnabled) {\n            return this;\n        }\n        var depthSortedParticles = this.depthSortedParticles;\n        if (this.particles.length > 0) {\n            for (var p = 0; p < this.particles.length; p++) {\n                var part = this.particles[p];\n                if (!part.materialIndex) {\n                    part.materialIndex = 0;\n                }\n                var sortedPart = depthSortedParticles[p];\n                sortedPart.materialIndex = part.materialIndex;\n                sortedPart.ind = part._ind;\n                sortedPart.indicesLength = part._model._indicesLength;\n                sortedPart.idx = part.idx;\n            }\n        }\n        this._sortParticlesByMaterial();\n        var indicesByMaterial = this._indicesByMaterial;\n        var materialIndexes = this._materialIndexes;\n        var mesh = this.mesh;\n        mesh.subMeshes = [];\n        var vcount = mesh.getTotalVertices();\n        for (var m = 0; m < materialIndexes.length; m++) {\n            var start = indicesByMaterial[m];\n            var count = indicesByMaterial[m + 1] - start;\n            var matIndex = materialIndexes[m];\n            new SubMesh(matIndex, 0, vcount, start, count, mesh);\n        }\n        return this;\n    };\n    /**\n     * Sorts the solid particles by material when MultiMaterial is enabled.\n     * Updates the indices32 array.\n     * Updates the indicesByMaterial array.\n     * Updates the mesh indices array.\n     * @returns the SPS\n     * @hidden\n     */\n    SolidParticleSystem.prototype._sortParticlesByMaterial = function () {\n        var indicesByMaterial = [0];\n        this._indicesByMaterial = indicesByMaterial;\n        var materialIndexes = [];\n        this._materialIndexes = materialIndexes;\n        var depthSortedParticles = this.depthSortedParticles;\n        depthSortedParticles.sort(this._materialSortFunction);\n        var length = depthSortedParticles.length;\n        var indices32 = this._indices32;\n        var indices = this._indices;\n        var subMeshIndex = 0;\n        var subMeshFaceId = 0;\n        var sid = 0;\n        var lastMatIndex = depthSortedParticles[0].materialIndex;\n        materialIndexes.push(lastMatIndex);\n        if (this._pickable) {\n            this.pickedBySubMesh = [[]];\n            this.pickedParticles = this.pickedBySubMesh[0];\n        }\n        for (var sorted = 0; sorted < length; sorted++) {\n            var sortedPart = depthSortedParticles[sorted];\n            var lind = sortedPart.indicesLength;\n            var sind = sortedPart.ind;\n            if (sortedPart.materialIndex !== lastMatIndex) {\n                lastMatIndex = sortedPart.materialIndex;\n                indicesByMaterial.push(sid);\n                materialIndexes.push(lastMatIndex);\n                if (this._pickable) {\n                    subMeshIndex++;\n                    this.pickedBySubMesh[subMeshIndex] = [];\n                    subMeshFaceId = 0;\n                }\n            }\n            var faceId = 0;\n            for (var i = 0; i < lind; i++) {\n                indices32[sid] = indices[sind + i];\n                if (this._pickable) {\n                    var f = i % 3;\n                    if (f == 0) {\n                        var pickedData = this.pickedBySubMesh[subMeshIndex][subMeshFaceId];\n                        if (pickedData) {\n                            pickedData.idx = sortedPart.idx;\n                            pickedData.faceId = faceId;\n                        }\n                        else {\n                            this.pickedBySubMesh[subMeshIndex][subMeshFaceId] = { idx: sortedPart.idx, faceId: faceId };\n                        }\n                        subMeshFaceId++;\n                        faceId++;\n                    }\n                }\n                sid++;\n            }\n        }\n        indicesByMaterial.push(indices32.length); // add the last number to ease the indices start/count values for subMeshes creation\n        if (this._updatable) {\n            this.mesh.updateIndices(indices32);\n        }\n        return this;\n    };\n    /**\n     * Sets the material indexes by id materialIndexesById[id] = materialIndex\n     * @hidden\n     */\n    SolidParticleSystem.prototype._setMaterialIndexesById = function () {\n        this._materialIndexesById = {};\n        for (var i = 0; i < this._materials.length; i++) {\n            var id = this._materials[i].uniqueId;\n            this._materialIndexesById[id] = i;\n        }\n    };\n    /**\n     * Returns an array with unique values of Materials from the passed array\n     * @param array the material array to be checked and filtered\n     * @hidden\n     */\n    SolidParticleSystem.prototype._filterUniqueMaterialId = function (array) {\n        var filtered = array.filter(function (value, index, self) {\n            return self.indexOf(value) === index;\n        });\n        return filtered;\n    };\n    /**\n     * Sets a new Standard Material as _defaultMaterial if not already set.\n     * @hidden\n     */\n    SolidParticleSystem.prototype._setDefaultMaterial = function () {\n        if (!this._defaultMaterial) {\n            this._defaultMaterial = new StandardMaterial(this.name + \"DefaultMaterial\", this._scene);\n        }\n        return this._defaultMaterial;\n    };\n    /**\n     * Visibility helper : Recomputes the visible size according to the mesh bounding box\n     * doc : https://doc.babylonjs.com/how_to/Solid_Particle_System#sps-visibility\n     * @returns the SPS.\n     */\n    SolidParticleSystem.prototype.refreshVisibleSize = function () {\n        if (!this._isVisibilityBoxLocked) {\n            this.mesh.refreshBoundingInfo();\n        }\n        return this;\n    };\n    /**\n     * Visibility helper : Sets the size of a visibility box, this sets the underlying mesh bounding box.\n     * @param size the size (float) of the visibility box\n     * note : this doesn't lock the SPS mesh bounding box.\n     * doc : https://doc.babylonjs.com/how_to/Solid_Particle_System#sps-visibility\n     */\n    SolidParticleSystem.prototype.setVisibilityBox = function (size) {\n        var vis = size / 2;\n        this.mesh.buildBoundingInfo(new Vector3(-vis, -vis, -vis), new Vector3(vis, vis, vis));\n    };\n    Object.defineProperty(SolidParticleSystem.prototype, \"isAlwaysVisible\", {\n        /**\n         * Gets whether the SPS as always visible or not\n         * doc : https://doc.babylonjs.com/how_to/Solid_Particle_System#sps-visibility\n         */\n        get: function () {\n            return this._alwaysVisible;\n        },\n        /**\n         * Sets the SPS as always visible or not\n         * doc : https://doc.babylonjs.com/how_to/Solid_Particle_System#sps-visibility\n         */\n        set: function (val) {\n            this._alwaysVisible = val;\n            this.mesh.alwaysSelectAsActiveMesh = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SolidParticleSystem.prototype, \"isVisibilityBoxLocked\", {\n        /**\n         * Gets if the SPS visibility box as locked or not. This enables/disables the underlying mesh bounding box updates.\n         * doc : https://doc.babylonjs.com/how_to/Solid_Particle_System#sps-visibility\n         */\n        get: function () {\n            return this._isVisibilityBoxLocked;\n        },\n        /**\n         * Sets the SPS visibility box as locked or not. This enables/disables the underlying mesh bounding box updates.\n         * doc : https://doc.babylonjs.com/how_to/Solid_Particle_System#sps-visibility\n         */\n        set: function (val) {\n            this._isVisibilityBoxLocked = val;\n            var boundingInfo = this.mesh.getBoundingInfo();\n            boundingInfo.isLocked = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SolidParticleSystem.prototype, \"computeParticleRotation\", {\n        /**\n         * Gets if `setParticles()` computes the particle rotations or not.\n         * Default value : true. The SPS is faster when it's set to false.\n         * Note : the particle rotations aren't stored values, so setting `computeParticleRotation` to false will prevents the particle to rotate.\n         */\n        get: function () {\n            return this._computeParticleRotation;\n        },\n        /**\n         * Tells to `setParticles()` to compute the particle rotations or not.\n         * Default value : true. The SPS is faster when it's set to false.\n         * Note : the particle rotations aren't stored values, so setting `computeParticleRotation` to false will prevents the particle to rotate.\n         */\n        set: function (val) {\n            this._computeParticleRotation = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SolidParticleSystem.prototype, \"computeParticleColor\", {\n        /**\n         * Gets if `setParticles()` computes the particle colors or not.\n         * Default value : true. The SPS is faster when it's set to false.\n         * Note : the particle colors are stored values, so setting `computeParticleColor` to false will keep yet the last colors set.\n         */\n        get: function () {\n            return this._computeParticleColor;\n        },\n        /**\n         * Tells to `setParticles()` to compute the particle colors or not.\n         * Default value : true. The SPS is faster when it's set to false.\n         * Note : the particle colors are stored values, so setting `computeParticleColor` to false will keep yet the last colors set.\n         */\n        set: function (val) {\n            this._computeParticleColor = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SolidParticleSystem.prototype, \"computeParticleTexture\", {\n        /**\n         * Gets if `setParticles()` computes the particle textures or not.\n         * Default value : true. The SPS is faster when it's set to false.\n         * Note : the particle textures are stored values, so setting `computeParticleTexture` to false will keep yet the last colors set.\n         */\n        get: function () {\n            return this._computeParticleTexture;\n        },\n        set: function (val) {\n            this._computeParticleTexture = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SolidParticleSystem.prototype, \"computeParticleVertex\", {\n        /**\n         * Gets if `setParticles()` calls the vertex function for each vertex of each particle, or not.\n         * Default value : false. The SPS is faster when it's set to false.\n         * Note : the particle custom vertex positions aren't stored values.\n         */\n        get: function () {\n            return this._computeParticleVertex;\n        },\n        /**\n         * Tells to `setParticles()` to call the vertex function for each vertex of each particle, or not.\n         * Default value : false. The SPS is faster when it's set to false.\n         * Note : the particle custom vertex positions aren't stored values.\n         */\n        set: function (val) {\n            this._computeParticleVertex = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SolidParticleSystem.prototype, \"computeBoundingBox\", {\n        /**\n         * Gets if `setParticles()` computes or not the mesh bounding box when computing the particle positions.\n         */\n        get: function () {\n            return this._computeBoundingBox;\n        },\n        /**\n         * Tells to `setParticles()` to compute or not the mesh bounding box when computing the particle positions.\n         */\n        set: function (val) {\n            this._computeBoundingBox = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SolidParticleSystem.prototype, \"depthSortParticles\", {\n        /**\n         * Gets if `setParticles()` sorts or not the distance between each particle and the camera.\n         * Skipped when `enableDepthSort` is set to `false` (default) at construction time.\n         * Default : `true`\n         */\n        get: function () {\n            return this._depthSortParticles;\n        },\n        /**\n         * Tells to `setParticles()` to sort or not the distance between each particle and the camera.\n         * Skipped when `enableDepthSort` is set to `false` (default) at construction time.\n         * Default : `true`\n         */\n        set: function (val) {\n            this._depthSortParticles = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SolidParticleSystem.prototype, \"expandable\", {\n        /**\n         * Gets if the SPS is created as expandable at construction time.\n         * Default : `false`\n         */\n        get: function () {\n            return this._expandable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SolidParticleSystem.prototype, \"multimaterialEnabled\", {\n        /**\n         * Gets if the SPS supports the Multi Materials\n         */\n        get: function () {\n            return this._multimaterialEnabled;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SolidParticleSystem.prototype, \"useModelMaterial\", {\n        /**\n         * Gets if the SPS uses the model materials for its own multimaterial.\n         */\n        get: function () {\n            return this._useModelMaterial;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SolidParticleSystem.prototype, \"materials\", {\n        /**\n         * The SPS used material array.\n         */\n        get: function () {\n            return this._materials;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Sets the SPS MultiMaterial from the passed materials.\n     * Note : the passed array is internally copied and not used then by reference.\n     * @param materials an array of material objects. This array indexes are the materialIndex values of the particles.\n     */\n    SolidParticleSystem.prototype.setMultiMaterial = function (materials) {\n        this._materials = this._filterUniqueMaterialId(materials);\n        this._setMaterialIndexesById();\n        if (this._multimaterial) {\n            this._multimaterial.dispose();\n        }\n        this._multimaterial = new MultiMaterial(this.name + \"MultiMaterial\", this._scene);\n        for (var m = 0; m < this._materials.length; m++) {\n            this._multimaterial.subMaterials.push(this._materials[m]);\n        }\n        this.computeSubMeshes();\n        this.mesh.material = this._multimaterial;\n    };\n    Object.defineProperty(SolidParticleSystem.prototype, \"multimaterial\", {\n        /**\n         * The SPS computed multimaterial object\n         */\n        get: function () {\n            return this._multimaterial;\n        },\n        set: function (mm) {\n            this._multimaterial = mm;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SolidParticleSystem.prototype, \"autoUpdateSubMeshes\", {\n        /**\n         * If the subMeshes must be updated on the next call to setParticles()\n         */\n        get: function () {\n            return this._autoUpdateSubMeshes;\n        },\n        set: function (val) {\n            this._autoUpdateSubMeshes = val;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // =======================================================================\n    // Particle behavior logic\n    // these following methods may be overwritten by the user to fit his needs\n    /**\n     * This function does nothing. It may be overwritten to set all the particle first values.\n     * The SPS doesn't call this function, you may have to call it by your own.\n     * doc : https://doc.babylonjs.com/how_to/Solid_Particle_System#particle-management\n     */\n    SolidParticleSystem.prototype.initParticles = function () { };\n    /**\n     * This function does nothing. It may be overwritten to recycle a particle.\n     * The SPS doesn't call this function, you may have to call it by your own.\n     * doc : https://doc.babylonjs.com/how_to/Solid_Particle_System#particle-management\n     * @param particle The particle to recycle\n     * @returns the recycled particle\n     */\n    SolidParticleSystem.prototype.recycleParticle = function (particle) {\n        return particle;\n    };\n    /**\n     * Updates a particle : this function should  be overwritten by the user.\n     * It is called on each particle by `setParticles()`. This is the place to code each particle behavior.\n     * doc : https://doc.babylonjs.com/how_to/Solid_Particle_System#particle-management\n     * @example : just set a particle position or velocity and recycle conditions\n     * @param particle The particle to update\n     * @returns the updated particle\n     */\n    SolidParticleSystem.prototype.updateParticle = function (particle) {\n        return particle;\n    };\n    /**\n     * Updates a vertex of a particle : it can be overwritten by the user.\n     * This will be called on each vertex particle by `setParticles()` if `computeParticleVertex` is set to true only.\n     * @param particle the current particle\n     * @param vertex the current vertex of the current particle : a SolidParticleVertex object\n     * @param pt the index of the current vertex in the particle shape\n     * doc : https://doc.babylonjs.com/how_to/Solid_Particle_System#update-each-particle-shape\n     * @example : just set a vertex particle position or color\n     * @returns the sps\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    SolidParticleSystem.prototype.updateParticleVertex = function (particle, vertex, pt) {\n        return this;\n    };\n    /**\n     * This will be called before any other treatment by `setParticles()` and will be passed three parameters.\n     * This does nothing and may be overwritten by the user.\n     * @param start the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\n     * @param stop the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\n     * @param update the boolean update value actually passed to setParticles()\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    SolidParticleSystem.prototype.beforeUpdateParticles = function (start, stop, update) { };\n    /**\n     * This will be called  by `setParticles()` after all the other treatments and just before the actual mesh update.\n     * This will be passed three parameters.\n     * This does nothing and may be overwritten by the user.\n     * @param start the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\n     * @param stop the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()\n     * @param update the boolean update value actually passed to setParticles()\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    SolidParticleSystem.prototype.afterUpdateParticles = function (start, stop, update) { };\n    return SolidParticleSystem;\n}());\nexport { SolidParticleSystem };\n//# sourceMappingURL=solidParticleSystem.js.map","import { Color4, Vector2, Vector3, TmpVectors, Quaternion } from \"../Maths/math.js\";\n/**\n * Represents one particle of a points cloud system.\n */\nvar CloudPoint = /** @class */ (function () {\n    /**\n     * Creates a Point Cloud object.\n     * Don't create particles manually, use instead the PCS internal tools like _addParticle()\n     * @param particleIndex (integer) is the particle index in the PCS pool. It's also the particle identifier.\n     * @param group (PointsGroup) is the group the particle belongs to\n     * @param groupId (integer) is the group identifier in the PCS.\n     * @param idxInGroup (integer) is the index of the particle in the current point group (ex: the 10th point of addPoints(30))\n     * @param pcs defines the PCS it is associated to\n     */\n    function CloudPoint(particleIndex, group, groupId, idxInGroup, pcs) {\n        /**\n         * particle global index\n         */\n        this.idx = 0;\n        /**\n         * The color of the particle\n         */\n        this.color = new Color4(1.0, 1.0, 1.0, 1.0);\n        /**\n         * The world space position of the particle.\n         */\n        this.position = Vector3.Zero();\n        /**\n         * The world space rotation of the particle. (Not use if rotationQuaternion is set)\n         */\n        this.rotation = Vector3.Zero();\n        /**\n         * The uv of the particle.\n         */\n        this.uv = new Vector2(0.0, 0.0);\n        /**\n         * The current speed of the particle.\n         */\n        this.velocity = Vector3.Zero();\n        /**\n         * The pivot point in the particle local space.\n         */\n        this.pivot = Vector3.Zero();\n        /**\n         * Must the particle be translated from its pivot point in its local space ?\n         * In this case, the pivot point is set at the origin of the particle local space and the particle is translated.\n         * Default : false\n         */\n        this.translateFromPivot = false;\n        /**\n         * Index of this particle in the global \"positions\" array (Internal use)\n         * @hidden\n         */\n        this._pos = 0;\n        /**\n         * @hidden Index of this particle in the global \"indices\" array (Internal use)\n         */\n        this._ind = 0;\n        /**\n         * Group id of this particle\n         */\n        this.groupId = 0;\n        /**\n         * Index of the particle in its group id (Internal use)\n         */\n        this.idxInGroup = 0;\n        /**\n         * @hidden Still set as invisible in order to skip useless computations (Internal use)\n         */\n        this._stillInvisible = false;\n        /**\n         * @hidden Last computed particle rotation matrix\n         */\n        this._rotationMatrix = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];\n        /**\n         * Parent particle Id, if any.\n         * Default null.\n         */\n        this.parentId = null;\n        /**\n         * @hidden Internal global position in the PCS.\n         */\n        this._globalPosition = Vector3.Zero();\n        this.idx = particleIndex;\n        this._group = group;\n        this.groupId = groupId;\n        this.idxInGroup = idxInGroup;\n        this._pcs = pcs;\n    }\n    Object.defineProperty(CloudPoint.prototype, \"size\", {\n        /**\n         * get point size\n         */\n        get: function () {\n            return this.size;\n        },\n        /**\n         * Set point size\n         */\n        set: function (scale) {\n            this.size = scale;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CloudPoint.prototype, \"quaternion\", {\n        /**\n         * Legacy support, changed quaternion to rotationQuaternion\n         */\n        get: function () {\n            return this.rotationQuaternion;\n        },\n        /**\n         * Legacy support, changed quaternion to rotationQuaternion\n         */\n        set: function (q) {\n            this.rotationQuaternion = q;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns a boolean. True if the particle intersects a mesh, else false\n     * The intersection is computed on the particle position and Axis Aligned Bounding Box (AABB) or Sphere\n     * @param target is the object (point or mesh) what the intersection is computed against\n     * @param isSphere is boolean flag when false (default) bounding box of mesh is used, when true the bounding sphere is used\n     * @returns true if it intersects\n     */\n    CloudPoint.prototype.intersectsMesh = function (target, isSphere) {\n        if (!target.hasBoundingInfo) {\n            return false;\n        }\n        isSphere = isSphere ? isSphere : false;\n        if (isSphere) {\n            return target.getBoundingInfo().boundingSphere.intersectsPoint(this.position.add(this._pcs.mesh.position));\n        }\n        else {\n            var maxX = 0;\n            var minX = 0;\n            var maxY = 0;\n            var minY = 0;\n            var maxZ = 0;\n            var minZ = 0;\n            maxX = target.getBoundingInfo().boundingBox.maximumWorld.x;\n            minX = target.getBoundingInfo().boundingBox.minimumWorld.x;\n            maxY = target.getBoundingInfo().boundingBox.maximumWorld.y;\n            minY = target.getBoundingInfo().boundingBox.minimumWorld.y;\n            maxZ = target.getBoundingInfo().boundingBox.maximumWorld.z;\n            minZ = target.getBoundingInfo().boundingBox.minimumWorld.z;\n            var x = this.position.x + this._pcs.mesh.position.x;\n            var y = this.position.y + this._pcs.mesh.position.y;\n            var z = this.position.z + this._pcs.mesh.position.z;\n            return minX <= x && x <= maxX && minY <= y && y <= maxY && minZ <= z && z <= maxZ;\n        }\n    };\n    /**\n     * get the rotation matrix of the particle\n     * @param m\n     * @hidden\n     */\n    CloudPoint.prototype.getRotationMatrix = function (m) {\n        var quaternion;\n        if (this.rotationQuaternion) {\n            quaternion = this.rotationQuaternion;\n        }\n        else {\n            quaternion = TmpVectors.Quaternion[0];\n            var rotation = this.rotation;\n            Quaternion.RotationYawPitchRollToRef(rotation.y, rotation.x, rotation.z, quaternion);\n        }\n        quaternion.toRotationMatrix(m);\n    };\n    return CloudPoint;\n}());\nexport { CloudPoint };\n/**\n * Represents a group of points in a points cloud system\n *  * PCS internal tool, don't use it manually.\n */\nvar PointsGroup = /** @class */ (function () {\n    /**\n     * Creates a points group object. This is an internal reference to produce particles for the PCS.\n     * PCS internal tool, don't use it manually.\n     * @param id\n     * @param posFunction\n     * @hidden\n     */\n    function PointsGroup(id, posFunction) {\n        this.groupId = id;\n        this._positionFunction = posFunction;\n    }\n    Object.defineProperty(PointsGroup.prototype, \"groupID\", {\n        /**\n         * Get or set the groupId\n         * @deprecated Please use groupId instead\n         */\n        get: function () {\n            return this.groupId;\n        },\n        set: function (groupID) {\n            this.groupId = groupID;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return PointsGroup;\n}());\nexport { PointsGroup };\n//# sourceMappingURL=cloudPoint.js.map","import { Vector2, Vector3, TmpVectors, Vector4 } from \"../Maths/math.vector.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { Scalar } from \"../Maths/math.scalar.js\";\n/**\n * A particle represents one of the element emitted by a particle system.\n * This is mainly define by its coordinates, direction, velocity and age.\n */\nvar Particle = /** @class */ (function () {\n    /**\n     * Creates a new instance Particle\n     * @param particleSystem the particle system the particle belongs to\n     */\n    function Particle(\n    /**\n     * The particle system the particle belongs to.\n     */\n    particleSystem) {\n        this.particleSystem = particleSystem;\n        /**\n         * The world position of the particle in the scene.\n         */\n        this.position = Vector3.Zero();\n        /**\n         * The world direction of the particle in the scene.\n         */\n        this.direction = Vector3.Zero();\n        /**\n         * The color of the particle.\n         */\n        this.color = new Color4(0, 0, 0, 0);\n        /**\n         * The color change of the particle per step.\n         */\n        this.colorStep = new Color4(0, 0, 0, 0);\n        /**\n         * Defines how long will the life of the particle be.\n         */\n        this.lifeTime = 1.0;\n        /**\n         * The current age of the particle.\n         */\n        this.age = 0;\n        /**\n         * The current size of the particle.\n         */\n        this.size = 0;\n        /**\n         * The current scale of the particle.\n         */\n        this.scale = new Vector2(1, 1);\n        /**\n         * The current angle of the particle.\n         */\n        this.angle = 0;\n        /**\n         * Defines how fast is the angle changing.\n         */\n        this.angularSpeed = 0;\n        /**\n         * Defines the cell index used by the particle to be rendered from a sprite.\n         */\n        this.cellIndex = 0;\n        /** @hidden */\n        this._attachedSubEmitters = null;\n        /** @hidden */\n        this._currentColor1 = new Color4(0, 0, 0, 0);\n        /** @hidden */\n        this._currentColor2 = new Color4(0, 0, 0, 0);\n        /** @hidden */\n        this._currentSize1 = 0;\n        /** @hidden */\n        this._currentSize2 = 0;\n        /** @hidden */\n        this._currentAngularSpeed1 = 0;\n        /** @hidden */\n        this._currentAngularSpeed2 = 0;\n        /** @hidden */\n        this._currentVelocity1 = 0;\n        /** @hidden */\n        this._currentVelocity2 = 0;\n        /** @hidden */\n        this._currentLimitVelocity1 = 0;\n        /** @hidden */\n        this._currentLimitVelocity2 = 0;\n        /** @hidden */\n        this._currentDrag1 = 0;\n        /** @hidden */\n        this._currentDrag2 = 0;\n        this.id = Particle._Count++;\n        if (!this.particleSystem.isAnimationSheetEnabled) {\n            return;\n        }\n        this._updateCellInfoFromSystem();\n    }\n    Particle.prototype._updateCellInfoFromSystem = function () {\n        this.cellIndex = this.particleSystem.startSpriteCellID;\n    };\n    /**\n     * Defines how the sprite cell index is updated for the particle\n     */\n    Particle.prototype.updateCellIndex = function () {\n        var offsetAge = this.age;\n        var changeSpeed = this.particleSystem.spriteCellChangeSpeed;\n        if (this.particleSystem.spriteRandomStartCell) {\n            if (this._randomCellOffset === undefined) {\n                this._randomCellOffset = Math.random() * this.lifeTime;\n            }\n            if (changeSpeed === 0) {\n                // Special case when speed = 0 meaning we want to stay on initial cell\n                changeSpeed = 1;\n                offsetAge = this._randomCellOffset;\n            }\n            else {\n                offsetAge += this._randomCellOffset;\n            }\n        }\n        var dist = this._initialEndSpriteCellID - this._initialStartSpriteCellID;\n        var ratio;\n        if (this._initialSpriteCellLoop) {\n            ratio = Scalar.Clamp(((offsetAge * changeSpeed) % this.lifeTime) / this.lifeTime);\n        }\n        else {\n            ratio = Scalar.Clamp((offsetAge * changeSpeed) / this.lifeTime);\n        }\n        this.cellIndex = (this._initialStartSpriteCellID + ratio * dist) | 0;\n    };\n    /**\n     * @param subEmitter\n     * @hidden\n     */\n    Particle.prototype._inheritParticleInfoToSubEmitter = function (subEmitter) {\n        if (subEmitter.particleSystem.emitter.position) {\n            var emitterMesh = subEmitter.particleSystem.emitter;\n            emitterMesh.position.copyFrom(this.position);\n            if (subEmitter.inheritDirection) {\n                var temp = TmpVectors.Vector3[0];\n                this.direction.normalizeToRef(temp);\n                emitterMesh.setDirection(temp, 0, Math.PI / 2);\n            }\n        }\n        else {\n            var emitterPosition = subEmitter.particleSystem.emitter;\n            emitterPosition.copyFrom(this.position);\n        }\n        // Set inheritedVelocityOffset to be used when new particles are created\n        this.direction.scaleToRef(subEmitter.inheritedVelocityAmount / 2, TmpVectors.Vector3[0]);\n        subEmitter.particleSystem._inheritedVelocityOffset.copyFrom(TmpVectors.Vector3[0]);\n    };\n    /** @hidden */\n    Particle.prototype._inheritParticleInfoToSubEmitters = function () {\n        var _this = this;\n        if (this._attachedSubEmitters && this._attachedSubEmitters.length > 0) {\n            this._attachedSubEmitters.forEach(function (subEmitter) {\n                _this._inheritParticleInfoToSubEmitter(subEmitter);\n            });\n        }\n    };\n    /** @hidden */\n    Particle.prototype._reset = function () {\n        this.age = 0;\n        this.id = Particle._Count++;\n        this._currentColorGradient = null;\n        this._currentSizeGradient = null;\n        this._currentAngularSpeedGradient = null;\n        this._currentVelocityGradient = null;\n        this._currentLimitVelocityGradient = null;\n        this._currentDragGradient = null;\n        this.cellIndex = this.particleSystem.startSpriteCellID;\n        this._randomCellOffset = undefined;\n    };\n    /**\n     * Copy the properties of particle to another one.\n     * @param other the particle to copy the information to.\n     */\n    Particle.prototype.copyTo = function (other) {\n        other.position.copyFrom(this.position);\n        if (this._initialDirection) {\n            if (other._initialDirection) {\n                other._initialDirection.copyFrom(this._initialDirection);\n            }\n            else {\n                other._initialDirection = this._initialDirection.clone();\n            }\n        }\n        else {\n            other._initialDirection = null;\n        }\n        other.direction.copyFrom(this.direction);\n        if (this._localPosition) {\n            if (other._localPosition) {\n                other._localPosition.copyFrom(this._localPosition);\n            }\n            else {\n                other._localPosition = this._localPosition.clone();\n            }\n        }\n        other.color.copyFrom(this.color);\n        other.colorStep.copyFrom(this.colorStep);\n        other.lifeTime = this.lifeTime;\n        other.age = this.age;\n        other._randomCellOffset = this._randomCellOffset;\n        other.size = this.size;\n        other.scale.copyFrom(this.scale);\n        other.angle = this.angle;\n        other.angularSpeed = this.angularSpeed;\n        other.particleSystem = this.particleSystem;\n        other.cellIndex = this.cellIndex;\n        other.id = this.id;\n        other._attachedSubEmitters = this._attachedSubEmitters;\n        if (this._currentColorGradient) {\n            other._currentColorGradient = this._currentColorGradient;\n            other._currentColor1.copyFrom(this._currentColor1);\n            other._currentColor2.copyFrom(this._currentColor2);\n        }\n        if (this._currentSizeGradient) {\n            other._currentSizeGradient = this._currentSizeGradient;\n            other._currentSize1 = this._currentSize1;\n            other._currentSize2 = this._currentSize2;\n        }\n        if (this._currentAngularSpeedGradient) {\n            other._currentAngularSpeedGradient = this._currentAngularSpeedGradient;\n            other._currentAngularSpeed1 = this._currentAngularSpeed1;\n            other._currentAngularSpeed2 = this._currentAngularSpeed2;\n        }\n        if (this._currentVelocityGradient) {\n            other._currentVelocityGradient = this._currentVelocityGradient;\n            other._currentVelocity1 = this._currentVelocity1;\n            other._currentVelocity2 = this._currentVelocity2;\n        }\n        if (this._currentLimitVelocityGradient) {\n            other._currentLimitVelocityGradient = this._currentLimitVelocityGradient;\n            other._currentLimitVelocity1 = this._currentLimitVelocity1;\n            other._currentLimitVelocity2 = this._currentLimitVelocity2;\n        }\n        if (this._currentDragGradient) {\n            other._currentDragGradient = this._currentDragGradient;\n            other._currentDrag1 = this._currentDrag1;\n            other._currentDrag2 = this._currentDrag2;\n        }\n        if (this.particleSystem.isAnimationSheetEnabled) {\n            other._initialStartSpriteCellID = this._initialStartSpriteCellID;\n            other._initialEndSpriteCellID = this._initialEndSpriteCellID;\n            other._initialSpriteCellLoop = this._initialSpriteCellLoop;\n        }\n        if (this.particleSystem.useRampGradients) {\n            if (other.remapData && this.remapData) {\n                other.remapData.copyFrom(this.remapData);\n            }\n            else {\n                other.remapData = new Vector4(0, 0, 0, 0);\n            }\n        }\n        if (this._randomNoiseCoordinates1) {\n            if (other._randomNoiseCoordinates1) {\n                other._randomNoiseCoordinates1.copyFrom(this._randomNoiseCoordinates1);\n                other._randomNoiseCoordinates2.copyFrom(this._randomNoiseCoordinates2);\n            }\n            else {\n                other._randomNoiseCoordinates1 = this._randomNoiseCoordinates1.clone();\n                other._randomNoiseCoordinates2 = this._randomNoiseCoordinates2.clone();\n            }\n        }\n    };\n    Particle._Count = 0;\n    return Particle;\n}());\nexport { Particle };\n//# sourceMappingURL=particle.js.map","import { __assign, __extends } from \"tslib\";\nimport { FactorGradient, ColorGradient, Color3Gradient, GradientHelper } from \"../Misc/gradients.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector3, Matrix, TmpVectors, Vector4 } from \"../Maths/math.vector.js\";\nimport { Scalar } from \"../Maths/math.scalar.js\";\nimport { VertexBuffer, Buffer } from \"../Buffers/buffer.js\";\nimport { ImageProcessingConfiguration } from \"../Materials/imageProcessingConfiguration.js\";\nimport { RawTexture } from \"../Materials/Textures/rawTexture.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { BoxParticleEmitter, HemisphericParticleEmitter, SphereParticleEmitter, SphereDirectedParticleEmitter, CylinderParticleEmitter, ConeParticleEmitter, PointParticleEmitter, MeshParticleEmitter, CylinderDirectedParticleEmitter, } from \"../Particles/EmitterTypes/index.js\";\nimport { BaseParticleSystem } from \"./baseParticleSystem.js\";\nimport { Particle } from \"./particle.js\";\nimport { SubEmitter, SubEmitterType } from \"./subEmitter.js\";\n\nimport { SerializationHelper } from \"../Misc/decorators.js\";\nimport { GetClass } from \"../Misc/typeStore.js\";\nimport { DrawWrapper } from \"../Materials/drawWrapper.js\";\nimport \"../Shaders/particles.fragment.js\";\nimport \"../Shaders/particles.vertex.js\";\nimport { Color4, Color3, TmpColors } from \"../Maths/math.color.js\";\nimport { ThinEngine } from \"../Engines/thinEngine.js\";\nimport { ThinMaterialHelper } from \"../Materials/thinMaterialHelper.js\";\nimport \"../Engines/Extensions/engine.alpha.js\";\n/**\n * This represents a particle system in Babylon.\n * Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.\n * Particles can take different shapes while emitted like box, sphere, cone or you can write your custom function.\n * @example https://doc.babylonjs.com/babylon101/particles\n */\nvar ParticleSystem = /** @class */ (function (_super) {\n    __extends(ParticleSystem, _super);\n    /**\n     * Instantiates a particle system.\n     * Particles are often small sprites used to simulate hard-to-reproduce phenomena like fire, smoke, water, or abstract visual effects like magic glitter and faery dust.\n     * @param name The name of the particle system\n     * @param capacity The max number of particles alive at the same time\n     * @param sceneOrEngine The scene the particle system belongs to or the engine to use if no scene\n     * @param customEffect a custom effect used to change the way particles are rendered by default\n     * @param isAnimationSheetEnabled Must be true if using a spritesheet to animate the particles texture\n     * @param epsilon Offset used to render the particles\n     */\n    function ParticleSystem(name, capacity, sceneOrEngine, customEffect, isAnimationSheetEnabled, epsilon) {\n        if (customEffect === void 0) { customEffect = null; }\n        if (isAnimationSheetEnabled === void 0) { isAnimationSheetEnabled = false; }\n        if (epsilon === void 0) { epsilon = 0.01; }\n        var _this = _super.call(this, name) || this;\n        _this._emitterInverseWorldMatrix = Matrix.Identity();\n        /**\n         * @hidden\n         */\n        _this._inheritedVelocityOffset = new Vector3();\n        /**\n         * An event triggered when the system is disposed\n         */\n        _this.onDisposeObservable = new Observable();\n        /**\n         * An event triggered when the system is stopped\n         */\n        _this.onStoppedObservable = new Observable();\n        _this._particles = new Array();\n        _this._stockParticles = new Array();\n        _this._newPartsExcess = 0;\n        _this._vertexBuffers = {};\n        _this._scaledColorStep = new Color4(0, 0, 0, 0);\n        _this._colorDiff = new Color4(0, 0, 0, 0);\n        _this._scaledDirection = Vector3.Zero();\n        _this._scaledGravity = Vector3.Zero();\n        _this._currentRenderId = -1;\n        _this._useInstancing = false;\n        _this._started = false;\n        _this._stopped = false;\n        _this._actualFrame = 0;\n        /** @hidden */\n        _this._currentEmitRate1 = 0;\n        /** @hidden */\n        _this._currentEmitRate2 = 0;\n        /** @hidden */\n        _this._currentStartSize1 = 0;\n        /** @hidden */\n        _this._currentStartSize2 = 0;\n        _this._rawTextureWidth = 256;\n        _this._useRampGradients = false;\n        /**\n         * @hidden\n         * If the particle systems emitter should be disposed when the particle system is disposed\n         */\n        _this._disposeEmitterOnDispose = false;\n        /**\n         * Specifies if the particles are updated in emitter local space or world space\n         */\n        _this.isLocal = false;\n        /** @hidden */\n        _this._onBeforeDrawParticlesObservable = null;\n        // start of sub system methods\n        /**\n         * \"Recycles\" one of the particle by copying it back to the \"stock\" of particles and removing it from the active list.\n         * Its lifetime will start back at 0.\n         * @param particle\n         */\n        _this.recycleParticle = function (particle) {\n            // move particle from activeParticle list to stock particles\n            var lastParticle = _this._particles.pop();\n            if (lastParticle !== particle) {\n                lastParticle.copyTo(particle);\n            }\n            _this._stockParticles.push(lastParticle);\n        };\n        _this._createParticle = function () {\n            var particle;\n            if (_this._stockParticles.length !== 0) {\n                particle = _this._stockParticles.pop();\n                particle._reset();\n            }\n            else {\n                particle = new Particle(_this);\n            }\n            // Attach emitters\n            if (_this._subEmitters && _this._subEmitters.length > 0) {\n                var subEmitters = _this._subEmitters[Math.floor(Math.random() * _this._subEmitters.length)];\n                particle._attachedSubEmitters = [];\n                subEmitters.forEach(function (subEmitter) {\n                    if (subEmitter.type === SubEmitterType.ATTACHED) {\n                        var newEmitter = subEmitter.clone();\n                        particle._attachedSubEmitters.push(newEmitter);\n                        newEmitter.particleSystem.start();\n                    }\n                });\n            }\n            return particle;\n        };\n        _this._emitFromParticle = function (particle) {\n            if (!_this._subEmitters || _this._subEmitters.length === 0) {\n                return;\n            }\n            var templateIndex = Math.floor(Math.random() * _this._subEmitters.length);\n            _this._subEmitters[templateIndex].forEach(function (subEmitter) {\n                if (subEmitter.type === SubEmitterType.END) {\n                    var subSystem = subEmitter.clone();\n                    particle._inheritParticleInfoToSubEmitter(subSystem);\n                    subSystem.particleSystem._rootParticleSystem = _this;\n                    _this.activeSubSystems.push(subSystem.particleSystem);\n                    subSystem.particleSystem.start();\n                }\n            });\n        };\n        _this._capacity = capacity;\n        _this._epsilon = epsilon;\n        _this._isAnimationSheetEnabled = isAnimationSheetEnabled;\n        if (!sceneOrEngine || sceneOrEngine.getClassName() === \"Scene\") {\n            _this._scene = sceneOrEngine || EngineStore.LastCreatedScene;\n            _this._engine = _this._scene.getEngine();\n            _this.uniqueId = _this._scene.getUniqueId();\n            _this._scene.particleSystems.push(_this);\n        }\n        else {\n            _this._engine = sceneOrEngine;\n            _this.defaultProjectionMatrix = Matrix.PerspectiveFovLH(0.8, 1, 0.1, 100, _this._engine.isNDCHalfZRange);\n        }\n        if (_this._engine.getCaps().vertexArrayObject) {\n            _this._vertexArrayObject = null;\n        }\n        // Setup the default processing configuration to the scene.\n        _this._attachImageProcessingConfiguration(null);\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        _this._customWrappers = { 0: new DrawWrapper(_this._engine) };\n        _this._customWrappers[0].effect = customEffect;\n        _this._drawWrappers = [];\n        _this._useInstancing = _this._engine.getCaps().instancedArrays;\n        _this._createIndexBuffer();\n        _this._createVertexBuffers();\n        // Default emitter type\n        _this.particleEmitterType = new BoxParticleEmitter();\n        var noiseTextureData = null;\n        // Update\n        _this.updateFunction = function (particles) {\n            var _a;\n            var noiseTextureSize = null;\n            if (_this.noiseTexture) {\n                // We need to get texture data back to CPU\n                noiseTextureSize = _this.noiseTexture.getSize();\n                (_a = _this.noiseTexture.getContent()) === null || _a === void 0 ? void 0 : _a.then(function (data) {\n                    noiseTextureData = data;\n                });\n            }\n            var _loop_1 = function (index) {\n                var particle = particles[index];\n                var scaledUpdateSpeed = _this._scaledUpdateSpeed;\n                var previousAge = particle.age;\n                particle.age += scaledUpdateSpeed;\n                // Evaluate step to death\n                if (particle.age > particle.lifeTime) {\n                    var diff = particle.age - previousAge;\n                    var oldDiff = particle.lifeTime - previousAge;\n                    scaledUpdateSpeed = (oldDiff * scaledUpdateSpeed) / diff;\n                    particle.age = particle.lifeTime;\n                }\n                var ratio = particle.age / particle.lifeTime;\n                // Color\n                if (_this._colorGradients && _this._colorGradients.length > 0) {\n                    GradientHelper.GetCurrentGradient(ratio, _this._colorGradients, function (currentGradient, nextGradient, scale) {\n                        if (currentGradient !== particle._currentColorGradient) {\n                            particle._currentColor1.copyFrom(particle._currentColor2);\n                            nextGradient.getColorToRef(particle._currentColor2);\n                            particle._currentColorGradient = currentGradient;\n                        }\n                        Color4.LerpToRef(particle._currentColor1, particle._currentColor2, scale, particle.color);\n                    });\n                }\n                else {\n                    particle.colorStep.scaleToRef(scaledUpdateSpeed, _this._scaledColorStep);\n                    particle.color.addInPlace(_this._scaledColorStep);\n                    if (particle.color.a < 0) {\n                        particle.color.a = 0;\n                    }\n                }\n                // Angular speed\n                if (_this._angularSpeedGradients && _this._angularSpeedGradients.length > 0) {\n                    GradientHelper.GetCurrentGradient(ratio, _this._angularSpeedGradients, function (currentGradient, nextGradient, scale) {\n                        if (currentGradient !== particle._currentAngularSpeedGradient) {\n                            particle._currentAngularSpeed1 = particle._currentAngularSpeed2;\n                            particle._currentAngularSpeed2 = nextGradient.getFactor();\n                            particle._currentAngularSpeedGradient = currentGradient;\n                        }\n                        particle.angularSpeed = Scalar.Lerp(particle._currentAngularSpeed1, particle._currentAngularSpeed2, scale);\n                    });\n                }\n                particle.angle += particle.angularSpeed * scaledUpdateSpeed;\n                // Direction\n                var directionScale = scaledUpdateSpeed;\n                /// Velocity\n                if (_this._velocityGradients && _this._velocityGradients.length > 0) {\n                    GradientHelper.GetCurrentGradient(ratio, _this._velocityGradients, function (currentGradient, nextGradient, scale) {\n                        if (currentGradient !== particle._currentVelocityGradient) {\n                            particle._currentVelocity1 = particle._currentVelocity2;\n                            particle._currentVelocity2 = nextGradient.getFactor();\n                            particle._currentVelocityGradient = currentGradient;\n                        }\n                        directionScale *= Scalar.Lerp(particle._currentVelocity1, particle._currentVelocity2, scale);\n                    });\n                }\n                particle.direction.scaleToRef(directionScale, _this._scaledDirection);\n                /// Limit velocity\n                if (_this._limitVelocityGradients && _this._limitVelocityGradients.length > 0) {\n                    GradientHelper.GetCurrentGradient(ratio, _this._limitVelocityGradients, function (currentGradient, nextGradient, scale) {\n                        if (currentGradient !== particle._currentLimitVelocityGradient) {\n                            particle._currentLimitVelocity1 = particle._currentLimitVelocity2;\n                            particle._currentLimitVelocity2 = nextGradient.getFactor();\n                            particle._currentLimitVelocityGradient = currentGradient;\n                        }\n                        var limitVelocity = Scalar.Lerp(particle._currentLimitVelocity1, particle._currentLimitVelocity2, scale);\n                        var currentVelocity = particle.direction.length();\n                        if (currentVelocity > limitVelocity) {\n                            particle.direction.scaleInPlace(_this.limitVelocityDamping);\n                        }\n                    });\n                }\n                /// Drag\n                if (_this._dragGradients && _this._dragGradients.length > 0) {\n                    GradientHelper.GetCurrentGradient(ratio, _this._dragGradients, function (currentGradient, nextGradient, scale) {\n                        if (currentGradient !== particle._currentDragGradient) {\n                            particle._currentDrag1 = particle._currentDrag2;\n                            particle._currentDrag2 = nextGradient.getFactor();\n                            particle._currentDragGradient = currentGradient;\n                        }\n                        var drag = Scalar.Lerp(particle._currentDrag1, particle._currentDrag2, scale);\n                        _this._scaledDirection.scaleInPlace(1.0 - drag);\n                    });\n                }\n                if (_this.isLocal && particle._localPosition) {\n                    particle._localPosition.addInPlace(_this._scaledDirection);\n                    Vector3.TransformCoordinatesToRef(particle._localPosition, _this._emitterWorldMatrix, particle.position);\n                }\n                else {\n                    particle.position.addInPlace(_this._scaledDirection);\n                }\n                // Noise\n                if (noiseTextureData && noiseTextureSize && particle._randomNoiseCoordinates1) {\n                    var fetchedColorR = _this._fetchR(particle._randomNoiseCoordinates1.x, particle._randomNoiseCoordinates1.y, noiseTextureSize.width, noiseTextureSize.height, noiseTextureData);\n                    var fetchedColorG = _this._fetchR(particle._randomNoiseCoordinates1.z, particle._randomNoiseCoordinates2.x, noiseTextureSize.width, noiseTextureSize.height, noiseTextureData);\n                    var fetchedColorB = _this._fetchR(particle._randomNoiseCoordinates2.y, particle._randomNoiseCoordinates2.z, noiseTextureSize.width, noiseTextureSize.height, noiseTextureData);\n                    var force = TmpVectors.Vector3[0];\n                    var scaledForce = TmpVectors.Vector3[1];\n                    force.copyFromFloats((2 * fetchedColorR - 1) * _this.noiseStrength.x, (2 * fetchedColorG - 1) * _this.noiseStrength.y, (2 * fetchedColorB - 1) * _this.noiseStrength.z);\n                    force.scaleToRef(scaledUpdateSpeed, scaledForce);\n                    particle.direction.addInPlace(scaledForce);\n                }\n                // Gravity\n                _this.gravity.scaleToRef(scaledUpdateSpeed, _this._scaledGravity);\n                particle.direction.addInPlace(_this._scaledGravity);\n                // Size\n                if (_this._sizeGradients && _this._sizeGradients.length > 0) {\n                    GradientHelper.GetCurrentGradient(ratio, _this._sizeGradients, function (currentGradient, nextGradient, scale) {\n                        if (currentGradient !== particle._currentSizeGradient) {\n                            particle._currentSize1 = particle._currentSize2;\n                            particle._currentSize2 = nextGradient.getFactor();\n                            particle._currentSizeGradient = currentGradient;\n                        }\n                        particle.size = Scalar.Lerp(particle._currentSize1, particle._currentSize2, scale);\n                    });\n                }\n                // Remap data\n                if (_this._useRampGradients) {\n                    if (_this._colorRemapGradients && _this._colorRemapGradients.length > 0) {\n                        GradientHelper.GetCurrentGradient(ratio, _this._colorRemapGradients, function (currentGradient, nextGradient, scale) {\n                            var min = Scalar.Lerp(currentGradient.factor1, nextGradient.factor1, scale);\n                            var max = Scalar.Lerp(currentGradient.factor2, nextGradient.factor2, scale);\n                            particle.remapData.x = min;\n                            particle.remapData.y = max - min;\n                        });\n                    }\n                    if (_this._alphaRemapGradients && _this._alphaRemapGradients.length > 0) {\n                        GradientHelper.GetCurrentGradient(ratio, _this._alphaRemapGradients, function (currentGradient, nextGradient, scale) {\n                            var min = Scalar.Lerp(currentGradient.factor1, nextGradient.factor1, scale);\n                            var max = Scalar.Lerp(currentGradient.factor2, nextGradient.factor2, scale);\n                            particle.remapData.z = min;\n                            particle.remapData.w = max - min;\n                        });\n                    }\n                }\n                if (_this._isAnimationSheetEnabled) {\n                    particle.updateCellIndex();\n                }\n                // Update the position of the attached sub-emitters to match their attached particle\n                particle._inheritParticleInfoToSubEmitters();\n                if (particle.age >= particle.lifeTime) {\n                    // Recycle by swapping with last particle\n                    _this._emitFromParticle(particle);\n                    if (particle._attachedSubEmitters) {\n                        particle._attachedSubEmitters.forEach(function (subEmitter) {\n                            subEmitter.particleSystem.disposeOnStop = true;\n                            subEmitter.particleSystem.stop();\n                        });\n                        particle._attachedSubEmitters = null;\n                    }\n                    _this.recycleParticle(particle);\n                    index--;\n                    return out_index_1 = index, \"continue\";\n                }\n                out_index_1 = index;\n            };\n            var out_index_1;\n            for (var index = 0; index < particles.length; index++) {\n                _loop_1(index);\n                index = out_index_1;\n            }\n        };\n        return _this;\n    }\n    Object.defineProperty(ParticleSystem.prototype, \"onDispose\", {\n        /**\n         * Sets a callback that will be triggered when the system is disposed\n         */\n        set: function (callback) {\n            if (this._onDisposeObserver) {\n                this.onDisposeObservable.remove(this._onDisposeObserver);\n            }\n            this._onDisposeObserver = this.onDisposeObservable.add(callback);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ParticleSystem.prototype, \"useRampGradients\", {\n        /** Gets or sets a boolean indicating that ramp gradients must be used\n         * @see https://doc.babylonjs.com/babylon101/particles#ramp-gradients\n         */\n        get: function () {\n            return this._useRampGradients;\n        },\n        set: function (value) {\n            if (this._useRampGradients === value) {\n                return;\n            }\n            this._useRampGradients = value;\n            this._resetEffect();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ParticleSystem.prototype, \"particles\", {\n        //end of Sub-emitter\n        /**\n         * Gets the current list of active particles\n         */\n        get: function () {\n            return this._particles;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the number of particles active at the same time.\n     * @returns The number of active particles.\n     */\n    ParticleSystem.prototype.getActiveCount = function () {\n        return this._particles.length;\n    };\n    /**\n     * Returns the string \"ParticleSystem\"\n     * @returns a string containing the class name\n     */\n    ParticleSystem.prototype.getClassName = function () {\n        return \"ParticleSystem\";\n    };\n    /**\n     * Gets a boolean indicating that the system is stopping\n     * @returns true if the system is currently stopping\n     */\n    ParticleSystem.prototype.isStopping = function () {\n        return this._stopped && this.isAlive();\n    };\n    /**\n     * Gets the custom effect used to render the particles\n     * @param blendMode Blend mode for which the effect should be retrieved\n     * @returns The effect\n     */\n    ParticleSystem.prototype.getCustomEffect = function (blendMode) {\n        var _a, _b;\n        if (blendMode === void 0) { blendMode = 0; }\n        return (_b = (_a = this._customWrappers[blendMode]) === null || _a === void 0 ? void 0 : _a.effect) !== null && _b !== void 0 ? _b : this._customWrappers[0].effect;\n    };\n    ParticleSystem.prototype._getCustomDrawWrapper = function (blendMode) {\n        var _a;\n        if (blendMode === void 0) { blendMode = 0; }\n        return (_a = this._customWrappers[blendMode]) !== null && _a !== void 0 ? _a : this._customWrappers[0];\n    };\n    /**\n     * Sets the custom effect used to render the particles\n     * @param effect The effect to set\n     * @param blendMode Blend mode for which the effect should be set\n     */\n    ParticleSystem.prototype.setCustomEffect = function (effect, blendMode) {\n        if (blendMode === void 0) { blendMode = 0; }\n        this._customWrappers[blendMode] = new DrawWrapper(this._engine);\n        this._customWrappers[blendMode].effect = effect;\n        if (this._customWrappers[blendMode].drawContext) {\n            this._customWrappers[blendMode].drawContext.useInstancing = this._useInstancing;\n        }\n    };\n    Object.defineProperty(ParticleSystem.prototype, \"onBeforeDrawParticlesObservable\", {\n        /**\n         * Observable that will be called just before the particles are drawn\n         */\n        get: function () {\n            if (!this._onBeforeDrawParticlesObservable) {\n                this._onBeforeDrawParticlesObservable = new Observable();\n            }\n            return this._onBeforeDrawParticlesObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ParticleSystem.prototype, \"vertexShaderName\", {\n        /**\n         * Gets the name of the particle vertex shader\n         */\n        get: function () {\n            return \"particles\";\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ParticleSystem.prototype, \"vertexBuffers\", {\n        /**\n         * Gets the vertex buffers used by the particle system\n         */\n        get: function () {\n            return this._vertexBuffers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ParticleSystem.prototype, \"indexBuffer\", {\n        /**\n         * Gets the index buffer used by the particle system (or null if no index buffer is used (if _useInstancing=true))\n         */\n        get: function () {\n            return this._indexBuffer;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ParticleSystem.prototype._addFactorGradient = function (factorGradients, gradient, factor, factor2) {\n        var newGradient = new FactorGradient(gradient, factor, factor2);\n        factorGradients.push(newGradient);\n        factorGradients.sort(function (a, b) {\n            if (a.gradient < b.gradient) {\n                return -1;\n            }\n            else if (a.gradient > b.gradient) {\n                return 1;\n            }\n            return 0;\n        });\n    };\n    ParticleSystem.prototype._removeFactorGradient = function (factorGradients, gradient) {\n        if (!factorGradients) {\n            return;\n        }\n        var index = 0;\n        for (var _i = 0, factorGradients_1 = factorGradients; _i < factorGradients_1.length; _i++) {\n            var factorGradient = factorGradients_1[_i];\n            if (factorGradient.gradient === gradient) {\n                factorGradients.splice(index, 1);\n                break;\n            }\n            index++;\n        }\n    };\n    /**\n     * Adds a new life time gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the life time factor to affect to the specified gradient\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.addLifeTimeGradient = function (gradient, factor, factor2) {\n        if (!this._lifeTimeGradients) {\n            this._lifeTimeGradients = [];\n        }\n        this._addFactorGradient(this._lifeTimeGradients, gradient, factor, factor2);\n        return this;\n    };\n    /**\n     * Remove a specific life time gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.removeLifeTimeGradient = function (gradient) {\n        this._removeFactorGradient(this._lifeTimeGradients, gradient);\n        return this;\n    };\n    /**\n     * Adds a new size gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the size factor to affect to the specified gradient\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.addSizeGradient = function (gradient, factor, factor2) {\n        if (!this._sizeGradients) {\n            this._sizeGradients = [];\n        }\n        this._addFactorGradient(this._sizeGradients, gradient, factor, factor2);\n        return this;\n    };\n    /**\n     * Remove a specific size gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.removeSizeGradient = function (gradient) {\n        this._removeFactorGradient(this._sizeGradients, gradient);\n        return this;\n    };\n    /**\n     * Adds a new color remap gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param min defines the color remap minimal range\n     * @param max defines the color remap maximal range\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.addColorRemapGradient = function (gradient, min, max) {\n        if (!this._colorRemapGradients) {\n            this._colorRemapGradients = [];\n        }\n        this._addFactorGradient(this._colorRemapGradients, gradient, min, max);\n        return this;\n    };\n    /**\n     * Remove a specific color remap gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.removeColorRemapGradient = function (gradient) {\n        this._removeFactorGradient(this._colorRemapGradients, gradient);\n        return this;\n    };\n    /**\n     * Adds a new alpha remap gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param min defines the alpha remap minimal range\n     * @param max defines the alpha remap maximal range\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.addAlphaRemapGradient = function (gradient, min, max) {\n        if (!this._alphaRemapGradients) {\n            this._alphaRemapGradients = [];\n        }\n        this._addFactorGradient(this._alphaRemapGradients, gradient, min, max);\n        return this;\n    };\n    /**\n     * Remove a specific alpha remap gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.removeAlphaRemapGradient = function (gradient) {\n        this._removeFactorGradient(this._alphaRemapGradients, gradient);\n        return this;\n    };\n    /**\n     * Adds a new angular speed gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the angular speed  to affect to the specified gradient\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.addAngularSpeedGradient = function (gradient, factor, factor2) {\n        if (!this._angularSpeedGradients) {\n            this._angularSpeedGradients = [];\n        }\n        this._addFactorGradient(this._angularSpeedGradients, gradient, factor, factor2);\n        return this;\n    };\n    /**\n     * Remove a specific angular speed gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.removeAngularSpeedGradient = function (gradient) {\n        this._removeFactorGradient(this._angularSpeedGradients, gradient);\n        return this;\n    };\n    /**\n     * Adds a new velocity gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the velocity to affect to the specified gradient\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.addVelocityGradient = function (gradient, factor, factor2) {\n        if (!this._velocityGradients) {\n            this._velocityGradients = [];\n        }\n        this._addFactorGradient(this._velocityGradients, gradient, factor, factor2);\n        return this;\n    };\n    /**\n     * Remove a specific velocity gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.removeVelocityGradient = function (gradient) {\n        this._removeFactorGradient(this._velocityGradients, gradient);\n        return this;\n    };\n    /**\n     * Adds a new limit velocity gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the limit velocity value to affect to the specified gradient\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.addLimitVelocityGradient = function (gradient, factor, factor2) {\n        if (!this._limitVelocityGradients) {\n            this._limitVelocityGradients = [];\n        }\n        this._addFactorGradient(this._limitVelocityGradients, gradient, factor, factor2);\n        return this;\n    };\n    /**\n     * Remove a specific limit velocity gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.removeLimitVelocityGradient = function (gradient) {\n        this._removeFactorGradient(this._limitVelocityGradients, gradient);\n        return this;\n    };\n    /**\n     * Adds a new drag gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the drag value to affect to the specified gradient\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.addDragGradient = function (gradient, factor, factor2) {\n        if (!this._dragGradients) {\n            this._dragGradients = [];\n        }\n        this._addFactorGradient(this._dragGradients, gradient, factor, factor2);\n        return this;\n    };\n    /**\n     * Remove a specific drag gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.removeDragGradient = function (gradient) {\n        this._removeFactorGradient(this._dragGradients, gradient);\n        return this;\n    };\n    /**\n     * Adds a new emit rate gradient (please note that this will only work if you set the targetStopDuration property)\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the emit rate value to affect to the specified gradient\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.addEmitRateGradient = function (gradient, factor, factor2) {\n        if (!this._emitRateGradients) {\n            this._emitRateGradients = [];\n        }\n        this._addFactorGradient(this._emitRateGradients, gradient, factor, factor2);\n        return this;\n    };\n    /**\n     * Remove a specific emit rate gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.removeEmitRateGradient = function (gradient) {\n        this._removeFactorGradient(this._emitRateGradients, gradient);\n        return this;\n    };\n    /**\n     * Adds a new start size gradient (please note that this will only work if you set the targetStopDuration property)\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param factor defines the start size value to affect to the specified gradient\n     * @param factor2 defines an additional factor used to define a range ([factor, factor2]) with main value to pick the final value from\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.addStartSizeGradient = function (gradient, factor, factor2) {\n        if (!this._startSizeGradients) {\n            this._startSizeGradients = [];\n        }\n        this._addFactorGradient(this._startSizeGradients, gradient, factor, factor2);\n        return this;\n    };\n    /**\n     * Remove a specific start size gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.removeStartSizeGradient = function (gradient) {\n        this._removeFactorGradient(this._startSizeGradients, gradient);\n        return this;\n    };\n    ParticleSystem.prototype._createRampGradientTexture = function () {\n        if (!this._rampGradients || !this._rampGradients.length || this._rampGradientsTexture || !this._scene) {\n            return;\n        }\n        var data = new Uint8Array(this._rawTextureWidth * 4);\n        var tmpColor = TmpColors.Color3[0];\n        var _loop_2 = function (x) {\n            var ratio = x / this_1._rawTextureWidth;\n            GradientHelper.GetCurrentGradient(ratio, this_1._rampGradients, function (currentGradient, nextGradient, scale) {\n                Color3.LerpToRef(currentGradient.color, nextGradient.color, scale, tmpColor);\n                data[x * 4] = tmpColor.r * 255;\n                data[x * 4 + 1] = tmpColor.g * 255;\n                data[x * 4 + 2] = tmpColor.b * 255;\n                data[x * 4 + 3] = 255;\n            });\n        };\n        var this_1 = this;\n        for (var x = 0; x < this._rawTextureWidth; x++) {\n            _loop_2(x);\n        }\n        this._rampGradientsTexture = RawTexture.CreateRGBATexture(data, this._rawTextureWidth, 1, this._scene, false, false, 1);\n    };\n    /**\n     * Gets the current list of ramp gradients.\n     * You must use addRampGradient and removeRampGradient to update this list\n     * @returns the list of ramp gradients\n     */\n    ParticleSystem.prototype.getRampGradients = function () {\n        return this._rampGradients;\n    };\n    /** Force the system to rebuild all gradients that need to be resync */\n    ParticleSystem.prototype.forceRefreshGradients = function () {\n        this._syncRampGradientTexture();\n    };\n    ParticleSystem.prototype._syncRampGradientTexture = function () {\n        if (!this._rampGradients) {\n            return;\n        }\n        this._rampGradients.sort(function (a, b) {\n            if (a.gradient < b.gradient) {\n                return -1;\n            }\n            else if (a.gradient > b.gradient) {\n                return 1;\n            }\n            return 0;\n        });\n        if (this._rampGradientsTexture) {\n            this._rampGradientsTexture.dispose();\n            this._rampGradientsTexture = null;\n        }\n        this._createRampGradientTexture();\n    };\n    /**\n     * Adds a new ramp gradient used to remap particle colors\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param color defines the color to affect to the specified gradient\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.addRampGradient = function (gradient, color) {\n        if (!this._rampGradients) {\n            this._rampGradients = [];\n        }\n        var rampGradient = new Color3Gradient(gradient, color);\n        this._rampGradients.push(rampGradient);\n        this._syncRampGradientTexture();\n        return this;\n    };\n    /**\n     * Remove a specific ramp gradient\n     * @param gradient defines the gradient to remove\n     * @returns the current particle system\n     */\n    ParticleSystem.prototype.removeRampGradient = function (gradient) {\n        this._removeGradientAndTexture(gradient, this._rampGradients, this._rampGradientsTexture);\n        this._rampGradientsTexture = null;\n        if (this._rampGradients && this._rampGradients.length > 0) {\n            this._createRampGradientTexture();\n        }\n        return this;\n    };\n    /**\n     * Adds a new color gradient\n     * @param gradient defines the gradient to use (between 0 and 1)\n     * @param color1 defines the color to affect to the specified gradient\n     * @param color2 defines an additional color used to define a range ([color, color2]) with main color to pick the final color from\n     * @returns this particle system\n     */\n    ParticleSystem.prototype.addColorGradient = function (gradient, color1, color2) {\n        if (!this._colorGradients) {\n            this._colorGradients = [];\n        }\n        var colorGradient = new ColorGradient(gradient, color1, color2);\n        this._colorGradients.push(colorGradient);\n        this._colorGradients.sort(function (a, b) {\n            if (a.gradient < b.gradient) {\n                return -1;\n            }\n            else if (a.gradient > b.gradient) {\n                return 1;\n            }\n            return 0;\n        });\n        return this;\n    };\n    /**\n     * Remove a specific color gradient\n     * @param gradient defines the gradient to remove\n     * @returns this particle system\n     */\n    ParticleSystem.prototype.removeColorGradient = function (gradient) {\n        if (!this._colorGradients) {\n            return this;\n        }\n        var index = 0;\n        for (var _i = 0, _a = this._colorGradients; _i < _a.length; _i++) {\n            var colorGradient = _a[_i];\n            if (colorGradient.gradient === gradient) {\n                this._colorGradients.splice(index, 1);\n                break;\n            }\n            index++;\n        }\n        return this;\n    };\n    /**\n     * Resets the draw wrappers cache\n     */\n    ParticleSystem.prototype.resetDrawCache = function () {\n        for (var _i = 0, _a = this._drawWrappers; _i < _a.length; _i++) {\n            var drawWrappers = _a[_i];\n            if (drawWrappers) {\n                for (var _b = 0, drawWrappers_1 = drawWrappers; _b < drawWrappers_1.length; _b++) {\n                    var drawWrapper = drawWrappers_1[_b];\n                    drawWrapper === null || drawWrapper === void 0 ? void 0 : drawWrapper.dispose();\n                }\n            }\n        }\n        this._drawWrappers = [];\n    };\n    ParticleSystem.prototype._fetchR = function (u, v, width, height, pixels) {\n        u = Math.abs(u) * 0.5 + 0.5;\n        v = Math.abs(v) * 0.5 + 0.5;\n        var wrappedU = (u * width) % width | 0;\n        var wrappedV = (v * height) % height | 0;\n        var position = (wrappedU + wrappedV * width) * 4;\n        return pixels[position] / 255;\n    };\n    ParticleSystem.prototype._reset = function () {\n        this._resetEffect();\n    };\n    ParticleSystem.prototype._resetEffect = function () {\n        if (this._vertexBuffer) {\n            this._vertexBuffer.dispose();\n            this._vertexBuffer = null;\n        }\n        if (this._spriteBuffer) {\n            this._spriteBuffer.dispose();\n            this._spriteBuffer = null;\n        }\n        if (this._vertexArrayObject) {\n            this._engine.releaseVertexArrayObject(this._vertexArrayObject);\n            this._vertexArrayObject = null;\n        }\n        this._createVertexBuffers();\n    };\n    ParticleSystem.prototype._createVertexBuffers = function () {\n        this._vertexBufferSize = this._useInstancing ? 10 : 12;\n        if (this._isAnimationSheetEnabled) {\n            this._vertexBufferSize += 1;\n        }\n        if (!this._isBillboardBased || this.billboardMode === ParticleSystem.BILLBOARDMODE_STRETCHED) {\n            this._vertexBufferSize += 3;\n        }\n        if (this._useRampGradients) {\n            this._vertexBufferSize += 4;\n        }\n        var engine = this._engine;\n        var vertexSize = this._vertexBufferSize * (this._useInstancing ? 1 : 4);\n        this._vertexData = new Float32Array(this._capacity * vertexSize);\n        this._vertexBuffer = new Buffer(engine, this._vertexData, true, vertexSize);\n        var dataOffset = 0;\n        var positions = this._vertexBuffer.createVertexBuffer(VertexBuffer.PositionKind, dataOffset, 3, this._vertexBufferSize, this._useInstancing);\n        this._vertexBuffers[VertexBuffer.PositionKind] = positions;\n        dataOffset += 3;\n        var colors = this._vertexBuffer.createVertexBuffer(VertexBuffer.ColorKind, dataOffset, 4, this._vertexBufferSize, this._useInstancing);\n        this._vertexBuffers[VertexBuffer.ColorKind] = colors;\n        dataOffset += 4;\n        var options = this._vertexBuffer.createVertexBuffer(\"angle\", dataOffset, 1, this._vertexBufferSize, this._useInstancing);\n        this._vertexBuffers[\"angle\"] = options;\n        dataOffset += 1;\n        var size = this._vertexBuffer.createVertexBuffer(\"size\", dataOffset, 2, this._vertexBufferSize, this._useInstancing);\n        this._vertexBuffers[\"size\"] = size;\n        dataOffset += 2;\n        if (this._isAnimationSheetEnabled) {\n            var cellIndexBuffer = this._vertexBuffer.createVertexBuffer(\"cellIndex\", dataOffset, 1, this._vertexBufferSize, this._useInstancing);\n            this._vertexBuffers[\"cellIndex\"] = cellIndexBuffer;\n            dataOffset += 1;\n        }\n        if (!this._isBillboardBased || this.billboardMode === ParticleSystem.BILLBOARDMODE_STRETCHED) {\n            var directionBuffer = this._vertexBuffer.createVertexBuffer(\"direction\", dataOffset, 3, this._vertexBufferSize, this._useInstancing);\n            this._vertexBuffers[\"direction\"] = directionBuffer;\n            dataOffset += 3;\n        }\n        if (this._useRampGradients) {\n            var rampDataBuffer = this._vertexBuffer.createVertexBuffer(\"remapData\", dataOffset, 4, this._vertexBufferSize, this._useInstancing);\n            this._vertexBuffers[\"remapData\"] = rampDataBuffer;\n            dataOffset += 4;\n        }\n        var offsets;\n        if (this._useInstancing) {\n            var spriteData = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n            this._spriteBuffer = new Buffer(engine, spriteData, false, 2);\n            offsets = this._spriteBuffer.createVertexBuffer(\"offset\", 0, 2);\n        }\n        else {\n            offsets = this._vertexBuffer.createVertexBuffer(\"offset\", dataOffset, 2, this._vertexBufferSize, this._useInstancing);\n            dataOffset += 2;\n        }\n        this._vertexBuffers[\"offset\"] = offsets;\n        this.resetDrawCache();\n    };\n    ParticleSystem.prototype._createIndexBuffer = function () {\n        if (this._useInstancing) {\n            return;\n        }\n        var indices = [];\n        var index = 0;\n        for (var count = 0; count < this._capacity; count++) {\n            indices.push(index);\n            indices.push(index + 1);\n            indices.push(index + 2);\n            indices.push(index);\n            indices.push(index + 2);\n            indices.push(index + 3);\n            index += 4;\n        }\n        this._indexBuffer = this._engine.createIndexBuffer(indices);\n    };\n    /**\n     * Gets the maximum number of particles active at the same time.\n     * @returns The max number of active particles.\n     */\n    ParticleSystem.prototype.getCapacity = function () {\n        return this._capacity;\n    };\n    /**\n     * Gets whether there are still active particles in the system.\n     * @returns True if it is alive, otherwise false.\n     */\n    ParticleSystem.prototype.isAlive = function () {\n        return this._alive;\n    };\n    /**\n     * Gets if the system has been started. (Note: this will still be true after stop is called)\n     * @returns True if it has been started, otherwise false.\n     */\n    ParticleSystem.prototype.isStarted = function () {\n        return this._started;\n    };\n    ParticleSystem.prototype._prepareSubEmitterInternalArray = function () {\n        var _this = this;\n        this._subEmitters = new Array();\n        if (this.subEmitters) {\n            this.subEmitters.forEach(function (subEmitter) {\n                if (subEmitter instanceof ParticleSystem) {\n                    _this._subEmitters.push([new SubEmitter(subEmitter)]);\n                }\n                else if (subEmitter instanceof SubEmitter) {\n                    _this._subEmitters.push([subEmitter]);\n                }\n                else if (subEmitter instanceof Array) {\n                    _this._subEmitters.push(subEmitter);\n                }\n            });\n        }\n    };\n    /**\n     * Starts the particle system and begins to emit\n     * @param delay defines the delay in milliseconds before starting the system (this.startDelay by default)\n     */\n    ParticleSystem.prototype.start = function (delay) {\n        var _this = this;\n        var _a;\n        if (delay === void 0) { delay = this.startDelay; }\n        if (!this.targetStopDuration && this._hasTargetStopDurationDependantGradient()) {\n            throw \"Particle system started with a targetStopDuration dependant gradient (eg. startSizeGradients) but no targetStopDuration set\";\n        }\n        if (delay) {\n            setTimeout(function () {\n                _this.start(0);\n            }, delay);\n            return;\n        }\n        // Convert the subEmitters field to the constant type field _subEmitters\n        this._prepareSubEmitterInternalArray();\n        this._started = true;\n        this._stopped = false;\n        this._actualFrame = 0;\n        if (this._subEmitters && this._subEmitters.length != 0) {\n            this.activeSubSystems = new Array();\n        }\n        // Reset emit gradient so it acts the same on every start\n        if (this._emitRateGradients) {\n            if (this._emitRateGradients.length > 0) {\n                this._currentEmitRateGradient = this._emitRateGradients[0];\n                this._currentEmitRate1 = this._currentEmitRateGradient.getFactor();\n                this._currentEmitRate2 = this._currentEmitRate1;\n            }\n            if (this._emitRateGradients.length > 1) {\n                this._currentEmitRate2 = this._emitRateGradients[1].getFactor();\n            }\n        }\n        // Reset start size gradient so it acts the same on every start\n        if (this._startSizeGradients) {\n            if (this._startSizeGradients.length > 0) {\n                this._currentStartSizeGradient = this._startSizeGradients[0];\n                this._currentStartSize1 = this._currentStartSizeGradient.getFactor();\n                this._currentStartSize2 = this._currentStartSize1;\n            }\n            if (this._startSizeGradients.length > 1) {\n                this._currentStartSize2 = this._startSizeGradients[1].getFactor();\n            }\n        }\n        if (this.preWarmCycles) {\n            if (((_a = this.emitter) === null || _a === void 0 ? void 0 : _a.getClassName().indexOf(\"Mesh\")) !== -1) {\n                this.emitter.computeWorldMatrix(true);\n            }\n            var noiseTextureAsProcedural_1 = this.noiseTexture;\n            if (noiseTextureAsProcedural_1 && noiseTextureAsProcedural_1.onGeneratedObservable) {\n                noiseTextureAsProcedural_1.onGeneratedObservable.addOnce(function () {\n                    setTimeout(function () {\n                        for (var index = 0; index < _this.preWarmCycles; index++) {\n                            _this.animate(true);\n                            noiseTextureAsProcedural_1.render();\n                        }\n                    });\n                });\n            }\n            else {\n                for (var index = 0; index < this.preWarmCycles; index++) {\n                    this.animate(true);\n                }\n            }\n        }\n        // Animations\n        if (this.beginAnimationOnStart && this.animations && this.animations.length > 0 && this._scene) {\n            this._scene.beginAnimation(this, this.beginAnimationFrom, this.beginAnimationTo, this.beginAnimationLoop);\n        }\n    };\n    /**\n     * Stops the particle system.\n     * @param stopSubEmitters if true it will stop the current system and all created sub-Systems if false it will stop the current root system only, this param is used by the root particle system only. the default value is true.\n     */\n    ParticleSystem.prototype.stop = function (stopSubEmitters) {\n        if (stopSubEmitters === void 0) { stopSubEmitters = true; }\n        if (this._stopped) {\n            return;\n        }\n        this.onStoppedObservable.notifyObservers(this);\n        this._stopped = true;\n        if (stopSubEmitters) {\n            this._stopSubEmitters();\n        }\n    };\n    // animation sheet\n    /**\n     * Remove all active particles\n     */\n    ParticleSystem.prototype.reset = function () {\n        this._stockParticles = [];\n        this._particles = [];\n    };\n    /**\n     * @param index\n     * @param particle\n     * @param offsetX\n     * @param offsetY\n     * @hidden (for internal use only)\n     */\n    ParticleSystem.prototype._appendParticleVertex = function (index, particle, offsetX, offsetY) {\n        var offset = index * this._vertexBufferSize;\n        this._vertexData[offset++] = particle.position.x + this.worldOffset.x;\n        this._vertexData[offset++] = particle.position.y + this.worldOffset.y;\n        this._vertexData[offset++] = particle.position.z + this.worldOffset.z;\n        this._vertexData[offset++] = particle.color.r;\n        this._vertexData[offset++] = particle.color.g;\n        this._vertexData[offset++] = particle.color.b;\n        this._vertexData[offset++] = particle.color.a;\n        this._vertexData[offset++] = particle.angle;\n        this._vertexData[offset++] = particle.scale.x * particle.size;\n        this._vertexData[offset++] = particle.scale.y * particle.size;\n        if (this._isAnimationSheetEnabled) {\n            this._vertexData[offset++] = particle.cellIndex;\n        }\n        if (!this._isBillboardBased) {\n            if (particle._initialDirection) {\n                var initialDirection = particle._initialDirection;\n                if (this.isLocal) {\n                    Vector3.TransformNormalToRef(initialDirection, this._emitterWorldMatrix, TmpVectors.Vector3[0]);\n                    initialDirection = TmpVectors.Vector3[0];\n                }\n                if (initialDirection.x === 0 && initialDirection.z === 0) {\n                    initialDirection.x = 0.001;\n                }\n                this._vertexData[offset++] = initialDirection.x;\n                this._vertexData[offset++] = initialDirection.y;\n                this._vertexData[offset++] = initialDirection.z;\n            }\n            else {\n                var direction = particle.direction;\n                if (this.isLocal) {\n                    Vector3.TransformNormalToRef(direction, this._emitterWorldMatrix, TmpVectors.Vector3[0]);\n                    direction = TmpVectors.Vector3[0];\n                }\n                if (direction.x === 0 && direction.z === 0) {\n                    direction.x = 0.001;\n                }\n                this._vertexData[offset++] = direction.x;\n                this._vertexData[offset++] = direction.y;\n                this._vertexData[offset++] = direction.z;\n            }\n        }\n        else if (this.billboardMode === ParticleSystem.BILLBOARDMODE_STRETCHED) {\n            this._vertexData[offset++] = particle.direction.x;\n            this._vertexData[offset++] = particle.direction.y;\n            this._vertexData[offset++] = particle.direction.z;\n        }\n        if (this._useRampGradients && particle.remapData) {\n            this._vertexData[offset++] = particle.remapData.x;\n            this._vertexData[offset++] = particle.remapData.y;\n            this._vertexData[offset++] = particle.remapData.z;\n            this._vertexData[offset++] = particle.remapData.w;\n        }\n        if (!this._useInstancing) {\n            if (this._isAnimationSheetEnabled) {\n                if (offsetX === 0) {\n                    offsetX = this._epsilon;\n                }\n                else if (offsetX === 1) {\n                    offsetX = 1 - this._epsilon;\n                }\n                if (offsetY === 0) {\n                    offsetY = this._epsilon;\n                }\n                else if (offsetY === 1) {\n                    offsetY = 1 - this._epsilon;\n                }\n            }\n            this._vertexData[offset++] = offsetX;\n            this._vertexData[offset++] = offsetY;\n        }\n    };\n    ParticleSystem.prototype._stopSubEmitters = function () {\n        if (!this.activeSubSystems) {\n            return;\n        }\n        this.activeSubSystems.forEach(function (subSystem) {\n            subSystem.stop(true);\n        });\n        this.activeSubSystems = new Array();\n    };\n    ParticleSystem.prototype._removeFromRoot = function () {\n        if (!this._rootParticleSystem) {\n            return;\n        }\n        var index = this._rootParticleSystem.activeSubSystems.indexOf(this);\n        if (index !== -1) {\n            this._rootParticleSystem.activeSubSystems.splice(index, 1);\n        }\n        this._rootParticleSystem = null;\n    };\n    // End of sub system methods\n    ParticleSystem.prototype._update = function (newParticles) {\n        var _this = this;\n        // Update current\n        this._alive = this._particles.length > 0;\n        if (this.emitter.position) {\n            var emitterMesh = this.emitter;\n            this._emitterWorldMatrix = emitterMesh.getWorldMatrix();\n        }\n        else {\n            var emitterPosition = this.emitter;\n            this._emitterWorldMatrix = Matrix.Translation(emitterPosition.x, emitterPosition.y, emitterPosition.z);\n        }\n        this._emitterWorldMatrix.invertToRef(this._emitterInverseWorldMatrix);\n        this.updateFunction(this._particles);\n        // Add new ones\n        var particle;\n        var _loop_3 = function (index) {\n            if (this_2._particles.length === this_2._capacity) {\n                return \"break\";\n            }\n            particle = this_2._createParticle();\n            this_2._particles.push(particle);\n            // Life time\n            if (this_2.targetStopDuration && this_2._lifeTimeGradients && this_2._lifeTimeGradients.length > 0) {\n                var ratio_1 = Scalar.Clamp(this_2._actualFrame / this_2.targetStopDuration);\n                GradientHelper.GetCurrentGradient(ratio_1, this_2._lifeTimeGradients, function (currentGradient, nextGradient) {\n                    var factorGradient1 = currentGradient;\n                    var factorGradient2 = nextGradient;\n                    var lifeTime1 = factorGradient1.getFactor();\n                    var lifeTime2 = factorGradient2.getFactor();\n                    var gradient = (ratio_1 - factorGradient1.gradient) / (factorGradient2.gradient - factorGradient1.gradient);\n                    particle.lifeTime = Scalar.Lerp(lifeTime1, lifeTime2, gradient);\n                });\n            }\n            else {\n                particle.lifeTime = Scalar.RandomRange(this_2.minLifeTime, this_2.maxLifeTime);\n            }\n            // Emitter\n            var emitPower = Scalar.RandomRange(this_2.minEmitPower, this_2.maxEmitPower);\n            if (this_2.startPositionFunction) {\n                this_2.startPositionFunction(this_2._emitterWorldMatrix, particle.position, particle, this_2.isLocal);\n            }\n            else {\n                this_2.particleEmitterType.startPositionFunction(this_2._emitterWorldMatrix, particle.position, particle, this_2.isLocal);\n            }\n            if (this_2.isLocal) {\n                if (!particle._localPosition) {\n                    particle._localPosition = particle.position.clone();\n                }\n                else {\n                    particle._localPosition.copyFrom(particle.position);\n                }\n                Vector3.TransformCoordinatesToRef(particle._localPosition, this_2._emitterWorldMatrix, particle.position);\n            }\n            if (this_2.startDirectionFunction) {\n                this_2.startDirectionFunction(this_2._emitterWorldMatrix, particle.direction, particle, this_2.isLocal);\n            }\n            else {\n                this_2.particleEmitterType.startDirectionFunction(this_2._emitterWorldMatrix, particle.direction, particle, this_2.isLocal, this_2._emitterInverseWorldMatrix);\n            }\n            if (emitPower === 0) {\n                if (!particle._initialDirection) {\n                    particle._initialDirection = particle.direction.clone();\n                }\n                else {\n                    particle._initialDirection.copyFrom(particle.direction);\n                }\n            }\n            else {\n                particle._initialDirection = null;\n            }\n            particle.direction.scaleInPlace(emitPower);\n            // Size\n            if (!this_2._sizeGradients || this_2._sizeGradients.length === 0) {\n                particle.size = Scalar.RandomRange(this_2.minSize, this_2.maxSize);\n            }\n            else {\n                particle._currentSizeGradient = this_2._sizeGradients[0];\n                particle._currentSize1 = particle._currentSizeGradient.getFactor();\n                particle.size = particle._currentSize1;\n                if (this_2._sizeGradients.length > 1) {\n                    particle._currentSize2 = this_2._sizeGradients[1].getFactor();\n                }\n                else {\n                    particle._currentSize2 = particle._currentSize1;\n                }\n            }\n            // Size and scale\n            particle.scale.copyFromFloats(Scalar.RandomRange(this_2.minScaleX, this_2.maxScaleX), Scalar.RandomRange(this_2.minScaleY, this_2.maxScaleY));\n            // Adjust scale by start size\n            if (this_2._startSizeGradients && this_2._startSizeGradients[0] && this_2.targetStopDuration) {\n                var ratio = this_2._actualFrame / this_2.targetStopDuration;\n                GradientHelper.GetCurrentGradient(ratio, this_2._startSizeGradients, function (currentGradient, nextGradient, scale) {\n                    if (currentGradient !== _this._currentStartSizeGradient) {\n                        _this._currentStartSize1 = _this._currentStartSize2;\n                        _this._currentStartSize2 = nextGradient.getFactor();\n                        _this._currentStartSizeGradient = currentGradient;\n                    }\n                    var value = Scalar.Lerp(_this._currentStartSize1, _this._currentStartSize2, scale);\n                    particle.scale.scaleInPlace(value);\n                });\n            }\n            // Angle\n            if (!this_2._angularSpeedGradients || this_2._angularSpeedGradients.length === 0) {\n                particle.angularSpeed = Scalar.RandomRange(this_2.minAngularSpeed, this_2.maxAngularSpeed);\n            }\n            else {\n                particle._currentAngularSpeedGradient = this_2._angularSpeedGradients[0];\n                particle.angularSpeed = particle._currentAngularSpeedGradient.getFactor();\n                particle._currentAngularSpeed1 = particle.angularSpeed;\n                if (this_2._angularSpeedGradients.length > 1) {\n                    particle._currentAngularSpeed2 = this_2._angularSpeedGradients[1].getFactor();\n                }\n                else {\n                    particle._currentAngularSpeed2 = particle._currentAngularSpeed1;\n                }\n            }\n            particle.angle = Scalar.RandomRange(this_2.minInitialRotation, this_2.maxInitialRotation);\n            // Velocity\n            if (this_2._velocityGradients && this_2._velocityGradients.length > 0) {\n                particle._currentVelocityGradient = this_2._velocityGradients[0];\n                particle._currentVelocity1 = particle._currentVelocityGradient.getFactor();\n                if (this_2._velocityGradients.length > 1) {\n                    particle._currentVelocity2 = this_2._velocityGradients[1].getFactor();\n                }\n                else {\n                    particle._currentVelocity2 = particle._currentVelocity1;\n                }\n            }\n            // Limit velocity\n            if (this_2._limitVelocityGradients && this_2._limitVelocityGradients.length > 0) {\n                particle._currentLimitVelocityGradient = this_2._limitVelocityGradients[0];\n                particle._currentLimitVelocity1 = particle._currentLimitVelocityGradient.getFactor();\n                if (this_2._limitVelocityGradients.length > 1) {\n                    particle._currentLimitVelocity2 = this_2._limitVelocityGradients[1].getFactor();\n                }\n                else {\n                    particle._currentLimitVelocity2 = particle._currentLimitVelocity1;\n                }\n            }\n            // Drag\n            if (this_2._dragGradients && this_2._dragGradients.length > 0) {\n                particle._currentDragGradient = this_2._dragGradients[0];\n                particle._currentDrag1 = particle._currentDragGradient.getFactor();\n                if (this_2._dragGradients.length > 1) {\n                    particle._currentDrag2 = this_2._dragGradients[1].getFactor();\n                }\n                else {\n                    particle._currentDrag2 = particle._currentDrag1;\n                }\n            }\n            // Color\n            if (!this_2._colorGradients || this_2._colorGradients.length === 0) {\n                var step = Scalar.RandomRange(0, 1.0);\n                Color4.LerpToRef(this_2.color1, this_2.color2, step, particle.color);\n                this_2.colorDead.subtractToRef(particle.color, this_2._colorDiff);\n                this_2._colorDiff.scaleToRef(1.0 / particle.lifeTime, particle.colorStep);\n            }\n            else {\n                particle._currentColorGradient = this_2._colorGradients[0];\n                particle._currentColorGradient.getColorToRef(particle.color);\n                particle._currentColor1.copyFrom(particle.color);\n                if (this_2._colorGradients.length > 1) {\n                    this_2._colorGradients[1].getColorToRef(particle._currentColor2);\n                }\n                else {\n                    particle._currentColor2.copyFrom(particle.color);\n                }\n            }\n            // Sheet\n            if (this_2._isAnimationSheetEnabled) {\n                particle._initialStartSpriteCellID = this_2.startSpriteCellID;\n                particle._initialEndSpriteCellID = this_2.endSpriteCellID;\n                particle._initialSpriteCellLoop = this_2.spriteCellLoop;\n            }\n            // Inherited Velocity\n            particle.direction.addInPlace(this_2._inheritedVelocityOffset);\n            // Ramp\n            if (this_2._useRampGradients) {\n                particle.remapData = new Vector4(0, 1, 0, 1);\n            }\n            // Noise texture coordinates\n            if (this_2.noiseTexture) {\n                if (particle._randomNoiseCoordinates1) {\n                    particle._randomNoiseCoordinates1.copyFromFloats(Math.random(), Math.random(), Math.random());\n                    particle._randomNoiseCoordinates2.copyFromFloats(Math.random(), Math.random(), Math.random());\n                }\n                else {\n                    particle._randomNoiseCoordinates1 = new Vector3(Math.random(), Math.random(), Math.random());\n                    particle._randomNoiseCoordinates2 = new Vector3(Math.random(), Math.random(), Math.random());\n                }\n            }\n            // Update the position of the attached sub-emitters to match their attached particle\n            particle._inheritParticleInfoToSubEmitters();\n        };\n        var this_2 = this;\n        for (var index = 0; index < newParticles; index++) {\n            var state_1 = _loop_3(index);\n            if (state_1 === \"break\")\n                break;\n        }\n    };\n    /**\n     * @param isAnimationSheetEnabled\n     * @param isBillboardBased\n     * @param useRampGradients\n     * @hidden\n     */\n    ParticleSystem._GetAttributeNamesOrOptions = function (isAnimationSheetEnabled, isBillboardBased, useRampGradients) {\n        if (isAnimationSheetEnabled === void 0) { isAnimationSheetEnabled = false; }\n        if (isBillboardBased === void 0) { isBillboardBased = false; }\n        if (useRampGradients === void 0) { useRampGradients = false; }\n        var attributeNamesOrOptions = [VertexBuffer.PositionKind, VertexBuffer.ColorKind, \"angle\", \"offset\", \"size\"];\n        if (isAnimationSheetEnabled) {\n            attributeNamesOrOptions.push(\"cellIndex\");\n        }\n        if (!isBillboardBased) {\n            attributeNamesOrOptions.push(\"direction\");\n        }\n        if (useRampGradients) {\n            attributeNamesOrOptions.push(\"remapData\");\n        }\n        return attributeNamesOrOptions;\n    };\n    /**\n     * @param isAnimationSheetEnabled\n     * @hidden\n     */\n    ParticleSystem._GetEffectCreationOptions = function (isAnimationSheetEnabled) {\n        if (isAnimationSheetEnabled === void 0) { isAnimationSheetEnabled = false; }\n        var effectCreationOption = [\n            \"invView\",\n            \"view\",\n            \"projection\",\n            \"vClipPlane\",\n            \"vClipPlane2\",\n            \"vClipPlane3\",\n            \"vClipPlane4\",\n            \"vClipPlane5\",\n            \"vClipPlane6\",\n            \"textureMask\",\n            \"translationPivot\",\n            \"eyePosition\",\n        ];\n        if (isAnimationSheetEnabled) {\n            effectCreationOption.push(\"particlesInfos\");\n        }\n        return effectCreationOption;\n    };\n    /**\n     * Fill the defines array according to the current settings of the particle system\n     * @param defines Array to be updated\n     * @param blendMode blend mode to take into account when updating the array\n     */\n    ParticleSystem.prototype.fillDefines = function (defines, blendMode) {\n        if (this._scene) {\n            if (this._scene.clipPlane) {\n                defines.push(\"#define CLIPPLANE\");\n            }\n            if (this._scene.clipPlane2) {\n                defines.push(\"#define CLIPPLANE2\");\n            }\n            if (this._scene.clipPlane3) {\n                defines.push(\"#define CLIPPLANE3\");\n            }\n            if (this._scene.clipPlane4) {\n                defines.push(\"#define CLIPPLANE4\");\n            }\n            if (this._scene.clipPlane5) {\n                defines.push(\"#define CLIPPLANE5\");\n            }\n            if (this._scene.clipPlane6) {\n                defines.push(\"#define CLIPPLANE6\");\n            }\n        }\n        if (this._isAnimationSheetEnabled) {\n            defines.push(\"#define ANIMATESHEET\");\n        }\n        if (blendMode === ParticleSystem.BLENDMODE_MULTIPLY) {\n            defines.push(\"#define BLENDMULTIPLYMODE\");\n        }\n        if (this._useRampGradients) {\n            defines.push(\"#define RAMPGRADIENT\");\n        }\n        if (this._isBillboardBased) {\n            defines.push(\"#define BILLBOARD\");\n            switch (this.billboardMode) {\n                case ParticleSystem.BILLBOARDMODE_Y:\n                    defines.push(\"#define BILLBOARDY\");\n                    break;\n                case ParticleSystem.BILLBOARDMODE_STRETCHED:\n                    defines.push(\"#define BILLBOARDSTRETCHED\");\n                    break;\n                case ParticleSystem.BILLBOARDMODE_ALL:\n                    defines.push(\"#define BILLBOARDMODE_ALL\");\n                    break;\n                default:\n                    break;\n            }\n        }\n        if (this._imageProcessingConfiguration) {\n            this._imageProcessingConfiguration.prepareDefines(this._imageProcessingConfigurationDefines);\n            defines.push(this._imageProcessingConfigurationDefines.toString());\n        }\n    };\n    /**\n     * Fill the uniforms, attributes and samplers arrays according to the current settings of the particle system\n     * @param uniforms Uniforms array to fill\n     * @param attributes Attributes array to fill\n     * @param samplers Samplers array to fill\n     */\n    ParticleSystem.prototype.fillUniformsAttributesAndSamplerNames = function (uniforms, attributes, samplers) {\n        attributes.push.apply(attributes, ParticleSystem._GetAttributeNamesOrOptions(this._isAnimationSheetEnabled, this._isBillboardBased && this.billboardMode !== ParticleSystem.BILLBOARDMODE_STRETCHED, this._useRampGradients));\n        uniforms.push.apply(uniforms, ParticleSystem._GetEffectCreationOptions(this._isAnimationSheetEnabled));\n        samplers.push(\"diffuseSampler\", \"rampSampler\");\n        if (this._imageProcessingConfiguration) {\n            ImageProcessingConfiguration.PrepareUniforms(uniforms, this._imageProcessingConfigurationDefines);\n            ImageProcessingConfiguration.PrepareSamplers(samplers, this._imageProcessingConfigurationDefines);\n        }\n    };\n    /**\n     * @param blendMode\n     * @hidden\n     */\n    ParticleSystem.prototype._getWrapper = function (blendMode) {\n        var customWrapper = this._getCustomDrawWrapper(blendMode);\n        if (customWrapper === null || customWrapper === void 0 ? void 0 : customWrapper.effect) {\n            return customWrapper;\n        }\n        var defines = [];\n        this.fillDefines(defines, blendMode);\n        // Effect\n        var currentRenderPassId = this._engine._features.supportRenderPasses ? this._engine.currentRenderPassId : 0;\n        var drawWrappers = this._drawWrappers[currentRenderPassId];\n        if (!drawWrappers) {\n            drawWrappers = this._drawWrappers[currentRenderPassId] = [];\n        }\n        var drawWrapper = drawWrappers[blendMode];\n        if (!drawWrapper) {\n            drawWrapper = new DrawWrapper(this._engine);\n            if (drawWrapper.drawContext) {\n                drawWrapper.drawContext.useInstancing = this._useInstancing;\n            }\n            drawWrappers[blendMode] = drawWrapper;\n        }\n        var join = defines.join(\"\\n\");\n        if (drawWrapper.defines !== join) {\n            var attributesNamesOrOptions = [];\n            var effectCreationOption = [];\n            var samplers = [];\n            this.fillUniformsAttributesAndSamplerNames(effectCreationOption, attributesNamesOrOptions, samplers);\n            drawWrapper.setEffect(this._engine.createEffect(\"particles\", attributesNamesOrOptions, effectCreationOption, samplers, join), join);\n        }\n        return drawWrapper;\n    };\n    /**\n     * Animates the particle system for the current frame by emitting new particles and or animating the living ones.\n     * @param preWarmOnly will prevent the system from updating the vertex buffer (default is false)\n     */\n    ParticleSystem.prototype.animate = function (preWarmOnly) {\n        var _this = this;\n        var _a;\n        if (preWarmOnly === void 0) { preWarmOnly = false; }\n        if (!this._started) {\n            return;\n        }\n        if (!preWarmOnly && this._scene) {\n            // Check\n            if (!this.isReady()) {\n                return;\n            }\n            if (this._currentRenderId === this._scene.getFrameId()) {\n                return;\n            }\n            this._currentRenderId = this._scene.getFrameId();\n        }\n        this._scaledUpdateSpeed = this.updateSpeed * (preWarmOnly ? this.preWarmStepOffset : ((_a = this._scene) === null || _a === void 0 ? void 0 : _a.getAnimationRatio()) || 1);\n        // Determine the number of particles we need to create\n        var newParticles;\n        if (this.manualEmitCount > -1) {\n            newParticles = this.manualEmitCount;\n            this._newPartsExcess = 0;\n            this.manualEmitCount = 0;\n        }\n        else {\n            var rate_1 = this.emitRate;\n            if (this._emitRateGradients && this._emitRateGradients.length > 0 && this.targetStopDuration) {\n                var ratio = this._actualFrame / this.targetStopDuration;\n                GradientHelper.GetCurrentGradient(ratio, this._emitRateGradients, function (currentGradient, nextGradient, scale) {\n                    if (currentGradient !== _this._currentEmitRateGradient) {\n                        _this._currentEmitRate1 = _this._currentEmitRate2;\n                        _this._currentEmitRate2 = nextGradient.getFactor();\n                        _this._currentEmitRateGradient = currentGradient;\n                    }\n                    rate_1 = Scalar.Lerp(_this._currentEmitRate1, _this._currentEmitRate2, scale);\n                });\n            }\n            newParticles = (rate_1 * this._scaledUpdateSpeed) >> 0;\n            this._newPartsExcess += rate_1 * this._scaledUpdateSpeed - newParticles;\n        }\n        if (this._newPartsExcess > 1.0) {\n            newParticles += this._newPartsExcess >> 0;\n            this._newPartsExcess -= this._newPartsExcess >> 0;\n        }\n        this._alive = false;\n        if (!this._stopped) {\n            this._actualFrame += this._scaledUpdateSpeed;\n            if (this.targetStopDuration && this._actualFrame >= this.targetStopDuration) {\n                this.stop();\n            }\n        }\n        else {\n            newParticles = 0;\n        }\n        this._update(newParticles);\n        // Stopped?\n        if (this._stopped) {\n            if (!this._alive) {\n                this._started = false;\n                if (this.onAnimationEnd) {\n                    this.onAnimationEnd();\n                }\n                if (this.disposeOnStop && this._scene) {\n                    this._scene._toBeDisposed.push(this);\n                }\n            }\n        }\n        if (!preWarmOnly) {\n            // Update VBO\n            var offset = 0;\n            for (var index = 0; index < this._particles.length; index++) {\n                var particle = this._particles[index];\n                this._appendParticleVertices(offset, particle);\n                offset += this._useInstancing ? 1 : 4;\n            }\n            if (this._vertexBuffer) {\n                this._vertexBuffer.updateDirectly(this._vertexData, 0, this._particles.length);\n            }\n        }\n        if (this.manualEmitCount === 0 && this.disposeOnStop) {\n            this.stop();\n        }\n    };\n    ParticleSystem.prototype._appendParticleVertices = function (offset, particle) {\n        this._appendParticleVertex(offset++, particle, 0, 0);\n        if (!this._useInstancing) {\n            this._appendParticleVertex(offset++, particle, 1, 0);\n            this._appendParticleVertex(offset++, particle, 1, 1);\n            this._appendParticleVertex(offset++, particle, 0, 1);\n        }\n    };\n    /**\n     * Rebuilds the particle system.\n     */\n    ParticleSystem.prototype.rebuild = function () {\n        var _a, _b;\n        if (this._engine.getCaps().vertexArrayObject) {\n            this._vertexArrayObject = null;\n        }\n        this._createIndexBuffer();\n        (_a = this._spriteBuffer) === null || _a === void 0 ? void 0 : _a._rebuild();\n        (_b = this._vertexBuffer) === null || _b === void 0 ? void 0 : _b._rebuild();\n        for (var key in this._vertexBuffers) {\n            this._vertexBuffers[key]._rebuild();\n        }\n        this.resetDrawCache();\n    };\n    /**\n     * Is this system ready to be used/rendered\n     * @return true if the system is ready\n     */\n    ParticleSystem.prototype.isReady = function () {\n        if (!this.emitter || (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.isReady()) || !this.particleTexture || !this.particleTexture.isReady()) {\n            return false;\n        }\n        if (this.blendMode !== ParticleSystem.BLENDMODE_MULTIPLYADD) {\n            if (!this._getWrapper(this.blendMode).effect.isReady()) {\n                return false;\n            }\n        }\n        else {\n            if (!this._getWrapper(ParticleSystem.BLENDMODE_MULTIPLY).effect.isReady()) {\n                return false;\n            }\n            if (!this._getWrapper(ParticleSystem.BLENDMODE_ADD).effect.isReady()) {\n                return false;\n            }\n        }\n        return true;\n    };\n    ParticleSystem.prototype._render = function (blendMode) {\n        var _a, _b;\n        var drawWrapper = this._getWrapper(blendMode);\n        var effect = drawWrapper.effect;\n        var engine = this._engine;\n        // Render\n        engine.enableEffect(drawWrapper);\n        var viewMatrix = (_a = this.defaultViewMatrix) !== null && _a !== void 0 ? _a : this._scene.getViewMatrix();\n        effect.setTexture(\"diffuseSampler\", this.particleTexture);\n        effect.setMatrix(\"view\", viewMatrix);\n        effect.setMatrix(\"projection\", (_b = this.defaultProjectionMatrix) !== null && _b !== void 0 ? _b : this._scene.getProjectionMatrix());\n        if (this._isAnimationSheetEnabled && this.particleTexture) {\n            var baseSize = this.particleTexture.getBaseSize();\n            effect.setFloat3(\"particlesInfos\", this.spriteCellWidth / baseSize.width, this.spriteCellHeight / baseSize.height, this.spriteCellWidth / baseSize.width);\n        }\n        effect.setVector2(\"translationPivot\", this.translationPivot);\n        effect.setFloat4(\"textureMask\", this.textureMask.r, this.textureMask.g, this.textureMask.b, this.textureMask.a);\n        if (this._isBillboardBased && this._scene) {\n            var camera = this._scene.activeCamera;\n            effect.setVector3(\"eyePosition\", camera.globalPosition);\n        }\n        if (this._rampGradientsTexture) {\n            if (!this._rampGradients || !this._rampGradients.length) {\n                this._rampGradientsTexture.dispose();\n                this._rampGradientsTexture = null;\n            }\n            effect.setTexture(\"rampSampler\", this._rampGradientsTexture);\n        }\n        var defines = effect.defines;\n        if (this._scene) {\n            if (this._scene.clipPlane || this._scene.clipPlane2 || this._scene.clipPlane3 || this._scene.clipPlane4 || this._scene.clipPlane5 || this._scene.clipPlane6) {\n                ThinMaterialHelper.BindClipPlane(effect, this._scene);\n            }\n        }\n        if (defines.indexOf(\"#define BILLBOARDMODE_ALL\") >= 0) {\n            viewMatrix.invertToRef(TmpVectors.Matrix[0]);\n            effect.setMatrix(\"invView\", TmpVectors.Matrix[0]);\n        }\n        if (this._vertexArrayObject !== undefined) {\n            if (!this._vertexArrayObject) {\n                this._vertexArrayObject = this._engine.recordVertexArrayObject(this._vertexBuffers, this._indexBuffer, effect);\n            }\n            this._engine.bindVertexArrayObject(this._vertexArrayObject, this._indexBuffer);\n        }\n        else {\n            engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\n        }\n        // image processing\n        if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\n            this._imageProcessingConfiguration.bind(effect);\n        }\n        // Draw order\n        switch (blendMode) {\n            case ParticleSystem.BLENDMODE_ADD:\n                engine.setAlphaMode(1);\n                break;\n            case ParticleSystem.BLENDMODE_ONEONE:\n                engine.setAlphaMode(6);\n                break;\n            case ParticleSystem.BLENDMODE_STANDARD:\n                engine.setAlphaMode(2);\n                break;\n            case ParticleSystem.BLENDMODE_MULTIPLY:\n                engine.setAlphaMode(4);\n                break;\n        }\n        if (this._onBeforeDrawParticlesObservable) {\n            this._onBeforeDrawParticlesObservable.notifyObservers(effect);\n        }\n        if (this._useInstancing) {\n            engine.drawArraysType(7, 0, 4, this._particles.length);\n        }\n        else {\n            engine.drawElementsType(0, 0, this._particles.length * 6);\n        }\n        return this._particles.length;\n    };\n    /**\n     * Renders the particle system in its current state.\n     * @returns the current number of particles\n     */\n    ParticleSystem.prototype.render = function () {\n        // Check\n        if (!this.isReady() || !this._particles.length) {\n            return 0;\n        }\n        var engine = this._engine;\n        if (engine.setState) {\n            engine.setState(false);\n            if (this.forceDepthWrite) {\n                engine.setDepthWrite(true);\n            }\n        }\n        var outparticles = 0;\n        if (this.blendMode === ParticleSystem.BLENDMODE_MULTIPLYADD) {\n            outparticles = this._render(ParticleSystem.BLENDMODE_MULTIPLY) + this._render(ParticleSystem.BLENDMODE_ADD);\n        }\n        else {\n            outparticles = this._render(this.blendMode);\n        }\n        this._engine.unbindInstanceAttributes();\n        this._engine.setAlphaMode(0);\n        return outparticles;\n    };\n    /**\n     * Disposes the particle system and free the associated resources\n     * @param disposeTexture defines if the particle texture must be disposed as well (true by default)\n     */\n    ParticleSystem.prototype.dispose = function (disposeTexture) {\n        if (disposeTexture === void 0) { disposeTexture = true; }\n        this.resetDrawCache();\n        if (this._vertexBuffer) {\n            this._vertexBuffer.dispose();\n            this._vertexBuffer = null;\n        }\n        if (this._spriteBuffer) {\n            this._spriteBuffer.dispose();\n            this._spriteBuffer = null;\n        }\n        if (this._indexBuffer) {\n            this._engine._releaseBuffer(this._indexBuffer);\n            this._indexBuffer = null;\n        }\n        if (this._vertexArrayObject) {\n            this._engine.releaseVertexArrayObject(this._vertexArrayObject);\n            this._vertexArrayObject = null;\n        }\n        if (disposeTexture && this.particleTexture) {\n            this.particleTexture.dispose();\n            this.particleTexture = null;\n        }\n        if (disposeTexture && this.noiseTexture) {\n            this.noiseTexture.dispose();\n            this.noiseTexture = null;\n        }\n        if (this._rampGradientsTexture) {\n            this._rampGradientsTexture.dispose();\n            this._rampGradientsTexture = null;\n        }\n        this._removeFromRoot();\n        if (this.subEmitters && !this._subEmitters) {\n            this._prepareSubEmitterInternalArray();\n        }\n        if (this._subEmitters && this._subEmitters.length) {\n            for (var index = 0; index < this._subEmitters.length; index++) {\n                for (var _i = 0, _a = this._subEmitters[index]; _i < _a.length; _i++) {\n                    var subEmitter = _a[_i];\n                    subEmitter.dispose();\n                }\n            }\n            this._subEmitters = [];\n            this.subEmitters = [];\n        }\n        if (this._disposeEmitterOnDispose && this.emitter && this.emitter.dispose) {\n            this.emitter.dispose(true);\n        }\n        if (this._onBeforeDrawParticlesObservable) {\n            this._onBeforeDrawParticlesObservable.clear();\n        }\n        // Remove from scene\n        if (this._scene) {\n            var index = this._scene.particleSystems.indexOf(this);\n            if (index > -1) {\n                this._scene.particleSystems.splice(index, 1);\n            }\n            this._scene._activeParticleSystems.dispose();\n        }\n        // Callback\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n        this.onStoppedObservable.clear();\n        this.reset();\n    };\n    // Clone\n    /**\n     * Clones the particle system.\n     * @param name The name of the cloned object\n     * @param newEmitter The new emitter to use\n     * @returns the cloned particle system\n     */\n    ParticleSystem.prototype.clone = function (name, newEmitter) {\n        var custom = __assign({}, this._customWrappers);\n        var program = null;\n        var engine = this._engine;\n        if (engine.createEffectForParticles) {\n            if (this.customShader != null) {\n                program = this.customShader;\n                var defines = program.shaderOptions.defines.length > 0 ? program.shaderOptions.defines.join(\"\\n\") : \"\";\n                var effect = engine.createEffectForParticles(program.shaderPath.fragmentElement, program.shaderOptions.uniforms, program.shaderOptions.samplers, defines);\n                if (!custom[0]) {\n                    this.setCustomEffect(effect, 0);\n                }\n                else {\n                    custom[0].effect = effect;\n                }\n            }\n        }\n        var serialization = this.serialize();\n        var result = ParticleSystem.Parse(serialization, this._scene || this._engine, this._rootUrl);\n        result.name = name;\n        result.customShader = program;\n        result._customWrappers = custom;\n        if (newEmitter === undefined) {\n            newEmitter = this.emitter;\n        }\n        if (this.noiseTexture) {\n            result.noiseTexture = this.noiseTexture.clone();\n        }\n        result.emitter = newEmitter;\n        if (!this.preventAutoStart) {\n            result.start();\n        }\n        return result;\n    };\n    /**\n     * Serializes the particle system to a JSON object\n     * @param serializeTexture defines if the texture must be serialized as well\n     * @returns the JSON object\n     */\n    ParticleSystem.prototype.serialize = function (serializeTexture) {\n        if (serializeTexture === void 0) { serializeTexture = false; }\n        var serializationObject = {};\n        ParticleSystem._Serialize(serializationObject, this, serializeTexture);\n        serializationObject.textureMask = this.textureMask.asArray();\n        serializationObject.customShader = this.customShader;\n        serializationObject.preventAutoStart = this.preventAutoStart;\n        // SubEmitters\n        if (this.subEmitters) {\n            serializationObject.subEmitters = [];\n            if (!this._subEmitters) {\n                this._prepareSubEmitterInternalArray();\n            }\n            for (var _i = 0, _a = this._subEmitters; _i < _a.length; _i++) {\n                var subs = _a[_i];\n                var cell = [];\n                for (var _b = 0, subs_1 = subs; _b < subs_1.length; _b++) {\n                    var sub = subs_1[_b];\n                    cell.push(sub.serialize(serializeTexture));\n                }\n                serializationObject.subEmitters.push(cell);\n            }\n        }\n        return serializationObject;\n    };\n    /**\n     * @param serializationObject\n     * @param particleSystem\n     * @param serializeTexture\n     * @hidden\n     */\n    ParticleSystem._Serialize = function (serializationObject, particleSystem, serializeTexture) {\n        serializationObject.name = particleSystem.name;\n        serializationObject.id = particleSystem.id;\n        serializationObject.capacity = particleSystem.getCapacity();\n        serializationObject.disposeOnStop = particleSystem.disposeOnStop;\n        serializationObject.manualEmitCount = particleSystem.manualEmitCount;\n        // Emitter\n        if (particleSystem.emitter.position) {\n            var emitterMesh = particleSystem.emitter;\n            serializationObject.emitterId = emitterMesh.id;\n        }\n        else {\n            var emitterPosition = particleSystem.emitter;\n            serializationObject.emitter = emitterPosition.asArray();\n        }\n        // Emitter\n        if (particleSystem.particleEmitterType) {\n            serializationObject.particleEmitterType = particleSystem.particleEmitterType.serialize();\n        }\n        if (particleSystem.particleTexture) {\n            if (serializeTexture) {\n                serializationObject.texture = particleSystem.particleTexture.serialize();\n            }\n            else {\n                serializationObject.textureName = particleSystem.particleTexture.name;\n                serializationObject.invertY = !!particleSystem.particleTexture._invertY;\n            }\n        }\n        serializationObject.isLocal = particleSystem.isLocal;\n        // Animations\n        SerializationHelper.AppendSerializedAnimations(particleSystem, serializationObject);\n        serializationObject.beginAnimationOnStart = particleSystem.beginAnimationOnStart;\n        serializationObject.beginAnimationFrom = particleSystem.beginAnimationFrom;\n        serializationObject.beginAnimationTo = particleSystem.beginAnimationTo;\n        serializationObject.beginAnimationLoop = particleSystem.beginAnimationLoop;\n        // Particle system\n        serializationObject.startDelay = particleSystem.startDelay;\n        serializationObject.renderingGroupId = particleSystem.renderingGroupId;\n        serializationObject.isBillboardBased = particleSystem.isBillboardBased;\n        serializationObject.billboardMode = particleSystem.billboardMode;\n        serializationObject.minAngularSpeed = particleSystem.minAngularSpeed;\n        serializationObject.maxAngularSpeed = particleSystem.maxAngularSpeed;\n        serializationObject.minSize = particleSystem.minSize;\n        serializationObject.maxSize = particleSystem.maxSize;\n        serializationObject.minScaleX = particleSystem.minScaleX;\n        serializationObject.maxScaleX = particleSystem.maxScaleX;\n        serializationObject.minScaleY = particleSystem.minScaleY;\n        serializationObject.maxScaleY = particleSystem.maxScaleY;\n        serializationObject.minEmitPower = particleSystem.minEmitPower;\n        serializationObject.maxEmitPower = particleSystem.maxEmitPower;\n        serializationObject.minLifeTime = particleSystem.minLifeTime;\n        serializationObject.maxLifeTime = particleSystem.maxLifeTime;\n        serializationObject.emitRate = particleSystem.emitRate;\n        serializationObject.gravity = particleSystem.gravity.asArray();\n        serializationObject.noiseStrength = particleSystem.noiseStrength.asArray();\n        serializationObject.color1 = particleSystem.color1.asArray();\n        serializationObject.color2 = particleSystem.color2.asArray();\n        serializationObject.colorDead = particleSystem.colorDead.asArray();\n        serializationObject.updateSpeed = particleSystem.updateSpeed;\n        serializationObject.targetStopDuration = particleSystem.targetStopDuration;\n        serializationObject.blendMode = particleSystem.blendMode;\n        serializationObject.preWarmCycles = particleSystem.preWarmCycles;\n        serializationObject.preWarmStepOffset = particleSystem.preWarmStepOffset;\n        serializationObject.minInitialRotation = particleSystem.minInitialRotation;\n        serializationObject.maxInitialRotation = particleSystem.maxInitialRotation;\n        serializationObject.startSpriteCellID = particleSystem.startSpriteCellID;\n        serializationObject.spriteCellLoop = particleSystem.spriteCellLoop;\n        serializationObject.endSpriteCellID = particleSystem.endSpriteCellID;\n        serializationObject.spriteCellChangeSpeed = particleSystem.spriteCellChangeSpeed;\n        serializationObject.spriteCellWidth = particleSystem.spriteCellWidth;\n        serializationObject.spriteCellHeight = particleSystem.spriteCellHeight;\n        serializationObject.spriteRandomStartCell = particleSystem.spriteRandomStartCell;\n        serializationObject.isAnimationSheetEnabled = particleSystem.isAnimationSheetEnabled;\n        var colorGradients = particleSystem.getColorGradients();\n        if (colorGradients) {\n            serializationObject.colorGradients = [];\n            for (var _i = 0, colorGradients_1 = colorGradients; _i < colorGradients_1.length; _i++) {\n                var colorGradient = colorGradients_1[_i];\n                var serializedGradient = {\n                    gradient: colorGradient.gradient,\n                    color1: colorGradient.color1.asArray(),\n                };\n                if (colorGradient.color2) {\n                    serializedGradient.color2 = colorGradient.color2.asArray();\n                }\n                else {\n                    serializedGradient.color2 = colorGradient.color1.asArray();\n                }\n                serializationObject.colorGradients.push(serializedGradient);\n            }\n        }\n        var rampGradients = particleSystem.getRampGradients();\n        if (rampGradients) {\n            serializationObject.rampGradients = [];\n            for (var _a = 0, rampGradients_1 = rampGradients; _a < rampGradients_1.length; _a++) {\n                var rampGradient = rampGradients_1[_a];\n                var serializedGradient = {\n                    gradient: rampGradient.gradient,\n                    color: rampGradient.color.asArray(),\n                };\n                serializationObject.rampGradients.push(serializedGradient);\n            }\n            serializationObject.useRampGradients = particleSystem.useRampGradients;\n        }\n        var colorRemapGradients = particleSystem.getColorRemapGradients();\n        if (colorRemapGradients) {\n            serializationObject.colorRemapGradients = [];\n            for (var _b = 0, colorRemapGradients_1 = colorRemapGradients; _b < colorRemapGradients_1.length; _b++) {\n                var colorRemapGradient = colorRemapGradients_1[_b];\n                var serializedGradient = {\n                    gradient: colorRemapGradient.gradient,\n                    factor1: colorRemapGradient.factor1,\n                };\n                if (colorRemapGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = colorRemapGradient.factor2;\n                }\n                else {\n                    serializedGradient.factor2 = colorRemapGradient.factor1;\n                }\n                serializationObject.colorRemapGradients.push(serializedGradient);\n            }\n        }\n        var alphaRemapGradients = particleSystem.getAlphaRemapGradients();\n        if (alphaRemapGradients) {\n            serializationObject.alphaRemapGradients = [];\n            for (var _c = 0, alphaRemapGradients_1 = alphaRemapGradients; _c < alphaRemapGradients_1.length; _c++) {\n                var alphaRemapGradient = alphaRemapGradients_1[_c];\n                var serializedGradient = {\n                    gradient: alphaRemapGradient.gradient,\n                    factor1: alphaRemapGradient.factor1,\n                };\n                if (alphaRemapGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = alphaRemapGradient.factor2;\n                }\n                else {\n                    serializedGradient.factor2 = alphaRemapGradient.factor1;\n                }\n                serializationObject.alphaRemapGradients.push(serializedGradient);\n            }\n        }\n        var sizeGradients = particleSystem.getSizeGradients();\n        if (sizeGradients) {\n            serializationObject.sizeGradients = [];\n            for (var _d = 0, sizeGradients_1 = sizeGradients; _d < sizeGradients_1.length; _d++) {\n                var sizeGradient = sizeGradients_1[_d];\n                var serializedGradient = {\n                    gradient: sizeGradient.gradient,\n                    factor1: sizeGradient.factor1,\n                };\n                if (sizeGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = sizeGradient.factor2;\n                }\n                else {\n                    serializedGradient.factor2 = sizeGradient.factor1;\n                }\n                serializationObject.sizeGradients.push(serializedGradient);\n            }\n        }\n        var angularSpeedGradients = particleSystem.getAngularSpeedGradients();\n        if (angularSpeedGradients) {\n            serializationObject.angularSpeedGradients = [];\n            for (var _e = 0, angularSpeedGradients_1 = angularSpeedGradients; _e < angularSpeedGradients_1.length; _e++) {\n                var angularSpeedGradient = angularSpeedGradients_1[_e];\n                var serializedGradient = {\n                    gradient: angularSpeedGradient.gradient,\n                    factor1: angularSpeedGradient.factor1,\n                };\n                if (angularSpeedGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = angularSpeedGradient.factor2;\n                }\n                else {\n                    serializedGradient.factor2 = angularSpeedGradient.factor1;\n                }\n                serializationObject.angularSpeedGradients.push(serializedGradient);\n            }\n        }\n        var velocityGradients = particleSystem.getVelocityGradients();\n        if (velocityGradients) {\n            serializationObject.velocityGradients = [];\n            for (var _f = 0, velocityGradients_1 = velocityGradients; _f < velocityGradients_1.length; _f++) {\n                var velocityGradient = velocityGradients_1[_f];\n                var serializedGradient = {\n                    gradient: velocityGradient.gradient,\n                    factor1: velocityGradient.factor1,\n                };\n                if (velocityGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = velocityGradient.factor2;\n                }\n                else {\n                    serializedGradient.factor2 = velocityGradient.factor1;\n                }\n                serializationObject.velocityGradients.push(serializedGradient);\n            }\n        }\n        var dragGradients = particleSystem.getDragGradients();\n        if (dragGradients) {\n            serializationObject.dragGradients = [];\n            for (var _g = 0, dragGradients_1 = dragGradients; _g < dragGradients_1.length; _g++) {\n                var dragGradient = dragGradients_1[_g];\n                var serializedGradient = {\n                    gradient: dragGradient.gradient,\n                    factor1: dragGradient.factor1,\n                };\n                if (dragGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = dragGradient.factor2;\n                }\n                else {\n                    serializedGradient.factor2 = dragGradient.factor1;\n                }\n                serializationObject.dragGradients.push(serializedGradient);\n            }\n        }\n        var emitRateGradients = particleSystem.getEmitRateGradients();\n        if (emitRateGradients) {\n            serializationObject.emitRateGradients = [];\n            for (var _h = 0, emitRateGradients_1 = emitRateGradients; _h < emitRateGradients_1.length; _h++) {\n                var emitRateGradient = emitRateGradients_1[_h];\n                var serializedGradient = {\n                    gradient: emitRateGradient.gradient,\n                    factor1: emitRateGradient.factor1,\n                };\n                if (emitRateGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = emitRateGradient.factor2;\n                }\n                else {\n                    serializedGradient.factor2 = emitRateGradient.factor1;\n                }\n                serializationObject.emitRateGradients.push(serializedGradient);\n            }\n        }\n        var startSizeGradients = particleSystem.getStartSizeGradients();\n        if (startSizeGradients) {\n            serializationObject.startSizeGradients = [];\n            for (var _j = 0, startSizeGradients_1 = startSizeGradients; _j < startSizeGradients_1.length; _j++) {\n                var startSizeGradient = startSizeGradients_1[_j];\n                var serializedGradient = {\n                    gradient: startSizeGradient.gradient,\n                    factor1: startSizeGradient.factor1,\n                };\n                if (startSizeGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = startSizeGradient.factor2;\n                }\n                else {\n                    serializedGradient.factor2 = startSizeGradient.factor1;\n                }\n                serializationObject.startSizeGradients.push(serializedGradient);\n            }\n        }\n        var lifeTimeGradients = particleSystem.getLifeTimeGradients();\n        if (lifeTimeGradients) {\n            serializationObject.lifeTimeGradients = [];\n            for (var _k = 0, lifeTimeGradients_1 = lifeTimeGradients; _k < lifeTimeGradients_1.length; _k++) {\n                var lifeTimeGradient = lifeTimeGradients_1[_k];\n                var serializedGradient = {\n                    gradient: lifeTimeGradient.gradient,\n                    factor1: lifeTimeGradient.factor1,\n                };\n                if (lifeTimeGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = lifeTimeGradient.factor2;\n                }\n                else {\n                    serializedGradient.factor2 = lifeTimeGradient.factor1;\n                }\n                serializationObject.lifeTimeGradients.push(serializedGradient);\n            }\n        }\n        var limitVelocityGradients = particleSystem.getLimitVelocityGradients();\n        if (limitVelocityGradients) {\n            serializationObject.limitVelocityGradients = [];\n            for (var _l = 0, limitVelocityGradients_1 = limitVelocityGradients; _l < limitVelocityGradients_1.length; _l++) {\n                var limitVelocityGradient = limitVelocityGradients_1[_l];\n                var serializedGradient = {\n                    gradient: limitVelocityGradient.gradient,\n                    factor1: limitVelocityGradient.factor1,\n                };\n                if (limitVelocityGradient.factor2 !== undefined) {\n                    serializedGradient.factor2 = limitVelocityGradient.factor2;\n                }\n                else {\n                    serializedGradient.factor2 = limitVelocityGradient.factor1;\n                }\n                serializationObject.limitVelocityGradients.push(serializedGradient);\n            }\n            serializationObject.limitVelocityDamping = particleSystem.limitVelocityDamping;\n        }\n        if (particleSystem.noiseTexture) {\n            serializationObject.noiseTexture = particleSystem.noiseTexture.serialize();\n        }\n    };\n    /**\n     * @param parsedParticleSystem\n     * @param particleSystem\n     * @param sceneOrEngine\n     * @param rootUrl\n     * @hidden\n     */\n    ParticleSystem._Parse = function (parsedParticleSystem, particleSystem, sceneOrEngine, rootUrl) {\n        var _a, _b, _c;\n        var scene;\n        if (sceneOrEngine instanceof ThinEngine) {\n            scene = null;\n        }\n        else {\n            scene = sceneOrEngine;\n        }\n        var internalClass = GetClass(\"BABYLON.Texture\");\n        if (internalClass && scene) {\n            // Texture\n            if (parsedParticleSystem.texture) {\n                particleSystem.particleTexture = internalClass.Parse(parsedParticleSystem.texture, scene, rootUrl);\n            }\n            else if (parsedParticleSystem.textureName) {\n                particleSystem.particleTexture = new internalClass(rootUrl + parsedParticleSystem.textureName, scene, false, parsedParticleSystem.invertY !== undefined ? parsedParticleSystem.invertY : true);\n                particleSystem.particleTexture.name = parsedParticleSystem.textureName;\n            }\n        }\n        // Emitter\n        if (!parsedParticleSystem.emitterId && parsedParticleSystem.emitterId !== 0 && parsedParticleSystem.emitter === undefined) {\n            particleSystem.emitter = Vector3.Zero();\n        }\n        else if (parsedParticleSystem.emitterId && scene) {\n            particleSystem.emitter = scene.getLastMeshById(parsedParticleSystem.emitterId);\n        }\n        else {\n            particleSystem.emitter = Vector3.FromArray(parsedParticleSystem.emitter);\n        }\n        particleSystem.isLocal = !!parsedParticleSystem.isLocal;\n        // Misc.\n        if (parsedParticleSystem.renderingGroupId !== undefined) {\n            particleSystem.renderingGroupId = parsedParticleSystem.renderingGroupId;\n        }\n        if (parsedParticleSystem.isBillboardBased !== undefined) {\n            particleSystem.isBillboardBased = parsedParticleSystem.isBillboardBased;\n        }\n        if (parsedParticleSystem.billboardMode !== undefined) {\n            particleSystem.billboardMode = parsedParticleSystem.billboardMode;\n        }\n        // Animations\n        if (parsedParticleSystem.animations) {\n            for (var animationIndex = 0; animationIndex < parsedParticleSystem.animations.length; animationIndex++) {\n                var parsedAnimation = parsedParticleSystem.animations[animationIndex];\n                var internalClass_1 = GetClass(\"BABYLON.Animation\");\n                if (internalClass_1) {\n                    particleSystem.animations.push(internalClass_1.Parse(parsedAnimation));\n                }\n            }\n            particleSystem.beginAnimationOnStart = parsedParticleSystem.beginAnimationOnStart;\n            particleSystem.beginAnimationFrom = parsedParticleSystem.beginAnimationFrom;\n            particleSystem.beginAnimationTo = parsedParticleSystem.beginAnimationTo;\n            particleSystem.beginAnimationLoop = parsedParticleSystem.beginAnimationLoop;\n        }\n        if (parsedParticleSystem.autoAnimate && scene) {\n            scene.beginAnimation(particleSystem, parsedParticleSystem.autoAnimateFrom, parsedParticleSystem.autoAnimateTo, parsedParticleSystem.autoAnimateLoop, parsedParticleSystem.autoAnimateSpeed || 1.0);\n        }\n        // Particle system\n        particleSystem.startDelay = parsedParticleSystem.startDelay | 0;\n        particleSystem.minAngularSpeed = parsedParticleSystem.minAngularSpeed;\n        particleSystem.maxAngularSpeed = parsedParticleSystem.maxAngularSpeed;\n        particleSystem.minSize = parsedParticleSystem.minSize;\n        particleSystem.maxSize = parsedParticleSystem.maxSize;\n        if (parsedParticleSystem.minScaleX) {\n            particleSystem.minScaleX = parsedParticleSystem.minScaleX;\n            particleSystem.maxScaleX = parsedParticleSystem.maxScaleX;\n            particleSystem.minScaleY = parsedParticleSystem.minScaleY;\n            particleSystem.maxScaleY = parsedParticleSystem.maxScaleY;\n        }\n        if (parsedParticleSystem.preWarmCycles !== undefined) {\n            particleSystem.preWarmCycles = parsedParticleSystem.preWarmCycles;\n            particleSystem.preWarmStepOffset = parsedParticleSystem.preWarmStepOffset;\n        }\n        if (parsedParticleSystem.minInitialRotation !== undefined) {\n            particleSystem.minInitialRotation = parsedParticleSystem.minInitialRotation;\n            particleSystem.maxInitialRotation = parsedParticleSystem.maxInitialRotation;\n        }\n        particleSystem.minLifeTime = parsedParticleSystem.minLifeTime;\n        particleSystem.maxLifeTime = parsedParticleSystem.maxLifeTime;\n        particleSystem.minEmitPower = parsedParticleSystem.minEmitPower;\n        particleSystem.maxEmitPower = parsedParticleSystem.maxEmitPower;\n        particleSystem.emitRate = parsedParticleSystem.emitRate;\n        particleSystem.gravity = Vector3.FromArray(parsedParticleSystem.gravity);\n        if (parsedParticleSystem.noiseStrength) {\n            particleSystem.noiseStrength = Vector3.FromArray(parsedParticleSystem.noiseStrength);\n        }\n        particleSystem.color1 = Color4.FromArray(parsedParticleSystem.color1);\n        particleSystem.color2 = Color4.FromArray(parsedParticleSystem.color2);\n        particleSystem.colorDead = Color4.FromArray(parsedParticleSystem.colorDead);\n        particleSystem.updateSpeed = parsedParticleSystem.updateSpeed;\n        particleSystem.targetStopDuration = parsedParticleSystem.targetStopDuration;\n        particleSystem.blendMode = parsedParticleSystem.blendMode;\n        if (parsedParticleSystem.colorGradients) {\n            for (var _i = 0, _d = parsedParticleSystem.colorGradients; _i < _d.length; _i++) {\n                var colorGradient = _d[_i];\n                particleSystem.addColorGradient(colorGradient.gradient, Color4.FromArray(colorGradient.color1), colorGradient.color2 ? Color4.FromArray(colorGradient.color2) : undefined);\n            }\n        }\n        if (parsedParticleSystem.rampGradients) {\n            for (var _e = 0, _f = parsedParticleSystem.rampGradients; _e < _f.length; _e++) {\n                var rampGradient = _f[_e];\n                particleSystem.addRampGradient(rampGradient.gradient, Color3.FromArray(rampGradient.color));\n            }\n            particleSystem.useRampGradients = parsedParticleSystem.useRampGradients;\n        }\n        if (parsedParticleSystem.colorRemapGradients) {\n            for (var _g = 0, _h = parsedParticleSystem.colorRemapGradients; _g < _h.length; _g++) {\n                var colorRemapGradient = _h[_g];\n                particleSystem.addColorRemapGradient(colorRemapGradient.gradient, colorRemapGradient.factor1 !== undefined ? colorRemapGradient.factor1 : colorRemapGradient.factor, colorRemapGradient.factor2);\n            }\n        }\n        if (parsedParticleSystem.alphaRemapGradients) {\n            for (var _j = 0, _k = parsedParticleSystem.alphaRemapGradients; _j < _k.length; _j++) {\n                var alphaRemapGradient = _k[_j];\n                particleSystem.addAlphaRemapGradient(alphaRemapGradient.gradient, alphaRemapGradient.factor1 !== undefined ? alphaRemapGradient.factor1 : alphaRemapGradient.factor, alphaRemapGradient.factor2);\n            }\n        }\n        if (parsedParticleSystem.sizeGradients) {\n            for (var _l = 0, _m = parsedParticleSystem.sizeGradients; _l < _m.length; _l++) {\n                var sizeGradient = _m[_l];\n                particleSystem.addSizeGradient(sizeGradient.gradient, sizeGradient.factor1 !== undefined ? sizeGradient.factor1 : sizeGradient.factor, sizeGradient.factor2);\n            }\n        }\n        if (parsedParticleSystem.angularSpeedGradients) {\n            for (var _o = 0, _p = parsedParticleSystem.angularSpeedGradients; _o < _p.length; _o++) {\n                var angularSpeedGradient = _p[_o];\n                particleSystem.addAngularSpeedGradient(angularSpeedGradient.gradient, angularSpeedGradient.factor1 !== undefined ? angularSpeedGradient.factor1 : angularSpeedGradient.factor, angularSpeedGradient.factor2);\n            }\n        }\n        if (parsedParticleSystem.velocityGradients) {\n            for (var _q = 0, _r = parsedParticleSystem.velocityGradients; _q < _r.length; _q++) {\n                var velocityGradient = _r[_q];\n                particleSystem.addVelocityGradient(velocityGradient.gradient, velocityGradient.factor1 !== undefined ? velocityGradient.factor1 : velocityGradient.factor, velocityGradient.factor2);\n            }\n        }\n        if (parsedParticleSystem.dragGradients) {\n            for (var _s = 0, _t = parsedParticleSystem.dragGradients; _s < _t.length; _s++) {\n                var dragGradient = _t[_s];\n                particleSystem.addDragGradient(dragGradient.gradient, dragGradient.factor1 !== undefined ? dragGradient.factor1 : dragGradient.factor, dragGradient.factor2);\n            }\n        }\n        if (parsedParticleSystem.emitRateGradients) {\n            for (var _u = 0, _v = parsedParticleSystem.emitRateGradients; _u < _v.length; _u++) {\n                var emitRateGradient = _v[_u];\n                particleSystem.addEmitRateGradient(emitRateGradient.gradient, emitRateGradient.factor1 !== undefined ? emitRateGradient.factor1 : emitRateGradient.factor, emitRateGradient.factor2);\n            }\n        }\n        if (parsedParticleSystem.startSizeGradients) {\n            for (var _w = 0, _x = parsedParticleSystem.startSizeGradients; _w < _x.length; _w++) {\n                var startSizeGradient = _x[_w];\n                particleSystem.addStartSizeGradient(startSizeGradient.gradient, startSizeGradient.factor1 !== undefined ? startSizeGradient.factor1 : startSizeGradient.factor, startSizeGradient.factor2);\n            }\n        }\n        if (parsedParticleSystem.lifeTimeGradients) {\n            for (var _y = 0, _z = parsedParticleSystem.lifeTimeGradients; _y < _z.length; _y++) {\n                var lifeTimeGradient = _z[_y];\n                particleSystem.addLifeTimeGradient(lifeTimeGradient.gradient, lifeTimeGradient.factor1 !== undefined ? lifeTimeGradient.factor1 : lifeTimeGradient.factor, lifeTimeGradient.factor2);\n            }\n        }\n        if (parsedParticleSystem.limitVelocityGradients) {\n            for (var _0 = 0, _1 = parsedParticleSystem.limitVelocityGradients; _0 < _1.length; _0++) {\n                var limitVelocityGradient = _1[_0];\n                particleSystem.addLimitVelocityGradient(limitVelocityGradient.gradient, limitVelocityGradient.factor1 !== undefined ? limitVelocityGradient.factor1 : limitVelocityGradient.factor, limitVelocityGradient.factor2);\n            }\n            particleSystem.limitVelocityDamping = parsedParticleSystem.limitVelocityDamping;\n        }\n        if (parsedParticleSystem.noiseTexture && scene) {\n            var internalClass_2 = GetClass(\"BABYLON.ProceduralTexture\");\n            particleSystem.noiseTexture = internalClass_2.Parse(parsedParticleSystem.noiseTexture, scene, rootUrl);\n        }\n        // Emitter\n        var emitterType;\n        if (parsedParticleSystem.particleEmitterType) {\n            switch (parsedParticleSystem.particleEmitterType.type) {\n                case \"SphereParticleEmitter\":\n                    emitterType = new SphereParticleEmitter();\n                    break;\n                case \"SphereDirectedParticleEmitter\":\n                    emitterType = new SphereDirectedParticleEmitter();\n                    break;\n                case \"ConeEmitter\":\n                case \"ConeParticleEmitter\":\n                    emitterType = new ConeParticleEmitter();\n                    break;\n                case \"CylinderParticleEmitter\":\n                    emitterType = new CylinderParticleEmitter();\n                    break;\n                case \"CylinderDirectedParticleEmitter\":\n                    emitterType = new CylinderDirectedParticleEmitter();\n                    break;\n                case \"HemisphericParticleEmitter\":\n                    emitterType = new HemisphericParticleEmitter();\n                    break;\n                case \"PointParticleEmitter\":\n                    emitterType = new PointParticleEmitter();\n                    break;\n                case \"MeshParticleEmitter\":\n                    emitterType = new MeshParticleEmitter();\n                    break;\n                case \"BoxEmitter\":\n                case \"BoxParticleEmitter\":\n                default:\n                    emitterType = new BoxParticleEmitter();\n                    break;\n            }\n            emitterType.parse(parsedParticleSystem.particleEmitterType, scene);\n        }\n        else {\n            emitterType = new BoxParticleEmitter();\n            emitterType.parse(parsedParticleSystem, scene);\n        }\n        particleSystem.particleEmitterType = emitterType;\n        // Animation sheet\n        particleSystem.startSpriteCellID = parsedParticleSystem.startSpriteCellID;\n        particleSystem.endSpriteCellID = parsedParticleSystem.endSpriteCellID;\n        particleSystem.spriteCellLoop = (_a = parsedParticleSystem.spriteCellLoop) !== null && _a !== void 0 ? _a : true;\n        particleSystem.spriteCellWidth = parsedParticleSystem.spriteCellWidth;\n        particleSystem.spriteCellHeight = parsedParticleSystem.spriteCellHeight;\n        particleSystem.spriteCellChangeSpeed = parsedParticleSystem.spriteCellChangeSpeed;\n        particleSystem.spriteRandomStartCell = parsedParticleSystem.spriteRandomStartCell;\n        particleSystem.disposeOnStop = (_b = parsedParticleSystem.disposeOnStop) !== null && _b !== void 0 ? _b : false;\n        particleSystem.manualEmitCount = (_c = parsedParticleSystem.manualEmitCount) !== null && _c !== void 0 ? _c : -1;\n    };\n    /**\n     * Parses a JSON object to create a particle system.\n     * @param parsedParticleSystem The JSON object to parse\n     * @param sceneOrEngine The scene or the engine to create the particle system in\n     * @param rootUrl The root url to use to load external dependencies like texture\n     * @param doNotStart Ignore the preventAutoStart attribute and does not start\n     * @param capacity defines the system capacity (if null or undefined the sotred capacity will be used)\n     * @returns the Parsed particle system\n     */\n    ParticleSystem.Parse = function (parsedParticleSystem, sceneOrEngine, rootUrl, doNotStart, capacity) {\n        if (doNotStart === void 0) { doNotStart = false; }\n        var name = parsedParticleSystem.name;\n        var custom = null;\n        var program = null;\n        var engine;\n        var scene;\n        if (sceneOrEngine instanceof ThinEngine) {\n            engine = sceneOrEngine;\n        }\n        else {\n            scene = sceneOrEngine;\n            engine = scene.getEngine();\n        }\n        if (parsedParticleSystem.customShader && engine.createEffectForParticles) {\n            program = parsedParticleSystem.customShader;\n            var defines = program.shaderOptions.defines.length > 0 ? program.shaderOptions.defines.join(\"\\n\") : \"\";\n            custom = engine.createEffectForParticles(program.shaderPath.fragmentElement, program.shaderOptions.uniforms, program.shaderOptions.samplers, defines);\n        }\n        var particleSystem = new ParticleSystem(name, capacity || parsedParticleSystem.capacity, sceneOrEngine, custom, parsedParticleSystem.isAnimationSheetEnabled);\n        particleSystem.customShader = program;\n        particleSystem._rootUrl = rootUrl;\n        if (parsedParticleSystem.id) {\n            particleSystem.id = parsedParticleSystem.id;\n        }\n        // SubEmitters\n        if (parsedParticleSystem.subEmitters) {\n            particleSystem.subEmitters = [];\n            for (var _i = 0, _a = parsedParticleSystem.subEmitters; _i < _a.length; _i++) {\n                var cell = _a[_i];\n                var cellArray = [];\n                for (var _b = 0, cell_1 = cell; _b < cell_1.length; _b++) {\n                    var sub = cell_1[_b];\n                    cellArray.push(SubEmitter.Parse(sub, sceneOrEngine, rootUrl));\n                }\n                particleSystem.subEmitters.push(cellArray);\n            }\n        }\n        ParticleSystem._Parse(parsedParticleSystem, particleSystem, sceneOrEngine, rootUrl);\n        if (parsedParticleSystem.textureMask) {\n            particleSystem.textureMask = Color4.FromArray(parsedParticleSystem.textureMask);\n        }\n        // Auto start\n        if (parsedParticleSystem.preventAutoStart) {\n            particleSystem.preventAutoStart = parsedParticleSystem.preventAutoStart;\n        }\n        if (!doNotStart && !particleSystem.preventAutoStart) {\n            particleSystem.start();\n        }\n        return particleSystem;\n    };\n    /**\n     * Billboard mode will only apply to Y axis\n     */\n    ParticleSystem.BILLBOARDMODE_Y = 2;\n    /**\n     * Billboard mode will apply to all axes\n     */\n    ParticleSystem.BILLBOARDMODE_ALL = 7;\n    /**\n     * Special billboard mode where the particle will be biilboard to the camera but rotated to align with direction\n     */\n    ParticleSystem.BILLBOARDMODE_STRETCHED = 8;\n    return ParticleSystem;\n}(BaseParticleSystem));\nexport { ParticleSystem };\nSubEmitter._ParseParticleSystem = ParticleSystem.Parse;\n//# sourceMappingURL=particleSystem.js.map","import { Vector3 } from \"../Maths/math.vector.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\nimport { GetClass } from \"../Misc/typeStore.js\";\n/**\n * Type of sub emitter\n */\nexport var SubEmitterType;\n(function (SubEmitterType) {\n    /**\n     * Attached to the particle over it's lifetime\n     */\n    SubEmitterType[SubEmitterType[\"ATTACHED\"] = 0] = \"ATTACHED\";\n    /**\n     * Created when the particle dies\n     */\n    SubEmitterType[SubEmitterType[\"END\"] = 1] = \"END\";\n})(SubEmitterType || (SubEmitterType = {}));\n/**\n * Sub emitter class used to emit particles from an existing particle\n */\nvar SubEmitter = /** @class */ (function () {\n    /**\n     * Creates a sub emitter\n     * @param particleSystem the particle system to be used by the sub emitter\n     */\n    function SubEmitter(\n    /**\n     * the particle system to be used by the sub emitter\n     */\n    particleSystem) {\n        this.particleSystem = particleSystem;\n        /**\n         * Type of the submitter (Default: END)\n         */\n        this.type = SubEmitterType.END;\n        /**\n         * If the particle should inherit the direction from the particle it's attached to. (+Y will face the direction the particle is moving) (Default: false)\n         * Note: This only is supported when using an emitter of type Mesh\n         */\n        this.inheritDirection = false;\n        /**\n         * How much of the attached particles speed should be added to the sub emitted particle (default: 0)\n         */\n        this.inheritedVelocityAmount = 0;\n        // Create mesh as emitter to support rotation\n        if (!particleSystem.emitter || !particleSystem.emitter.dispose) {\n            var internalClass = GetClass(\"BABYLON.AbstractMesh\");\n            particleSystem.emitter = new internalClass(\"SubemitterSystemEmitter\", particleSystem.getScene());\n            particleSystem._disposeEmitterOnDispose = true;\n        }\n    }\n    /**\n     * Clones the sub emitter\n     * @returns the cloned sub emitter\n     */\n    SubEmitter.prototype.clone = function () {\n        // Clone particle system\n        var emitter = this.particleSystem.emitter;\n        if (!emitter) {\n            emitter = new Vector3();\n        }\n        else if (emitter instanceof Vector3) {\n            emitter = emitter.clone();\n        }\n        else if (emitter.getClassName().indexOf(\"Mesh\") !== -1) {\n            var internalClass = GetClass(\"BABYLON.Mesh\");\n            emitter = new internalClass(\"\", emitter.getScene());\n            emitter.isVisible = false;\n        }\n        var clone = new SubEmitter(this.particleSystem.clone(this.particleSystem.name, emitter));\n        // Clone properties\n        clone.particleSystem.name += \"Clone\";\n        clone.type = this.type;\n        clone.inheritDirection = this.inheritDirection;\n        clone.inheritedVelocityAmount = this.inheritedVelocityAmount;\n        clone.particleSystem._disposeEmitterOnDispose = true;\n        clone.particleSystem.disposeOnStop = true;\n        return clone;\n    };\n    /**\n     * Serialize current object to a JSON object\n     * @param serializeTexture defines if the texture must be serialized as well\n     * @returns the serialized object\n     */\n    SubEmitter.prototype.serialize = function (serializeTexture) {\n        if (serializeTexture === void 0) { serializeTexture = false; }\n        var serializationObject = {};\n        serializationObject.type = this.type;\n        serializationObject.inheritDirection = this.inheritDirection;\n        serializationObject.inheritedVelocityAmount = this.inheritedVelocityAmount;\n        serializationObject.particleSystem = this.particleSystem.serialize(serializeTexture);\n        return serializationObject;\n    };\n    /**\n     * @param system\n     * @param sceneOrEngine\n     * @param rootUrl\n     * @param doNotStart\n     * @hidden\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    SubEmitter._ParseParticleSystem = function (system, sceneOrEngine, rootUrl, doNotStart) {\n        if (doNotStart === void 0) { doNotStart = false; }\n        throw _WarnImport(\"ParseParticle\");\n    };\n    /**\n     * Creates a new SubEmitter from a serialized JSON version\n     * @param serializationObject defines the JSON object to read from\n     * @param sceneOrEngine defines the hosting scene or the hosting engine\n     * @param rootUrl defines the rootUrl for data loading\n     * @returns a new SubEmitter\n     */\n    SubEmitter.Parse = function (serializationObject, sceneOrEngine, rootUrl) {\n        var system = serializationObject.particleSystem;\n        var subEmitter = new SubEmitter(SubEmitter._ParseParticleSystem(system, sceneOrEngine, rootUrl, true));\n        subEmitter.type = serializationObject.type;\n        subEmitter.inheritDirection = serializationObject.inheritDirection;\n        subEmitter.inheritedVelocityAmount = serializationObject.inheritedVelocityAmount;\n        subEmitter.particleSystem._isSubEmitter = true;\n        return subEmitter;\n    };\n    /** Release associated resources */\n    SubEmitter.prototype.dispose = function () {\n        this.particleSystem.dispose();\n    };\n    return SubEmitter;\n}());\nexport { SubEmitter };\n//# sourceMappingURL=subEmitter.js.map","import { Quaternion, Vector3, Matrix } from \"../../Maths/math.vector.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { PhysicsImpostor } from \"../../Physics/physicsImpostor.js\";\nimport { PhysicsJoint } from \"../../Physics/physicsJoint.js\";\nimport { VertexBuffer } from \"../../Buffers/buffer.js\";\nimport { VertexData } from \"../../Meshes/mesh.vertexData.js\";\nimport { ExtrudeShape } from \"../../Meshes/Builders/shapeBuilder.js\";\nimport { CreateLines } from \"../../Meshes/Builders/linesBuilder.js\";\nimport { PhysicsRaycastResult } from \"../physicsRaycastResult.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\nimport { Epsilon } from \"../../Maths/math.constants.js\";\n/**\n * AmmoJS Physics plugin\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\n * @see https://github.com/kripken/ammo.js/\n */\nvar AmmoJSPlugin = /** @class */ (function () {\n    /**\n     * Initializes the ammoJS plugin\n     * @param _useDeltaForWorldStep if the time between frames should be used when calculating physics steps (Default: true)\n     * @param ammoInjection can be used to inject your own ammo reference\n     * @param overlappingPairCache can be used to specify your own overlapping pair cache\n     */\n    function AmmoJSPlugin(_useDeltaForWorldStep, ammoInjection, overlappingPairCache) {\n        if (_useDeltaForWorldStep === void 0) { _useDeltaForWorldStep = true; }\n        if (ammoInjection === void 0) { ammoInjection = Ammo; }\n        if (overlappingPairCache === void 0) { overlappingPairCache = null; }\n        var _this = this;\n        this._useDeltaForWorldStep = _useDeltaForWorldStep;\n        /**\n         * Reference to the Ammo library\n         */\n        this.bjsAMMO = {};\n        /**\n         * Name of the plugin\n         */\n        this.name = \"AmmoJSPlugin\";\n        this._timeStep = 1 / 60;\n        this._fixedTimeStep = 1 / 60;\n        this._maxSteps = 5;\n        this._tmpQuaternion = new Quaternion();\n        this._tmpContactCallbackResult = false;\n        this._tmpContactPoint = new Vector3();\n        this._tmpVec3 = new Vector3();\n        this._tmpMatrix = new Matrix();\n        if (typeof ammoInjection === \"function\") {\n            Logger.Error(\"AmmoJS is not ready. Please make sure you await Ammo() before using the plugin.\");\n            return;\n        }\n        else {\n            this.bjsAMMO = ammoInjection;\n        }\n        if (!this.isSupported()) {\n            Logger.Error(\"AmmoJS is not available. Please make sure you included the js file.\");\n            return;\n        }\n        // Initialize the physics world\n        this._collisionConfiguration = new this.bjsAMMO.btSoftBodyRigidBodyCollisionConfiguration();\n        this._dispatcher = new this.bjsAMMO.btCollisionDispatcher(this._collisionConfiguration);\n        this._overlappingPairCache = overlappingPairCache || new this.bjsAMMO.btDbvtBroadphase();\n        this._solver = new this.bjsAMMO.btSequentialImpulseConstraintSolver();\n        this._softBodySolver = new this.bjsAMMO.btDefaultSoftBodySolver();\n        this.world = new this.bjsAMMO.btSoftRigidDynamicsWorld(this._dispatcher, this._overlappingPairCache, this._solver, this._collisionConfiguration, this._softBodySolver);\n        this._tmpAmmoConcreteContactResultCallback = new this.bjsAMMO.ConcreteContactResultCallback();\n        this._tmpAmmoConcreteContactResultCallback.addSingleResult = function (contactPoint) {\n            contactPoint = _this.bjsAMMO.wrapPointer(contactPoint, _this.bjsAMMO.btManifoldPoint);\n            var worldPoint = contactPoint.getPositionWorldOnA();\n            _this._tmpContactPoint.x = worldPoint.x();\n            _this._tmpContactPoint.y = worldPoint.y();\n            _this._tmpContactPoint.z = worldPoint.z();\n            _this._tmpContactCallbackResult = true;\n        };\n        this._raycastResult = new PhysicsRaycastResult();\n        // Create temp ammo variables\n        this._tmpAmmoTransform = new this.bjsAMMO.btTransform();\n        this._tmpAmmoTransform.setIdentity();\n        this._tmpAmmoQuaternion = new this.bjsAMMO.btQuaternion(0, 0, 0, 1);\n        this._tmpAmmoVectorA = new this.bjsAMMO.btVector3(0, 0, 0);\n        this._tmpAmmoVectorB = new this.bjsAMMO.btVector3(0, 0, 0);\n        this._tmpAmmoVectorC = new this.bjsAMMO.btVector3(0, 0, 0);\n        this._tmpAmmoVectorD = new this.bjsAMMO.btVector3(0, 0, 0);\n    }\n    /**\n     * Sets the gravity of the physics world (m/(s^2))\n     * @param gravity Gravity to set\n     */\n    AmmoJSPlugin.prototype.setGravity = function (gravity) {\n        this._tmpAmmoVectorA.setValue(gravity.x, gravity.y, gravity.z);\n        this.world.setGravity(this._tmpAmmoVectorA);\n        this.world.getWorldInfo().set_m_gravity(this._tmpAmmoVectorA);\n    };\n    /**\n     * Amount of time to step forward on each frame (only used if useDeltaForWorldStep is false in the constructor)\n     * @param timeStep timestep to use in seconds\n     */\n    AmmoJSPlugin.prototype.setTimeStep = function (timeStep) {\n        this._timeStep = timeStep;\n    };\n    /**\n     * Increment to step forward in the physics engine (If timeStep is set to 1/60 and fixedTimeStep is set to 1/120 the physics engine should run 2 steps per frame) (Default: 1/60)\n     * @param fixedTimeStep fixedTimeStep to use in seconds\n     */\n    AmmoJSPlugin.prototype.setFixedTimeStep = function (fixedTimeStep) {\n        this._fixedTimeStep = fixedTimeStep;\n    };\n    /**\n     * Sets the maximum number of steps by the physics engine per frame (Default: 5)\n     * @param maxSteps the maximum number of steps by the physics engine per frame\n     */\n    AmmoJSPlugin.prototype.setMaxSteps = function (maxSteps) {\n        this._maxSteps = maxSteps;\n    };\n    /**\n     * Gets the current timestep (only used if useDeltaForWorldStep is false in the constructor)\n     * @returns the current timestep in seconds\n     */\n    AmmoJSPlugin.prototype.getTimeStep = function () {\n        return this._timeStep;\n    };\n    // Ammo's contactTest and contactPairTest take a callback that runs synchronously, wrap them so that they are easier to consume\n    AmmoJSPlugin.prototype._isImpostorInContact = function (impostor) {\n        this._tmpContactCallbackResult = false;\n        this.world.contactTest(impostor.physicsBody, this._tmpAmmoConcreteContactResultCallback);\n        return this._tmpContactCallbackResult;\n    };\n    // Ammo's collision events have some weird quirks\n    // contactPairTest fires too many events as it fires events even when objects are close together but contactTest does not\n    // so only fire event if both contactTest and contactPairTest have a hit\n    AmmoJSPlugin.prototype._isImpostorPairInContact = function (impostorA, impostorB) {\n        this._tmpContactCallbackResult = false;\n        this.world.contactPairTest(impostorA.physicsBody, impostorB.physicsBody, this._tmpAmmoConcreteContactResultCallback);\n        return this._tmpContactCallbackResult;\n    };\n    // Ammo's behavior when maxSteps > 0 does not behave as described in docs\n    // @see http://www.bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World\n    //\n    // When maxSteps is 0 do the entire simulation in one step\n    // When maxSteps is > 0, run up to maxStep times, if on the last step the (remaining step - fixedTimeStep) is < fixedTimeStep, the remainder will be used for the step. (eg. if remainder is 1.001 and fixedTimeStep is 1 the last step will be 1.001, if instead it did 2 steps (1, 0.001) issues occuered when having a tiny step in ammo)\n    // Note: To get deterministic physics, timeStep would always need to be divisible by fixedTimeStep\n    AmmoJSPlugin.prototype._stepSimulation = function (timeStep, maxSteps, fixedTimeStep) {\n        if (timeStep === void 0) { timeStep = 1 / 60; }\n        if (maxSteps === void 0) { maxSteps = 10; }\n        if (fixedTimeStep === void 0) { fixedTimeStep = 1 / 60; }\n        if (maxSteps == 0) {\n            this.world.stepSimulation(timeStep, 0);\n        }\n        else {\n            while (maxSteps > 0 && timeStep > 0) {\n                if (timeStep - fixedTimeStep < fixedTimeStep) {\n                    this.world.stepSimulation(timeStep, 0);\n                    timeStep = 0;\n                }\n                else {\n                    timeStep -= fixedTimeStep;\n                    this.world.stepSimulation(fixedTimeStep, 0);\n                }\n                maxSteps--;\n            }\n        }\n    };\n    /**\n     * Moves the physics simulation forward delta seconds and updates the given physics imposters\n     * Prior to the step the imposters physics location is set to the position of the babylon meshes\n     * After the step the babylon meshes are set to the position of the physics imposters\n     * @param delta amount of time to step forward\n     * @param impostors array of imposters to update before/after the step\n     */\n    AmmoJSPlugin.prototype.executeStep = function (delta, impostors) {\n        for (var _i = 0, impostors_1 = impostors; _i < impostors_1.length; _i++) {\n            var impostor = impostors_1[_i];\n            // Update physics world objects to match babylon world\n            if (!impostor.soft) {\n                impostor.beforeStep();\n            }\n        }\n        this._stepSimulation(this._useDeltaForWorldStep ? delta : this._timeStep, this._maxSteps, this._fixedTimeStep);\n        for (var _a = 0, impostors_2 = impostors; _a < impostors_2.length; _a++) {\n            var mainImpostor = impostors_2[_a];\n            // After physics update make babylon world objects match physics world objects\n            if (mainImpostor.soft) {\n                this._afterSoftStep(mainImpostor);\n            }\n            else {\n                mainImpostor.afterStep();\n            }\n            // Handle collision event\n            if (mainImpostor._onPhysicsCollideCallbacks.length > 0) {\n                if (this._isImpostorInContact(mainImpostor)) {\n                    for (var _b = 0, _c = mainImpostor._onPhysicsCollideCallbacks; _b < _c.length; _b++) {\n                        var collideCallback = _c[_b];\n                        for (var _d = 0, _e = collideCallback.otherImpostors; _d < _e.length; _d++) {\n                            var otherImpostor = _e[_d];\n                            if (mainImpostor.physicsBody.isActive() || otherImpostor.physicsBody.isActive()) {\n                                if (this._isImpostorPairInContact(mainImpostor, otherImpostor)) {\n                                    mainImpostor.onCollide({ body: otherImpostor.physicsBody, point: this._tmpContactPoint });\n                                    otherImpostor.onCollide({ body: mainImpostor.physicsBody, point: this._tmpContactPoint });\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Update babylon mesh to match physics world object\n     * @param impostor imposter to match\n     */\n    AmmoJSPlugin.prototype._afterSoftStep = function (impostor) {\n        if (impostor.type === PhysicsImpostor.RopeImpostor) {\n            this._ropeStep(impostor);\n        }\n        else {\n            this._softbodyOrClothStep(impostor);\n        }\n    };\n    /**\n     * Update babylon mesh vertices vertices to match physics world softbody or cloth\n     * @param impostor imposter to match\n     */\n    AmmoJSPlugin.prototype._ropeStep = function (impostor) {\n        var bodyVertices = impostor.physicsBody.get_m_nodes();\n        var nbVertices = bodyVertices.size();\n        var node;\n        var nodePositions;\n        var x, y, z;\n        var path = new Array();\n        for (var n = 0; n < nbVertices; n++) {\n            node = bodyVertices.at(n);\n            nodePositions = node.get_m_x();\n            x = nodePositions.x();\n            y = nodePositions.y();\n            z = nodePositions.z();\n            path.push(new Vector3(x, y, z));\n        }\n        var object = impostor.object;\n        var shape = impostor.getParam(\"shape\");\n        if (impostor._isFromLine) {\n            impostor.object = CreateLines(\"lines\", { points: path, instance: object });\n        }\n        else {\n            impostor.object = ExtrudeShape(\"ext\", { shape: shape, path: path, instance: object });\n        }\n    };\n    /**\n     * Update babylon mesh vertices vertices to match physics world softbody or cloth\n     * @param impostor imposter to match\n     */\n    AmmoJSPlugin.prototype._softbodyOrClothStep = function (impostor) {\n        var normalDirection = impostor.type === PhysicsImpostor.ClothImpostor ? 1 : -1;\n        var object = impostor.object;\n        var vertexPositions = object.getVerticesData(VertexBuffer.PositionKind);\n        if (!vertexPositions) {\n            vertexPositions = [];\n        }\n        var vertexNormals = object.getVerticesData(VertexBuffer.NormalKind);\n        if (!vertexNormals) {\n            vertexNormals = [];\n        }\n        var nbVertices = vertexPositions.length / 3;\n        var bodyVertices = impostor.physicsBody.get_m_nodes();\n        var node;\n        var nodePositions;\n        var x, y, z;\n        var nx, ny, nz;\n        for (var n = 0; n < nbVertices; n++) {\n            node = bodyVertices.at(n);\n            nodePositions = node.get_m_x();\n            x = nodePositions.x();\n            y = nodePositions.y();\n            z = nodePositions.z() * normalDirection;\n            var nodeNormals = node.get_m_n();\n            nx = nodeNormals.x();\n            ny = nodeNormals.y();\n            nz = nodeNormals.z() * normalDirection;\n            vertexPositions[3 * n] = x;\n            vertexPositions[3 * n + 1] = y;\n            vertexPositions[3 * n + 2] = z;\n            vertexNormals[3 * n] = nx;\n            vertexNormals[3 * n + 1] = ny;\n            vertexNormals[3 * n + 2] = nz;\n        }\n        var vertex_data = new VertexData();\n        vertex_data.positions = vertexPositions;\n        vertex_data.normals = vertexNormals;\n        vertex_data.uvs = object.getVerticesData(VertexBuffer.UVKind);\n        vertex_data.colors = object.getVerticesData(VertexBuffer.ColorKind);\n        if (object && object.getIndices) {\n            vertex_data.indices = object.getIndices();\n        }\n        vertex_data.applyToMesh(object);\n    };\n    /**\n     * Applies an impulse on the imposter\n     * @param impostor imposter to apply impulse to\n     * @param force amount of force to be applied to the imposter\n     * @param contactPoint the location to apply the impulse on the imposter\n     */\n    AmmoJSPlugin.prototype.applyImpulse = function (impostor, force, contactPoint) {\n        if (!impostor.soft) {\n            impostor.physicsBody.activate();\n            var worldPoint = this._tmpAmmoVectorA;\n            var impulse = this._tmpAmmoVectorB;\n            // Convert contactPoint relative to center of mass\n            if (impostor.object && impostor.object.getWorldMatrix) {\n                contactPoint.subtractInPlace(impostor.object.getWorldMatrix().getTranslation());\n            }\n            worldPoint.setValue(contactPoint.x, contactPoint.y, contactPoint.z);\n            impulse.setValue(force.x, force.y, force.z);\n            impostor.physicsBody.applyImpulse(impulse, worldPoint);\n        }\n        else {\n            Logger.Warn(\"Cannot be applied to a soft body\");\n        }\n    };\n    /**\n     * Applies a force on the imposter\n     * @param impostor imposter to apply force\n     * @param force amount of force to be applied to the imposter\n     * @param contactPoint the location to apply the force on the imposter\n     */\n    AmmoJSPlugin.prototype.applyForce = function (impostor, force, contactPoint) {\n        if (!impostor.soft) {\n            impostor.physicsBody.activate();\n            var worldPoint = this._tmpAmmoVectorA;\n            var impulse = this._tmpAmmoVectorB;\n            // Convert contactPoint relative to center of mass\n            if (impostor.object && impostor.object.getWorldMatrix) {\n                var localTranslation = impostor.object.getWorldMatrix().getTranslation();\n                worldPoint.setValue(contactPoint.x - localTranslation.x, contactPoint.y - localTranslation.y, contactPoint.z - localTranslation.z);\n            }\n            else {\n                worldPoint.setValue(contactPoint.x, contactPoint.y, contactPoint.z);\n            }\n            impulse.setValue(force.x, force.y, force.z);\n            impostor.physicsBody.applyForce(impulse, worldPoint);\n        }\n        else {\n            Logger.Warn(\"Cannot be applied to a soft body\");\n        }\n    };\n    /**\n     * Creates a physics body using the plugin\n     * @param impostor the imposter to create the physics body on\n     */\n    AmmoJSPlugin.prototype.generatePhysicsBody = function (impostor) {\n        // Note: this method will not be called on child imposotrs for compound impostors\n        impostor._pluginData.toDispose = [];\n        //parent-child relationship\n        if (impostor.parent) {\n            if (impostor.physicsBody) {\n                this.removePhysicsBody(impostor);\n                impostor.forceUpdate();\n            }\n            return;\n        }\n        if (impostor.isBodyInitRequired()) {\n            var colShape = this._createShape(impostor);\n            var mass = impostor.getParam(\"mass\");\n            impostor._pluginData.mass = mass;\n            if (impostor.soft) {\n                colShape.get_m_cfg().set_collisions(0x11);\n                colShape.get_m_cfg().set_kDP(impostor.getParam(\"damping\"));\n                this.bjsAMMO.castObject(colShape, this.bjsAMMO.btCollisionObject).getCollisionShape().setMargin(impostor.getParam(\"margin\"));\n                colShape.setActivationState(AmmoJSPlugin._DISABLE_DEACTIVATION_FLAG);\n                this.world.addSoftBody(colShape, 1, -1);\n                impostor.physicsBody = colShape;\n                impostor._pluginData.toDispose.push(colShape);\n                this.setBodyPressure(impostor, 0);\n                if (impostor.type === PhysicsImpostor.SoftbodyImpostor) {\n                    this.setBodyPressure(impostor, impostor.getParam(\"pressure\"));\n                }\n                this.setBodyStiffness(impostor, impostor.getParam(\"stiffness\"));\n                this.setBodyVelocityIterations(impostor, impostor.getParam(\"velocityIterations\"));\n                this.setBodyPositionIterations(impostor, impostor.getParam(\"positionIterations\"));\n            }\n            else {\n                var localInertia = new this.bjsAMMO.btVector3(0, 0, 0);\n                var startTransform = new this.bjsAMMO.btTransform();\n                impostor.object.computeWorldMatrix(true);\n                startTransform.setIdentity();\n                if (mass !== 0) {\n                    colShape.calculateLocalInertia(mass, localInertia);\n                }\n                this._tmpAmmoVectorA.setValue(impostor.object.position.x, impostor.object.position.y, impostor.object.position.z);\n                this._tmpAmmoQuaternion.setValue(impostor.object.rotationQuaternion.x, impostor.object.rotationQuaternion.y, impostor.object.rotationQuaternion.z, impostor.object.rotationQuaternion.w);\n                startTransform.setOrigin(this._tmpAmmoVectorA);\n                startTransform.setRotation(this._tmpAmmoQuaternion);\n                var myMotionState = new this.bjsAMMO.btDefaultMotionState(startTransform);\n                var rbInfo = new this.bjsAMMO.btRigidBodyConstructionInfo(mass, myMotionState, colShape, localInertia);\n                var body = new this.bjsAMMO.btRigidBody(rbInfo);\n                // Make objects kinematic if it's mass is 0\n                if (mass === 0) {\n                    body.setCollisionFlags(body.getCollisionFlags() | AmmoJSPlugin._KINEMATIC_FLAG);\n                    body.setActivationState(AmmoJSPlugin._DISABLE_DEACTIVATION_FLAG);\n                }\n                // Disable collision if NoImpostor, but keep collision if shape is btCompoundShape\n                if (impostor.type == PhysicsImpostor.NoImpostor && !colShape.getChildShape) {\n                    body.setCollisionFlags(body.getCollisionFlags() | AmmoJSPlugin._DISABLE_COLLISION_FLAG);\n                }\n                // compute delta position: compensate the difference between shape center and mesh origin\n                if (impostor.type !== PhysicsImpostor.MeshImpostor && impostor.type !== PhysicsImpostor.NoImpostor) {\n                    var boundingInfo = impostor.object.getBoundingInfo();\n                    this._tmpVec3.copyFrom(impostor.object.getAbsolutePosition());\n                    this._tmpVec3.subtractInPlace(boundingInfo.boundingBox.centerWorld);\n                    this._tmpVec3.x /= impostor.object.scaling.x;\n                    this._tmpVec3.y /= impostor.object.scaling.y;\n                    this._tmpVec3.z /= impostor.object.scaling.z;\n                    impostor.setDeltaPosition(this._tmpVec3);\n                }\n                var group = impostor.getParam(\"group\");\n                var mask = impostor.getParam(\"mask\");\n                if (group && mask) {\n                    this.world.addRigidBody(body, group, mask);\n                }\n                else {\n                    this.world.addRigidBody(body);\n                }\n                impostor.physicsBody = body;\n                impostor._pluginData.toDispose = impostor._pluginData.toDispose.concat([body, rbInfo, myMotionState, startTransform, localInertia, colShape]);\n            }\n            this.setBodyRestitution(impostor, impostor.getParam(\"restitution\"));\n            this.setBodyFriction(impostor, impostor.getParam(\"friction\"));\n        }\n    };\n    /**\n     * Removes the physics body from the imposter and disposes of the body's memory\n     * @param impostor imposter to remove the physics body from\n     */\n    AmmoJSPlugin.prototype.removePhysicsBody = function (impostor) {\n        var _this = this;\n        if (this.world) {\n            if (impostor.soft) {\n                this.world.removeSoftBody(impostor.physicsBody);\n            }\n            else {\n                this.world.removeRigidBody(impostor.physicsBody);\n            }\n            if (impostor._pluginData) {\n                impostor._pluginData.toDispose.forEach(function (d) {\n                    _this.bjsAMMO.destroy(d);\n                });\n                impostor._pluginData.toDispose = [];\n            }\n        }\n    };\n    /**\n     * Generates a joint\n     * @param impostorJoint the imposter joint to create the joint with\n     */\n    AmmoJSPlugin.prototype.generateJoint = function (impostorJoint) {\n        var mainBody = impostorJoint.mainImpostor.physicsBody;\n        var connectedBody = impostorJoint.connectedImpostor.physicsBody;\n        if (!mainBody || !connectedBody) {\n            return;\n        }\n        var jointData = impostorJoint.joint.jointData;\n        if (!jointData.mainPivot) {\n            jointData.mainPivot = new Vector3(0, 0, 0);\n        }\n        if (!jointData.connectedPivot) {\n            jointData.connectedPivot = new Vector3(0, 0, 0);\n        }\n        var joint;\n        switch (impostorJoint.joint.type) {\n            case PhysicsJoint.DistanceJoint: {\n                var distance = jointData.maxDistance;\n                if (distance) {\n                    jointData.mainPivot = new Vector3(0, -distance / 2, 0);\n                    jointData.connectedPivot = new Vector3(0, distance / 2, 0);\n                }\n                joint = new this.bjsAMMO.btPoint2PointConstraint(mainBody, connectedBody, new this.bjsAMMO.btVector3(jointData.mainPivot.x, jointData.mainPivot.y, jointData.mainPivot.z), new this.bjsAMMO.btVector3(jointData.connectedPivot.x, jointData.connectedPivot.y, jointData.connectedPivot.z));\n                break;\n            }\n            case PhysicsJoint.HingeJoint: {\n                if (!jointData.mainAxis) {\n                    jointData.mainAxis = new Vector3(0, 0, 0);\n                }\n                if (!jointData.connectedAxis) {\n                    jointData.connectedAxis = new Vector3(0, 0, 0);\n                }\n                var mainAxis = new this.bjsAMMO.btVector3(jointData.mainAxis.x, jointData.mainAxis.y, jointData.mainAxis.z);\n                var connectedAxis = new this.bjsAMMO.btVector3(jointData.connectedAxis.x, jointData.connectedAxis.y, jointData.connectedAxis.z);\n                joint = new this.bjsAMMO.btHingeConstraint(mainBody, connectedBody, new this.bjsAMMO.btVector3(jointData.mainPivot.x, jointData.mainPivot.y, jointData.mainPivot.z), new this.bjsAMMO.btVector3(jointData.connectedPivot.x, jointData.connectedPivot.y, jointData.connectedPivot.z), mainAxis, connectedAxis);\n                break;\n            }\n            case PhysicsJoint.BallAndSocketJoint:\n                joint = new this.bjsAMMO.btPoint2PointConstraint(mainBody, connectedBody, new this.bjsAMMO.btVector3(jointData.mainPivot.x, jointData.mainPivot.y, jointData.mainPivot.z), new this.bjsAMMO.btVector3(jointData.connectedPivot.x, jointData.connectedPivot.y, jointData.connectedPivot.z));\n                break;\n            default:\n                Logger.Warn(\"JointType not currently supported by the Ammo plugin, falling back to PhysicsJoint.BallAndSocketJoint\");\n                joint = new this.bjsAMMO.btPoint2PointConstraint(mainBody, connectedBody, new this.bjsAMMO.btVector3(jointData.mainPivot.x, jointData.mainPivot.y, jointData.mainPivot.z), new this.bjsAMMO.btVector3(jointData.connectedPivot.x, jointData.connectedPivot.y, jointData.connectedPivot.z));\n                break;\n        }\n        this.world.addConstraint(joint, !impostorJoint.joint.jointData.collision);\n        impostorJoint.joint.physicsJoint = joint;\n    };\n    /**\n     * Removes a joint\n     * @param impostorJoint the imposter joint to remove the joint from\n     */\n    AmmoJSPlugin.prototype.removeJoint = function (impostorJoint) {\n        if (this.world) {\n            this.world.removeConstraint(impostorJoint.joint.physicsJoint);\n        }\n    };\n    // adds all verticies (including child verticies) to the triangle mesh\n    AmmoJSPlugin.prototype._addMeshVerts = function (btTriangleMesh, topLevelObject, object) {\n        var _this = this;\n        var triangleCount = 0;\n        if (object && object.getIndices && object.getWorldMatrix && object.getChildMeshes) {\n            var indices = object.getIndices();\n            if (!indices) {\n                indices = [];\n            }\n            var vertexPositions = object.getVerticesData(VertexBuffer.PositionKind);\n            if (!vertexPositions) {\n                vertexPositions = [];\n            }\n            var localMatrix = void 0;\n            if (topLevelObject && topLevelObject !== object) {\n                // top level matrix used for shape transform doesn't take scale into account.\n                // Moreover, every children vertex position must be in that space.\n                // So, each vertex position here is transform by (mesh world matrix * toplevelMatrix -1)\n                var topLevelQuaternion = void 0;\n                if (topLevelObject.rotationQuaternion) {\n                    topLevelQuaternion = topLevelObject.rotationQuaternion;\n                }\n                else if (topLevelObject.rotation) {\n                    topLevelQuaternion = Quaternion.FromEulerAngles(topLevelObject.rotation.x, topLevelObject.rotation.y, topLevelObject.rotation.z);\n                }\n                else {\n                    topLevelQuaternion = Quaternion.Identity();\n                }\n                var topLevelMatrix = Matrix.Compose(Vector3.One(), topLevelQuaternion, topLevelObject.position);\n                topLevelMatrix.invertToRef(this._tmpMatrix);\n                var wm = object.computeWorldMatrix(false);\n                localMatrix = wm.multiply(this._tmpMatrix);\n            }\n            else {\n                // current top level is same as object level -> only use local scaling\n                Matrix.ScalingToRef(object.scaling.x, object.scaling.y, object.scaling.z, this._tmpMatrix);\n                localMatrix = this._tmpMatrix;\n            }\n            var faceCount = indices.length / 3;\n            for (var i = 0; i < faceCount; i++) {\n                var triPoints = [];\n                for (var point = 0; point < 3; point++) {\n                    var v = new Vector3(vertexPositions[indices[i * 3 + point] * 3 + 0], vertexPositions[indices[i * 3 + point] * 3 + 1], vertexPositions[indices[i * 3 + point] * 3 + 2]);\n                    v = Vector3.TransformCoordinates(v, localMatrix);\n                    var vec = void 0;\n                    if (point == 0) {\n                        vec = this._tmpAmmoVectorA;\n                    }\n                    else if (point == 1) {\n                        vec = this._tmpAmmoVectorB;\n                    }\n                    else {\n                        vec = this._tmpAmmoVectorC;\n                    }\n                    vec.setValue(v.x, v.y, v.z);\n                    triPoints.push(vec);\n                }\n                btTriangleMesh.addTriangle(triPoints[0], triPoints[1], triPoints[2]);\n                triangleCount++;\n            }\n            object.getChildMeshes().forEach(function (m) {\n                triangleCount += _this._addMeshVerts(btTriangleMesh, topLevelObject, m);\n            });\n        }\n        return triangleCount;\n    };\n    /**\n     * Initialise the soft body vertices to match its object's (mesh) vertices\n     * Softbody vertices (nodes) are in world space and to match this\n     * The object's position and rotation is set to zero and so its vertices are also then set in world space\n     * @param impostor to create the softbody for\n     */\n    AmmoJSPlugin.prototype._softVertexData = function (impostor) {\n        var object = impostor.object;\n        if (object && object.getIndices && object.getWorldMatrix && object.getChildMeshes) {\n            var indices = object.getIndices();\n            if (!indices) {\n                indices = [];\n            }\n            var vertexPositions = object.getVerticesData(VertexBuffer.PositionKind);\n            if (!vertexPositions) {\n                vertexPositions = [];\n            }\n            var vertexNormals = object.getVerticesData(VertexBuffer.NormalKind);\n            if (!vertexNormals) {\n                vertexNormals = [];\n            }\n            object.computeWorldMatrix(false);\n            var newPoints = [];\n            var newNorms = [];\n            for (var i = 0; i < vertexPositions.length; i += 3) {\n                var v = new Vector3(vertexPositions[i], vertexPositions[i + 1], vertexPositions[i + 2]);\n                var n = new Vector3(vertexNormals[i], vertexNormals[i + 1], vertexNormals[i + 2]);\n                v = Vector3.TransformCoordinates(v, object.getWorldMatrix());\n                n = Vector3.TransformNormal(n, object.getWorldMatrix());\n                newPoints.push(v.x, v.y, v.z);\n                newNorms.push(n.x, n.y, n.z);\n            }\n            var vertex_data = new VertexData();\n            vertex_data.positions = newPoints;\n            vertex_data.normals = newNorms;\n            vertex_data.uvs = object.getVerticesData(VertexBuffer.UVKind);\n            vertex_data.colors = object.getVerticesData(VertexBuffer.ColorKind);\n            if (object && object.getIndices) {\n                vertex_data.indices = object.getIndices();\n            }\n            vertex_data.applyToMesh(object);\n            object.position = Vector3.Zero();\n            object.rotationQuaternion = null;\n            object.rotation = Vector3.Zero();\n            object.computeWorldMatrix(true);\n            return vertex_data;\n        }\n        return VertexData.ExtractFromMesh(object);\n    };\n    /**\n     * Create an impostor's soft body\n     * @param impostor to create the softbody for\n     */\n    AmmoJSPlugin.prototype._createSoftbody = function (impostor) {\n        var object = impostor.object;\n        if (object && object.getIndices) {\n            var indices = object.getIndices();\n            if (!indices) {\n                indices = [];\n            }\n            var vertex_data = this._softVertexData(impostor);\n            var vertexPositions = vertex_data.positions;\n            var vertexNormals = vertex_data.normals;\n            if (vertexPositions === null || vertexNormals === null) {\n                return new this.bjsAMMO.btCompoundShape();\n            }\n            else {\n                var triPoints = [];\n                var triNorms = [];\n                for (var i = 0; i < vertexPositions.length; i += 3) {\n                    var v = new Vector3(vertexPositions[i], vertexPositions[i + 1], vertexPositions[i + 2]);\n                    var n = new Vector3(vertexNormals[i], vertexNormals[i + 1], vertexNormals[i + 2]);\n                    triPoints.push(v.x, v.y, -v.z);\n                    triNorms.push(n.x, n.y, -n.z);\n                }\n                var softBody = new this.bjsAMMO.btSoftBodyHelpers().CreateFromTriMesh(this.world.getWorldInfo(), triPoints, object.getIndices(), indices.length / 3, true);\n                var nbVertices = vertexPositions.length / 3;\n                var bodyVertices = softBody.get_m_nodes();\n                var node = void 0;\n                var nodeNormals = void 0;\n                for (var i = 0; i < nbVertices; i++) {\n                    node = bodyVertices.at(i);\n                    nodeNormals = node.get_m_n();\n                    nodeNormals.setX(triNorms[3 * i]);\n                    nodeNormals.setY(triNorms[3 * i + 1]);\n                    nodeNormals.setZ(triNorms[3 * i + 2]);\n                }\n                return softBody;\n            }\n        }\n    };\n    /**\n     * Create cloth for an impostor\n     * @param impostor to create the softbody for\n     */\n    AmmoJSPlugin.prototype._createCloth = function (impostor) {\n        var object = impostor.object;\n        if (object && object.getIndices) {\n            var indices = object.getIndices();\n            if (!indices) {\n                indices = [];\n            }\n            var vertex_data = this._softVertexData(impostor);\n            var vertexPositions = vertex_data.positions;\n            var vertexNormals = vertex_data.normals;\n            if (vertexPositions === null || vertexNormals === null) {\n                return new this.bjsAMMO.btCompoundShape();\n            }\n            else {\n                var len = vertexPositions.length;\n                var segments = Math.sqrt(len / 3);\n                impostor.segments = segments;\n                var segs = segments - 1;\n                this._tmpAmmoVectorA.setValue(vertexPositions[0], vertexPositions[1], vertexPositions[2]);\n                this._tmpAmmoVectorB.setValue(vertexPositions[3 * segs], vertexPositions[3 * segs + 1], vertexPositions[3 * segs + 2]);\n                this._tmpAmmoVectorD.setValue(vertexPositions[len - 3], vertexPositions[len - 2], vertexPositions[len - 1]);\n                this._tmpAmmoVectorC.setValue(vertexPositions[len - 3 - 3 * segs], vertexPositions[len - 2 - 3 * segs], vertexPositions[len - 1 - 3 * segs]);\n                var clothBody = new this.bjsAMMO.btSoftBodyHelpers().CreatePatch(this.world.getWorldInfo(), this._tmpAmmoVectorA, this._tmpAmmoVectorB, this._tmpAmmoVectorC, this._tmpAmmoVectorD, segments, segments, impostor.getParam(\"fixedPoints\"), true);\n                return clothBody;\n            }\n        }\n    };\n    /**\n     * Create rope for an impostor\n     * @param impostor to create the softbody for\n     */\n    AmmoJSPlugin.prototype._createRope = function (impostor) {\n        var len;\n        var segments;\n        var vertex_data = this._softVertexData(impostor);\n        var vertexPositions = vertex_data.positions;\n        var vertexNormals = vertex_data.normals;\n        if (vertexPositions === null || vertexNormals === null) {\n            return new this.bjsAMMO.btCompoundShape();\n        }\n        //force the mesh to be updatable\n        vertex_data.applyToMesh(impostor.object, true);\n        impostor._isFromLine = true;\n        // If in lines mesh all normals will be zero\n        var vertexSquared = vertexNormals.map(function (x) { return x * x; });\n        var reducer = function (accumulator, currentValue) { return accumulator + currentValue; };\n        var reduced = vertexSquared.reduce(reducer);\n        if (reduced === 0) {\n            // line mesh\n            len = vertexPositions.length;\n            segments = len / 3 - 1;\n            this._tmpAmmoVectorA.setValue(vertexPositions[0], vertexPositions[1], vertexPositions[2]);\n            this._tmpAmmoVectorB.setValue(vertexPositions[len - 3], vertexPositions[len - 2], vertexPositions[len - 1]);\n        }\n        else {\n            //extruded mesh\n            impostor._isFromLine = false;\n            var pathVectors = impostor.getParam(\"path\");\n            var shape = impostor.getParam(\"shape\");\n            if (shape === null) {\n                Logger.Warn(\"No shape available for extruded mesh\");\n                return new this.bjsAMMO.btCompoundShape();\n            }\n            len = pathVectors.length;\n            segments = len - 1;\n            this._tmpAmmoVectorA.setValue(pathVectors[0].x, pathVectors[0].y, pathVectors[0].z);\n            this._tmpAmmoVectorB.setValue(pathVectors[len - 1].x, pathVectors[len - 1].y, pathVectors[len - 1].z);\n        }\n        impostor.segments = segments;\n        var fixedPoints = impostor.getParam(\"fixedPoints\");\n        fixedPoints = fixedPoints > 3 ? 3 : fixedPoints;\n        var ropeBody = new this.bjsAMMO.btSoftBodyHelpers().CreateRope(this.world.getWorldInfo(), this._tmpAmmoVectorA, this._tmpAmmoVectorB, segments - 1, fixedPoints);\n        ropeBody.get_m_cfg().set_collisions(0x11);\n        return ropeBody;\n    };\n    /**\n     * Create a custom physics impostor shape using the plugin's onCreateCustomShape handler\n     * @param impostor to create the custom physics shape for\n     */\n    AmmoJSPlugin.prototype._createCustom = function (impostor) {\n        var returnValue = null;\n        if (this.onCreateCustomShape) {\n            returnValue = this.onCreateCustomShape(impostor);\n        }\n        if (returnValue == null) {\n            returnValue = new this.bjsAMMO.btCompoundShape();\n        }\n        return returnValue;\n    };\n    // adds all verticies (including child verticies) to the convex hull shape\n    AmmoJSPlugin.prototype._addHullVerts = function (btConvexHullShape, topLevelObject, object) {\n        var _this = this;\n        var triangleCount = 0;\n        if (object && object.getIndices && object.getWorldMatrix && object.getChildMeshes) {\n            var indices = object.getIndices();\n            if (!indices) {\n                indices = [];\n            }\n            var vertexPositions = object.getVerticesData(VertexBuffer.PositionKind);\n            if (!vertexPositions) {\n                vertexPositions = [];\n            }\n            object.computeWorldMatrix(false);\n            var faceCount = indices.length / 3;\n            for (var i = 0; i < faceCount; i++) {\n                var triPoints = [];\n                for (var point = 0; point < 3; point++) {\n                    var v = new Vector3(vertexPositions[indices[i * 3 + point] * 3 + 0], vertexPositions[indices[i * 3 + point] * 3 + 1], vertexPositions[indices[i * 3 + point] * 3 + 2]);\n                    // Adjust for initial scaling\n                    Matrix.ScalingToRef(object.scaling.x, object.scaling.y, object.scaling.z, this._tmpMatrix);\n                    v = Vector3.TransformCoordinates(v, this._tmpMatrix);\n                    var vec = void 0;\n                    if (point == 0) {\n                        vec = this._tmpAmmoVectorA;\n                    }\n                    else if (point == 1) {\n                        vec = this._tmpAmmoVectorB;\n                    }\n                    else {\n                        vec = this._tmpAmmoVectorC;\n                    }\n                    vec.setValue(v.x, v.y, v.z);\n                    triPoints.push(vec);\n                }\n                btConvexHullShape.addPoint(triPoints[0], true);\n                btConvexHullShape.addPoint(triPoints[1], true);\n                btConvexHullShape.addPoint(triPoints[2], true);\n                triangleCount++;\n            }\n            object.getChildMeshes().forEach(function (m) {\n                triangleCount += _this._addHullVerts(btConvexHullShape, topLevelObject, m);\n            });\n        }\n        return triangleCount;\n    };\n    AmmoJSPlugin.prototype._createShape = function (impostor, ignoreChildren) {\n        var _this = this;\n        if (ignoreChildren === void 0) { ignoreChildren = false; }\n        var object = impostor.object;\n        var returnValue;\n        var extendSize = impostor.getObjectExtendSize();\n        if (!ignoreChildren) {\n            var meshChildren = impostor.object.getChildMeshes ? impostor.object.getChildMeshes(true) : [];\n            returnValue = new this.bjsAMMO.btCompoundShape();\n            // Add shape of all children to the compound shape\n            var childrenAdded_1 = 0;\n            meshChildren.forEach(function (childMesh) {\n                var childImpostor = childMesh.getPhysicsImpostor();\n                if (childImpostor) {\n                    if (childImpostor.type == PhysicsImpostor.MeshImpostor) {\n                        throw \"A child MeshImpostor is not supported. Only primitive impostors are supported as children (eg. box or sphere)\";\n                    }\n                    var shape = _this._createShape(childImpostor);\n                    // Position needs to be scaled based on parent's scaling\n                    var parentMat = childMesh.parent.getWorldMatrix().clone();\n                    var s = new Vector3();\n                    parentMat.decompose(s);\n                    _this._tmpAmmoTransform.getOrigin().setValue(childMesh.position.x * s.x, childMesh.position.y * s.y, childMesh.position.z * s.z);\n                    _this._tmpAmmoQuaternion.setValue(childMesh.rotationQuaternion.x, childMesh.rotationQuaternion.y, childMesh.rotationQuaternion.z, childMesh.rotationQuaternion.w);\n                    _this._tmpAmmoTransform.setRotation(_this._tmpAmmoQuaternion);\n                    returnValue.addChildShape(_this._tmpAmmoTransform, shape);\n                    childImpostor.dispose();\n                    childrenAdded_1++;\n                }\n            });\n            if (childrenAdded_1 > 0) {\n                // Add parents shape as a child if present\n                if (impostor.type != PhysicsImpostor.NoImpostor) {\n                    var shape = this._createShape(impostor, true);\n                    if (shape) {\n                        this._tmpAmmoTransform.getOrigin().setValue(0, 0, 0);\n                        this._tmpAmmoQuaternion.setValue(0, 0, 0, 1);\n                        this._tmpAmmoTransform.setRotation(this._tmpAmmoQuaternion);\n                        returnValue.addChildShape(this._tmpAmmoTransform, shape);\n                    }\n                }\n                return returnValue;\n            }\n            else {\n                // If no children with impostors create the actual shape below instead\n                this.bjsAMMO.destroy(returnValue);\n                returnValue = null;\n            }\n        }\n        switch (impostor.type) {\n            case PhysicsImpostor.SphereImpostor:\n                // Is there a better way to compare floats number? With an epsilon or with a Math function\n                if (Scalar.WithinEpsilon(extendSize.x, extendSize.y, 0.0001) && Scalar.WithinEpsilon(extendSize.x, extendSize.z, 0.0001)) {\n                    returnValue = new this.bjsAMMO.btSphereShape(extendSize.x / 2);\n                }\n                else {\n                    // create a btMultiSphereShape because it's not possible to set a local scaling on a btSphereShape\n                    var positions = [new this.bjsAMMO.btVector3(0, 0, 0)];\n                    var radii = [1];\n                    returnValue = new this.bjsAMMO.btMultiSphereShape(positions, radii, 1);\n                    returnValue.setLocalScaling(new this.bjsAMMO.btVector3(extendSize.x / 2, extendSize.y / 2, extendSize.z / 2));\n                }\n                break;\n            case PhysicsImpostor.CapsuleImpostor:\n                {\n                    // https://pybullet.org/Bullet/BulletFull/classbtCapsuleShape.html#details\n                    // Height is just the height between the center of each 'sphere' of the capsule caps\n                    var capRadius = extendSize.x / 2;\n                    returnValue = new this.bjsAMMO.btCapsuleShape(capRadius, extendSize.y - capRadius * 2);\n                }\n                break;\n            case PhysicsImpostor.CylinderImpostor:\n                this._tmpAmmoVectorA.setValue(extendSize.x / 2, extendSize.y / 2, extendSize.z / 2);\n                returnValue = new this.bjsAMMO.btCylinderShape(this._tmpAmmoVectorA);\n                break;\n            case PhysicsImpostor.PlaneImpostor:\n            case PhysicsImpostor.BoxImpostor:\n                this._tmpAmmoVectorA.setValue(extendSize.x / 2, extendSize.y / 2, extendSize.z / 2);\n                returnValue = new this.bjsAMMO.btBoxShape(this._tmpAmmoVectorA);\n                break;\n            case PhysicsImpostor.MeshImpostor: {\n                if (impostor.getParam(\"mass\") == 0) {\n                    // Only create btBvhTriangleMeshShape impostor is static\n                    // See https://pybullet.org/Bullet/phpBB3/viewtopic.php?t=7283\n                    if (this.onCreateCustomMeshImpostor) {\n                        returnValue = this.onCreateCustomMeshImpostor(impostor);\n                    }\n                    else {\n                        var tetraMesh = new this.bjsAMMO.btTriangleMesh();\n                        impostor._pluginData.toDispose.push(tetraMesh);\n                        var triangeCount = this._addMeshVerts(tetraMesh, object, object);\n                        if (triangeCount == 0) {\n                            returnValue = new this.bjsAMMO.btCompoundShape();\n                        }\n                        else {\n                            returnValue = new this.bjsAMMO.btBvhTriangleMeshShape(tetraMesh);\n                        }\n                    }\n                    break;\n                }\n            }\n            // Otherwise create convexHullImpostor\n            // eslint-disable-next-line no-fallthrough\n            case PhysicsImpostor.ConvexHullImpostor: {\n                if (this.onCreateCustomConvexHullImpostor) {\n                    returnValue = this.onCreateCustomConvexHullImpostor(impostor);\n                }\n                else {\n                    var convexMesh = new this.bjsAMMO.btConvexHullShape();\n                    var triangeCount = this._addHullVerts(convexMesh, object, object);\n                    if (triangeCount == 0) {\n                        // Cleanup Unused Convex Hull Shape\n                        impostor._pluginData.toDispose.push(convexMesh);\n                        returnValue = new this.bjsAMMO.btCompoundShape();\n                    }\n                    else {\n                        returnValue = convexMesh;\n                    }\n                }\n                break;\n            }\n            case PhysicsImpostor.NoImpostor:\n                // Fill with sphere but collision is disabled on the rigid body in generatePhysicsBody, using an empty shape caused unexpected movement with joints\n                returnValue = new this.bjsAMMO.btSphereShape(extendSize.x / 2);\n                break;\n            case PhysicsImpostor.CustomImpostor:\n                // Only usable when the plugin's onCreateCustomShape is set\n                returnValue = this._createCustom(impostor);\n                break;\n            case PhysicsImpostor.SoftbodyImpostor:\n                // Only usable with a mesh that has sufficient and shared vertices\n                returnValue = this._createSoftbody(impostor);\n                break;\n            case PhysicsImpostor.ClothImpostor:\n                // Only usable with a ground mesh that has sufficient and shared vertices\n                returnValue = this._createCloth(impostor);\n                break;\n            case PhysicsImpostor.RopeImpostor:\n                // Only usable with a line mesh or an extruded mesh that is updatable\n                returnValue = this._createRope(impostor);\n                break;\n            default:\n                Logger.Warn(\"The impostor type is not currently supported by the ammo plugin.\");\n                break;\n        }\n        return returnValue;\n    };\n    /**\n     * Sets the physics body position/rotation from the babylon mesh's position/rotation\n     * @param impostor imposter containing the physics body and babylon object\n     */\n    AmmoJSPlugin.prototype.setTransformationFromPhysicsBody = function (impostor) {\n        impostor.physicsBody.getMotionState().getWorldTransform(this._tmpAmmoTransform);\n        impostor.object.position.set(this._tmpAmmoTransform.getOrigin().x(), this._tmpAmmoTransform.getOrigin().y(), this._tmpAmmoTransform.getOrigin().z());\n        if (!impostor.object.rotationQuaternion) {\n            if (impostor.object.rotation) {\n                this._tmpQuaternion.set(this._tmpAmmoTransform.getRotation().x(), this._tmpAmmoTransform.getRotation().y(), this._tmpAmmoTransform.getRotation().z(), this._tmpAmmoTransform.getRotation().w());\n                this._tmpQuaternion.toEulerAnglesToRef(impostor.object.rotation);\n            }\n        }\n        else {\n            impostor.object.rotationQuaternion.set(this._tmpAmmoTransform.getRotation().x(), this._tmpAmmoTransform.getRotation().y(), this._tmpAmmoTransform.getRotation().z(), this._tmpAmmoTransform.getRotation().w());\n        }\n    };\n    /**\n     * Sets the babylon object's position/rotation from the physics body's position/rotation\n     * @param impostor imposter containing the physics body and babylon object\n     * @param newPosition new position\n     * @param newRotation new rotation\n     */\n    AmmoJSPlugin.prototype.setPhysicsBodyTransformation = function (impostor, newPosition, newRotation) {\n        var trans = impostor.physicsBody.getWorldTransform();\n        // If rotation/position has changed update and activate rigged body\n        if (Math.abs(trans.getOrigin().x() - newPosition.x) > Epsilon ||\n            Math.abs(trans.getOrigin().y() - newPosition.y) > Epsilon ||\n            Math.abs(trans.getOrigin().z() - newPosition.z) > Epsilon ||\n            Math.abs(trans.getRotation().x() - newRotation.x) > Epsilon ||\n            Math.abs(trans.getRotation().y() - newRotation.y) > Epsilon ||\n            Math.abs(trans.getRotation().z() - newRotation.z) > Epsilon ||\n            Math.abs(trans.getRotation().w() - newRotation.w) > Epsilon) {\n            this._tmpAmmoVectorA.setValue(newPosition.x, newPosition.y, newPosition.z);\n            trans.setOrigin(this._tmpAmmoVectorA);\n            this._tmpAmmoQuaternion.setValue(newRotation.x, newRotation.y, newRotation.z, newRotation.w);\n            trans.setRotation(this._tmpAmmoQuaternion);\n            impostor.physicsBody.setWorldTransform(trans);\n            if (impostor.mass == 0) {\n                // Kinematic objects must be updated using motion state\n                var motionState = impostor.physicsBody.getMotionState();\n                if (motionState) {\n                    motionState.setWorldTransform(trans);\n                }\n            }\n            else {\n                impostor.physicsBody.activate();\n            }\n        }\n    };\n    /**\n     * If this plugin is supported\n     * @returns true if its supported\n     */\n    AmmoJSPlugin.prototype.isSupported = function () {\n        return this.bjsAMMO !== undefined;\n    };\n    /**\n     * Sets the linear velocity of the physics body\n     * @param impostor imposter to set the velocity on\n     * @param velocity velocity to set\n     */\n    AmmoJSPlugin.prototype.setLinearVelocity = function (impostor, velocity) {\n        this._tmpAmmoVectorA.setValue(velocity.x, velocity.y, velocity.z);\n        if (impostor.soft) {\n            impostor.physicsBody.linearVelocity(this._tmpAmmoVectorA);\n        }\n        else {\n            impostor.physicsBody.setLinearVelocity(this._tmpAmmoVectorA);\n        }\n    };\n    /**\n     * Sets the angular velocity of the physics body\n     * @param impostor imposter to set the velocity on\n     * @param velocity velocity to set\n     */\n    AmmoJSPlugin.prototype.setAngularVelocity = function (impostor, velocity) {\n        this._tmpAmmoVectorA.setValue(velocity.x, velocity.y, velocity.z);\n        if (impostor.soft) {\n            impostor.physicsBody.angularVelocity(this._tmpAmmoVectorA);\n        }\n        else {\n            impostor.physicsBody.setAngularVelocity(this._tmpAmmoVectorA);\n        }\n    };\n    /**\n     * gets the linear velocity\n     * @param impostor imposter to get linear velocity from\n     * @returns linear velocity\n     */\n    AmmoJSPlugin.prototype.getLinearVelocity = function (impostor) {\n        var v;\n        if (impostor.soft) {\n            v = impostor.physicsBody.linearVelocity();\n        }\n        else {\n            v = impostor.physicsBody.getLinearVelocity();\n        }\n        if (!v) {\n            return null;\n        }\n        var result = new Vector3(v.x(), v.y(), v.z());\n        this.bjsAMMO.destroy(v);\n        return result;\n    };\n    /**\n     * gets the angular velocity\n     * @param impostor imposter to get angular velocity from\n     * @returns angular velocity\n     */\n    AmmoJSPlugin.prototype.getAngularVelocity = function (impostor) {\n        var v;\n        if (impostor.soft) {\n            v = impostor.physicsBody.angularVelocity();\n        }\n        else {\n            v = impostor.physicsBody.getAngularVelocity();\n        }\n        if (!v) {\n            return null;\n        }\n        var result = new Vector3(v.x(), v.y(), v.z());\n        this.bjsAMMO.destroy(v);\n        return result;\n    };\n    /**\n     * Sets the mass of physics body\n     * @param impostor imposter to set the mass on\n     * @param mass mass to set\n     */\n    AmmoJSPlugin.prototype.setBodyMass = function (impostor, mass) {\n        if (impostor.soft) {\n            impostor.physicsBody.setTotalMass(mass, false);\n        }\n        else {\n            impostor.physicsBody.setMassProps(mass);\n        }\n        impostor._pluginData.mass = mass;\n    };\n    /**\n     * Gets the mass of the physics body\n     * @param impostor imposter to get the mass from\n     * @returns mass\n     */\n    AmmoJSPlugin.prototype.getBodyMass = function (impostor) {\n        return impostor._pluginData.mass || 0;\n    };\n    /**\n     * Gets friction of the impostor\n     * @param impostor impostor to get friction from\n     * @returns friction value\n     */\n    AmmoJSPlugin.prototype.getBodyFriction = function (impostor) {\n        return impostor._pluginData.friction || 0;\n    };\n    /**\n     * Sets friction of the impostor\n     * @param impostor impostor to set friction on\n     * @param friction friction value\n     */\n    AmmoJSPlugin.prototype.setBodyFriction = function (impostor, friction) {\n        if (impostor.soft) {\n            impostor.physicsBody.get_m_cfg().set_kDF(friction);\n        }\n        else {\n            impostor.physicsBody.setFriction(friction);\n        }\n        impostor._pluginData.friction = friction;\n    };\n    /**\n     * Gets restitution of the impostor\n     * @param impostor impostor to get restitution from\n     * @returns restitution value\n     */\n    AmmoJSPlugin.prototype.getBodyRestitution = function (impostor) {\n        return impostor._pluginData.restitution || 0;\n    };\n    /**\n     * Sets restitution of the impostor\n     * @param impostor impostor to set resitution on\n     * @param restitution resitution value\n     */\n    AmmoJSPlugin.prototype.setBodyRestitution = function (impostor, restitution) {\n        impostor.physicsBody.setRestitution(restitution);\n        impostor._pluginData.restitution = restitution;\n    };\n    /**\n     * Gets pressure inside the impostor\n     * @param impostor impostor to get pressure from\n     * @returns pressure value\n     */\n    AmmoJSPlugin.prototype.getBodyPressure = function (impostor) {\n        if (!impostor.soft) {\n            Logger.Warn(\"Pressure is not a property of a rigid body\");\n            return 0;\n        }\n        return impostor._pluginData.pressure || 0;\n    };\n    /**\n     * Sets pressure inside a soft body impostor\n     * Cloth and rope must remain 0 pressure\n     * @param impostor impostor to set pressure on\n     * @param pressure pressure value\n     */\n    AmmoJSPlugin.prototype.setBodyPressure = function (impostor, pressure) {\n        if (impostor.soft) {\n            if (impostor.type === PhysicsImpostor.SoftbodyImpostor) {\n                impostor.physicsBody.get_m_cfg().set_kPR(pressure);\n                impostor._pluginData.pressure = pressure;\n            }\n            else {\n                impostor.physicsBody.get_m_cfg().set_kPR(0);\n                impostor._pluginData.pressure = 0;\n            }\n        }\n        else {\n            Logger.Warn(\"Pressure can only be applied to a softbody\");\n        }\n    };\n    /**\n     * Gets stiffness of the impostor\n     * @param impostor impostor to get stiffness from\n     * @returns pressure value\n     */\n    AmmoJSPlugin.prototype.getBodyStiffness = function (impostor) {\n        if (!impostor.soft) {\n            Logger.Warn(\"Stiffness is not a property of a rigid body\");\n            return 0;\n        }\n        return impostor._pluginData.stiffness || 0;\n    };\n    /**\n     * Sets stiffness of the impostor\n     * @param impostor impostor to set stiffness on\n     * @param stiffness stiffness value from 0 to 1\n     */\n    AmmoJSPlugin.prototype.setBodyStiffness = function (impostor, stiffness) {\n        if (impostor.soft) {\n            stiffness = stiffness < 0 ? 0 : stiffness;\n            stiffness = stiffness > 1 ? 1 : stiffness;\n            impostor.physicsBody.get_m_materials().at(0).set_m_kLST(stiffness);\n            impostor._pluginData.stiffness = stiffness;\n        }\n        else {\n            Logger.Warn(\"Stiffness cannot be applied to a rigid body\");\n        }\n    };\n    /**\n     * Gets velocityIterations of the impostor\n     * @param impostor impostor to get velocity iterations from\n     * @returns velocityIterations value\n     */\n    AmmoJSPlugin.prototype.getBodyVelocityIterations = function (impostor) {\n        if (!impostor.soft) {\n            Logger.Warn(\"Velocity iterations is not a property of a rigid body\");\n            return 0;\n        }\n        return impostor._pluginData.velocityIterations || 0;\n    };\n    /**\n     * Sets velocityIterations of the impostor\n     * @param impostor impostor to set velocity iterations on\n     * @param velocityIterations velocityIterations value\n     */\n    AmmoJSPlugin.prototype.setBodyVelocityIterations = function (impostor, velocityIterations) {\n        if (impostor.soft) {\n            velocityIterations = velocityIterations < 0 ? 0 : velocityIterations;\n            impostor.physicsBody.get_m_cfg().set_viterations(velocityIterations);\n            impostor._pluginData.velocityIterations = velocityIterations;\n        }\n        else {\n            Logger.Warn(\"Velocity iterations cannot be applied to a rigid body\");\n        }\n    };\n    /**\n     * Gets positionIterations of the impostor\n     * @param impostor impostor to get position iterations from\n     * @returns positionIterations value\n     */\n    AmmoJSPlugin.prototype.getBodyPositionIterations = function (impostor) {\n        if (!impostor.soft) {\n            Logger.Warn(\"Position iterations is not a property of a rigid body\");\n            return 0;\n        }\n        return impostor._pluginData.positionIterations || 0;\n    };\n    /**\n     * Sets positionIterations of the impostor\n     * @param impostor impostor to set position on\n     * @param positionIterations positionIterations value\n     */\n    AmmoJSPlugin.prototype.setBodyPositionIterations = function (impostor, positionIterations) {\n        if (impostor.soft) {\n            positionIterations = positionIterations < 0 ? 0 : positionIterations;\n            impostor.physicsBody.get_m_cfg().set_piterations(positionIterations);\n            impostor._pluginData.positionIterations = positionIterations;\n        }\n        else {\n            Logger.Warn(\"Position iterations cannot be applied to a rigid body\");\n        }\n    };\n    /**\n     * Append an anchor to a cloth object\n     * @param impostor is the cloth impostor to add anchor to\n     * @param otherImpostor is the rigid impostor to anchor to\n     * @param width ratio across width from 0 to 1\n     * @param height ratio up height from 0 to 1\n     * @param influence the elasticity between cloth impostor and anchor from 0, very stretchy to 1, little stretch\n     * @param noCollisionBetweenLinkedBodies when true collisions between soft impostor and anchor are ignored; default false\n     */\n    AmmoJSPlugin.prototype.appendAnchor = function (impostor, otherImpostor, width, height, influence, noCollisionBetweenLinkedBodies) {\n        if (influence === void 0) { influence = 1; }\n        if (noCollisionBetweenLinkedBodies === void 0) { noCollisionBetweenLinkedBodies = false; }\n        var segs = impostor.segments;\n        var nbAcross = Math.round((segs - 1) * width);\n        var nbUp = Math.round((segs - 1) * height);\n        var nbDown = segs - 1 - nbUp;\n        var node = nbAcross + segs * nbDown;\n        impostor.physicsBody.appendAnchor(node, otherImpostor.physicsBody, noCollisionBetweenLinkedBodies, influence);\n    };\n    /**\n     * Append an hook to a rope object\n     * @param impostor is the rope impostor to add hook to\n     * @param otherImpostor is the rigid impostor to hook to\n     * @param length ratio along the rope from 0 to 1\n     * @param influence the elasticity between soft impostor and anchor from 0, very stretchy to 1, little stretch\n     * @param noCollisionBetweenLinkedBodies when true collisions between soft impostor and anchor are ignored; default false\n     */\n    AmmoJSPlugin.prototype.appendHook = function (impostor, otherImpostor, length, influence, noCollisionBetweenLinkedBodies) {\n        if (influence === void 0) { influence = 1; }\n        if (noCollisionBetweenLinkedBodies === void 0) { noCollisionBetweenLinkedBodies = false; }\n        var node = Math.round(impostor.segments * length);\n        impostor.physicsBody.appendAnchor(node, otherImpostor.physicsBody, noCollisionBetweenLinkedBodies, influence);\n    };\n    /**\n     * Sleeps the physics body and stops it from being active\n     * @param impostor impostor to sleep\n     */\n    AmmoJSPlugin.prototype.sleepBody = function (impostor) {\n        impostor.physicsBody.forceActivationState(0);\n    };\n    /**\n     * Activates the physics body\n     * @param impostor impostor to activate\n     */\n    AmmoJSPlugin.prototype.wakeUpBody = function (impostor) {\n        impostor.physicsBody.activate();\n    };\n    /**\n     * Updates the distance parameters of the joint\n     */\n    AmmoJSPlugin.prototype.updateDistanceJoint = function () {\n        Logger.Warn(\"updateDistanceJoint is not currently supported by the Ammo physics plugin\");\n    };\n    /**\n     * Sets a motor on the joint\n     * @param joint joint to set motor on\n     * @param speed speed of the motor\n     * @param maxForce maximum force of the motor\n     */\n    AmmoJSPlugin.prototype.setMotor = function (joint, speed, maxForce) {\n        joint.physicsJoint.enableAngularMotor(true, speed, maxForce);\n    };\n    /**\n     * Sets the motors limit\n     */\n    AmmoJSPlugin.prototype.setLimit = function () {\n        Logger.Warn(\"setLimit is not currently supported by the Ammo physics plugin\");\n    };\n    /**\n     * Syncs the position and rotation of a mesh with the impostor\n     * @param mesh mesh to sync\n     * @param impostor impostor to update the mesh with\n     */\n    AmmoJSPlugin.prototype.syncMeshWithImpostor = function (mesh, impostor) {\n        var body = impostor.physicsBody;\n        body.getMotionState().getWorldTransform(this._tmpAmmoTransform);\n        mesh.position.x = this._tmpAmmoTransform.getOrigin().x();\n        mesh.position.y = this._tmpAmmoTransform.getOrigin().y();\n        mesh.position.z = this._tmpAmmoTransform.getOrigin().z();\n        if (mesh.rotationQuaternion) {\n            mesh.rotationQuaternion.x = this._tmpAmmoTransform.getRotation().x();\n            mesh.rotationQuaternion.y = this._tmpAmmoTransform.getRotation().y();\n            mesh.rotationQuaternion.z = this._tmpAmmoTransform.getRotation().z();\n            mesh.rotationQuaternion.w = this._tmpAmmoTransform.getRotation().w();\n        }\n    };\n    /**\n     * Gets the radius of the impostor\n     * @param impostor impostor to get radius from\n     * @returns the radius\n     */\n    AmmoJSPlugin.prototype.getRadius = function (impostor) {\n        var exntend = impostor.getObjectExtendSize();\n        return exntend.x / 2;\n    };\n    /**\n     * Gets the box size of the impostor\n     * @param impostor impostor to get box size from\n     * @param result the resulting box size\n     */\n    AmmoJSPlugin.prototype.getBoxSizeToRef = function (impostor, result) {\n        var exntend = impostor.getObjectExtendSize();\n        result.x = exntend.x;\n        result.y = exntend.y;\n        result.z = exntend.z;\n    };\n    /**\n     * Disposes of the impostor\n     */\n    AmmoJSPlugin.prototype.dispose = function () {\n        // Dispose of world\n        this.bjsAMMO.destroy(this.world);\n        this.bjsAMMO.destroy(this._solver);\n        this.bjsAMMO.destroy(this._overlappingPairCache);\n        this.bjsAMMO.destroy(this._dispatcher);\n        this.bjsAMMO.destroy(this._collisionConfiguration);\n        // Dispose of tmp variables\n        this.bjsAMMO.destroy(this._tmpAmmoVectorA);\n        this.bjsAMMO.destroy(this._tmpAmmoVectorB);\n        this.bjsAMMO.destroy(this._tmpAmmoVectorC);\n        this.bjsAMMO.destroy(this._tmpAmmoTransform);\n        this.bjsAMMO.destroy(this._tmpAmmoQuaternion);\n        this.bjsAMMO.destroy(this._tmpAmmoConcreteContactResultCallback);\n        this.world = null;\n    };\n    /**\n     * Does a raycast in the physics world\n     * @param from when should the ray start?\n     * @param to when should the ray end?\n     * @returns PhysicsRaycastResult\n     */\n    AmmoJSPlugin.prototype.raycast = function (from, to) {\n        this._tmpAmmoVectorRCA = new this.bjsAMMO.btVector3(from.x, from.y, from.z);\n        this._tmpAmmoVectorRCB = new this.bjsAMMO.btVector3(to.x, to.y, to.z);\n        var rayCallback = new this.bjsAMMO.ClosestRayResultCallback(this._tmpAmmoVectorRCA, this._tmpAmmoVectorRCB);\n        this.world.rayTest(this._tmpAmmoVectorRCA, this._tmpAmmoVectorRCB, rayCallback);\n        this._raycastResult.reset(from, to);\n        if (rayCallback.hasHit()) {\n            // TODO: do we want/need the body? If so, set all the data\n            /*\n            var rigidBody = this.bjsAMMO.btRigidBody.prototype.upcast(\n                rayCallback.get_m_collisionObject()\n            );\n            var body = {};\n            */\n            this._raycastResult.setHitData({\n                x: rayCallback.get_m_hitNormalWorld().x(),\n                y: rayCallback.get_m_hitNormalWorld().y(),\n                z: rayCallback.get_m_hitNormalWorld().z(),\n            }, {\n                x: rayCallback.get_m_hitPointWorld().x(),\n                y: rayCallback.get_m_hitPointWorld().y(),\n                z: rayCallback.get_m_hitPointWorld().z(),\n            });\n            this._raycastResult.calculateHitDistance();\n        }\n        this.bjsAMMO.destroy(rayCallback);\n        this.bjsAMMO.destroy(this._tmpAmmoVectorRCA);\n        this.bjsAMMO.destroy(this._tmpAmmoVectorRCB);\n        return this._raycastResult;\n    };\n    AmmoJSPlugin._DISABLE_COLLISION_FLAG = 4;\n    AmmoJSPlugin._KINEMATIC_FLAG = 2;\n    AmmoJSPlugin._DISABLE_DEACTIVATION_FLAG = 4;\n    return AmmoJSPlugin;\n}());\nexport { AmmoJSPlugin };\n//# sourceMappingURL=ammoJSPlugin.js.map"],"names":["BoxParticleEmitter","this","direction1","direction2","minEmitBox","maxEmitBox","prototype","startDirectionFunction","worldMatrix","directionToUpdate","particle","isLocal","randX","x","randY","y","randZ","z","startPositionFunction","positionToUpdate","clone","newOne","applyToShader","uboOrEffect","setVector3","buildUniformLayout","ubo","addUniform","getEffectDefines","getClassName","serialize","serializationObject","type","asArray","parse","CustomParticleEmitter","particlePositionGenerator","particleDestinationGenerator","tmpVector","diffVector","subtractToRef","position","scaleToRef","lifeTime","set","copyFrom","ConeParticleEmitter","radius","angle","directionRandomizer","Math","PI","radiusRange","heightRange","emitFromSpawnPointOnly","Object","defineProperty","get","_radius","value","_buildHeight","enumerable","configurable","_angle","_height","tan","_localPosition","normalize","getTranslation","h","s","sin","cos","setFloat2","setFloat","defines","undefined","CylinderParticleEmitter","height","_tempVector","inverseWorldMatrix","atan2","yPos","radiusDistribution","positionRadius","sqrt","xPos","zPos","copyFromFloats","CylinderDirectedParticleEmitter","_super","_this","call","HemisphericParticleEmitter","direction","subtract","randRadius","v","phi","theta","acos","abs","PointParticleEmitter","SphereParticleEmitter","SphereDirectedParticleEmitter","MeshParticleEmitter","mesh","_indices","_positions","_normals","_storedNormal","_mesh","useMeshNormalsForDirection","getIndices","getVerticesData","randomFaceIndex","random","length","bu","bv","bw","faceIndexA","faceIndexB","faceIndexC","vertexA","vertexB","vertexC","randomVertex","_a","meshId","id","scene","getLastMeshById","BaseParticleSystem","name","animations","renderingGroupId","emitter","emitRate","manualEmitCount","updateSpeed","targetStopDuration","disposeOnStop","minEmitPower","maxEmitPower","minLifeTime","maxLifeTime","minSize","maxSize","minScaleX","maxScaleX","minScaleY","maxScaleY","minInitialRotation","maxInitialRotation","minAngularSpeed","maxAngularSpeed","layerMask","customShader","preventAutoStart","_rootUrl","noiseStrength","onAnimationEnd","blendMode","BLENDMODE_ONEONE","forceDepthWrite","preWarmCycles","preWarmStepOffset","spriteCellChangeSpeed","startSpriteCellID","endSpriteCellID","spriteCellWidth","spriteCellHeight","spriteCellLoop","spriteRandomStartCell","translationPivot","beginAnimationOnStart","beginAnimationFrom","beginAnimationTo","beginAnimationLoop","worldOffset","gravity","_colorGradients","_sizeGradients","_lifeTimeGradients","_angularSpeedGradients","_velocityGradients","_limitVelocityGradients","_dragGradients","_emitRateGradients","_startSizeGradients","_rampGradients","_colorRemapGradients","_alphaRemapGradients","startDelay","limitVelocityDamping","color1","color2","colorDead","textureMask","_isSubEmitter","_billboardMode","_isBillboardBased","_imageProcessingConfigurationDefines","_noiseTexture","_reset","_isAnimationSheetEnabled","getScene","_scene","_hasTargetStopDurationDependantGradient","getDragGradients","getLimitVelocityGradients","getColorGradients","getSizeGradients","getColorRemapGradients","getAlphaRemapGradients","getLifeTimeGradients","getAngularSpeedGradients","getVelocityGradients","getStartSizeGradients","getEmitRateGradients","particleEmitterType","_imageProcessingConfiguration","_attachImageProcessingConfiguration","configuration","imageProcessingConfiguration","_removeGradientAndTexture","gradient","gradients","texture","index","_i","gradients_1","splice","dispose","createPointEmitter","particleEmitter","createHemisphericEmitter","createSphereEmitter","createDirectedSphereEmitter","createCylinderEmitter","createDirectedCylinderEmitter","createConeEmitter","createBoxEmitter","BLENDMODE_STANDARD","BLENDMODE_ADD","BLENDMODE_MULTIPLY","BLENDMODE_MULTIPLYADD","WebGL2ParticleSystem","parent","engine","_renderVAO","_updateVAO","alignDataInBuffer","_parent","_engine","_updateEffectOptions","attributes","uniformsNames","uniformBuffersNames","samplers","fallbacks","onCompiled","onError","indexParameters","maxSimultaneousLights","transformFeedbackVaryings","isUpdateBufferCreated","_updateEffect","isUpdateBufferReady","_b","isReady","createUpdateBuffer","push","_colorGradientsTexture","noiseTexture","isAnimationSheetEnabled","createVertexBuffers","updateBuffer","renderVertexBuffers","_createUpdateVAO","recordVertexArrayObject","_getWrapper","effect","bindArrayBuffer","createParticleBuffer","data","bindDrawBuffers","bindVertexArrayObject","preUpdateParticleBuffer","enableEffect","setState","Error","updateParticleBuffer","targetBuffer","currentActiveCount","setTexture","_randomTexture","_randomTexture2","_sizeGradientsTexture","_angularSpeedGradientsTexture","_velocityGradientsTexture","_limitVelocityGradientsTexture","_dragGradientsTexture","bindTransformFeedbackBuffer","getBuffer","setRasterizerState","beginTransformFeedback","drawArraysType","endTransformFeedback","releaseBuffers","releaseVertexBuffers","releaseVertexArrayObject","source","updateVertexBuffers","createVertexBuffer","offset","vao","ComputeShaderParticleSystem","_bufferComputeShader","_renderVertexBuffers","_updateComputeShader","bindingsMapping","params","group","binding","particlesIn","particlesOut","randomTexture","randomTexture2","split","_simParamsComputeShader","setUniformBuffer","buffer","update","bindBuffers","setStorageBuffer","dispatch","ceil","i","GPUParticleSystem","options","sceneOrEngine","customEffect","_accumulatedCount","_targetIndex","_currentRenderId","_currentRenderingCameraUniqueId","_started","_stopped","_timeDelta","_actualFrame","_rawTextureWidth","onDisposeObservable","onStoppedObservable","_preWarmDone","_onBeforeDrawParticlesObservable","defaultProjectionMatrix","isNDCHalfZRange","getEngine","uniqueId","getUniqueId","particleSystems","getCaps","supportComputeShaders","_platform","_customWrappers","_drawWrappers","drawContext","useInstancing","randomTextureSize","fullOptions","capacity","maxTextureSize","optionsAsNumber","isFinite","_capacity","_activeCount","_currentActiveCount","min","d","Float32Array","wrapU","wrapV","_randomTextureSize","caps","supportTransformFeedbacks","getCapacity","particleTexture","_recreateUpdateEffect","isStarted","isStopped","isStopping","getActiveCount","start","delay","setTimeout","beginAnimation","stop","reset","_releaseBuffers","getCustomEffect","_getCustomDrawWrapper","setCustomEffect","addColorGradient","colorGradient","_refreshColorGradient","reorder","sort","a","b","forceRefreshGradients","_refreshFactorGradient","removeColorGradient","resetDrawCache","_addFactorGradient","factorGradients","factor","valueGradient","addSizeGradient","removeSizeGradient","textureName","that","addAngularSpeedGradient","removeAngularSpeedGradient","addVelocityGradient","removeVelocityGradient","addLimitVelocityGradient","removeLimitVelocityGradient","addDragGradient","removeDragGradient","addEmitRateGradient","removeEmitRateGradient","addStartSizeGradient","removeStartSizeGradient","addColorRemapGradient","removeColorRemapGradient","addAlphaRemapGradient","removeAlphaRemapGradient","addRampGradient","removeRampGradient","getRampGradients","addLifeTimeGradient","removeLifeTimeGradient","_createVertexBuffers","renderBuffer","spriteSource","_attributesStrideSize","billboardMode","_initialize","force","_buffer0","Array","isBillboardBased","usingCustomEmitter","particleIndex","numDummies","spriteData","bufferData1","bufferData2","_buffer1","_spriteBuffer","_sourceBuffer","_targetBuffer","_cachedUpdateDefines","_updateBuffer","customWrapper","fillDefines","drawWrapper","join","uniforms","fillUniformsAttributesAndSamplerNames","setEffect","createEffect","_GetAttributeNamesOrOptions","hasColorGradients","isBillboardStretched","attributeNamesOrOptions","_GetEffectCreationOptions","effectCreationOption","clipPlane","clipPlane2","clipPlane3","clipPlane4","clipPlane5","clipPlane6","prepareDefines","toString","apply","animate","preWarm","getAnimationRatio","_createFactorGradientTexture","_loop_1","ratio","this_1","currentGradient","nextGradient","scale","factor1","_createSizeGradientTexture","_createAngularSpeedGradientTexture","_createVelocityGradientTexture","_createLimitVelocityGradientTexture","_createDragGradientTexture","_createColorGradientTexture","Uint8Array","tmpColor","_loop_2","this_2","r","g","_render","emitterWM","viewMatrix","getViewMatrix","setMatrix","getProjectionMatrix","setVector2","setDirectColor4","baseSize","getBaseSize","setFloat3","width","camera","activeCamera","globalPosition","indexOf","invView","invert","applyByPostProcess","bind","setAlphaMode","notifyObservers","render","forceUpdateOnly","getFrameId","intPart","getWorldMatrix","emitterPosition","setInt","setFloat4","outparticles","setDepthWrite","tmpBuffer","rebuild","disposeTexture","clear","newEmitter","custom","program","createEffectForParticles","shaderOptions","shaderPath","fragmentElement","serialization","result","Parse","serializeTexture","activeParticleCount","parsedParticleSystem","rootUrl","doNotStart","particleSystem","ParticleSystemSet","_emitterNodeIsOwned","systems","_emitterNode","setEmitterAsSphere","_emitterCreationOptions","kind","emitterMesh","diameter","segments","material","emissiveColor","color","system","gpu","BaseAssetsUrl","ParticleHelper","CreateDefault","useGPU","CreateAsync","token","_addPendingData","Promise","resolve","reject","IsSupported","_removePendingData","concat","newData","JSON","ExportSet","systems_1","ParseFromFileAsync","url","request","addEventListener","readyState","status","responseText","output","open","send","CreateFromSnippetAsync","snippetId","snippet","jsonPayload","SnippetUrl","replace","parsedData","container","individualParser","cache","fragmentName","attributesNamesOrOptions","allSamplers","vertex","vertexShaderName","results","descendants","getDescendants","PointColor","SolidParticle","particleId","positionIndex","indiceIndex","model","shapeId","idxInShape","sps","modelBoundingInfo","materialIndex","idx","rotation","scaling","uvs","velocity","pivot","translateFromPivot","alive","isVisible","_pos","_ind","_stillInvisible","_rotationMatrix","parentId","props","cullingStrategy","_globalPosition","_model","_sps","_modelBoundingInfo","_boundingInfo","minimum","maximum","getBoundingInfo","copyToRef","target","rotationQuaternion","q","intersectsMesh","hasBoundingInfo","_bSphereOnly","boundingSphere","intersects","isInFrustum","frustumPlanes","getRotationMatrix","m","quaternion","toRotationMatrix","ModelShape","shape","indices","normals","colors","shapeUV","posFunction","vtxFunction","_indicesLength","_shape","_shapeUV","_shapeColors","_positionFunction","_vertexFunction","_material","shapeID","DepthSortedParticle","ind","indLength","indicesLength","sqDistance","SolidParticleVertex","uv","val","SolidParticleSystem","particles","nbParticles","billboard","recomputeNormals","counter","vars","_bSphereRadiusFactor","_colors","_uvs","_index","_updatable","_pickable","_isVisibilityBoxLocked","_alwaysVisible","_depthSort","_expandable","_shapeCounter","_copy","_color","_computeParticleColor","_computeParticleTexture","_computeParticleRotation","_computeParticleVertex","_computeBoundingBox","_depthSortParticles","_mustUnrotateFixedNormals","_particlesIntersect","_needs32Bits","_isNotBuilt","_lastParticleId","_idxOfId","_multimaterialEnabled","_useModelMaterial","_depthSortFunction","p1","p2","_materialSortFunction","_autoUpdateSubMeshes","_camera","isPickable","enableDepthSort","enableMultiMaterial","useModelMaterial","expandable","particleIntersection","boundingSphereOnly","bSphereRadiusFactor","updatable","pickedBySubMesh","pickedParticles","depthSortedParticles","_multimaterial","_materials","_materialIndexesById","_tmpVertex","buildMesh","triangle","tessellation","addShape","_indices32","Uint32Array","Uint16Array","_positions32","_uvs32","_colors32","_sortParticlesByMaterial","_normals32","_fixedNormal32","_unrotateFixedNormals","vertexData","applyToMesh","faceId","p","part","lind","pickedData","setMultiMaterial","digest","size","facetNb","number","delta","meshPos","meshInd","meshUV","meshCol","meshNor","storage","f","totalFacets","round","facetPos","facetNor","facetInd","facetUV","facetCol","barycenter","sizeO","floor","fi","j","i3","i2","i4","_posToShape","_uvsToShapeUV","shapeInd","slice","shapeCol","shapeNor","addInPlace","scaleInPlace","Infinity","subtractInPlace","minimizeInPlaceFromFloats","maximizeInPlaceFromFloats","bInfo","_setDefaultMaterial","modelShape","currentPos","currentInd","_meshBuilder","_addParticle","tmpNormal","invertedRotMatrix","conjugateToRef","conjugateInPlace","pt","toArray","_resetCopy","copy","setAll","positions","u","c","n","storeApart","materialId","materialIndexesById","hasOwnProperty","matIdx","positionFunction","rotMatrix","tmpVertex","tmpUV","tmpRotated","pivotBackTranslation","scaledPivot","multiplyToRef","someVertexFunction","vertexFunction","multiplyInPlace","copyUvs","w","current_ind","matIndex","idxpos","idxind","sp","nb","from","shapeNormals","shapeColors","bbInfo","posfunc","vtxfunc","_insertNewParticle","_rebuildParticle","rebuildMesh","updateVerticesData","removeParticles","end","currentNb","firstRemaining","shiftPos","shifInd","removed","particlesLength","modelIndices","modelNormals","modelColors","modelUVs","insertParticlesFromArray","solidParticleArray","currentShapeId","noNor","newPart","currentCopy","setParticles","beforeUpdateParticles","invertedMatrix","colors32","positions32","normals32","uvs32","indices32","fixedNormal32","tempVectors","camAxisX","camAxisY","camAxisZ","Number","MAX_VALUE","camInvertedPosition","computeWorldMatrix","_worldMatrix","invertToRef","tmpVector0","getDirectionToRef","view","colidx","colorIndex","uvidx","uvIndex","isFacetDataEnabled","boundingInfo","vpos","updateParticle","particleRotationMatrix","particlePosition","particleRotation","particleScaling","particleGlobalPosition","dsp","parent_1","getParticleById","parentRotationMatrix","parentGlobalPosition","rotatedY","rotatedX","rotatedZ","rotMatrixValues","iu","iv","updateParticleVertex","vertexX","vertexY","vertexZ","px","py","pz","normalx","normaly","normalz","rotatedx","rotatedy","rotatedz","colors32_1","bBox","boundingBox","bSphere","modelBoundingInfoVectors","vectors","tempMin","tempMax","scaledX","scaledY","scaledZ","reConstruct","minBbox","maxBbox","bSphereCenter","addToRef","halfDiag","bSphereMinBbox","bSphereMaxBbox","vb","getVertexBuffer","updateDirectly","vbp","areNormalsFrozen","getFacetDataParameters","dspl","sid","sorted","sortedParticle","sind","updateIndices","buildBoundingInfo","computeSubMeshes","afterUpdateParticles","_materialIndexes","_indicesByMaterial","pickedParticle","pickingInfo","hit","subMesh","subMeshId","subMeshes","indexStart","picked","getParticlesByShapeId","ref","getParticlesByShapeIdToRef","sortedPart","indicesByMaterial","materialIndexes","vcount","getTotalVertices","count","subMeshIndex","subMeshFaceId","lastMatIndex","_setMaterialIndexesById","_filterUniqueMaterialId","array","filter","self","_defaultMaterial","refreshVisibleSize","refreshBoundingInfo","setVisibilityBox","vis","alwaysSelectAsActiveMesh","isLocked","materials","subMaterials","mm","initParticles","recycleParticle","CloudPoint","groupId","idxInGroup","pcs","_group","_pcs","isSphere","intersectsPoint","add","maxX","minX","maxY","minY","maxZ","minZ","maximumWorld","minimumWorld","PointsGroup","groupID","PointsCloudSystem","pointSize","_promises","_groups","_groupCounter","_isReady","_size","buildMeshAsync","all","then","_buildMesh","addPoints","ec","mat","disableLighting","pointsCloud","cp","_randomUnitVector","_getColorIndicesForCoord","pointsGroup","imageData","_groupImageData","colorIndices","greenIndex","blueIndex","alphaIndex","redForCoord","greenForCoord","blueForCoord","alphaForCoord","_setPointsColorOrUV","isVolume","colorFromTexture","hasTexture","range","updateFacetData","place","meshMatrix","isIdentity","facetPoint","uvPoint","idxPoints","id0","id1","id2","v0X","v0Y","v0Z","v1X","v1Y","v1Z","v2X","v2Y","v2Z","vertex0","vertex1","vertex2","vec0","vec1","uv0X","uv0Y","uv1X","uv1Y","uv2X","uv2Y","uv0","uv1","uv2","uvec0","uvec1","col0X","col0Y","col0Z","col0A","col1X","col1Y","col1Z","col1A","col2X","col2Y","col2Z","col2A","col0","col1","col2","colvec0","colvec1","lamda","mu","pickInfo","colPoint","norm","tang","biNorm","facetPlaneVec","gap","distance","ray","deltaS","deltaV","hsvCol","statedColor","colPoint3","pointColors","_groupDensity","getFacetNormal","origin","pickedPoint","_groupImgWidth","_groupImgHeight","toHSV","_colorFromTexture","textureList","getActiveTextures","setEnabled","_textureNb","finalize","getSize","dataPromise","readPixels","_calculateDensity","nbPoints","area","density","vec2","areas","surfaceArea","nbFacets","pointCount","diff","pointsPerFacet","extraPoints","map","pointFunction","addSurfacePoints","colorWith","colored","Random","isNaN","Color","UV","Stated","addVolumePoints","pindex","cindex","uindex","rotatedY_1","rotatedX_1","rotatedZ_1","uvs32_1","Particle","colorStep","age","angularSpeed","cellIndex","_attachedSubEmitters","_currentColor1","_currentColor2","_currentSize1","_currentSize2","_currentAngularSpeed1","_currentAngularSpeed2","_currentVelocity1","_currentVelocity2","_currentLimitVelocity1","_currentLimitVelocity2","_currentDrag1","_currentDrag2","_Count","_updateCellInfoFromSystem","updateCellIndex","offsetAge","changeSpeed","_randomCellOffset","dist","_initialEndSpriteCellID","_initialStartSpriteCellID","_initialSpriteCellLoop","_inheritParticleInfoToSubEmitter","subEmitter","inheritDirection","temp","normalizeToRef","setDirection","inheritedVelocityAmount","_inheritedVelocityOffset","_inheritParticleInfoToSubEmitters","forEach","_currentColorGradient","_currentSizeGradient","_currentAngularSpeedGradient","_currentVelocityGradient","_currentLimitVelocityGradient","_currentDragGradient","copyTo","other","_initialDirection","useRampGradients","remapData","_randomNoiseCoordinates1","_randomNoiseCoordinates2","ParticleSystem","epsilon","_emitterInverseWorldMatrix","_particles","_stockParticles","_newPartsExcess","_vertexBuffers","_scaledColorStep","_colorDiff","_scaledDirection","_scaledGravity","_useInstancing","_currentEmitRate1","_currentEmitRate2","_currentStartSize1","_currentStartSize2","_useRampGradients","_disposeEmitterOnDispose","lastParticle","pop","_createParticle","_subEmitters","subEmitters","_emitFromParticle","templateIndex","subSystem","_rootParticleSystem","activeSubSystems","_epsilon","vertexArrayObject","_vertexArrayObject","instancedArrays","_createIndexBuffer","noiseTextureData","updateFunction","noiseTextureSize","getContent","out_index_1","scaledUpdateSpeed","_scaledUpdateSpeed","previousAge","getColorToRef","getFactor","directionScale","limitVelocity","drag","_emitterWorldMatrix","fetchedColorR","_fetchR","fetchedColorG","fetchedColorB","scaledForce","max","factor2","callback","_onDisposeObserver","remove","_resetEffect","isAlive","_indexBuffer","newGradient","_removeFactorGradient","factorGradients_1","_createRampGradientTexture","_rampGradientsTexture","_syncRampGradientTexture","rampGradient","drawWrappers","drawWrappers_1","pixels","_vertexBuffer","_vertexBufferSize","BILLBOARDMODE_STRETCHED","vertexSize","_vertexData","dataOffset","offsets","cellIndexBuffer","directionBuffer","rampDataBuffer","createIndexBuffer","_alive","_prepareSubEmitterInternalArray","_currentEmitRateGradient","_currentStartSizeGradient","noiseTextureAsProcedural_1","onGeneratedObservable","addOnce","stopSubEmitters","_stopSubEmitters","_appendParticleVertex","offsetX","offsetY","initialDirection","_removeFromRoot","_update","newParticles","_loop_3","ratio_1","factorGradient1","factorGradient2","lifeTime1","lifeTime2","emitPower","step","BILLBOARDMODE_Y","BILLBOARDMODE_ALL","currentRenderPassId","_features","supportRenderPasses","preWarmOnly","rate_1","_toBeDisposed","_appendParticleVertices","key","_rebuild","defaultViewMatrix","drawElementsType","unbindInstanceAttributes","_releaseBuffer","_activeParticleSystems","_Serialize","cell","subs_1","sub","emitterId","invertY","_invertY","colorGradients","colorGradients_1","serializedGradient","rampGradients","rampGradients_1","colorRemapGradients","colorRemapGradients_1","colorRemapGradient","alphaRemapGradients","_c","alphaRemapGradients_1","alphaRemapGradient","sizeGradients","_d","sizeGradients_1","sizeGradient","angularSpeedGradients","_e","angularSpeedGradients_1","angularSpeedGradient","velocityGradients","_f","velocityGradients_1","velocityGradient","dragGradients","_g","dragGradients_1","dragGradient","emitRateGradients","_h","emitRateGradients_1","emitRateGradient","startSizeGradients","_j","startSizeGradients_1","startSizeGradient","lifeTimeGradients","_k","lifeTimeGradients_1","lifeTimeGradient","limitVelocityGradients","_l","limitVelocityGradients_1","limitVelocityGradient","_Parse","emitterType","internalClass","animationIndex","parsedAnimation","internalClass_1","autoAnimate","autoAnimateFrom","autoAnimateTo","autoAnimateLoop","autoAnimateSpeed","_m","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","_y","_z","_0","_1","internalClass_2","cellArray","cell_1","SubEmitterType","SubEmitter","END","_ParseParticleSystem","AmmoJSPlugin","_useDeltaForWorldStep","ammoInjection","overlappingPairCache","Ammo","bjsAMMO","_timeStep","_fixedTimeStep","_maxSteps","_tmpQuaternion","_tmpContactCallbackResult","_tmpContactPoint","_tmpVec3","_tmpMatrix","isSupported","_collisionConfiguration","btSoftBodyRigidBodyCollisionConfiguration","_dispatcher","btCollisionDispatcher","_overlappingPairCache","btDbvtBroadphase","_solver","btSequentialImpulseConstraintSolver","_softBodySolver","btDefaultSoftBodySolver","world","btSoftRigidDynamicsWorld","_tmpAmmoConcreteContactResultCallback","ConcreteContactResultCallback","addSingleResult","contactPoint","worldPoint","wrapPointer","btManifoldPoint","getPositionWorldOnA","_raycastResult","_tmpAmmoTransform","btTransform","setIdentity","_tmpAmmoQuaternion","btQuaternion","_tmpAmmoVectorA","btVector3","_tmpAmmoVectorB","_tmpAmmoVectorC","_tmpAmmoVectorD","setGravity","setValue","getWorldInfo","set_m_gravity","setTimeStep","timeStep","setFixedTimeStep","fixedTimeStep","setMaxSteps","maxSteps","getTimeStep","_isImpostorInContact","impostor","contactTest","physicsBody","_isImpostorPairInContact","impostorA","impostorB","contactPairTest","_stepSimulation","stepSimulation","executeStep","impostors","impostors_1","soft","beforeStep","impostors_2","mainImpostor","_afterSoftStep","afterStep","_onPhysicsCollideCallbacks","otherImpostors","otherImpostor","isActive","onCollide","body","point","_ropeStep","_softbodyOrClothStep","nodePositions","bodyVertices","get_m_nodes","nbVertices","path","at","get_m_x","object","getParam","_isFromLine","points","instance","normalDirection","vertexPositions","vertexNormals","node","nx","ny","nz","nodeNormals","get_m_n","vertex_data","applyImpulse","activate","impulse","applyForce","localTranslation","generatePhysicsBody","_pluginData","toDispose","removePhysicsBody","forceUpdate","isBodyInitRequired","colShape","_createShape","mass","get_m_cfg","set_collisions","set_kDP","castObject","btCollisionObject","getCollisionShape","setMargin","setActivationState","_DISABLE_DEACTIVATION_FLAG","addSoftBody","setBodyPressure","setBodyStiffness","setBodyVelocityIterations","setBodyPositionIterations","localInertia","startTransform","calculateLocalInertia","setOrigin","setRotation","myMotionState","btDefaultMotionState","rbInfo","btRigidBodyConstructionInfo","btRigidBody","setCollisionFlags","getCollisionFlags","_KINEMATIC_FLAG","getChildShape","_DISABLE_COLLISION_FLAG","getAbsolutePosition","centerWorld","setDeltaPosition","mask","addRigidBody","setBodyRestitution","setBodyFriction","removeSoftBody","removeRigidBody","destroy","generateJoint","impostorJoint","mainBody","connectedBody","connectedImpostor","joint","jointData","mainPivot","connectedPivot","maxDistance","btPoint2PointConstraint","mainAxis","connectedAxis","btHingeConstraint","addConstraint","collision","physicsJoint","removeJoint","removeConstraint","_addMeshVerts","btTriangleMesh","topLevelObject","triangleCount","getChildMeshes","localMatrix","topLevelQuaternion","multiply","faceCount","triPoints","vec","addTriangle","_softVertexData","newPoints","newNorms","_createSoftbody","btCompoundShape","triNorms","softBody","btSoftBodyHelpers","CreateFromTriMesh","setX","setY","setZ","_createCloth","len","segs","CreatePatch","_createRope","reduce","accumulator","currentValue","pathVectors","fixedPoints","ropeBody","CreateRope","_createCustom","returnValue","onCreateCustomShape","_addHullVerts","btConvexHullShape","addPoint","ignoreChildren","extendSize","getObjectExtendSize","meshChildren","childrenAdded_1","childMesh","childImpostor","getPhysicsImpostor","parentMat","decompose","getOrigin","addChildShape","btSphereShape","btMultiSphereShape","setLocalScaling","capRadius","btCapsuleShape","btCylinderShape","btBoxShape","onCreateCustomMeshImpostor","tetraMesh","triangeCount","btBvhTriangleMeshShape","onCreateCustomConvexHullImpostor","convexMesh","setTransformationFromPhysicsBody","getMotionState","getWorldTransform","getRotation","toEulerAnglesToRef","setPhysicsBodyTransformation","newPosition","newRotation","trans","setWorldTransform","motionState","setLinearVelocity","linearVelocity","setAngularVelocity","angularVelocity","getLinearVelocity","getAngularVelocity","setBodyMass","setTotalMass","setMassProps","getBodyMass","getBodyFriction","friction","set_kDF","setFriction","getBodyRestitution","restitution","setRestitution","getBodyPressure","pressure","set_kPR","getBodyStiffness","stiffness","get_m_materials","set_m_kLST","getBodyVelocityIterations","velocityIterations","set_viterations","getBodyPositionIterations","positionIterations","set_piterations","appendAnchor","influence","noCollisionBetweenLinkedBodies","appendHook","sleepBody","forceActivationState","wakeUpBody","updateDistanceJoint","setMotor","speed","maxForce","enableAngularMotor","setLimit","syncMeshWithImpostor","getRadius","getBoxSizeToRef","exntend","raycast","to","_tmpAmmoVectorRCA","_tmpAmmoVectorRCB","rayCallback","ClosestRayResultCallback","rayTest","hasHit","setHitData","get_m_hitNormalWorld","get_m_hitPointWorld","calculateHitDistance"],"sourceRoot":""}