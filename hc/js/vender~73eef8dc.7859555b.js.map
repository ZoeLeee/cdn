{"version":3,"file":"js/vender~73eef8dc.7859555b.js","mappings":"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A,mdCAA,2tDCAA,o2BCAA,udCAA,k1ECAA,qSCAA,gMCAA,oWCAA,gWCAA,yTCAA,8xBCAA,0kOCAA,wkBCAA,0iBCAA,4wDCAA,8vDCAA,uVCAA,iTCAA,q/CCAA,6eCAA,6zCCAA,o0ECAA,62CCAA,4fCAA,0gBCAA,g3BCAA,2zBCAA,wzCCAA,88CCAA,+gCCAA,qVCAA,qmBCAA,uoBCAA,snCCAA,qmBCAA,4eCAA,2fCAA,w/DCAA,0kDCAA,0iBCAA,ugCCAA,gqGCAA,wnBCAA,0wGCAA,85CCAA,wjCCAA,wyECAA,u+BCAA,kpBCAA,o4FCAA,++BCAA,uLCAA,mrCCAA,kZCAA,mjBCAA,06FCAA,0rBCAA,iqBCAA,+lFCAA,48BCAA,2uCCAA,odCAA,wgCCAA,iiBCAA,2jDCAA,s+BCAA,81CCAA,kjBCAA,04BCAA,8kCCAA,w2CCAA,shECAA,m+HCAA,usBCAA,yqECAA,svCCAA,2KCAA,kjCCAA,8wCCAA,uhDCAA,6fCAA,8hBCAA,sKCAA,kfCAA,gTCAA,myUCAA,22CCAA,kiGCAA,2nBCAA,wgBCAA,07BCAA,+gCCAA,iPCAA,4xICAA,83CC4BA,u06BC5BA,qlwBCAA,66SCAA,uqBCAA,0bCAA,mjCCAA,ykCCAA,0mBCAA,wuECAA,u6BCAA,klBCAA,shCCAA,8qECAA,+sBCAA,6/DCAA,8oCCAA,owBCAA,y+BCAA,muBCAA,ybCAA,i2BCAA,87ECAA,qxCCAA,+4BCAA,qgBCAA,6jBCAA,8NCAA,2PCAA,qqBCAA,8yCCAA,uvOCAA,2pCCAA,kOCAA,ygBCAA,0lECAA,mgQCAA,2KCAA,qMCAA,ogHCAA,qVCAA,wgECAA,yjHCAA,wZCAA,+eCAA,ocCAA,wlDCAA,qmBCAA,+uECAA,6YCAA,mPCAA,i5CCAA,iwMCAA,0pOCAA,4lBCAA,+hICAA,myDCAA,svSCAA,upOCAA,g3HCAA,+gBCAA,wfCAA,ymICAA,6aCAA,8iBCAA,wfCAA,i5BCAA,sUCAA,qwBCAA,mkBCAA,6oCCAA,+PCAA,qiBCAA,yxDCAA,6pBCAA,omCCAA,kpCCAA,k4LCAA,qqBCAA,ueCAA,4MCAA,uOCAA,m7ECAA,snBCAA,wYCAA,sMCAA,kWCAA,6zNCAA,29JCAA,mWCAA,+7ICAA,m8DCAA,yvBCAA,qQCAA,uSCAA,gPCAA,kpECAA,wsBCAA,w2DCAA,q6GCAA,ouBCAA,+PCAA,ofCAA","sources":["webpack:///../../../node_modules/cesium/Source/Scene/View.js","webpack:///../../../node_modules/cesium/Source/Scene/ViewportQuad.js","webpack:///../../../node_modules/cesium/Source/Scene/WebMapServiceImageryProvider.js","webpack:///../../../node_modules/cesium/Source/Scene/WebMapTileServiceImageryProvider.js","webpack:///../../../node_modules/cesium/Source/Scene/computeFlyToLocationForRectangle.js","webpack:///../../../node_modules/cesium/Source/Scene/createBillboardPointCallback.js","webpack:///../../../node_modules/cesium/Source/Scene/createElevationBandMaterial.js","webpack:///../../../node_modules/cesium/Source/Scene/createOsmBuildings.js","webpack:///../../../node_modules/cesium/Source/Scene/createTangentSpaceDebugPrimitive.js","webpack:///../../../node_modules/cesium/Source/Scene/createWorldImagery.js","webpack:///../../../node_modules/cesium/Source/Scene/findContentMetadata.js","webpack:///../../../node_modules/cesium/Source/Scene/findGroupMetadata.js","webpack:///../../../node_modules/cesium/Source/Scene/findTileMetadata.js","webpack:///../../../node_modules/cesium/Source/Scene/getBinaryAccessor.js","webpack:///../../../node_modules/cesium/Source/Scene/getClipAndStyleCode.js","webpack:///../../../node_modules/cesium/Source/Scene/getClippingFunction.js","webpack:///../../../node_modules/cesium/Source/Scene/hasExtension.js","webpack:///../../../node_modules/cesium/Source/Scene/parseBatchTable.js","webpack:///../../../node_modules/cesium/Source/Scene/parseBoundingVolumeSemantics.js","webpack:///../../../node_modules/cesium/Source/Scene/parseFeatureMetadataLegacy.js","webpack:///../../../node_modules/cesium/Source/Scene/parseStructuralMetadata.js","webpack:///../../../node_modules/cesium/Source/Scene/preprocess3DTileContent.js","webpack:///../../../node_modules/cesium/Source/Scene/processModelMaterialsCommon.js","webpack:///../../../node_modules/cesium/Source/Scene/processPbrMaterials.js","webpack:///../../../node_modules/cesium/Source/Shaders/AdjustTranslucentFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Appearances/AllMaterialAppearanceFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Appearances/AllMaterialAppearanceVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Appearances/BasicMaterialAppearanceFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Appearances/BasicMaterialAppearanceVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Appearances/EllipsoidSurfaceAppearanceFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Appearances/EllipsoidSurfaceAppearanceVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Appearances/PerInstanceColorAppearanceFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Appearances/PerInstanceColorAppearanceVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Appearances/PerInstanceFlatColorAppearanceFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Appearances/PerInstanceFlatColorAppearanceVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Appearances/PolylineColorAppearanceVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Appearances/PolylineMaterialAppearanceVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Appearances/TexturedMaterialAppearanceFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Appearances/TexturedMaterialAppearanceVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/AtmosphereCommon.js","webpack:///../../../node_modules/cesium/Source/Shaders/BillboardCollectionFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/BillboardCollectionVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/BrdfLutGeneratorFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/degreesPerRadian.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/depthRange.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/epsilon1.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/epsilon2.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/epsilon3.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/epsilon4.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/epsilon5.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/epsilon6.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/epsilon7.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/infinity.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/oneOverPi.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/oneOverTwoPi.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/passCesium3DTile.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/passCesium3DTileClassification.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/passCesium3DTileClassificationIgnoreShow.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/passClassification.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/passCompute.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/passEnvironment.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/passGlobe.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/passOpaque.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/passOverlay.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/passTerrainClassification.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/passTranslucent.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/pi.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/piOverFour.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/piOverSix.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/piOverThree.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/piOverTwo.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/radiansPerDegree.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/sceneMode2D.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/sceneMode3D.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/sceneModeColumbusView.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/sceneModeMorphing.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/solarRadius.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/threePiOver2.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/twoPi.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Constants/webMercatorMaxLatitude.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/CzmBuiltins.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/HSBToRGB.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/HSLToRGB.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/RGBToHSB.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/RGBToHSL.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/RGBToXYZ.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/XYZToRGB.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/acesTonemapping.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/alphaWeight.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/antialias.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/approximateSphericalCoordinates.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/backFacing.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/branchFreeTernary.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/cascadeColor.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/cascadeDistance.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/cascadeMatrix.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/cascadeWeights.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/columbusViewMorph.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/computePosition.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/cosineAndSine.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/decompressTextureCoordinates.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/defaultPbrMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/depthClamp.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/eastNorthUpToEyeCoordinates.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/ellipsoidContainsPoint.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/ellipsoidWgs84TextureCoordinates.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/equalsEpsilon.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/eyeOffset.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/eyeToWindowCoordinates.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/fastApproximateAtan.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/fog.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/gammaCorrect.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/geodeticSurfaceNormal.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/getDefaultMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/getLambertDiffuse.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/getSpecular.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/getWaterNoise.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/hue.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/inverseGamma.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/isEmpty.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/isFull.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/latitudeToWebMercatorFraction.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/lineDistance.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/linearToSrgb.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/luminance.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/metersPerPixel.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/modelToWindowCoordinates.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/multiplyWithColorBalance.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/nearFarScalar.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/octDecode.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/packDepth.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/pbrLighting.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/pbrMetallicRoughnessMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/pbrSpecularGlossinessMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/phong.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/planeDistance.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/pointAlongRay.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/rayEllipsoidIntersectionInterval.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/raySphereIntersectionInterval.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/readDepth.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/readNonPerspective.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/reverseLogDepth.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/round.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/sampleOctahedralProjection.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/saturation.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/shadowDepthCompare.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/shadowVisibility.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/signNotZero.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/sphericalHarmonics.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/srgbToLinear.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/tangentToEyeSpaceMatrix.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/transformPlane.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/translateRelativeToEye.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/translucentPhong.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/transpose.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/unpackDepth.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/unpackFloat.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/unpackUint.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/valueTransform.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/vertexLogDepth.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/windowToEyeCoordinates.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/writeDepthClamp.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/writeLogDepth.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Functions/writeNonPerspective.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Structs/depthRangeStruct.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Structs/material.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Structs/materialInput.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Structs/modelMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Structs/modelVertexOutput.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Structs/pbrParameters.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Structs/ray.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Structs/raySegment.js","webpack:///../../../node_modules/cesium/Source/Shaders/Builtin/Structs/shadowParameters.js","webpack:///../../../node_modules/cesium/Source/Shaders/CloudCollectionFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/CloudCollectionVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/CloudNoiseFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/CloudNoiseVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/CompareAndPackTranslucentDepth.js","webpack:///../../../node_modules/cesium/Source/Shaders/CompositeOITFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/DepthPlaneFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/DepthPlaneVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/EllipsoidFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/EllipsoidVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/FXAA3_11.js","webpack:///../../../node_modules/cesium/Source/Shaders/GlobeFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/GlobeVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/GroundAtmosphere.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/AspectRampMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/BumpMapMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/CheckerboardMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/DotMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/ElevationBandMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/ElevationContourMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/ElevationRampMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/FadeMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/GridMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/NormalMapMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/PolylineArrowMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/PolylineDashMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/PolylineGlowMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/PolylineOutlineMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/RimLightingMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/SlopeRampMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/StripeMaterial.js","webpack:///../../../node_modules/cesium/Source/Shaders/Materials/Water.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/CPUStylingStageFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/CPUStylingStageVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/CustomShaderStageFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/CustomShaderStageVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/FeatureIdStageFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/FeatureIdStageVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/GeometryStageFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/GeometryStageVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/ImageBasedLightingStageFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/InstancingStageCommon.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/InstancingStageVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/LegacyInstancingStageVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/LightingStageFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/MaterialStageFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/MetadataStageFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/MetadataStageVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/ModelClippingPlanesStageFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/ModelColorStageFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/ModelSplitterStageFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/MorphTargetsStageVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/PointCloudAttenuationStageVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/SelectedFeatureIdStageCommon.js","webpack:///../../../node_modules/cesium/Source/Shaders/ModelExperimental/SkinningStageVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/OctahedralProjectionAtlasFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/OctahedralProjectionFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/OctahedralProjectionVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/PointPrimitiveCollectionFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/PointPrimitiveCollectionVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/PolylineCommon.js","webpack:///../../../node_modules/cesium/Source/Shaders/PolylineFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/PolylineShadowVolumeFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/PolylineShadowVolumeMorphFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/PolylineShadowVolumeMorphVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/PolylineShadowVolumeVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/PolylineVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/AcesTonemappingStage.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/AdditiveBlend.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/AmbientOcclusionGenerate.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/AmbientOcclusionModulate.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/BlackAndWhite.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/BloomComposite.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/BrightPass.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/Brightness.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/CompositeTranslucentClassification.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/ContrastBias.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/DepthOfField.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/DepthView.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/DepthViewPacked.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/EdgeDetection.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/FXAA.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/FilmicTonemapping.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/GaussianBlur1D.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/LensFlare.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/ModifiedReinhardTonemapping.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/NightVision.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/PassThrough.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/PassThroughDepth.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/PointCloudEyeDomeLighting.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/ReinhardTonemapping.js","webpack:///../../../node_modules/cesium/Source/Shaders/PostProcessStages/Silhouette.js","webpack:///../../../node_modules/cesium/Source/Shaders/ReprojectWebMercatorFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ReprojectWebMercatorVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ShadowVolumeAppearanceFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ShadowVolumeAppearanceVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ShadowVolumeFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/SkyAtmosphereCommon.js","webpack:///../../../node_modules/cesium/Source/Shaders/SkyAtmosphereFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/SkyAtmosphereVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/SkyBoxFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/SkyBoxVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/SunFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/SunTextureFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/SunVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Vector3DTileClampedPolylinesFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Vector3DTileClampedPolylinesVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/Vector3DTilePolylinesVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/VectorTileVS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ViewportQuadFS.js","webpack:///../../../node_modules/cesium/Source/Shaders/ViewportQuadVS.js"],"sourcesContent":["import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport CullingVolume from \"../Core/CullingVolume.js\";\nimport defined from \"../Core/defined.js\";\nimport getTimestamp from \"../Core/getTimestamp.js\";\nimport Interval from \"../Core/Interval.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport ClearCommand from \"../Renderer/ClearCommand.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport PassState from \"../Renderer/PassState.js\";\nimport Camera from \"./Camera.js\";\nimport FrustumCommands from \"./FrustumCommands.js\";\nimport GlobeDepth from \"./GlobeDepth.js\";\nimport GlobeTranslucencyFramebuffer from \"./GlobeTranslucencyFramebuffer.js\";\nimport OIT from \"./OIT.js\";\nimport PickDepthFramebuffer from \"./PickDepthFramebuffer.js\";\nimport PickFramebuffer from \"./PickFramebuffer.js\";\nimport SceneFramebuffer from \"./SceneFramebuffer.js\";\nimport SceneMode from \"./SceneMode.js\";\nimport ShadowMap from \"./ShadowMap.js\";\nimport TranslucentTileClassification from \"./TranslucentTileClassification.js\";\n\nfunction CommandExtent() {\n  this.command = undefined;\n  this.near = undefined;\n  this.far = undefined;\n}\n\n/**\n * @private\n */\nfunction View(scene, camera, viewport) {\n  const context = scene.context;\n\n  let globeDepth;\n  if (context.depthTexture) {\n    globeDepth = new GlobeDepth();\n  }\n\n  let oit;\n  if (scene._useOIT && context.depthTexture) {\n    oit = new OIT(context);\n  }\n\n  const passState = new PassState(context);\n  passState.viewport = BoundingRectangle.clone(viewport);\n\n  this.camera = camera;\n  this._cameraClone = Camera.clone(camera);\n  this._cameraStartFired = false;\n  this._cameraMovedTime = undefined;\n\n  this.viewport = viewport;\n  this.passState = passState;\n  this.pickFramebuffer = new PickFramebuffer(context);\n  this.pickDepthFramebuffer = new PickDepthFramebuffer();\n  this.sceneFramebuffer = new SceneFramebuffer();\n  this.globeDepth = globeDepth;\n  this.globeTranslucencyFramebuffer = new GlobeTranslucencyFramebuffer();\n  this.oit = oit;\n  this.translucentTileClassification = new TranslucentTileClassification(\n    context\n  );\n  this.pickDepths = [];\n  this.frustumCommandsList = [];\n  this.debugFrustumStatistics = undefined;\n\n  // Array of all commands that get rendered into frustums along with their near / far values.\n  // Acts similar to a ManagedArray.\n  this._commandExtents = [];\n}\n\nconst scratchPosition0 = new Cartesian3();\nconst scratchPosition1 = new Cartesian3();\nfunction maxComponent(a, b) {\n  const x = Math.max(Math.abs(a.x), Math.abs(b.x));\n  const y = Math.max(Math.abs(a.y), Math.abs(b.y));\n  const z = Math.max(Math.abs(a.z), Math.abs(b.z));\n  return Math.max(Math.max(x, y), z);\n}\n\nfunction cameraEqual(camera0, camera1, epsilon) {\n  const scalar =\n    1 / Math.max(1, maxComponent(camera0.position, camera1.position));\n  Cartesian3.multiplyByScalar(camera0.position, scalar, scratchPosition0);\n  Cartesian3.multiplyByScalar(camera1.position, scalar, scratchPosition1);\n  return (\n    Cartesian3.equalsEpsilon(scratchPosition0, scratchPosition1, epsilon) &&\n    Cartesian3.equalsEpsilon(camera0.direction, camera1.direction, epsilon) &&\n    Cartesian3.equalsEpsilon(camera0.up, camera1.up, epsilon) &&\n    Cartesian3.equalsEpsilon(camera0.right, camera1.right, epsilon) &&\n    Matrix4.equalsEpsilon(camera0.transform, camera1.transform, epsilon) &&\n    camera0.frustum.equalsEpsilon(camera1.frustum, epsilon)\n  );\n}\n\nView.prototype.checkForCameraUpdates = function (scene) {\n  const camera = this.camera;\n  const cameraClone = this._cameraClone;\n  if (!cameraEqual(camera, cameraClone, CesiumMath.EPSILON15)) {\n    if (!this._cameraStartFired) {\n      camera.moveStart.raiseEvent();\n      this._cameraStartFired = true;\n    }\n    this._cameraMovedTime = getTimestamp();\n    Camera.clone(camera, cameraClone);\n\n    return true;\n  }\n\n  if (\n    this._cameraStartFired &&\n    getTimestamp() - this._cameraMovedTime > scene.cameraEventWaitTime\n  ) {\n    camera.moveEnd.raiseEvent();\n    this._cameraStartFired = false;\n  }\n\n  return false;\n};\n\nfunction updateFrustums(view, scene, near, far) {\n  const frameState = scene.frameState;\n  const camera = frameState.camera;\n  const farToNearRatio = frameState.useLogDepth\n    ? scene.logarithmicDepthFarToNearRatio\n    : scene.farToNearRatio;\n  const is2D = scene.mode === SceneMode.SCENE2D;\n  const nearToFarDistance2D = scene.nearToFarDistance2D;\n\n  // Extend the far plane slightly further to prevent geometry clipping against the far plane.\n  far *= 1.0 + CesiumMath.EPSILON2;\n\n  // The computed near plane must be between the user defined near and far planes.\n  // The computed far plane must between the user defined far and computed near.\n  // This will handle the case where the computed near plane is further than the user defined far plane.\n  near = Math.min(Math.max(near, camera.frustum.near), camera.frustum.far);\n  far = Math.max(Math.min(far, camera.frustum.far), near);\n\n  let numFrustums;\n  if (is2D) {\n    // The multifrustum for 2D is uniformly distributed. To avoid z-fighting in 2D,\n    // the camera is moved to just before the frustum and the frustum depth is scaled\n    // to be in [1.0, nearToFarDistance2D].\n    far = Math.min(far, camera.position.z + scene.nearToFarDistance2D);\n    near = Math.min(near, far);\n    numFrustums = Math.ceil(\n      Math.max(1.0, far - near) / scene.nearToFarDistance2D\n    );\n  } else {\n    // The multifrustum for 3D/CV is non-uniformly distributed.\n    numFrustums = Math.ceil(Math.log(far / near) / Math.log(farToNearRatio));\n  }\n\n  const frustumCommandsList = view.frustumCommandsList;\n  frustumCommandsList.length = numFrustums;\n  for (let m = 0; m < numFrustums; ++m) {\n    let curNear;\n    let curFar;\n\n    if (is2D) {\n      curNear = Math.min(\n        far - nearToFarDistance2D,\n        near + m * nearToFarDistance2D\n      );\n      curFar = Math.min(far, curNear + nearToFarDistance2D);\n    } else {\n      curNear = Math.max(near, Math.pow(farToNearRatio, m) * near);\n      curFar = Math.min(far, farToNearRatio * curNear);\n    }\n    let frustumCommands = frustumCommandsList[m];\n    if (!defined(frustumCommands)) {\n      frustumCommands = frustumCommandsList[m] = new FrustumCommands(\n        curNear,\n        curFar\n      );\n    } else {\n      frustumCommands.near = curNear;\n      frustumCommands.far = curFar;\n    }\n  }\n}\n\nfunction insertIntoBin(view, scene, command, commandNear, commandFar) {\n  if (scene.debugShowFrustums) {\n    command.debugOverlappingFrustums = 0;\n  }\n\n  const frustumCommandsList = view.frustumCommandsList;\n  const length = frustumCommandsList.length;\n\n  for (let i = 0; i < length; ++i) {\n    const frustumCommands = frustumCommandsList[i];\n    const curNear = frustumCommands.near;\n    const curFar = frustumCommands.far;\n\n    if (commandNear > curFar) {\n      continue;\n    }\n\n    if (commandFar < curNear) {\n      break;\n    }\n\n    const pass = command.pass;\n    const index = frustumCommands.indices[pass]++;\n    frustumCommands.commands[pass][index] = command;\n\n    if (scene.debugShowFrustums) {\n      command.debugOverlappingFrustums |= 1 << i;\n    }\n\n    if (command.executeInClosestFrustum) {\n      break;\n    }\n  }\n\n  if (scene.debugShowFrustums) {\n    const cf = view.debugFrustumStatistics.commandsInFrustums;\n    cf[command.debugOverlappingFrustums] = defined(\n      cf[command.debugOverlappingFrustums]\n    )\n      ? cf[command.debugOverlappingFrustums] + 1\n      : 1;\n    ++view.debugFrustumStatistics.totalCommands;\n  }\n\n  scene.updateDerivedCommands(command);\n}\n\nconst scratchCullingVolume = new CullingVolume();\nconst scratchNearFarInterval = new Interval();\n\nView.prototype.createPotentiallyVisibleSet = function (scene) {\n  const frameState = scene.frameState;\n  const camera = frameState.camera;\n  const direction = camera.directionWC;\n  const position = camera.positionWC;\n\n  const computeList = scene._computeCommandList;\n  const overlayList = scene._overlayCommandList;\n  const commandList = frameState.commandList;\n\n  if (scene.debugShowFrustums) {\n    this.debugFrustumStatistics = {\n      totalCommands: 0,\n      commandsInFrustums: {},\n    };\n  }\n\n  const frustumCommandsList = this.frustumCommandsList;\n  const numberOfFrustums = frustumCommandsList.length;\n  const numberOfPasses = Pass.NUMBER_OF_PASSES;\n  for (let n = 0; n < numberOfFrustums; ++n) {\n    for (let p = 0; p < numberOfPasses; ++p) {\n      frustumCommandsList[n].indices[p] = 0;\n    }\n  }\n\n  computeList.length = 0;\n  overlayList.length = 0;\n\n  const commandExtents = this._commandExtents;\n  const commandExtentCapacity = commandExtents.length;\n  let commandExtentCount = 0;\n\n  let near = +Number.MAX_VALUE;\n  let far = -Number.MAX_VALUE;\n\n  const shadowsEnabled = frameState.shadowState.shadowsEnabled;\n  let shadowNear = +Number.MAX_VALUE;\n  let shadowFar = -Number.MAX_VALUE;\n  let shadowClosestObjectSize = Number.MAX_VALUE;\n\n  const occluder =\n    frameState.mode === SceneMode.SCENE3D ? frameState.occluder : undefined;\n  let cullingVolume = frameState.cullingVolume;\n\n  // get user culling volume minus the far plane.\n  const planes = scratchCullingVolume.planes;\n  for (let k = 0; k < 5; ++k) {\n    planes[k] = cullingVolume.planes[k];\n  }\n  cullingVolume = scratchCullingVolume;\n\n  const length = commandList.length;\n  for (let i = 0; i < length; ++i) {\n    const command = commandList[i];\n    const pass = command.pass;\n\n    if (pass === Pass.COMPUTE) {\n      computeList.push(command);\n    } else if (pass === Pass.OVERLAY) {\n      overlayList.push(command);\n    } else {\n      let commandNear;\n      let commandFar;\n\n      const boundingVolume = command.boundingVolume;\n      if (defined(boundingVolume)) {\n        if (!scene.isVisible(command, cullingVolume, occluder)) {\n          continue;\n        }\n\n        const nearFarInterval = boundingVolume.computePlaneDistances(\n          position,\n          direction,\n          scratchNearFarInterval\n        );\n        commandNear = nearFarInterval.start;\n        commandFar = nearFarInterval.stop;\n        near = Math.min(near, commandNear);\n        far = Math.max(far, commandFar);\n\n        // Compute a tight near and far plane for commands that receive shadows. This helps compute\n        // good splits for cascaded shadow maps. Ignore commands that exceed the maximum distance.\n        // When moving the camera low LOD globe tiles begin to load, whose bounding volumes\n        // throw off the near/far fitting for the shadow map. Only update for globe tiles that the\n        // camera isn't inside.\n        if (\n          shadowsEnabled &&\n          command.receiveShadows &&\n          commandNear < ShadowMap.MAXIMUM_DISTANCE &&\n          !(pass === Pass.GLOBE && commandNear < -100.0 && commandFar > 100.0)\n        ) {\n          // Get the smallest bounding volume the camera is near. This is used to place more shadow detail near the object.\n          const size = commandFar - commandNear;\n          if (pass !== Pass.GLOBE && commandNear < 100.0) {\n            shadowClosestObjectSize = Math.min(shadowClosestObjectSize, size);\n          }\n          shadowNear = Math.min(shadowNear, commandNear);\n          shadowFar = Math.max(shadowFar, commandFar);\n        }\n      } else if (command instanceof ClearCommand) {\n        // Clear commands don't need a bounding volume - just add the clear to all frustums.\n        commandNear = camera.frustum.near;\n        commandFar = camera.frustum.far;\n      } else {\n        // If command has no bounding volume we need to use the camera's\n        // worst-case near and far planes to avoid clipping something important.\n        commandNear = camera.frustum.near;\n        commandFar = camera.frustum.far;\n        near = Math.min(near, commandNear);\n        far = Math.max(far, commandFar);\n      }\n\n      let extent = commandExtents[commandExtentCount];\n      if (!defined(extent)) {\n        extent = commandExtents[commandExtentCount] = new CommandExtent();\n      }\n      extent.command = command;\n      extent.near = commandNear;\n      extent.far = commandFar;\n      commandExtentCount++;\n    }\n  }\n\n  if (shadowsEnabled) {\n    shadowNear = Math.min(\n      Math.max(shadowNear, camera.frustum.near),\n      camera.frustum.far\n    );\n    shadowFar = Math.max(Math.min(shadowFar, camera.frustum.far), shadowNear);\n  }\n\n  // Use the computed near and far for shadows\n  if (shadowsEnabled) {\n    frameState.shadowState.nearPlane = shadowNear;\n    frameState.shadowState.farPlane = shadowFar;\n    frameState.shadowState.closestObjectSize = shadowClosestObjectSize;\n  }\n\n  updateFrustums(this, scene, near, far);\n\n  let c;\n  let ce;\n\n  for (c = 0; c < commandExtentCount; c++) {\n    ce = commandExtents[c];\n    insertIntoBin(this, scene, ce.command, ce.near, ce.far);\n  }\n\n  // Dereference old commands\n  if (commandExtentCount < commandExtentCapacity) {\n    for (c = commandExtentCount; c < commandExtentCapacity; c++) {\n      ce = commandExtents[c];\n      if (!defined(ce.command)) {\n        // If the command is undefined, it's assumed that all\n        // subsequent commmands were set to undefined as well,\n        // so no need to loop over them all\n        break;\n      }\n      ce.command = undefined;\n    }\n  }\n\n  const numFrustums = frustumCommandsList.length;\n  const frustumSplits = frameState.frustumSplits;\n  frustumSplits.length = numFrustums + 1;\n  for (let j = 0; j < numFrustums; ++j) {\n    frustumSplits[j] = frustumCommandsList[j].near;\n    if (j === numFrustums - 1) {\n      frustumSplits[j + 1] = frustumCommandsList[j].far;\n    }\n  }\n};\n\nView.prototype.destroy = function () {\n  this.pickFramebuffer = this.pickFramebuffer && this.pickFramebuffer.destroy();\n  this.pickDepthFramebuffer =\n    this.pickDepthFramebuffer && this.pickDepthFramebuffer.destroy();\n  this.sceneFramebuffer =\n    this.sceneFramebuffer && this.sceneFramebuffer.destroy();\n  this.globeDepth = this.globeDepth && this.globeDepth.destroy();\n  this.oit = this.oit && this.oit.destroy();\n  this.translucentTileClassification =\n    this.translucentTileClassification &&\n    this.translucentTileClassification.destroy();\n  this.globeTranslucencyFramebuffer =\n    this.globeTranslucencyFramebuffer &&\n    this.globeTranslucencyFramebuffer.destroy();\n\n  let i;\n  const pickDepths = this.pickDepths;\n  const length = pickDepths.length;\n  for (i = 0; i < length; ++i) {\n    pickDepths[i].destroy();\n  }\n};\nexport default View;\n","import BoundingRectangle from \"../Core/BoundingRectangle.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport destroyObject from \"../Core/destroyObject.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Pass from \"../Renderer/Pass.js\";\nimport RenderState from \"../Renderer/RenderState.js\";\nimport ShaderSource from \"../Renderer/ShaderSource.js\";\nimport ViewportQuadFS from \"../Shaders/ViewportQuadFS.js\";\nimport BlendingState from \"./BlendingState.js\";\nimport Material from \"./Material.js\";\n\n/**\n * A viewport aligned quad.\n *\n * @alias ViewportQuad\n * @constructor\n *\n * @param {BoundingRectangle} [rectangle] The {@link BoundingRectangle} defining the quad's position within the viewport.\n * @param {Material} [material] The {@link Material} defining the surface appearance of the viewport quad.\n *\n * @example\n * const viewportQuad = new Cesium.ViewportQuad(new Cesium.BoundingRectangle(0, 0, 80, 40));\n * viewportQuad.material.uniforms.color = new Cesium.Color(1.0, 0.0, 0.0, 1.0);\n */\nfunction ViewportQuad(rectangle, material) {\n  /**\n   * Determines if the viewport quad primitive will be shown.\n   *\n   * @type {Boolean}\n   * @default true\n   */\n  this.show = true;\n\n  if (!defined(rectangle)) {\n    rectangle = new BoundingRectangle();\n  }\n\n  /**\n   * The BoundingRectangle defining the quad's position within the viewport.\n   *\n   * @type {BoundingRectangle}\n   *\n   * @example\n   * viewportQuad.rectangle = new Cesium.BoundingRectangle(0, 0, 80, 40);\n   */\n  this.rectangle = BoundingRectangle.clone(rectangle);\n\n  if (!defined(material)) {\n    material = Material.fromType(Material.ColorType, {\n      color: new Color(1.0, 1.0, 1.0, 1.0),\n    });\n  }\n\n  /**\n   * The surface appearance of the viewport quad.  This can be one of several built-in {@link Material} objects or a custom material, scripted with\n   * {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}.\n   * <p>\n   * The default material is <code>Material.ColorType</code>.\n   * </p>\n   *\n   * @type Material\n   *\n   * @example\n   * // 1. Change the color of the default material to yellow\n   * viewportQuad.material.uniforms.color = new Cesium.Color(1.0, 1.0, 0.0, 1.0);\n   *\n   * // 2. Change material to horizontal stripes\n   * viewportQuad.material = Cesium.Material.fromType(Cesium.Material.StripeType);\n   *\n   * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n   */\n  this.material = material;\n  this._material = undefined;\n\n  this._overlayCommand = undefined;\n  this._rs = undefined;\n}\n\n/**\n * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n * get the draw commands needed to render this primitive.\n * <p>\n * Do not call this function directly.  This is documented just to\n * list the exceptions that may be propagated when the scene is rendered:\n * </p>\n *\n * @exception {DeveloperError} this.material must be defined.\n * @exception {DeveloperError} this.rectangle must be defined.\n */\nViewportQuad.prototype.update = function (frameState) {\n  if (!this.show) {\n    return;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(this.material)) {\n    throw new DeveloperError(\"this.material must be defined.\");\n  }\n  if (!defined(this.rectangle)) {\n    throw new DeveloperError(\"this.rectangle must be defined.\");\n  }\n  //>>includeEnd('debug');\n\n  const rs = this._rs;\n  if (!defined(rs) || !BoundingRectangle.equals(rs.viewport, this.rectangle)) {\n    this._rs = RenderState.fromCache({\n      blending: BlendingState.ALPHA_BLEND,\n      viewport: this.rectangle,\n    });\n  }\n\n  const pass = frameState.passes;\n  if (pass.render) {\n    const context = frameState.context;\n\n    if (this._material !== this.material || !defined(this._overlayCommand)) {\n      // Recompile shader when material changes\n      this._material = this.material;\n\n      if (defined(this._overlayCommand)) {\n        this._overlayCommand.shaderProgram.destroy();\n      }\n\n      const fs = new ShaderSource({\n        sources: [this._material.shaderSource, ViewportQuadFS],\n      });\n      this._overlayCommand = context.createViewportQuadCommand(fs, {\n        renderState: this._rs,\n        uniformMap: this._material._uniforms,\n        owner: this,\n      });\n      this._overlayCommand.pass = Pass.OVERLAY;\n    }\n\n    this._material.update(context);\n\n    this._overlayCommand.renderState = this._rs;\n    this._overlayCommand.uniformMap = this._material._uniforms;\n    frameState.commandList.push(this._overlayCommand);\n  }\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n * <br /><br />\n * If this object was destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n *\n * @see ViewportQuad#destroy\n */\nViewportQuad.prototype.isDestroyed = function () {\n  return false;\n};\n\n/**\n * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n * <br /><br />\n * Once an object is destroyed, it should not be used; calling any function other than\n * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n * assign the return value (<code>undefined</code>) to the object as done in the example.\n *\n * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n *\n *\n * @example\n * quad = quad && quad.destroy();\n *\n * @see ViewportQuad#isDestroyed\n */\nViewportQuad.prototype.destroy = function () {\n  if (defined(this._overlayCommand)) {\n    this._overlayCommand.shaderProgram =\n      this._overlayCommand.shaderProgram &&\n      this._overlayCommand.shaderProgram.destroy();\n  }\n  return destroyObject(this);\n};\nexport default ViewportQuad;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport GeographicTilingScheme from \"../Core/GeographicTilingScheme.js\";\nimport Resource from \"../Core/Resource.js\";\nimport WebMercatorProjection from \"../Core/WebMercatorProjection.js\";\nimport GetFeatureInfoFormat from \"./GetFeatureInfoFormat.js\";\nimport TimeDynamicImagery from \"./TimeDynamicImagery.js\";\nimport UrlTemplateImageryProvider from \"./UrlTemplateImageryProvider.js\";\n\n/**\n * EPSG codes known to include reverse axis orders, but are not within 4000-5000.\n *\n * @type {number[]}\n */\nconst includesReverseAxis = [\n  3034, // ETRS89-extended / LCC Europe\n  3035, // ETRS89-extended / LAEA Europe\n  3042, // ETRS89 / UTM zone 30N (N-E)\n  3043, // ETRS89 / UTM zone 31N (N-E)\n  3044, // ETRS89 / UTM zone 32N (N-E)\n];\n\n/**\n * EPSG codes known to not include reverse axis orders, and are within 4000-5000.\n *\n * @type {number[]}\n */\nconst excludesReverseAxis = [\n  4471, // Mayotte\n  4559, // French Antilles\n];\n\n/**\n * @typedef {Object} WebMapServiceImageryProvider.ConstructorOptions\n *\n * Initialization options for the WebMapServiceImageryProvider constructor\n *\n * @property {Resource|String} url The URL of the WMS service. The URL supports the same keywords as the {@link UrlTemplateImageryProvider}.\n * @property {String} layers The layers to include, separated by commas.\n * @property {Object} [parameters=WebMapServiceImageryProvider.DefaultParameters] Additional parameters to pass to the WMS server in the GetMap URL.\n * @property {Object} [getFeatureInfoParameters=WebMapServiceImageryProvider.GetFeatureInfoDefaultParameters] Additional parameters to pass to the WMS server in the GetFeatureInfo URL.\n * @property {Boolean} [enablePickFeatures=true] If true, {@link WebMapServiceImageryProvider#pickFeatures} will invoke\n *        the GetFeatureInfo operation on the WMS server and return the features included in the response.  If false,\n *        {@link WebMapServiceImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable features)\n *        without communicating with the server.  Set this property to false if you know your WMS server does not support\n *        GetFeatureInfo or if you don't want this provider's features to be pickable. Note that this can be dynamically\n *        overridden by modifying the WebMapServiceImageryProvider#enablePickFeatures property.\n * @property {GetFeatureInfoFormat[]} [getFeatureInfoFormats=WebMapServiceImageryProvider.DefaultGetFeatureInfoFormats] The formats\n *        in which to try WMS GetFeatureInfo requests.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle of the layer.\n * @property {TilingScheme} [tilingScheme=new GeographicTilingScheme()] The tiling scheme to use to divide the world into tiles.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *        this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither\n *        parameter is specified, the WGS84 ellipsoid is used.\n * @property {Number} [tileWidth=256] The width of each tile in pixels.\n * @property {Number} [tileHeight=256] The height of each tile in pixels.\n * @property {Number} [minimumLevel=0] The minimum level-of-detail supported by the imagery provider.  Take care when\n *        specifying this that the number of tiles at the minimum level is small, such as four or less.  A larger number is\n *        likely to result in rendering problems.\n * @property {Number} [maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n *        If not specified, there is no limit.\n * @property {String} [crs] CRS specification, for use with WMS specification >= 1.3.0.\n * @property {String} [srs] SRS specification, for use with WMS specification 1.1.0 or 1.1.1\n * @property {Credit|String} [credit] A credit for the data source, which is displayed on the canvas.\n * @property {String|String[]} [subdomains='abc'] The subdomains to use for the <code>{s}</code> placeholder in the URL template.\n *                          If this parameter is a single string, each character in the string is a subdomain.  If it is\n *                          an array, each element in the array is a subdomain.\n * @property {Clock} [clock] A Clock instance that is used when determining the value for the time dimension. Required when `times` is specified.\n * @property {TimeIntervalCollection} [times] TimeIntervalCollection with its data property being an object containing time dynamic dimension and their values.\n * @property {Resource|String} [getFeatureInfoUrl] The getFeatureInfo URL of the WMS service. If the property is not defined then we use the property value of url.\n */\n\n/**\n * Provides tiled imagery hosted by a Web Map Service (WMS) server.\n *\n * @alias WebMapServiceImageryProvider\n * @constructor\n *\n * @param {WebMapServiceImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapTileServiceImageryProvider\n * @see UrlTemplateImageryProvider\n *\n * @see {@link http://resources.esri.com/help/9.3/arcgisserver/apis/rest/|ArcGIS Server REST API}\n * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n *\n * @example\n * const provider = new Cesium.WebMapServiceImageryProvider({\n *     url : 'https://sampleserver1.arcgisonline.com/ArcGIS/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/WMSServer',\n *     layers : '0',\n *     proxy: new Cesium.DefaultProxy('/proxy/')\n * });\n *\n * viewer.imageryLayers.addImageryProvider(provider);\n */\nfunction WebMapServiceImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  }\n  if (!defined(options.layers)) {\n    throw new DeveloperError(\"options.layers is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (defined(options.times) && !defined(options.clock)) {\n    throw new DeveloperError(\n      \"options.times was specified, so options.clock is required.\"\n    );\n  }\n\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultNightAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultDayAlpha = undefined;\n\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultBrightness = undefined;\n\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultContrast = undefined;\n\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultHue = undefined;\n\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultSaturation = undefined;\n\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultGamma = undefined;\n\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n  this.defaultMinificationFilter = undefined;\n\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n  this.defaultMagnificationFilter = undefined;\n\n  this._getFeatureInfoUrl = defaultValue(\n    options.getFeatureInfoUrl,\n    options.url\n  );\n\n  const resource = Resource.createIfNeeded(options.url);\n  const pickFeatureResource = Resource.createIfNeeded(this._getFeatureInfoUrl);\n\n  resource.setQueryParameters(\n    WebMapServiceImageryProvider.DefaultParameters,\n    true\n  );\n  pickFeatureResource.setQueryParameters(\n    WebMapServiceImageryProvider.GetFeatureInfoDefaultParameters,\n    true\n  );\n\n  if (defined(options.parameters)) {\n    resource.setQueryParameters(objectToLowercase(options.parameters));\n  }\n\n  if (defined(options.getFeatureInfoParameters)) {\n    pickFeatureResource.setQueryParameters(\n      objectToLowercase(options.getFeatureInfoParameters)\n    );\n  }\n\n  const that = this;\n  this._reload = undefined;\n  if (defined(options.times)) {\n    this._timeDynamicImagery = new TimeDynamicImagery({\n      clock: options.clock,\n      times: options.times,\n      requestImageFunction: function (x, y, level, request, interval) {\n        return requestImage(that, x, y, level, request, interval);\n      },\n      reloadFunction: function () {\n        if (defined(that._reload)) {\n          that._reload();\n        }\n      },\n    });\n  }\n\n  const parameters = {};\n  parameters.layers = options.layers;\n  parameters.bbox =\n    \"{westProjected},{southProjected},{eastProjected},{northProjected}\";\n  parameters.width = \"{width}\";\n  parameters.height = \"{height}\";\n\n  // Use SRS or CRS based on the WMS version.\n  if (parseFloat(resource.queryParameters.version) >= 1.3) {\n    // Use CRS with 1.3.0 and going forward.\n    // For GeographicTilingScheme, use CRS:84 vice EPSG:4326 to specify lon, lat (x, y) ordering for\n    // bbox requests.\n    parameters.crs = defaultValue(\n      options.crs,\n      options.tilingScheme &&\n        options.tilingScheme.projection instanceof WebMercatorProjection\n        ? \"EPSG:3857\"\n        : \"CRS:84\"\n    );\n\n    // The axis order in previous versions of the WMS specifications was to always use easting (x or lon ) and northing (y or\n    // lat). WMS 1.3.0 specifies that, depending on the particular CRS, the x axis may or may not be oriented West-to-East,\n    // and the y axis may or may not be oriented South-to-North. The WMS portrayal operation shall account for axis order.\n    // This affects some of the EPSG codes that were commonly used such as ESPG:4326. The current implementation\n    // makes sure that coordinates passed to the server (as part of the GetMap BBOX parameter) as well as those advertised\n    // in the capabilities document reflect the inverse axe orders for EPSG codes between 4000 and 5000.\n    //  - Taken from Section 9.1.3 of https://download.osgeo.org/mapserver/docs/MapServer-56.pdf\n    const parts = parameters.crs.split(\":\");\n    if (parts[0] === \"EPSG\" && parts.length === 2) {\n      const code = Number(parts[1]);\n      if (\n        (code >= 4000 && code < 5000 && !excludesReverseAxis.includes(code)) ||\n        includesReverseAxis.includes(code)\n      ) {\n        parameters.bbox =\n          \"{southProjected},{westProjected},{northProjected},{eastProjected}\";\n      }\n    }\n  } else {\n    // SRS for WMS 1.1.0 or 1.1.1.\n    parameters.srs = defaultValue(\n      options.srs,\n      options.tilingScheme &&\n        options.tilingScheme.projection instanceof WebMercatorProjection\n        ? \"EPSG:3857\"\n        : \"EPSG:4326\"\n    );\n  }\n\n  resource.setQueryParameters(parameters, true);\n  pickFeatureResource.setQueryParameters(parameters, true);\n\n  const pickFeatureParams = {\n    query_layers: options.layers,\n    info_format: \"{format}\",\n  };\n  // use correct pixel coordinate identifier based on version\n  if (parseFloat(pickFeatureResource.queryParameters.version) >= 1.3) {\n    pickFeatureParams.i = \"{i}\";\n    pickFeatureParams.j = \"{j}\";\n  } else {\n    pickFeatureParams.x = \"{i}\";\n    pickFeatureParams.y = \"{j}\";\n  }\n  pickFeatureResource.setQueryParameters(pickFeatureParams, true);\n\n  this._resource = resource;\n  this._pickFeaturesResource = pickFeatureResource;\n  this._layers = options.layers;\n\n  // Let UrlTemplateImageryProvider do the actual URL building.\n  this._tileProvider = new UrlTemplateImageryProvider({\n    url: resource,\n    pickFeaturesUrl: pickFeatureResource,\n    tilingScheme: defaultValue(\n      options.tilingScheme,\n      new GeographicTilingScheme({ ellipsoid: options.ellipsoid })\n    ),\n    rectangle: options.rectangle,\n    tileWidth: options.tileWidth,\n    tileHeight: options.tileHeight,\n    minimumLevel: options.minimumLevel,\n    maximumLevel: options.maximumLevel,\n    subdomains: options.subdomains,\n    tileDiscardPolicy: options.tileDiscardPolicy,\n    credit: options.credit,\n    getFeatureInfoFormats: defaultValue(\n      options.getFeatureInfoFormats,\n      WebMapServiceImageryProvider.DefaultGetFeatureInfoFormats\n    ),\n    enablePickFeatures: options.enablePickFeatures,\n  });\n}\n\nfunction requestImage(imageryProvider, col, row, level, request, interval) {\n  const dynamicIntervalData = defined(interval) ? interval.data : undefined;\n  const tileProvider = imageryProvider._tileProvider;\n\n  if (defined(dynamicIntervalData)) {\n    // We set the query parameters within the tile provider, because it is managing the query.\n    tileProvider._resource.setQueryParameters(dynamicIntervalData);\n  }\n  return tileProvider.requestImage(col, row, level, request);\n}\n\nfunction pickFeatures(\n  imageryProvider,\n  x,\n  y,\n  level,\n  longitude,\n  latitude,\n  interval\n) {\n  const dynamicIntervalData = defined(interval) ? interval.data : undefined;\n  const tileProvider = imageryProvider._tileProvider;\n\n  if (defined(dynamicIntervalData)) {\n    // We set the query parameters within the tile provider, because it is managing the query.\n    tileProvider._pickFeaturesResource.setQueryParameters(dynamicIntervalData);\n  }\n  return tileProvider.pickFeatures(x, y, level, longitude, latitude);\n}\n\nObject.defineProperties(WebMapServiceImageryProvider.prototype, {\n  /**\n   * Gets the URL of the WMS server.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource._url;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the names of the WMS layers, separated by commas.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  layers: {\n    get: function () {\n      return this._layers;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileProvider.tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileProvider.tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._tileProvider.maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return this._tileProvider.minimumLevel;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tileProvider.tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._tileProvider.rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileProvider.tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._tileProvider.errorEvent;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._tileProvider.ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._tileProvider.readyPromise;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._tileProvider.credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return this._tileProvider.hasAlphaChannel;\n    },\n  },\n\n  /**\n   * Gets or sets a value indicating whether feature picking is enabled.  If true, {@link WebMapServiceImageryProvider#pickFeatures} will\n   * invoke the <code>GetFeatureInfo</code> service on the WMS server and attempt to interpret the features included in the response.  If false,\n   * {@link WebMapServiceImageryProvider#pickFeatures} will immediately return undefined (indicating no pickable\n   * features) without communicating with the server.  Set this property to false if you know your data\n   * source does not support picking features or if you don't want this provider's features to be pickable.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Boolean}\n   * @default true\n   */\n  enablePickFeatures: {\n    get: function () {\n      return this._tileProvider.enablePickFeatures;\n    },\n    set: function (enablePickFeatures) {\n      this._tileProvider.enablePickFeatures = enablePickFeatures;\n    },\n  },\n\n  /**\n   * Gets or sets a clock that is used to get keep the time used for time dynamic parameters.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Clock}\n   */\n  clock: {\n    get: function () {\n      return this._timeDynamicImagery.clock;\n    },\n    set: function (value) {\n      this._timeDynamicImagery.clock = value;\n    },\n  },\n  /**\n   * Gets or sets a time interval collection that is used to get time dynamic parameters. The data of each\n   * TimeInterval is an object containing the keys and values of the properties that are used during\n   * tile requests.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {TimeIntervalCollection}\n   */\n  times: {\n    get: function () {\n      return this._timeDynamicImagery.times;\n    },\n    set: function (value) {\n      this._timeDynamicImagery.times = value;\n    },\n  },\n\n  /**\n   * Gets the getFeatureInfo URL of the WMS server.\n   * @memberof WebMapServiceImageryProvider.prototype\n   * @type {Resource|String}\n   * @readonly\n   */\n  getFeatureInfoUrl: {\n    get: function () {\n      return this._getFeatureInfoUrl;\n    },\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nWebMapServiceImageryProvider.prototype.getTileCredits = function (x, y, level) {\n  return this._tileProvider.getTileCredits(x, y, level);\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link WebMapServiceImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\nWebMapServiceImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request\n) {\n  let result;\n  const timeDynamicImagery = this._timeDynamicImagery;\n  let currentInterval;\n\n  // Try and load from cache\n  if (defined(timeDynamicImagery)) {\n    currentInterval = timeDynamicImagery.currentInterval;\n    result = timeDynamicImagery.getFromCache(x, y, level, request);\n  }\n\n  // Couldn't load from cache\n  if (!defined(result)) {\n    result = requestImage(this, x, y, level, request, currentInterval);\n  }\n\n  // If we are approaching an interval, preload this tile in the next interval\n  if (defined(result) && defined(timeDynamicImagery)) {\n    timeDynamicImagery.checkApproachingInterval(x, y, level, request);\n  }\n\n  return result;\n};\n\n/**\n * Asynchronously determines what features, if any, are located at a given longitude and latitude within\n * a tile.  This function should not be called before {@link ImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous\n *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}\n *                   instances.  The array may be empty if no features are found at the given location.\n *\n * @exception {DeveloperError} <code>pickFeatures</code> must not be called before the imagery provider is ready.\n */\nWebMapServiceImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  const timeDynamicImagery = this._timeDynamicImagery;\n  const currentInterval = defined(timeDynamicImagery)\n    ? timeDynamicImagery.currentInterval\n    : undefined;\n\n  return pickFeatures(this, x, y, level, longitude, latitude, currentInterval);\n};\n\n/**\n * The default parameters to include in the WMS URL to obtain images.  The values are as follows:\n *    service=WMS\n *    version=1.1.1\n *    request=GetMap\n *    styles=\n *    format=image/jpeg\n *\n * @constant\n * @type {Object}\n */\nWebMapServiceImageryProvider.DefaultParameters = Object.freeze({\n  service: \"WMS\",\n  version: \"1.1.1\",\n  request: \"GetMap\",\n  styles: \"\",\n  format: \"image/jpeg\",\n});\n\n/**\n * The default parameters to include in the WMS URL to get feature information.  The values are as follows:\n *     service=WMS\n *     version=1.1.1\n *     request=GetFeatureInfo\n *\n * @constant\n * @type {Object}\n */\nWebMapServiceImageryProvider.GetFeatureInfoDefaultParameters = Object.freeze({\n  service: \"WMS\",\n  version: \"1.1.1\",\n  request: \"GetFeatureInfo\",\n});\n\nWebMapServiceImageryProvider.DefaultGetFeatureInfoFormats = Object.freeze([\n  Object.freeze(new GetFeatureInfoFormat(\"json\", \"application/json\")),\n  Object.freeze(new GetFeatureInfoFormat(\"xml\", \"text/xml\")),\n  Object.freeze(new GetFeatureInfoFormat(\"text\", \"text/html\")),\n]);\n\nfunction objectToLowercase(obj) {\n  const result = {};\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      result[key.toLowerCase()] = obj[key];\n    }\n  }\n  return result;\n}\nexport default WebMapServiceImageryProvider;\n","import combine from \"../Core/combine.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport Resource from \"../Core/Resource.js\";\nimport WebMercatorTilingScheme from \"../Core/WebMercatorTilingScheme.js\";\nimport ImageryProvider from \"./ImageryProvider.js\";\nimport TimeDynamicImagery from \"./TimeDynamicImagery.js\";\n\nconst defaultParameters = Object.freeze({\n  service: \"WMTS\",\n  version: \"1.0.0\",\n  request: \"GetTile\",\n});\n\n/**\n * @typedef {Object} WebMapTileServiceImageryProvider.ConstructorOptions\n *\n * Initialization options for the WebMapTileServiceImageryProvider constructor\n *\n * @property {Resource|String} url The base URL for the WMTS GetTile operation (for KVP-encoded requests) or the tile-URL template (for RESTful requests). The tile-URL template should contain the following variables: &#123;style&#125;, &#123;TileMatrixSet&#125;, &#123;TileMatrix&#125;, &#123;TileRow&#125;, &#123;TileCol&#125;. The first two are optional if actual values are hardcoded or not required by the server. The &#123;s&#125; keyword may be used to specify subdomains.\n * @property {String} [format='image/jpeg'] The MIME type for images to retrieve from the server.\n * @property {String} layer The layer name for WMTS requests.\n * @property {String} style The style name for WMTS requests.\n * @property {String} tileMatrixSetID The identifier of the TileMatrixSet to use for WMTS requests.\n * @property {Array} [tileMatrixLabels] A list of identifiers in the TileMatrix to use for WMTS requests, one per TileMatrix level.\n * @property {Clock} [clock] A Clock instance that is used when determining the value for the time dimension. Required when `times` is specified.\n * @property {TimeIntervalCollection} [times] TimeIntervalCollection with its <code>data</code> property being an object containing time dynamic dimension and their values.\n * @property {Object} [dimensions] A object containing static dimensions and their values.\n * @property {Number} [tileWidth=256] The tile width in pixels.\n * @property {Number} [tileHeight=256] The tile height in pixels.\n * @property {TilingScheme} [tilingScheme] The tiling scheme corresponding to the organization of the tiles in the TileMatrixSet.\n * @property {Rectangle} [rectangle=Rectangle.MAX_VALUE] The rectangle covered by the layer.\n * @property {Number} [minimumLevel=0] The minimum level-of-detail supported by the imagery provider.\n * @property {Number} [maximumLevel] The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.\n * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @property {Credit|String} [credit] A credit for the data source, which is displayed on the canvas.\n * @property {String|String[]} [subdomains='abc'] The subdomains to use for the <code>{s}</code> placeholder in the URL template.\n *                          If this parameter is a single string, each character in the string is a subdomain.  If it is\n *                          an array, each element in the array is a subdomain.\n */\n\n/**\n * Provides tiled imagery served by {@link http://www.opengeospatial.org/standards/wmts|WMTS 1.0.0} compliant servers.\n * This provider supports HTTP KVP-encoded and RESTful GetTile requests, but does not yet support the SOAP encoding.\n *\n * @alias WebMapTileServiceImageryProvider\n * @constructor\n *\n * @param {WebMapTileServiceImageryProvider.ConstructorOptions} options Object describing initialization options\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Web%20Map%20Tile%20Service%20with%20Time.html|Cesium Sandcastle Web Map Tile Service with Time Demo}\n *\n * @example\n * // Example 1. USGS shaded relief tiles (KVP)\n * const shadedRelief1 = new Cesium.WebMapTileServiceImageryProvider({\n *     url : 'http://basemap.nationalmap.gov/arcgis/rest/services/USGSShadedReliefOnly/MapServer/WMTS',\n *     layer : 'USGSShadedReliefOnly',\n *     style : 'default',\n *     format : 'image/jpeg',\n *     tileMatrixSetID : 'default028mm',\n *     // tileMatrixLabels : ['default028mm:0', 'default028mm:1', 'default028mm:2' ...],\n *     maximumLevel: 19,\n *     credit : new Cesium.Credit('U. S. Geological Survey')\n * });\n * viewer.imageryLayers.addImageryProvider(shadedRelief1);\n *\n * @example\n * // Example 2. USGS shaded relief tiles (RESTful)\n * const shadedRelief2 = new Cesium.WebMapTileServiceImageryProvider({\n *     url : 'http://basemap.nationalmap.gov/arcgis/rest/services/USGSShadedReliefOnly/MapServer/WMTS/tile/1.0.0/USGSShadedReliefOnly/{Style}/{TileMatrixSet}/{TileMatrix}/{TileRow}/{TileCol}.jpg',\n *     layer : 'USGSShadedReliefOnly',\n *     style : 'default',\n *     format : 'image/jpeg',\n *     tileMatrixSetID : 'default028mm',\n *     maximumLevel: 19,\n *     credit : new Cesium.Credit('U. S. Geological Survey')\n * });\n * viewer.imageryLayers.addImageryProvider(shadedRelief2);\n *\n * @example\n * // Example 3. NASA time dynamic weather data (RESTful)\n * const times = Cesium.TimeIntervalCollection.fromIso8601({\n *     iso8601: '2015-07-30/2017-06-16/P1D',\n *     dataCallback: function dataCallback(interval, index) {\n *         return {\n *             Time: Cesium.JulianDate.toIso8601(interval.start)\n *         };\n *     }\n * });\n * const weather = new Cesium.WebMapTileServiceImageryProvider({\n *     url : 'https://gibs.earthdata.nasa.gov/wmts/epsg4326/best/AMSR2_Snow_Water_Equivalent/default/{Time}/{TileMatrixSet}/{TileMatrix}/{TileRow}/{TileCol}.png',\n *     layer : 'AMSR2_Snow_Water_Equivalent',\n *     style : 'default',\n *     tileMatrixSetID : '2km',\n *     maximumLevel : 5,\n *     format : 'image/png',\n *     clock: clock,\n *     times: times,\n *     credit : new Cesium.Credit('NASA Global Imagery Browse Services for EOSDIS')\n * });\n * viewer.imageryLayers.addImageryProvider(weather);\n *\n * @see ArcGisMapServerImageryProvider\n * @see BingMapsImageryProvider\n * @see GoogleEarthEnterpriseMapsProvider\n * @see OpenStreetMapImageryProvider\n * @see SingleTileImageryProvider\n * @see TileMapServiceImageryProvider\n * @see WebMapServiceImageryProvider\n * @see UrlTemplateImageryProvider\n */\nfunction WebMapTileServiceImageryProvider(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  }\n  if (!defined(options.layer)) {\n    throw new DeveloperError(\"options.layer is required.\");\n  }\n  if (!defined(options.style)) {\n    throw new DeveloperError(\"options.style is required.\");\n  }\n  if (!defined(options.tileMatrixSetID)) {\n    throw new DeveloperError(\"options.tileMatrixSetID is required.\");\n  }\n  if (defined(options.times) && !defined(options.clock)) {\n    throw new DeveloperError(\n      \"options.times was specified, so options.clock is required.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  /**\n   * The default alpha blending value of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultNightAlpha = undefined;\n\n  /**\n   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and\n   * 1.0 representing fully opaque.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultDayAlpha = undefined;\n\n  /**\n   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0\n   * makes the imagery darker while greater than 1.0 makes it brighter.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultBrightness = undefined;\n\n  /**\n   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces\n   * the contrast while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultContrast = undefined;\n\n  /**\n   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultHue = undefined;\n\n  /**\n   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the\n   * saturation while greater than 1.0 increases it.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultSaturation = undefined;\n\n  /**\n   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.\n   *\n   * @type {Number|undefined}\n   * @default undefined\n   */\n  this.defaultGamma = undefined;\n\n  /**\n   * The default texture minification filter to apply to this provider.\n   *\n   * @type {TextureMinificationFilter}\n   * @default undefined\n   */\n  this.defaultMinificationFilter = undefined;\n\n  /**\n   * The default texture magnification filter to apply to this provider.\n   *\n   * @type {TextureMagnificationFilter}\n   * @default undefined\n   */\n  this.defaultMagnificationFilter = undefined;\n\n  const resource = Resource.createIfNeeded(options.url);\n\n  const style = options.style;\n  const tileMatrixSetID = options.tileMatrixSetID;\n  const url = resource.url;\n\n  const bracketMatch = url.match(/{/g);\n  if (\n    !defined(bracketMatch) ||\n    (bracketMatch.length === 1 && /{s}/.test(url))\n  ) {\n    resource.setQueryParameters(defaultParameters);\n    this._useKvp = true;\n  } else {\n    const templateValues = {\n      style: style,\n      Style: style,\n      TileMatrixSet: tileMatrixSetID,\n    };\n\n    resource.setTemplateValues(templateValues);\n    this._useKvp = false;\n  }\n\n  this._resource = resource;\n  this._layer = options.layer;\n  this._style = style;\n  this._tileMatrixSetID = tileMatrixSetID;\n  this._tileMatrixLabels = options.tileMatrixLabels;\n  this._format = defaultValue(options.format, \"image/jpeg\");\n  this._tileDiscardPolicy = options.tileDiscardPolicy;\n\n  this._tilingScheme = defined(options.tilingScheme)\n    ? options.tilingScheme\n    : new WebMercatorTilingScheme({ ellipsoid: options.ellipsoid });\n  this._tileWidth = defaultValue(options.tileWidth, 256);\n  this._tileHeight = defaultValue(options.tileHeight, 256);\n\n  this._minimumLevel = defaultValue(options.minimumLevel, 0);\n  this._maximumLevel = options.maximumLevel;\n\n  this._rectangle = defaultValue(\n    options.rectangle,\n    this._tilingScheme.rectangle\n  );\n  this._dimensions = options.dimensions;\n\n  const that = this;\n  this._reload = undefined;\n  if (defined(options.times)) {\n    this._timeDynamicImagery = new TimeDynamicImagery({\n      clock: options.clock,\n      times: options.times,\n      requestImageFunction: function (x, y, level, request, interval) {\n        return requestImage(that, x, y, level, request, interval);\n      },\n      reloadFunction: function () {\n        if (defined(that._reload)) {\n          that._reload();\n        }\n      },\n    });\n  }\n\n  this._readyPromise = Promise.resolve(true);\n\n  // Check the number of tiles at the minimum level.  If it's more than four,\n  // throw an exception, because starting at the higher minimum\n  // level will cause too many tiles to be downloaded and rendered.\n  const swTile = this._tilingScheme.positionToTileXY(\n    Rectangle.southwest(this._rectangle),\n    this._minimumLevel\n  );\n  const neTile = this._tilingScheme.positionToTileXY(\n    Rectangle.northeast(this._rectangle),\n    this._minimumLevel\n  );\n  const tileCount =\n    (Math.abs(neTile.x - swTile.x) + 1) * (Math.abs(neTile.y - swTile.y) + 1);\n  //>>includeStart('debug', pragmas.debug);\n  if (tileCount > 4) {\n    throw new DeveloperError(\n      `The imagery provider's rectangle and minimumLevel indicate that there are ${tileCount} tiles at the minimum level. Imagery providers with more than four tiles at the minimum level are not supported.`\n    );\n  }\n  //>>includeEnd('debug');\n\n  this._errorEvent = new Event();\n\n  const credit = options.credit;\n  this._credit = typeof credit === \"string\" ? new Credit(credit) : credit;\n\n  this._subdomains = options.subdomains;\n  if (Array.isArray(this._subdomains)) {\n    this._subdomains = this._subdomains.slice();\n  } else if (defined(this._subdomains) && this._subdomains.length > 0) {\n    this._subdomains = this._subdomains.split(\"\");\n  } else {\n    this._subdomains = [\"a\", \"b\", \"c\"];\n  }\n}\n\nfunction requestImage(imageryProvider, col, row, level, request, interval) {\n  const labels = imageryProvider._tileMatrixLabels;\n  const tileMatrix = defined(labels) ? labels[level] : level.toString();\n  const subdomains = imageryProvider._subdomains;\n  const staticDimensions = imageryProvider._dimensions;\n  const dynamicIntervalData = defined(interval) ? interval.data : undefined;\n\n  let resource;\n  let templateValues;\n  if (!imageryProvider._useKvp) {\n    templateValues = {\n      TileMatrix: tileMatrix,\n      TileRow: row.toString(),\n      TileCol: col.toString(),\n      s: subdomains[(col + row + level) % subdomains.length],\n    };\n\n    resource = imageryProvider._resource.getDerivedResource({\n      request: request,\n    });\n    resource.setTemplateValues(templateValues);\n\n    if (defined(staticDimensions)) {\n      resource.setTemplateValues(staticDimensions);\n    }\n\n    if (defined(dynamicIntervalData)) {\n      resource.setTemplateValues(dynamicIntervalData);\n    }\n  } else {\n    // build KVP request\n    let query = {};\n    query.tilematrix = tileMatrix;\n    query.layer = imageryProvider._layer;\n    query.style = imageryProvider._style;\n    query.tilerow = row;\n    query.tilecol = col;\n    query.tilematrixset = imageryProvider._tileMatrixSetID;\n    query.format = imageryProvider._format;\n\n    if (defined(staticDimensions)) {\n      query = combine(query, staticDimensions);\n    }\n\n    if (defined(dynamicIntervalData)) {\n      query = combine(query, dynamicIntervalData);\n    }\n\n    templateValues = {\n      s: subdomains[(col + row + level) % subdomains.length],\n    };\n\n    resource = imageryProvider._resource.getDerivedResource({\n      queryParameters: query,\n      request: request,\n    });\n    resource.setTemplateValues(templateValues);\n  }\n\n  return ImageryProvider.loadImage(imageryProvider, resource);\n}\n\nObject.defineProperties(WebMapTileServiceImageryProvider.prototype, {\n  /**\n   * Gets the URL of the service hosting the imagery.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return this._resource.url;\n    },\n  },\n\n  /**\n   * Gets the proxy used by this provider.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Proxy}\n   * @readonly\n   */\n  proxy: {\n    get: function () {\n      return this._resource.proxy;\n    },\n  },\n\n  /**\n   * Gets the width of each tile, in pixels. This function should\n   * not be called before {@link WebMapTileServiceImageryProvider#ready} returns true.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileWidth: {\n    get: function () {\n      return this._tileWidth;\n    },\n  },\n\n  /**\n   * Gets the height of each tile, in pixels.  This function should\n   * not be called before {@link WebMapTileServiceImageryProvider#ready} returns true.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  tileHeight: {\n    get: function () {\n      return this._tileHeight;\n    },\n  },\n\n  /**\n   * Gets the maximum level-of-detail that can be requested.  This function should\n   * not be called before {@link WebMapTileServiceImageryProvider#ready} returns true.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Number|undefined}\n   * @readonly\n   */\n  maximumLevel: {\n    get: function () {\n      return this._maximumLevel;\n    },\n  },\n\n  /**\n   * Gets the minimum level-of-detail that can be requested.  This function should\n   * not be called before {@link WebMapTileServiceImageryProvider#ready} returns true.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Number}\n   * @readonly\n   */\n  minimumLevel: {\n    get: function () {\n      return this._minimumLevel;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link WebMapTileServiceImageryProvider#ready} returns true.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {TilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should\n   * not be called before {@link WebMapTileServiceImageryProvider#ready} returns true.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Rectangle}\n   * @readonly\n   */\n  rectangle: {\n    get: function () {\n      return this._rectangle;\n    },\n  },\n\n  /**\n   * Gets the tile discard policy.  If not undefined, the discard policy is responsible\n   * for filtering out \"missing\" tiles via its shouldDiscardImage function.  If this function\n   * returns undefined, no tiles are filtered.  This function should\n   * not be called before {@link WebMapTileServiceImageryProvider#ready} returns true.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {TileDiscardPolicy}\n   * @readonly\n   */\n  tileDiscardPolicy: {\n    get: function () {\n      return this._tileDiscardPolicy;\n    },\n  },\n\n  /**\n   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the mime type of images returned by this imagery provider.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {String}\n   * @readonly\n   */\n  format: {\n    get: function () {\n      return this._format;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    value: true,\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit\n   * the source of the imagery.  This function should not be called before {@link WebMapTileServiceImageryProvider#ready} returns true.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the images provided by this imagery provider\n   * include an alpha channel.  If this property is false, an alpha channel, if present, will\n   * be ignored.  If this property is true, any images without an alpha channel will be treated\n   * as if their alpha is 1.0 everywhere.  When this property is false, memory usage\n   * and texture upload time are reduced.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasAlphaChannel: {\n    get: function () {\n      return true;\n    },\n  },\n  /**\n   * Gets or sets a clock that is used to get keep the time used for time dynamic parameters.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Clock}\n   */\n  clock: {\n    get: function () {\n      return this._timeDynamicImagery.clock;\n    },\n    set: function (value) {\n      this._timeDynamicImagery.clock = value;\n    },\n  },\n  /**\n   * Gets or sets a time interval collection that is used to get time dynamic parameters. The data of each\n   * TimeInterval is an object containing the keys and values of the properties that are used during\n   * tile requests.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {TimeIntervalCollection}\n   */\n  times: {\n    get: function () {\n      return this._timeDynamicImagery.times;\n    },\n    set: function (value) {\n      this._timeDynamicImagery.times = value;\n    },\n  },\n  /**\n   * Gets or sets an object that contains static dimensions and their values.\n   * @memberof WebMapTileServiceImageryProvider.prototype\n   * @type {Object}\n   */\n  dimensions: {\n    get: function () {\n      return this._dimensions;\n    },\n    set: function (value) {\n      if (this._dimensions !== value) {\n        this._dimensions = value;\n        if (defined(this._reload)) {\n          this._reload();\n        }\n      }\n    },\n  },\n});\n\n/**\n * Gets the credits to be displayed when a given tile is displayed.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level;\n * @returns {Credit[]} The credits to be displayed when the tile is displayed.\n *\n * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.\n */\nWebMapTileServiceImageryProvider.prototype.getTileCredits = function (\n  x,\n  y,\n  level\n) {\n  return undefined;\n};\n\n/**\n * Requests the image for a given tile.  This function should\n * not be called before {@link WebMapTileServiceImageryProvider#ready} returns true.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<ImageryTypes>|undefined} A promise for the image that will resolve when the image is available, or\n *          undefined if there are too many active requests to the server, and the request should be retried later.\n *\n * @exception {DeveloperError} <code>requestImage</code> must not be called before the imagery provider is ready.\n */\nWebMapTileServiceImageryProvider.prototype.requestImage = function (\n  x,\n  y,\n  level,\n  request\n) {\n  let result;\n  const timeDynamicImagery = this._timeDynamicImagery;\n  let currentInterval;\n\n  // Try and load from cache\n  if (defined(timeDynamicImagery)) {\n    currentInterval = timeDynamicImagery.currentInterval;\n    result = timeDynamicImagery.getFromCache(x, y, level, request);\n  }\n\n  // Couldn't load from cache\n  if (!defined(result)) {\n    result = requestImage(this, x, y, level, request, currentInterval);\n  }\n\n  // If we are approaching an interval, preload this tile in the next interval\n  if (defined(result) && defined(timeDynamicImagery)) {\n    timeDynamicImagery.checkApproachingInterval(x, y, level, request);\n  }\n\n  return result;\n};\n\n/**\n * Picking features is not currently supported by this imagery provider, so this function simply returns\n * undefined.\n *\n * @param {Number} x The tile X coordinate.\n * @param {Number} y The tile Y coordinate.\n * @param {Number} level The tile level.\n * @param {Number} longitude The longitude at which to pick features.\n * @param {Number} latitude  The latitude at which to pick features.\n * @return {undefined} Undefined since picking is not supported.\n */\nWebMapTileServiceImageryProvider.prototype.pickFeatures = function (\n  x,\n  y,\n  level,\n  longitude,\n  latitude\n) {\n  return undefined;\n};\nexport default WebMapTileServiceImageryProvider;\n","import defined from \"../Core/defined.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport sampleTerrainMostDetailed from \"../Core/sampleTerrainMostDetailed.js\";\nimport SceneMode from \"./SceneMode.js\";\n\n/**\n * Computes the final camera location to view a rectangle adjusted for the current terrain.\n * If the terrain does not support availability, the height above the ellipsoid is used.\n *\n * @param {Rectangle} rectangle The rectangle being zoomed to.\n * @param {Scene} scene The scene being used.\n *\n * @returns {Cartographic} The optimal location to place the camera so that the entire rectangle is in view.\n *\n * @private\n */\nfunction computeFlyToLocationForRectangle(rectangle, scene) {\n  const terrainProvider = scene.terrainProvider;\n  const mapProjection = scene.mapProjection;\n  const ellipsoid = mapProjection.ellipsoid;\n\n  let positionWithoutTerrain;\n  const tmp = scene.camera.getRectangleCameraCoordinates(rectangle);\n  if (scene.mode === SceneMode.SCENE3D) {\n    positionWithoutTerrain = ellipsoid.cartesianToCartographic(tmp);\n  } else {\n    positionWithoutTerrain = mapProjection.unproject(tmp);\n  }\n\n  if (!defined(terrainProvider)) {\n    return Promise.resolve(positionWithoutTerrain);\n  }\n\n  return terrainProvider.readyPromise.then(function () {\n    const availability = terrainProvider.availability;\n\n    if (!defined(availability) || scene.mode === SceneMode.SCENE2D) {\n      return positionWithoutTerrain;\n    }\n\n    const cartographics = [\n      Rectangle.center(rectangle),\n      Rectangle.southeast(rectangle),\n      Rectangle.southwest(rectangle),\n      Rectangle.northeast(rectangle),\n      Rectangle.northwest(rectangle),\n    ];\n\n    return computeFlyToLocationForRectangle\n      ._sampleTerrainMostDetailed(terrainProvider, cartographics)\n      .then(function (positionsOnTerrain) {\n        const maxHeight = positionsOnTerrain.reduce(function (\n          currentMax,\n          item\n        ) {\n          return Math.max(item.height, currentMax);\n        },\n        -Number.MAX_VALUE);\n\n        const finalPosition = positionWithoutTerrain;\n        finalPosition.height += maxHeight;\n        return finalPosition;\n      });\n  });\n}\n\n//Exposed for testing.\ncomputeFlyToLocationForRectangle._sampleTerrainMostDetailed = sampleTerrainMostDetailed;\nexport default computeFlyToLocationForRectangle;\n","/**\n * Creates a {@link createBillboardPointCallback.CanvasFunction} that will create a canvas with a point.\n *\n * @param {Number} centerAlpha The alpha of the center of the point. The value must be in the range [0.0, 1.0].\n * @param {String} cssColor The CSS color string.\n * @param {String} cssOutlineColor The CSS color of the point outline.\n * @param {Number} cssOutlineWidth The width of the outline in pixels.\n * @param {Number} pixelSize The size of the point in pixels.\n * @return {createBillboardPointCallback.CanvasFunction} The function that will return a canvas with the point drawn on it.\n *\n * @private\n */\nfunction createBillboardPointCallback(\n  centerAlpha,\n  cssColor,\n  cssOutlineColor,\n  cssOutlineWidth,\n  pixelSize\n) {\n  return function () {\n    const canvas = document.createElement(\"canvas\");\n\n    const length = pixelSize + 2 * cssOutlineWidth;\n    canvas.height = canvas.width = length;\n\n    const context2D = canvas.getContext(\"2d\");\n    context2D.clearRect(0, 0, length, length);\n\n    if (cssOutlineWidth !== 0) {\n      context2D.beginPath();\n      context2D.arc(length / 2, length / 2, length / 2, 0, 2 * Math.PI, true);\n      context2D.closePath();\n      context2D.fillStyle = cssOutlineColor;\n      context2D.fill();\n      // Punch a hole in the center if needed.\n      if (centerAlpha < 1.0) {\n        context2D.save();\n        context2D.globalCompositeOperation = \"destination-out\";\n        context2D.beginPath();\n        context2D.arc(\n          length / 2,\n          length / 2,\n          pixelSize / 2,\n          0,\n          2 * Math.PI,\n          true\n        );\n        context2D.closePath();\n        context2D.fillStyle = \"black\";\n        context2D.fill();\n        context2D.restore();\n      }\n    }\n\n    context2D.beginPath();\n    context2D.arc(length / 2, length / 2, pixelSize / 2, 0, 2 * Math.PI, true);\n    context2D.closePath();\n    context2D.fillStyle = cssColor;\n    context2D.fill();\n\n    return canvas;\n  };\n}\n\n/**\n * A function that returns a canvas containing an image of a point.\n * @callback createBillboardPointCallback.CanvasFunction\n * @returns {HTMLCanvasElement} The result of the calculation.\n */\nexport default createBillboardPointCallback;\n","import Cartesian4 from \"../Core/Cartesian4.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Check from \"../Core/Check.js\";\nimport Color from \"../Core/Color.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport mergeSort from \"../Core/mergeSort.js\";\nimport PixelFormat from \"../Core/PixelFormat.js\";\nimport PixelDatatype from \"../Renderer/PixelDatatype.js\";\nimport Sampler from \"../Renderer/Sampler.js\";\nimport Texture from \"../Renderer/Texture.js\";\nimport TextureMagnificationFilter from \"../Renderer/TextureMagnificationFilter.js\";\nimport TextureMinificationFilter from \"../Renderer/TextureMinificationFilter.js\";\nimport TextureWrap from \"../Renderer/TextureWrap.js\";\nimport Material from \"./Material.js\";\n\nconst scratchColor = new Color();\nconst scratchColorAbove = new Color();\nconst scratchColorBelow = new Color();\nconst scratchColorBlend = new Color();\nconst scratchPackedFloat = new Cartesian4();\nconst scratchColorBytes = new Uint8Array(4);\n\nfunction lerpEntryColor(height, entryBefore, entryAfter, result) {\n  const lerpFactor =\n    entryBefore.height === entryAfter.height\n      ? 0.0\n      : (height - entryBefore.height) /\n        (entryAfter.height - entryBefore.height);\n  return Color.lerp(entryBefore.color, entryAfter.color, lerpFactor, result);\n}\n\nfunction createNewEntry(height, color) {\n  return {\n    height: height,\n    color: Color.clone(color),\n  };\n}\n\nfunction removeDuplicates(entries) {\n  // This function expects entries to be sorted from lowest to highest.\n\n  // Remove entries that have the same height as before and after.\n  entries = entries.filter(function (entry, index, array) {\n    const hasPrev = index > 0;\n    const hasNext = index < array.length - 1;\n\n    const sameHeightAsPrev = hasPrev\n      ? entry.height === array[index - 1].height\n      : true;\n    const sameHeightAsNext = hasNext\n      ? entry.height === array[index + 1].height\n      : true;\n\n    const keep = !sameHeightAsPrev || !sameHeightAsNext;\n    return keep;\n  });\n\n  // Remove entries that have the same color as before and after.\n  entries = entries.filter(function (entry, index, array) {\n    const hasPrev = index > 0;\n    const hasNext = index < array.length - 1;\n\n    const sameColorAsPrev = hasPrev\n      ? Color.equals(entry.color, array[index - 1].color)\n      : false;\n    const sameColorAsNext = hasNext\n      ? Color.equals(entry.color, array[index + 1].color)\n      : false;\n\n    const keep = !sameColorAsPrev || !sameColorAsNext;\n    return keep;\n  });\n\n  // Also remove entries that have the same height AND color as the entry before.\n  entries = entries.filter(function (entry, index, array) {\n    const hasPrev = index > 0;\n\n    const sameColorAsPrev = hasPrev\n      ? Color.equals(entry.color, array[index - 1].color)\n      : false;\n\n    const sameHeightAsPrev = hasPrev\n      ? entry.height === array[index - 1].height\n      : true;\n\n    const keep = !sameColorAsPrev || !sameHeightAsPrev;\n    return keep;\n  });\n\n  return entries;\n}\n\nfunction preprocess(layers) {\n  let i, j;\n\n  const layeredEntries = [];\n\n  const layersLength = layers.length;\n  for (i = 0; i < layersLength; i++) {\n    const layer = layers[i];\n    const entriesOrig = layer.entries;\n    const entriesLength = entriesOrig.length;\n\n    //>>includeStart('debug', pragmas.debug);\n    if (!Array.isArray(entriesOrig) || entriesLength === 0) {\n      throw new DeveloperError(\"entries must be an array with size > 0.\");\n    }\n    //>>includeEnd('debug');\n\n    let entries = [];\n\n    for (j = 0; j < entriesLength; j++) {\n      const entryOrig = entriesOrig[j];\n\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(entryOrig.height)) {\n        throw new DeveloperError(\"entry requires a height.\");\n      }\n      if (!defined(entryOrig.color)) {\n        throw new DeveloperError(\"entry requires a color.\");\n      }\n      //>>includeEnd('debug');\n\n      const height = CesiumMath.clamp(\n        entryOrig.height,\n        createElevationBandMaterial._minimumHeight,\n        createElevationBandMaterial._maximumHeight\n      );\n\n      // premultiplied alpha\n      const color = Color.clone(entryOrig.color, scratchColor);\n      color.red *= color.alpha;\n      color.green *= color.alpha;\n      color.blue *= color.alpha;\n\n      entries.push(createNewEntry(height, color));\n    }\n\n    let sortedAscending = true;\n    let sortedDescending = true;\n    for (j = 0; j < entriesLength - 1; j++) {\n      const currEntry = entries[j + 0];\n      const nextEntry = entries[j + 1];\n\n      sortedAscending = sortedAscending && currEntry.height <= nextEntry.height;\n      sortedDescending =\n        sortedDescending && currEntry.height >= nextEntry.height;\n    }\n\n    // When the array is fully descending, reverse it.\n    if (sortedDescending) {\n      entries = entries.reverse();\n    } else if (!sortedAscending) {\n      // Stable sort from lowest to greatest height.\n      mergeSort(entries, function (a, b) {\n        return CesiumMath.sign(a.height - b.height);\n      });\n    }\n\n    let extendDownwards = defaultValue(layer.extendDownwards, false);\n    let extendUpwards = defaultValue(layer.extendUpwards, false);\n\n    // Interpret a single entry to extend all the way up and down.\n    if (entries.length === 1 && !extendDownwards && !extendUpwards) {\n      extendDownwards = true;\n      extendUpwards = true;\n    }\n\n    if (extendDownwards) {\n      entries.splice(\n        0,\n        0,\n        createNewEntry(\n          createElevationBandMaterial._minimumHeight,\n          entries[0].color\n        )\n      );\n    }\n    if (extendUpwards) {\n      entries.splice(\n        entries.length,\n        0,\n        createNewEntry(\n          createElevationBandMaterial._maximumHeight,\n          entries[entries.length - 1].color\n        )\n      );\n    }\n\n    entries = removeDuplicates(entries);\n\n    layeredEntries.push(entries);\n  }\n\n  return layeredEntries;\n}\n\nfunction createLayeredEntries(layers) {\n  // clean up the input data and check for errors\n  const layeredEntries = preprocess(layers);\n\n  let entriesAccumNext = [];\n  let entriesAccumCurr = [];\n  let i;\n\n  function addEntry(height, color) {\n    entriesAccumNext.push(createNewEntry(height, color));\n  }\n  function addBlendEntry(height, a, b) {\n    let result = Color.multiplyByScalar(b, 1.0 - a.alpha, scratchColorBlend);\n    result = Color.add(result, a, result);\n    addEntry(height, result);\n  }\n\n  // alpha blend new layers on top of old ones\n  const layerLength = layeredEntries.length;\n  for (i = 0; i < layerLength; i++) {\n    const entries = layeredEntries[i];\n    let idx = 0;\n    let accumIdx = 0;\n\n    // swap the arrays\n    entriesAccumCurr = entriesAccumNext;\n    entriesAccumNext = [];\n\n    const entriesLength = entries.length;\n    const entriesAccumLength = entriesAccumCurr.length;\n    while (idx < entriesLength || accumIdx < entriesAccumLength) {\n      const entry = idx < entriesLength ? entries[idx] : undefined;\n      const prevEntry = idx > 0 ? entries[idx - 1] : undefined;\n      const nextEntry = idx < entriesLength - 1 ? entries[idx + 1] : undefined;\n\n      const entryAccum =\n        accumIdx < entriesAccumLength ? entriesAccumCurr[accumIdx] : undefined;\n      const prevEntryAccum =\n        accumIdx > 0 ? entriesAccumCurr[accumIdx - 1] : undefined;\n      const nextEntryAccum =\n        accumIdx < entriesAccumLength - 1\n          ? entriesAccumCurr[accumIdx + 1]\n          : undefined;\n\n      if (\n        defined(entry) &&\n        defined(entryAccum) &&\n        entry.height === entryAccum.height\n      ) {\n        // New entry directly on top of accum entry\n        const isSplitAccum =\n          defined(nextEntryAccum) &&\n          entryAccum.height === nextEntryAccum.height;\n        const isStartAccum = !defined(prevEntryAccum);\n        const isEndAccum = !defined(nextEntryAccum);\n\n        const isSplit = defined(nextEntry) && entry.height === nextEntry.height;\n        const isStart = !defined(prevEntry);\n        const isEnd = !defined(nextEntry);\n\n        if (isSplitAccum) {\n          if (isSplit) {\n            addBlendEntry(entry.height, entry.color, entryAccum.color);\n            addBlendEntry(entry.height, nextEntry.color, nextEntryAccum.color);\n          } else if (isStart) {\n            addEntry(entry.height, entryAccum.color);\n            addBlendEntry(entry.height, entry.color, nextEntryAccum.color);\n          } else if (isEnd) {\n            addBlendEntry(entry.height, entry.color, entryAccum.color);\n            addEntry(entry.height, nextEntryAccum.color);\n          } else {\n            addBlendEntry(entry.height, entry.color, entryAccum.color);\n            addBlendEntry(entry.height, entry.color, nextEntryAccum.color);\n          }\n        } else if (isStartAccum) {\n          if (isSplit) {\n            addEntry(entry.height, entry.color);\n            addBlendEntry(entry.height, nextEntry.color, entryAccum.color);\n          } else if (isEnd) {\n            addEntry(entry.height, entry.color);\n            addEntry(entry.height, entryAccum.color);\n          } else if (isStart) {\n            addBlendEntry(entry.height, entry.color, entryAccum.color);\n          } else {\n            addEntry(entry.height, entry.color);\n            addBlendEntry(entry.height, entry.color, entryAccum.color);\n          }\n        } else if (isEndAccum) {\n          if (isSplit) {\n            addBlendEntry(entry.height, entry.color, entryAccum.color);\n            addEntry(entry.height, nextEntry.color);\n          } else if (isStart) {\n            addEntry(entry.height, entryAccum.color);\n            addEntry(entry.height, entry.color);\n          } else if (isEnd) {\n            addBlendEntry(entry.height, entry.color, entryAccum.color);\n          } else {\n            addBlendEntry(entry.height, entry.color, entryAccum.color);\n            addEntry(entry.height, entry.color);\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isSplit) {\n            addBlendEntry(entry.height, entry.color, entryAccum.color);\n            addBlendEntry(entry.height, nextEntry.color, entryAccum.color);\n          } else if (isStart) {\n            addEntry(entry.height, entryAccum.color);\n            addBlendEntry(entry.height, entry.color, entryAccum.color);\n          } else if (isEnd) {\n            addBlendEntry(entry.height, entry.color, entryAccum.color);\n            addEntry(entry.height, entryAccum.color);\n          } else {\n            addBlendEntry(entry.height, entry.color, entryAccum.color);\n          }\n        }\n        idx += isSplit ? 2 : 1;\n        accumIdx += isSplitAccum ? 2 : 1;\n      } else if (\n        defined(entry) &&\n        defined(entryAccum) &&\n        defined(prevEntryAccum) &&\n        entry.height < entryAccum.height\n      ) {\n        // New entry between two accum entries\n        const colorBelow = lerpEntryColor(\n          entry.height,\n          prevEntryAccum,\n          entryAccum,\n          scratchColorBelow\n        );\n\n        if (!defined(prevEntry)) {\n          addEntry(entry.height, colorBelow);\n          addBlendEntry(entry.height, entry.color, colorBelow);\n        } else if (!defined(nextEntry)) {\n          addBlendEntry(entry.height, entry.color, colorBelow);\n          addEntry(entry.height, colorBelow);\n        } else {\n          addBlendEntry(entry.height, entry.color, colorBelow);\n        }\n        idx++;\n      } else if (\n        defined(entryAccum) &&\n        defined(entry) &&\n        defined(prevEntry) &&\n        entryAccum.height < entry.height\n      ) {\n        // Accum entry between two new entries\n        const colorAbove = lerpEntryColor(\n          entryAccum.height,\n          prevEntry,\n          entry,\n          scratchColorAbove\n        );\n\n        if (!defined(prevEntryAccum)) {\n          addEntry(entryAccum.height, colorAbove);\n          addBlendEntry(entryAccum.height, colorAbove, entryAccum.color);\n        } else if (!defined(nextEntryAccum)) {\n          addBlendEntry(entryAccum.height, colorAbove, entryAccum.color);\n          addEntry(entryAccum.height, colorAbove);\n        } else {\n          addBlendEntry(entryAccum.height, colorAbove, entryAccum.color);\n        }\n        accumIdx++;\n      } else if (\n        defined(entry) &&\n        (!defined(entryAccum) || entry.height < entryAccum.height)\n      ) {\n        // New entry completely before or completely after accum entries\n        if (\n          defined(entryAccum) &&\n          !defined(prevEntryAccum) &&\n          !defined(nextEntry)\n        ) {\n          // Insert blank gap between last entry and first accum entry\n          addEntry(entry.height, entry.color);\n          addEntry(entry.height, createElevationBandMaterial._emptyColor);\n          addEntry(entryAccum.height, createElevationBandMaterial._emptyColor);\n        } else if (\n          !defined(entryAccum) &&\n          defined(prevEntryAccum) &&\n          !defined(prevEntry)\n        ) {\n          // Insert blank gap between last accum entry and first entry\n          addEntry(\n            prevEntryAccum.height,\n            createElevationBandMaterial._emptyColor\n          );\n          addEntry(entry.height, createElevationBandMaterial._emptyColor);\n          addEntry(entry.height, entry.color);\n        } else {\n          addEntry(entry.height, entry.color);\n        }\n        idx++;\n      } else if (\n        defined(entryAccum) &&\n        (!defined(entry) || entryAccum.height < entry.height)\n      ) {\n        // Accum entry completely before or completely after new entries\n        addEntry(entryAccum.height, entryAccum.color);\n        accumIdx++;\n      }\n    }\n  }\n\n  // one final cleanup pass in case duplicate colors show up in the final result\n  const allEntries = removeDuplicates(entriesAccumNext);\n  return allEntries;\n}\n\n/**\n * @typedef createElevationBandMaterialEntry\n *\n * @property {Number} height The height.\n * @property {Color} color The color at this height.\n */\n/**\n * @typedef createElevationBandMaterialBand\n *\n * @property {createElevationBandMaterialEntry[]} entries A list of elevation entries. They will automatically be sorted from lowest to highest. If there is only one entry and <code>extendsDownards</code> and <code>extendUpwards</code> are both <code>false</code>, they will both be set to <code>true</code>.\n * @property {Boolean} [extendDownwards=false] If <code>true</code>, the band's minimum elevation color will extend infinitely downwards.\n * @property {Boolean} [extendUpwards=false] If <code>true</code>, the band's maximum elevation color will extend infinitely upwards.\n */\n\n/**\n * Creates a {@link Material} that combines multiple layers of color/gradient bands and maps them to terrain heights.\n *\n * The shader does a binary search over all the heights to find out which colors are above and below a given height, and\n * interpolates between them for the final color. This material supports hundreds of entries relatively cheaply.\n *\n * @function createElevationBandMaterial\n *\n * @param {Object} options Object with the following properties:\n * @param {Scene} options.scene The scene where the visualization is taking place.\n * @param {createElevationBandMaterialBand[]} options.layers A list of bands ordered from lowest to highest precedence.\n * @returns {Material} A new {@link Material} instance.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Elevation%20Band%20Material.html|Cesium Sandcastle Elevation Band Demo}\n *\n * @example\n * scene.globe.material = Cesium.createElevationBandMaterial({\n *     scene : scene,\n *     layers : [{\n *         entries : [{\n *             height : 4200.0,\n *             color : new Cesium.Color(0.0, 0.0, 0.0, 1.0)\n *         }, {\n *             height : 8848.0,\n *             color : new Cesium.Color(1.0, 1.0, 1.0, 1.0)\n *         }],\n *         extendDownwards : true,\n *         extendUpwards : true,\n *     }, {\n *         entries : [{\n *             height : 7000.0,\n *             color : new Cesium.Color(1.0, 0.0, 0.0, 0.5)\n *         }, {\n *             height : 7100.0,\n *             color : new Cesium.Color(1.0, 0.0, 0.0, 0.5)\n *         }]\n *     }]\n * });\n */\nfunction createElevationBandMaterial(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const scene = options.scene;\n  const layers = options.layers;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.scene\", scene);\n  Check.defined(\"options.layers\", layers);\n  Check.typeOf.number.greaterThan(\"options.layers.length\", layers.length, 0);\n  //>>includeEnd('debug');\n\n  const entries = createLayeredEntries(layers);\n  const entriesLength = entries.length;\n  let i;\n\n  let heightTexBuffer;\n  let heightTexDatatype;\n  let heightTexFormat;\n\n  const isPackedHeight = !createElevationBandMaterial._useFloatTexture(\n    scene.context\n  );\n  if (isPackedHeight) {\n    heightTexDatatype = PixelDatatype.UNSIGNED_BYTE;\n    heightTexFormat = PixelFormat.RGBA;\n    heightTexBuffer = new Uint8Array(entriesLength * 4);\n    for (i = 0; i < entriesLength; i++) {\n      Cartesian4.packFloat(entries[i].height, scratchPackedFloat);\n      Cartesian4.pack(scratchPackedFloat, heightTexBuffer, i * 4);\n    }\n  } else {\n    heightTexDatatype = PixelDatatype.FLOAT;\n    heightTexFormat = PixelFormat.LUMINANCE;\n    heightTexBuffer = new Float32Array(entriesLength);\n    for (i = 0; i < entriesLength; i++) {\n      heightTexBuffer[i] = entries[i].height;\n    }\n  }\n\n  const heightsTex = Texture.create({\n    context: scene.context,\n    pixelFormat: heightTexFormat,\n    pixelDatatype: heightTexDatatype,\n    source: {\n      arrayBufferView: heightTexBuffer,\n      width: entriesLength,\n      height: 1,\n    },\n    sampler: new Sampler({\n      wrapS: TextureWrap.CLAMP_TO_EDGE,\n      wrapT: TextureWrap.CLAMP_TO_EDGE,\n      minificationFilter: TextureMinificationFilter.NEAREST,\n      magnificationFilter: TextureMagnificationFilter.NEAREST,\n    }),\n  });\n\n  const colorsArray = new Uint8Array(entriesLength * 4);\n  for (i = 0; i < entriesLength; i++) {\n    const color = entries[i].color;\n    color.toBytes(scratchColorBytes);\n    colorsArray[i * 4 + 0] = scratchColorBytes[0];\n    colorsArray[i * 4 + 1] = scratchColorBytes[1];\n    colorsArray[i * 4 + 2] = scratchColorBytes[2];\n    colorsArray[i * 4 + 3] = scratchColorBytes[3];\n  }\n\n  const colorsTex = Texture.create({\n    context: scene.context,\n    pixelFormat: PixelFormat.RGBA,\n    pixelDatatype: PixelDatatype.UNSIGNED_BYTE,\n    source: {\n      arrayBufferView: colorsArray,\n      width: entriesLength,\n      height: 1,\n    },\n    sampler: new Sampler({\n      wrapS: TextureWrap.CLAMP_TO_EDGE,\n      wrapT: TextureWrap.CLAMP_TO_EDGE,\n      minificationFilter: TextureMinificationFilter.LINEAR,\n      magnificationFilter: TextureMagnificationFilter.LINEAR,\n    }),\n  });\n\n  const material = Material.fromType(\"ElevationBand\", {\n    heights: heightsTex,\n    colors: colorsTex,\n  });\n  return material;\n}\n\n/**\n * Function for checking if the context will allow floating point textures for heights.\n *\n * @param {Context} context The {@link Context}.\n * @returns {Boolean} <code>true</code> if floating point textures can be used for heights.\n * @private\n */\ncreateElevationBandMaterial._useFloatTexture = function (context) {\n  return context.floatingPointTexture;\n};\n\n/**\n * This is the height that gets stored in the texture when using extendUpwards.\n * There's nothing special about it, it's just a really big number.\n * @private\n */\ncreateElevationBandMaterial._maximumHeight = +5906376425472;\n\n/**\n * This is the height that gets stored in the texture when using extendDownwards.\n * There's nothing special about it, it's just a really big number.\n * @private\n */\ncreateElevationBandMaterial._minimumHeight = -5906376425472;\n\n/**\n * Color used to create empty space in the color texture\n * @private\n */\ncreateElevationBandMaterial._emptyColor = new Color(0.0, 0.0, 0.0, 0.0);\n\nexport default createElevationBandMaterial;\n","import Color from \"../Core/Color.js\";\nimport combine from \"../Core/combine.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport IonResource from \"../Core/IonResource.js\";\nimport Cesium3DTileset from \"./Cesium3DTileset.js\";\nimport Cesium3DTileStyle from \"./Cesium3DTileStyle.js\";\n\n/**\n * Creates a {@link Cesium3DTileset} instance for the\n * {@link https://cesium.com/content/cesium-osm-buildings/|Cesium OSM Buildings}\n * tileset.\n *\n * @function\n *\n * @param {Object} [options] Construction options. Any options allowed by the {@link Cesium3DTileset} constructor\n *        may be specified here. In addition to those, the following properties are supported:\n * @param {Color} [options.defaultColor=Color.WHITE] The default color to use for buildings\n *        that do not have a color. This parameter is ignored if <code>options.style</code> is specified.\n * @param {Cesium3DTileStyle} [options.style] The style to use with the tileset. If not\n *        specified, a default style is used which gives each building or building part a\n *        color inferred from its OpenStreetMap <code>tags</code>. If no color can be inferred,\n *        <code>options.defaultColor</code> is used.\n * @param {Boolean} [options.showOutline=true] Whether to show outlines around buildings. When true,\n *        outlines are displayed. When false, outlines are not displayed.\n * @returns {Cesium3DTileset}\n *\n * @see Ion\n *\n * @example\n * // Create Cesium OSM Buildings with default styling\n * const viewer = new Cesium.Viewer('cesiumContainer');\n * viewer.scene.primitives.add(Cesium.createOsmBuildings());\n *\n * @example\n * // Create Cesium OSM Buildings with a custom style highlighting\n * // schools and hospitals.\n * viewer.scene.primitives.add(Cesium.createOsmBuildings({\n *   style: new Cesium.Cesium3DTileStyle({\n *     color: {\n *       conditions: [\n *         [\"${feature['building']} === 'hospital'\", \"color('#0000FF')\"],\n *         [\"${feature['building']} === 'school'\", \"color('#00FF00')\"],\n *         [true, \"color('#ffffff')\"]\n *       ]\n *     }\n *   })\n * }));\n */\nfunction createOsmBuildings(options) {\n  options = combine(options, {\n    url: IonResource.fromAssetId(96188),\n  });\n\n  const tileset = new Cesium3DTileset(options);\n\n  let style = options.style;\n\n  if (!defined(style)) {\n    const color = defaultValue(\n      options.defaultColor,\n      Color.WHITE\n    ).toCssColorString();\n    style = new Cesium3DTileStyle({\n      color: `Boolean(\\${feature['cesium#color']}) ? color(\\${feature['cesium#color']}) : ${color}`,\n    });\n  }\n\n  tileset.style = style;\n\n  return tileset;\n}\n\nexport default createOsmBuildings;\n","import ColorGeometryInstanceAttribute from \"../Core/ColorGeometryInstanceAttribute.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport GeometryInstance from \"../Core/GeometryInstance.js\";\nimport GeometryPipeline from \"../Core/GeometryPipeline.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport PerInstanceColorAppearance from \"./PerInstanceColorAppearance.js\";\nimport Primitive from \"./Primitive.js\";\n\n/**\n * Creates a {@link Primitive} to visualize well-known vector vertex attributes:\n * <code>normal</code>, <code>tangent</code>, and <code>bitangent</code>.  Normal\n * is red; tangent is green; and bitangent is blue.  If an attribute is not\n * present, it is not drawn.\n *\n * @function\n *\n * @param {Object} options Object with the following properties:\n * @param {Geometry} options.geometry The <code>Geometry</code> instance with the attribute.\n * @param {Number} [options.length=10000.0] The length of each line segment in meters.  This can be negative to point the vector in the opposite direction.\n * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The model matrix that transforms to transform the geometry from model to world coordinates.\n * @returns {Primitive} A new <code>Primitive</code> instance with geometry for the vectors.\n *\n * @example\n * scene.primitives.add(Cesium.createTangentSpaceDebugPrimitive({\n *    geometry : instance.geometry,\n *    length : 100000.0,\n *    modelMatrix : instance.modelMatrix\n * }));\n */\nfunction createTangentSpaceDebugPrimitive(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const instances = [];\n  let geometry = options.geometry;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(geometry)) {\n    throw new DeveloperError(\"options.geometry is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(geometry.attributes) || !defined(geometry.primitiveType)) {\n    // to create the debug lines, we need the computed attributes.\n    // compute them if they are undefined.\n    geometry = geometry.constructor.createGeometry(geometry);\n  }\n\n  const attributes = geometry.attributes;\n  const modelMatrix = Matrix4.clone(\n    defaultValue(options.modelMatrix, Matrix4.IDENTITY)\n  );\n  const length = defaultValue(options.length, 10000.0);\n\n  if (defined(attributes.normal)) {\n    instances.push(\n      new GeometryInstance({\n        geometry: GeometryPipeline.createLineSegmentsForVectors(\n          geometry,\n          \"normal\",\n          length\n        ),\n        attributes: {\n          color: new ColorGeometryInstanceAttribute(1.0, 0.0, 0.0, 1.0),\n        },\n        modelMatrix: modelMatrix,\n      })\n    );\n  }\n\n  if (defined(attributes.tangent)) {\n    instances.push(\n      new GeometryInstance({\n        geometry: GeometryPipeline.createLineSegmentsForVectors(\n          geometry,\n          \"tangent\",\n          length\n        ),\n        attributes: {\n          color: new ColorGeometryInstanceAttribute(0.0, 1.0, 0.0, 1.0),\n        },\n        modelMatrix: modelMatrix,\n      })\n    );\n  }\n\n  if (defined(attributes.bitangent)) {\n    instances.push(\n      new GeometryInstance({\n        geometry: GeometryPipeline.createLineSegmentsForVectors(\n          geometry,\n          \"bitangent\",\n          length\n        ),\n        attributes: {\n          color: new ColorGeometryInstanceAttribute(0.0, 0.0, 1.0, 1.0),\n        },\n        modelMatrix: modelMatrix,\n      })\n    );\n  }\n\n  if (instances.length > 0) {\n    return new Primitive({\n      asynchronous: false,\n      geometryInstances: instances,\n      appearance: new PerInstanceColorAppearance({\n        flat: true,\n        translucent: false,\n      }),\n    });\n  }\n\n  return undefined;\n}\nexport default createTangentSpaceDebugPrimitive;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport IonImageryProvider from \"./IonImageryProvider.js\";\nimport IonWorldImageryStyle from \"./IonWorldImageryStyle.js\";\n\n/**\n * Creates an {@link IonImageryProvider} instance for ion's default global base imagery layer, currently Bing Maps.\n *\n * @function\n *\n * @param {Object} [options] Object with the following properties:\n * @param {IonWorldImageryStyle} [options.style=IonWorldImageryStyle] The style of base imagery, only AERIAL, AERIAL_WITH_LABELS, and ROAD are currently supported.\n * @returns {IonImageryProvider}\n *\n * @see Ion\n *\n * @example\n * // Create Cesium World Terrain with default settings\n * const viewer = new Cesium.Viewer('cesiumContainer', {\n *     imageryProvider : Cesium.createWorldImagery();\n * });\n *\n * @example\n * // Create Cesium World Terrain with water and normals.\n * const viewer = new Cesium.Viewer('cesiumContainer', {\n *     imageryProvider : Cesium.createWorldImagery({\n *         style: Cesium.IonWorldImageryStyle.AERIAL_WITH_LABELS\n *     })\n * });\n *\n */\nfunction createWorldImagery(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const style = defaultValue(options.style, IonWorldImageryStyle.AERIAL);\n  return new IonImageryProvider({\n    assetId: style,\n  });\n}\nexport default createWorldImagery;\n","import ContentMetadata from \"./ContentMetadata.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport hasExtension from \"./hasExtension.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\n\n/**\n * Check if a content has metadata, either defined in its metadata field (3D Tiles 1.1) or in\n * the <code>3DTILES_metadata</code> extension. If defined, get the content metadata\n * with the corresponding class.\n *\n * @function\n *\n * @param {Cesium3DTileset} tileset The tileset to query for content metadata\n * @param {Object} contentHeader the JSON header for a {@link Cesium3DTileContent}\n * @return {ContentMetadata} the content metadata, or <code>undefined</code> if not found\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction findContentMetadata(tileset, contentHeader) {\n  const metadataJson = hasExtension(contentHeader, \"3DTILES_metadata\")\n    ? contentHeader.extensions[\"3DTILES_metadata\"]\n    : contentHeader.metadata;\n\n  if (!defined(metadataJson)) {\n    return undefined;\n  }\n\n  if (!defined(tileset.schema)) {\n    findContentMetadata._oneTimeWarning(\n      \"findContentMetadata-missing-root-schema\",\n      \"Could not find a metadata schema for content metadata. For tilesets that contain external tilesets, make sure the schema is added to the root tileset.json.\"\n    );\n    return undefined;\n  }\n\n  const classes = defaultValue(\n    tileset.schema.classes,\n    defaultValue.EMPTY_OBJECT\n  );\n  if (defined(metadataJson.class)) {\n    const contentClass = classes[metadataJson.class];\n    return new ContentMetadata({\n      content: metadataJson,\n      class: contentClass,\n    });\n  }\n\n  return undefined;\n}\n\n// Exposed for testing\nfindContentMetadata._oneTimeWarning = oneTimeWarning;\nexport default findContentMetadata;\n","import defined from \"../Core/defined.js\";\nimport hasExtension from \"./hasExtension.js\";\n\n/**\n * Check if a content has metadata, either defined in its metadata field (3D Tiles 1.1)\n * or in the <code>3DTILES_metadata</code> extension. If so, look up the group with the\n * corresponding ID.\n *\n * @function\n *\n * @param {Cesium3DTileset} tileset The tileset to query for group metadata\n * @param {Object} contentHeader the JSON header for a {@link Cesium3DTileContent}\n * @return {GroupMetadata} the group metadata, or <code>undefined</code> if not found\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nexport default function findGroupMetadata(tileset, contentHeader) {\n  const metadataExtension = tileset.metadataExtension;\n  if (!defined(metadataExtension)) {\n    return undefined;\n  }\n  const groups = metadataExtension.groups;\n\n  const group = hasExtension(contentHeader, \"3DTILES_metadata\")\n    ? contentHeader.extensions[\"3DTILES_metadata\"].group\n    : contentHeader.group;\n\n  if (typeof group === \"number\") {\n    return groups[group];\n  }\n\n  const index = metadataExtension.groupIds.findIndex(function (id) {\n    return id === group;\n  });\n\n  return index >= 0 ? groups[index] : undefined;\n}\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport hasExtension from \"./hasExtension.js\";\nimport TileMetadata from \"./TileMetadata.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\n\n/**\n * Check if a tile has metadata, either defined in its metadata field (3D Tiles 1.1)\n * or in the <code>3DTILES_metadata</code> extension. If defined, get the tile metadata\n * with the corresponding class.\n * <p>\n * This assumes that tileset.metadata has been created before any tiles are constructed.\n * </p>\n * @function\n *\n * @param {Cesium3DTileset} tileset The tileset to query for tile metadata\n * @param {Object} tileHeader the JSON header for a {@link Cesium3DTile}\n * @return {TileMetadata} the tile metadata, or <code>undefined</code> if not found\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nfunction findTileMetadata(tileset, tileHeader) {\n  const metadataJson = hasExtension(tileHeader, \"3DTILES_metadata\")\n    ? tileHeader.extensions[\"3DTILES_metadata\"]\n    : tileHeader.metadata;\n\n  if (!defined(metadataJson)) {\n    return undefined;\n  }\n\n  if (!defined(tileset.schema)) {\n    findTileMetadata._oneTimeWarning(\n      \"findTileMetadata-missing-root-schema\",\n      \"Could not find a metadata schema for tile metadata. For tilesets that contain external tilesets, make sure the schema is added to the root tileset.json.\"\n    );\n    return undefined;\n  }\n\n  const classes = defaultValue(\n    tileset.schema.classes,\n    defaultValue.EMPTY_OBJECT\n  );\n  if (defined(metadataJson.class)) {\n    const tileClass = classes[metadataJson.class];\n    return new TileMetadata({\n      tile: metadataJson,\n      class: tileClass,\n    });\n  }\n\n  return undefined;\n}\n\n// Exposed for testing\nfindTileMetadata._oneTimeWarning = oneTimeWarning;\nexport default findTileMetadata;\n","import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartesian4 from \"../Core/Cartesian4.js\";\nimport ComponentDatatype from \"../Core/ComponentDatatype.js\";\nimport Matrix2 from \"../Core/Matrix2.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\n\nconst ComponentsPerAttribute = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16,\n};\n\nconst ClassPerType = {\n  SCALAR: undefined,\n  VEC2: Cartesian2,\n  VEC3: Cartesian3,\n  VEC4: Cartesian4,\n  MAT2: Matrix2,\n  MAT3: Matrix3,\n  MAT4: Matrix4,\n};\n\n/**\n * @private\n */\nfunction getBinaryAccessor(accessor) {\n  const componentType = accessor.componentType;\n  let componentDatatype;\n  if (typeof componentType === \"string\") {\n    componentDatatype = ComponentDatatype.fromName(componentType);\n  } else {\n    componentDatatype = componentType;\n  }\n\n  const componentsPerAttribute = ComponentsPerAttribute[accessor.type];\n  const classType = ClassPerType[accessor.type];\n  return {\n    componentsPerAttribute: componentsPerAttribute,\n    classType: classType,\n    createArrayBufferView: function (buffer, byteOffset, length) {\n      return ComponentDatatype.createArrayBufferView(\n        componentDatatype,\n        buffer,\n        byteOffset,\n        componentsPerAttribute * length\n      );\n    },\n  };\n}\nexport default getBinaryAccessor;\n","import Check from \"../Core/Check.js\";\n\n/**\n * Gets a GLSL snippet that clips a fragment using the `clip` function from {@link getClippingFunction} and styles it.\n *\n * @param {String} samplerUniformName Name of the uniform for the clipping planes texture sampler.\n * @param {String} matrixUniformName Name of the uniform for the clipping planes matrix.\n * @param {String} styleUniformName Name of the uniform for the clipping planes style, a vec4.\n * @returns {String} A string containing GLSL that clips and styles the current fragment.\n * @private\n */\nfunction getClipAndStyleCode(\n  samplerUniformName,\n  matrixUniformName,\n  styleUniformName\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"samplerUniformName\", samplerUniformName);\n  Check.typeOf.string(\"matrixUniformName\", matrixUniformName);\n  Check.typeOf.string(\"styleUniformName\", styleUniformName);\n  //>>includeEnd('debug');\n\n  const shaderCode =\n    `    float clipDistance = clip(gl_FragCoord, ${samplerUniformName}, ${matrixUniformName}); \\n` +\n    `    vec4 clippingPlanesEdgeColor = vec4(1.0); \\n` +\n    `    clippingPlanesEdgeColor.rgb = ${styleUniformName}.rgb; \\n` +\n    `    float clippingPlanesEdgeWidth = ${styleUniformName}.a; \\n` +\n    `    if (clipDistance > 0.0 && clipDistance < clippingPlanesEdgeWidth) \\n` +\n    `    { \\n` +\n    `        gl_FragColor = clippingPlanesEdgeColor;\\n` +\n    `    } \\n`;\n  return shaderCode;\n}\nexport default getClipAndStyleCode;\n","import Cartesian2 from \"../Core/Cartesian2.js\";\nimport Check from \"../Core/Check.js\";\nimport ClippingPlaneCollection from \"./ClippingPlaneCollection.js\";\n\nconst textureResolutionScratch = new Cartesian2();\n/**\n * Gets the GLSL functions needed to retrieve clipping planes from a ClippingPlaneCollection's texture.\n *\n * @param {ClippingPlaneCollection} clippingPlaneCollection ClippingPlaneCollection with a defined texture.\n * @param {Context} context The current rendering context.\n * @returns {String} A string containing GLSL functions for retrieving clipping planes.\n * @private\n */\nfunction getClippingFunction(clippingPlaneCollection, context) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"clippingPlaneCollection\", clippingPlaneCollection);\n  Check.typeOf.object(\"context\", context);\n  //>>includeEnd('debug');\n  const unionClippingRegions = clippingPlaneCollection.unionClippingRegions;\n  const clippingPlanesLength = clippingPlaneCollection.length;\n  const usingFloatTexture = ClippingPlaneCollection.useFloatTexture(context);\n  const textureResolution = ClippingPlaneCollection.getTextureResolution(\n    clippingPlaneCollection,\n    context,\n    textureResolutionScratch\n  );\n  const width = textureResolution.x;\n  const height = textureResolution.y;\n\n  let functions = usingFloatTexture\n    ? getClippingPlaneFloat(width, height)\n    : getClippingPlaneUint8(width, height);\n  functions += \"\\n\";\n  functions += unionClippingRegions\n    ? clippingFunctionUnion(clippingPlanesLength)\n    : clippingFunctionIntersect(clippingPlanesLength);\n  return functions;\n}\n\nfunction clippingFunctionUnion(clippingPlanesLength) {\n  const functionString =\n    `${\n      \"float clip(vec4 fragCoord, sampler2D clippingPlanes, mat4 clippingPlanesMatrix)\\n\" +\n      \"{\\n\" +\n      \"    vec4 position = czm_windowToEyeCoordinates(fragCoord);\\n\" +\n      \"    vec3 clipNormal = vec3(0.0);\\n\" +\n      \"    vec3 clipPosition = vec3(0.0);\\n\" +\n      \"    float clipAmount;\\n\" + // For union planes, we want to get the min distance. So we set the initial value to the first plane distance in the loop below.\n      \"    float pixelWidth = czm_metersPerPixel(position);\\n\" +\n      \"    bool breakAndDiscard = false;\\n\" +\n      \"    for (int i = 0; i < \"\n    }${clippingPlanesLength}; ++i)\\n` +\n    `    {\\n` +\n    `        vec4 clippingPlane = getClippingPlane(clippingPlanes, i, clippingPlanesMatrix);\\n` +\n    `        clipNormal = clippingPlane.xyz;\\n` +\n    `        clipPosition = -clippingPlane.w * clipNormal;\\n` +\n    `        float amount = dot(clipNormal, (position.xyz - clipPosition)) / pixelWidth;\\n` +\n    `        clipAmount = czm_branchFreeTernary(i == 0, amount, min(amount, clipAmount));\\n` +\n    `        if (amount <= 0.0)\\n` +\n    `        {\\n` +\n    `           breakAndDiscard = true;\\n` +\n    `           break;\\n` + // HLSL compiler bug if we discard here: https://bugs.chromium.org/p/angleproject/issues/detail?id=1945#c6\n    `        }\\n` +\n    `    }\\n` +\n    `    if (breakAndDiscard) {\\n` +\n    `        discard;\\n` +\n    `    }\\n` +\n    `    return clipAmount;\\n` +\n    `}\\n`;\n  return functionString;\n}\n\nfunction clippingFunctionIntersect(clippingPlanesLength) {\n  const functionString =\n    `${\n      \"float clip(vec4 fragCoord, sampler2D clippingPlanes, mat4 clippingPlanesMatrix)\\n\" +\n      \"{\\n\" +\n      \"    bool clipped = true;\\n\" +\n      \"    vec4 position = czm_windowToEyeCoordinates(fragCoord);\\n\" +\n      \"    vec3 clipNormal = vec3(0.0);\\n\" +\n      \"    vec3 clipPosition = vec3(0.0);\\n\" +\n      \"    float clipAmount = 0.0;\\n\" +\n      \"    float pixelWidth = czm_metersPerPixel(position);\\n\" +\n      \"    for (int i = 0; i < \"\n    }${clippingPlanesLength}; ++i)\\n` +\n    `    {\\n` +\n    `        vec4 clippingPlane = getClippingPlane(clippingPlanes, i, clippingPlanesMatrix);\\n` +\n    `        clipNormal = clippingPlane.xyz;\\n` +\n    `        clipPosition = -clippingPlane.w * clipNormal;\\n` +\n    `        float amount = dot(clipNormal, (position.xyz - clipPosition)) / pixelWidth;\\n` +\n    `        clipAmount = max(amount, clipAmount);\\n` +\n    `        clipped = clipped && (amount <= 0.0);\\n` +\n    `    }\\n` +\n    `    if (clipped)\\n` +\n    `    {\\n` +\n    `        discard;\\n` +\n    `    }\\n` +\n    `    return clipAmount;\\n` +\n    `}\\n`;\n  return functionString;\n}\n\nfunction getClippingPlaneFloat(width, height) {\n  const pixelWidth = 1.0 / width;\n  const pixelHeight = 1.0 / height;\n\n  let pixelWidthString = `${pixelWidth}`;\n  if (pixelWidthString.indexOf(\".\") === -1) {\n    pixelWidthString += \".0\";\n  }\n  let pixelHeightString = `${pixelHeight}`;\n  if (pixelHeightString.indexOf(\".\") === -1) {\n    pixelHeightString += \".0\";\n  }\n\n  const functionString =\n    `${\n      \"vec4 getClippingPlane(highp sampler2D packedClippingPlanes, int clippingPlaneNumber, mat4 transform)\\n\" +\n      \"{\\n\" +\n      \"    int pixY = clippingPlaneNumber / \"\n    }${width};\\n` +\n    `    int pixX = clippingPlaneNumber - (pixY * ${width});\\n` +\n    `    float u = (float(pixX) + 0.5) * ${pixelWidthString};\\n` + // sample from center of pixel\n    `    float v = (float(pixY) + 0.5) * ${pixelHeightString};\\n` +\n    `    vec4 plane = texture2D(packedClippingPlanes, vec2(u, v));\\n` +\n    `    return czm_transformPlane(plane, transform);\\n` +\n    `}\\n`;\n  return functionString;\n}\n\nfunction getClippingPlaneUint8(width, height) {\n  const pixelWidth = 1.0 / width;\n  const pixelHeight = 1.0 / height;\n\n  let pixelWidthString = `${pixelWidth}`;\n  if (pixelWidthString.indexOf(\".\") === -1) {\n    pixelWidthString += \".0\";\n  }\n  let pixelHeightString = `${pixelHeight}`;\n  if (pixelHeightString.indexOf(\".\") === -1) {\n    pixelHeightString += \".0\";\n  }\n\n  const functionString =\n    `${\n      \"vec4 getClippingPlane(highp sampler2D packedClippingPlanes, int clippingPlaneNumber, mat4 transform)\\n\" +\n      \"{\\n\" +\n      \"    int clippingPlaneStartIndex = clippingPlaneNumber * 2;\\n\" + // clipping planes are two pixels each\n      \"    int pixY = clippingPlaneStartIndex / \"\n    }${width};\\n` +\n    `    int pixX = clippingPlaneStartIndex - (pixY * ${width});\\n` +\n    `    float u = (float(pixX) + 0.5) * ${pixelWidthString};\\n` + // sample from center of pixel\n    `    float v = (float(pixY) + 0.5) * ${pixelHeightString};\\n` +\n    `    vec4 oct32 = texture2D(packedClippingPlanes, vec2(u, v)) * 255.0;\\n` +\n    `    vec2 oct = vec2(oct32.x * 256.0 + oct32.y, oct32.z * 256.0 + oct32.w);\\n` +\n    `    vec4 plane;\\n` +\n    `    plane.xyz = czm_octDecode(oct, 65535.0);\\n` +\n    `    plane.w = czm_unpackFloat(texture2D(packedClippingPlanes, vec2(u + ${pixelWidthString}, v)));\\n` +\n    `    return czm_transformPlane(plane, transform);\\n` +\n    `}\\n`;\n  return functionString;\n}\nexport default getClippingFunction;\n","import defined from \"../Core/defined.js\";\n\n/**\n * Check if a specific extension is present on a JSON object. This can be used\n * for either 3D Tiles extensions or glTF extensions\n * @param {Object} json The JSON object\n * @param {String} extensionName The name of the extension, e.g. '3DTILES_implicit_tiling'\n * @returns {Boolean} True if the extension is present\n * @private\n */\nexport default function hasExtension(json, extensionName) {\n  return (\n    defined(json) &&\n    defined(json.extensions) &&\n    defined(json.extensions[extensionName])\n  );\n}\n","import Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\nimport deprecationWarning from \"../Core/deprecationWarning.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport BatchTableHierarchy from \"./BatchTableHierarchy.js\";\nimport StructuralMetadata from \"./StructuralMetadata.js\";\nimport PropertyTable from \"./PropertyTable.js\";\nimport getBinaryAccessor from \"./getBinaryAccessor.js\";\nimport JsonMetadataTable from \"./JsonMetadataTable.js\";\nimport MetadataClass from \"./MetadataClass.js\";\nimport MetadataSchema from \"./MetadataSchema.js\";\nimport MetadataTable from \"./MetadataTable.js\";\n\n/**\n * An object that parses the the 3D Tiles 1.0 batch table and transcodes it to\n * be compatible with structural metadata from the <code>EXT_structural_metadata</code> glTF extension\n * <p>\n * See the {@link https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_structural_metadata|EXT_structural_metadata Extension} for glTF.\n * </p>\n *\n * @param {Object} options Object with the following properties:\n * @param {Number} options.count The number of features in the batch table.\n * @param {Object} options.batchTable The batch table JSON\n * @param {Uint8Array} [options.binaryBody] The batch table binary body\n * @return {StructuralMetadata} A transcoded structural metadata object\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nexport default function parseBatchTable(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"options.count\", options.count);\n  Check.typeOf.object(\"options.batchTable\", options.batchTable);\n  //>>includeEnd('debug');\n\n  const featureCount = options.count;\n  const batchTable = options.batchTable;\n  const binaryBody = options.binaryBody;\n\n  // divide properties into binary, json and hierarchy\n  const partitionResults = partitionProperties(batchTable);\n\n  const jsonMetadataTable = new JsonMetadataTable({\n    count: featureCount,\n    properties: partitionResults.jsonProperties,\n  });\n\n  const hierarchy = initializeHierarchy(partitionResults.hierarchy, binaryBody);\n\n  const className = MetadataClass.BATCH_TABLE_CLASS_NAME;\n\n  const binaryResults = transcodeBinaryProperties(\n    featureCount,\n    className,\n    partitionResults.binaryProperties,\n    binaryBody\n  );\n\n  const featureTableJson = binaryResults.featureTableJson;\n\n  const metadataTable = new MetadataTable({\n    count: featureTableJson.count,\n    properties: featureTableJson.properties,\n    class: binaryResults.transcodedClass,\n    bufferViews: binaryResults.bufferViewsU8,\n  });\n\n  const propertyTable = new PropertyTable({\n    id: 0,\n    name: \"Batch Table\",\n    count: featureTableJson.count,\n    metadataTable: metadataTable,\n    jsonMetadataTable: jsonMetadataTable,\n    batchTableHierarchy: hierarchy,\n  });\n\n  return new StructuralMetadata({\n    schema: binaryResults.transcodedSchema,\n    propertyTables: [propertyTable],\n    extensions: partitionResults.extensions,\n    extras: partitionResults.extras,\n  });\n}\n\n/**\n * Divide the batch table's properties into binary, JSON and hierarchy\n * extension as each is handled separately\n *\n * @param {Object} batchTable The batch table JSON\n * @returns {Object} The batch table divided into binary, JSON and hierarchy portions. Extras and extensions are also divided out for ease of processing.\n *\n * @private\n */\nfunction partitionProperties(batchTable) {\n  const legacyHierarchy = batchTable.HIERARCHY;\n  const extras = batchTable.extras;\n  const extensions = batchTable.extensions;\n\n  let hierarchyExtension;\n  if (defined(legacyHierarchy)) {\n    parseBatchTable._deprecationWarning(\n      \"batchTableHierarchyExtension\",\n      \"The batch table HIERARCHY property has been moved to an extension. Use extensions.3DTILES_batch_table_hierarchy instead.\"\n    );\n    hierarchyExtension = legacyHierarchy;\n  } else if (defined(extensions)) {\n    hierarchyExtension = extensions[\"3DTILES_batch_table_hierarchy\"];\n  }\n\n  const jsonProperties = {};\n  const binaryProperties = {};\n  for (const propertyId in batchTable) {\n    if (\n      !batchTable.hasOwnProperty(propertyId) ||\n      // these cases were handled above;\n      propertyId === \"HIERARCHY\" ||\n      propertyId === \"extensions\" ||\n      propertyId === \"extras\"\n    ) {\n      continue;\n    }\n\n    const property = batchTable[propertyId];\n    if (Array.isArray(property)) {\n      jsonProperties[propertyId] = property;\n    } else {\n      binaryProperties[propertyId] = property;\n    }\n  }\n\n  return {\n    binaryProperties: binaryProperties,\n    jsonProperties: jsonProperties,\n    hierarchy: hierarchyExtension,\n    extras: extras,\n    extensions: extensions,\n  };\n}\n\n/**\n * Transcode the binary properties of the batch table to be compatible with\n * <code>EXT_structural_metadata</code>\n *\n * @param {Number} featureCount The number of features in the batch table\n * @param {String} className The name of the metadata class to be created.\n * @param {Object.<String, Object>} binaryProperties A dictionary of property ID to property definition\n * @param {Uint8Array} [binaryBody] The binary body of the batch table\n * @return {Object} Transcoded data needed for constructing a {@link StructuralMetadata} object.\n *\n * @private\n */\nfunction transcodeBinaryProperties(\n  featureCount,\n  className,\n  binaryProperties,\n  binaryBody\n) {\n  const classProperties = {};\n  const featureTableProperties = {};\n  const bufferViewsU8 = {};\n  let bufferViewCount = 0;\n  for (const propertyId in binaryProperties) {\n    if (!binaryProperties.hasOwnProperty(propertyId)) {\n      continue;\n    }\n\n    if (!defined(binaryBody)) {\n      throw new RuntimeError(\n        `Property ${propertyId} requires a batch table binary.`\n      );\n    }\n\n    const property = binaryProperties[propertyId];\n    const binaryAccessor = getBinaryAccessor(property);\n\n    featureTableProperties[propertyId] = {\n      bufferView: bufferViewCount,\n    };\n\n    classProperties[propertyId] = transcodePropertyType(property);\n\n    bufferViewsU8[bufferViewCount] = binaryAccessor.createArrayBufferView(\n      binaryBody.buffer,\n      binaryBody.byteOffset + property.byteOffset,\n      featureCount\n    );\n\n    bufferViewCount++;\n  }\n\n  const schemaJson = {\n    classes: {},\n  };\n  schemaJson.classes[className] = {\n    properties: classProperties,\n  };\n\n  const transcodedSchema = new MetadataSchema(schemaJson);\n\n  const featureTableJson = {\n    class: className,\n    count: featureCount,\n    properties: featureTableProperties,\n  };\n\n  return {\n    featureTableJson: featureTableJson,\n    bufferViewsU8: bufferViewsU8,\n    transcodedSchema: transcodedSchema,\n    transcodedClass: transcodedSchema.classes[className],\n  };\n}\n\n/**\n * Given a property definition from the batch table, compute the equivalent\n * <code>EXT_structural_metadata</code> type definition\n *\n * @param {Object} property The batch table property definition\n * @return {Object} The corresponding structural metadata property definition\n * @private\n */\nfunction transcodePropertyType(property) {\n  const componentType = transcodeComponentType(property.componentType);\n\n  return {\n    type: property.type,\n    componentType: componentType,\n  };\n}\n\n/**\n * Convert the component type of a batch table property to the corresponding\n * type used with structural metadata\n *\n * @property {String} componentType the batch table's component type\n * @return {String} The corresponding structural metadata data type\n *\n * @private\n */\nfunction transcodeComponentType(componentType) {\n  switch (componentType) {\n    case \"BYTE\":\n      return \"INT8\";\n    case \"UNSIGNED_BYTE\":\n      return \"UINT8\";\n    case \"SHORT\":\n      return \"INT16\";\n    case \"UNSIGNED_SHORT\":\n      return \"UINT16\";\n    case \"INT\":\n      return \"INT32\";\n    case \"UNSIGNED_INT\":\n      return \"UINT32\";\n    case \"FLOAT\":\n      return \"FLOAT32\";\n    case \"DOUBLE\":\n      return \"FLOAT64\";\n  }\n}\n\n/**\n * Construct a batch table hierarchy object if the <code>3DTILES_batch_table_hierarchy</code> extension is present\n *\n * @param {Object} [hierarchyExtension] The <code>3DTILES_batch_table_hierarchy</code> extension object.\n * @param {Uint8Array} binaryBody The binary body of the batch table\n * @return {BatchTableHierarchy} A batch table hierarchy, or <code>undefined</code> if the extension is not present.\n *\n * @private\n */\nfunction initializeHierarchy(hierarchyExtension, binaryBody) {\n  if (defined(hierarchyExtension)) {\n    return new BatchTableHierarchy({\n      extension: hierarchyExtension,\n      binaryBody: binaryBody,\n    });\n  }\n\n  return undefined;\n}\n\n// exposed for testing\nparseBatchTable._deprecationWarning = deprecationWarning;\n","import Check from \"../Core/Check.js\";\nimport defined from \"../Core/defined.js\";\n\n/**\n * Parse the bounding volume-related semantics such as\n * <code>TILE_BOUNDING_BOX</code> and <code>CONTENT_BOUNDING_REGION</code> from\n * implicit tile metadata. Results are returned as a JSON object for use when\n * transcoding tiles (see {@link Implicit3DTileContent}).\n * <p>\n * Bounding volumes are checked in the order box, region, then sphere. Only\n * the first valid bounding volume is returned.\n * </p>\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Metadata/Semantics|3D Metadata Semantic Reference} for the various bounding volumes and minimum/maximum heights.\n *\n * @param {TileMetadata} tileMetadata The metadata object for looking up values by semantic. In practice, this will typically be a {@link ImplicitMetadataView}\n * @return {Object} An object containing a <code>tile</code> property and a <code>content</code> property. These contain the bounding volume, and any minimum or maximum height.\n *\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nexport default function parseBoundingVolumeSemantics(tileMetadata) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"tileMetadata\", tileMetadata);\n  //>>includeEnd('debug');\n\n  return {\n    tile: {\n      boundingVolume: parseBoundingVolume(\"TILE\", tileMetadata),\n      minimumHeight: parseMinimumHeight(\"TILE\", tileMetadata),\n      maximumHeight: parseMaximumHeight(\"TILE\", tileMetadata),\n    },\n    content: {\n      boundingVolume: parseBoundingVolume(\"CONTENT\", tileMetadata),\n      minimumHeight: parseMinimumHeight(\"CONTENT\", tileMetadata),\n      maximumHeight: parseMaximumHeight(\"CONTENT\", tileMetadata),\n    },\n  };\n}\n\n/**\n * Parse the bounding volume from a tile metadata. If the metadata specify\n * multiple bounding volumes, only the first one is returned. Bounding volumes\n * are checked in the order box, region, then sphere.\n *\n * This handles both tile and content bounding volumes, as the only difference\n * is the prefix. e.g. <code>TILE_BOUNDING_BOX</code> and\n * <code>CONTENT_BOUNDING_BOX</code> have the same memory layout.\n *\n * @param {String} prefix Either \"TILE\" or \"CONTENT\"\n * @param {TileMetadata} tileMetadata The tileMetadata for looking up values\n * @return {Object} An object representing the JSON description of the tile metadata\n * @private\n */\nfunction parseBoundingVolume(prefix, tileMetadata) {\n  const boundingBoxSemantic = `${prefix}_BOUNDING_BOX`;\n  const boundingBox = tileMetadata.getPropertyBySemantic(boundingBoxSemantic);\n\n  if (defined(boundingBox)) {\n    return {\n      box: boundingBox,\n    };\n  }\n\n  const boundingRegionSemantic = `${prefix}_BOUNDING_REGION`;\n  const boundingRegion = tileMetadata.getPropertyBySemantic(\n    boundingRegionSemantic\n  );\n\n  if (defined(boundingRegion)) {\n    return {\n      region: boundingRegion,\n    };\n  }\n\n  const boundingSphereSemantic = `${prefix}_BOUNDING_SPHERE`;\n  const boundingSphere = tileMetadata.getPropertyBySemantic(\n    boundingSphereSemantic\n  );\n\n  if (defined(boundingSphere)) {\n    // ARRAY with 4 elements is automatically converted to a Cartesian4\n    return {\n      sphere: boundingSphere,\n    };\n  }\n\n  return undefined;\n}\n\n/**\n * Parse the minimum height from tile metadata. This is used for making tighter\n * quadtree bounds for implicit tiling. This works for both\n * <code>TILE_MINIMUM_HEIGHT</code> and <code>CONTENT_MINIMUM_HEIGHT</code>\n *\n * @param {String} prefix Either \"TILE\" or \"CONTENT\"\n * @param {TileMetadata} tileMetadata The tileMetadata for looking up values\n * @return {Number} The minimum height\n * @private\n */\nfunction parseMinimumHeight(prefix, tileMetadata) {\n  const minimumHeightSemantic = `${prefix}_MINIMUM_HEIGHT`;\n  return tileMetadata.getPropertyBySemantic(minimumHeightSemantic);\n}\n\n/**\n * Parse the maximum height from tile metadata. This is used for making tighter\n * quadtree bounds for implicit tiling. This works for both\n * <code>TILE_MAXIMUM_HEIGHT</code> and <code>CONTENT_MAXIMUM_HEIGHT</code>\n *\n * @param {String} prefix Either \"TILE\" or \"CONTENT\"\n * @param {TileMetadata} tileMetadata The tileMetadata for looking up values\n * @return {Number} The maximum height\n * @private\n */\nfunction parseMaximumHeight(prefix, tileMetadata) {\n  const maximumHeightSemantic = `${prefix}_MAXIMUM_HEIGHT`;\n  return tileMetadata.getPropertyBySemantic(maximumHeightSemantic);\n}\n","import Check from \"../Core/Check.js\";\nimport combine from \"../Core/combine.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport PropertyTable from \"./PropertyTable.js\";\nimport PropertyTexture from \"./PropertyTexture.js\";\nimport StructuralMetadata from \"./StructuralMetadata.js\";\nimport MetadataTable from \"./MetadataTable.js\";\n\n/**\n * Parse the <code>EXT_feature_metadata</code> glTF extension to create a\n * structural metadata object.\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} options.extension The extension JSON object.\n * @param {MetadataSchema} options.schema The parsed schema.\n * @param {Object.<String, Uint8Array>} [options.bufferViews] An object mapping bufferView IDs to Uint8Array objects.\n * @param {Object.<String, Texture>} [options.textures] An object mapping texture IDs to {@link Texture} objects.\n * @return {StructuralMetadata} A structural metadata object\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nexport default function parseFeatureMetadataLegacy(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const extension = options.extension;\n\n  // The calling code is responsible for loading the schema.\n  // This keeps metadata parsing synchronous.\n  const schema = options.schema;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.extension\", extension);\n  Check.typeOf.object(\"options.schema\", schema);\n  //>>includeEnd('debug');\n\n  let i;\n  const propertyTables = [];\n  let sortedIds;\n  if (defined(extension.featureTables)) {\n    // Store textures in an array sorted by the dictionary keys. This\n    // allows compatibility with the newer EXT_structural_metadata extension\n    // which is array-based.\n    sortedIds = Object.keys(extension.featureTables).sort();\n    for (i = 0; i < sortedIds.length; i++) {\n      const featureTableId = sortedIds[i];\n      const featureTable = extension.featureTables[featureTableId];\n      const classDefinition = schema.classes[featureTable.class];\n\n      const metadataTable = new MetadataTable({\n        count: featureTable.count,\n        properties: featureTable.properties,\n        class: classDefinition,\n        bufferViews: options.bufferViews,\n      });\n\n      propertyTables.push(\n        new PropertyTable({\n          id: featureTableId,\n          count: featureTable.count,\n          metadataTable: metadataTable,\n          extras: featureTable.extras,\n          extensions: featureTable.extensions,\n        })\n      );\n    }\n  }\n\n  const propertyTextures = [];\n  if (defined(extension.featureTextures)) {\n    // Store textures in an array sorted by the dictionary keys. This\n    // allows compatibility with the newer EXT_structural_metadata extension\n    // which is array-based.\n    sortedIds = Object.keys(extension.featureTextures).sort();\n    for (i = 0; i < sortedIds.length; i++) {\n      const featureTextureId = sortedIds[i];\n      const featureTexture = extension.featureTextures[featureTextureId];\n      propertyTextures.push(\n        new PropertyTexture({\n          id: featureTextureId,\n          propertyTexture: transcodeToPropertyTexture(featureTexture),\n          class: schema.classes[featureTexture.class],\n          textures: options.textures,\n        })\n      );\n    }\n  }\n\n  return new StructuralMetadata({\n    schema: schema,\n    propertyTables: propertyTables,\n    propertyTextures: propertyTextures,\n    statistics: extension.statistics,\n    extras: extension.extras,\n    extensions: extension.extensions,\n  });\n}\n\nfunction transcodeToPropertyTexture(featureTexture) {\n  const propertyTexture = {\n    class: featureTexture.class,\n    properties: {},\n  };\n\n  const properties = featureTexture.properties;\n  for (const propertyId in properties) {\n    if (properties.hasOwnProperty(propertyId)) {\n      const oldProperty = properties[propertyId];\n      const property = {\n        // EXT_structural_metadata uses numeric channel indices instead of\n        // a string of channel letters like \"rgba\".\n        channels: reformatChannels(oldProperty.channels),\n        extras: oldProperty.extras,\n        extensions: oldProperty.extensions,\n      };\n\n      // EXT_feature_metadata puts the textureInfo in property.texture.\n      // EXT_structural_metadata flattens this structure; essentially a\n      // textureInfo + channels\n      propertyTexture.properties[propertyId] = combine(\n        oldProperty.texture,\n        property,\n        true\n      );\n    }\n  }\n\n  return propertyTexture;\n}\n\nfunction reformatChannels(channelsString) {\n  const length = channelsString.length;\n  const result = new Array(length);\n  for (let i = 0; i < length; i++) {\n    result[i] = \"rgba\".indexOf(channelsString[i]);\n  }\n  return result;\n}\n","import Check from \"../Core/Check.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport PropertyTable from \"./PropertyTable.js\";\nimport PropertyTexture from \"./PropertyTexture.js\";\nimport PropertyAttribute from \"./PropertyAttribute.js\";\nimport StructuralMetadata from \"./StructuralMetadata.js\";\nimport MetadataTable from \"./MetadataTable.js\";\n\n/**\n * Parse the <code>EXT_structural_metadata</code> glTF extension to create a\n * structural metadata object.\n *\n * @param {Object} options Object with the following properties:\n * @param {Object} options.extension The extension JSON object.\n * @param {MetadataSchema} options.schema The parsed schema.\n * @param {Object.<String, Uint8Array>} [options.bufferViews] An object mapping bufferView IDs to Uint8Array objects.\n * @param {Object.<String, Texture>} [options.textures] An object mapping texture IDs to {@link Texture} objects.\n * @return {StructuralMetadata} A structural metadata object\n * @private\n * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n */\nexport default function parseStructuralMetadata(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const extension = options.extension;\n\n  // The calling code is responsible for loading the schema.\n  // This keeps metadata parsing synchronous.\n  const schema = options.schema;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.extension\", extension);\n  Check.typeOf.object(\"options.schema\", schema);\n  //>>includeEnd('debug');\n\n  const propertyTables = [];\n  if (defined(extension.propertyTables)) {\n    for (let i = 0; i < extension.propertyTables.length; i++) {\n      const propertyTable = extension.propertyTables[i];\n      const classDefinition = schema.classes[propertyTable.class];\n      const metadataTable = new MetadataTable({\n        count: propertyTable.count,\n        properties: propertyTable.properties,\n        class: classDefinition,\n        bufferViews: options.bufferViews,\n      });\n      propertyTables.push(\n        new PropertyTable({\n          id: i,\n          name: propertyTable.name,\n          count: propertyTable.count,\n          metadataTable: metadataTable,\n          extras: propertyTable.extras,\n          extensions: propertyTable.extensions,\n        })\n      );\n    }\n  }\n\n  const propertyTextures = [];\n  if (defined(extension.propertyTextures)) {\n    for (let i = 0; i < extension.propertyTextures.length; i++) {\n      const propertyTexture = extension.propertyTextures[i];\n      propertyTextures.push(\n        new PropertyTexture({\n          id: i,\n          name: propertyTexture.name,\n          propertyTexture: propertyTexture,\n          class: schema.classes[propertyTexture.class],\n          textures: options.textures,\n        })\n      );\n    }\n  }\n\n  const propertyAttributes = [];\n  if (defined(extension.propertyAttributes)) {\n    for (let i = 0; i < extension.propertyAttributes.length; i++) {\n      const propertyAttribute = extension.propertyAttributes[i];\n      propertyAttributes.push(\n        new PropertyAttribute({\n          id: i,\n          name: propertyAttribute.name,\n          class: schema.classes[propertyAttribute.class],\n          propertyAttribute: propertyAttribute,\n        })\n      );\n    }\n  }\n\n  return new StructuralMetadata({\n    schema: schema,\n    propertyTables: propertyTables,\n    propertyTextures: propertyTextures,\n    propertyAttributes: propertyAttributes,\n    statistics: extension.statistics,\n    extras: extension.extras,\n    extensions: extension.extensions,\n  });\n}\n","import defined from \"../Core/defined.js\";\nimport getJsonFromTypedArray from \"../Core/getJsonFromTypedArray.js\";\nimport getMagic from \"../Core/getMagic.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport Cesium3DTileContentType from \"./Cesium3DTileContentType.js\";\n\n/**\n * Results of the preprocess3DTileContent() function. This includes the\n * {@link Cesium3DTileContentType} and the payload. The payload is either\n * binary or JSON depending on the content type.\n *\n * @typedef {Object} PreprocessedContent\n * @property {Cesium3DTileContentType} contentType The type of the content\n * @property {Uint8Array} [binaryPayload] For binary files, the payload is returned as a typed array with byteOffset of 0\n * @property {Object} [jsonPayload] For JSON files, the results are returned as a JSON object.\n * @private\n */\n\n/**\n * Preprocess a {@link Cesium3DTileContent}, to determine the type of content\n * and to parse JSON files into objects.\n *\n * @param {ArrayBuffer} arrayBuffer The raw binary payload\n * @return {PreprocessedContent}\n * @private\n */\nexport default function preprocess3DTileContent(arrayBuffer) {\n  const uint8Array = new Uint8Array(arrayBuffer);\n  let contentType = getMagic(uint8Array);\n\n  // We use glTF for JSON glTF files. For binary glTF, we rename this\n  // to glb to disambiguate\n  if (contentType === \"glTF\") {\n    contentType = \"glb\";\n  }\n\n  if (Cesium3DTileContentType.isBinaryFormat(contentType)) {\n    return {\n      // For binary files, the enum value is the magic number\n      contentType: contentType,\n      binaryPayload: uint8Array,\n    };\n  }\n\n  const json = getJsonContent(uint8Array);\n  if (defined(json.root)) {\n    // Most likely a tileset JSON\n    return {\n      contentType: Cesium3DTileContentType.EXTERNAL_TILESET,\n      jsonPayload: json,\n    };\n  }\n\n  if (defined(json.asset)) {\n    // Most likely a glTF. Tileset JSON also has an \"asset\" property\n    // so this check needs to happen second\n    return {\n      contentType: Cesium3DTileContentType.GLTF,\n      jsonPayload: json,\n    };\n  }\n\n  if (defined(json.tileAvailability)) {\n    // Most likely a subtree JSON.\n    return {\n      contentType: Cesium3DTileContentType.IMPLICIT_SUBTREE_JSON,\n      jsonPayload: json,\n    };\n  }\n\n  if (defined(json.type)) {\n    // Most likely a GeoJSON\n    return {\n      contentType: Cesium3DTileContentType.GEOJSON,\n      jsonPayload: json,\n    };\n  }\n\n  throw new RuntimeError(\"Invalid tile content.\");\n}\n\nfunction getJsonContent(uint8Array) {\n  let json;\n\n  try {\n    json = getJsonFromTypedArray(uint8Array);\n  } catch (error) {\n    throw new RuntimeError(\"Invalid tile content.\");\n  }\n\n  return json;\n}\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport WebGLConstants from \"../Core/WebGLConstants.js\";\nimport webGLConstantToGlslType from \"../Core/webGLConstantToGlslType.js\";\nimport addToArray from \"./GltfPipeline/addToArray.js\";\nimport ForEach from \"./GltfPipeline/ForEach.js\";\nimport usesExtension from \"./GltfPipeline/usesExtension.js\";\nimport ModelUtility from \"./ModelUtility.js\";\n\n/**\n * @private\n */\nfunction processModelMaterialsCommon(gltf, options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  if (!defined(gltf)) {\n    return;\n  }\n\n  if (!usesExtension(gltf, \"KHR_materials_common\")) {\n    return;\n  }\n\n  if (!usesExtension(gltf, \"KHR_techniques_webgl\")) {\n    if (!defined(gltf.extensions)) {\n      gltf.extensions = {};\n    }\n\n    gltf.extensions.KHR_techniques_webgl = {\n      programs: [],\n      shaders: [],\n      techniques: [],\n    };\n    gltf.extensionsUsed.push(\"KHR_techniques_webgl\");\n    gltf.extensionsRequired.push(\"KHR_techniques_webgl\");\n  }\n\n  const techniquesWebgl = gltf.extensions.KHR_techniques_webgl;\n\n  lightDefaults(gltf);\n\n  const lightParameters = generateLightParameters(gltf);\n\n  const primitiveByMaterial = ModelUtility.splitIncompatibleMaterials(gltf);\n\n  const techniques = {};\n  let generatedTechniques = false;\n  ForEach.material(gltf, function (material, materialIndex) {\n    if (\n      defined(material.extensions) &&\n      defined(material.extensions.KHR_materials_common)\n    ) {\n      const khrMaterialsCommon = material.extensions.KHR_materials_common;\n      const primitiveInfo = primitiveByMaterial[materialIndex];\n\n      const techniqueKey = getTechniqueKey(khrMaterialsCommon, primitiveInfo);\n      let technique = techniques[techniqueKey];\n\n      if (!defined(technique)) {\n        technique = generateTechnique(\n          gltf,\n          techniquesWebgl,\n          primitiveInfo,\n          khrMaterialsCommon,\n          lightParameters,\n          options.addBatchIdToGeneratedShaders\n        );\n        techniques[techniqueKey] = technique;\n        generatedTechniques = true;\n      }\n\n      const materialValues = {};\n      const values = khrMaterialsCommon.values;\n      let uniformName;\n      for (const valueName in values) {\n        if (\n          values.hasOwnProperty(valueName) &&\n          valueName !== \"transparent\" &&\n          valueName !== \"doubleSided\"\n        ) {\n          uniformName = `u_${valueName.toLowerCase()}`;\n          materialValues[uniformName] = values[valueName];\n        }\n      }\n\n      material.extensions.KHR_techniques_webgl = {\n        technique: technique,\n        values: materialValues,\n      };\n\n      material.alphaMode = \"OPAQUE\";\n      if (khrMaterialsCommon.transparent) {\n        material.alphaMode = \"BLEND\";\n      }\n\n      if (khrMaterialsCommon.doubleSided) {\n        material.doubleSided = true;\n      }\n    }\n  });\n\n  if (!generatedTechniques) {\n    return gltf;\n  }\n\n  // If any primitives have semantics that aren't declared in the generated\n  // shaders, we want to preserve them.\n  ModelUtility.ensureSemanticExistence(gltf);\n\n  return gltf;\n}\n\nfunction generateLightParameters(gltf) {\n  const result = {};\n\n  let lights;\n  if (\n    defined(gltf.extensions) &&\n    defined(gltf.extensions.KHR_materials_common)\n  ) {\n    lights = gltf.extensions.KHR_materials_common.lights;\n  }\n\n  if (defined(lights)) {\n    // Figure out which node references the light\n    const nodes = gltf.nodes;\n    for (const nodeName in nodes) {\n      if (nodes.hasOwnProperty(nodeName)) {\n        const node = nodes[nodeName];\n        if (\n          defined(node.extensions) &&\n          defined(node.extensions.KHR_materials_common)\n        ) {\n          const nodeLightId = node.extensions.KHR_materials_common.light;\n          if (defined(nodeLightId) && defined(lights[nodeLightId])) {\n            lights[nodeLightId].node = nodeName;\n          }\n          delete node.extensions.KHR_materials_common;\n        }\n      }\n    }\n\n    // Add light parameters to result\n    let lightCount = 0;\n    for (const lightName in lights) {\n      if (lights.hasOwnProperty(lightName)) {\n        const light = lights[lightName];\n        const lightType = light.type;\n        if (lightType !== \"ambient\" && !defined(light.node)) {\n          delete lights[lightName];\n          continue;\n        }\n        const lightBaseName = `light${lightCount.toString()}`;\n        light.baseName = lightBaseName;\n        let ambient;\n        let directional;\n        let point;\n        let spot;\n        switch (lightType) {\n          case \"ambient\":\n            ambient = light.ambient;\n            result[`${lightBaseName}Color`] = {\n              type: WebGLConstants.FLOAT_VEC3,\n              value: ambient.color,\n            };\n            break;\n          case \"directional\":\n            directional = light.directional;\n            result[`${lightBaseName}Color`] = {\n              type: WebGLConstants.FLOAT_VEC3,\n              value: directional.color,\n            };\n            if (defined(light.node)) {\n              result[`${lightBaseName}Transform`] = {\n                node: light.node,\n                semantic: \"MODELVIEW\",\n                type: WebGLConstants.FLOAT_MAT4,\n              };\n            }\n            break;\n          case \"point\":\n            point = light.point;\n            result[`${lightBaseName}Color`] = {\n              type: WebGLConstants.FLOAT_VEC3,\n              value: point.color,\n            };\n            if (defined(light.node)) {\n              result[`${lightBaseName}Transform`] = {\n                node: light.node,\n                semantic: \"MODELVIEW\",\n                type: WebGLConstants.FLOAT_MAT4,\n              };\n            }\n            result[`${lightBaseName}Attenuation`] = {\n              type: WebGLConstants.FLOAT_VEC3,\n              value: [\n                point.constantAttenuation,\n                point.linearAttenuation,\n                point.quadraticAttenuation,\n              ],\n            };\n            break;\n          case \"spot\":\n            spot = light.spot;\n            result[`${lightBaseName}Color`] = {\n              type: WebGLConstants.FLOAT_VEC3,\n              value: spot.color,\n            };\n            if (defined(light.node)) {\n              result[`${lightBaseName}Transform`] = {\n                node: light.node,\n                semantic: \"MODELVIEW\",\n                type: WebGLConstants.FLOAT_MAT4,\n              };\n              result[`${lightBaseName}InverseTransform`] = {\n                node: light.node,\n                semantic: \"MODELVIEWINVERSE\",\n                type: WebGLConstants.FLOAT_MAT4,\n                useInFragment: true,\n              };\n            }\n            result[`${lightBaseName}Attenuation`] = {\n              type: WebGLConstants.FLOAT_VEC3,\n              value: [\n                spot.constantAttenuation,\n                spot.linearAttenuation,\n                spot.quadraticAttenuation,\n              ],\n            };\n\n            result[`${lightBaseName}FallOff`] = {\n              type: WebGLConstants.FLOAT_VEC2,\n              value: [spot.fallOffAngle, spot.fallOffExponent],\n            };\n            break;\n        }\n        ++lightCount;\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction generateTechnique(\n  gltf,\n  techniquesWebgl,\n  primitiveInfo,\n  khrMaterialsCommon,\n  lightParameters,\n  addBatchIdToGeneratedShaders\n) {\n  if (!defined(khrMaterialsCommon)) {\n    khrMaterialsCommon = {};\n  }\n\n  addBatchIdToGeneratedShaders = defaultValue(\n    addBatchIdToGeneratedShaders,\n    false\n  );\n\n  const techniques = techniquesWebgl.techniques;\n  const shaders = techniquesWebgl.shaders;\n  const programs = techniquesWebgl.programs;\n  const lightingModel = khrMaterialsCommon.technique.toUpperCase();\n  let lights;\n  if (\n    defined(gltf.extensions) &&\n    defined(gltf.extensions.KHR_materials_common)\n  ) {\n    lights = gltf.extensions.KHR_materials_common.lights;\n  }\n\n  const parameterValues = khrMaterialsCommon.values;\n  const jointCount = defaultValue(khrMaterialsCommon.jointCount, 0);\n\n  let skinningInfo;\n  let hasSkinning = false;\n  let hasVertexColors = false;\n\n  if (defined(primitiveInfo)) {\n    skinningInfo = primitiveInfo.skinning;\n    hasSkinning = skinningInfo.skinned;\n    hasVertexColors = primitiveInfo.hasVertexColors;\n  }\n\n  let vertexShader = \"precision highp float;\\n\";\n  let fragmentShader = \"precision highp float;\\n\";\n\n  const hasNormals = lightingModel !== \"CONSTANT\";\n\n  // Add techniques\n  const techniqueUniforms = {\n    u_modelViewMatrix: {\n      semantic: usesExtension(gltf, \"CESIUM_RTC\")\n        ? \"CESIUM_RTC_MODELVIEW\"\n        : \"MODELVIEW\",\n      type: WebGLConstants.FLOAT_MAT4,\n    },\n    u_projectionMatrix: {\n      semantic: \"PROJECTION\",\n      type: WebGLConstants.FLOAT_MAT4,\n    },\n  };\n\n  if (hasNormals) {\n    techniqueUniforms.u_normalMatrix = {\n      semantic: \"MODELVIEWINVERSETRANSPOSE\",\n      type: WebGLConstants.FLOAT_MAT3,\n    };\n  }\n\n  if (hasSkinning) {\n    techniqueUniforms.u_jointMatrix = {\n      count: jointCount,\n      semantic: \"JOINTMATRIX\",\n      type: WebGLConstants.FLOAT_MAT4,\n    };\n  }\n\n  // Add material values\n  let uniformName;\n  let hasTexCoords = false;\n  for (const name in parameterValues) {\n    //generate shader parameters for KHR_materials_common attributes\n    //(including a check, because some boolean flags should not be used as shader parameters)\n    if (\n      parameterValues.hasOwnProperty(name) &&\n      name !== \"transparent\" &&\n      name !== \"doubleSided\"\n    ) {\n      const uniformType = getKHRMaterialsCommonValueType(\n        name,\n        parameterValues[name]\n      );\n      uniformName = `u_${name.toLowerCase()}`;\n      if (!hasTexCoords && uniformType === WebGLConstants.SAMPLER_2D) {\n        hasTexCoords = true;\n      }\n\n      techniqueUniforms[uniformName] = {\n        type: uniformType,\n      };\n    }\n  }\n\n  // Give the diffuse uniform a semantic to support color replacement in 3D Tiles\n  if (defined(techniqueUniforms.u_diffuse)) {\n    techniqueUniforms.u_diffuse.semantic = \"_3DTILESDIFFUSE\";\n  }\n\n  // Copy light parameters into technique parameters\n  if (defined(lightParameters)) {\n    for (const lightParamName in lightParameters) {\n      if (lightParameters.hasOwnProperty(lightParamName)) {\n        uniformName = `u_${lightParamName}`;\n        techniqueUniforms[uniformName] = lightParameters[lightParamName];\n      }\n    }\n  }\n\n  // Add uniforms to shaders\n  for (uniformName in techniqueUniforms) {\n    if (techniqueUniforms.hasOwnProperty(uniformName)) {\n      const uniform = techniqueUniforms[uniformName];\n      const arraySize = defined(uniform.count) ? `[${uniform.count}]` : \"\";\n      if (\n        (uniform.type !== WebGLConstants.FLOAT_MAT3 &&\n          uniform.type !== WebGLConstants.FLOAT_MAT4) ||\n        uniform.useInFragment\n      ) {\n        fragmentShader += `uniform ${webGLConstantToGlslType(\n          uniform.type\n        )} ${uniformName}${arraySize};\\n`;\n        delete uniform.useInFragment;\n      } else {\n        vertexShader += `uniform ${webGLConstantToGlslType(\n          uniform.type\n        )} ${uniformName}${arraySize};\\n`;\n      }\n    }\n  }\n\n  // Add attributes with semantics\n  let vertexShaderMain = \"\";\n  if (hasSkinning) {\n    vertexShaderMain +=\n      \"    mat4 skinMatrix =\\n\" +\n      \"        a_weight.x * u_jointMatrix[int(a_joint.x)] +\\n\" +\n      \"        a_weight.y * u_jointMatrix[int(a_joint.y)] +\\n\" +\n      \"        a_weight.z * u_jointMatrix[int(a_joint.z)] +\\n\" +\n      \"        a_weight.w * u_jointMatrix[int(a_joint.w)];\\n\";\n  }\n\n  // Add position always\n  const techniqueAttributes = {\n    a_position: {\n      semantic: \"POSITION\",\n    },\n  };\n  vertexShader += \"attribute vec3 a_position;\\n\";\n  vertexShader += \"varying vec3 v_positionEC;\\n\";\n  if (hasSkinning) {\n    vertexShaderMain +=\n      \"  vec4 pos = u_modelViewMatrix * skinMatrix * vec4(a_position,1.0);\\n\";\n  } else {\n    vertexShaderMain +=\n      \"  vec4 pos = u_modelViewMatrix * vec4(a_position,1.0);\\n\";\n  }\n  vertexShaderMain += \"  v_positionEC = pos.xyz;\\n\";\n  vertexShaderMain += \"  gl_Position = u_projectionMatrix * pos;\\n\";\n  fragmentShader += \"varying vec3 v_positionEC;\\n\";\n\n  // Add normal if we don't have constant lighting\n  if (hasNormals) {\n    techniqueAttributes.a_normal = {\n      semantic: \"NORMAL\",\n    };\n    vertexShader += \"attribute vec3 a_normal;\\n\";\n    vertexShader += \"varying vec3 v_normal;\\n\";\n    if (hasSkinning) {\n      vertexShaderMain +=\n        \"  v_normal = u_normalMatrix * mat3(skinMatrix) * a_normal;\\n\";\n    } else {\n      vertexShaderMain += \"  v_normal = u_normalMatrix * a_normal;\\n\";\n    }\n\n    fragmentShader += \"varying vec3 v_normal;\\n\";\n  }\n\n  // Add texture coordinates if the material uses them\n  let v_texcoord;\n  if (hasTexCoords) {\n    techniqueAttributes.a_texcoord_0 = {\n      semantic: \"TEXCOORD_0\",\n    };\n\n    v_texcoord = \"v_texcoord_0\";\n    vertexShader += \"attribute vec2 a_texcoord_0;\\n\";\n    vertexShader += `varying vec2 ${v_texcoord};\\n`;\n    vertexShaderMain += `  ${v_texcoord} = a_texcoord_0;\\n`;\n\n    fragmentShader += `varying vec2 ${v_texcoord};\\n`;\n  }\n\n  if (hasSkinning) {\n    techniqueAttributes.a_joint = {\n      semantic: \"JOINTS_0\",\n    };\n    techniqueAttributes.a_weight = {\n      semantic: \"WEIGHTS_0\",\n    };\n\n    vertexShader += \"attribute vec4 a_joint;\\n\";\n    vertexShader += \"attribute vec4 a_weight;\\n\";\n  }\n\n  if (hasVertexColors) {\n    techniqueAttributes.a_vertexColor = {\n      semantic: \"COLOR_0\",\n    };\n    vertexShader += \"attribute vec4 a_vertexColor;\\n\";\n    vertexShader += \"varying vec4 v_vertexColor;\\n\";\n    vertexShaderMain += \"  v_vertexColor = a_vertexColor;\\n\";\n    fragmentShader += \"varying vec4 v_vertexColor;\\n\";\n  }\n\n  if (addBatchIdToGeneratedShaders) {\n    techniqueAttributes.a_batchId = {\n      semantic: \"_BATCHID\",\n    };\n    vertexShader += \"attribute float a_batchId;\\n\";\n  }\n\n  const hasSpecular =\n    hasNormals &&\n    (lightingModel === \"BLINN\" || lightingModel === \"PHONG\") &&\n    defined(techniqueUniforms.u_specular) &&\n    defined(techniqueUniforms.u_shininess) &&\n    techniqueUniforms.u_shininess > 0.0;\n\n  // Generate lighting code blocks\n  let hasNonAmbientLights = false;\n  let hasAmbientLights = false;\n  let fragmentLightingBlock = \"\";\n  for (const lightName in lights) {\n    if (lights.hasOwnProperty(lightName)) {\n      const light = lights[lightName];\n      const lightType = light.type.toLowerCase();\n      const lightBaseName = light.baseName;\n      fragmentLightingBlock += \"  {\\n\";\n      const lightColorName = `u_${lightBaseName}Color`;\n      if (lightType === \"ambient\") {\n        hasAmbientLights = true;\n        fragmentLightingBlock += `    ambientLight += ${lightColorName};\\n`;\n      } else if (hasNormals) {\n        hasNonAmbientLights = true;\n        const varyingDirectionName = `v_${lightBaseName}Direction`;\n        const varyingPositionName = `v_${lightBaseName}Position`;\n\n        if (lightType !== \"point\") {\n          vertexShader += `varying vec3 ${varyingDirectionName};\\n`;\n          fragmentShader += `varying vec3 ${varyingDirectionName};\\n`;\n\n          vertexShaderMain += `  ${varyingDirectionName} = mat3(u_${lightBaseName}Transform) * vec3(0.,0.,1.);\\n`;\n          if (lightType === \"directional\") {\n            fragmentLightingBlock += `    vec3 l = normalize(${varyingDirectionName});\\n`;\n          }\n        }\n\n        if (lightType !== \"directional\") {\n          vertexShader += `varying vec3 ${varyingPositionName};\\n`;\n          fragmentShader += `varying vec3 ${varyingPositionName};\\n`;\n\n          vertexShaderMain += `  ${varyingPositionName} = u_${lightBaseName}Transform[3].xyz;\\n`;\n          fragmentLightingBlock += `    vec3 VP = ${varyingPositionName} - v_positionEC;\\n`;\n          fragmentLightingBlock += \"    vec3 l = normalize(VP);\\n\";\n          fragmentLightingBlock += \"    float range = length(VP);\\n\";\n          fragmentLightingBlock += `    float attenuation = 1.0 / (u_${lightBaseName}Attenuation.x + `;\n          fragmentLightingBlock += `(u_${lightBaseName}Attenuation.y * range) + `;\n          fragmentLightingBlock += `(u_${lightBaseName}Attenuation.z * range * range));\\n`;\n        } else {\n          fragmentLightingBlock += \"    float attenuation = 1.0;\\n\";\n        }\n\n        if (lightType === \"spot\") {\n          fragmentLightingBlock += `    float spotDot = dot(l, normalize(${varyingDirectionName}));\\n`;\n          fragmentLightingBlock += `    if (spotDot < cos(u_${lightBaseName}FallOff.x * 0.5))\\n`;\n          fragmentLightingBlock += \"    {\\n\";\n          fragmentLightingBlock += \"      attenuation = 0.0;\\n\";\n          fragmentLightingBlock += \"    }\\n\";\n          fragmentLightingBlock += \"    else\\n\";\n          fragmentLightingBlock += \"    {\\n\";\n          fragmentLightingBlock += `        attenuation *= max(0.0, pow(spotDot, u_${lightBaseName}FallOff.y));\\n`;\n          fragmentLightingBlock += \"    }\\n\";\n        }\n\n        fragmentLightingBlock += `    diffuseLight += ${lightColorName}* max(dot(normal,l), 0.) * attenuation;\\n`;\n\n        if (hasSpecular) {\n          if (lightingModel === \"BLINN\") {\n            fragmentLightingBlock += \"    vec3 h = normalize(l + viewDir);\\n\";\n            fragmentLightingBlock +=\n              \"    float specularIntensity = max(0., pow(max(dot(normal, h), 0.), u_shininess)) * attenuation;\\n\";\n          } else {\n            // PHONG\n            fragmentLightingBlock +=\n              \"    vec3 reflectDir = reflect(-l, normal);\\n\";\n            fragmentLightingBlock +=\n              \"    float specularIntensity = max(0., pow(max(dot(reflectDir, viewDir), 0.), u_shininess)) * attenuation;\\n\";\n          }\n          fragmentLightingBlock += `    specularLight += ${lightColorName} * specularIntensity;\\n`;\n        }\n      }\n      fragmentLightingBlock += \"  }\\n\";\n    }\n  }\n\n  if (!hasAmbientLights) {\n    // Add an ambient light if we don't have one\n    fragmentLightingBlock += \"  ambientLight += vec3(0.2, 0.2, 0.2);\\n\";\n  }\n\n  if (!hasNonAmbientLights && lightingModel !== \"CONSTANT\") {\n    fragmentShader += \"#ifdef USE_CUSTOM_LIGHT_COLOR \\n\";\n    fragmentShader += \"uniform vec3 gltf_lightColor; \\n\";\n    fragmentShader += \"#endif \\n\";\n\n    fragmentLightingBlock += \"#ifndef USE_CUSTOM_LIGHT_COLOR \\n\";\n    fragmentLightingBlock += \"    vec3 lightColor = czm_lightColor;\\n\";\n    fragmentLightingBlock += \"#else \\n\";\n    fragmentLightingBlock += \"    vec3 lightColor = gltf_lightColor;\\n\";\n    fragmentLightingBlock += \"#endif \\n\";\n\n    fragmentLightingBlock += \"  vec3 l = normalize(czm_lightDirectionEC);\\n\";\n    const minimumLighting = \"0.2\"; // Use strings instead of values as 0.0 -> 0 when stringified\n    fragmentLightingBlock += `  diffuseLight += lightColor * max(dot(normal,l), ${minimumLighting});\\n`;\n\n    if (hasSpecular) {\n      if (lightingModel === \"BLINN\") {\n        fragmentLightingBlock += \"  vec3 h = normalize(l + viewDir);\\n\";\n        fragmentLightingBlock +=\n          \"  float specularIntensity = max(0., pow(max(dot(normal, h), 0.), u_shininess));\\n\";\n      } else {\n        // PHONG\n        fragmentLightingBlock += \"  vec3 reflectDir = reflect(-l, normal);\\n\";\n        fragmentLightingBlock +=\n          \"  float specularIntensity = max(0., pow(max(dot(reflectDir, viewDir), 0.), u_shininess));\\n\";\n      }\n\n      fragmentLightingBlock +=\n        \"  specularLight += lightColor * specularIntensity;\\n\";\n    }\n  }\n\n  vertexShader += \"void main(void) {\\n\";\n  vertexShader += vertexShaderMain;\n  vertexShader += \"}\\n\";\n\n  fragmentShader += \"void main(void) {\\n\";\n  let colorCreationBlock = \"  vec3 color = vec3(0.0, 0.0, 0.0);\\n\";\n  if (hasNormals) {\n    fragmentShader += \"  vec3 normal = normalize(v_normal);\\n\";\n    if (khrMaterialsCommon.doubleSided) {\n      fragmentShader += \"  if (czm_backFacing())\\n\";\n      fragmentShader += \"  {\\n\";\n      fragmentShader += \"    normal = -normal;\\n\";\n      fragmentShader += \"  }\\n\";\n    }\n  }\n\n  let finalColorComputation;\n  if (lightingModel !== \"CONSTANT\") {\n    if (defined(techniqueUniforms.u_diffuse)) {\n      if (techniqueUniforms.u_diffuse.type === WebGLConstants.SAMPLER_2D) {\n        fragmentShader += `  vec4 diffuse = texture2D(u_diffuse, ${v_texcoord});\\n`;\n      } else {\n        fragmentShader += \"  vec4 diffuse = u_diffuse;\\n\";\n      }\n      fragmentShader += \"  vec3 diffuseLight = vec3(0.0, 0.0, 0.0);\\n\";\n      colorCreationBlock += \"  color += diffuse.rgb * diffuseLight;\\n\";\n    }\n\n    if (hasSpecular) {\n      if (techniqueUniforms.u_specular.type === WebGLConstants.SAMPLER_2D) {\n        fragmentShader += `  vec3 specular = texture2D(u_specular, ${v_texcoord}).rgb;\\n`;\n      } else {\n        fragmentShader += \"  vec3 specular = u_specular.rgb;\\n\";\n      }\n      fragmentShader += \"  vec3 specularLight = vec3(0.0, 0.0, 0.0);\\n\";\n      colorCreationBlock += \"  color += specular * specularLight;\\n\";\n    }\n\n    if (defined(techniqueUniforms.u_transparency)) {\n      finalColorComputation =\n        \"  gl_FragColor = vec4(color * diffuse.a * u_transparency, diffuse.a * u_transparency);\\n\";\n    } else {\n      finalColorComputation =\n        \"  gl_FragColor = vec4(color * diffuse.a, diffuse.a);\\n\";\n    }\n  } else if (defined(techniqueUniforms.u_transparency)) {\n    finalColorComputation =\n      \"  gl_FragColor = vec4(color * u_transparency, u_transparency);\\n\";\n  } else {\n    finalColorComputation = \"  gl_FragColor = vec4(color, 1.0);\\n\";\n  }\n\n  if (hasVertexColors) {\n    colorCreationBlock += \"  color *= v_vertexColor.rgb;\\n\";\n  }\n\n  if (defined(techniqueUniforms.u_emission)) {\n    if (techniqueUniforms.u_emission.type === WebGLConstants.SAMPLER_2D) {\n      fragmentShader += `  vec3 emission = texture2D(u_emission, ${v_texcoord}).rgb;\\n`;\n    } else {\n      fragmentShader += \"  vec3 emission = u_emission.rgb;\\n\";\n    }\n    colorCreationBlock += \"  color += emission;\\n\";\n  }\n\n  if (defined(techniqueUniforms.u_ambient) || lightingModel !== \"CONSTANT\") {\n    if (defined(techniqueUniforms.u_ambient)) {\n      if (techniqueUniforms.u_ambient.type === WebGLConstants.SAMPLER_2D) {\n        fragmentShader += `  vec3 ambient = texture2D(u_ambient, ${v_texcoord}).rgb;\\n`;\n      } else {\n        fragmentShader += \"  vec3 ambient = u_ambient.rgb;\\n\";\n      }\n    } else {\n      fragmentShader += \"  vec3 ambient = diffuse.rgb;\\n\";\n    }\n    colorCreationBlock += \"  color += ambient * ambientLight;\\n\";\n  }\n  fragmentShader += \"  vec3 viewDir = -normalize(v_positionEC);\\n\";\n  fragmentShader += \"  vec3 ambientLight = vec3(0.0, 0.0, 0.0);\\n\";\n\n  // Add in light computations\n  fragmentShader += fragmentLightingBlock;\n\n  fragmentShader += colorCreationBlock;\n  fragmentShader += finalColorComputation;\n  fragmentShader += \"}\\n\";\n\n  // Add shaders\n  const vertexShaderId = addToArray(shaders, {\n    type: WebGLConstants.VERTEX_SHADER,\n    extras: {\n      _pipeline: {\n        source: vertexShader,\n        extension: \".glsl\",\n      },\n    },\n  });\n\n  const fragmentShaderId = addToArray(shaders, {\n    type: WebGLConstants.FRAGMENT_SHADER,\n    extras: {\n      _pipeline: {\n        source: fragmentShader,\n        extension: \".glsl\",\n      },\n    },\n  });\n\n  // Add program\n  const programId = addToArray(programs, {\n    fragmentShader: fragmentShaderId,\n    vertexShader: vertexShaderId,\n  });\n\n  const techniqueId = addToArray(techniques, {\n    attributes: techniqueAttributes,\n    program: programId,\n    uniforms: techniqueUniforms,\n  });\n\n  return techniqueId;\n}\n\nfunction getKHRMaterialsCommonValueType(paramName, paramValue) {\n  let value;\n\n  // Backwards compatibility for COLLADA2GLTF v1.0-draft when it encoding\n  // materials using KHR_materials_common with explicit type/value members\n  if (defined(paramValue.value)) {\n    value = paramValue.value;\n  } else if (defined(paramValue.index)) {\n    value = [paramValue.index];\n  } else {\n    value = paramValue;\n  }\n\n  switch (paramName) {\n    case \"ambient\":\n      return value.length === 1\n        ? WebGLConstants.SAMPLER_2D\n        : WebGLConstants.FLOAT_VEC4;\n    case \"diffuse\":\n      return value.length === 1\n        ? WebGLConstants.SAMPLER_2D\n        : WebGLConstants.FLOAT_VEC4;\n    case \"emission\":\n      return value.length === 1\n        ? WebGLConstants.SAMPLER_2D\n        : WebGLConstants.FLOAT_VEC4;\n    case \"specular\":\n      return value.length === 1\n        ? WebGLConstants.SAMPLER_2D\n        : WebGLConstants.FLOAT_VEC4;\n    case \"shininess\":\n      return WebGLConstants.FLOAT;\n    case \"transparency\":\n      return WebGLConstants.FLOAT;\n\n    // these two are usually not used directly within shaders,\n    // they are just added here for completeness\n    case \"transparent\":\n      return WebGLConstants.BOOL;\n    case \"doubleSided\":\n      return WebGLConstants.BOOL;\n  }\n}\n\nfunction getTechniqueKey(khrMaterialsCommon, primitiveInfo) {\n  let techniqueKey = \"\";\n  techniqueKey += `technique:${khrMaterialsCommon.technique};`;\n\n  const values = khrMaterialsCommon.values;\n  const keys = Object.keys(values).sort();\n  const keysCount = keys.length;\n  for (let i = 0; i < keysCount; ++i) {\n    const name = keys[i];\n    if (values.hasOwnProperty(name)) {\n      techniqueKey += `${name}:${getKHRMaterialsCommonValueType(\n        name,\n        values[name]\n      )}`;\n      techniqueKey += \";\";\n    }\n  }\n\n  const jointCount = defaultValue(khrMaterialsCommon.jointCount, 0);\n  techniqueKey += `${jointCount.toString()};`;\n  if (defined(primitiveInfo)) {\n    const skinningInfo = primitiveInfo.skinning;\n    if (jointCount > 0) {\n      techniqueKey += `${skinningInfo.type};`;\n    }\n    techniqueKey += primitiveInfo.hasVertexColors;\n  }\n\n  return techniqueKey;\n}\n\nfunction lightDefaults(gltf) {\n  const khrMaterialsCommon = gltf.extensions.KHR_materials_common;\n  if (!defined(khrMaterialsCommon) || !defined(khrMaterialsCommon.lights)) {\n    return;\n  }\n\n  const lights = khrMaterialsCommon.lights;\n\n  const lightsLength = lights.length;\n  for (let lightId = 0; lightId < lightsLength; lightId++) {\n    const light = lights[lightId];\n    if (light.type === \"ambient\") {\n      if (!defined(light.ambient)) {\n        light.ambient = {};\n      }\n      const ambientLight = light.ambient;\n\n      if (!defined(ambientLight.color)) {\n        ambientLight.color = [1.0, 1.0, 1.0];\n      }\n    } else if (light.type === \"directional\") {\n      if (!defined(light.directional)) {\n        light.directional = {};\n      }\n      const directionalLight = light.directional;\n\n      if (!defined(directionalLight.color)) {\n        directionalLight.color = [1.0, 1.0, 1.0];\n      }\n    } else if (light.type === \"point\") {\n      if (!defined(light.point)) {\n        light.point = {};\n      }\n      const pointLight = light.point;\n\n      if (!defined(pointLight.color)) {\n        pointLight.color = [1.0, 1.0, 1.0];\n      }\n\n      pointLight.constantAttenuation = defaultValue(\n        pointLight.constantAttenuation,\n        1.0\n      );\n      pointLight.linearAttenuation = defaultValue(\n        pointLight.linearAttenuation,\n        0.0\n      );\n      pointLight.quadraticAttenuation = defaultValue(\n        pointLight.quadraticAttenuation,\n        0.0\n      );\n    } else if (light.type === \"spot\") {\n      if (!defined(light.spot)) {\n        light.spot = {};\n      }\n      const spotLight = light.spot;\n\n      if (!defined(spotLight.color)) {\n        spotLight.color = [1.0, 1.0, 1.0];\n      }\n\n      spotLight.constantAttenuation = defaultValue(\n        spotLight.constantAttenuation,\n        1.0\n      );\n      spotLight.fallOffAngle = defaultValue(spotLight.fallOffAngle, 3.14159265);\n      spotLight.fallOffExponent = defaultValue(spotLight.fallOffExponent, 0.0);\n      spotLight.linearAttenuation = defaultValue(\n        spotLight.linearAttenuation,\n        0.0\n      );\n      spotLight.quadraticAttenuation = defaultValue(\n        spotLight.quadraticAttenuation,\n        0.0\n      );\n    }\n  }\n}\nexport default processModelMaterialsCommon;\n","import defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport WebGLConstants from \"../Core/WebGLConstants.js\";\nimport webGLConstantToGlslType from \"../Core/webGLConstantToGlslType.js\";\nimport addToArray from \"./GltfPipeline/addToArray.js\";\nimport ForEach from \"./GltfPipeline/ForEach.js\";\nimport usesExtension from \"./GltfPipeline/usesExtension.js\";\nimport ModelUtility from \"./ModelUtility.js\";\n\n/**\n * @private\n */\nfunction processPbrMaterials(gltf, options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  // No need to create new techniques if they already exist,\n  // the shader should handle these values\n  if (usesExtension(gltf, \"KHR_techniques_webgl\")) {\n    return gltf;\n  }\n\n  // All materials in glTF are PBR by default,\n  // so we should apply PBR unless no materials are found.\n  if (!defined(gltf.materials) || gltf.materials.length === 0) {\n    return gltf;\n  }\n\n  if (!defined(gltf.extensions)) {\n    gltf.extensions = {};\n  }\n\n  if (!defined(gltf.extensionsUsed)) {\n    gltf.extensionsUsed = [];\n  }\n\n  if (!defined(gltf.extensionsRequired)) {\n    gltf.extensionsRequired = [];\n  }\n\n  gltf.extensions.KHR_techniques_webgl = {\n    programs: [],\n    shaders: [],\n    techniques: [],\n  };\n\n  gltf.extensionsUsed.push(\"KHR_techniques_webgl\");\n  gltf.extensionsRequired.push(\"KHR_techniques_webgl\");\n\n  const primitiveByMaterial = ModelUtility.splitIncompatibleMaterials(gltf);\n\n  ForEach.material(gltf, function (material, materialIndex) {\n    const generatedMaterialValues = {};\n    const technique = generateTechnique(\n      gltf,\n      material,\n      materialIndex,\n      generatedMaterialValues,\n      primitiveByMaterial,\n      options\n    );\n\n    if (!defined(material.extensions)) {\n      material.extensions = {};\n    }\n\n    material.extensions.KHR_techniques_webgl = {\n      values: generatedMaterialValues,\n      technique: technique,\n    };\n  });\n\n  // If any primitives have semantics that aren't declared in the generated\n  // shaders, we want to preserve them.\n  ModelUtility.ensureSemanticExistence(gltf);\n\n  return gltf;\n}\n\nfunction isSpecularGlossinessMaterial(material) {\n  return (\n    defined(material.extensions) &&\n    defined(material.extensions.KHR_materials_pbrSpecularGlossiness)\n  );\n}\n\nfunction addTextureCoordinates(\n  gltf,\n  textureName,\n  generatedMaterialValues,\n  defaultTexCoord,\n  result\n) {\n  let texCoord;\n  const texInfo = generatedMaterialValues[textureName];\n  if (defined(texInfo) && defined(texInfo.texCoord) && texInfo.texCoord === 1) {\n    defaultTexCoord = defaultTexCoord.replace(\"0\", \"1\");\n  }\n  if (defined(generatedMaterialValues[`${textureName}Offset`])) {\n    texCoord = `${textureName}Coord`;\n    result.fragmentShaderMain += `    vec2 ${texCoord} = computeTexCoord(${defaultTexCoord}, ${textureName}Offset, ${textureName}Rotation, ${textureName}Scale);\\n`;\n  } else {\n    texCoord = defaultTexCoord;\n  }\n  return texCoord;\n}\n\nconst DEFAULT_TEXTURE_OFFSET = [0.0, 0.0];\nconst DEFAULT_TEXTURE_ROTATION = [0.0];\nconst DEFAULT_TEXTURE_SCALE = [1.0, 1.0];\n\nfunction handleKHRTextureTransform(\n  parameterName,\n  value,\n  generatedMaterialValues\n) {\n  if (\n    parameterName.indexOf(\"Texture\") === -1 ||\n    !defined(value.extensions) ||\n    !defined(value.extensions.KHR_texture_transform)\n  ) {\n    return;\n  }\n\n  const uniformName = `u_${parameterName}`;\n  const extension = value.extensions.KHR_texture_transform;\n  generatedMaterialValues[`${uniformName}Offset`] = defaultValue(\n    extension.offset,\n    DEFAULT_TEXTURE_OFFSET\n  );\n  generatedMaterialValues[`${uniformName}Rotation`] = defaultValue(\n    extension.rotation,\n    DEFAULT_TEXTURE_ROTATION\n  );\n  generatedMaterialValues[`${uniformName}Scale`] = defaultValue(\n    extension.scale,\n    DEFAULT_TEXTURE_SCALE\n  );\n\n  if (defined(value.texCoord) && defined(extension.texCoord)) {\n    generatedMaterialValues[uniformName].texCoord = extension.texCoord;\n  }\n}\n\nfunction generateTechnique(\n  gltf,\n  material,\n  materialIndex,\n  generatedMaterialValues,\n  primitiveByMaterial,\n  options\n) {\n  const addBatchIdToGeneratedShaders = defaultValue(\n    options.addBatchIdToGeneratedShaders,\n    false\n  );\n\n  const techniquesWebgl = gltf.extensions.KHR_techniques_webgl;\n  const techniques = techniquesWebgl.techniques;\n  const shaders = techniquesWebgl.shaders;\n  const programs = techniquesWebgl.programs;\n\n  const useSpecGloss = isSpecularGlossinessMaterial(material);\n\n  let uniformName;\n  let parameterName;\n  let value;\n  if (!useSpecGloss) {\n    const pbrMetallicRoughness = material.pbrMetallicRoughness;\n    if (defined(pbrMetallicRoughness)) {\n      for (parameterName in pbrMetallicRoughness) {\n        if (pbrMetallicRoughness.hasOwnProperty(parameterName)) {\n          value = pbrMetallicRoughness[parameterName];\n          uniformName = `u_${parameterName}`;\n          generatedMaterialValues[uniformName] = value;\n          handleKHRTextureTransform(\n            parameterName,\n            value,\n            generatedMaterialValues\n          );\n        }\n      }\n    } else {\n      // Add a uniform for baseColorFactor and set the default value. Otherwise\n      // glTFs without a pbrMetallicRoughness object will not be styled correctly\n      // when using Cesium3DTileColorBlendMode.REPLACE.\n      generatedMaterialValues[\"u_baseColorFactor\"] = [1.0, 1.0, 1.0, 1.0];\n    }\n  }\n\n  if (useSpecGloss) {\n    const pbrSpecularGlossiness =\n      material.extensions.KHR_materials_pbrSpecularGlossiness;\n    for (parameterName in pbrSpecularGlossiness) {\n      if (pbrSpecularGlossiness.hasOwnProperty(parameterName)) {\n        value = pbrSpecularGlossiness[parameterName];\n        uniformName = `u_${parameterName}`;\n        generatedMaterialValues[uniformName] = value;\n        handleKHRTextureTransform(\n          parameterName,\n          value,\n          generatedMaterialValues\n        );\n      }\n    }\n  }\n\n  for (const additional in material) {\n    if (\n      material.hasOwnProperty(additional) &&\n      (additional.indexOf(\"Texture\") >= 0 || additional.indexOf(\"Factor\") >= 0)\n    ) {\n      value = material[additional];\n      uniformName = `u_${additional}`;\n      generatedMaterialValues[uniformName] = value;\n      handleKHRTextureTransform(additional, value, generatedMaterialValues);\n    }\n  }\n\n  let vertexShader = \"precision highp float;\\n\";\n  let fragmentShader = \"precision highp float;\\n\";\n\n  let skin;\n  if (defined(gltf.skins)) {\n    skin = gltf.skins[0];\n  }\n  const joints = defined(skin) ? skin.joints : [];\n  const jointCount = joints.length;\n\n  const primitiveInfo = primitiveByMaterial[materialIndex];\n\n  let skinningInfo;\n  let hasSkinning = false;\n  let hasVertexColors = false;\n  let hasMorphTargets = false;\n  let hasNormals = false;\n  let hasTangents = false;\n  let hasTexCoords = false;\n  let hasTexCoord1 = false;\n  let hasOutline = false;\n  let isUnlit = false;\n\n  if (defined(primitiveInfo)) {\n    skinningInfo = primitiveInfo.skinning;\n    hasSkinning = skinningInfo.skinned && joints.length > 0;\n    hasVertexColors = primitiveInfo.hasVertexColors;\n    hasMorphTargets = primitiveInfo.hasMorphTargets;\n    hasNormals = primitiveInfo.hasNormals;\n    hasTangents = primitiveInfo.hasTangents;\n    hasTexCoords = primitiveInfo.hasTexCoords;\n    hasTexCoord1 = primitiveInfo.hasTexCoord1;\n    hasOutline = primitiveInfo.hasOutline;\n  }\n\n  let morphTargets;\n  if (hasMorphTargets) {\n    ForEach.mesh(gltf, function (mesh) {\n      ForEach.meshPrimitive(mesh, function (primitive) {\n        if (primitive.material === materialIndex) {\n          const targets = primitive.targets;\n          if (defined(targets)) {\n            morphTargets = targets;\n          }\n        }\n      });\n    });\n  }\n\n  // Add techniques\n  const techniqueUniforms = {\n    // Add matrices\n    u_modelViewMatrix: {\n      semantic: usesExtension(gltf, \"CESIUM_RTC\")\n        ? \"CESIUM_RTC_MODELVIEW\"\n        : \"MODELVIEW\",\n      type: WebGLConstants.FLOAT_MAT4,\n    },\n    u_projectionMatrix: {\n      semantic: \"PROJECTION\",\n      type: WebGLConstants.FLOAT_MAT4,\n    },\n  };\n\n  if (\n    defined(material.extensions) &&\n    defined(material.extensions.KHR_materials_unlit)\n  ) {\n    isUnlit = true;\n  }\n\n  if (hasNormals) {\n    techniqueUniforms.u_normalMatrix = {\n      semantic: \"MODELVIEWINVERSETRANSPOSE\",\n      type: WebGLConstants.FLOAT_MAT3,\n    };\n  }\n\n  if (hasSkinning) {\n    techniqueUniforms.u_jointMatrix = {\n      count: jointCount,\n      semantic: \"JOINTMATRIX\",\n      type: WebGLConstants.FLOAT_MAT4,\n    };\n  }\n\n  if (hasMorphTargets) {\n    techniqueUniforms.u_morphWeights = {\n      count: morphTargets.length,\n      semantic: \"MORPHWEIGHTS\",\n      type: WebGLConstants.FLOAT,\n    };\n  }\n\n  const alphaMode = material.alphaMode;\n  if (defined(alphaMode) && alphaMode === \"MASK\") {\n    techniqueUniforms.u_alphaCutoff = {\n      semantic: \"ALPHACUTOFF\",\n      type: WebGLConstants.FLOAT,\n    };\n  }\n\n  // Add material values\n  for (uniformName in generatedMaterialValues) {\n    if (generatedMaterialValues.hasOwnProperty(uniformName)) {\n      techniqueUniforms[uniformName] = {\n        type: getPBRValueType(uniformName),\n      };\n    }\n  }\n\n  const baseColorUniform = defaultValue(\n    techniqueUniforms.u_baseColorTexture,\n    techniqueUniforms.u_baseColorFactor\n  );\n  if (defined(baseColorUniform)) {\n    baseColorUniform.semantic = \"_3DTILESDIFFUSE\";\n  }\n\n  // Add uniforms to shaders\n  for (uniformName in techniqueUniforms) {\n    if (techniqueUniforms.hasOwnProperty(uniformName)) {\n      const uniform = techniqueUniforms[uniformName];\n      const arraySize = defined(uniform.count) ? `[${uniform.count}]` : \"\";\n      if (\n        (uniform.type !== WebGLConstants.FLOAT_MAT3 &&\n          uniform.type !== WebGLConstants.FLOAT_MAT4 &&\n          uniformName !== \"u_morphWeights\") ||\n        uniform.useInFragment\n      ) {\n        fragmentShader += `uniform ${webGLConstantToGlslType(\n          uniform.type\n        )} ${uniformName}${arraySize};\\n`;\n        delete uniform.useInFragment;\n      } else {\n        vertexShader += `uniform ${webGLConstantToGlslType(\n          uniform.type\n        )} ${uniformName}${arraySize};\\n`;\n      }\n    }\n  }\n\n  if (hasOutline) {\n    fragmentShader += \"uniform sampler2D u_outlineTexture;\\n\";\n  }\n\n  // Add attributes with semantics\n  let vertexShaderMain = \"\";\n  if (hasSkinning) {\n    vertexShaderMain +=\n      \"    mat4 skinMatrix =\\n\" +\n      \"        a_weight.x * u_jointMatrix[int(a_joint.x)] +\\n\" +\n      \"        a_weight.y * u_jointMatrix[int(a_joint.y)] +\\n\" +\n      \"        a_weight.z * u_jointMatrix[int(a_joint.z)] +\\n\" +\n      \"        a_weight.w * u_jointMatrix[int(a_joint.w)];\\n\";\n  }\n\n  // Add position always\n  const techniqueAttributes = {\n    a_position: {\n      semantic: \"POSITION\",\n    },\n  };\n\n  if (hasOutline) {\n    techniqueAttributes.a_outlineCoordinates = {\n      semantic: \"_OUTLINE_COORDINATES\",\n    };\n  }\n\n  vertexShader += \"attribute vec3 a_position;\\n\";\n  if (hasNormals) {\n    vertexShader += \"varying vec3 v_positionEC;\\n\";\n  }\n  if (hasOutline) {\n    vertexShader += \"attribute vec3 a_outlineCoordinates;\\n\";\n    vertexShader += \"varying vec3 v_outlineCoordinates;\\n\";\n  }\n\n  // Morph Target Weighting\n  vertexShaderMain += \"    vec3 weightedPosition = a_position;\\n\";\n  if (hasNormals) {\n    vertexShaderMain += \"    vec3 weightedNormal = a_normal;\\n\";\n  }\n  if (hasTangents) {\n    vertexShaderMain += \"    vec4 weightedTangent = a_tangent;\\n\";\n  }\n  if (hasMorphTargets) {\n    for (let k = 0; k < morphTargets.length; k++) {\n      const targetAttributes = morphTargets[k];\n      for (const targetAttribute in targetAttributes) {\n        if (\n          targetAttributes.hasOwnProperty(targetAttribute) &&\n          targetAttribute !== \"extras\"\n        ) {\n          const attributeName = `a_${targetAttribute}_${k}`;\n          techniqueAttributes[attributeName] = {\n            semantic: `${targetAttribute}_${k}`,\n          };\n          vertexShader += `attribute vec3 ${attributeName};\\n`;\n          if (targetAttribute === \"POSITION\") {\n            vertexShaderMain += `    weightedPosition += u_morphWeights[${k}] * ${attributeName};\\n`;\n          } else if (targetAttribute === \"NORMAL\") {\n            vertexShaderMain += `    weightedNormal += u_morphWeights[${k}] * ${attributeName};\\n`;\n          } else if (hasTangents && targetAttribute === \"TANGENT\") {\n            vertexShaderMain += `    weightedTangent.xyz += u_morphWeights[${k}] * ${attributeName};\\n`;\n          }\n        }\n      }\n    }\n  }\n\n  // Final position computation\n  if (hasSkinning) {\n    vertexShaderMain +=\n      \"    vec4 position = skinMatrix * vec4(weightedPosition, 1.0);\\n\";\n  } else {\n    vertexShaderMain += \"    vec4 position = vec4(weightedPosition, 1.0);\\n\";\n  }\n  vertexShaderMain += \"    position = u_modelViewMatrix * position;\\n\";\n  if (hasNormals) {\n    vertexShaderMain += \"    v_positionEC = position.xyz;\\n\";\n  }\n  vertexShaderMain += \"    gl_Position = u_projectionMatrix * position;\\n\";\n\n  if (hasOutline) {\n    vertexShaderMain += \"    v_outlineCoordinates = a_outlineCoordinates;\\n\";\n  }\n\n  // Final normal computation\n  if (hasNormals) {\n    techniqueAttributes.a_normal = {\n      semantic: \"NORMAL\",\n    };\n    vertexShader += \"attribute vec3 a_normal;\\n\";\n    if (!isUnlit) {\n      vertexShader += \"varying vec3 v_normal;\\n\";\n      if (hasSkinning) {\n        vertexShaderMain +=\n          \"    v_normal = u_normalMatrix * mat3(skinMatrix) * weightedNormal;\\n\";\n      } else {\n        vertexShaderMain += \"    v_normal = u_normalMatrix * weightedNormal;\\n\";\n      }\n      fragmentShader += \"varying vec3 v_normal;\\n\";\n    }\n    fragmentShader += \"varying vec3 v_positionEC;\\n\";\n  }\n\n  // Read tangents if available\n  if (hasTangents) {\n    techniqueAttributes.a_tangent = {\n      semantic: \"TANGENT\",\n    };\n    vertexShader += \"attribute vec4 a_tangent;\\n\";\n    vertexShader += \"varying vec4 v_tangent;\\n\";\n    vertexShaderMain +=\n      \"    v_tangent.xyz = u_normalMatrix * weightedTangent.xyz;\\n\";\n    vertexShaderMain += \"    v_tangent.w = weightedTangent.w;\\n\";\n\n    fragmentShader += \"varying vec4 v_tangent;\\n\";\n  }\n\n  if (hasOutline) {\n    fragmentShader += \"varying vec3 v_outlineCoordinates;\\n\";\n  }\n\n  let fragmentShaderMain = \"\";\n\n  // Add texture coordinates if the material uses them\n  let v_texCoord;\n  let normalTexCoord;\n  let baseColorTexCoord;\n  let specularGlossinessTexCoord;\n  let diffuseTexCoord;\n  let metallicRoughnessTexCoord;\n  let occlusionTexCoord;\n  let emissiveTexCoord;\n\n  if (hasTexCoords) {\n    techniqueAttributes.a_texcoord_0 = {\n      semantic: \"TEXCOORD_0\",\n    };\n\n    v_texCoord = \"v_texcoord_0\";\n    vertexShader += \"attribute vec2 a_texcoord_0;\\n\";\n    vertexShader += `varying vec2 ${v_texCoord};\\n`;\n    vertexShaderMain += `    ${v_texCoord} = a_texcoord_0;\\n`;\n\n    fragmentShader += `varying vec2 ${v_texCoord};\\n`;\n\n    if (hasTexCoord1) {\n      techniqueAttributes.a_texcoord_1 = {\n        semantic: \"TEXCOORD_1\",\n      };\n\n      const v_texCoord1 = v_texCoord.replace(\"0\", \"1\");\n      vertexShader += \"attribute vec2 a_texcoord_1;\\n\";\n      vertexShader += `varying vec2 ${v_texCoord1};\\n`;\n      vertexShaderMain += `    ${v_texCoord1} = a_texcoord_1;\\n`;\n\n      fragmentShader += `varying vec2 ${v_texCoord1};\\n`;\n    }\n\n    const result = {\n      fragmentShaderMain: fragmentShaderMain,\n    };\n    normalTexCoord = addTextureCoordinates(\n      gltf,\n      \"u_normalTexture\",\n      generatedMaterialValues,\n      v_texCoord,\n      result\n    );\n    baseColorTexCoord = addTextureCoordinates(\n      gltf,\n      \"u_baseColorTexture\",\n      generatedMaterialValues,\n      v_texCoord,\n      result\n    );\n    specularGlossinessTexCoord = addTextureCoordinates(\n      gltf,\n      \"u_specularGlossinessTexture\",\n      generatedMaterialValues,\n      v_texCoord,\n      result\n    );\n    diffuseTexCoord = addTextureCoordinates(\n      gltf,\n      \"u_diffuseTexture\",\n      generatedMaterialValues,\n      v_texCoord,\n      result\n    );\n    metallicRoughnessTexCoord = addTextureCoordinates(\n      gltf,\n      \"u_metallicRoughnessTexture\",\n      generatedMaterialValues,\n      v_texCoord,\n      result\n    );\n    occlusionTexCoord = addTextureCoordinates(\n      gltf,\n      \"u_occlusionTexture\",\n      generatedMaterialValues,\n      v_texCoord,\n      result\n    );\n    emissiveTexCoord = addTextureCoordinates(\n      gltf,\n      \"u_emissiveTexture\",\n      generatedMaterialValues,\n      v_texCoord,\n      result\n    );\n\n    fragmentShaderMain = result.fragmentShaderMain;\n  }\n\n  // Add skinning information if available\n  if (hasSkinning) {\n    techniqueAttributes.a_joint = {\n      semantic: \"JOINTS_0\",\n    };\n    techniqueAttributes.a_weight = {\n      semantic: \"WEIGHTS_0\",\n    };\n\n    vertexShader += \"attribute vec4 a_joint;\\n\";\n    vertexShader += \"attribute vec4 a_weight;\\n\";\n  }\n\n  if (hasVertexColors) {\n    techniqueAttributes.a_vertexColor = {\n      semantic: \"COLOR_0\",\n    };\n    vertexShader += \"attribute vec4 a_vertexColor;\\n\";\n    vertexShader += \"varying vec4 v_vertexColor;\\n\";\n    vertexShaderMain += \"  v_vertexColor = a_vertexColor;\\n\";\n    fragmentShader += \"varying vec4 v_vertexColor;\\n\";\n  }\n\n  if (addBatchIdToGeneratedShaders) {\n    techniqueAttributes.a_batchId = {\n      semantic: \"_BATCHID\",\n    };\n    vertexShader += \"attribute float a_batchId;\\n\";\n  }\n\n  vertexShader += \"void main(void) \\n{\\n\";\n  vertexShader += vertexShaderMain;\n  vertexShader += \"}\\n\";\n\n  // Fragment shader lighting\n  if (hasNormals && !isUnlit) {\n    fragmentShader += \"const float M_PI = 3.141592653589793;\\n\";\n\n    fragmentShader +=\n      \"vec3 lambertianDiffuse(vec3 diffuseColor) \\n\" +\n      \"{\\n\" +\n      \"    return diffuseColor / M_PI;\\n\" +\n      \"}\\n\\n\";\n\n    fragmentShader +=\n      \"vec3 fresnelSchlick2(vec3 f0, vec3 f90, float VdotH) \\n\" +\n      \"{\\n\" +\n      \"    return f0 + (f90 - f0) * pow(clamp(1.0 - VdotH, 0.0, 1.0), 5.0);\\n\" +\n      \"}\\n\\n\";\n\n    fragmentShader +=\n      \"vec3 fresnelSchlick(float metalness, float VdotH) \\n\" +\n      \"{\\n\" +\n      \"    return metalness + (vec3(1.0) - metalness) * pow(1.0 - VdotH, 5.0);\\n\" +\n      \"}\\n\\n\";\n\n    fragmentShader +=\n      \"float smithVisibilityG1(float NdotV, float roughness) \\n\" +\n      \"{\\n\" +\n      \"    float k = (roughness + 1.0) * (roughness + 1.0) / 8.0;\\n\" +\n      \"    return NdotV / (NdotV * (1.0 - k) + k);\\n\" +\n      \"}\\n\\n\";\n\n    fragmentShader +=\n      \"float smithVisibilityGGX(float roughness, float NdotL, float NdotV) \\n\" +\n      \"{\\n\" +\n      \"    return smithVisibilityG1(NdotL, roughness) * smithVisibilityG1(NdotV, roughness);\\n\" +\n      \"}\\n\\n\";\n\n    fragmentShader +=\n      \"float GGX(float roughness, float NdotH) \\n\" +\n      \"{\\n\" +\n      \"    float roughnessSquared = roughness * roughness;\\n\" +\n      \"    float f = (NdotH * roughnessSquared - NdotH) * NdotH + 1.0;\\n\" +\n      \"    return roughnessSquared / (M_PI * f * f);\\n\" +\n      \"}\\n\\n\";\n  }\n\n  fragmentShader +=\n    \"vec3 SRGBtoLINEAR3(vec3 srgbIn) \\n\" +\n    \"{\\n\" +\n    \"    return pow(srgbIn, vec3(2.2));\\n\" +\n    \"}\\n\\n\";\n\n  fragmentShader +=\n    \"vec4 SRGBtoLINEAR4(vec4 srgbIn) \\n\" +\n    \"{\\n\" +\n    \"    vec3 linearOut = pow(srgbIn.rgb, vec3(2.2));\\n\" +\n    \"    return vec4(linearOut, srgbIn.a);\\n\" +\n    \"}\\n\\n\";\n\n  fragmentShader +=\n    \"vec3 applyTonemapping(vec3 linearIn) \\n\" +\n    \"{\\n\" +\n    \"#ifndef HDR \\n\" +\n    \"    return czm_acesTonemapping(linearIn);\\n\" +\n    \"#else \\n\" +\n    \"    return linearIn;\\n\" +\n    \"#endif \\n\" +\n    \"}\\n\\n\";\n\n  fragmentShader +=\n    \"vec3 LINEARtoSRGB(vec3 linearIn) \\n\" +\n    \"{\\n\" +\n    \"#ifndef HDR \\n\" +\n    \"    return pow(linearIn, vec3(1.0/2.2));\\n\" +\n    \"#else \\n\" +\n    \"    return linearIn;\\n\" +\n    \"#endif \\n\" +\n    \"}\\n\\n\";\n\n  fragmentShader +=\n    \"vec2 computeTexCoord(vec2 texCoords, vec2 offset, float rotation, vec2 scale) \\n\" +\n    \"{\\n\" +\n    \"    rotation = -rotation; \\n\" +\n    \"    mat3 transform = mat3(\\n\" +\n    \"        cos(rotation) * scale.x, sin(rotation) * scale.x, 0.0, \\n\" +\n    \"       -sin(rotation) * scale.y, cos(rotation) * scale.y, 0.0, \\n\" +\n    \"        offset.x, offset.y, 1.0); \\n\" +\n    \"    vec2 transformedTexCoords = (transform * vec3(fract(texCoords), 1.0)).xy; \\n\" +\n    \"    return transformedTexCoords; \\n\" +\n    \"}\\n\\n\";\n\n  fragmentShader += \"#ifdef USE_IBL_LIGHTING \\n\";\n  fragmentShader += \"uniform vec2 gltf_iblFactor; \\n\";\n  fragmentShader += \"#endif \\n\";\n  fragmentShader += \"#ifdef USE_CUSTOM_LIGHT_COLOR \\n\";\n  fragmentShader += \"uniform vec3 gltf_lightColor; \\n\";\n  fragmentShader += \"#endif \\n\";\n\n  fragmentShader += \"void main(void) \\n{\\n\";\n  fragmentShader += fragmentShaderMain;\n\n  // Add normal mapping to fragment shader\n  if (hasNormals && !isUnlit) {\n    fragmentShader += \"    vec3 ng = normalize(v_normal);\\n\";\n    fragmentShader +=\n      \"    vec3 positionWC = vec3(czm_inverseView * vec4(v_positionEC, 1.0));\\n\";\n    if (defined(generatedMaterialValues.u_normalTexture)) {\n      if (hasTangents) {\n        // Read tangents from varying\n        fragmentShader += \"    vec3 t = normalize(v_tangent.xyz);\\n\";\n        fragmentShader +=\n          \"    vec3 b = normalize(cross(ng, t) * v_tangent.w);\\n\";\n        fragmentShader += \"    mat3 tbn = mat3(t, b, ng);\\n\";\n        fragmentShader += `    vec3 n = texture2D(u_normalTexture, ${normalTexCoord}).rgb;\\n`;\n        fragmentShader += \"    n = normalize(tbn * (2.0 * n - 1.0));\\n\";\n      } else {\n        // Add standard derivatives extension\n        fragmentShader = `${\n          \"#ifdef GL_OES_standard_derivatives\\n\" +\n          \"#extension GL_OES_standard_derivatives : enable\\n\" +\n          \"#endif\\n\"\n        }${fragmentShader}`;\n        // Compute tangents\n        fragmentShader += \"#ifdef GL_OES_standard_derivatives\\n\";\n        fragmentShader += \"    vec3 pos_dx = dFdx(v_positionEC);\\n\";\n        fragmentShader += \"    vec3 pos_dy = dFdy(v_positionEC);\\n\";\n        fragmentShader += `    vec3 tex_dx = dFdx(vec3(${normalTexCoord},0.0));\\n`;\n        fragmentShader += `    vec3 tex_dy = dFdy(vec3(${normalTexCoord},0.0));\\n`;\n        fragmentShader +=\n          \"    vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\\n\";\n        fragmentShader += \"    t = normalize(t - ng * dot(ng, t));\\n\";\n        fragmentShader += \"    vec3 b = normalize(cross(ng, t));\\n\";\n        fragmentShader += \"    mat3 tbn = mat3(t, b, ng);\\n\";\n        fragmentShader += `    vec3 n = texture2D(u_normalTexture, ${normalTexCoord}).rgb;\\n`;\n        fragmentShader += \"    n = normalize(tbn * (2.0 * n - 1.0));\\n\";\n        fragmentShader += \"#else\\n\";\n        fragmentShader += \"    vec3 n = ng;\\n\";\n        fragmentShader += \"#endif\\n\";\n      }\n    } else {\n      fragmentShader += \"    vec3 n = ng;\\n\";\n    }\n    if (material.doubleSided) {\n      fragmentShader += \"    if (czm_backFacing())\\n\";\n      fragmentShader += \"    {\\n\";\n      fragmentShader += \"        n = -n;\\n\";\n      fragmentShader += \"    }\\n\";\n    }\n  }\n\n  // Add base color to fragment shader\n  if (defined(generatedMaterialValues.u_baseColorTexture)) {\n    fragmentShader += `    vec4 baseColorWithAlpha = SRGBtoLINEAR4(texture2D(u_baseColorTexture, ${baseColorTexCoord}));\\n`;\n    if (defined(generatedMaterialValues.u_baseColorFactor)) {\n      fragmentShader += \"    baseColorWithAlpha *= u_baseColorFactor;\\n\";\n    }\n  } else if (defined(generatedMaterialValues.u_baseColorFactor)) {\n    fragmentShader += \"    vec4 baseColorWithAlpha = u_baseColorFactor;\\n\";\n  } else {\n    fragmentShader += \"    vec4 baseColorWithAlpha = vec4(1.0);\\n\";\n  }\n\n  if (hasVertexColors) {\n    fragmentShader += \"    baseColorWithAlpha *= v_vertexColor;\\n\";\n  }\n\n  fragmentShader += \"    vec3 baseColor = baseColorWithAlpha.rgb;\\n\";\n\n  if (hasNormals && !isUnlit) {\n    if (useSpecGloss) {\n      if (defined(generatedMaterialValues.u_specularGlossinessTexture)) {\n        fragmentShader += `    vec4 specularGlossiness = SRGBtoLINEAR4(texture2D(u_specularGlossinessTexture, ${specularGlossinessTexCoord}));\\n`;\n        fragmentShader += \"    vec3 specular = specularGlossiness.rgb;\\n\";\n        fragmentShader += \"    float glossiness = specularGlossiness.a;\\n\";\n        if (defined(generatedMaterialValues.u_specularFactor)) {\n          fragmentShader += \"    specular *= u_specularFactor;\\n\";\n        }\n        if (defined(generatedMaterialValues.u_glossinessFactor)) {\n          fragmentShader += \"    glossiness *= u_glossinessFactor;\\n\";\n        }\n      } else {\n        if (defined(generatedMaterialValues.u_specularFactor)) {\n          fragmentShader +=\n            \"    vec3 specular = clamp(u_specularFactor, vec3(0.0), vec3(1.0));\\n\";\n        } else {\n          fragmentShader += \"    vec3 specular = vec3(1.0);\\n\";\n        }\n        if (defined(generatedMaterialValues.u_glossinessFactor)) {\n          fragmentShader +=\n            \"    float glossiness = clamp(u_glossinessFactor, 0.0, 1.0);\\n\";\n        } else {\n          fragmentShader += \"    float glossiness = 1.0;\\n\";\n        }\n      }\n      if (defined(generatedMaterialValues.u_diffuseTexture)) {\n        fragmentShader += `    vec4 diffuse = SRGBtoLINEAR4(texture2D(u_diffuseTexture, ${diffuseTexCoord}));\\n`;\n        if (defined(generatedMaterialValues.u_diffuseFactor)) {\n          fragmentShader += \"    diffuse *= u_diffuseFactor;\\n\";\n        }\n      } else if (defined(generatedMaterialValues.u_diffuseFactor)) {\n        fragmentShader +=\n          \"    vec4 diffuse = clamp(u_diffuseFactor, vec4(0.0), vec4(1.0));\\n\";\n      } else {\n        fragmentShader += \"    vec4 diffuse = vec4(1.0);\\n\";\n      }\n\n      // the specular glossiness extension's alpha takes precedence over\n      // the base color alpha.\n      fragmentShader += \"    baseColorWithAlpha.a = diffuse.a;\\n\";\n    } else if (defined(generatedMaterialValues.u_metallicRoughnessTexture)) {\n      fragmentShader += `    vec3 metallicRoughness = texture2D(u_metallicRoughnessTexture, ${metallicRoughnessTexCoord}).rgb;\\n`;\n      fragmentShader +=\n        \"    float metalness = clamp(metallicRoughness.b, 0.0, 1.0);\\n\";\n      fragmentShader +=\n        \"    float roughness = clamp(metallicRoughness.g, 0.04, 1.0);\\n\";\n      if (defined(generatedMaterialValues.u_metallicFactor)) {\n        fragmentShader += \"    metalness *= u_metallicFactor;\\n\";\n      }\n      if (defined(generatedMaterialValues.u_roughnessFactor)) {\n        fragmentShader += \"    roughness *= u_roughnessFactor;\\n\";\n      }\n    } else {\n      if (defined(generatedMaterialValues.u_metallicFactor)) {\n        fragmentShader +=\n          \"    float metalness = clamp(u_metallicFactor, 0.0, 1.0);\\n\";\n      } else {\n        fragmentShader += \"    float metalness = 1.0;\\n\";\n      }\n      if (defined(generatedMaterialValues.u_roughnessFactor)) {\n        fragmentShader +=\n          \"    float roughness = clamp(u_roughnessFactor, 0.04, 1.0);\\n\";\n      } else {\n        fragmentShader += \"    float roughness = 1.0;\\n\";\n      }\n    }\n\n    fragmentShader += \"    vec3 v = -normalize(v_positionEC);\\n\";\n\n    // Generate fragment shader's lighting block\n    fragmentShader += \"#ifndef USE_CUSTOM_LIGHT_COLOR \\n\";\n    fragmentShader += \"    vec3 lightColorHdr = czm_lightColorHdr;\\n\";\n    fragmentShader += \"#else \\n\";\n    fragmentShader += \"    vec3 lightColorHdr = gltf_lightColor;\\n\";\n    fragmentShader += \"#endif \\n\";\n    fragmentShader += \"    vec3 l = normalize(czm_lightDirectionEC);\\n\";\n    fragmentShader += \"    vec3 h = normalize(v + l);\\n\";\n    fragmentShader += \"    float NdotL = clamp(dot(n, l), 0.001, 1.0);\\n\";\n    fragmentShader += \"    float NdotV = abs(dot(n, v)) + 0.001;\\n\";\n    fragmentShader += \"    float NdotH = clamp(dot(n, h), 0.0, 1.0);\\n\";\n    fragmentShader += \"    float LdotH = clamp(dot(l, h), 0.0, 1.0);\\n\";\n    fragmentShader += \"    float VdotH = clamp(dot(v, h), 0.0, 1.0);\\n\";\n    fragmentShader += \"    vec3 f0 = vec3(0.04);\\n\";\n    // Whether the material uses metallic-roughness or specular-glossiness changes how the BRDF inputs are computed.\n    // It does not change the implementation of the BRDF itself.\n    if (useSpecGloss) {\n      fragmentShader += \"    float roughness = 1.0 - glossiness;\\n\";\n      fragmentShader +=\n        \"    vec3 diffuseColor = diffuse.rgb * (1.0 - max(max(specular.r, specular.g), specular.b));\\n\";\n      fragmentShader += \"    vec3 specularColor = specular;\\n\";\n    } else {\n      fragmentShader +=\n        \"    vec3 diffuseColor = baseColor * (1.0 - metalness) * (1.0 - f0);\\n\";\n      fragmentShader +=\n        \"    vec3 specularColor = mix(f0, baseColor, metalness);\\n\";\n    }\n\n    fragmentShader += \"    float alpha = roughness * roughness;\\n\";\n    fragmentShader +=\n      \"    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\\n\";\n    fragmentShader +=\n      \"    vec3 r90 = vec3(clamp(reflectance * 25.0, 0.0, 1.0));\\n\";\n    fragmentShader += \"    vec3 r0 = specularColor.rgb;\\n\";\n\n    fragmentShader += \"    vec3 F = fresnelSchlick2(r0, r90, VdotH);\\n\";\n    fragmentShader +=\n      \"    float G = smithVisibilityGGX(alpha, NdotL, NdotV);\\n\";\n    fragmentShader += \"    float D = GGX(alpha, NdotH);\\n\";\n\n    fragmentShader +=\n      \"    vec3 diffuseContribution = (1.0 - F) * lambertianDiffuse(diffuseColor);\\n\";\n    fragmentShader +=\n      \"    vec3 specularContribution = F * G * D / (4.0 * NdotL * NdotV);\\n\";\n    fragmentShader +=\n      \"    vec3 color = NdotL * lightColorHdr * (diffuseContribution + specularContribution);\\n\";\n\n    // Use the procedural IBL if there are no environment maps\n    fragmentShader +=\n      \"#if defined(USE_IBL_LIGHTING) && !defined(DIFFUSE_IBL) && !defined(SPECULAR_IBL) \\n\";\n\n    fragmentShader +=\n      \"    vec3 r = normalize(czm_inverseViewRotation * normalize(reflect(v, n)));\\n\";\n    // Figure out if the reflection vector hits the ellipsoid\n    fragmentShader += \"    float vertexRadius = length(positionWC);\\n\";\n    fragmentShader +=\n      \"    float horizonDotNadir = 1.0 - min(1.0, czm_ellipsoidRadii.x / vertexRadius);\\n\";\n    fragmentShader +=\n      \"    float reflectionDotNadir = dot(r, normalize(positionWC));\\n\";\n    // Flipping the X vector is a cheap way to get the inverse of czm_temeToPseudoFixed, since that's a rotation about Z.\n    fragmentShader += \"    r.x = -r.x;\\n\";\n    fragmentShader += \"    r = -normalize(czm_temeToPseudoFixed * r);\\n\";\n    fragmentShader += \"    r.x = -r.x;\\n\";\n\n    fragmentShader += \"    float inverseRoughness = 1.04 - roughness;\\n\";\n    fragmentShader += \"    inverseRoughness *= inverseRoughness;\\n\";\n    fragmentShader +=\n      \"    vec3 sceneSkyBox = textureCube(czm_environmentMap, r).rgb * inverseRoughness;\\n\";\n\n    fragmentShader += \"    float atmosphereHeight = 0.05;\\n\";\n    fragmentShader +=\n      \"    float blendRegionSize = 0.1 * ((1.0 - inverseRoughness) * 8.0 + 1.1 - horizonDotNadir);\\n\";\n    fragmentShader += \"    float blendRegionOffset = roughness * -1.0;\\n\";\n    fragmentShader +=\n      \"    float farAboveHorizon = clamp(horizonDotNadir - blendRegionSize * 0.5 + blendRegionOffset, 1.0e-10 - blendRegionSize, 0.99999);\\n\";\n    fragmentShader +=\n      \"    float aroundHorizon = clamp(horizonDotNadir + blendRegionSize * 0.5, 1.0e-10 - blendRegionSize, 0.99999);\\n\";\n    fragmentShader +=\n      \"    float farBelowHorizon = clamp(horizonDotNadir + blendRegionSize * 1.5, 1.0e-10 - blendRegionSize, 0.99999);\\n\";\n    fragmentShader +=\n      \"    float smoothstepHeight = smoothstep(0.0, atmosphereHeight, horizonDotNadir);\\n\";\n\n    fragmentShader +=\n      \"    vec3 belowHorizonColor = mix(vec3(0.1, 0.15, 0.25), vec3(0.4, 0.7, 0.9), smoothstepHeight);\\n\";\n    fragmentShader += \"    vec3 nadirColor = belowHorizonColor * 0.5;\\n\";\n    fragmentShader +=\n      \"    vec3 aboveHorizonColor = mix(vec3(0.9, 1.0, 1.2), belowHorizonColor, roughness * 0.5);\\n\";\n    fragmentShader +=\n      \"    vec3 blueSkyColor = mix(vec3(0.18, 0.26, 0.48), aboveHorizonColor, reflectionDotNadir * inverseRoughness * 0.5 + 0.75);\\n\";\n    fragmentShader +=\n      \"    vec3 zenithColor = mix(blueSkyColor, sceneSkyBox, smoothstepHeight);\\n\";\n\n    fragmentShader += \"    vec3 blueSkyDiffuseColor = vec3(0.7, 0.85, 0.9);\\n\";\n    fragmentShader +=\n      \"    float diffuseIrradianceFromEarth = (1.0 - horizonDotNadir) * (reflectionDotNadir * 0.25 + 0.75) * smoothstepHeight;\\n\";\n    fragmentShader +=\n      \"    float diffuseIrradianceFromSky = (1.0 - smoothstepHeight) * (1.0 - (reflectionDotNadir * 0.25 + 0.25));\\n\";\n    fragmentShader +=\n      \"    vec3 diffuseIrradiance = blueSkyDiffuseColor * clamp(diffuseIrradianceFromEarth + diffuseIrradianceFromSky, 0.0, 1.0);\\n\";\n\n    fragmentShader +=\n      \"    float notDistantRough = (1.0 - horizonDotNadir * roughness * 0.8);\\n\";\n    fragmentShader +=\n      \"    vec3 specularIrradiance = mix(zenithColor, aboveHorizonColor, smoothstep(farAboveHorizon, aroundHorizon, reflectionDotNadir) * notDistantRough);\\n\";\n    fragmentShader +=\n      \"    specularIrradiance = mix(specularIrradiance, belowHorizonColor, smoothstep(aroundHorizon, farBelowHorizon, reflectionDotNadir) * inverseRoughness);\\n\";\n    fragmentShader +=\n      \"    specularIrradiance = mix(specularIrradiance, nadirColor, smoothstep(farBelowHorizon, 1.0, reflectionDotNadir) * inverseRoughness);\\n\";\n\n    // Luminance model from page 40 of http://silviojemma.com/public/papers/lighting/spherical-harmonic-lighting.pdf\n    fragmentShader += \"#ifdef USE_SUN_LUMINANCE \\n\";\n    // Angle between sun and zenith\n    fragmentShader +=\n      \"    float LdotZenith = clamp(dot(normalize(czm_inverseViewRotation * l), normalize(positionWC * -1.0)), 0.001, 1.0);\\n\";\n    fragmentShader += \"    float S = acos(LdotZenith);\\n\";\n    // Angle between zenith and current pixel\n    fragmentShader +=\n      \"    float NdotZenith = clamp(dot(normalize(czm_inverseViewRotation * n), normalize(positionWC * -1.0)), 0.001, 1.0);\\n\";\n    // Angle between sun and current pixel\n    fragmentShader += \"    float gamma = acos(NdotL);\\n\";\n    fragmentShader +=\n      \"    float numerator = ((0.91 + 10.0 * exp(-3.0 * gamma) + 0.45 * pow(NdotL, 2.0)) * (1.0 - exp(-0.32 / NdotZenith)));\\n\";\n    fragmentShader +=\n      \"    float denominator = (0.91 + 10.0 * exp(-3.0 * S) + 0.45 * pow(LdotZenith,2.0)) * (1.0 - exp(-0.32));\\n\";\n    fragmentShader +=\n      \"    float luminance = gltf_luminanceAtZenith * (numerator / denominator);\\n\";\n    fragmentShader += \"#endif \\n\";\n\n    fragmentShader +=\n      \"    vec2 brdfLut = texture2D(czm_brdfLut, vec2(NdotV, roughness)).rg;\\n\";\n    fragmentShader +=\n      \"    vec3 IBLColor = (diffuseIrradiance * diffuseColor * gltf_iblFactor.x) + (specularIrradiance * SRGBtoLINEAR3(specularColor * brdfLut.x + brdfLut.y) * gltf_iblFactor.y);\\n\";\n\n    fragmentShader +=\n      \"    float maximumComponent = max(max(lightColorHdr.x, lightColorHdr.y), lightColorHdr.z);\\n\";\n    fragmentShader +=\n      \"    vec3 lightColor = lightColorHdr / max(maximumComponent, 1.0);\\n\";\n    fragmentShader += \"    IBLColor *= lightColor;\\n\";\n\n    fragmentShader += \"#ifdef USE_SUN_LUMINANCE \\n\";\n    fragmentShader += \"    color += IBLColor * luminance;\\n\";\n    fragmentShader += \"#else \\n\";\n    fragmentShader += \"    color += IBLColor; \\n\";\n    fragmentShader += \"#endif \\n\";\n\n    // Environment maps were provided, use them for IBL\n    fragmentShader += \"#elif defined(DIFFUSE_IBL) || defined(SPECULAR_IBL) \\n\";\n    fragmentShader +=\n      \"    const mat3 yUpToZUp = mat3(-1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0); \\n\";\n    fragmentShader +=\n      \"    vec3 cubeDir = normalize(yUpToZUp * gltf_iblReferenceFrameMatrix * normalize(reflect(-v, n))); \\n\";\n\n    fragmentShader += \"#ifdef DIFFUSE_IBL \\n\";\n    fragmentShader += \"#ifdef CUSTOM_SPHERICAL_HARMONICS \\n\";\n    fragmentShader +=\n      \"    vec3 diffuseIrradiance = czm_sphericalHarmonics(cubeDir, gltf_sphericalHarmonicCoefficients); \\n\";\n    fragmentShader += \"#else \\n\";\n    fragmentShader +=\n      \"    vec3 diffuseIrradiance = czm_sphericalHarmonics(cubeDir, czm_sphericalHarmonicCoefficients); \\n\";\n    fragmentShader += \"#endif \\n\";\n    fragmentShader += \"#else \\n\";\n    fragmentShader += \"    vec3 diffuseIrradiance = vec3(0.0); \\n\";\n    fragmentShader += \"#endif \\n\";\n\n    fragmentShader += \"#ifdef SPECULAR_IBL \\n\";\n    fragmentShader +=\n      \"    vec2 brdfLut = texture2D(czm_brdfLut, vec2(NdotV, roughness)).rg;\\n\";\n    fragmentShader += \"#ifdef CUSTOM_SPECULAR_IBL \\n\";\n    fragmentShader +=\n      \"    vec3 specularIBL = czm_sampleOctahedralProjection(gltf_specularMap, gltf_specularMapSize, cubeDir,  roughness * gltf_maxSpecularLOD, gltf_maxSpecularLOD);\\n\";\n    fragmentShader += \"#else \\n\";\n    fragmentShader +=\n      \"    vec3 specularIBL = czm_sampleOctahedralProjection(czm_specularEnvironmentMaps, czm_specularEnvironmentMapSize, cubeDir,  roughness * czm_specularEnvironmentMapsMaximumLOD, czm_specularEnvironmentMapsMaximumLOD);\\n\";\n    fragmentShader += \"#endif \\n\";\n    fragmentShader += \"    specularIBL *= F * brdfLut.x + brdfLut.y;\\n\";\n    fragmentShader += \"#else \\n\";\n    fragmentShader += \"    vec3 specularIBL = vec3(0.0); \\n\";\n    fragmentShader += \"#endif \\n\";\n\n    fragmentShader +=\n      \"    color += diffuseIrradiance * diffuseColor + specularColor * specularIBL;\\n\";\n\n    fragmentShader += \"#endif \\n\";\n  } else {\n    fragmentShader += \"    vec3 color = baseColor;\\n\";\n  }\n\n  // Ignore occlusion and emissive when unlit\n  if (!isUnlit) {\n    if (defined(generatedMaterialValues.u_occlusionTexture)) {\n      fragmentShader += `    color *= texture2D(u_occlusionTexture, ${occlusionTexCoord}).r;\\n`;\n    }\n    if (defined(generatedMaterialValues.u_emissiveTexture)) {\n      fragmentShader += `    vec3 emissive = SRGBtoLINEAR3(texture2D(u_emissiveTexture, ${emissiveTexCoord}).rgb);\\n`;\n      if (defined(generatedMaterialValues.u_emissiveFactor)) {\n        fragmentShader += \"    emissive *= u_emissiveFactor;\\n\";\n      }\n      fragmentShader += \"    color += emissive;\\n\";\n    } else if (defined(generatedMaterialValues.u_emissiveFactor)) {\n      fragmentShader += \"    color += u_emissiveFactor;\\n\";\n    }\n  }\n\n  if (!isUnlit) {\n    fragmentShader += \"    color = applyTonemapping(color);\\n\";\n  }\n\n  fragmentShader += \"    color = LINEARtoSRGB(color);\\n\";\n\n  if (hasOutline) {\n    fragmentShader += \"    float outlineness = max(\\n\";\n    fragmentShader +=\n      \"        texture2D(u_outlineTexture, vec2(v_outlineCoordinates.x, 0.5)).r,\\n\";\n    fragmentShader += \"        max(\\n\";\n    fragmentShader +=\n      \"          texture2D(u_outlineTexture, vec2(v_outlineCoordinates.y, 0.5)).r,\\n\";\n    fragmentShader +=\n      \"          texture2D(u_outlineTexture, vec2(v_outlineCoordinates.z, 0.5)).r));\\n\";\n    fragmentShader +=\n      \"    color = mix(color, vec3(0.0, 0.0, 0.0), outlineness);\\n\";\n  }\n\n  if (defined(alphaMode)) {\n    if (alphaMode === \"MASK\") {\n      fragmentShader += \"    if (baseColorWithAlpha.a < u_alphaCutoff) {\\n\";\n      fragmentShader += \"        discard;\\n\";\n      fragmentShader += \"    }\\n\";\n      fragmentShader += \"    gl_FragColor = vec4(color, 1.0);\\n\";\n    } else if (alphaMode === \"BLEND\") {\n      fragmentShader +=\n        \"    gl_FragColor = vec4(color, baseColorWithAlpha.a);\\n\";\n    } else {\n      fragmentShader += \"    gl_FragColor = vec4(color, 1.0);\\n\";\n    }\n  } else {\n    fragmentShader += \"    gl_FragColor = vec4(color, 1.0);\\n\";\n  }\n\n  fragmentShader += \"}\\n\";\n\n  // Add shaders\n  const vertexShaderId = addToArray(shaders, {\n    type: WebGLConstants.VERTEX_SHADER,\n    extras: {\n      _pipeline: {\n        source: vertexShader,\n        extension: \".glsl\",\n      },\n    },\n  });\n\n  const fragmentShaderId = addToArray(shaders, {\n    type: WebGLConstants.FRAGMENT_SHADER,\n    extras: {\n      _pipeline: {\n        source: fragmentShader,\n        extension: \".glsl\",\n      },\n    },\n  });\n\n  // Add program\n  const programId = addToArray(programs, {\n    fragmentShader: fragmentShaderId,\n    vertexShader: vertexShaderId,\n  });\n\n  const techniqueId = addToArray(techniques, {\n    attributes: techniqueAttributes,\n    program: programId,\n    uniforms: techniqueUniforms,\n  });\n\n  return techniqueId;\n}\n\nfunction getPBRValueType(paramName) {\n  if (paramName.indexOf(\"Offset\") !== -1) {\n    return WebGLConstants.FLOAT_VEC2;\n  } else if (paramName.indexOf(\"Rotation\") !== -1) {\n    return WebGLConstants.FLOAT;\n  } else if (paramName.indexOf(\"Scale\") !== -1) {\n    return WebGLConstants.FLOAT_VEC2;\n  } else if (paramName.indexOf(\"Texture\") !== -1) {\n    return WebGLConstants.SAMPLER_2D;\n  }\n\n  switch (paramName) {\n    case \"u_baseColorFactor\":\n      return WebGLConstants.FLOAT_VEC4;\n    case \"u_metallicFactor\":\n      return WebGLConstants.FLOAT;\n    case \"u_roughnessFactor\":\n      return WebGLConstants.FLOAT;\n    case \"u_emissiveFactor\":\n      return WebGLConstants.FLOAT_VEC3;\n    // Specular Glossiness Types\n    case \"u_diffuseFactor\":\n      return WebGLConstants.FLOAT_VEC4;\n    case \"u_specularFactor\":\n      return WebGLConstants.FLOAT_VEC3;\n    case \"u_glossinessFactor\":\n      return WebGLConstants.FLOAT;\n  }\n}\nexport default processPbrMaterials;\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef MRT\\n\\\n#extension GL_EXT_draw_buffers : enable\\n\\\n#endif\\n\\\n\\n\\\nuniform vec4 u_bgColor;\\n\\\nuniform sampler2D u_depthTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    if (texture2D(u_depthTexture, v_textureCoordinates).r < 1.0)\\n\\\n    {\\n\\\n#ifdef MRT\\n\\\n        gl_FragData[0] = u_bgColor;\\n\\\n        gl_FragData[1] = vec4(u_bgColor.a);\\n\\\n#else\\n\\\n        gl_FragColor = u_bgColor;\\n\\\n#endif\\n\\\n        return;\\n\\\n    }\\n\\\n    \\n\\\n    discard;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec3 v_tangentEC;\\n\\\nvarying vec3 v_bitangentEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 positionToEyeEC = -v_positionEC;\\n\\\n    mat3 tangentToEyeMatrix = czm_tangentToEyeSpaceMatrix(v_normalEC, v_tangentEC, v_bitangentEC);\\n\\\n\\n\\\n    vec3 normalEC = normalize(v_normalEC);\\n\\\n#ifdef FACE_FORWARD\\n\\\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n\\\n#endif\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.tangentToEyeMatrix = tangentToEyeMatrix;\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    materialInput.st = v_st;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef FLAT\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#else\\n\\\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 normal;\\n\\\nattribute vec3 tangent;\\n\\\nattribute vec3 bitangent;\\n\\\nattribute vec2 st;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec3 v_tangentEC;\\n\\\nvarying vec3 v_bitangentEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\\n\\\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\\n\\\n    v_tangentEC = czm_normal * tangent;                       // tangent in eye coordinates\\n\\\n    v_bitangentEC = czm_normal * bitangent;                   // bitangent in eye coordinates\\n\\\n    v_st = st;\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 positionToEyeEC = -v_positionEC;\\n\\\n\\n\\\n    vec3 normalEC = normalize(v_normalEC);\\n\\\n#ifdef FACE_FORWARD\\n\\\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n\\\n#endif\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef FLAT\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#else\\n\\\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 normal;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\\n\\\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec3 v_positionMC;\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    czm_materialInput materialInput;\\n\\\n\\n\\\n    vec3 normalEC = normalize(czm_normal3D * czm_geodeticSurfaceNormal(v_positionMC, vec3(0.0), vec3(1.0)));\\n\\\n#ifdef FACE_FORWARD\\n\\\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n\\\n#endif\\n\\\n\\n\\\n    materialInput.s = v_st.s;\\n\\\n    materialInput.st = v_st;\\n\\\n    materialInput.str = vec3(v_st, 0.0);\\n\\\n\\n\\\n    // Convert tangent space material normal to eye space\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.tangentToEyeMatrix = czm_eastNorthUpToEyeCoordinates(v_positionMC, materialInput.normalEC);\\n\\\n\\n\\\n    // Convert view vector to world space\\n\\\n    vec3 positionToEyeEC = -v_positionEC;\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef FLAT\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#else\\n\\\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec2 st;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_positionMC;\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_positionMC = position3DHigh + position3DLow;           // position in model coordinates\\n\\\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;     // position in eye coordinates\\n\\\n    v_st = st;\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec4 v_color;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 positionToEyeEC = -v_positionEC;\\n\\\n\\n\\\n    vec3 normalEC = normalize(v_normalEC);\\n\\\n#ifdef FACE_FORWARD\\n\\\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n\\\n#endif\\n\\\n\\n\\\n    vec4 color = czm_gammaCorrect(v_color);\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n    material.diffuse = color.rgb;\\n\\\n    material.alpha = color.a;\\n\\\n\\n\\\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 normal;\\n\\\nattribute vec4 color;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec4 v_color;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\\n\\\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\\n\\\n    v_color = color;\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec4 v_color;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    gl_FragColor = czm_gammaCorrect(v_color);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec4 color;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec4 v_color;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_color = color;\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 prevPosition3DHigh;\\n\\\nattribute vec3 prevPosition3DLow;\\n\\\nattribute vec3 nextPosition3DHigh;\\n\\\nattribute vec3 nextPosition3DLow;\\n\\\nattribute vec2 expandAndWidth;\\n\\\nattribute vec4 color;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec4 v_color;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    float expandDir = expandAndWidth.x;\\n\\\n    float width = abs(expandAndWidth.y) + 0.5;\\n\\\n    bool usePrev = expandAndWidth.y < 0.0;\\n\\\n\\n\\\n    vec4 p = czm_computePosition();\\n\\\n    vec4 prev = czm_computePrevPosition();\\n\\\n    vec4 next = czm_computeNextPosition();\\n\\\n\\n\\\n    float angle;\\n\\\n    vec4 positionWC = getPolylineWindowCoordinates(p, prev, next, expandDir, width, usePrev, angle);\\n\\\n    gl_Position = czm_viewportOrthographic * positionWC;\\n\\\n\\n\\\n    v_color = color;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 prevPosition3DHigh;\\n\\\nattribute vec3 prevPosition3DLow;\\n\\\nattribute vec3 nextPosition3DHigh;\\n\\\nattribute vec3 nextPosition3DLow;\\n\\\nattribute vec2 expandAndWidth;\\n\\\nattribute vec2 st;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying float v_width;\\n\\\nvarying vec2 v_st;\\n\\\nvarying float v_polylineAngle;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    float expandDir = expandAndWidth.x;\\n\\\n    float width = abs(expandAndWidth.y) + 0.5;\\n\\\n    bool usePrev = expandAndWidth.y < 0.0;\\n\\\n\\n\\\n    vec4 p = czm_computePosition();\\n\\\n    vec4 prev = czm_computePrevPosition();\\n\\\n    vec4 next = czm_computeNextPosition();\\n\\\n\\n\\\n    float angle;\\n\\\n    vec4 positionWC = getPolylineWindowCoordinates(p, prev, next, expandDir, width, usePrev, angle);\\n\\\n    gl_Position = czm_viewportOrthographic * positionWC;\\n\\\n\\n\\\n    v_width = width;\\n\\\n    v_st.s = st.s;\\n\\\n    v_st.t = czm_writeNonPerspective(st.t, gl_Position.w);\\n\\\n    v_polylineAngle = angle;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 positionToEyeEC = -v_positionEC;\\n\\\n\\n\\\n    vec3 normalEC = normalize(v_normalEC);\\n\\\n#ifdef FACE_FORWARD\\n\\\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n\\\n#endif\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    materialInput.st = v_st;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef FLAT\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#else\\n\\\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 normal;\\n\\\nattribute vec2 st;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\\n\\\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\\n\\\n    v_st = st;\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform vec3 u_radiiAndDynamicAtmosphereColor;\\n\\\n\\n\\\nuniform float u_atmosphereLightIntensity;\\n\\\nuniform float u_atmosphereRayleighScaleHeight;\\n\\\nuniform float u_atmosphereMieScaleHeight;\\n\\\nuniform float u_atmosphereMieAnisotropy;\\n\\\nuniform vec3 u_atmosphereRayleighCoefficient;\\n\\\nuniform vec3 u_atmosphereMieCoefficient;\\n\\\n\\n\\\nconst float ATMOSPHERE_THICKNESS = 111e3; // The thickness of the atmosphere in meters.\\n\\\nconst int PRIMARY_STEPS = 16; // Number of times the ray from the camera to the world position (primary ray) is sampled.\\n\\\nconst int LIGHT_STEPS = 4; // Number of times the light is sampled from the light source's intersection with the atmosphere to a sample position on the primary ray.\\n\\\n\\n\\\n/**\\n\\\n * This function computes the colors contributed by Rayliegh and Mie scattering on a given ray, as well as\\n\\\n * the transmittance value for the ray.\\n\\\n *\\n\\\n * @param {czm_ray} primaryRay The ray from the camera to the position.\\n\\\n * @param {float} primaryRayLength The length of the primary ray.\\n\\\n * @param {vec3} lightDirection The direction of the light to calculate the scattering from.\\n\\\n * @param {vec3} rayleighColor The variable the Rayleigh scattering will be written to.\\n\\\n * @param {vec3} mieColor The variable the Mie scattering will be written to.\\n\\\n * @param {float} opacity The variable the transmittance will be written to.\\n\\\n * @glslFunction\\n\\\n */\\n\\\nvoid computeScattering(\\n\\\n    czm_ray primaryRay,\\n\\\n    float primaryRayLength,\\n\\\n    vec3 lightDirection,\\n\\\n    float atmosphereInnerRadius,\\n\\\n    out vec3 rayleighColor,\\n\\\n    out vec3 mieColor,\\n\\\n    out float opacity\\n\\\n) {\\n\\\n\\n\\\n    // Initialize the default scattering amounts to 0.\\n\\\n    rayleighColor = vec3(0.0);\\n\\\n    mieColor = vec3(0.0);\\n\\\n    opacity = 0.0;\\n\\\n\\n\\\n    float atmosphereOuterRadius = atmosphereInnerRadius + ATMOSPHERE_THICKNESS;\\n\\\n\\n\\\n    vec3 origin = vec3(0.0);\\n\\\n\\n\\\n    // Calculate intersection from the camera to the outer ring of the atmosphere.\\n\\\n    czm_raySegment primaryRayAtmosphereIntersect = czm_raySphereIntersectionInterval(primaryRay, origin, atmosphereOuterRadius);\\n\\\n\\n\\\n    // Return empty colors if no intersection with the atmosphere geometry.\\n\\\n    if (primaryRayAtmosphereIntersect == czm_emptyRaySegment) {\\n\\\n        return;\\n\\\n    }\\n\\\n\\n\\\n    // The ray should start from the first intersection with the outer atmopshere, or from the camera position, if it is inside the atmosphere.\\n\\\n    primaryRayAtmosphereIntersect.start = max(primaryRayAtmosphereIntersect.start, 0.0);\\n\\\n    // The ray should end at the exit from the atmosphere or at the distance to the vertex, whichever is smaller.\\n\\\n    primaryRayAtmosphereIntersect.stop = min(primaryRayAtmosphereIntersect.stop, length(primaryRayLength));\\n\\\n\\n\\\n    // Setup for sampling positions along the ray - starting from the intersection with the outer ring of the atmosphere.\\n\\\n    float rayStepLength = (primaryRayAtmosphereIntersect.stop - primaryRayAtmosphereIntersect.start) / float(PRIMARY_STEPS);\\n\\\n    float rayPositionLength = primaryRayAtmosphereIntersect.start;\\n\\\n\\n\\\n    vec3 rayleighAccumulation = vec3(0.0);\\n\\\n    vec3 mieAccumulation = vec3(0.0);\\n\\\n    vec2 opticalDepth = vec2(0.0);\\n\\\n    vec2 heightScale = vec2(u_atmosphereRayleighScaleHeight, u_atmosphereMieScaleHeight);\\n\\\n\\n\\\n    // Sample positions on the primary ray.\\n\\\n    for (int i = 0; i < PRIMARY_STEPS; i++) {\\n\\\n        // Calculate sample position along viewpoint ray.\\n\\\n        vec3 samplePosition = primaryRay.origin + primaryRay.direction * (rayPositionLength + rayStepLength);\\n\\\n        \\n\\\n        // Calculate height of sample position above ellipsoid.\\n\\\n        float sampleHeight = length(samplePosition) - atmosphereInnerRadius;\\n\\\n\\n\\\n        // Calculate and accumulate density of particles at the sample position.\\n\\\n        vec2 sampleDensity = exp(-sampleHeight / heightScale) * rayStepLength;\\n\\\n        opticalDepth += sampleDensity;\\n\\\n\\n\\\n        // Generate ray from the sample position segment to the light source, up to the outer ring of the atmosphere.\\n\\\n        czm_ray lightRay = czm_ray(samplePosition, lightDirection);\\n\\\n        czm_raySegment lightRayAtmosphereIntersect = czm_raySphereIntersectionInterval(lightRay, origin, atmosphereOuterRadius);\\n\\\n        \\n\\\n        float lightStepLength = lightRayAtmosphereIntersect.stop / float(LIGHT_STEPS);\\n\\\n        float lightPositionLength = 0.0;\\n\\\n\\n\\\n        vec2 lightOpticalDepth = vec2(0.0);\\n\\\n\\n\\\n        // Sample positions along the light ray, to accumulate incidence of light on the latest sample segment.\\n\\\n        for (int j = 0; j < LIGHT_STEPS; j++) {\\n\\\n\\n\\\n            // Calculate sample position along light ray.\\n\\\n            vec3 lightPosition = samplePosition + lightDirection * (lightPositionLength + lightStepLength * 0.5);\\n\\\n\\n\\\n            // Calculate height of the light sample position above ellipsoid.\\n\\\n            float lightHeight = length(lightPosition) - atmosphereInnerRadius;\\n\\\n\\n\\\n            // Calculate density of photons at the light sample position.\\n\\\n            lightOpticalDepth += exp(-lightHeight / heightScale) * lightStepLength;\\n\\\n\\n\\\n            // Increment distance on light ray.\\n\\\n            lightPositionLength += lightStepLength;\\n\\\n        }\\n\\\n\\n\\\n        // Compute attenuation via the primary ray and the light ray.\\n\\\n        vec3 attenuation = exp(-((u_atmosphereMieCoefficient * (opticalDepth.y + lightOpticalDepth.y)) + (u_atmosphereRayleighCoefficient * (opticalDepth.x + lightOpticalDepth.x))));\\n\\\n\\n\\\n        // Accumulate the scattering.\\n\\\n        rayleighAccumulation += sampleDensity.x * attenuation;\\n\\\n        mieAccumulation += sampleDensity.y * attenuation;\\n\\\n\\n\\\n        // Increment distance on primary ray.\\n\\\n        rayPositionLength += rayStepLength;\\n\\\n    }\\n\\\n\\n\\\n    // Compute the scattering amount.\\n\\\n    rayleighColor = u_atmosphereRayleighCoefficient * rayleighAccumulation;\\n\\\n    mieColor = u_atmosphereMieCoefficient * mieAccumulation;\\n\\\n\\n\\\n    // Compute the transmittance i.e. how much light is passing through the atmosphere.\\n\\\n    opacity = length(exp(-((u_atmosphereMieCoefficient * opticalDepth.y) + (u_atmosphereRayleighCoefficient * opticalDepth.x))));\\n\\\n}\\n\\\n\\n\\\nvec4 computeAtmosphereColor(\\n\\\n    vec3 positionWC,\\n\\\n    vec3 lightDirection,\\n\\\n    vec3 rayleighColor,\\n\\\n    vec3 mieColor,\\n\\\n    float opacity\\n\\\n) {\\n\\\n    // Setup the primary ray: from the camera position to the vertex position.\\n\\\n    vec3 cameraToPositionWC = positionWC - czm_viewerPositionWC;\\n\\\n    vec3 cameraToPositionWCDirection = normalize(cameraToPositionWC);\\n\\\n\\n\\\n    float cosAngle = dot(cameraToPositionWCDirection, lightDirection);\\n\\\n    float cosAngleSq = cosAngle * cosAngle;\\n\\\n\\n\\\n    float G = u_atmosphereMieAnisotropy;\\n\\\n    float GSq = G * G;\\n\\\n\\n\\\n    // The Rayleigh phase function.\\n\\\n    float rayleighPhase = 3.0 / (50.2654824574) * (1.0 + cosAngleSq);\\n\\\n    // The Mie phase function.\\n\\\n    float miePhase = 3.0 / (25.1327412287) * ((1.0 - GSq) * (cosAngleSq + 1.0)) / (pow(1.0 + GSq - 2.0 * cosAngle * G, 1.5) * (2.0 + GSq));\\n\\\n\\n\\\n    // The final color is generated by combining the effects of the Rayleigh and Mie scattering.\\n\\\n    vec3 rayleigh = rayleighPhase * rayleighColor;\\n\\\n    vec3 mie = miePhase * mieColor;\\n\\\n\\n\\\n    vec3 color = (rayleigh + mie) * u_atmosphereLightIntensity;\\n\\\n\\n\\\n    return vec4(color, opacity);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef GL_OES_standard_derivatives\\n\\\n#extension GL_OES_standard_derivatives : enable\\n\\\n#endif\\n\\\n\\n\\\nuniform sampler2D u_atlas;\\n\\\n\\n\\\n#ifdef VECTOR_TILE\\n\\\nuniform vec4 u_highlightColor;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\nvarying vec4 v_pickColor;\\n\\\nvarying vec4 v_color;\\n\\\n\\n\\\n#ifdef SDF\\n\\\nvarying vec4 v_outlineColor;\\n\\\nvarying float v_outlineWidth;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\nvarying vec4 v_textureCoordinateBounds;                  // the min and max x and y values for the texture coordinates\\n\\\nvarying vec4 v_originTextureCoordinateAndTranslate;      // texture coordinate at the origin, billboard translate (used for label glyphs)\\n\\\nvarying vec4 v_compressed;                               // x: eyeDepth, y: applyTranslate & enableDepthCheck, z: dimensions, w: imageSize\\n\\\nvarying mat2 v_rotationMatrix;\\n\\\n\\n\\\nconst float SHIFT_LEFT12 = 4096.0;\\n\\\nconst float SHIFT_LEFT1 = 2.0;\\n\\\n\\n\\\nconst float SHIFT_RIGHT12 = 1.0 / 4096.0;\\n\\\nconst float SHIFT_RIGHT1 = 1.0 / 2.0;\\n\\\n\\n\\\nfloat getGlobeDepth(vec2 adjustedST, vec2 depthLookupST, bool applyTranslate, vec2 dimensions, vec2 imageSize)\\n\\\n{\\n\\\n    vec2 lookupVector = imageSize * (depthLookupST - adjustedST);\\n\\\n    lookupVector = v_rotationMatrix * lookupVector;\\n\\\n    vec2 labelOffset = (dimensions - imageSize) * (depthLookupST - vec2(0.0, v_originTextureCoordinateAndTranslate.y)); // aligns label glyph with bounding rectangle.  Will be zero for billboards because dimensions and imageSize will be equal\\n\\\n\\n\\\n    vec2 translation = v_originTextureCoordinateAndTranslate.zw;\\n\\\n\\n\\\n    if (applyTranslate)\\n\\\n    {\\n\\\n        // this is only needed for labels where the horizontal origin is not LEFT\\n\\\n        // it moves the label back to where the \\\"origin\\\" should be since all label glyphs are set to HorizontalOrigin.LEFT\\n\\\n        translation += (dimensions * v_originTextureCoordinateAndTranslate.xy * vec2(1.0, 0.0));\\n\\\n    }\\n\\\n\\n\\\n    vec2 st = ((lookupVector - translation + labelOffset) + gl_FragCoord.xy) / czm_viewport.zw;\\n\\\n    float logDepthOrDepth = czm_unpackDepth(texture2D(czm_globeDepthTexture, st));\\n\\\n\\n\\\n    if (logDepthOrDepth == 0.0)\\n\\\n    {\\n\\\n        return 0.0; // not on the globe\\n\\\n    }\\n\\\n\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(gl_FragCoord.xy, logDepthOrDepth);\\n\\\n    return eyeCoordinate.z / eyeCoordinate.w;\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n\\n\\\n#ifdef SDF\\n\\\n\\n\\\n// Get the distance from the edge of a glyph at a given position sampling an SDF texture.\\n\\\nfloat getDistance(vec2 position)\\n\\\n{\\n\\\n    return texture2D(u_atlas, position).r;\\n\\\n}\\n\\\n\\n\\\n// Samples the sdf texture at the given position and produces a color based on the fill color and the outline.\\n\\\nvec4 getSDFColor(vec2 position, float outlineWidth, vec4 outlineColor, float smoothing)\\n\\\n{\\n\\\n    float distance = getDistance(position);\\n\\\n\\n\\\n    if (outlineWidth > 0.0)\\n\\\n    {\\n\\\n        // Don't get the outline edge exceed the SDF_EDGE\\n\\\n        float outlineEdge = clamp(SDF_EDGE - outlineWidth, 0.0, SDF_EDGE);\\n\\\n        float outlineFactor = smoothstep(SDF_EDGE - smoothing, SDF_EDGE + smoothing, distance);\\n\\\n        vec4 sdfColor = mix(outlineColor, v_color, outlineFactor);\\n\\\n        float alpha = smoothstep(outlineEdge - smoothing, outlineEdge + smoothing, distance);\\n\\\n        return vec4(sdfColor.rgb, sdfColor.a * alpha);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        float alpha = smoothstep(SDF_EDGE - smoothing, SDF_EDGE + smoothing, distance);\\n\\\n        return vec4(v_color.rgb, v_color.a * alpha);\\n\\\n    }\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 color = texture2D(u_atlas, v_textureCoordinates);\\n\\\n\\n\\\n#ifdef SDF\\n\\\n    float outlineWidth = v_outlineWidth;\\n\\\n    vec4 outlineColor = v_outlineColor;\\n\\\n\\n\\\n    // Get the current distance\\n\\\n    float distance = getDistance(v_textureCoordinates);\\n\\\n\\n\\\n#ifdef GL_OES_standard_derivatives\\n\\\n    float smoothing = fwidth(distance);\\n\\\n    // Get an offset that is approximately half the distance to the neighbor pixels\\n\\\n    // 0.354 is approximately half of 1/sqrt(2)\\n\\\n    vec2 sampleOffset = 0.354 * vec2(dFdx(v_textureCoordinates) + dFdy(v_textureCoordinates));\\n\\\n\\n\\\n    // Sample the center point\\n\\\n    vec4 center = getSDFColor(v_textureCoordinates, outlineWidth, outlineColor, smoothing);\\n\\\n\\n\\\n    // Sample the 4 neighbors\\n\\\n    vec4 color1 = getSDFColor(v_textureCoordinates + vec2(sampleOffset.x, sampleOffset.y), outlineWidth, outlineColor, smoothing);\\n\\\n    vec4 color2 = getSDFColor(v_textureCoordinates + vec2(-sampleOffset.x, sampleOffset.y), outlineWidth, outlineColor, smoothing);\\n\\\n    vec4 color3 = getSDFColor(v_textureCoordinates + vec2(-sampleOffset.x, -sampleOffset.y), outlineWidth, outlineColor, smoothing);\\n\\\n    vec4 color4 = getSDFColor(v_textureCoordinates + vec2(sampleOffset.x, -sampleOffset.y), outlineWidth, outlineColor, smoothing);\\n\\\n\\n\\\n    // Equally weight the center sample and the 4 neighboring samples\\n\\\n    color = (center + color1 + color2 + color3 + color4)/5.0;\\n\\\n#else\\n\\\n    // Just do a single sample\\n\\\n    float smoothing = 1.0/32.0;\\n\\\n    color = getSDFColor(v_textureCoordinates, outlineWidth, outlineColor, smoothing);\\n\\\n#endif\\n\\\n\\n\\\n    color = czm_gammaCorrect(color);\\n\\\n#else\\n\\\n    color = czm_gammaCorrect(color);\\n\\\n    color *= czm_gammaCorrect(v_color);\\n\\\n#endif\\n\\\n\\n\\\n// Fully transparent parts of the billboard are not pickable.\\n\\\n#if !defined(OPAQUE) && !defined(TRANSLUCENT)\\n\\\n    if (color.a < 0.005)   // matches 0/255 and 1/255\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n#else\\n\\\n// The billboard is rendered twice. The opaque pass discards translucent fragments\\n\\\n// and the translucent pass discards opaque fragments.\\n\\\n#ifdef OPAQUE\\n\\\n    if (color.a < 0.995)   // matches < 254/255\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n#else\\n\\\n    if (color.a >= 0.995)  // matches 254/255 and 255/255\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n#endif\\n\\\n#endif\\n\\\n\\n\\\n#ifdef VECTOR_TILE\\n\\\n    color *= u_highlightColor;\\n\\\n#endif\\n\\\n    gl_FragColor = color;\\n\\\n\\n\\\n#ifdef LOG_DEPTH\\n\\\n    czm_writeLogDepth();\\n\\\n#endif\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\n    float temp = v_compressed.y;\\n\\\n\\n\\\n    temp = temp * SHIFT_RIGHT1;\\n\\\n\\n\\\n    float temp2 = (temp - floor(temp)) * SHIFT_LEFT1;\\n\\\n    bool enableDepthTest = temp2 != 0.0;\\n\\\n    bool applyTranslate = floor(temp) != 0.0;\\n\\\n\\n\\\n    if (enableDepthTest) {\\n\\\n        temp = v_compressed.z;\\n\\\n        temp = temp * SHIFT_RIGHT12;\\n\\\n\\n\\\n        vec2 dimensions;\\n\\\n        dimensions.y = (temp - floor(temp)) * SHIFT_LEFT12;\\n\\\n        dimensions.x = floor(temp);\\n\\\n\\n\\\n        temp = v_compressed.w;\\n\\\n        temp = temp * SHIFT_RIGHT12;\\n\\\n\\n\\\n        vec2 imageSize;\\n\\\n        imageSize.y = (temp - floor(temp)) * SHIFT_LEFT12;\\n\\\n        imageSize.x = floor(temp);\\n\\\n\\n\\\n        vec2 adjustedST = v_textureCoordinates - v_textureCoordinateBounds.xy;\\n\\\n        adjustedST = adjustedST / vec2(v_textureCoordinateBounds.z - v_textureCoordinateBounds.x, v_textureCoordinateBounds.w - v_textureCoordinateBounds.y);\\n\\\n\\n\\\n        float epsilonEyeDepth = v_compressed.x + czm_epsilon1;\\n\\\n        float globeDepth1 = getGlobeDepth(adjustedST, v_originTextureCoordinateAndTranslate.xy, applyTranslate, dimensions, imageSize);\\n\\\n\\n\\\n        // negative values go into the screen\\n\\\n        if (globeDepth1 != 0.0 && globeDepth1 > epsilonEyeDepth)\\n\\\n        {\\n\\\n            float globeDepth2 = getGlobeDepth(adjustedST, vec2(0.0, 1.0), applyTranslate, dimensions, imageSize); // top left corner\\n\\\n            if (globeDepth2 != 0.0 && globeDepth2 > epsilonEyeDepth)\\n\\\n            {\\n\\\n                float globeDepth3 = getGlobeDepth(adjustedST, vec2(1.0, 1.0), applyTranslate, dimensions, imageSize); // top right corner\\n\\\n                if (globeDepth3 != 0.0 && globeDepth3 > epsilonEyeDepth)\\n\\\n                {\\n\\\n                    discard;\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef INSTANCED\\n\\\nattribute vec2 direction;\\n\\\n#endif\\n\\\nattribute vec4 positionHighAndScale;\\n\\\nattribute vec4 positionLowAndRotation;\\n\\\nattribute vec4 compressedAttribute0;                       // pixel offset, translate, horizontal origin, vertical origin, show, direction, texture coordinates (texture offset)\\n\\\nattribute vec4 compressedAttribute1;                       // aligned axis, translucency by distance, image width\\n\\\nattribute vec4 compressedAttribute2;                       // label horizontal origin, image height, color, pick color, size in meters, valid aligned axis, 13 bits free\\n\\\nattribute vec4 eyeOffset;                                  // eye offset in meters, 4 bytes free (texture range)\\n\\\nattribute vec4 scaleByDistance;                            // near, nearScale, far, farScale\\n\\\nattribute vec4 pixelOffsetScaleByDistance;                 // near, nearScale, far, farScale\\n\\\nattribute vec4 compressedAttribute3;                       // distance display condition near, far, disableDepthTestDistance, dimensions\\n\\\nattribute vec2 sdf;                                        // sdf outline color (rgb) and width (w)\\n\\\n#if defined(VERTEX_DEPTH_CHECK) || defined(FRAGMENT_DEPTH_CHECK)\\n\\\nattribute vec4 textureCoordinateBoundsOrLabelTranslate;    // the min and max x and y values for the texture coordinates\\n\\\n#endif\\n\\\n#ifdef VECTOR_TILE\\n\\\nattribute float a_batchId;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\nvarying vec4 v_textureCoordinateBounds;\\n\\\nvarying vec4 v_originTextureCoordinateAndTranslate;\\n\\\nvarying vec4 v_compressed;                                 // x: eyeDepth, y: applyTranslate & enableDepthCheck, z: dimensions, w: imageSize\\n\\\nvarying mat2 v_rotationMatrix;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec4 v_pickColor;\\n\\\nvarying vec4 v_color;\\n\\\n#ifdef SDF\\n\\\nvarying vec4 v_outlineColor;\\n\\\nvarying float v_outlineWidth;\\n\\\n#endif\\n\\\n\\n\\\nconst float UPPER_BOUND = 32768.0;\\n\\\n\\n\\\nconst float SHIFT_LEFT16 = 65536.0;\\n\\\nconst float SHIFT_LEFT12 = 4096.0;\\n\\\nconst float SHIFT_LEFT8 = 256.0;\\n\\\nconst float SHIFT_LEFT7 = 128.0;\\n\\\nconst float SHIFT_LEFT5 = 32.0;\\n\\\nconst float SHIFT_LEFT3 = 8.0;\\n\\\nconst float SHIFT_LEFT2 = 4.0;\\n\\\nconst float SHIFT_LEFT1 = 2.0;\\n\\\n\\n\\\nconst float SHIFT_RIGHT12 = 1.0 / 4096.0;\\n\\\nconst float SHIFT_RIGHT8 = 1.0 / 256.0;\\n\\\nconst float SHIFT_RIGHT7 = 1.0 / 128.0;\\n\\\nconst float SHIFT_RIGHT5 = 1.0 / 32.0;\\n\\\nconst float SHIFT_RIGHT3 = 1.0 / 8.0;\\n\\\nconst float SHIFT_RIGHT2 = 1.0 / 4.0;\\n\\\nconst float SHIFT_RIGHT1 = 1.0 / 2.0;\\n\\\n\\n\\\nvec4 addScreenSpaceOffset(vec4 positionEC, vec2 imageSize, float scale, vec2 direction, vec2 origin, vec2 translate, vec2 pixelOffset, vec3 alignedAxis, bool validAlignedAxis, float rotation, bool sizeInMeters, out mat2 rotationMatrix, out float mpp)\\n\\\n{\\n\\\n    // Note the halfSize cannot be computed in JavaScript because it is sent via\\n\\\n    // compressed vertex attributes that coerce it to an integer.\\n\\\n    vec2 halfSize = imageSize * scale * 0.5;\\n\\\n    halfSize *= ((direction * 2.0) - 1.0);\\n\\\n\\n\\\n    vec2 originTranslate = origin * abs(halfSize);\\n\\\n\\n\\\n#if defined(ROTATION) || defined(ALIGNED_AXIS)\\n\\\n    if (validAlignedAxis || rotation != 0.0)\\n\\\n    {\\n\\\n        float angle = rotation;\\n\\\n        if (validAlignedAxis)\\n\\\n        {\\n\\\n            vec4 projectedAlignedAxis = czm_modelViewProjection * vec4(alignedAxis, 0.0);\\n\\\n            angle += sign(-projectedAlignedAxis.x) * acos(sign(projectedAlignedAxis.y) * (projectedAlignedAxis.y * projectedAlignedAxis.y) /\\n\\\n                    (projectedAlignedAxis.x * projectedAlignedAxis.x + projectedAlignedAxis.y * projectedAlignedAxis.y));\\n\\\n        }\\n\\\n\\n\\\n        float cosTheta = cos(angle);\\n\\\n        float sinTheta = sin(angle);\\n\\\n        rotationMatrix = mat2(cosTheta, sinTheta, -sinTheta, cosTheta);\\n\\\n        halfSize = rotationMatrix * halfSize;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        rotationMatrix = mat2(1.0, 0.0, 0.0, 1.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    mpp = czm_metersPerPixel(positionEC);\\n\\\n    positionEC.xy += (originTranslate + halfSize) * czm_branchFreeTernary(sizeInMeters, 1.0, mpp);\\n\\\n    positionEC.xy += (translate + pixelOffset) * mpp;\\n\\\n\\n\\\n    return positionEC;\\n\\\n}\\n\\\n\\n\\\n#ifdef VERTEX_DEPTH_CHECK\\n\\\nfloat getGlobeDepth(vec4 positionEC)\\n\\\n{\\n\\\n    vec4 posWC = czm_eyeToWindowCoordinates(positionEC);\\n\\\n\\n\\\n    float globeDepth = czm_unpackDepth(texture2D(czm_globeDepthTexture, posWC.xy / czm_viewport.zw));\\n\\\n\\n\\\n    if (globeDepth == 0.0)\\n\\\n    {\\n\\\n        return 0.0; // not on the globe\\n\\\n    }\\n\\\n\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(posWC.xy, globeDepth);\\n\\\n    return eyeCoordinate.z / eyeCoordinate.w;\\n\\\n}\\n\\\n#endif\\n\\\nvoid main()\\n\\\n{\\n\\\n    // Modifying this shader may also require modifications to Billboard._computeScreenSpacePosition\\n\\\n\\n\\\n    // unpack attributes\\n\\\n    vec3 positionHigh = positionHighAndScale.xyz;\\n\\\n    vec3 positionLow = positionLowAndRotation.xyz;\\n\\\n    float scale = positionHighAndScale.w;\\n\\\n\\n\\\n#if defined(ROTATION) || defined(ALIGNED_AXIS)\\n\\\n    float rotation = positionLowAndRotation.w;\\n\\\n#else\\n\\\n    float rotation = 0.0;\\n\\\n#endif\\n\\\n\\n\\\n    float compressed = compressedAttribute0.x;\\n\\\n\\n\\\n    vec2 pixelOffset;\\n\\\n    pixelOffset.x = floor(compressed * SHIFT_RIGHT7);\\n\\\n    compressed -= pixelOffset.x * SHIFT_LEFT7;\\n\\\n    pixelOffset.x -= UPPER_BOUND;\\n\\\n\\n\\\n    vec2 origin;\\n\\\n    origin.x = floor(compressed * SHIFT_RIGHT5);\\n\\\n    compressed -= origin.x * SHIFT_LEFT5;\\n\\\n\\n\\\n    origin.y = floor(compressed * SHIFT_RIGHT3);\\n\\\n    compressed -= origin.y * SHIFT_LEFT3;\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\n    vec2 depthOrigin = origin.xy;\\n\\\n#endif\\n\\\n    origin -= vec2(1.0);\\n\\\n\\n\\\n    float show = floor(compressed * SHIFT_RIGHT2);\\n\\\n    compressed -= show * SHIFT_LEFT2;\\n\\\n\\n\\\n#ifdef INSTANCED\\n\\\n    vec2 textureCoordinatesBottomLeft = czm_decompressTextureCoordinates(compressedAttribute0.w);\\n\\\n    vec2 textureCoordinatesRange = czm_decompressTextureCoordinates(eyeOffset.w);\\n\\\n    vec2 textureCoordinates = textureCoordinatesBottomLeft + direction * textureCoordinatesRange;\\n\\\n#else\\n\\\n    vec2 direction;\\n\\\n    direction.x = floor(compressed * SHIFT_RIGHT1);\\n\\\n    direction.y = compressed - direction.x * SHIFT_LEFT1;\\n\\\n\\n\\\n    vec2 textureCoordinates = czm_decompressTextureCoordinates(compressedAttribute0.w);\\n\\\n#endif\\n\\\n\\n\\\n    float temp = compressedAttribute0.y  * SHIFT_RIGHT8;\\n\\\n    pixelOffset.y = -(floor(temp) - UPPER_BOUND);\\n\\\n\\n\\\n    vec2 translate;\\n\\\n    translate.y = (temp - floor(temp)) * SHIFT_LEFT16;\\n\\\n\\n\\\n    temp = compressedAttribute0.z * SHIFT_RIGHT8;\\n\\\n    translate.x = floor(temp) - UPPER_BOUND;\\n\\\n\\n\\\n    translate.y += (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    translate.y -= UPPER_BOUND;\\n\\\n\\n\\\n    temp = compressedAttribute1.x * SHIFT_RIGHT8;\\n\\\n    float temp2 = floor(compressedAttribute2.w * SHIFT_RIGHT2);\\n\\\n\\n\\\n    vec2 imageSize = vec2(floor(temp), temp2);\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\n    float labelHorizontalOrigin = floor(compressedAttribute2.w - (temp2 * SHIFT_LEFT2));\\n\\\n    float applyTranslate = 0.0;\\n\\\n    if (labelHorizontalOrigin != 0.0) // is a billboard, so set apply translate to false\\n\\\n    {\\n\\\n        applyTranslate = 1.0;\\n\\\n        labelHorizontalOrigin -= 2.0;\\n\\\n        depthOrigin.x = labelHorizontalOrigin + 1.0;\\n\\\n    }\\n\\\n\\n\\\n    depthOrigin = vec2(1.0) - (depthOrigin * 0.5);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef EYE_DISTANCE_TRANSLUCENCY\\n\\\n    vec4 translucencyByDistance;\\n\\\n    translucencyByDistance.x = compressedAttribute1.z;\\n\\\n    translucencyByDistance.z = compressedAttribute1.w;\\n\\\n\\n\\\n    translucencyByDistance.y = ((temp - floor(temp)) * SHIFT_LEFT8) / 255.0;\\n\\\n\\n\\\n    temp = compressedAttribute1.y * SHIFT_RIGHT8;\\n\\\n    translucencyByDistance.w = ((temp - floor(temp)) * SHIFT_LEFT8) / 255.0;\\n\\\n#endif\\n\\\n\\n\\\n#if defined(VERTEX_DEPTH_CHECK) || defined(FRAGMENT_DEPTH_CHECK)\\n\\\n    temp = compressedAttribute3.w;\\n\\\n    temp = temp * SHIFT_RIGHT12;\\n\\\n\\n\\\n    vec2 dimensions;\\n\\\n    dimensions.y = (temp - floor(temp)) * SHIFT_LEFT12;\\n\\\n    dimensions.x = floor(temp);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef ALIGNED_AXIS\\n\\\n    vec3 alignedAxis = czm_octDecode(floor(compressedAttribute1.y * SHIFT_RIGHT8));\\n\\\n    temp = compressedAttribute2.z * SHIFT_RIGHT5;\\n\\\n    bool validAlignedAxis = (temp - floor(temp)) * SHIFT_LEFT1 > 0.0;\\n\\\n#else\\n\\\n    vec3 alignedAxis = vec3(0.0);\\n\\\n    bool validAlignedAxis = false;\\n\\\n#endif\\n\\\n\\n\\\n    vec4 pickColor;\\n\\\n    vec4 color;\\n\\\n\\n\\\n    temp = compressedAttribute2.y;\\n\\\n    temp = temp * SHIFT_RIGHT8;\\n\\\n    pickColor.b = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    pickColor.g = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    pickColor.r = floor(temp);\\n\\\n\\n\\\n    temp = compressedAttribute2.x;\\n\\\n    temp = temp * SHIFT_RIGHT8;\\n\\\n    color.b = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    color.g = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    color.r = floor(temp);\\n\\\n\\n\\\n    temp = compressedAttribute2.z * SHIFT_RIGHT8;\\n\\\n    bool sizeInMeters = floor((temp - floor(temp)) * SHIFT_LEFT7) > 0.0;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n\\n\\\n    pickColor.a = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    pickColor /= 255.0;\\n\\\n\\n\\\n    color.a = floor(temp);\\n\\\n    color /= 255.0;\\n\\\n\\n\\\n    ///////////////////////////////////////////////////////////////////////////\\n\\\n\\n\\\n    vec4 p = czm_translateRelativeToEye(positionHigh, positionLow);\\n\\\n    vec4 positionEC = czm_modelViewRelativeToEye * p;\\n\\\n\\n\\\n#if defined(FRAGMENT_DEPTH_CHECK) || defined(VERTEX_DEPTH_CHECK)\\n\\\n    float eyeDepth = positionEC.z;\\n\\\n#endif\\n\\\n\\n\\\n    positionEC = czm_eyeOffset(positionEC, eyeOffset.xyz);\\n\\\n    positionEC.xyz *= show;\\n\\\n\\n\\\n    ///////////////////////////////////////////////////////////////////////////\\n\\\n\\n\\\n#if defined(EYE_DISTANCE_SCALING) || defined(EYE_DISTANCE_TRANSLUCENCY) || defined(EYE_DISTANCE_PIXEL_OFFSET) || defined(DISTANCE_DISPLAY_CONDITION) || defined(DISABLE_DEPTH_DISTANCE)\\n\\\n    float lengthSq;\\n\\\n    if (czm_sceneMode == czm_sceneMode2D)\\n\\\n    {\\n\\\n        // 2D camera distance is a special case\\n\\\n        // treat all billboards as flattened to the z=0.0 plane\\n\\\n        lengthSq = czm_eyeHeight2D.y;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        lengthSq = dot(positionEC.xyz, positionEC.xyz);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef EYE_DISTANCE_SCALING\\n\\\n    float distanceScale = czm_nearFarScalar(scaleByDistance, lengthSq);\\n\\\n    scale *= distanceScale;\\n\\\n    translate *= distanceScale;\\n\\\n    // push vertex behind near plane for clipping\\n\\\n    if (scale == 0.0)\\n\\\n    {\\n\\\n        positionEC.xyz = vec3(0.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    float translucency = 1.0;\\n\\\n#ifdef EYE_DISTANCE_TRANSLUCENCY\\n\\\n    translucency = czm_nearFarScalar(translucencyByDistance, lengthSq);\\n\\\n    // push vertex behind near plane for clipping\\n\\\n    if (translucency == 0.0)\\n\\\n    {\\n\\\n        positionEC.xyz = vec3(0.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef EYE_DISTANCE_PIXEL_OFFSET\\n\\\n    float pixelOffsetScale = czm_nearFarScalar(pixelOffsetScaleByDistance, lengthSq);\\n\\\n    pixelOffset *= pixelOffsetScale;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef DISTANCE_DISPLAY_CONDITION\\n\\\n    float nearSq = compressedAttribute3.x;\\n\\\n    float farSq = compressedAttribute3.y;\\n\\\n    if (lengthSq < nearSq || lengthSq > farSq)\\n\\\n    {\\n\\\n        positionEC.xyz = vec3(0.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    mat2 rotationMatrix;\\n\\\n    float mpp;\\n\\\n\\n\\\n#ifdef DISABLE_DEPTH_DISTANCE\\n\\\n    float disableDepthTestDistance = compressedAttribute3.z;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef VERTEX_DEPTH_CHECK\\n\\\nif (lengthSq < disableDepthTestDistance) {\\n\\\n    float depthsilon = 10.0;\\n\\\n\\n\\\n    vec2 labelTranslate = textureCoordinateBoundsOrLabelTranslate.xy;\\n\\\n    vec4 pEC1 = addScreenSpaceOffset(positionEC, dimensions, scale, vec2(0.0), origin, labelTranslate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\\n\\\n    float globeDepth1 = getGlobeDepth(pEC1);\\n\\\n\\n\\\n    if (globeDepth1 != 0.0 && pEC1.z + depthsilon < globeDepth1)\\n\\\n    {\\n\\\n        vec4 pEC2 = addScreenSpaceOffset(positionEC, dimensions, scale, vec2(0.0, 1.0), origin, labelTranslate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\\n\\\n        float globeDepth2 = getGlobeDepth(pEC2);\\n\\\n\\n\\\n        if (globeDepth2 != 0.0 && pEC2.z + depthsilon < globeDepth2)\\n\\\n        {\\n\\\n            vec4 pEC3 = addScreenSpaceOffset(positionEC, dimensions, scale, vec2(1.0), origin, labelTranslate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\\n\\\n            float globeDepth3 = getGlobeDepth(pEC3);\\n\\\n            if (globeDepth3 != 0.0 && pEC3.z + depthsilon < globeDepth3)\\n\\\n            {\\n\\\n                positionEC.xyz = vec3(0.0);\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n    positionEC = addScreenSpaceOffset(positionEC, imageSize, scale, direction, origin, translate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\\n\\\n    gl_Position = czm_projection * positionEC;\\n\\\n    v_textureCoordinates = textureCoordinates;\\n\\\n\\n\\\n#ifdef LOG_DEPTH\\n\\\n    czm_vertexLogDepth();\\n\\\n#endif\\n\\\n\\n\\\n#ifdef DISABLE_DEPTH_DISTANCE\\n\\\n    if (disableDepthTestDistance == 0.0 && czm_minimumDisableDepthTestDistance != 0.0)\\n\\\n    {\\n\\\n        disableDepthTestDistance = czm_minimumDisableDepthTestDistance;\\n\\\n    }\\n\\\n\\n\\\n    if (disableDepthTestDistance != 0.0)\\n\\\n    {\\n\\\n        // Don't try to \\\"multiply both sides\\\" by w.  Greater/less-than comparisons won't work for negative values of w.\\n\\\n        float zclip = gl_Position.z / gl_Position.w;\\n\\\n        bool clipped = (zclip < -1.0 || zclip > 1.0);\\n\\\n        if (!clipped && (disableDepthTestDistance < 0.0 || (lengthSq > 0.0 && lengthSq < disableDepthTestDistance)))\\n\\\n        {\\n\\\n            // Position z on the near plane.\\n\\\n            gl_Position.z = -gl_Position.w;\\n\\\n#ifdef LOG_DEPTH\\n\\\n            v_depthFromNearPlusOne = 1.0;\\n\\\n#endif\\n\\\n        }\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\n    if (sizeInMeters) {\\n\\\n        translate /= mpp;\\n\\\n        dimensions /= mpp;\\n\\\n        imageSize /= mpp;\\n\\\n    }\\n\\\n\\n\\\n#if defined(ROTATION) || defined(ALIGNED_AXIS)\\n\\\n    v_rotationMatrix = rotationMatrix;\\n\\\n#else\\n\\\n    v_rotationMatrix = mat2(1.0, 0.0, 0.0, 1.0);\\n\\\n#endif\\n\\\n\\n\\\n    float enableDepthCheck = 0.0;\\n\\\n    if (lengthSq < disableDepthTestDistance)\\n\\\n    {\\n\\\n        enableDepthCheck = 1.0;\\n\\\n    }\\n\\\n\\n\\\n    float dw = floor(clamp(dimensions.x, 0.0, SHIFT_LEFT12));\\n\\\n    float dh = floor(clamp(dimensions.y, 0.0, SHIFT_LEFT12));\\n\\\n\\n\\\n    float iw = floor(clamp(imageSize.x, 0.0, SHIFT_LEFT12));\\n\\\n    float ih = floor(clamp(imageSize.y, 0.0, SHIFT_LEFT12));\\n\\\n\\n\\\n    v_compressed.x = eyeDepth;\\n\\\n    v_compressed.y = applyTranslate * SHIFT_LEFT1 + enableDepthCheck;\\n\\\n    v_compressed.z = dw * SHIFT_LEFT12 + dh;\\n\\\n    v_compressed.w = iw * SHIFT_LEFT12 + ih;\\n\\\n    v_originTextureCoordinateAndTranslate.xy = depthOrigin;\\n\\\n    v_originTextureCoordinateAndTranslate.zw = translate;\\n\\\n    v_textureCoordinateBounds = textureCoordinateBoundsOrLabelTranslate;\\n\\\n\\n\\\n#endif\\n\\\n\\n\\\n#ifdef SDF\\n\\\n    vec4 outlineColor;\\n\\\n    float outlineWidth;\\n\\\n\\n\\\n    temp = sdf.x;\\n\\\n    temp = temp * SHIFT_RIGHT8;\\n\\\n    outlineColor.b = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    outlineColor.g = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    outlineColor.r = floor(temp);\\n\\\n\\n\\\n    temp = sdf.y;\\n\\\n    temp = temp * SHIFT_RIGHT8;\\n\\\n    float temp3 = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    outlineWidth = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    outlineColor.a = floor(temp);\\n\\\n    outlineColor /= 255.0;\\n\\\n\\n\\\n    v_outlineWidth = outlineWidth / 255.0;\\n\\\n    v_outlineColor = outlineColor;\\n\\\n    v_outlineColor.a *= translucency;\\n\\\n#endif\\n\\\n\\n\\\n    v_pickColor = pickColor;\\n\\\n\\n\\\n    v_color = color;\\n\\\n    v_color.a *= translucency;\\n\\\n\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec2 v_textureCoordinates;\\n\\\nconst float M_PI = 3.141592653589793;\\n\\\n\\n\\\nfloat vdcRadicalInverse(int i)\\n\\\n{\\n\\\n    float r;\\n\\\n    float base = 2.0;\\n\\\n    float value = 0.0;\\n\\\n    float invBase = 1.0 / base;\\n\\\n    float invBi = invBase;\\n\\\n    for (int x = 0; x < 100; x++)\\n\\\n    {\\n\\\n        if (i <= 0)\\n\\\n        {\\n\\\n            break;\\n\\\n        }\\n\\\n        r = mod(float(i), base);\\n\\\n        value += r * invBi;\\n\\\n        invBi *= invBase;\\n\\\n        i = int(float(i) * invBase);\\n\\\n    }\\n\\\n    return value;\\n\\\n}\\n\\\n\\n\\\nvec2 hammersley2D(int i, int N)\\n\\\n{\\n\\\n    return vec2(float(i) / float(N), vdcRadicalInverse(i));\\n\\\n}\\n\\\n\\n\\\nvec3 importanceSampleGGX(vec2 xi, float roughness, vec3 N)\\n\\\n{\\n\\\n    float a = roughness * roughness;\\n\\\n    float phi = 2.0 * M_PI * xi.x;\\n\\\n    float cosTheta = sqrt((1.0 - xi.y) / (1.0 + (a * a - 1.0) * xi.y));\\n\\\n    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\\n\\\n    vec3 H = vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);\\n\\\n    vec3 upVector = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\\n\\\n    vec3 tangentX = normalize(cross(upVector, N));\\n\\\n    vec3 tangentY = cross(N, tangentX);\\n\\\n    return tangentX * H.x + tangentY * H.y + N * H.z;\\n\\\n}\\n\\\n\\n\\\nfloat G1_Smith(float NdotV, float k)\\n\\\n{\\n\\\n    return NdotV / (NdotV * (1.0 - k) + k);\\n\\\n}\\n\\\n\\n\\\nfloat G_Smith(float roughness, float NdotV, float NdotL)\\n\\\n{\\n\\\n    float k = roughness * roughness / 2.0;\\n\\\n    return G1_Smith(NdotV, k) * G1_Smith(NdotL, k);\\n\\\n}\\n\\\n\\n\\\nvec2 integrateBrdf(float roughness, float NdotV)\\n\\\n{\\n\\\n    vec3 V = vec3(sqrt(1.0 - NdotV * NdotV), 0.0, NdotV);\\n\\\n    float A = 0.0;\\n\\\n    float B = 0.0;\\n\\\n    const int NumSamples = 1024;\\n\\\n    for (int i = 0; i < NumSamples; i++)\\n\\\n    {\\n\\\n        vec2 xi = hammersley2D(i, NumSamples);\\n\\\n        vec3 H = importanceSampleGGX(xi, roughness, vec3(0.0, 0.0, 1.0));\\n\\\n        vec3 L = 2.0 * dot(V, H) * H - V;\\n\\\n        float NdotL = clamp(L.z, 0.0, 1.0);\\n\\\n        float NdotH = clamp(H.z, 0.0, 1.0);\\n\\\n        float VdotH = clamp(dot(V, H), 0.0, 1.0);\\n\\\n        if (NdotL > 0.0)\\n\\\n        {\\n\\\n            float G = G_Smith(roughness, NdotV, NdotL);\\n\\\n            float G_Vis = G * VdotH / (NdotH * NdotV);\\n\\\n            float Fc = pow(1.0 - VdotH, 5.0);\\n\\\n            A += (1.0 - Fc) * G_Vis;\\n\\\n            B += Fc * G_Vis;\\n\\\n        }\\n\\\n    }\\n\\\n    return vec2(A, B) / float(NumSamples);\\n\\\n}\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    gl_FragColor = vec4(integrateBrdf(v_textureCoordinates.y, v_textureCoordinates.x), 0.0, 1.0);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * A built-in GLSL floating-point constant for converting radians to degrees.\\n\\\n *\\n\\\n * @alias czm_degreesPerRadian\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.DEGREES_PER_RADIAN\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_degreesPerRadian = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float deg = czm_degreesPerRadian * rad;\\n\\\n */\\n\\\nconst float czm_degreesPerRadian = 57.29577951308232;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * A built-in GLSL vec2 constant for defining the depth range.\\n\\\n * This is a workaround to a bug where IE11 does not implement gl_DepthRange.\\n\\\n *\\n\\\n * @alias czm_depthRange\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * float depthRangeNear = czm_depthRange.near;\\n\\\n * float depthRangeFar = czm_depthRange.far;\\n\\\n *\\n\\\n */\\n\\\nconst czm_depthRangeStruct czm_depthRange = czm_depthRangeStruct(0.0, 1.0);\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * 0.1\\n\\\n *\\n\\\n * @name czm_epsilon1\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_epsilon1 = 0.1;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * 0.01\\n\\\n *\\n\\\n * @name czm_epsilon2\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_epsilon2 = 0.01;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * 0.001\\n\\\n *\\n\\\n * @name czm_epsilon3\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_epsilon3 = 0.001;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * 0.0001\\n\\\n *\\n\\\n * @name czm_epsilon4\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_epsilon4 = 0.0001;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * 0.00001\\n\\\n *\\n\\\n * @name czm_epsilon5\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_epsilon5 = 0.00001;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * 0.000001\\n\\\n *\\n\\\n * @name czm_epsilon6\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_epsilon6 = 0.000001;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * 0.0000001\\n\\\n *\\n\\\n * @name czm_epsilon7\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_epsilon7 = 0.0000001;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_infinity\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_infinity = 5906376272000.0;  // Distance from the Sun to Pluto in meters.  TODO: What is best given lowp, mediump, and highp?\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * A built-in GLSL floating-point constant for <code>1/pi</code>.\\n\\\n *\\n\\\n * @alias czm_oneOverPi\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.ONE_OVER_PI\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_oneOverPi = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float pi = 1.0 / czm_oneOverPi;\\n\\\n */\\n\\\nconst float czm_oneOverPi = 0.3183098861837907;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * A built-in GLSL floating-point constant for <code>1/2pi</code>.\\n\\\n *\\n\\\n * @alias czm_oneOverTwoPi\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.ONE_OVER_TWO_PI\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_oneOverTwoPi = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float pi = 2.0 * czm_oneOverTwoPi;\\n\\\n */\\n\\\nconst float czm_oneOverTwoPi = 0.15915494309189535;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * The automatic GLSL constant for {@link Pass#CESIUM_3D_TILE}\\n\\\n *\\n\\\n * @name czm_passCesium3DTile\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passCesium3DTile = 4.0;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * The automatic GLSL constant for {@link Pass#CESIUM_3D_TILE_CLASSIFICATION}\\n\\\n *\\n\\\n * @name czm_passCesium3DTileClassification\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passCesium3DTileClassification = 5.0;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * The automatic GLSL constant for {@link Pass#CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW}\\n\\\n *\\n\\\n * @name czm_passCesium3DTileClassificationIgnoreShow\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passCesium3DTileClassificationIgnoreShow = 6.0;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * The automatic GLSL constant for {@link Pass#CLASSIFICATION}\\n\\\n *\\n\\\n * @name czm_passClassification\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passClassification = 7.0;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * The automatic GLSL constant for {@link Pass#COMPUTE}\\n\\\n *\\n\\\n * @name czm_passCompute\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passCompute = 1.0;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * The automatic GLSL constant for {@link Pass#ENVIRONMENT}\\n\\\n *\\n\\\n * @name czm_passEnvironment\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passEnvironment = 0.0;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * The automatic GLSL constant for {@link Pass#GLOBE}\\n\\\n *\\n\\\n * @name czm_passGlobe\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passGlobe = 2.0;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * The automatic GLSL constant for {@link Pass#OPAQUE}\\n\\\n *\\n\\\n * @name czm_passOpaque\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passOpaque = 7.0;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * The automatic GLSL constant for {@link Pass#OVERLAY}\\n\\\n *\\n\\\n * @name czm_passOverlay\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passOverlay = 9.0;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * The automatic GLSL constant for {@link Pass#TERRAIN_CLASSIFICATION}\\n\\\n *\\n\\\n * @name czm_passTerrainClassification\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passTerrainClassification = 3.0;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * The automatic GLSL constant for {@link Pass#TRANSLUCENT}\\n\\\n *\\n\\\n * @name czm_passTranslucent\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see czm_pass\\n\\\n */\\n\\\nconst float czm_passTranslucent = 8.0;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * A built-in GLSL floating-point constant for <code>Math.PI</code>.\\n\\\n *\\n\\\n * @alias czm_pi\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.PI\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_pi = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float twoPi = 2.0 * czm_pi;\\n\\\n */\\n\\\nconst float czm_pi = 3.141592653589793;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * A built-in GLSL floating-point constant for <code>pi/4</code>.\\n\\\n *\\n\\\n * @alias czm_piOverFour\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.PI_OVER_FOUR\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_piOverFour = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float pi = 4.0 * czm_piOverFour;\\n\\\n */\\n\\\nconst float czm_piOverFour = 0.7853981633974483;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * A built-in GLSL floating-point constant for <code>pi/6</code>.\\n\\\n *\\n\\\n * @alias czm_piOverSix\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.PI_OVER_SIX\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_piOverSix = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float pi = 6.0 * czm_piOverSix;\\n\\\n */\\n\\\nconst float czm_piOverSix = 0.5235987755982988;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * A built-in GLSL floating-point constant for <code>pi/3</code>.\\n\\\n *\\n\\\n * @alias czm_piOverThree\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.PI_OVER_THREE\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_piOverThree = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float pi = 3.0 * czm_piOverThree;\\n\\\n */\\n\\\nconst float czm_piOverThree = 1.0471975511965976;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * A built-in GLSL floating-point constant for <code>pi/2</code>.\\n\\\n *\\n\\\n * @alias czm_piOverTwo\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.PI_OVER_TWO\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_piOverTwo = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float pi = 2.0 * czm_piOverTwo;\\n\\\n */\\n\\\nconst float czm_piOverTwo = 1.5707963267948966;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * A built-in GLSL floating-point constant for converting degrees to radians.\\n\\\n *\\n\\\n * @alias czm_radiansPerDegree\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.RADIANS_PER_DEGREE\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_radiansPerDegree = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float rad = czm_radiansPerDegree * deg;\\n\\\n */\\n\\\nconst float czm_radiansPerDegree = 0.017453292519943295;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * The constant identifier for the 2D {@link SceneMode}\\n\\\n *\\n\\\n * @name czm_sceneMode2D\\n\\\n * @glslConstant\\n\\\n * @see czm_sceneMode\\n\\\n * @see czm_sceneModeColumbusView\\n\\\n * @see czm_sceneMode3D\\n\\\n * @see czm_sceneModeMorphing\\n\\\n */\\n\\\nconst float czm_sceneMode2D = 2.0;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * The constant identifier for the 3D {@link SceneMode}\\n\\\n *\\n\\\n * @name czm_sceneMode3D\\n\\\n * @glslConstant\\n\\\n * @see czm_sceneMode\\n\\\n * @see czm_sceneMode2D\\n\\\n * @see czm_sceneModeColumbusView\\n\\\n * @see czm_sceneModeMorphing\\n\\\n */\\n\\\nconst float czm_sceneMode3D = 3.0;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * The constant identifier for the Columbus View {@link SceneMode}\\n\\\n *\\n\\\n * @name czm_sceneModeColumbusView\\n\\\n * @glslConstant\\n\\\n * @see czm_sceneMode\\n\\\n * @see czm_sceneMode2D\\n\\\n * @see czm_sceneMode3D\\n\\\n * @see czm_sceneModeMorphing\\n\\\n */\\n\\\nconst float czm_sceneModeColumbusView = 1.0;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * The constant identifier for the Morphing {@link SceneMode}\\n\\\n *\\n\\\n * @name czm_sceneModeMorphing\\n\\\n * @glslConstant\\n\\\n * @see czm_sceneMode\\n\\\n * @see czm_sceneMode2D\\n\\\n * @see czm_sceneModeColumbusView\\n\\\n * @see czm_sceneMode3D\\n\\\n */\\n\\\nconst float czm_sceneModeMorphing = 0.0;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * A built-in GLSL floating-point constant for one solar radius.\\n\\\n *\\n\\\n * @alias czm_solarRadius\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.SOLAR_RADIUS\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_solarRadius = ...;\\n\\\n */\\n\\\nconst float czm_solarRadius = 695500000.0;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * A built-in GLSL floating-point constant for <code>3pi/2</code>.\\n\\\n *\\n\\\n * @alias czm_threePiOver2\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.THREE_PI_OVER_TWO\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_threePiOver2 = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float pi = (2.0 / 3.0) * czm_threePiOver2;\\n\\\n */\\n\\\nconst float czm_threePiOver2 = 4.71238898038469;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * A built-in GLSL floating-point constant for <code>2pi</code>.\\n\\\n *\\n\\\n * @alias czm_twoPi\\n\\\n * @glslConstant\\n\\\n *\\n\\\n * @see CesiumMath.TWO_PI\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declaration\\n\\\n * const float czm_twoPi = ...;\\n\\\n *\\n\\\n * // Example\\n\\\n * float pi = czm_twoPi / 2.0;\\n\\\n */\\n\\\nconst float czm_twoPi = 6.283185307179586;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * The maximum latitude, in radians, both North and South, supported by a Web Mercator\\n\\\n * (EPSG:3857) projection.  Technically, the Mercator projection is defined\\n\\\n * for any latitude up to (but not including) 90 degrees, but it makes sense\\n\\\n * to cut it off sooner because it grows exponentially with increasing latitude.\\n\\\n * The logic behind this particular cutoff value, which is the one used by\\n\\\n * Google Maps, Bing Maps, and Esri, is that it makes the projection\\n\\\n * square.  That is, the rectangle is equal in the X and Y directions.\\n\\\n *\\n\\\n * The constant value is computed as follows:\\n\\\n *   czm_pi * 0.5 - (2.0 * atan(exp(-czm_pi)))\\n\\\n *\\n\\\n * @name czm_webMercatorMaxLatitude\\n\\\n * @glslConstant\\n\\\n */\\n\\\nconst float czm_webMercatorMaxLatitude = 1.4844222297453324;\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nimport czm_degreesPerRadian from './Constants/degreesPerRadian.js'\nimport czm_depthRange from './Constants/depthRange.js'\nimport czm_epsilon1 from './Constants/epsilon1.js'\nimport czm_epsilon2 from './Constants/epsilon2.js'\nimport czm_epsilon3 from './Constants/epsilon3.js'\nimport czm_epsilon4 from './Constants/epsilon4.js'\nimport czm_epsilon5 from './Constants/epsilon5.js'\nimport czm_epsilon6 from './Constants/epsilon6.js'\nimport czm_epsilon7 from './Constants/epsilon7.js'\nimport czm_infinity from './Constants/infinity.js'\nimport czm_oneOverPi from './Constants/oneOverPi.js'\nimport czm_oneOverTwoPi from './Constants/oneOverTwoPi.js'\nimport czm_passCesium3DTile from './Constants/passCesium3DTile.js'\nimport czm_passCesium3DTileClassification from './Constants/passCesium3DTileClassification.js'\nimport czm_passCesium3DTileClassificationIgnoreShow from './Constants/passCesium3DTileClassificationIgnoreShow.js'\nimport czm_passClassification from './Constants/passClassification.js'\nimport czm_passCompute from './Constants/passCompute.js'\nimport czm_passEnvironment from './Constants/passEnvironment.js'\nimport czm_passGlobe from './Constants/passGlobe.js'\nimport czm_passOpaque from './Constants/passOpaque.js'\nimport czm_passOverlay from './Constants/passOverlay.js'\nimport czm_passTerrainClassification from './Constants/passTerrainClassification.js'\nimport czm_passTranslucent from './Constants/passTranslucent.js'\nimport czm_pi from './Constants/pi.js'\nimport czm_piOverFour from './Constants/piOverFour.js'\nimport czm_piOverSix from './Constants/piOverSix.js'\nimport czm_piOverThree from './Constants/piOverThree.js'\nimport czm_piOverTwo from './Constants/piOverTwo.js'\nimport czm_radiansPerDegree from './Constants/radiansPerDegree.js'\nimport czm_sceneMode2D from './Constants/sceneMode2D.js'\nimport czm_sceneMode3D from './Constants/sceneMode3D.js'\nimport czm_sceneModeColumbusView from './Constants/sceneModeColumbusView.js'\nimport czm_sceneModeMorphing from './Constants/sceneModeMorphing.js'\nimport czm_solarRadius from './Constants/solarRadius.js'\nimport czm_threePiOver2 from './Constants/threePiOver2.js'\nimport czm_twoPi from './Constants/twoPi.js'\nimport czm_webMercatorMaxLatitude from './Constants/webMercatorMaxLatitude.js'\nimport czm_depthRangeStruct from './Structs/depthRangeStruct.js'\nimport czm_material from './Structs/material.js'\nimport czm_materialInput from './Structs/materialInput.js'\nimport czm_modelMaterial from './Structs/modelMaterial.js'\nimport czm_modelVertexOutput from './Structs/modelVertexOutput.js'\nimport czm_pbrParameters from './Structs/pbrParameters.js'\nimport czm_ray from './Structs/ray.js'\nimport czm_raySegment from './Structs/raySegment.js'\nimport czm_shadowParameters from './Structs/shadowParameters.js'\nimport czm_HSBToRGB from './Functions/HSBToRGB.js'\nimport czm_HSLToRGB from './Functions/HSLToRGB.js'\nimport czm_RGBToHSB from './Functions/RGBToHSB.js'\nimport czm_RGBToHSL from './Functions/RGBToHSL.js'\nimport czm_RGBToXYZ from './Functions/RGBToXYZ.js'\nimport czm_XYZToRGB from './Functions/XYZToRGB.js'\nimport czm_acesTonemapping from './Functions/acesTonemapping.js'\nimport czm_alphaWeight from './Functions/alphaWeight.js'\nimport czm_antialias from './Functions/antialias.js'\nimport czm_approximateSphericalCoordinates from './Functions/approximateSphericalCoordinates.js'\nimport czm_backFacing from './Functions/backFacing.js'\nimport czm_branchFreeTernary from './Functions/branchFreeTernary.js'\nimport czm_cascadeColor from './Functions/cascadeColor.js'\nimport czm_cascadeDistance from './Functions/cascadeDistance.js'\nimport czm_cascadeMatrix from './Functions/cascadeMatrix.js'\nimport czm_cascadeWeights from './Functions/cascadeWeights.js'\nimport czm_columbusViewMorph from './Functions/columbusViewMorph.js'\nimport czm_computePosition from './Functions/computePosition.js'\nimport czm_cosineAndSine from './Functions/cosineAndSine.js'\nimport czm_decompressTextureCoordinates from './Functions/decompressTextureCoordinates.js'\nimport czm_defaultPbrMaterial from './Functions/defaultPbrMaterial.js'\nimport czm_depthClamp from './Functions/depthClamp.js'\nimport czm_eastNorthUpToEyeCoordinates from './Functions/eastNorthUpToEyeCoordinates.js'\nimport czm_ellipsoidContainsPoint from './Functions/ellipsoidContainsPoint.js'\nimport czm_ellipsoidWgs84TextureCoordinates from './Functions/ellipsoidWgs84TextureCoordinates.js'\nimport czm_equalsEpsilon from './Functions/equalsEpsilon.js'\nimport czm_eyeOffset from './Functions/eyeOffset.js'\nimport czm_eyeToWindowCoordinates from './Functions/eyeToWindowCoordinates.js'\nimport czm_fastApproximateAtan from './Functions/fastApproximateAtan.js'\nimport czm_fog from './Functions/fog.js'\nimport czm_gammaCorrect from './Functions/gammaCorrect.js'\nimport czm_geodeticSurfaceNormal from './Functions/geodeticSurfaceNormal.js'\nimport czm_getDefaultMaterial from './Functions/getDefaultMaterial.js'\nimport czm_getLambertDiffuse from './Functions/getLambertDiffuse.js'\nimport czm_getSpecular from './Functions/getSpecular.js'\nimport czm_getWaterNoise from './Functions/getWaterNoise.js'\nimport czm_hue from './Functions/hue.js'\nimport czm_inverseGamma from './Functions/inverseGamma.js'\nimport czm_isEmpty from './Functions/isEmpty.js'\nimport czm_isFull from './Functions/isFull.js'\nimport czm_latitudeToWebMercatorFraction from './Functions/latitudeToWebMercatorFraction.js'\nimport czm_lineDistance from './Functions/lineDistance.js'\nimport czm_linearToSrgb from './Functions/linearToSrgb.js'\nimport czm_luminance from './Functions/luminance.js'\nimport czm_metersPerPixel from './Functions/metersPerPixel.js'\nimport czm_modelToWindowCoordinates from './Functions/modelToWindowCoordinates.js'\nimport czm_multiplyWithColorBalance from './Functions/multiplyWithColorBalance.js'\nimport czm_nearFarScalar from './Functions/nearFarScalar.js'\nimport czm_octDecode from './Functions/octDecode.js'\nimport czm_packDepth from './Functions/packDepth.js'\nimport czm_pbrLighting from './Functions/pbrLighting.js'\nimport czm_pbrMetallicRoughnessMaterial from './Functions/pbrMetallicRoughnessMaterial.js'\nimport czm_pbrSpecularGlossinessMaterial from './Functions/pbrSpecularGlossinessMaterial.js'\nimport czm_phong from './Functions/phong.js'\nimport czm_planeDistance from './Functions/planeDistance.js'\nimport czm_pointAlongRay from './Functions/pointAlongRay.js'\nimport czm_rayEllipsoidIntersectionInterval from './Functions/rayEllipsoidIntersectionInterval.js'\nimport czm_raySphereIntersectionInterval from './Functions/raySphereIntersectionInterval.js'\nimport czm_readDepth from './Functions/readDepth.js'\nimport czm_readNonPerspective from './Functions/readNonPerspective.js'\nimport czm_reverseLogDepth from './Functions/reverseLogDepth.js'\nimport czm_round from './Functions/round.js'\nimport czm_sampleOctahedralProjection from './Functions/sampleOctahedralProjection.js'\nimport czm_saturation from './Functions/saturation.js'\nimport czm_shadowDepthCompare from './Functions/shadowDepthCompare.js'\nimport czm_shadowVisibility from './Functions/shadowVisibility.js'\nimport czm_signNotZero from './Functions/signNotZero.js'\nimport czm_sphericalHarmonics from './Functions/sphericalHarmonics.js'\nimport czm_srgbToLinear from './Functions/srgbToLinear.js'\nimport czm_tangentToEyeSpaceMatrix from './Functions/tangentToEyeSpaceMatrix.js'\nimport czm_transformPlane from './Functions/transformPlane.js'\nimport czm_translateRelativeToEye from './Functions/translateRelativeToEye.js'\nimport czm_translucentPhong from './Functions/translucentPhong.js'\nimport czm_transpose from './Functions/transpose.js'\nimport czm_unpackDepth from './Functions/unpackDepth.js'\nimport czm_unpackFloat from './Functions/unpackFloat.js'\nimport czm_unpackUint from './Functions/unpackUint.js'\nimport czm_valueTransform from './Functions/valueTransform.js'\nimport czm_vertexLogDepth from './Functions/vertexLogDepth.js'\nimport czm_windowToEyeCoordinates from './Functions/windowToEyeCoordinates.js'\nimport czm_writeDepthClamp from './Functions/writeDepthClamp.js'\nimport czm_writeLogDepth from './Functions/writeLogDepth.js'\nimport czm_writeNonPerspective from './Functions/writeNonPerspective.js'\n\nexport default {\n    czm_degreesPerRadian : czm_degreesPerRadian,\n    czm_depthRange : czm_depthRange,\n    czm_epsilon1 : czm_epsilon1,\n    czm_epsilon2 : czm_epsilon2,\n    czm_epsilon3 : czm_epsilon3,\n    czm_epsilon4 : czm_epsilon4,\n    czm_epsilon5 : czm_epsilon5,\n    czm_epsilon6 : czm_epsilon6,\n    czm_epsilon7 : czm_epsilon7,\n    czm_infinity : czm_infinity,\n    czm_oneOverPi : czm_oneOverPi,\n    czm_oneOverTwoPi : czm_oneOverTwoPi,\n    czm_passCesium3DTile : czm_passCesium3DTile,\n    czm_passCesium3DTileClassification : czm_passCesium3DTileClassification,\n    czm_passCesium3DTileClassificationIgnoreShow : czm_passCesium3DTileClassificationIgnoreShow,\n    czm_passClassification : czm_passClassification,\n    czm_passCompute : czm_passCompute,\n    czm_passEnvironment : czm_passEnvironment,\n    czm_passGlobe : czm_passGlobe,\n    czm_passOpaque : czm_passOpaque,\n    czm_passOverlay : czm_passOverlay,\n    czm_passTerrainClassification : czm_passTerrainClassification,\n    czm_passTranslucent : czm_passTranslucent,\n    czm_pi : czm_pi,\n    czm_piOverFour : czm_piOverFour,\n    czm_piOverSix : czm_piOverSix,\n    czm_piOverThree : czm_piOverThree,\n    czm_piOverTwo : czm_piOverTwo,\n    czm_radiansPerDegree : czm_radiansPerDegree,\n    czm_sceneMode2D : czm_sceneMode2D,\n    czm_sceneMode3D : czm_sceneMode3D,\n    czm_sceneModeColumbusView : czm_sceneModeColumbusView,\n    czm_sceneModeMorphing : czm_sceneModeMorphing,\n    czm_solarRadius : czm_solarRadius,\n    czm_threePiOver2 : czm_threePiOver2,\n    czm_twoPi : czm_twoPi,\n    czm_webMercatorMaxLatitude : czm_webMercatorMaxLatitude,\n    czm_depthRangeStruct : czm_depthRangeStruct,\n    czm_material : czm_material,\n    czm_materialInput : czm_materialInput,\n    czm_modelMaterial : czm_modelMaterial,\n    czm_modelVertexOutput : czm_modelVertexOutput,\n    czm_pbrParameters : czm_pbrParameters,\n    czm_ray : czm_ray,\n    czm_raySegment : czm_raySegment,\n    czm_shadowParameters : czm_shadowParameters,\n    czm_HSBToRGB : czm_HSBToRGB,\n    czm_HSLToRGB : czm_HSLToRGB,\n    czm_RGBToHSB : czm_RGBToHSB,\n    czm_RGBToHSL : czm_RGBToHSL,\n    czm_RGBToXYZ : czm_RGBToXYZ,\n    czm_XYZToRGB : czm_XYZToRGB,\n    czm_acesTonemapping : czm_acesTonemapping,\n    czm_alphaWeight : czm_alphaWeight,\n    czm_antialias : czm_antialias,\n    czm_approximateSphericalCoordinates : czm_approximateSphericalCoordinates,\n    czm_backFacing : czm_backFacing,\n    czm_branchFreeTernary : czm_branchFreeTernary,\n    czm_cascadeColor : czm_cascadeColor,\n    czm_cascadeDistance : czm_cascadeDistance,\n    czm_cascadeMatrix : czm_cascadeMatrix,\n    czm_cascadeWeights : czm_cascadeWeights,\n    czm_columbusViewMorph : czm_columbusViewMorph,\n    czm_computePosition : czm_computePosition,\n    czm_cosineAndSine : czm_cosineAndSine,\n    czm_decompressTextureCoordinates : czm_decompressTextureCoordinates,\n    czm_defaultPbrMaterial : czm_defaultPbrMaterial,\n    czm_depthClamp : czm_depthClamp,\n    czm_eastNorthUpToEyeCoordinates : czm_eastNorthUpToEyeCoordinates,\n    czm_ellipsoidContainsPoint : czm_ellipsoidContainsPoint,\n    czm_ellipsoidWgs84TextureCoordinates : czm_ellipsoidWgs84TextureCoordinates,\n    czm_equalsEpsilon : czm_equalsEpsilon,\n    czm_eyeOffset : czm_eyeOffset,\n    czm_eyeToWindowCoordinates : czm_eyeToWindowCoordinates,\n    czm_fastApproximateAtan : czm_fastApproximateAtan,\n    czm_fog : czm_fog,\n    czm_gammaCorrect : czm_gammaCorrect,\n    czm_geodeticSurfaceNormal : czm_geodeticSurfaceNormal,\n    czm_getDefaultMaterial : czm_getDefaultMaterial,\n    czm_getLambertDiffuse : czm_getLambertDiffuse,\n    czm_getSpecular : czm_getSpecular,\n    czm_getWaterNoise : czm_getWaterNoise,\n    czm_hue : czm_hue,\n    czm_inverseGamma : czm_inverseGamma,\n    czm_isEmpty : czm_isEmpty,\n    czm_isFull : czm_isFull,\n    czm_latitudeToWebMercatorFraction : czm_latitudeToWebMercatorFraction,\n    czm_lineDistance : czm_lineDistance,\n    czm_linearToSrgb : czm_linearToSrgb,\n    czm_luminance : czm_luminance,\n    czm_metersPerPixel : czm_metersPerPixel,\n    czm_modelToWindowCoordinates : czm_modelToWindowCoordinates,\n    czm_multiplyWithColorBalance : czm_multiplyWithColorBalance,\n    czm_nearFarScalar : czm_nearFarScalar,\n    czm_octDecode : czm_octDecode,\n    czm_packDepth : czm_packDepth,\n    czm_pbrLighting : czm_pbrLighting,\n    czm_pbrMetallicRoughnessMaterial : czm_pbrMetallicRoughnessMaterial,\n    czm_pbrSpecularGlossinessMaterial : czm_pbrSpecularGlossinessMaterial,\n    czm_phong : czm_phong,\n    czm_planeDistance : czm_planeDistance,\n    czm_pointAlongRay : czm_pointAlongRay,\n    czm_rayEllipsoidIntersectionInterval : czm_rayEllipsoidIntersectionInterval,\n    czm_raySphereIntersectionInterval : czm_raySphereIntersectionInterval,\n    czm_readDepth : czm_readDepth,\n    czm_readNonPerspective : czm_readNonPerspective,\n    czm_reverseLogDepth : czm_reverseLogDepth,\n    czm_round : czm_round,\n    czm_sampleOctahedralProjection : czm_sampleOctahedralProjection,\n    czm_saturation : czm_saturation,\n    czm_shadowDepthCompare : czm_shadowDepthCompare,\n    czm_shadowVisibility : czm_shadowVisibility,\n    czm_signNotZero : czm_signNotZero,\n    czm_sphericalHarmonics : czm_sphericalHarmonics,\n    czm_srgbToLinear : czm_srgbToLinear,\n    czm_tangentToEyeSpaceMatrix : czm_tangentToEyeSpaceMatrix,\n    czm_transformPlane : czm_transformPlane,\n    czm_translateRelativeToEye : czm_translateRelativeToEye,\n    czm_translucentPhong : czm_translucentPhong,\n    czm_transpose : czm_transpose,\n    czm_unpackDepth : czm_unpackDepth,\n    czm_unpackFloat : czm_unpackFloat,\n    czm_unpackUint : czm_unpackUint,\n    czm_valueTransform : czm_valueTransform,\n    czm_vertexLogDepth : czm_vertexLogDepth,\n    czm_windowToEyeCoordinates : czm_windowToEyeCoordinates,\n    czm_writeDepthClamp : czm_writeDepthClamp,\n    czm_writeLogDepth : czm_writeLogDepth,\n    czm_writeNonPerspective : czm_writeNonPerspective\n};\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Converts an HSB color (hue, saturation, brightness) to RGB\\n\\\n * HSB <-> RGB conversion with minimal branching: {@link http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl}\\n\\\n *\\n\\\n * @name czm_HSBToRGB\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} hsb The color in HSB.\\n\\\n *\\n\\\n * @returns {vec3} The color in RGB.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 hsb = czm_RGBToHSB(rgb);\\n\\\n * hsb.z *= 0.1;\\n\\\n * rgb = czm_HSBToRGB(hsb);\\n\\\n */\\n\\\n\\n\\\nconst vec4 K_HSB2RGB = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n\\\n\\n\\\nvec3 czm_HSBToRGB(vec3 hsb)\\n\\\n{\\n\\\n    vec3 p = abs(fract(hsb.xxx + K_HSB2RGB.xyz) * 6.0 - K_HSB2RGB.www);\\n\\\n    return hsb.z * mix(K_HSB2RGB.xxx, clamp(p - K_HSB2RGB.xxx, 0.0, 1.0), hsb.y);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Converts an HSL color (hue, saturation, lightness) to RGB\\n\\\n * HSL <-> RGB conversion: {@link http://www.chilliant.com/rgb2hsv.html}\\n\\\n *\\n\\\n * @name czm_HSLToRGB\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} rgb The color in HSL.\\n\\\n *\\n\\\n * @returns {vec3} The color in RGB.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 hsl = czm_RGBToHSL(rgb);\\n\\\n * hsl.z *= 0.1;\\n\\\n * rgb = czm_HSLToRGB(hsl);\\n\\\n */\\n\\\n\\n\\\nvec3 hueToRGB(float hue)\\n\\\n{\\n\\\n    float r = abs(hue * 6.0 - 3.0) - 1.0;\\n\\\n    float g = 2.0 - abs(hue * 6.0 - 2.0);\\n\\\n    float b = 2.0 - abs(hue * 6.0 - 4.0);\\n\\\n    return clamp(vec3(r, g, b), 0.0, 1.0);\\n\\\n}\\n\\\n\\n\\\nvec3 czm_HSLToRGB(vec3 hsl)\\n\\\n{\\n\\\n    vec3 rgb = hueToRGB(hsl.x);\\n\\\n    float c = (1.0 - abs(2.0 * hsl.z - 1.0)) * hsl.y;\\n\\\n    return (rgb - 0.5) * c + hsl.z;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Converts an RGB color to HSB (hue, saturation, brightness)\\n\\\n * HSB <-> RGB conversion with minimal branching: {@link http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl}\\n\\\n *\\n\\\n * @name czm_RGBToHSB\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} rgb The color in RGB.\\n\\\n *\\n\\\n * @returns {vec3} The color in HSB.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 hsb = czm_RGBToHSB(rgb);\\n\\\n * hsb.z *= 0.1;\\n\\\n * rgb = czm_HSBToRGB(hsb);\\n\\\n */\\n\\\n\\n\\\nconst vec4 K_RGB2HSB = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\n\\\n\\n\\\nvec3 czm_RGBToHSB(vec3 rgb)\\n\\\n{\\n\\\n    vec4 p = mix(vec4(rgb.bg, K_RGB2HSB.wz), vec4(rgb.gb, K_RGB2HSB.xy), step(rgb.b, rgb.g));\\n\\\n    vec4 q = mix(vec4(p.xyw, rgb.r), vec4(rgb.r, p.yzx), step(p.x, rgb.r));\\n\\\n\\n\\\n    float d = q.x - min(q.w, q.y);\\n\\\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + czm_epsilon7)), d / (q.x + czm_epsilon7), q.x);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Converts an RGB color to HSL (hue, saturation, lightness)\\n\\\n * HSL <-> RGB conversion: {@link http://www.chilliant.com/rgb2hsv.html}\\n\\\n *\\n\\\n * @name czm_RGBToHSL\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} rgb The color in RGB.\\n\\\n *\\n\\\n * @returns {vec3} The color in HSL.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 hsl = czm_RGBToHSL(rgb);\\n\\\n * hsl.z *= 0.1;\\n\\\n * rgb = czm_HSLToRGB(hsl);\\n\\\n */\\n\\\n \\n\\\nvec3 RGBtoHCV(vec3 rgb)\\n\\\n{\\n\\\n    // Based on work by Sam Hocevar and Emil Persson\\n\\\n    vec4 p = (rgb.g < rgb.b) ? vec4(rgb.bg, -1.0, 2.0 / 3.0) : vec4(rgb.gb, 0.0, -1.0 / 3.0);\\n\\\n    vec4 q = (rgb.r < p.x) ? vec4(p.xyw, rgb.r) : vec4(rgb.r, p.yzx);\\n\\\n    float c = q.x - min(q.w, q.y);\\n\\\n    float h = abs((q.w - q.y) / (6.0 * c + czm_epsilon7) + q.z);\\n\\\n    return vec3(h, c, q.x);\\n\\\n}\\n\\\n\\n\\\nvec3 czm_RGBToHSL(vec3 rgb)\\n\\\n{\\n\\\n    vec3 hcv = RGBtoHCV(rgb);\\n\\\n    float l = hcv.z - hcv.y * 0.5;\\n\\\n    float s = hcv.y / (1.0 - abs(l * 2.0 - 1.0) + czm_epsilon7);\\n\\\n    return vec3(hcv.x, s, l);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Converts an RGB color to CIE Yxy.\\n\\\n * <p>The conversion is described in\\n\\\n * {@link http://content.gpwiki.org/index.php/D3DBook:High-Dynamic_Range_Rendering#Luminance_Transform|Luminance Transform}\\n\\\n * </p>\\n\\\n * \\n\\\n * @name czm_RGBToXYZ\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} rgb The color in RGB.\\n\\\n *\\n\\\n * @returns {vec3} The color in CIE Yxy.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 xyz = czm_RGBToXYZ(rgb);\\n\\\n * xyz.x = max(xyz.x - luminanceThreshold, 0.0);\\n\\\n * rgb = czm_XYZToRGB(xyz);\\n\\\n */\\n\\\nvec3 czm_RGBToXYZ(vec3 rgb)\\n\\\n{\\n\\\n    const mat3 RGB2XYZ = mat3(0.4124, 0.2126, 0.0193,\\n\\\n                              0.3576, 0.7152, 0.1192,\\n\\\n                              0.1805, 0.0722, 0.9505);\\n\\\n    vec3 xyz = RGB2XYZ * rgb;\\n\\\n    vec3 Yxy;\\n\\\n    Yxy.r = xyz.g;\\n\\\n    float temp = dot(vec3(1.0), xyz);\\n\\\n    Yxy.gb = xyz.rg / temp;\\n\\\n    return Yxy;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Converts a CIE Yxy color to RGB.\\n\\\n * <p>The conversion is described in\\n\\\n * {@link http://content.gpwiki.org/index.php/D3DBook:High-Dynamic_Range_Rendering#Luminance_Transform|Luminance Transform}\\n\\\n * </p>\\n\\\n * \\n\\\n * @name czm_XYZToRGB\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} Yxy The color in CIE Yxy.\\n\\\n *\\n\\\n * @returns {vec3} The color in RGB.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 xyz = czm_RGBToXYZ(rgb);\\n\\\n * xyz.x = max(xyz.x - luminanceThreshold, 0.0);\\n\\\n * rgb = czm_XYZToRGB(xyz);\\n\\\n */\\n\\\nvec3 czm_XYZToRGB(vec3 Yxy)\\n\\\n{\\n\\\n    const mat3 XYZ2RGB = mat3( 3.2405, -0.9693,  0.0556,\\n\\\n                              -1.5371,  1.8760, -0.2040,\\n\\\n                              -0.4985,  0.0416,  1.0572);\\n\\\n    vec3 xyz;\\n\\\n    xyz.r = Yxy.r * Yxy.g / Yxy.b;\\n\\\n    xyz.g = Yxy.r;\\n\\\n    xyz.b = Yxy.r * (1.0 - Yxy.g - Yxy.b) / Yxy.b;\\n\\\n    \\n\\\n    return XYZ2RGB * xyz;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"// See:\\n\\\n//    https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\\n\\\n\\n\\\nvec3 czm_acesTonemapping(vec3 color) {\\n\\\n    float g = 0.985;\\n\\\n    float a = 0.065;\\n\\\n    float b = 0.0001;\\n\\\n    float c = 0.433;\\n\\\n    float d = 0.238;\\n\\\n\\n\\\n    color = (color * (color + a) - b) / (color * (g * color + c) + d);\\n\\\n\\n\\\n    color = clamp(color, 0.0, 1.0);\\n\\\n\\n\\\n    return color;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * @private\\n\\\n */\\n\\\nfloat czm_alphaWeight(float a)\\n\\\n{\\n\\\n    float z = (gl_FragCoord.z - czm_viewportTransformation[3][2]) / czm_viewportTransformation[2][2];\\n\\\n\\n\\\n    // See Weighted Blended Order-Independent Transparency for examples of different weighting functions:\\n\\\n    // http://jcgt.org/published/0002/02/09/\\n\\\n    return pow(a + 0.01, 4.0) + max(1e-2, min(3.0 * 1e3, 0.003 / (1e-5 + pow(abs(z) / 200.0, 4.0))));\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Procedural anti-aliasing by blurring two colors that meet at a sharp edge.\\n\\\n *\\n\\\n * @name czm_antialias\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} color1 The color on one side of the edge.\\n\\\n * @param {vec4} color2 The color on the other side of the edge.\\n\\\n * @param {vec4} currentcolor The current color, either <code>color1</code> or <code>color2</code>.\\n\\\n * @param {float} dist The distance to the edge in texture coordinates.\\n\\\n * @param {float} [fuzzFactor=0.1] Controls the blurriness between the two colors.\\n\\\n * @returns {vec4} The anti-aliased color.\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declarations\\n\\\n * vec4 czm_antialias(vec4 color1, vec4 color2, vec4 currentColor, float dist, float fuzzFactor);\\n\\\n * vec4 czm_antialias(vec4 color1, vec4 color2, vec4 currentColor, float dist);\\n\\\n *\\n\\\n * // get the color for a material that has a sharp edge at the line y = 0.5 in texture space\\n\\\n * float dist = abs(textureCoordinates.t - 0.5);\\n\\\n * vec4 currentColor = mix(bottomColor, topColor, step(0.5, textureCoordinates.t));\\n\\\n * vec4 color = czm_antialias(bottomColor, topColor, currentColor, dist, 0.1);\\n\\\n */\\n\\\nvec4 czm_antialias(vec4 color1, vec4 color2, vec4 currentColor, float dist, float fuzzFactor)\\n\\\n{\\n\\\n    float val1 = clamp(dist / fuzzFactor, 0.0, 1.0);\\n\\\n    float val2 = clamp((dist - 0.5) / fuzzFactor, 0.0, 1.0);\\n\\\n    val1 = val1 * (1.0 - val2);\\n\\\n    val1 = val1 * val1 * (3.0 - (2.0 * val1));\\n\\\n    val1 = pow(val1, 0.5); //makes the transition nicer\\n\\\n    \\n\\\n    vec4 midColor = (color1 + color2) * 0.5;\\n\\\n    return mix(midColor, currentColor, val1);\\n\\\n}\\n\\\n\\n\\\nvec4 czm_antialias(vec4 color1, vec4 color2, vec4 currentColor, float dist)\\n\\\n{\\n\\\n    return czm_antialias(color1, color2, currentColor, dist, 0.1);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Approximately computes spherical coordinates given a normal.\\n\\\n * Uses approximate inverse trigonometry for speed and consistency,\\n\\\n * since inverse trigonometry can differ from vendor-to-vendor and when compared with the CPU.\\n\\\n *\\n\\\n * @name czm_approximateSphericalCoordinates\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} normal arbitrary-length normal.\\n\\\n *\\n\\\n * @returns {vec2} Approximate latitude and longitude spherical coordinates.\\n\\\n */\\n\\\nvec2 czm_approximateSphericalCoordinates(vec3 normal) {\\n\\\n    // Project into plane with vertical for latitude\\n\\\n    float latitudeApproximation = czm_fastApproximateAtan(sqrt(normal.x * normal.x + normal.y * normal.y), normal.z);\\n\\\n    float longitudeApproximation = czm_fastApproximateAtan(normal.x, normal.y);\\n\\\n    return vec2(latitudeApproximation, longitudeApproximation);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Determines if the fragment is back facing\\n\\\n *\\n\\\n * @name czm_backFacing\\n\\\n * @glslFunction \\n\\\n * \\n\\\n * @returns {bool} <code>true</code> if the fragment is back facing; otherwise, <code>false</code>.\\n\\\n */\\n\\\nbool czm_backFacing()\\n\\\n{\\n\\\n    // !gl_FrontFacing doesn't work as expected on Mac/Intel so use the more verbose form instead. See https://github.com/CesiumGS/cesium/pull/8494.\\n\\\n    return gl_FrontFacing == false;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Branchless ternary operator to be used when it's inexpensive to explicitly\\n\\\n * evaluate both possibilities for a float expression.\\n\\\n *\\n\\\n * @name czm_branchFreeTernary\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {bool} comparison A comparison statement\\n\\\n * @param {float} a Value to return if the comparison is true.\\n\\\n * @param {float} b Value to return if the comparison is false.\\n\\\n *\\n\\\n * @returns {float} equivalent of comparison ? a : b\\n\\\n */\\n\\\nfloat czm_branchFreeTernary(bool comparison, float a, float b) {\\n\\\n    float useA = float(comparison);\\n\\\n    return a * useA + b * (1.0 - useA);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Branchless ternary operator to be used when it's inexpensive to explicitly\\n\\\n * evaluate both possibilities for a vec2 expression.\\n\\\n *\\n\\\n * @name czm_branchFreeTernary\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {bool} comparison A comparison statement\\n\\\n * @param {vec2} a Value to return if the comparison is true.\\n\\\n * @param {vec2} b Value to return if the comparison is false.\\n\\\n *\\n\\\n * @returns {vec2} equivalent of comparison ? a : b\\n\\\n */\\n\\\nvec2 czm_branchFreeTernary(bool comparison, vec2 a, vec2 b) {\\n\\\n    float useA = float(comparison);\\n\\\n    return a * useA + b * (1.0 - useA);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Branchless ternary operator to be used when it's inexpensive to explicitly\\n\\\n * evaluate both possibilities for a vec3 expression.\\n\\\n *\\n\\\n * @name czm_branchFreeTernary\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {bool} comparison A comparison statement\\n\\\n * @param {vec3} a Value to return if the comparison is true.\\n\\\n * @param {vec3} b Value to return if the comparison is false.\\n\\\n *\\n\\\n * @returns {vec3} equivalent of comparison ? a : b\\n\\\n */\\n\\\nvec3 czm_branchFreeTernary(bool comparison, vec3 a, vec3 b) {\\n\\\n    float useA = float(comparison);\\n\\\n    return a * useA + b * (1.0 - useA);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Branchless ternary operator to be used when it's inexpensive to explicitly\\n\\\n * evaluate both possibilities for a vec4 expression.\\n\\\n *\\n\\\n * @name czm_branchFreeTernary\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {bool} comparison A comparison statement\\n\\\n * @param {vec3} a Value to return if the comparison is true.\\n\\\n * @param {vec3} b Value to return if the comparison is false.\\n\\\n *\\n\\\n * @returns {vec3} equivalent of comparison ? a : b\\n\\\n */\\n\\\nvec4 czm_branchFreeTernary(bool comparison, vec4 a, vec4 b) {\\n\\\n    float useA = float(comparison);\\n\\\n    return a * useA + b * (1.0 - useA);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"\\n\\\nvec4 czm_cascadeColor(vec4 weights)\\n\\\n{\\n\\\n    return vec4(1.0, 0.0, 0.0, 1.0) * weights.x +\\n\\\n           vec4(0.0, 1.0, 0.0, 1.0) * weights.y +\\n\\\n           vec4(0.0, 0.0, 1.0, 1.0) * weights.z +\\n\\\n           vec4(1.0, 0.0, 1.0, 1.0) * weights.w;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"\\n\\\nuniform vec4 shadowMap_cascadeDistances;\\n\\\n\\n\\\nfloat czm_cascadeDistance(vec4 weights)\\n\\\n{\\n\\\n    return dot(shadowMap_cascadeDistances, weights);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"\\n\\\nuniform mat4 shadowMap_cascadeMatrices[4];\\n\\\n\\n\\\nmat4 czm_cascadeMatrix(vec4 weights)\\n\\\n{\\n\\\n    return shadowMap_cascadeMatrices[0] * weights.x +\\n\\\n           shadowMap_cascadeMatrices[1] * weights.y +\\n\\\n           shadowMap_cascadeMatrices[2] * weights.z +\\n\\\n           shadowMap_cascadeMatrices[3] * weights.w;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"\\n\\\nuniform vec4 shadowMap_cascadeSplits[2];\\n\\\n\\n\\\nvec4 czm_cascadeWeights(float depthEye)\\n\\\n{\\n\\\n    // One component is set to 1.0 and all others set to 0.0.\\n\\\n    vec4 near = step(shadowMap_cascadeSplits[0], vec4(depthEye));\\n\\\n    vec4 far = step(depthEye, shadowMap_cascadeSplits[1]);\\n\\\n    return near * far;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_columbusViewMorph\\n\\\n * @glslFunction\\n\\\n */\\n\\\nvec4 czm_columbusViewMorph(vec4 position2D, vec4 position3D, float time)\\n\\\n{\\n\\\n    // Just linear for now.\\n\\\n    vec3 p = mix(position2D.xyz, position3D.xyz, time);\\n\\\n    return vec4(p, 1.0);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Returns a position in model coordinates relative to eye taking into\\n\\\n * account the current scene mode: 3D, 2D, or Columbus view.\\n\\\n * <p>\\n\\\n * This uses standard position attributes, <code>position3DHigh</code>, \\n\\\n * <code>position3DLow</code>, <code>position2DHigh</code>, and <code>position2DLow</code>, \\n\\\n * and should be used when writing a vertex shader for an {@link Appearance}.\\n\\\n * </p>\\n\\\n *\\n\\\n * @name czm_computePosition\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @returns {vec4} The position relative to eye.\\n\\\n *\\n\\\n * @example\\n\\\n * vec4 p = czm_computePosition();\\n\\\n * v_positionEC = (czm_modelViewRelativeToEye * p).xyz;\\n\\\n * gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n *\\n\\\n * @see czm_translateRelativeToEye\\n\\\n */\\n\\\nvec4 czm_computePosition();\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * @private\\n\\\n */\\n\\\nvec2 cordic(float angle)\\n\\\n{\\n\\\n// Scale the vector by the appropriate factor for the 24 iterations to follow.\\n\\\n    vec2 vector = vec2(6.0725293500888267e-1, 0.0);\\n\\\n// Iteration 1\\n\\\n    float sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n //   float factor = sense * 1.0;  // 2^-0\\n\\\n    mat2 rotation = mat2(1.0, sense, -sense, 1.0);\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 7.8539816339744828e-1;  // atan(2^-0)\\n\\\n// Iteration 2\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    float factor = sense * 5.0e-1;  // 2^-1\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 4.6364760900080609e-1;  // atan(2^-1)\\n\\\n// Iteration 3\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 2.5e-1;  // 2^-2\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 2.4497866312686414e-1;  // atan(2^-2)\\n\\\n// Iteration 4\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 1.25e-1;  // 2^-3\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 1.2435499454676144e-1;  // atan(2^-3)\\n\\\n// Iteration 5\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 6.25e-2;  // 2^-4\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 6.2418809995957350e-2;  // atan(2^-4)\\n\\\n// Iteration 6\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 3.125e-2;  // 2^-5\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 3.1239833430268277e-2;  // atan(2^-5)\\n\\\n// Iteration 7\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 1.5625e-2;  // 2^-6\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 1.5623728620476831e-2;  // atan(2^-6)\\n\\\n// Iteration 8\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 7.8125e-3;  // 2^-7\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 7.8123410601011111e-3;  // atan(2^-7)\\n\\\n// Iteration 9\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 3.90625e-3;  // 2^-8\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 3.9062301319669718e-3;  // atan(2^-8)\\n\\\n// Iteration 10\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 1.953125e-3;  // 2^-9\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 1.9531225164788188e-3;  // atan(2^-9)\\n\\\n// Iteration 11\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 9.765625e-4;  // 2^-10\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 9.7656218955931946e-4;  // atan(2^-10)\\n\\\n// Iteration 12\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 4.8828125e-4;  // 2^-11\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 4.8828121119489829e-4;  // atan(2^-11)\\n\\\n// Iteration 13\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 2.44140625e-4;  // 2^-12\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 2.4414062014936177e-4;  // atan(2^-12)\\n\\\n// Iteration 14\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 1.220703125e-4;  // 2^-13\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 1.2207031189367021e-4;  // atan(2^-13)\\n\\\n// Iteration 15\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 6.103515625e-5;  // 2^-14\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 6.1035156174208773e-5;  // atan(2^-14)\\n\\\n// Iteration 16\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 3.0517578125e-5;  // 2^-15\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 3.0517578115526096e-5;  // atan(2^-15)\\n\\\n// Iteration 17\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 1.52587890625e-5;  // 2^-16\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 1.5258789061315762e-5;  // atan(2^-16)\\n\\\n// Iteration 18\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 7.62939453125e-6;  // 2^-17\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 7.6293945311019700e-6;  // atan(2^-17)\\n\\\n// Iteration 19\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 3.814697265625e-6;  // 2^-18\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 3.8146972656064961e-6;  // atan(2^-18)\\n\\\n// Iteration 20\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 1.9073486328125e-6;  // 2^-19\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 1.9073486328101870e-6;  // atan(2^-19)\\n\\\n// Iteration 21\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 9.5367431640625e-7;  // 2^-20\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 9.5367431640596084e-7;  // atan(2^-20)\\n\\\n// Iteration 22\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 4.76837158203125e-7;  // 2^-21\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 4.7683715820308884e-7;  // atan(2^-21)\\n\\\n// Iteration 23\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 2.384185791015625e-7;  // 2^-22\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n    angle -= sense * 2.3841857910155797e-7;  // atan(2^-22)\\n\\\n// Iteration 24\\n\\\n    sense = (angle < 0.0) ? -1.0 : 1.0;\\n\\\n    factor = sense * 1.1920928955078125e-7;  // 2^-23\\n\\\n    rotation[0][1] = factor;\\n\\\n    rotation[1][0] = -factor;\\n\\\n    vector = rotation * vector;\\n\\\n//    angle -= sense * 1.1920928955078068e-7;  // atan(2^-23)\\n\\\n\\n\\\n    return vector;\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Computes the cosine and sine of the provided angle using the CORDIC algorithm.\\n\\\n *\\n\\\n * @name czm_cosineAndSine\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} angle The angle in radians.\\n\\\n *\\n\\\n * @returns {vec2} The resulting cosine of the angle (as the x coordinate) and sine of the angle (as the y coordinate).\\n\\\n *\\n\\\n * @example\\n\\\n * vec2 v = czm_cosineAndSine(czm_piOverSix);\\n\\\n * float cosine = v.x;\\n\\\n * float sine = v.y;\\n\\\n */\\n\\\nvec2 czm_cosineAndSine(float angle)\\n\\\n{\\n\\\n    if (angle < -czm_piOverTwo || angle > czm_piOverTwo)\\n\\\n    {\\n\\\n        if (angle < 0.0)\\n\\\n        {\\n\\\n            return -cordic(angle + czm_pi);\\n\\\n        }\\n\\\n        else\\n\\\n        {\\n\\\n            return -cordic(angle - czm_pi);\\n\\\n        }\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        return cordic(angle);\\n\\\n    }\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Decompresses texture coordinates that were packed into a single float.\\n\\\n *\\n\\\n * @name czm_decompressTextureCoordinates\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} encoded The compressed texture coordinates.\\n\\\n * @returns {vec2} The decompressed texture coordinates.\\n\\\n */\\n\\\n vec2 czm_decompressTextureCoordinates(float encoded)\\n\\\n {\\n\\\n    float temp = encoded / 4096.0;\\n\\\n    float xZeroTo4095 = floor(temp);\\n\\\n    float stx = xZeroTo4095 / 4095.0;\\n\\\n    float sty = (encoded - xZeroTo4095 * 4096.0) / 4095.0;\\n\\\n    return vec2(stx, sty);\\n\\\n }\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Get default parameters for physically based rendering. These defaults\\n\\\n * describe a rough dielectric (non-metal) surface (e.g. rough plastic).\\n\\\n *\\n\\\n * @return {czm_pbrParameters} Default parameters for {@link czm_pbrLighting}\\n\\\n */\\n\\\nczm_pbrParameters czm_defaultPbrMaterial()\\n\\\n{\\n\\\n    czm_pbrParameters results;\\n\\\n    results.diffuseColor = vec3(1.0);\\n\\\n    results.roughness = 1.0;\\n\\\n\\n\\\n    const vec3 REFLECTANCE_DIELECTRIC = vec3(0.04);\\n\\\n    results.f0 = REFLECTANCE_DIELECTRIC;\\n\\\n    return results;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"// emulated noperspective\\n\\\n#if defined(GL_EXT_frag_depth) && !defined(LOG_DEPTH)\\n\\\nvarying float v_WindowZ;\\n\\\n#endif\\n\\\n\\n\\\n/**\\n\\\n * Emulates GL_DEPTH_CLAMP, which is not available in WebGL 1 or 2.\\n\\\n * GL_DEPTH_CLAMP clamps geometry that is outside the near and far planes, \\n\\\n * capping the shadow volume. More information here: \\n\\\n * https://www.khronos.org/registry/OpenGL/extensions/ARB/ARB_depth_clamp.txt.\\n\\\n *\\n\\\n * When GL_EXT_frag_depth is available we emulate GL_DEPTH_CLAMP by ensuring \\n\\\n * no geometry gets clipped by setting the clip space z value to 0.0 and then\\n\\\n * sending the unaltered screen space z value (using emulated noperspective\\n\\\n * interpolation) to the frag shader where it is clamped to [0,1] and then\\n\\\n * written with gl_FragDepth (see czm_writeDepthClamp). This technique is based on:\\n\\\n * https://stackoverflow.com/questions/5960757/how-to-emulate-gl-depth-clamp-nv.\\n\\\n *\\n\\\n * When GL_EXT_frag_depth is not available, which is the case on some mobile \\n\\\n * devices, we must attempt to fix this only in the vertex shader. \\n\\\n * The approach is to clamp the z value to the far plane, which closes the \\n\\\n * shadow volume but also distorts the geometry, so there can still be artifacts\\n\\\n * on frustum seams.\\n\\\n *\\n\\\n * @name czm_depthClamp\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} coords The vertex in clip coordinates.\\n\\\n * @returns {vec4} The modified vertex.\\n\\\n *\\n\\\n * @example\\n\\\n * gl_Position = czm_depthClamp(czm_modelViewProjection * vec4(position, 1.0));\\n\\\n *\\n\\\n * @see czm_writeDepthClamp\\n\\\n */\\n\\\nvec4 czm_depthClamp(vec4 coords)\\n\\\n{\\n\\\n#ifndef LOG_DEPTH\\n\\\n#ifdef GL_EXT_frag_depth\\n\\\n    v_WindowZ = (0.5 * (coords.z / coords.w) + 0.5) * coords.w;\\n\\\n    coords.z = 0.0;\\n\\\n#else\\n\\\n    coords.z = min(coords.z, coords.w);\\n\\\n#endif\\n\\\n#endif\\n\\\n    return coords;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Computes a 3x3 rotation matrix that transforms vectors from an ellipsoid's east-north-up coordinate system \\n\\\n * to eye coordinates.  In east-north-up coordinates, x points east, y points north, and z points along the \\n\\\n * surface normal.  East-north-up can be used as an ellipsoid's tangent space for operations such as bump mapping.\\n\\\n * <br /><br />\\n\\\n * The ellipsoid is assumed to be centered at the model coordinate's origin.\\n\\\n *\\n\\\n * @name czm_eastNorthUpToEyeCoordinates\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} positionMC The position on the ellipsoid in model coordinates.\\n\\\n * @param {vec3} normalEC The normalized ellipsoid surface normal, at <code>positionMC</code>, in eye coordinates.\\n\\\n *\\n\\\n * @returns {mat3} A 3x3 rotation matrix that transforms vectors from the east-north-up coordinate system to eye coordinates.\\n\\\n *\\n\\\n * @example\\n\\\n * // Transform a vector defined in the east-north-up coordinate \\n\\\n * // system, (0, 0, 1) which is the surface normal, to eye \\n\\\n * // coordinates.\\n\\\n * mat3 m = czm_eastNorthUpToEyeCoordinates(positionMC, normalEC);\\n\\\n * vec3 normalEC = m * vec3(0.0, 0.0, 1.0);\\n\\\n */\\n\\\nmat3 czm_eastNorthUpToEyeCoordinates(vec3 positionMC, vec3 normalEC)\\n\\\n{\\n\\\n    vec3 tangentMC = normalize(vec3(-positionMC.y, positionMC.x, 0.0));  // normalized surface tangent in model coordinates\\n\\\n    vec3 tangentEC = normalize(czm_normal3D * tangentMC);                // normalized surface tangent in eye coordiantes\\n\\\n    vec3 bitangentEC = normalize(cross(normalEC, tangentEC));            // normalized surface bitangent in eye coordinates\\n\\\n\\n\\\n    return mat3(\\n\\\n        tangentEC.x,   tangentEC.y,   tangentEC.z,\\n\\\n        bitangentEC.x, bitangentEC.y, bitangentEC.z,\\n\\\n        normalEC.x,    normalEC.y,    normalEC.z);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_ellipsoidContainsPoint\\n\\\n * @glslFunction\\n\\\n *\\n\\\n */\\n\\\nbool czm_ellipsoidContainsPoint(vec3 ellipsoid_inverseRadii, vec3 point)\\n\\\n{\\n\\\n    vec3 scaled = ellipsoid_inverseRadii * (czm_inverseModelView * vec4(point, 1.0)).xyz;\\n\\\n    return (dot(scaled, scaled) <= 1.0);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_ellipsoidWgs84TextureCoordinates\\n\\\n * @glslFunction\\n\\\n */\\n\\\nvec2 czm_ellipsoidWgs84TextureCoordinates(vec3 normal)\\n\\\n{\\n\\\n    return vec2(atan(normal.y, normal.x) * czm_oneOverTwoPi + 0.5, asin(normal.z) * czm_oneOverPi + 0.5);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Compares <code>left</code> and <code>right</code> componentwise. Returns <code>true</code>\\n\\\n * if they are within <code>epsilon</code> and <code>false</code> otherwise. The inputs\\n\\\n * <code>left</code> and <code>right</code> can be <code>float</code>s, <code>vec2</code>s,\\n\\\n * <code>vec3</code>s, or <code>vec4</code>s.\\n\\\n *\\n\\\n * @name czm_equalsEpsilon\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {} left The first vector.\\n\\\n * @param {} right The second vector.\\n\\\n * @param {float} epsilon The epsilon to use for equality testing.\\n\\\n * @returns {bool} <code>true</code> if the components are within <code>epsilon</code> and <code>false</code> otherwise.\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declarations\\n\\\n * bool czm_equalsEpsilon(float left, float right, float epsilon);\\n\\\n * bool czm_equalsEpsilon(vec2 left, vec2 right, float epsilon);\\n\\\n * bool czm_equalsEpsilon(vec3 left, vec3 right, float epsilon);\\n\\\n * bool czm_equalsEpsilon(vec4 left, vec4 right, float epsilon);\\n\\\n */\\n\\\nbool czm_equalsEpsilon(vec4 left, vec4 right, float epsilon) {\\n\\\n    return all(lessThanEqual(abs(left - right), vec4(epsilon)));\\n\\\n}\\n\\\n\\n\\\nbool czm_equalsEpsilon(vec3 left, vec3 right, float epsilon) {\\n\\\n    return all(lessThanEqual(abs(left - right), vec3(epsilon)));\\n\\\n}\\n\\\n\\n\\\nbool czm_equalsEpsilon(vec2 left, vec2 right, float epsilon) {\\n\\\n    return all(lessThanEqual(abs(left - right), vec2(epsilon)));\\n\\\n}\\n\\\n\\n\\\nbool czm_equalsEpsilon(float left, float right, float epsilon) {\\n\\\n    return (abs(left - right) <= epsilon);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_eyeOffset\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} positionEC DOC_TBA.\\n\\\n * @param {vec3} eyeOffset DOC_TBA.\\n\\\n *\\n\\\n * @returns {vec4} DOC_TBA.\\n\\\n */\\n\\\nvec4 czm_eyeOffset(vec4 positionEC, vec3 eyeOffset)\\n\\\n{\\n\\\n    // This equation is approximate in x and y.\\n\\\n    vec4 p = positionEC;\\n\\\n    vec4 zEyeOffset = normalize(p) * eyeOffset.z;\\n\\\n    p.xy += eyeOffset.xy + zEyeOffset.xy;\\n\\\n    p.z += zEyeOffset.z;\\n\\\n    return p;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Transforms a position from eye to window coordinates.  The transformation\\n\\\n * from eye to clip coordinates is done using {@link czm_projection}.\\n\\\n * The transform from normalized device coordinates to window coordinates is\\n\\\n * done using {@link czm_viewportTransformation}, which assumes a depth range\\n\\\n * of <code>near = 0</code> and <code>far = 1</code>.\\n\\\n * <br /><br />\\n\\\n * This transform is useful when there is a need to manipulate window coordinates\\n\\\n * in a vertex shader as done by {@link BillboardCollection}.\\n\\\n *\\n\\\n * @name czm_eyeToWindowCoordinates\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} position The position in eye coordinates to transform.\\n\\\n *\\n\\\n * @returns {vec4} The transformed position in window coordinates.\\n\\\n *\\n\\\n * @see czm_modelToWindowCoordinates\\n\\\n * @see czm_projection\\n\\\n * @see czm_viewportTransformation\\n\\\n * @see BillboardCollection\\n\\\n *\\n\\\n * @example\\n\\\n * vec4 positionWC = czm_eyeToWindowCoordinates(positionEC);\\n\\\n */\\n\\\nvec4 czm_eyeToWindowCoordinates(vec4 positionEC)\\n\\\n{\\n\\\n    vec4 q = czm_projection * positionEC;                        // clip coordinates\\n\\\n    q.xyz /= q.w;                                                // normalized device coordinates\\n\\\n    q.xyz = (czm_viewportTransformation * vec4(q.xyz, 1.0)).xyz; // window coordinates\\n\\\n    return q;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Approxiamtes atan over the range [0, 1]. Safe to flip output for negative input.\\n\\\n *\\n\\\n * Based on Michal Drobot's approximation from ShaderFastLibs, which in turn is based on\\n\\\n * \\\"Efficient approximations for the arctangent function,\\\" Rajan, S. Sichun Wang Inkol, R. Joyal, A., May 2006.\\n\\\n * Adapted from ShaderFastLibs under MIT License.\\n\\\n *\\n\\\n * Chosen for the following characteristics over range [0, 1]:\\n\\\n * - basically no error at 0 and 1, important for getting around range limit (naive atan2 via atan requires infinite range atan)\\n\\\n * - no visible artifacts from first-derivative discontinuities, unlike latitude via range-reduced sqrt asin approximations (at equator)\\n\\\n *\\n\\\n * The original code is x * (-0.1784 * abs(x) - 0.0663 * x * x + 1.0301);\\n\\\n * Removed the abs() in here because it isn't needed, the input range is guaranteed as [0, 1] by how we're approximating atan2.\\n\\\n *\\n\\\n * @name czm_fastApproximateAtan\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} x Value between 0 and 1 inclusive.\\n\\\n *\\n\\\n * @returns {float} Approximation of atan(x)\\n\\\n */\\n\\\nfloat czm_fastApproximateAtan(float x) {\\n\\\n    return x * (-0.1784 * x - 0.0663 * x * x + 1.0301);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Approximation of atan2.\\n\\\n *\\n\\\n * Range reduction math based on nvidia's cg reference implementation for atan2: http://developer.download.nvidia.com/cg/atan2.html\\n\\\n * However, we replaced their atan curve with Michael Drobot's (see above).\\n\\\n *\\n\\\n * @name czm_fastApproximateAtan\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} x Value between -1 and 1 inclusive.\\n\\\n * @param {float} y Value between -1 and 1 inclusive.\\n\\\n *\\n\\\n * @returns {float} Approximation of atan2(x, y)\\n\\\n */\\n\\\nfloat czm_fastApproximateAtan(float x, float y) {\\n\\\n    // atan approximations are usually only reliable over [-1, 1], or, in our case, [0, 1] due to modifications.\\n\\\n    // So range-reduce using abs and by flipping whether x or y is on top.\\n\\\n    float t = abs(x); // t used as swap and atan result.\\n\\\n    float opposite = abs(y);\\n\\\n    float adjacent = max(t, opposite);\\n\\\n    opposite = min(t, opposite);\\n\\\n\\n\\\n    t = czm_fastApproximateAtan(opposite / adjacent);\\n\\\n\\n\\\n    // Undo range reduction\\n\\\n    t = czm_branchFreeTernary(abs(y) > abs(x), czm_piOverTwo - t, t);\\n\\\n    t = czm_branchFreeTernary(x < 0.0, czm_pi - t, t);\\n\\\n    t = czm_branchFreeTernary(y < 0.0, -t, t);\\n\\\n    return t;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Gets the color with fog at a distance from the camera.\\n\\\n *\\n\\\n * @name czm_fog\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} distanceToCamera The distance to the camera in meters.\\n\\\n * @param {vec3} color The original color.\\n\\\n * @param {vec3} fogColor The color of the fog.\\n\\\n *\\n\\\n * @returns {vec3} The color adjusted for fog at the distance from the camera.\\n\\\n */\\n\\\nvec3 czm_fog(float distanceToCamera, vec3 color, vec3 fogColor)\\n\\\n{\\n\\\n    float scalar = distanceToCamera * czm_fogDensity;\\n\\\n    float fog = 1.0 - exp(-(scalar * scalar));\\n\\\n    return mix(color, fogColor, fog);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Gets the color with fog at a distance from the camera.\\n\\\n *\\n\\\n * @name czm_fog\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} distanceToCamera The distance to the camera in meters.\\n\\\n * @param {vec3} color The original color.\\n\\\n * @param {vec3} fogColor The color of the fog.\\n\\\n * @param {float} fogModifierConstant A constant to modify the appearance of fog.\\n\\\n *\\n\\\n * @returns {vec3} The color adjusted for fog at the distance from the camera.\\n\\\n */\\n\\\nvec3 czm_fog(float distanceToCamera, vec3 color, vec3 fogColor, float fogModifierConstant)\\n\\\n{\\n\\\n    float scalar = distanceToCamera * czm_fogDensity;\\n\\\n    float fog = 1.0 - exp(-((fogModifierConstant * scalar + fogModifierConstant) * (scalar * (1.0 + fogModifierConstant))));\\n\\\n    return mix(color, fogColor, fog);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Converts a color from RGB space to linear space.\\n\\\n *\\n\\\n * @name czm_gammaCorrect\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} color The color in RGB space.\\n\\\n * @returns {vec3} The color in linear space.\\n\\\n */\\n\\\nvec3 czm_gammaCorrect(vec3 color) {\\n\\\n#ifdef HDR\\n\\\n    color = pow(color, vec3(czm_gamma));\\n\\\n#endif\\n\\\n    return color;\\n\\\n}\\n\\\n\\n\\\nvec4 czm_gammaCorrect(vec4 color) {\\n\\\n#ifdef HDR\\n\\\n    color.rgb = pow(color.rgb, vec3(czm_gamma));\\n\\\n#endif\\n\\\n    return color;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_geodeticSurfaceNormal\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} positionOnEllipsoid DOC_TBA\\n\\\n * @param {vec3} ellipsoidCenter DOC_TBA\\n\\\n * @param {vec3} oneOverEllipsoidRadiiSquared DOC_TBA\\n\\\n * \\n\\\n * @returns {vec3} DOC_TBA.\\n\\\n */\\n\\\nvec3 czm_geodeticSurfaceNormal(vec3 positionOnEllipsoid, vec3 ellipsoidCenter, vec3 oneOverEllipsoidRadiiSquared)\\n\\\n{\\n\\\n    return normalize((positionOnEllipsoid - ellipsoidCenter) * oneOverEllipsoidRadiiSquared);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * An czm_material with default values. Every material's czm_getMaterial\\n\\\n * should use this default material as a base for the material it returns.\\n\\\n * The default normal value is given by materialInput.normalEC.\\n\\\n *\\n\\\n * @name czm_getDefaultMaterial\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {czm_materialInput} input The input used to construct the default material.\\n\\\n *\\n\\\n * @returns {czm_material} The default material.\\n\\\n *\\n\\\n * @see czm_materialInput\\n\\\n * @see czm_material\\n\\\n * @see czm_getMaterial\\n\\\n */\\n\\\nczm_material czm_getDefaultMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material;\\n\\\n    material.diffuse = vec3(0.0);\\n\\\n    material.specular = 0.0;\\n\\\n    material.shininess = 1.0;\\n\\\n    material.normal = materialInput.normalEC;\\n\\\n    material.emission = vec3(0.0);\\n\\\n    material.alpha = 1.0;\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Calculates the intensity of diffusely reflected light.\\n\\\n *\\n\\\n * @name czm_getLambertDiffuse\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} lightDirectionEC Unit vector pointing to the light source in eye coordinates.\\n\\\n * @param {vec3} normalEC The surface normal in eye coordinates.\\n\\\n *\\n\\\n * @returns {float} The intensity of the diffuse reflection.\\n\\\n *\\n\\\n * @see czm_phong\\n\\\n *\\n\\\n * @example\\n\\\n * float diffuseIntensity = czm_getLambertDiffuse(lightDirectionEC, normalEC);\\n\\\n * float specularIntensity = czm_getSpecular(lightDirectionEC, toEyeEC, normalEC, 200);\\n\\\n * vec3 color = (diffuseColor * diffuseIntensity) + (specularColor * specularIntensity);\\n\\\n */\\n\\\nfloat czm_getLambertDiffuse(vec3 lightDirectionEC, vec3 normalEC)\\n\\\n{\\n\\\n    return max(dot(lightDirectionEC, normalEC), 0.0);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Calculates the specular intensity of reflected light.\\n\\\n *\\n\\\n * @name czm_getSpecular\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} lightDirectionEC Unit vector pointing to the light source in eye coordinates.\\n\\\n * @param {vec3} toEyeEC Unit vector pointing to the eye position in eye coordinates.\\n\\\n * @param {vec3} normalEC The surface normal in eye coordinates.\\n\\\n * @param {float} shininess The sharpness of the specular reflection.  Higher values create a smaller, more focused specular highlight.\\n\\\n *\\n\\\n * @returns {float} The intensity of the specular highlight.\\n\\\n *\\n\\\n * @see czm_phong\\n\\\n *\\n\\\n * @example\\n\\\n * float diffuseIntensity = czm_getLambertDiffuse(lightDirectionEC, normalEC);\\n\\\n * float specularIntensity = czm_getSpecular(lightDirectionEC, toEyeEC, normalEC, 200);\\n\\\n * vec3 color = (diffuseColor * diffuseIntensity) + (specularColor * specularIntensity);\\n\\\n */\\n\\\nfloat czm_getSpecular(vec3 lightDirectionEC, vec3 toEyeEC, vec3 normalEC, float shininess)\\n\\\n{\\n\\\n    vec3 toReflectedLight = reflect(-lightDirectionEC, normalEC);\\n\\\n    float specular = max(dot(toReflectedLight, toEyeEC), 0.0);\\n\\\n\\n\\\n    // pow has undefined behavior if both parameters <= 0.\\n\\\n    // Prevent this by making sure shininess is at least czm_epsilon2.\\n\\\n    return pow(specular, max(shininess, czm_epsilon2));\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * @private\\n\\\n */\\n\\\nvec4 czm_getWaterNoise(sampler2D normalMap, vec2 uv, float time, float angleInRadians)\\n\\\n{\\n\\\n    float cosAngle = cos(angleInRadians);\\n\\\n    float sinAngle = sin(angleInRadians);\\n\\\n\\n\\\n    // time dependent sampling directions\\n\\\n    vec2 s0 = vec2(1.0/17.0, 0.0);\\n\\\n    vec2 s1 = vec2(-1.0/29.0, 0.0);\\n\\\n    vec2 s2 = vec2(1.0/101.0, 1.0/59.0);\\n\\\n    vec2 s3 = vec2(-1.0/109.0, -1.0/57.0);\\n\\\n\\n\\\n    // rotate sampling direction by specified angle\\n\\\n    s0 = vec2((cosAngle * s0.x) - (sinAngle * s0.y), (sinAngle * s0.x) + (cosAngle * s0.y));\\n\\\n    s1 = vec2((cosAngle * s1.x) - (sinAngle * s1.y), (sinAngle * s1.x) + (cosAngle * s1.y));\\n\\\n    s2 = vec2((cosAngle * s2.x) - (sinAngle * s2.y), (sinAngle * s2.x) + (cosAngle * s2.y));\\n\\\n    s3 = vec2((cosAngle * s3.x) - (sinAngle * s3.y), (sinAngle * s3.x) + (cosAngle * s3.y));\\n\\\n\\n\\\n    vec2 uv0 = (uv/103.0) + (time * s0);\\n\\\n    vec2 uv1 = uv/107.0 + (time * s1) + vec2(0.23);\\n\\\n    vec2 uv2 = uv/vec2(897.0, 983.0) + (time * s2) + vec2(0.51);\\n\\\n    vec2 uv3 = uv/vec2(991.0, 877.0) + (time * s3) + vec2(0.71);\\n\\\n\\n\\\n    uv0 = fract(uv0);\\n\\\n    uv1 = fract(uv1);\\n\\\n    uv2 = fract(uv2);\\n\\\n    uv3 = fract(uv3);\\n\\\n    vec4 noise = (texture2D(normalMap, uv0)) +\\n\\\n                 (texture2D(normalMap, uv1)) +\\n\\\n                 (texture2D(normalMap, uv2)) +\\n\\\n                 (texture2D(normalMap, uv3));\\n\\\n\\n\\\n    // average and scale to between -1 and 1\\n\\\n    return ((noise / 4.0) - 0.5) * 2.0;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Adjusts the hue of a color.\\n\\\n * \\n\\\n * @name czm_hue\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} rgb The color.\\n\\\n * @param {float} adjustment The amount to adjust the hue of the color in radians.\\n\\\n *\\n\\\n * @returns {float} The color with the hue adjusted.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 adjustHue = czm_hue(color, czm_pi); // The same as czm_hue(color, -czm_pi)\\n\\\n */\\n\\\nvec3 czm_hue(vec3 rgb, float adjustment)\\n\\\n{\\n\\\n    const mat3 toYIQ = mat3(0.299,     0.587,     0.114,\\n\\\n                            0.595716, -0.274453, -0.321263,\\n\\\n                            0.211456, -0.522591,  0.311135);\\n\\\n    const mat3 toRGB = mat3(1.0,  0.9563,  0.6210,\\n\\\n                            1.0, -0.2721, -0.6474,\\n\\\n                            1.0, -1.107,   1.7046);\\n\\\n    \\n\\\n    vec3 yiq = toYIQ * rgb;\\n\\\n    float hue = atan(yiq.z, yiq.y) + adjustment;\\n\\\n    float chroma = sqrt(yiq.z * yiq.z + yiq.y * yiq.y);\\n\\\n    \\n\\\n    vec3 color = vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));\\n\\\n    return toRGB * color;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Converts a color in linear space to RGB space.\\n\\\n *\\n\\\n * @name czm_inverseGamma\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} color The color in linear space.\\n\\\n * @returns {vec3} The color in RGB space.\\n\\\n */\\n\\\nvec3 czm_inverseGamma(vec3 color) {\\n\\\n    return pow(color, vec3(1.0 / czm_gamma));\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Determines if a time interval is empty.\\n\\\n *\\n\\\n * @name czm_isEmpty\\n\\\n * @glslFunction \\n\\\n * \\n\\\n * @param {czm_raySegment} interval The interval to test.\\n\\\n * \\n\\\n * @returns {bool} <code>true</code> if the time interval is empty; otherwise, <code>false</code>.\\n\\\n *\\n\\\n * @example\\n\\\n * bool b0 = czm_isEmpty(czm_emptyRaySegment);      // true\\n\\\n * bool b1 = czm_isEmpty(czm_raySegment(0.0, 1.0)); // false\\n\\\n * bool b2 = czm_isEmpty(czm_raySegment(1.0, 1.0)); // false, contains 1.0.\\n\\\n */\\n\\\nbool czm_isEmpty(czm_raySegment interval)\\n\\\n{\\n\\\n    return (interval.stop < 0.0);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Determines if a time interval is empty.\\n\\\n *\\n\\\n * @name czm_isFull\\n\\\n * @glslFunction \\n\\\n * \\n\\\n * @param {czm_raySegment} interval The interval to test.\\n\\\n * \\n\\\n * @returns {bool} <code>true</code> if the time interval is empty; otherwise, <code>false</code>.\\n\\\n *\\n\\\n * @example\\n\\\n * bool b0 = czm_isEmpty(czm_emptyRaySegment);      // true\\n\\\n * bool b1 = czm_isEmpty(czm_raySegment(0.0, 1.0)); // false\\n\\\n * bool b2 = czm_isEmpty(czm_raySegment(1.0, 1.0)); // false, contains 1.0.\\n\\\n */\\n\\\nbool czm_isFull(czm_raySegment interval)\\n\\\n{\\n\\\n    return (interval.start == 0.0 && interval.stop == czm_infinity);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Computes the fraction of a Web Wercator rectangle at which a given geodetic latitude is located.\\n\\\n *\\n\\\n * @name czm_latitudeToWebMercatorFraction\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} latitude The geodetic latitude, in radians.\\n\\\n * @param {float} southMercatorY The Web Mercator coordinate of the southern boundary of the rectangle.\\n\\\n * @param {float} oneOverMercatorHeight The total height of the rectangle in Web Mercator coordinates.\\n\\\n *\\n\\\n * @returns {float} The fraction of the rectangle at which the latitude occurs.  If the latitude is the southern\\n\\\n *          boundary of the rectangle, the return value will be zero.  If it is the northern boundary, the return\\n\\\n *          value will be 1.0.  Latitudes in between are mapped according to the Web Mercator projection.\\n\\\n */ \\n\\\nfloat czm_latitudeToWebMercatorFraction(float latitude, float southMercatorY, float oneOverMercatorHeight)\\n\\\n{\\n\\\n    float sinLatitude = sin(latitude);\\n\\\n    float mercatorY = 0.5 * log((1.0 + sinLatitude) / (1.0 - sinLatitude));\\n\\\n    \\n\\\n    return (mercatorY - southMercatorY) * oneOverMercatorHeight;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Computes distance from an point in 2D to a line in 2D.\\n\\\n *\\n\\\n * @name czm_lineDistance\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * param {vec2} point1 A point along the line.\\n\\\n * param {vec2} point2 A point along the line.\\n\\\n * param {vec2} point A point that may or may not be on the line.\\n\\\n * returns {float} The distance from the point to the line.\\n\\\n */\\n\\\nfloat czm_lineDistance(vec2 point1, vec2 point2, vec2 point) {\\n\\\n    return abs((point2.y - point1.y) * point.x - (point2.x - point1.x) * point.y + point2.x * point1.y - point2.y * point1.x) / distance(point2, point1);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Converts a linear RGB color to an sRGB color.\\n\\\n *\\n\\\n * @param {vec3|vec4} linearIn The color in linear color space.\\n\\\n * @returns {vec3|vec4} The color in sRGB color space. The vector type matches the input.\\n\\\n */\\n\\\nvec3 czm_linearToSrgb(vec3 linearIn) \\n\\\n{\\n\\\n    return pow(linearIn, vec3(1.0/2.2));\\n\\\n}\\n\\\n\\n\\\nvec4 czm_linearToSrgb(vec4 linearIn) \\n\\\n{\\n\\\n    vec3 srgbOut = pow(linearIn.rgb, vec3(1.0/2.2));\\n\\\n    return vec4(srgbOut, linearIn.a);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Computes the luminance of a color. \\n\\\n *\\n\\\n * @name czm_luminance\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} rgb The color.\\n\\\n * \\n\\\n * @returns {float} The luminance.\\n\\\n *\\n\\\n * @example\\n\\\n * float light = czm_luminance(vec3(0.0)); // 0.0\\n\\\n * float dark = czm_luminance(vec3(1.0));  // ~1.0 \\n\\\n */\\n\\\nfloat czm_luminance(vec3 rgb)\\n\\\n{\\n\\\n    // Algorithm from Chapter 10 of Graphics Shaders.\\n\\\n    const vec3 W = vec3(0.2125, 0.7154, 0.0721);\\n\\\n    return dot(rgb, W);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Computes the size of a pixel in meters at a distance from the eye.\\n\\\n * <p>\\n\\\n * Use this version when passing in a custom pixel ratio. For example, passing in 1.0 will return meters per native device pixel.\\n\\\n * </p>\\n\\\n * @name czm_metersPerPixel\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} positionEC The position to get the meters per pixel in eye coordinates.\\n\\\n * @param {float} pixelRatio The scaling factor from pixel space to coordinate space\\n\\\n *\\n\\\n * @returns {float} The meters per pixel at positionEC.\\n\\\n */\\n\\\nfloat czm_metersPerPixel(vec4 positionEC, float pixelRatio)\\n\\\n{\\n\\\n    float width = czm_viewport.z;\\n\\\n    float height = czm_viewport.w;\\n\\\n    float pixelWidth;\\n\\\n    float pixelHeight;\\n\\\n\\n\\\n    float top = czm_frustumPlanes.x;\\n\\\n    float bottom = czm_frustumPlanes.y;\\n\\\n    float left = czm_frustumPlanes.z;\\n\\\n    float right = czm_frustumPlanes.w;\\n\\\n\\n\\\n    if (czm_sceneMode == czm_sceneMode2D || czm_orthographicIn3D == 1.0)\\n\\\n    {\\n\\\n        float frustumWidth = right - left;\\n\\\n        float frustumHeight = top - bottom;\\n\\\n        pixelWidth = frustumWidth / width;\\n\\\n        pixelHeight = frustumHeight / height;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        float distanceToPixel = -positionEC.z;\\n\\\n        float inverseNear = 1.0 / czm_currentFrustum.x;\\n\\\n        float tanTheta = top * inverseNear;\\n\\\n        pixelHeight = 2.0 * distanceToPixel * tanTheta / height;\\n\\\n        tanTheta = right * inverseNear;\\n\\\n        pixelWidth = 2.0 * distanceToPixel * tanTheta / width;\\n\\\n    }\\n\\\n\\n\\\n    return max(pixelWidth, pixelHeight) * pixelRatio;\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Computes the size of a pixel in meters at a distance from the eye.\\n\\\n * <p>\\n\\\n * Use this version when scaling by pixel ratio.\\n\\\n * </p>\\n\\\n * @name czm_metersPerPixel\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} positionEC The position to get the meters per pixel in eye coordinates.\\n\\\n *\\n\\\n * @returns {float} The meters per pixel at positionEC.\\n\\\n */\\n\\\nfloat czm_metersPerPixel(vec4 positionEC)\\n\\\n{\\n\\\n    return czm_metersPerPixel(positionEC, czm_pixelRatio);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Transforms a position from model to window coordinates.  The transformation\\n\\\n * from model to clip coordinates is done using {@link czm_modelViewProjection}.\\n\\\n * The transform from normalized device coordinates to window coordinates is\\n\\\n * done using {@link czm_viewportTransformation}, which assumes a depth range\\n\\\n * of <code>near = 0</code> and <code>far = 1</code>.\\n\\\n * <br /><br />\\n\\\n * This transform is useful when there is a need to manipulate window coordinates\\n\\\n * in a vertex shader as done by {@link BillboardCollection}.\\n\\\n * <br /><br />\\n\\\n * This function should not be confused with {@link czm_viewportOrthographic},\\n\\\n * which is an orthographic projection matrix that transforms from window \\n\\\n * coordinates to clip coordinates.\\n\\\n *\\n\\\n * @name czm_modelToWindowCoordinates\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} position The position in model coordinates to transform.\\n\\\n *\\n\\\n * @returns {vec4} The transformed position in window coordinates.\\n\\\n *\\n\\\n * @see czm_eyeToWindowCoordinates\\n\\\n * @see czm_modelViewProjection\\n\\\n * @see czm_viewportTransformation\\n\\\n * @see czm_viewportOrthographic\\n\\\n * @see BillboardCollection\\n\\\n *\\n\\\n * @example\\n\\\n * vec4 positionWC = czm_modelToWindowCoordinates(positionMC);\\n\\\n */\\n\\\nvec4 czm_modelToWindowCoordinates(vec4 position)\\n\\\n{\\n\\\n    vec4 q = czm_modelViewProjection * position;                // clip coordinates\\n\\\n    q.xyz /= q.w;                                                // normalized device coordinates\\n\\\n    q.xyz = (czm_viewportTransformation * vec4(q.xyz, 1.0)).xyz; // window coordinates\\n\\\n    return q;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_multiplyWithColorBalance\\n\\\n * @glslFunction\\n\\\n */\\n\\\nvec3 czm_multiplyWithColorBalance(vec3 left, vec3 right)\\n\\\n{\\n\\\n    // Algorithm from Chapter 10 of Graphics Shaders.\\n\\\n    const vec3 W = vec3(0.2125, 0.7154, 0.0721);\\n\\\n    \\n\\\n    vec3 target = left * right;\\n\\\n    float leftLuminance = dot(left, W);\\n\\\n    float rightLuminance = dot(right, W);\\n\\\n    float targetLuminance = dot(target, W);\\n\\\n    \\n\\\n    return ((leftLuminance + rightLuminance) / (2.0 * targetLuminance)) * target;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Computes a value that scales with distance.  The scaling is clamped at the near and\\n\\\n * far distances, and does not extrapolate.  This function works with the\\n\\\n * {@link NearFarScalar} JavaScript class.\\n\\\n *\\n\\\n * @name czm_nearFarScalar\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} nearFarScalar A vector with 4 components: Near distance (x), Near value (y), Far distance (z), Far value (w).\\n\\\n * @param {float} cameraDistSq The square of the current distance from the camera.\\n\\\n *\\n\\\n * @returns {float} The value at this distance.\\n\\\n */\\n\\\nfloat czm_nearFarScalar(vec4 nearFarScalar, float cameraDistSq)\\n\\\n{\\n\\\n    float valueAtMin = nearFarScalar.y;\\n\\\n    float valueAtMax = nearFarScalar.w;\\n\\\n    float nearDistanceSq = nearFarScalar.x * nearFarScalar.x;\\n\\\n    float farDistanceSq = nearFarScalar.z * nearFarScalar.z;\\n\\\n\\n\\\n    float t = (cameraDistSq - nearDistanceSq) / (farDistanceSq - nearDistanceSq);\\n\\\n\\n\\\n    t = pow(clamp(t, 0.0, 1.0), 0.2);\\n\\\n\\n\\\n    return mix(valueAtMin, valueAtMax, t);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \" /**\\n\\\n  * Decodes a unit-length vector in 'oct' encoding to a normalized 3-component Cartesian vector.\\n\\\n  * The 'oct' encoding is described in \\\"A Survey of Efficient Representations of Independent Unit Vectors\\\",\\n\\\n  * Cigolle et al 2014: http://jcgt.org/published/0003/02/01/\\n\\\n  *\\n\\\n  * @name czm_octDecode\\n\\\n  * @param {vec2} encoded The oct-encoded, unit-length vector\\n\\\n  * @param {float} range The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\\n\\\n  * @returns {vec3} The decoded and normalized vector\\n\\\n  */\\n\\\n  vec3 czm_octDecode(vec2 encoded, float range)\\n\\\n  {\\n\\\n      if (encoded.x == 0.0 && encoded.y == 0.0) {\\n\\\n          return vec3(0.0, 0.0, 0.0);\\n\\\n      }\\n\\\n\\n\\\n     encoded = encoded / range * 2.0 - 1.0;\\n\\\n     vec3 v = vec3(encoded.x, encoded.y, 1.0 - abs(encoded.x) - abs(encoded.y));\\n\\\n     if (v.z < 0.0)\\n\\\n     {\\n\\\n         v.xy = (1.0 - abs(v.yx)) * czm_signNotZero(v.xy);\\n\\\n     }\\n\\\n\\n\\\n     return normalize(v);\\n\\\n  }\\n\\\n\\n\\\n/**\\n\\\n * Decodes a unit-length vector in 'oct' encoding to a normalized 3-component Cartesian vector.\\n\\\n * The 'oct' encoding is described in \\\"A Survey of Efficient Representations of Independent Unit Vectors\\\",\\n\\\n * Cigolle et al 2014: http://jcgt.org/published/0003/02/01/\\n\\\n *\\n\\\n * @name czm_octDecode\\n\\\n * @param {vec2} encoded The oct-encoded, unit-length vector\\n\\\n * @returns {vec3} The decoded and normalized vector\\n\\\n */\\n\\\n vec3 czm_octDecode(vec2 encoded)\\n\\\n {\\n\\\n    return czm_octDecode(encoded, 255.0);\\n\\\n }\\n\\\n\\n\\\n /**\\n\\\n * Decodes a unit-length vector in 'oct' encoding packed into a floating-point number to a normalized 3-component Cartesian vector.\\n\\\n * The 'oct' encoding is described in \\\"A Survey of Efficient Representations of Independent Unit Vectors\\\",\\n\\\n * Cigolle et al 2014: http://jcgt.org/published/0003/02/01/\\n\\\n *\\n\\\n * @name czm_octDecode\\n\\\n * @param {float} encoded The oct-encoded, unit-length vector\\n\\\n * @returns {vec3} The decoded and normalized vector\\n\\\n */\\n\\\n vec3 czm_octDecode(float encoded)\\n\\\n {\\n\\\n    float temp = encoded / 256.0;\\n\\\n    float x = floor(temp);\\n\\\n    float y = (temp - x) * 256.0;\\n\\\n    return czm_octDecode(vec2(x, y));\\n\\\n }\\n\\\n\\n\\\n/**\\n\\\n * Decodes three unit-length vectors in 'oct' encoding packed into two floating-point numbers to normalized 3-component Cartesian vectors.\\n\\\n * The 'oct' encoding is described in \\\"A Survey of Efficient Representations of Independent Unit Vectors\\\",\\n\\\n * Cigolle et al 2014: http://jcgt.org/published/0003/02/01/\\n\\\n *\\n\\\n * @name czm_octDecode\\n\\\n * @param {vec2} encoded The packed oct-encoded, unit-length vectors.\\n\\\n * @param {vec3} vector1 One decoded and normalized vector.\\n\\\n * @param {vec3} vector2 One decoded and normalized vector.\\n\\\n * @param {vec3} vector3 One decoded and normalized vector.\\n\\\n */\\n\\\n  void czm_octDecode(vec2 encoded, out vec3 vector1, out vec3 vector2, out vec3 vector3)\\n\\\n {\\n\\\n    float temp = encoded.x / 65536.0;\\n\\\n    float x = floor(temp);\\n\\\n    float encodedFloat1 = (temp - x) * 65536.0;\\n\\\n\\n\\\n    temp = encoded.y / 65536.0;\\n\\\n    float y = floor(temp);\\n\\\n    float encodedFloat2 = (temp - y) * 65536.0;\\n\\\n\\n\\\n    vector1 = czm_octDecode(encodedFloat1);\\n\\\n    vector2 = czm_octDecode(encodedFloat2);\\n\\\n    vector3 = czm_octDecode(vec2(x, y));\\n\\\n }\\n\\\n\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Packs a depth value into a vec3 that can be represented by unsigned bytes.\\n\\\n *\\n\\\n * @name czm_packDepth\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} depth The floating-point depth.\\n\\\n * @returns {vec3} The packed depth.\\n\\\n */\\n\\\nvec4 czm_packDepth(float depth)\\n\\\n{\\n\\\n    // See Aras Pranckevičius' post Encoding Floats to RGBA\\n\\\n    // http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\\n\\\n    vec4 enc = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\\n\\\n    enc = fract(enc);\\n\\\n    enc -= enc.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\\n\\\n    return enc;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"vec3 lambertianDiffuse(vec3 diffuseColor)\\n\\\n{\\n\\\n    return diffuseColor / czm_pi;\\n\\\n}\\n\\\n\\n\\\nvec3 fresnelSchlick2(vec3 f0, vec3 f90, float VdotH)\\n\\\n{\\n\\\n    return f0 + (f90 - f0) * pow(clamp(1.0 - VdotH, 0.0, 1.0), 5.0);\\n\\\n}\\n\\\n\\n\\\nfloat smithVisibilityG1(float NdotV, float roughness)\\n\\\n{\\n\\\n    // this is the k value for direct lighting.\\n\\\n    // for image based lighting it will be roughness^2 / 2\\n\\\n    float k = (roughness + 1.0) * (roughness + 1.0) / 8.0;\\n\\\n    return NdotV / (NdotV * (1.0 - k) + k);\\n\\\n}\\n\\\n\\n\\\nfloat smithVisibilityGGX(float roughness, float NdotL, float NdotV)\\n\\\n{\\n\\\n    return (\\n\\\n        smithVisibilityG1(NdotL, roughness) *\\n\\\n        smithVisibilityG1(NdotV, roughness)\\n\\\n    );\\n\\\n}\\n\\\n\\n\\\nfloat GGX(float roughness, float NdotH)\\n\\\n{\\n\\\n    float roughnessSquared = roughness * roughness;\\n\\\n    float f = (NdotH * roughnessSquared - NdotH) * NdotH + 1.0;\\n\\\n    return roughnessSquared / (czm_pi * f * f);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Compute the diffuse and specular contributions using physically based\\n\\\n * rendering. This function only handles direct lighting.\\n\\\n * <p>\\n\\\n * This function only handles the lighting calculations. Metallic/roughness\\n\\\n * and specular/glossy must be handled separately. See {@czm_pbrMetallicRoughnessMaterial}, {@czm_pbrSpecularGlossinessMaterial} and {@czm_defaultPbrMaterial}\\n\\\n * </p>\\n\\\n *\\n\\\n * @name czm_pbrlighting\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} positionEC The position of the fragment in eye coordinates\\n\\\n * @param {vec3} normalEC The surface normal in eye coordinates\\n\\\n * @param {vec3} lightDirectionEC Unit vector pointing to the light source in eye coordinates.\\n\\\n * @param {vec3} lightColorHdr radiance of the light source. This is a HDR value.\\n\\\n * @param {czm_pbrParameters} The computed PBR parameters.\\n\\\n * @return {vec3} The computed HDR color\\n\\\n *\\n\\\n * @example\\n\\\n * czm_pbrParameters pbrParameters = czm_pbrMetallicRoughnessMaterial(\\n\\\n *  baseColor,\\n\\\n *  metallic,\\n\\\n *  roughness\\n\\\n * );\\n\\\n * vec3 color = czm_pbrlighting(\\n\\\n *  positionEC,\\n\\\n *  normalEC,\\n\\\n *  lightDirectionEC,\\n\\\n *  lightColorHdr,\\n\\\n *  pbrParameters);\\n\\\n */\\n\\\nvec3 czm_pbrLighting(\\n\\\n    vec3 positionEC,\\n\\\n    vec3 normalEC,\\n\\\n    vec3 lightDirectionEC,\\n\\\n    vec3 lightColorHdr,\\n\\\n    czm_pbrParameters pbrParameters\\n\\\n)\\n\\\n{\\n\\\n    vec3 v = -normalize(positionEC);\\n\\\n    vec3 l = normalize(lightDirectionEC);\\n\\\n    vec3 h = normalize(v + l);\\n\\\n    vec3 n = normalEC;\\n\\\n    float NdotL = clamp(dot(n, l), 0.001, 1.0);\\n\\\n    float NdotV = abs(dot(n, v)) + 0.001;\\n\\\n    float NdotH = clamp(dot(n, h), 0.0, 1.0);\\n\\\n    float LdotH = clamp(dot(l, h), 0.0, 1.0);\\n\\\n    float VdotH = clamp(dot(v, h), 0.0, 1.0);\\n\\\n\\n\\\n    vec3 f0 = pbrParameters.f0;\\n\\\n    float reflectance = max(max(f0.r, f0.g), f0.b);\\n\\\n    vec3 f90 = vec3(clamp(reflectance * 25.0, 0.0, 1.0));\\n\\\n    vec3 F = fresnelSchlick2(f0, f90, VdotH);\\n\\\n\\n\\\n    float alpha = pbrParameters.roughness;\\n\\\n    float G = smithVisibilityGGX(alpha, NdotL, NdotV);\\n\\\n    float D = GGX(alpha, NdotH);\\n\\\n    vec3 specularContribution = F * G * D / (4.0 * NdotL * NdotV);\\n\\\n\\n\\\n    vec3 diffuseColor = pbrParameters.diffuseColor;\\n\\\n    // F here represents the specular contribution\\n\\\n    vec3 diffuseContribution = (1.0 - F) * lambertianDiffuse(diffuseColor);\\n\\\n\\n\\\n    // Lo = (diffuse + specular) * Li * NdotL\\n\\\n    return (diffuseContribution + specularContribution) * NdotL * lightColorHdr;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Compute parameters for physically based rendering using the\\n\\\n * metallic/roughness workflow. All inputs are linear; sRGB texture values must\\n\\\n * be decoded beforehand\\n\\\n *\\n\\\n * @name czm_pbrMetallicRoughnessMaterial\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} baseColor For dielectrics, this is the base color. For metals, this is the f0 value (reflectance at normal incidence)\\n\\\n * @param {float} metallic 0.0 indicates dielectric. 1.0 indicates metal. Values in between are allowed (e.g. to model rust or dirt);\\n\\\n * @param {float} roughness A value between 0.0 and 1.0\\n\\\n * @return {czm_pbrParameters} parameters to pass into {@link czm_pbrLighting}\\n\\\n */\\n\\\nczm_pbrParameters czm_pbrMetallicRoughnessMaterial(\\n\\\n    vec3 baseColor,\\n\\\n    float metallic,\\n\\\n    float roughness\\n\\\n) \\n\\\n{\\n\\\n    czm_pbrParameters results;\\n\\\n\\n\\\n    // roughness is authored as perceptual roughness\\n\\\n    // square it to get material roughness\\n\\\n    roughness = clamp(roughness, 0.0, 1.0);\\n\\\n    results.roughness = roughness * roughness;\\n\\\n\\n\\\n    // dielectrics us f0 = 0.04, metals use albedo as f0\\n\\\n    metallic = clamp(metallic, 0.0, 1.0);\\n\\\n    const vec3 REFLECTANCE_DIELECTRIC = vec3(0.04);\\n\\\n    vec3 f0 = mix(REFLECTANCE_DIELECTRIC, baseColor, metallic);\\n\\\n    results.f0 = f0;\\n\\\n\\n\\\n    // diffuse only applies to dielectrics.\\n\\\n    results.diffuseColor = baseColor * (1.0 - f0) * (1.0 - metallic);\\n\\\n\\n\\\n    return results;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Compute parameters for physically based rendering using the\\n\\\n * specular/glossy workflow. All inputs are linear; sRGB texture values must\\n\\\n * be decoded beforehand\\n\\\n *\\n\\\n * @name czm_pbrSpecularGlossinessMaterial\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} diffuse The diffuse color for dielectrics (non-metals)\\n\\\n * @param {vec3} specular The reflectance at normal incidence (f0)\\n\\\n * @param {float} glossiness A number from 0.0 to 1.0 indicating how smooth the surface is.\\n\\\n * @return {czm_pbrParameters} parameters to pass into {@link czm_pbrLighting}\\n\\\n */\\n\\\nczm_pbrParameters czm_pbrSpecularGlossinessMaterial(\\n\\\n    vec3 diffuse,\\n\\\n    vec3 specular,\\n\\\n    float glossiness\\n\\\n) \\n\\\n{\\n\\\n    czm_pbrParameters results;\\n\\\n\\n\\\n    // glossiness is the opposite of roughness, but easier for artists to use.\\n\\\n    float roughness = 1.0 - glossiness;\\n\\\n    results.roughness = roughness * roughness;\\n\\\n\\n\\\n    results.diffuseColor = diffuse * (1.0 - max(max(specular.r, specular.g), specular.b));\\n\\\n    results.f0 = specular;\\n\\\n\\n\\\n    return results;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"float czm_private_getLambertDiffuseOfMaterial(vec3 lightDirectionEC, czm_material material)\\n\\\n{\\n\\\n    return czm_getLambertDiffuse(lightDirectionEC, material.normal);\\n\\\n}\\n\\\n\\n\\\nfloat czm_private_getSpecularOfMaterial(vec3 lightDirectionEC, vec3 toEyeEC, czm_material material)\\n\\\n{\\n\\\n    return czm_getSpecular(lightDirectionEC, toEyeEC, material.normal, material.shininess);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Computes a color using the Phong lighting model.\\n\\\n *\\n\\\n * @name czm_phong\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} toEye A normalized vector from the fragment to the eye in eye coordinates.\\n\\\n * @param {czm_material} material The fragment's material.\\n\\\n *\\n\\\n * @returns {vec4} The computed color.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 positionToEyeEC = // ...\\n\\\n * czm_material material = // ...\\n\\\n * vec3 lightDirectionEC = // ...\\n\\\n * gl_FragColor = czm_phong(normalize(positionToEyeEC), material, lightDirectionEC);\\n\\\n *\\n\\\n * @see czm_getMaterial\\n\\\n */\\n\\\nvec4 czm_phong(vec3 toEye, czm_material material, vec3 lightDirectionEC)\\n\\\n{\\n\\\n    // Diffuse from directional light sources at eye (for top-down)\\n\\\n    float diffuse = czm_private_getLambertDiffuseOfMaterial(vec3(0.0, 0.0, 1.0), material);\\n\\\n    if (czm_sceneMode == czm_sceneMode3D) {\\n\\\n        // (and horizon views in 3D)\\n\\\n        diffuse += czm_private_getLambertDiffuseOfMaterial(vec3(0.0, 1.0, 0.0), material);\\n\\\n    }\\n\\\n\\n\\\n    float specular = czm_private_getSpecularOfMaterial(lightDirectionEC, toEye, material);\\n\\\n\\n\\\n    // Temporary workaround for adding ambient.\\n\\\n    vec3 materialDiffuse = material.diffuse * 0.5;\\n\\\n\\n\\\n    vec3 ambient = materialDiffuse;\\n\\\n    vec3 color = ambient + material.emission;\\n\\\n    color += materialDiffuse * diffuse * czm_lightColor;\\n\\\n    color += material.specular * specular * czm_lightColor;\\n\\\n\\n\\\n    return vec4(color, material.alpha);\\n\\\n}\\n\\\n\\n\\\nvec4 czm_private_phong(vec3 toEye, czm_material material, vec3 lightDirectionEC)\\n\\\n{\\n\\\n    float diffuse = czm_private_getLambertDiffuseOfMaterial(lightDirectionEC, material);\\n\\\n    float specular = czm_private_getSpecularOfMaterial(lightDirectionEC, toEye, material);\\n\\\n\\n\\\n    vec3 ambient = vec3(0.0);\\n\\\n    vec3 color = ambient + material.emission;\\n\\\n    color += material.diffuse * diffuse * czm_lightColor;\\n\\\n    color += material.specular * specular * czm_lightColor;\\n\\\n\\n\\\n    return vec4(color, material.alpha);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Computes distance from a point to a plane.\\n\\\n *\\n\\\n * @name czm_planeDistance\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * param {vec4} plane A Plane in Hessian Normal Form. See Plane.js\\n\\\n * param {vec3} point A point in the same space as the plane.\\n\\\n * returns {float} The distance from the point to the plane.\\n\\\n */\\n\\\nfloat czm_planeDistance(vec4 plane, vec3 point) {\\n\\\n    return (dot(plane.xyz, point) + plane.w);\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Computes distance from a point to a plane.\\n\\\n *\\n\\\n * @name czm_planeDistance\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * param {vec3} planeNormal Normal for a plane in Hessian Normal Form. See Plane.js\\n\\\n * param {float} planeDistance Distance for a plane in Hessian Normal form. See Plane.js\\n\\\n * param {vec3} point A point in the same space as the plane.\\n\\\n * returns {float} The distance from the point to the plane.\\n\\\n */\\n\\\nfloat czm_planeDistance(vec3 planeNormal, float planeDistance, vec3 point) {\\n\\\n    return (dot(planeNormal, point) + planeDistance);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Computes the point along a ray at the given time.  <code>time</code> can be positive, negative, or zero.\\n\\\n *\\n\\\n * @name czm_pointAlongRay\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {czm_ray} ray The ray to compute the point along.\\n\\\n * @param {float} time The time along the ray.\\n\\\n * \\n\\\n * @returns {vec3} The point along the ray at the given time.\\n\\\n * \\n\\\n * @example\\n\\\n * czm_ray ray = czm_ray(vec3(0.0), vec3(1.0, 0.0, 0.0)); // origin, direction\\n\\\n * vec3 v = czm_pointAlongRay(ray, 2.0); // (2.0, 0.0, 0.0)\\n\\\n */\\n\\\nvec3 czm_pointAlongRay(czm_ray ray, float time)\\n\\\n{\\n\\\n    return ray.origin + (time * ray.direction);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_rayEllipsoidIntersectionInterval\\n\\\n * @glslFunction\\n\\\n */\\n\\\nczm_raySegment czm_rayEllipsoidIntersectionInterval(czm_ray ray, vec3 ellipsoid_center, vec3 ellipsoid_inverseRadii)\\n\\\n{\\n\\\n   // ray and ellipsoid center in eye coordinates.  radii in model coordinates.\\n\\\n    vec3 q = ellipsoid_inverseRadii * (czm_inverseModelView * vec4(ray.origin, 1.0)).xyz;\\n\\\n    vec3 w = ellipsoid_inverseRadii * (czm_inverseModelView * vec4(ray.direction, 0.0)).xyz;\\n\\\n\\n\\\n    q = q - ellipsoid_inverseRadii * (czm_inverseModelView * vec4(ellipsoid_center, 1.0)).xyz;\\n\\\n\\n\\\n    float q2 = dot(q, q);\\n\\\n    float qw = dot(q, w);\\n\\\n\\n\\\n    if (q2 > 1.0) // Outside ellipsoid.\\n\\\n    {\\n\\\n        if (qw >= 0.0) // Looking outward or tangent (0 intersections).\\n\\\n        {\\n\\\n            return czm_emptyRaySegment;\\n\\\n        }\\n\\\n        else // qw < 0.0.\\n\\\n        {\\n\\\n            float qw2 = qw * qw;\\n\\\n            float difference = q2 - 1.0; // Positively valued.\\n\\\n            float w2 = dot(w, w);\\n\\\n            float product = w2 * difference;\\n\\\n\\n\\\n            if (qw2 < product) // Imaginary roots (0 intersections).\\n\\\n            {\\n\\\n                return czm_emptyRaySegment;\\n\\\n            }\\n\\\n            else if (qw2 > product) // Distinct roots (2 intersections).\\n\\\n            {\\n\\\n                float discriminant = qw * qw - product;\\n\\\n                float temp = -qw + sqrt(discriminant); // Avoid cancellation.\\n\\\n                float root0 = temp / w2;\\n\\\n                float root1 = difference / temp;\\n\\\n                if (root0 < root1)\\n\\\n                {\\n\\\n                    czm_raySegment i = czm_raySegment(root0, root1);\\n\\\n                    return i;\\n\\\n                }\\n\\\n                else\\n\\\n                {\\n\\\n                    czm_raySegment i = czm_raySegment(root1, root0);\\n\\\n                    return i;\\n\\\n                }\\n\\\n            }\\n\\\n            else // qw2 == product.  Repeated roots (2 intersections).\\n\\\n            {\\n\\\n                float root = sqrt(difference / w2);\\n\\\n                czm_raySegment i = czm_raySegment(root, root);\\n\\\n                return i;\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n    else if (q2 < 1.0) // Inside ellipsoid (2 intersections).\\n\\\n    {\\n\\\n        float difference = q2 - 1.0; // Negatively valued.\\n\\\n        float w2 = dot(w, w);\\n\\\n        float product = w2 * difference; // Negatively valued.\\n\\\n        float discriminant = qw * qw - product;\\n\\\n        float temp = -qw + sqrt(discriminant); // Positively valued.\\n\\\n        czm_raySegment i = czm_raySegment(0.0, temp / w2);\\n\\\n        return i;\\n\\\n    }\\n\\\n    else // q2 == 1.0. On ellipsoid.\\n\\\n    {\\n\\\n        if (qw < 0.0) // Looking inward.\\n\\\n        {\\n\\\n            float w2 = dot(w, w);\\n\\\n            czm_raySegment i = czm_raySegment(0.0, -qw / w2);\\n\\\n            return i;\\n\\\n        }\\n\\\n        else // qw >= 0.0.  Looking outward or tangent.\\n\\\n        {\\n\\\n            return czm_emptyRaySegment;\\n\\\n        }\\n\\\n    }\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Compute the intersection interval of a ray with a sphere.\\n\\\n *\\n\\\n * @name czm_raySphereIntersectionInterval\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {czm_ray} ray The ray.\\n\\\n * @param {vec3} center The center of the sphere.\\n\\\n * @param {float} radius The radius of the sphere.\\n\\\n * @return {czm_raySegment} The intersection interval of the ray with the sphere.\\n\\\n */\\n\\\nczm_raySegment czm_raySphereIntersectionInterval(czm_ray ray, vec3 center, float radius)\\n\\\n{\\n\\\n    vec3 o = ray.origin;\\n\\\n    vec3 d = ray.direction;\\n\\\n\\n\\\n    vec3 oc = o - center;\\n\\\n\\n\\\n    float a = dot(d, d);\\n\\\n    float b = 2.0 * dot(d, oc);\\n\\\n    float c = dot(oc, oc) - (radius * radius);\\n\\\n\\n\\\n    float det = (b * b) - (4.0 * a * c);\\n\\\n\\n\\\n    if (det < 0.0) {\\n\\\n        return czm_emptyRaySegment;\\n\\\n    }\\n\\\n\\n\\\n    float sqrtDet = sqrt(det);\\n\\\n\\n\\\n    float t0 = (-b - sqrtDet) / (2.0 * a);\\n\\\n    float t1 = (-b + sqrtDet) / (2.0 * a);\\n\\\n\\n\\\n    czm_raySegment result = czm_raySegment(t0, t1);\\n\\\n    return result;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"float czm_readDepth(sampler2D depthTexture, vec2 texCoords)\\n\\\n{\\n\\\n    return czm_reverseLogDepth(texture2D(depthTexture, texCoords).r);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Reads a value previously transformed with {@link czm_writeNonPerspective}\\n\\\n * by dividing it by `w`, the value used in the perspective divide.\\n\\\n * This function is intended to be called in a fragment shader to access a\\n\\\n * `varying` that should not be subject to perspective interpolation.\\n\\\n * For example, screen-space texture coordinates. The value should have been\\n\\\n * previously written in the vertex shader with a call to\\n\\\n * {@link czm_writeNonPerspective}.\\n\\\n *\\n\\\n * @name czm_readNonPerspective\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float|vec2|vec3|vec4} value The non-perspective value to be read.\\n\\\n * @param {float} oneOverW One over the perspective divide value, `w`. Usually this is simply `gl_FragCoord.w`.\\n\\\n * @returns {float|vec2|vec3|vec4} The usable value.\\n\\\n */\\n\\\nfloat czm_readNonPerspective(float value, float oneOverW) {\\n\\\n    return value * oneOverW;\\n\\\n}\\n\\\n\\n\\\nvec2 czm_readNonPerspective(vec2 value, float oneOverW) {\\n\\\n    return value * oneOverW;\\n\\\n}\\n\\\n\\n\\\nvec3 czm_readNonPerspective(vec3 value, float oneOverW) {\\n\\\n    return value * oneOverW;\\n\\\n}\\n\\\n\\n\\\nvec4 czm_readNonPerspective(vec4 value, float oneOverW) {\\n\\\n    return value * oneOverW;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"float czm_reverseLogDepth(float logZ)\\n\\\n{\\n\\\n#ifdef LOG_DEPTH\\n\\\n    float near = czm_currentFrustum.x;\\n\\\n    float far = czm_currentFrustum.y;\\n\\\n    float log2Depth = logZ * czm_log2FarDepthFromNearPlusOne;\\n\\\n    float depthFromNear = pow(2.0, log2Depth) - 1.0;\\n\\\n    return far * (1.0 - near / (depthFromNear + near)) / (far - near);\\n\\\n#endif\\n\\\n    return logZ;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Round a floating point value. This function exists because round() doesn't\\n\\\n * exist in GLSL 1.00. \\n\\\n *\\n\\\n * @param {float|vec2|vec3|vec4} value The value to round\\n\\\n * @param {float|vec2|vec3|vec3} The rounded value. The type matches the input.\\n\\\n */\\n\\\nfloat czm_round(float value) {\\n\\\n  return floor(value + 0.5);\\n\\\n}\\n\\\n\\n\\\nvec2 czm_round(vec2 value) {\\n\\\n  return floor(value + 0.5);\\n\\\n}\\n\\\n\\n\\\nvec3 czm_round(vec3 value) {\\n\\\n  return floor(value + 0.5);\\n\\\n}\\n\\\n\\n\\\nvec4 czm_round(vec4 value) {\\n\\\n  return floor(value + 0.5);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Samples the 4 neighboring pixels and return the weighted average.\\n\\\n *\\n\\\n * @private\\n\\\n */\\n\\\nvec3 czm_sampleOctahedralProjectionWithFiltering(sampler2D projectedMap, vec2 textureSize, vec3 direction, float lod)\\n\\\n{\\n\\\n    direction /= dot(vec3(1.0), abs(direction));\\n\\\n    vec2 rev = abs(direction.zx) - vec2(1.0);\\n\\\n    vec2 neg = vec2(direction.x < 0.0 ? rev.x : -rev.x,\\n\\\n                    direction.z < 0.0 ? rev.y : -rev.y);\\n\\\n    vec2 uv = direction.y < 0.0 ? neg : direction.xz;\\n\\\n    vec2 coord = 0.5 * uv + vec2(0.5);\\n\\\n    vec2 pixel = 1.0 / textureSize;\\n\\\n\\n\\\n    if (lod > 0.0)\\n\\\n    {\\n\\\n        // Each subseqeuent mip level is half the size\\n\\\n        float scale = 1.0 / pow(2.0, lod);\\n\\\n        float offset = ((textureSize.y + 1.0) / textureSize.x);\\n\\\n\\n\\\n        coord.x *= offset;\\n\\\n        coord *= scale;\\n\\\n\\n\\\n        coord.x += offset + pixel.x;\\n\\\n        coord.y += (1.0 - (1.0 / pow(2.0, lod - 1.0))) + pixel.y * (lod - 1.0) * 2.0;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        coord.x *= (textureSize.y / textureSize.x);\\n\\\n    }\\n\\\n\\n\\\n    // Do bilinear filtering\\n\\\n    #ifndef OES_texture_float_linear\\n\\\n        vec3 color1 = texture2D(projectedMap, coord + vec2(0.0, pixel.y)).rgb;\\n\\\n        vec3 color2 = texture2D(projectedMap, coord + vec2(pixel.x, 0.0)).rgb;\\n\\\n        vec3 color3 = texture2D(projectedMap, coord + pixel).rgb;\\n\\\n        vec3 color4 = texture2D(projectedMap, coord).rgb;\\n\\\n\\n\\\n        vec2 texturePosition = coord * textureSize;\\n\\\n\\n\\\n        float fu = fract(texturePosition.x);\\n\\\n        float fv = fract(texturePosition.y);\\n\\\n\\n\\\n        vec3 average1 = mix(color4, color2, fu);\\n\\\n        vec3 average2 = mix(color1, color3, fu);\\n\\\n\\n\\\n        vec3 color = mix(average1, average2, fv);\\n\\\n    #else\\n\\\n        vec3 color = texture2D(projectedMap, coord).rgb;\\n\\\n    #endif\\n\\\n\\n\\\n    return color;\\n\\\n}\\n\\\n\\n\\\n\\n\\\n/**\\n\\\n * Samples from a cube map that has been projected using an octahedral projection from the given direction.\\n\\\n *\\n\\\n * @name czm_sampleOctahedralProjection\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {sampler2D} projectedMap The texture with the octahedral projected cube map.\\n\\\n * @param {vec2} textureSize The width and height dimensions in pixels of the projected map.\\n\\\n * @param {vec3} direction The normalized direction used to sample the cube map.\\n\\\n * @param {float} lod The level of detail to sample.\\n\\\n * @param {float} maxLod The maximum level of detail.\\n\\\n * @returns {vec3} The color of the cube map at the direction.\\n\\\n */\\n\\\nvec3 czm_sampleOctahedralProjection(sampler2D projectedMap, vec2 textureSize, vec3 direction, float lod, float maxLod) {\\n\\\n    float currentLod = floor(lod + 0.5);\\n\\\n    float nextLod = min(currentLod + 1.0, maxLod);\\n\\\n\\n\\\n    vec3 colorCurrentLod = czm_sampleOctahedralProjectionWithFiltering(projectedMap, textureSize, direction, currentLod);\\n\\\n    vec3 colorNextLod = czm_sampleOctahedralProjectionWithFiltering(projectedMap, textureSize, direction, nextLod);\\n\\\n\\n\\\n    return mix(colorNextLod, colorCurrentLod, nextLod - lod);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Adjusts the saturation of a color.\\n\\\n * \\n\\\n * @name czm_saturation\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} rgb The color.\\n\\\n * @param {float} adjustment The amount to adjust the saturation of the color.\\n\\\n *\\n\\\n * @returns {float} The color with the saturation adjusted.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 greyScale = czm_saturation(color, 0.0);\\n\\\n * vec3 doubleSaturation = czm_saturation(color, 2.0);\\n\\\n */\\n\\\nvec3 czm_saturation(vec3 rgb, float adjustment)\\n\\\n{\\n\\\n    // Algorithm from Chapter 16 of OpenGL Shading Language\\n\\\n    const vec3 W = vec3(0.2125, 0.7154, 0.0721);\\n\\\n    vec3 intensity = vec3(dot(rgb, W));\\n\\\n    return mix(intensity, rgb, adjustment);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"\\n\\\nfloat czm_sampleShadowMap(highp samplerCube shadowMap, vec3 d)\\n\\\n{\\n\\\n    return czm_unpackDepth(textureCube(shadowMap, d));\\n\\\n}\\n\\\n\\n\\\nfloat czm_sampleShadowMap(highp sampler2D shadowMap, vec2 uv)\\n\\\n{\\n\\\n#ifdef USE_SHADOW_DEPTH_TEXTURE\\n\\\n    return texture2D(shadowMap, uv).r;\\n\\\n#else\\n\\\n    return czm_unpackDepth(texture2D(shadowMap, uv));\\n\\\n#endif\\n\\\n}\\n\\\n\\n\\\nfloat czm_shadowDepthCompare(samplerCube shadowMap, vec3 uv, float depth)\\n\\\n{\\n\\\n    return step(depth, czm_sampleShadowMap(shadowMap, uv));\\n\\\n}\\n\\\n\\n\\\nfloat czm_shadowDepthCompare(sampler2D shadowMap, vec2 uv, float depth)\\n\\\n{\\n\\\n    return step(depth, czm_sampleShadowMap(shadowMap, uv));\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"\\n\\\nfloat czm_private_shadowVisibility(float visibility, float nDotL, float normalShadingSmooth, float darkness)\\n\\\n{\\n\\\n#ifdef USE_NORMAL_SHADING\\n\\\n#ifdef USE_NORMAL_SHADING_SMOOTH\\n\\\n    float strength = clamp(nDotL / normalShadingSmooth, 0.0, 1.0);\\n\\\n#else\\n\\\n    float strength = step(0.0, nDotL);\\n\\\n#endif\\n\\\n    visibility *= strength;\\n\\\n#endif\\n\\\n\\n\\\n    visibility = max(visibility, darkness);\\n\\\n    return visibility;\\n\\\n}\\n\\\n\\n\\\n#ifdef USE_CUBE_MAP_SHADOW\\n\\\nfloat czm_shadowVisibility(samplerCube shadowMap, czm_shadowParameters shadowParameters)\\n\\\n{\\n\\\n    float depthBias = shadowParameters.depthBias;\\n\\\n    float depth = shadowParameters.depth;\\n\\\n    float nDotL = shadowParameters.nDotL;\\n\\\n    float normalShadingSmooth = shadowParameters.normalShadingSmooth;\\n\\\n    float darkness = shadowParameters.darkness;\\n\\\n    vec3 uvw = shadowParameters.texCoords;\\n\\\n\\n\\\n    depth -= depthBias;\\n\\\n    float visibility = czm_shadowDepthCompare(shadowMap, uvw, depth);\\n\\\n    return czm_private_shadowVisibility(visibility, nDotL, normalShadingSmooth, darkness);\\n\\\n}\\n\\\n#else\\n\\\nfloat czm_shadowVisibility(sampler2D shadowMap, czm_shadowParameters shadowParameters)\\n\\\n{\\n\\\n    float depthBias = shadowParameters.depthBias;\\n\\\n    float depth = shadowParameters.depth;\\n\\\n    float nDotL = shadowParameters.nDotL;\\n\\\n    float normalShadingSmooth = shadowParameters.normalShadingSmooth;\\n\\\n    float darkness = shadowParameters.darkness;\\n\\\n    vec2 uv = shadowParameters.texCoords;\\n\\\n\\n\\\n    depth -= depthBias;\\n\\\n#ifdef USE_SOFT_SHADOWS\\n\\\n    vec2 texelStepSize = shadowParameters.texelStepSize;\\n\\\n    float radius = 1.0;\\n\\\n    float dx0 = -texelStepSize.x * radius;\\n\\\n    float dy0 = -texelStepSize.y * radius;\\n\\\n    float dx1 = texelStepSize.x * radius;\\n\\\n    float dy1 = texelStepSize.y * radius;\\n\\\n    float visibility = (\\n\\\n        czm_shadowDepthCompare(shadowMap, uv, depth) +\\n\\\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx0, dy0), depth) +\\n\\\n        czm_shadowDepthCompare(shadowMap, uv + vec2(0.0, dy0), depth) +\\n\\\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx1, dy0), depth) +\\n\\\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx0, 0.0), depth) +\\n\\\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx1, 0.0), depth) +\\n\\\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx0, dy1), depth) +\\n\\\n        czm_shadowDepthCompare(shadowMap, uv + vec2(0.0, dy1), depth) +\\n\\\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx1, dy1), depth)\\n\\\n    ) * (1.0 / 9.0);\\n\\\n#else\\n\\\n    float visibility = czm_shadowDepthCompare(shadowMap, uv, depth);\\n\\\n#endif\\n\\\n\\n\\\n    return czm_private_shadowVisibility(visibility, nDotL, normalShadingSmooth, darkness);\\n\\\n}\\n\\\n#endif\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Returns 1.0 if the given value is positive or zero, and -1.0 if it is negative.  This is similar to the GLSL\\n\\\n * built-in function <code>sign</code> except that returns 1.0 instead of 0.0 when the input value is 0.0.\\n\\\n * \\n\\\n * @name czm_signNotZero\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {} value The value for which to determine the sign.\\n\\\n * @returns {} 1.0 if the value is positive or zero, -1.0 if the value is negative.\\n\\\n */\\n\\\nfloat czm_signNotZero(float value)\\n\\\n{\\n\\\n    return value >= 0.0 ? 1.0 : -1.0;\\n\\\n}\\n\\\n\\n\\\nvec2 czm_signNotZero(vec2 value)\\n\\\n{\\n\\\n    return vec2(czm_signNotZero(value.x), czm_signNotZero(value.y));\\n\\\n}\\n\\\n\\n\\\nvec3 czm_signNotZero(vec3 value)\\n\\\n{\\n\\\n    return vec3(czm_signNotZero(value.x), czm_signNotZero(value.y), czm_signNotZero(value.z));\\n\\\n}\\n\\\n\\n\\\nvec4 czm_signNotZero(vec4 value)\\n\\\n{\\n\\\n    return vec4(czm_signNotZero(value.x), czm_signNotZero(value.y), czm_signNotZero(value.z), czm_signNotZero(value.w));\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Computes a color from the third order spherical harmonic coefficients and a normalized direction vector.\\n\\\n * <p>\\n\\\n * The order of the coefficients is [L00, L1_1, L10, L11, L2_2, L2_1, L20, L21, L22].\\n\\\n * </p>\\n\\\n *\\n\\\n * @name czm_sphericalHarmonics\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} normal The normalized direction.\\n\\\n * @param {vec3[9]} coefficients The third order spherical harmonic coefficients.\\n\\\n * @returns {vec3} The color at the direction.\\n\\\n *\\n\\\n * @see https://graphics.stanford.edu/papers/envmap/envmap.pdf\\n\\\n */\\n\\\nvec3 czm_sphericalHarmonics(vec3 normal, vec3 coefficients[9])\\n\\\n{\\n\\\n    vec3 L00 = coefficients[0];\\n\\\n    vec3 L1_1 = coefficients[1];\\n\\\n    vec3 L10 = coefficients[2];\\n\\\n    vec3 L11 = coefficients[3];\\n\\\n    vec3 L2_2 = coefficients[4];\\n\\\n    vec3 L2_1 = coefficients[5];\\n\\\n    vec3 L20 = coefficients[6];\\n\\\n    vec3 L21 = coefficients[7];\\n\\\n    vec3 L22 = coefficients[8];\\n\\\n\\n\\\n    float x = normal.x;\\n\\\n    float y = normal.y;\\n\\\n    float z = normal.z;\\n\\\n\\n\\\n    return\\n\\\n          L00\\n\\\n        + L1_1 * y\\n\\\n        + L10 * z\\n\\\n        + L11 * x\\n\\\n        + L2_2 * (y * x)\\n\\\n        + L2_1 * (y * z)\\n\\\n        + L20 * (3.0 * z * z - 1.0)\\n\\\n        + L21 * (z * x)\\n\\\n        + L22 * (x * x - y * y);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Converts an sRGB color to a linear RGB color.\\n\\\n *\\n\\\n * @param {vec3|vec4} srgbIn The color in sRGB space\\n\\\n * @returns {vec3|vec4} The color in linear color space. The vector type matches the input.\\n\\\n */\\n\\\nvec3 czm_srgbToLinear(vec3 srgbIn)\\n\\\n{\\n\\\n    return pow(srgbIn, vec3(2.2));\\n\\\n}\\n\\\n\\n\\\nvec4 czm_srgbToLinear(vec4 srgbIn) \\n\\\n{\\n\\\n    vec3 linearOut = pow(srgbIn.rgb, vec3(2.2));\\n\\\n    return vec4(linearOut, srgbIn.a);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Creates a matrix that transforms vectors from tangent space to eye space.\\n\\\n *\\n\\\n * @name czm_tangentToEyeSpaceMatrix\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} normalEC The normal vector in eye coordinates.\\n\\\n * @param {vec3} tangentEC The tangent vector in eye coordinates.\\n\\\n * @param {vec3} bitangentEC The bitangent vector in eye coordinates.\\n\\\n *\\n\\\n * @returns {mat3} The matrix that transforms from tangent space to eye space.\\n\\\n *\\n\\\n * @example\\n\\\n * mat3 tangentToEye = czm_tangentToEyeSpaceMatrix(normalEC, tangentEC, bitangentEC);\\n\\\n * vec3 normal = tangentToEye * texture2D(normalMap, st).xyz;\\n\\\n */\\n\\\nmat3 czm_tangentToEyeSpaceMatrix(vec3 normalEC, vec3 tangentEC, vec3 bitangentEC)\\n\\\n{\\n\\\n    vec3 normal = normalize(normalEC);\\n\\\n    vec3 tangent = normalize(tangentEC);\\n\\\n    vec3 bitangent = normalize(bitangentEC);\\n\\\n    return mat3(tangent.x  , tangent.y  , tangent.z,\\n\\\n                bitangent.x, bitangent.y, bitangent.z,\\n\\\n                normal.x   , normal.y   , normal.z);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Transforms a plane.\\n\\\n * \\n\\\n * @name czm_transformPlane\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} plane The plane in Hessian Normal Form.\\n\\\n * @param {mat4} transform The inverse-transpose of a transformation matrix.\\n\\\n */\\n\\\nvec4 czm_transformPlane(vec4 plane, mat4 transform) {\\n\\\n    vec4 transformedPlane = transform * plane;\\n\\\n    // Convert the transformed plane to Hessian Normal Form\\n\\\n    float normalMagnitude = length(transformedPlane.xyz);\\n\\\n    return transformedPlane / normalMagnitude;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Translates a position (or any <code>vec3</code>) that was encoded with {@link EncodedCartesian3},\\n\\\n * and then provided to the shader as separate <code>high</code> and <code>low</code> bits to\\n\\\n * be relative to the eye.  As shown in the example, the position can then be transformed in eye\\n\\\n * or clip coordinates using {@link czm_modelViewRelativeToEye} or {@link czm_modelViewProjectionRelativeToEye},\\n\\\n * respectively.\\n\\\n * <p>\\n\\\n * This technique, called GPU RTE, eliminates jittering artifacts when using large coordinates as\\n\\\n * described in {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\\n\\\n * </p>\\n\\\n *\\n\\\n * @name czm_translateRelativeToEye\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} high The position's high bits.\\n\\\n * @param {vec3} low The position's low bits.\\n\\\n * @returns {vec3} The position translated to be relative to the camera's position.\\n\\\n *\\n\\\n * @example\\n\\\n * attribute vec3 positionHigh;\\n\\\n * attribute vec3 positionLow;\\n\\\n *\\n\\\n * void main()\\n\\\n * {\\n\\\n *   vec4 p = czm_translateRelativeToEye(positionHigh, positionLow);\\n\\\n *   gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n * }\\n\\\n *\\n\\\n * @see czm_modelViewRelativeToEye\\n\\\n * @see czm_modelViewProjectionRelativeToEye\\n\\\n * @see czm_computePosition\\n\\\n * @see EncodedCartesian3\\n\\\n */\\n\\\nvec4 czm_translateRelativeToEye(vec3 high, vec3 low)\\n\\\n{\\n\\\n    vec3 highDifference = high - czm_encodedCameraPositionMCHigh;\\n\\\n    vec3 lowDifference = low - czm_encodedCameraPositionMCLow;\\n\\\n\\n\\\n    return vec4(highDifference + lowDifference, 1.0);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * @private\\n\\\n */\\n\\\nvec4 czm_translucentPhong(vec3 toEye, czm_material material, vec3 lightDirectionEC)\\n\\\n{\\n\\\n    // Diffuse from directional light sources at eye (for top-down and horizon views)\\n\\\n    float diffuse = czm_getLambertDiffuse(vec3(0.0, 0.0, 1.0), material.normal);\\n\\\n\\n\\\n    if (czm_sceneMode == czm_sceneMode3D) {\\n\\\n        // (and horizon views in 3D)\\n\\\n        diffuse += czm_getLambertDiffuse(vec3(0.0, 1.0, 0.0), material.normal);\\n\\\n    }\\n\\\n\\n\\\n    diffuse = clamp(diffuse, 0.0, 1.0);\\n\\\n\\n\\\n    float specular = czm_getSpecular(lightDirectionEC, toEye, material.normal, material.shininess);\\n\\\n\\n\\\n    // Temporary workaround for adding ambient.\\n\\\n    vec3 materialDiffuse = material.diffuse * 0.5;\\n\\\n\\n\\\n    vec3 ambient = materialDiffuse;\\n\\\n    vec3 color = ambient + material.emission;\\n\\\n    color += materialDiffuse * diffuse * czm_lightColor;\\n\\\n    color += material.specular * specular * czm_lightColor;\\n\\\n\\n\\\n    return vec4(color, material.alpha);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Returns the transpose of the matrix.  The input <code>matrix</code> can be\\n\\\n * a <code>mat2</code>, <code>mat3</code>, or <code>mat4</code>.\\n\\\n *\\n\\\n * @name czm_transpose\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {} matrix The matrix to transpose.\\n\\\n *\\n\\\n * @returns {} The transposed matrix.\\n\\\n *\\n\\\n * @example\\n\\\n * // GLSL declarations\\n\\\n * mat2 czm_transpose(mat2 matrix);\\n\\\n * mat3 czm_transpose(mat3 matrix);\\n\\\n * mat4 czm_transpose(mat4 matrix);\\n\\\n *\\n\\\n * // Transpose a 3x3 rotation matrix to find its inverse.\\n\\\n * mat3 eastNorthUpToEye = czm_eastNorthUpToEyeCoordinates(\\n\\\n *     positionMC, normalEC);\\n\\\n * mat3 eyeToEastNorthUp = czm_transpose(eastNorthUpToEye);\\n\\\n */\\n\\\nmat2 czm_transpose(mat2 matrix)\\n\\\n{\\n\\\n    return mat2(\\n\\\n        matrix[0][0], matrix[1][0],\\n\\\n        matrix[0][1], matrix[1][1]);\\n\\\n}\\n\\\n\\n\\\nmat3 czm_transpose(mat3 matrix)\\n\\\n{\\n\\\n    return mat3(\\n\\\n        matrix[0][0], matrix[1][0], matrix[2][0],\\n\\\n        matrix[0][1], matrix[1][1], matrix[2][1],\\n\\\n        matrix[0][2], matrix[1][2], matrix[2][2]);\\n\\\n}\\n\\\n\\n\\\nmat4 czm_transpose(mat4 matrix)\\n\\\n{\\n\\\n    return mat4(\\n\\\n        matrix[0][0], matrix[1][0], matrix[2][0], matrix[3][0],\\n\\\n        matrix[0][1], matrix[1][1], matrix[2][1], matrix[3][1],\\n\\\n        matrix[0][2], matrix[1][2], matrix[2][2], matrix[3][2],\\n\\\n        matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Unpacks a vec4 depth value to a float in [0, 1) range.\\n\\\n *\\n\\\n * @name czm_unpackDepth\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} packedDepth The packed depth.\\n\\\n *\\n\\\n * @returns {float} The floating-point depth in [0, 1) range.\\n\\\n */\\n\\\n float czm_unpackDepth(vec4 packedDepth)\\n\\\n {\\n\\\n    // See Aras Pranckevičius' post Encoding Floats to RGBA\\n\\\n    // http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\\n\\\n    return dot(packedDepth, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\\n\\\n }\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Unpack an IEEE 754 single-precision float that is packed as a little-endian unsigned normalized vec4.\\n\\\n *\\n\\\n * @name czm_unpackFloat\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} packedFloat The packed float.\\n\\\n *\\n\\\n * @returns {float} The floating-point depth in arbitrary range.\\n\\\n */\\n\\\nfloat czm_unpackFloat(vec4 packedFloat)\\n\\\n{\\n\\\n    // Convert to [0.0, 255.0] and round to integer\\n\\\n    packedFloat = floor(packedFloat * 255.0 + 0.5);\\n\\\n    float sign = 1.0 - step(128.0, packedFloat[3]) * 2.0;\\n\\\n    float exponent = 2.0 * mod(packedFloat[3], 128.0) + step(128.0, packedFloat[2]) - 127.0;    \\n\\\n    if (exponent == -127.0)\\n\\\n    {\\n\\\n        return 0.0;\\n\\\n    }\\n\\\n    float mantissa = mod(packedFloat[2], 128.0) * 65536.0 + packedFloat[1] * 256.0 + packedFloat[0] + float(0x800000);\\n\\\n    float result = sign * exp2(exponent - 23.0) * mantissa;\\n\\\n    return result;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Unpack unsigned integers of 1-4 bytes. in WebGL 1, there is no uint type,\\n\\\n * so the return value is an int.\\n\\\n * <p>\\n\\\n * There are also precision limitations in WebGL 1. highp int is still limited\\n\\\n * to 24 bits. Above the value of 2^24 = 16777216, precision loss may occur.\\n\\\n * </p>\\n\\\n *\\n\\\n * @param {float|vec2|vec3|vec4} packed The packed value. For vectors, the components are listed in little-endian order.\\n\\\n *\\n\\\n * @return {int} The unpacked value.\\n\\\n */\\n\\\n int czm_unpackUint(float packedValue) {\\n\\\n   float rounded = czm_round(packedValue * 255.0);\\n\\\n   return int(rounded);\\n\\\n }\\n\\\n\\n\\\n int czm_unpackUint(vec2 packedValue) {\\n\\\n   vec2 rounded = czm_round(packedValue * 255.0);\\n\\\n   return int(dot(rounded, vec2(1.0, 256.0)));\\n\\\n }\\n\\\n\\n\\\n int czm_unpackUint(vec3 packedValue) {\\n\\\n   vec3 rounded = czm_round(packedValue * 255.0);\\n\\\n   return int(dot(rounded, vec3(1.0, 256.0, 65536.0)));\\n\\\n }\\n\\\n\\n\\\n int czm_unpackUint(vec4 packedValue) {\\n\\\n   vec4 rounded = czm_round(packedValue * 255.0);\\n\\\n   return int(dot(rounded, vec4(1.0, 256.0, 65536.0, 16777216.0)));\\n\\\n }\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Transform metadata values following the EXT_structural_metadata spec\\n\\\n * by multiplying by scale and adding the offset. Operations are always\\n\\\n * performed component-wise, even for matrices.\\n\\\n * \\n\\\n * @param {float|vec2|vec3|vec4|mat2|mat3|mat4} offset The offset to add\\n\\\n * @param {float|vec2|vec3|vec4|mat2|mat3|mat4} scale The scale factor to multiply\\n\\\n * @param {float|vec2|vec3|vec4|mat2|mat3|mat4} value The original value.\\n\\\n *\\n\\\n * @return {float|vec2|vec3|vec4|mat2|mat3|mat4} The transformed value of the same scalar/vector/matrix type as the input.\\n\\\n */\\n\\\nfloat czm_valueTransform(float offset, float scale, float value) {\\n\\\n  return scale * value + offset;\\n\\\n}\\n\\\n\\n\\\nvec2 czm_valueTransform(vec2 offset, vec2 scale, vec2 value) {\\n\\\n  return scale * value + offset;\\n\\\n}\\n\\\n\\n\\\nvec3 czm_valueTransform(vec3 offset, vec3 scale, vec3 value) {\\n\\\n  return scale * value + offset;\\n\\\n}\\n\\\n\\n\\\nvec4 czm_valueTransform(vec4 offset, vec4 scale, vec4 value) {\\n\\\n  return scale * value + offset;\\n\\\n}\\n\\\n\\n\\\nmat2 czm_valueTransform(mat2 offset, mat2 scale, mat2 value) {\\n\\\n  return matrixCompMult(scale, value) + offset;\\n\\\n}\\n\\\n\\n\\\nmat3 czm_valueTransform(mat3 offset, mat3 scale, mat3 value) {\\n\\\n  return matrixCompMult(scale, value) + offset;\\n\\\n}\\n\\\n\\n\\\nmat4 czm_valueTransform(mat4 offset, mat4 scale, mat4 value) {\\n\\\n  return matrixCompMult(scale, value) + offset;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef LOG_DEPTH\\n\\\n// 1.0 at the near plane, increasing linearly from there.\\n\\\nvarying float v_depthFromNearPlusOne;\\n\\\n#ifdef SHADOW_MAP\\n\\\nvarying vec3 v_logPositionEC;\\n\\\n#endif\\n\\\n#endif\\n\\\n\\n\\\nvec4 czm_updatePositionDepth(vec4 coords) {\\n\\\n#if defined(LOG_DEPTH)\\n\\\n\\n\\\n#ifdef SHADOW_MAP\\n\\\n    vec3 logPositionEC = (czm_inverseProjection * coords).xyz;\\n\\\n    v_logPositionEC = logPositionEC;\\n\\\n#endif\\n\\\n\\n\\\n    // With the very high far/near ratios used with the logarithmic depth\\n\\\n    // buffer, floating point rounding errors can cause linear depth values\\n\\\n    // to end up on the wrong side of the far plane, even for vertices that\\n\\\n    // are really nowhere near it. Since we always write a correct logarithmic\\n\\\n    // depth value in the fragment shader anyway, we just need to make sure\\n\\\n    // such errors don't cause the primitive to be clipped entirely before\\n\\\n    // we even get to the fragment shader.\\n\\\n    coords.z = clamp(coords.z / coords.w, -1.0, 1.0) * coords.w;\\n\\\n#endif\\n\\\n\\n\\\n    return coords;\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Writes the logarithmic depth to gl_Position using the already computed gl_Position.\\n\\\n *\\n\\\n * @name czm_vertexLogDepth\\n\\\n * @glslFunction\\n\\\n */\\n\\\nvoid czm_vertexLogDepth()\\n\\\n{\\n\\\n#ifdef LOG_DEPTH\\n\\\n    v_depthFromNearPlusOne = (gl_Position.w - czm_currentFrustum.x) + 1.0;\\n\\\n    gl_Position = czm_updatePositionDepth(gl_Position);\\n\\\n#endif\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Writes the logarithmic depth to gl_Position using the provided clip coordinates.\\n\\\n * <p>\\n\\\n * An example use case for this function would be moving the vertex in window coordinates\\n\\\n * before converting back to clip coordinates. Use the original vertex clip coordinates.\\n\\\n * </p>\\n\\\n * @name czm_vertexLogDepth\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} clipCoords The vertex in clip coordinates.\\n\\\n *\\n\\\n * @example\\n\\\n * czm_vertexLogDepth(czm_projection * vec4(positionEyeCoordinates, 1.0));\\n\\\n */\\n\\\nvoid czm_vertexLogDepth(vec4 clipCoords)\\n\\\n{\\n\\\n#ifdef LOG_DEPTH\\n\\\n    v_depthFromNearPlusOne = (clipCoords.w - czm_currentFrustum.x) + 1.0;\\n\\\n    czm_updatePositionDepth(clipCoords);\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Transforms a position from window to eye coordinates.\\n\\\n * The transform from window to normalized device coordinates is done using components\\n\\\n * of (@link czm_viewport} and {@link czm_viewportTransformation} instead of calculating\\n\\\n * the inverse of <code>czm_viewportTransformation</code>. The transformation from\\n\\\n * normalized device coordinates to clip coordinates is done using <code>fragmentCoordinate.w</code>,\\n\\\n * which is expected to be the scalar used in the perspective divide. The transformation\\n\\\n * from clip to eye coordinates is done using {@link czm_inverseProjection}.\\n\\\n *\\n\\\n * @name czm_windowToEyeCoordinates\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} fragmentCoordinate The position in window coordinates to transform.\\n\\\n *\\n\\\n * @returns {vec4} The transformed position in eye coordinates.\\n\\\n *\\n\\\n * @see czm_modelToWindowCoordinates\\n\\\n * @see czm_eyeToWindowCoordinates\\n\\\n * @see czm_inverseProjection\\n\\\n * @see czm_viewport\\n\\\n * @see czm_viewportTransformation\\n\\\n *\\n\\\n * @example\\n\\\n * vec4 positionEC = czm_windowToEyeCoordinates(gl_FragCoord);\\n\\\n */\\n\\\nvec4 czm_windowToEyeCoordinates(vec4 fragmentCoordinate)\\n\\\n{\\n\\\n    // Reconstruct NDC coordinates\\n\\\n    float x = 2.0 * (fragmentCoordinate.x - czm_viewport.x) / czm_viewport.z - 1.0;\\n\\\n    float y = 2.0 * (fragmentCoordinate.y - czm_viewport.y) / czm_viewport.w - 1.0;\\n\\\n    float z = (fragmentCoordinate.z - czm_viewportTransformation[3][2]) / czm_viewportTransformation[2][2];\\n\\\n    vec4 q = vec4(x, y, z, 1.0);\\n\\\n\\n\\\n    // Reverse the perspective division to obtain clip coordinates.\\n\\\n    q /= fragmentCoordinate.w;\\n\\\n\\n\\\n    // Reverse the projection transformation to obtain eye coordinates.\\n\\\n    if (!(czm_inverseProjection == mat4(0.0))) // IE and Edge sometimes do something weird with != between mat4s\\n\\\n    {\\n\\\n        q = czm_inverseProjection * q;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        float top = czm_frustumPlanes.x;\\n\\\n        float bottom = czm_frustumPlanes.y;\\n\\\n        float left = czm_frustumPlanes.z;\\n\\\n        float right = czm_frustumPlanes.w;\\n\\\n\\n\\\n        float near = czm_currentFrustum.x;\\n\\\n        float far = czm_currentFrustum.y;\\n\\\n\\n\\\n        q.x = (q.x * (right - left) + left + right) * 0.5;\\n\\\n        q.y = (q.y * (top - bottom) + bottom + top) * 0.5;\\n\\\n        q.z = (q.z * (near - far) - near - far) * 0.5;\\n\\\n        q.w = 1.0;\\n\\\n    }\\n\\\n\\n\\\n    return q;\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Transforms a position given as window x/y and a depth or a log depth from window to eye coordinates.\\n\\\n * This function produces more accurate results for window positions with log depth than\\n\\\n * conventionally unpacking the log depth using czm_reverseLogDepth and using the standard version\\n\\\n * of czm_windowToEyeCoordinates.\\n\\\n *\\n\\\n * @name czm_windowToEyeCoordinates\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec2} fragmentCoordinateXY The XY position in window coordinates to transform.\\n\\\n * @param {float} depthOrLogDepth A depth or log depth for the fragment.\\n\\\n *\\n\\\n * @see czm_modelToWindowCoordinates\\n\\\n * @see czm_eyeToWindowCoordinates\\n\\\n * @see czm_inverseProjection\\n\\\n * @see czm_viewport\\n\\\n * @see czm_viewportTransformation\\n\\\n *\\n\\\n * @returns {vec4} The transformed position in eye coordinates.\\n\\\n */\\n\\\nvec4 czm_windowToEyeCoordinates(vec2 fragmentCoordinateXY, float depthOrLogDepth)\\n\\\n{\\n\\\n    // See reverseLogDepth.glsl. This is separate to re-use the pow.\\n\\\n#ifdef LOG_DEPTH\\n\\\n    float near = czm_currentFrustum.x;\\n\\\n    float far = czm_currentFrustum.y;\\n\\\n    float log2Depth = depthOrLogDepth * czm_log2FarDepthFromNearPlusOne;\\n\\\n    float depthFromNear = pow(2.0, log2Depth) - 1.0;\\n\\\n    float depthFromCamera = depthFromNear + near;\\n\\\n    vec4 windowCoord = vec4(fragmentCoordinateXY, far * (1.0 - near / depthFromCamera) / (far - near), 1.0);\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(windowCoord);\\n\\\n    eyeCoordinate.w = 1.0 / depthFromCamera; // Better precision\\n\\\n    return eyeCoordinate;\\n\\\n#else\\n\\\n    vec4 windowCoord = vec4(fragmentCoordinateXY, depthOrLogDepth, 1.0);\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(windowCoord);\\n\\\n#endif\\n\\\n    return eyeCoordinate;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"// emulated noperspective\\n\\\n#if defined(GL_EXT_frag_depth) && !defined(LOG_DEPTH)\\n\\\nvarying float v_WindowZ;\\n\\\n#endif\\n\\\n\\n\\\n/**\\n\\\n * Emulates GL_DEPTH_CLAMP. Clamps a fragment to the near and far plane\\n\\\n * by writing the fragment's depth. See czm_depthClamp for more details.\\n\\\n * <p>\\n\\\n * The shader must enable the GL_EXT_frag_depth extension.\\n\\\n * </p>\\n\\\n *\\n\\\n * @name czm_writeDepthClamp\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @example\\n\\\n * gl_FragColor = color;\\n\\\n * czm_writeDepthClamp();\\n\\\n *\\n\\\n * @see czm_depthClamp\\n\\\n */\\n\\\nvoid czm_writeDepthClamp()\\n\\\n{\\n\\\n#if defined(GL_EXT_frag_depth) && !defined(LOG_DEPTH)\\n\\\n    gl_FragDepthEXT = clamp(v_WindowZ * gl_FragCoord.w, 0.0, 1.0);\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef LOG_DEPTH\\n\\\nvarying float v_depthFromNearPlusOne;\\n\\\n\\n\\\n#ifdef POLYGON_OFFSET\\n\\\nuniform vec2 u_polygonOffset;\\n\\\n#endif\\n\\\n\\n\\\n#endif\\n\\\n\\n\\\n/**\\n\\\n * Writes the fragment depth to the logarithmic depth buffer.\\n\\\n * <p>\\n\\\n * Use this when the vertex shader does not call {@link czm_vertexlogDepth}, for example, when\\n\\\n * ray-casting geometry using a full screen quad.\\n\\\n * </p>\\n\\\n * @name czm_writeLogDepth\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float} depth The depth coordinate, where 1.0 is on the near plane and\\n\\\n *                      depth increases in eye-space units from there\\n\\\n *\\n\\\n * @example\\n\\\n * czm_writeLogDepth((czm_projection * v_positionEyeCoordinates).w + 1.0);\\n\\\n */\\n\\\nvoid czm_writeLogDepth(float depth)\\n\\\n{\\n\\\n#if defined(GL_EXT_frag_depth) && defined(LOG_DEPTH)\\n\\\n    // Discard the vertex if it's not between the near and far planes.\\n\\\n    // We allow a bit of epsilon on the near plane comparison because a 1.0\\n\\\n    // from the vertex shader (indicating the vertex should be _on_ the near\\n\\\n    // plane) will not necessarily come here as exactly 1.0.\\n\\\n    if (depth <= 0.9999999 || depth > czm_farDepthFromNearPlusOne) {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n#ifdef POLYGON_OFFSET\\n\\\n    // Polygon offset: m * factor + r * units\\n\\\n    float factor = u_polygonOffset[0];\\n\\\n    float units = u_polygonOffset[1];\\n\\\n\\n\\\n    // If we can't compute derivatives, just leave out the factor I guess?\\n\\\n#ifdef GL_OES_standard_derivatives\\n\\\n    // m = sqrt(dZdX^2 + dZdY^2);\\n\\\n    float x = dFdx(depth);\\n\\\n    float y = dFdy(depth);\\n\\\n    float m = sqrt(x * x + y * y);\\n\\\n\\n\\\n    // Apply the factor before computing the log depth.\\n\\\n    depth += m * factor;\\n\\\n#endif\\n\\\n\\n\\\n#endif\\n\\\n\\n\\\n    gl_FragDepthEXT = log2(depth) * czm_oneOverLog2FarDepthFromNearPlusOne;\\n\\\n\\n\\\n#ifdef POLYGON_OFFSET\\n\\\n    // Apply the units after the log depth.\\n\\\n    gl_FragDepthEXT += czm_epsilon7 * units;\\n\\\n#endif\\n\\\n\\n\\\n#endif\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Writes the fragment depth to the logarithmic depth buffer.\\n\\\n * <p>\\n\\\n * Use this when the vertex shader calls {@link czm_vertexlogDepth}.\\n\\\n * </p>\\n\\\n *\\n\\\n * @name czm_writeLogDepth\\n\\\n * @glslFunction\\n\\\n */\\n\\\nvoid czm_writeLogDepth() {\\n\\\n#ifdef LOG_DEPTH\\n\\\n    czm_writeLogDepth(v_depthFromNearPlusOne);\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Transforms a value for non-perspective interpolation by multiplying\\n\\\n * it by w, the value used in the perspective divide. This function is\\n\\\n * intended to be called in a vertex shader to compute the value of a\\n\\\n * `varying` that should not be subject to perspective interpolation.\\n\\\n * For example, screen-space texture coordinates. The fragment shader\\n\\\n * must call {@link czm_readNonPerspective} to retrieve the final\\n\\\n * non-perspective value.\\n\\\n *\\n\\\n * @name czm_writeNonPerspective\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {float|vec2|vec3|vec4} value The value to be interpolated without accounting for perspective.\\n\\\n * @param {float} w The perspective divide value. Usually this is the computed `gl_Position.w`.\\n\\\n * @returns {float|vec2|vec3|vec4} The transformed value, intended to be stored in a `varying` and read in the\\n\\\n *          fragment shader with {@link czm_readNonPerspective}.\\n\\\n */\\n\\\nfloat czm_writeNonPerspective(float value, float w) {\\n\\\n    return value * w;\\n\\\n}\\n\\\n\\n\\\nvec2 czm_writeNonPerspective(vec2 value, float w) {\\n\\\n    return value * w;\\n\\\n}\\n\\\n\\n\\\nvec3 czm_writeNonPerspective(vec3 value, float w) {\\n\\\n    return value * w;\\n\\\n}\\n\\\n\\n\\\nvec4 czm_writeNonPerspective(vec4 value, float w) {\\n\\\n    return value * w;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * @name czm_depthRangeStruct\\n\\\n * @glslStruct\\n\\\n */\\n\\\nstruct czm_depthRangeStruct\\n\\\n{\\n\\\n    float near;\\n\\\n    float far;\\n\\\n};\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Holds material information that can be used for lighting. Returned by all czm_getMaterial functions.\\n\\\n *\\n\\\n * @name czm_material\\n\\\n * @glslStruct\\n\\\n *\\n\\\n * @property {vec3} diffuse Incoming light that scatters evenly in all directions.\\n\\\n * @property {float} specular Intensity of incoming light reflecting in a single direction.\\n\\\n * @property {float} shininess The sharpness of the specular reflection.  Higher values create a smaller, more focused specular highlight.\\n\\\n * @property {vec3} normal Surface's normal in eye coordinates. It is used for effects such as normal mapping. The default is the surface's unmodified normal.\\n\\\n * @property {vec3} emission Light emitted by the material equally in all directions. The default is vec3(0.0), which emits no light.\\n\\\n * @property {float} alpha Alpha of this material. 0.0 is completely transparent; 1.0 is completely opaque.\\n\\\n */\\n\\\nstruct czm_material\\n\\\n{\\n\\\n    vec3 diffuse;\\n\\\n    float specular;\\n\\\n    float shininess;\\n\\\n    vec3 normal;\\n\\\n    vec3 emission;\\n\\\n    float alpha;\\n\\\n};\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Used as input to every material's czm_getMaterial function.\\n\\\n *\\n\\\n * @name czm_materialInput\\n\\\n * @glslStruct\\n\\\n *\\n\\\n * @property {float} s 1D texture coordinates.\\n\\\n * @property {vec2} st 2D texture coordinates.\\n\\\n * @property {vec3} str 3D texture coordinates.\\n\\\n * @property {vec3} normalEC Unperturbed surface normal in eye coordinates.\\n\\\n * @property {mat3} tangentToEyeMatrix Matrix for converting a tangent space normal to eye space.\\n\\\n * @property {vec3} positionToEyeEC Vector from the fragment to the eye in eye coordinates.  The magnitude is the distance in meters from the fragment to the eye.\\n\\\n * @property {float} height The height of the terrain in meters above or below the WGS84 ellipsoid.  Only available for globe materials.\\n\\\n * @property {float} slope The slope of the terrain in radians.  0 is flat; pi/2 is vertical.  Only available for globe materials.\\n\\\n * @property {float} aspect The aspect of the terrain in radians.  0 is East, pi/2 is North, pi is West, 3pi/2 is South.  Only available for globe materials.\\n\\\n */\\n\\\nstruct czm_materialInput\\n\\\n{\\n\\\n    float s;\\n\\\n    vec2 st;\\n\\\n    vec3 str;\\n\\\n    vec3 normalEC;\\n\\\n    mat3 tangentToEyeMatrix;\\n\\\n    vec3 positionToEyeEC;\\n\\\n    float height;\\n\\\n    float slope;\\n\\\n    float aspect;\\n\\\n};\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Struct for representing a material for a {@link ModelExperimental}. The model\\n\\\n * rendering pipeline will pass this struct between material, custom shaders,\\n\\\n * and lighting stages. This is not to be confused with {@link czm_material}\\n\\\n * which is used by the older Fabric materials system, although they are similar\\n\\\n *\\n\\\n * @name czm_modelMaterial\\n\\\n * @glslStruct\\n\\\n *\\n\\\n * @property {vec3} diffuse Incoming light that scatters evenly in all directions.\\n\\\n * @property {float} alpha Alpha of this material. 0.0 is completely transparent; 1.0 is completely opaque.\\n\\\n * @property {vec3} specular Color of reflected light at normal incidence in PBR materials. This is sometimes referred to as f0 in the literature.\\n\\\n * @property {float} roughness A number from 0.0 to 1.0 representing how rough the surface is. Values near 0.0 produce glossy surfaces, while values near 1.0 produce rough surfaces.\\n\\\n * @property {vec3} normalEC Surface's normal in eye coordinates. It is used for effects such as normal mapping. The default is the surface's unmodified normal.\\n\\\n * @property {float} occlusion Ambient occlusion recieved at this point on the material. 1.0 means fully lit, 0.0 means fully occluded.\\n\\\n * @property {vec3} emissive Light emitted by the material equally in all directions. The default is vec3(0.0), which emits no light.\\n\\\n */\\n\\\nstruct czm_modelMaterial {\\n\\\n    vec3 diffuse;\\n\\\n    float alpha;\\n\\\n    vec3 specular;\\n\\\n    float roughness;\\n\\\n    vec3 normalEC;\\n\\\n    float occlusion;\\n\\\n    vec3 emissive;\\n\\\n};\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Struct for representing the output of a custom vertex shader.\\n\\\n * \\n\\\n * @name czm_modelVertexOutput\\n\\\n * @glslStruct\\n\\\n *\\n\\\n * @see {@link CustomShader}\\n\\\n * @see {@link ModelExperimental}\\n\\\n *\\n\\\n * @property {vec3} positionMC The position of the vertex in model coordinates\\n\\\n * @property {float} pointSize A custom value for gl_PointSize. This is only used for point primitives. \\n\\\n */\\n\\\nstruct czm_modelVertexOutput {\\n\\\n  vec3 positionMC;\\n\\\n  float pointSize;\\n\\\n};\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Parameters for {@link czm_pbrLighting}\\n\\\n *\\n\\\n * @name czm_material\\n\\\n * @glslStruct\\n\\\n *\\n\\\n * @property {vec3} diffuseColor the diffuse color of the material for the lambert term of the rendering equation\\n\\\n * @property {float} roughness a value from 0.0 to 1.0 that indicates how rough the surface of the material is.\\n\\\n * @property {vec3} f0 The reflectance of the material at normal incidence\\n\\\n */\\n\\\nstruct czm_pbrParameters\\n\\\n{\\n\\\n    vec3 diffuseColor;\\n\\\n    float roughness;\\n\\\n    vec3 f0;\\n\\\n};\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_ray\\n\\\n * @glslStruct\\n\\\n */\\n\\\nstruct czm_ray\\n\\\n{\\n\\\n    vec3 origin;\\n\\\n    vec3 direction;\\n\\\n};\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_raySegment\\n\\\n * @glslStruct\\n\\\n */\\n\\\nstruct czm_raySegment\\n\\\n{\\n\\\n    float start;\\n\\\n    float stop;\\n\\\n};\\n\\\n\\n\\\n/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_emptyRaySegment\\n\\\n * @glslConstant \\n\\\n */\\n\\\nconst czm_raySegment czm_emptyRaySegment = czm_raySegment(-czm_infinity, -czm_infinity);\\n\\\n\\n\\\n/**\\n\\\n * DOC_TBA\\n\\\n *\\n\\\n * @name czm_fullRaySegment\\n\\\n * @glslConstant \\n\\\n */\\n\\\nconst czm_raySegment czm_fullRaySegment = czm_raySegment(0.0, czm_infinity);\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"struct czm_shadowParameters\\n\\\n{\\n\\\n#ifdef USE_CUBE_MAP_SHADOW\\n\\\n    vec3 texCoords;\\n\\\n#else\\n\\\n    vec2 texCoords;\\n\\\n#endif\\n\\\n\\n\\\n    float depthBias;\\n\\\n    float depth;\\n\\\n    float nDotL;\\n\\\n    vec2 texelStepSize;\\n\\\n    float normalShadingSmooth;\\n\\\n    float darkness;\\n\\\n};\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D u_noiseTexture;\\n\\\nuniform vec3 u_noiseTextureDimensions;\\n\\\nuniform float u_noiseDetail;\\n\\\nvarying vec2 v_offset;\\n\\\nvarying vec3 v_maximumSize;\\n\\\nvarying vec4 v_color;\\n\\\nvarying float v_slice;\\n\\\nvarying float v_brightness;\\n\\\n\\n\\\nfloat wrap(float value, float rangeLength) {\\n\\\n    if(value < 0.0) {\\n\\\n        float absValue = abs(value);\\n\\\n        float modValue = mod(absValue, rangeLength);\\n\\\n        return mod(rangeLength - modValue, rangeLength);\\n\\\n    }\\n\\\n    return mod(value, rangeLength);\\n\\\n}\\n\\\n\\n\\\nvec3 wrapVec(vec3 value, float rangeLength) {\\n\\\n    return vec3(wrap(value.x, rangeLength),\\n\\\n                wrap(value.y, rangeLength),\\n\\\n                wrap(value.z, rangeLength));\\n\\\n}\\n\\\n\\n\\\nfloat textureSliceWidth = u_noiseTextureDimensions.x;\\n\\\nfloat noiseTextureRows = u_noiseTextureDimensions.y;\\n\\\nfloat inverseNoiseTextureRows = u_noiseTextureDimensions.z;\\n\\\n\\n\\\nfloat textureSliceWidthSquared = textureSliceWidth * textureSliceWidth;\\n\\\nvec2 inverseNoiseTextureDimensions = vec2(noiseTextureRows / textureSliceWidthSquared,\\n\\\n                                          inverseNoiseTextureRows / textureSliceWidth);\\n\\\n\\n\\\nvec2 voxelToUV(vec3 voxelIndex) {\\n\\\n    vec3 wrappedIndex = wrapVec(voxelIndex, textureSliceWidth);\\n\\\n    float column = mod(wrappedIndex.z, textureSliceWidth * inverseNoiseTextureRows);\\n\\\n    float row = floor(wrappedIndex.z / textureSliceWidth * noiseTextureRows);\\n\\\n\\n\\\n    float xPixelCoord = wrappedIndex.x + column * textureSliceWidth;\\n\\\n    float yPixelCoord = wrappedIndex.y + row * textureSliceWidth;\\n\\\n    return vec2(xPixelCoord, yPixelCoord) * inverseNoiseTextureDimensions;\\n\\\n}\\n\\\n\\n\\\n// Interpolate a voxel with its neighbor (along the positive X-axis)\\n\\\nvec4 lerpSamplesX(vec3 voxelIndex, float x) {\\n\\\n    vec2 uv0 = voxelToUV(voxelIndex);\\n\\\n    vec2 uv1 = voxelToUV(voxelIndex + vec3(1.0, 0.0, 0.0));\\n\\\n    vec4 sample0 = texture2D(u_noiseTexture, uv0);\\n\\\n    vec4 sample1 = texture2D(u_noiseTexture, uv1);\\n\\\n    return mix(sample0, sample1, x);\\n\\\n}\\n\\\n\\n\\\nvec4 sampleNoiseTexture(vec3 position) {\\n\\\n    vec3 recenteredPos = position + vec3(textureSliceWidth / 2.0);\\n\\\n    vec3 lerpValue = fract(recenteredPos);\\n\\\n    vec3 voxelIndex = floor(recenteredPos);\\n\\\n\\n\\\n    vec4 xLerp00 = lerpSamplesX(voxelIndex, lerpValue.x);\\n\\\n    vec4 xLerp01 = lerpSamplesX(voxelIndex + vec3(0.0, 0.0, 1.0), lerpValue.x);\\n\\\n    vec4 xLerp10 = lerpSamplesX(voxelIndex + vec3(0.0, 1.0, 0.0), lerpValue.x);\\n\\\n    vec4 xLerp11 = lerpSamplesX(voxelIndex + vec3(0.0, 1.0, 1.0), lerpValue.x);\\n\\\n\\n\\\n    vec4 yLerp0 = mix(xLerp00, xLerp10, lerpValue.y);\\n\\\n    vec4 yLerp1 = mix(xLerp01, xLerp11, lerpValue.y);\\n\\\n    return mix(yLerp0, yLerp1, lerpValue.z);\\n\\\n}\\n\\\n\\n\\\n// Intersection with a unit sphere with radius 0.5 at center (0, 0, 0).\\n\\\nbool intersectSphere(vec3 origin, vec3 dir, float slice,\\n\\\n                     out vec3 point, out vec3 normal) {\\n\\\n    float A = dot(dir, dir);\\n\\\n    float B = dot(origin, dir);\\n\\\n    float C = dot(origin, origin) - 0.25;\\n\\\n    float discriminant = (B * B) - (A * C);\\n\\\n    if(discriminant < 0.0) {\\n\\\n        return false;\\n\\\n    }\\n\\\n    float root = sqrt(discriminant);\\n\\\n    float t = (-B - root) / A;\\n\\\n    if(t < 0.0) {\\n\\\n        t = (-B + root) / A;\\n\\\n    }\\n\\\n    point = origin + t * dir;\\n\\\n\\n\\\n    if(slice >= 0.0) {\\n\\\n        point.z = (slice / 2.0) - 0.5;\\n\\\n        if(length(point) > 0.5) {\\n\\\n            return false;\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    normal = normalize(point);\\n\\\n    point -= czm_epsilon2 * normal;\\n\\\n    return true;\\n\\\n}\\n\\\n\\n\\\n// Transforms the ray origin and direction into unit sphere space,\\n\\\n// then transforms the result back into the ellipsoid's space.\\n\\\nbool intersectEllipsoid(vec3 origin, vec3 dir, vec3 center, vec3 scale, float slice,\\n\\\n                        out vec3 point, out vec3 normal) {\\n\\\n    if(scale.x <= 0.01 || scale.y < 0.01 || scale.z < 0.01) {\\n\\\n        return false;\\n\\\n    }\\n\\\n\\n\\\n    vec3 o = (origin - center) / scale;\\n\\\n    vec3 d = dir / scale;\\n\\\n    vec3 p, n;\\n\\\n    bool intersected = intersectSphere(o, d, slice, p, n);\\n\\\n    if(intersected) {\\n\\\n        point = (p * scale) + center;\\n\\\n        normal = n;\\n\\\n    }\\n\\\n    return intersected;\\n\\\n}\\n\\\n\\n\\\n// Assume that if phase shift is being called for octave i,\\n\\\n// the frequency is of i - 1. This saves us from doing extra\\n\\\n// division / multiplication operations.\\n\\\nvec2 phaseShift2D(vec2 p, vec2 freq) {\\n\\\n    return (czm_pi / 2.0) * sin(freq.yx * p.yx);\\n\\\n}\\n\\\n\\n\\\nvec2 phaseShift3D(vec3 p, vec2 freq) {\\n\\\n    return phaseShift2D(p.xy, freq) + czm_pi * vec2(sin(freq.x * p.z));\\n\\\n}\\n\\\n\\n\\\n// The cloud texture function derived from Gardner's 1985 paper,\\n\\\n// \\\"Visual Simulation of Clouds.\\\"\\n\\\n// https://www.cs.drexel.edu/~david/Classes/Papers/p297-gardner.pdf\\n\\\nconst float T0    = 0.6;  // contrast of the texture pattern\\n\\\nconst float k     = 0.1;  // computed to produce a maximum value of 1\\n\\\nconst float C0    = 0.8;  // coefficient\\n\\\nconst float FX0   = 0.6;  // frequency X\\n\\\nconst float FY0   = 0.6;  // frequency Y\\n\\\nconst int octaves = 5;\\n\\\n\\n\\\nfloat T(vec3 point) {\\n\\\n    vec2 sum = vec2(0.0);\\n\\\n    float Ci = C0;\\n\\\n    vec2 FXY = vec2(FX0, FY0);\\n\\\n    vec2 PXY = vec2(0.0);\\n\\\n    for(int i = 1; i <= octaves; i++) {\\n\\\n        PXY = phaseShift3D(point, FXY);\\n\\\n        Ci *= 0.707;\\n\\\n        FXY *= 2.0;\\n\\\n        vec2 sinTerm = sin(FXY * point.xy + PXY);\\n\\\n        sum += Ci * sinTerm + vec2(T0);\\n\\\n    }\\n\\\n    return k * sum.x * sum.y;\\n\\\n}\\n\\\n\\n\\\nconst float a = 0.5;  // fraction of surface reflection due to ambient or scattered light,\\n\\\nconst float t = 0.4;  // fraction of texture shading\\n\\\nconst float s = 0.25; // fraction of specular reflection\\n\\\n\\n\\\nfloat I(float Id, float Is, float It) {\\n\\\n    return (1.0 - a) * ((1.0 - t) * ((1.0 - s) * Id + s * Is) + t * It) + a;\\n\\\n}\\n\\\n\\n\\\nconst vec3 lightDir = normalize(vec3(0.2, -1.0, 0.7));\\n\\\n\\n\\\nvec4 drawCloud(vec3 rayOrigin, vec3 rayDir, vec3 cloudCenter, vec3 cloudScale, float cloudSlice,\\n\\\n               float brightness) {\\n\\\n    vec3 cloudPoint, cloudNormal;\\n\\\n    if(!intersectEllipsoid(rayOrigin, rayDir, cloudCenter, cloudScale, cloudSlice,\\n\\\n                            cloudPoint, cloudNormal)) {\\n\\\n        return vec4(0.0);\\n\\\n    }\\n\\\n\\n\\\n    float Id = clamp(dot(cloudNormal, -lightDir), 0.0, 1.0);  // diffuse reflection\\n\\\n    float Is = max(pow(dot(-lightDir, -rayDir), 2.0), 0.0);   // specular reflection\\n\\\n    float It = T(cloudPoint);                                 // texture function\\n\\\n    float intensity = I(Id, Is, It);\\n\\\n    vec3 color = vec3(intensity * clamp(brightness, 0.1, 1.0));\\n\\\n\\n\\\n    vec4 noise = sampleNoiseTexture(u_noiseDetail * cloudPoint);\\n\\\n    float W = noise.x;\\n\\\n    float W2 = noise.y;\\n\\\n    float W3 = noise.z;\\n\\\n\\n\\\n    // The dot product between the cloud's normal and the ray's direction is greatest\\n\\\n    // in the center of the ellipsoid's surface. It decreases towards the edge.\\n\\\n    // Thus, it is used to blur the areas leading to the edges of the ellipsoid,\\n\\\n    // so that no harsh lines appear.\\n\\\n\\n\\\n    // The first (and biggest) layer of worley noise is then subtracted from this.\\n\\\n    // The final result is scaled up so that the base cloud is not too translucent.\\n\\\n    float ndDot = clamp(dot(cloudNormal, -rayDir), 0.0, 1.0);\\n\\\n    float TR = pow(ndDot, 3.0) - W; // translucency\\n\\\n    TR *= 1.3;\\n\\\n\\n\\\n    // Subtracting the second and third layers of worley noise is more complicated.\\n\\\n    // If these layers of noise were simply subtracted from the current translucency,\\n\\\n    // the shape derived from the first layer of noise would be completely deleted.\\n\\\n    // The erosion of this noise should thus be constricted to the edges of the cloud.\\n\\\n    // However, because the edges of the ellipsoid were already blurred away, mapping\\n\\\n    // the noise to (1.0 - ndDot) will have no impact on most of the cloud's appearance.\\n\\\n    // The value of (0.5 - ndDot) provides the best compromise.\\n\\\n    float minusDot = 0.5 - ndDot;\\n\\\n\\n\\\n    // Even with the previous calculation, subtracting the second layer of wnoise\\n\\\n    // erode too much of the cloud. The addition of it, however, will detailed\\n\\\n    // volume to the cloud. As long as the noise is only added and not subtracted,\\n\\\n    // the results are aesthetically pleasing.\\n\\\n\\n\\\n    // The minusDot product is mapped in a way that it is larger at the edges of\\n\\\n    // the ellipsoid, so a subtraction and min operation are used instead of\\n\\\n    // an addition and max one.\\n\\\n    TR -= min(minusDot * W2, 0.0);\\n\\\n\\n\\\n    // The third level of worley noise is subtracted from the result, with some\\n\\\n    // modifications. First, a scalar is added to minusDot so that the noise\\n\\\n    // starts affecting the shape farther away from the center of the ellipsoid's\\n\\\n    // surface. Then, it is scaled down so its impact is not too intense.\\n\\\n    TR -= 0.8 * (minusDot + 0.25) * W3;\\n\\\n\\n\\\n    // The texture function's shading does not correlate with the shape of the cloud\\n\\\n    // produced by the layers of noise, so an extra shading scalar is calculated.\\n\\\n    // The darkest areas of the cloud are assigned to be where the noise erodes\\n\\\n    // the cloud the most. This is then interpolated based on the translucency\\n\\\n    // and the diffuse shading term of that point in the cloud.\\n\\\n    float shading = mix(1.0 - 0.8 * W * W, 1.0, Id * TR);\\n\\\n\\n\\\n    // To avoid values that are too dark, this scalar is increased by a small amount\\n\\\n    // and clamped so it never goes to zero.\\n\\\n    shading = clamp(shading + 0.2, 0.3, 1.0);\\n\\\n\\n\\\n    // Finally, the contrast of the cloud's color is increased.\\n\\\n    vec3 finalColor = mix(vec3(0.5), shading * color, 1.15);\\n\\\n    return vec4(finalColor, clamp(TR, 0.0, 1.0)) * v_color;\\n\\\n}\\n\\\n\\n\\\nvoid main() {\\n\\\n#ifdef DEBUG_BILLBOARDS\\n\\\n    gl_FragColor = vec4(0.0, 0.5, 0.5, 1.0);\\n\\\n#endif\\n\\\n    // To avoid calculations with high values,\\n\\\n    // we raycast from an arbitrarily smaller space.\\n\\\n    vec2 coordinate = v_maximumSize.xy * v_offset;\\n\\\n\\n\\\n    vec3 ellipsoidScale = 0.82 * v_maximumSize;\\n\\\n    vec3 ellipsoidCenter = vec3(0.0);\\n\\\n\\n\\\n    float zOffset = max(ellipsoidScale.z - 10.0, 0.0);\\n\\\n    vec3 eye = vec3(0, 0, -10.0 - zOffset);\\n\\\n    vec3 rayDir = normalize(vec3(coordinate, 1.0) - eye);\\n\\\n    vec3 rayOrigin = eye;\\n\\\n#ifdef DEBUG_ELLIPSOIDS\\n\\\n    vec3 point, normal;\\n\\\n    if(intersectEllipsoid(rayOrigin, rayDir, ellipsoidCenter, ellipsoidScale, v_slice,\\n\\\n                          point, normal)) {\\n\\\n        gl_FragColor = v_brightness * v_color;\\n\\\n    }\\n\\\n#else\\n\\\n#ifndef DEBUG_BILLBOARDS\\n\\\n    vec4 cloud = drawCloud(rayOrigin, rayDir,\\n\\\n                           ellipsoidCenter, ellipsoidScale, v_slice, v_brightness);\\n\\\n    if(cloud.w < 0.01) {\\n\\\n        discard;\\n\\\n    }\\n\\\n    gl_FragColor = cloud;\\n\\\n#endif\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef INSTANCED\\n\\\nattribute vec2 direction;\\n\\\n#endif\\n\\\nattribute vec4 positionHighAndScaleX;\\n\\\nattribute vec4 positionLowAndScaleY;\\n\\\nattribute vec4 packedAttribute0;\\n\\\nattribute vec4 packedAttribute1;\\n\\\nattribute vec4 color;\\n\\\n\\n\\\nvarying vec2 v_offset;\\n\\\nvarying vec3 v_maximumSize;\\n\\\nvarying vec4 v_color;\\n\\\nvarying float v_slice;\\n\\\nvarying float v_brightness;\\n\\\n\\n\\\nvoid main() {\\n\\\n    // Unpack attributes.\\n\\\n    vec3 positionHigh = positionHighAndScaleX.xyz;\\n\\\n    vec3 positionLow = positionLowAndScaleY.xyz;\\n\\\n    vec2 scale = vec2(positionHighAndScaleX.w, positionLowAndScaleY.w);\\n\\\n\\n\\\n    float show = packedAttribute0.x;\\n\\\n    float brightness = packedAttribute0.y;\\n\\\n    vec2 coordinates = packedAttribute0.wz;\\n\\\n    vec3 maximumSize = packedAttribute1.xyz;\\n\\\n    float slice = packedAttribute1.w;\\n\\\n\\n\\\n#ifdef INSTANCED\\n\\\n    vec2 dir = direction;\\n\\\n#else\\n\\\n    vec2 dir = coordinates;\\n\\\n#endif\\n\\\n\\n\\\n    vec2 offset = dir - vec2(0.5, 0.5);\\n\\\n    vec2 scaledOffset = scale * offset;\\n\\\n    vec4 p = czm_translateRelativeToEye(positionHigh, positionLow);\\n\\\n    vec4 positionEC = czm_modelViewRelativeToEye * p;\\n\\\n    positionEC.xy += scaledOffset;\\n\\\n    \\n\\\n    positionEC.xyz *= show;\\n\\\n    gl_Position = czm_projection * positionEC;\\n\\\n\\n\\\n    v_offset = offset;\\n\\\n    v_maximumSize = maximumSize;\\n\\\n    v_color = color;\\n\\\n    v_slice = slice;\\n\\\n    v_brightness = brightness;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform vec3 u_noiseTextureDimensions;\\n\\\nuniform float u_noiseDetail;\\n\\\nuniform vec3 u_noiseOffset;\\n\\\nvarying vec2 v_position;\\n\\\n\\n\\\nfloat textureSliceWidth = u_noiseTextureDimensions.x;\\n\\\nfloat inverseNoiseTextureRows = u_noiseTextureDimensions.z;\\n\\\n\\n\\\nfloat wrap(float value, float rangeLength) {\\n\\\n    if(value < 0.0) {\\n\\\n        float absValue = abs(value);\\n\\\n        float modValue = mod(absValue, rangeLength);\\n\\\n        return mod(rangeLength - modValue, rangeLength);\\n\\\n    }\\n\\\n    return mod(value, rangeLength);\\n\\\n}\\n\\\n\\n\\\nvec3 wrapVec(vec3 value, float rangeLength) {\\n\\\n    return vec3(wrap(value.x, rangeLength),\\n\\\n                wrap(value.y, rangeLength),\\n\\\n                wrap(value.z, rangeLength));\\n\\\n}\\n\\\n\\n\\\nvec3 random3(vec3 p) {\\n\\\n    float dot1 = dot(p, vec3(127.1, 311.7, 932.8));\\n\\\n    float dot2 = dot(p, vec3(269.5, 183.3, 421.4));\\n\\\n    return fract(vec3(sin(dot1 - dot2), cos(dot1 * dot2), dot1 * dot2));\\n\\\n}\\n\\\n\\n\\\n// Frequency corresponds to cell size.\\n\\\n// The higher the frequency, the smaller the cell size.\\n\\\nvec3 getWorleyCellPoint(vec3 centerCell, vec3 offset, float freq) {\\n\\\n    vec3 cell = centerCell + offset;\\n\\\n    cell = wrapVec(cell, textureSliceWidth / u_noiseDetail);\\n\\\n    cell += floor(u_noiseOffset / u_noiseDetail);\\n\\\n    vec3 p = offset + random3(cell);\\n\\\n    return p;\\n\\\n}\\n\\\n\\n\\\nfloat worleyNoise(vec3 p, float freq) {\\n\\\n    vec3 centerCell = floor(p * freq);\\n\\\n    vec3 pointInCell = fract(p * freq);\\n\\\n    float shortestDistance = 1000.0;\\n\\\n\\n\\\n    for(float z = -1.0; z <= 1.0; z++) {\\n\\\n        for(float y = -1.0; y <= 1.0; y++) {\\n\\\n            for(float x = -1.0; x <= 1.0; x++) {\\n\\\n                vec3 offset = vec3(x, y, z);\\n\\\n                vec3 point = getWorleyCellPoint(centerCell, offset, freq);\\n\\\n\\n\\\n                float distance = length(pointInCell - point);\\n\\\n                if(distance < shortestDistance) {\\n\\\n                    shortestDistance = distance;\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    return shortestDistance;\\n\\\n}\\n\\\n\\n\\\nconst float MAX_FBM_ITERATIONS = 10.0;\\n\\\n\\n\\\nfloat worleyFBMNoise(vec3 p, float octaves, float scale) {\\n\\\n    float noise = 0.0;\\n\\\n    float freq = 1.0;\\n\\\n    float persistence = 0.625;\\n\\\n    for(float i = 0.0; i < MAX_FBM_ITERATIONS; i++) {\\n\\\n        if(i >= octaves) {\\n\\\n            break;\\n\\\n        }\\n\\\n\\n\\\n        noise += worleyNoise(p * scale, freq * scale) * persistence;\\n\\\n        persistence *= 0.5;\\n\\\n        freq *= 2.0;\\n\\\n    }\\n\\\n    return noise;\\n\\\n}\\n\\\n\\n\\\nvoid main() {\\n\\\n    float x = mod(v_position.x, textureSliceWidth);\\n\\\n    float y = mod(v_position.y, textureSliceWidth);\\n\\\n    float sliceRow = floor(v_position.y / textureSliceWidth);\\n\\\n    float z = floor(v_position.x / textureSliceWidth) + sliceRow * inverseNoiseTextureRows * textureSliceWidth;\\n\\\n\\n\\\n    vec3 position = vec3(x, y, z);\\n\\\n    position /= u_noiseDetail;\\n\\\n    float worley0 = clamp(worleyFBMNoise(position, 3.0, 1.0), 0.0, 1.0);\\n\\\n    float worley1 = clamp(worleyFBMNoise(position, 3.0, 2.0), 0.0, 1.0);\\n\\\n    float worley2 = clamp(worleyFBMNoise(position, 3.0, 3.0), 0.0, 1.0);\\n\\\n    gl_FragColor = vec4(worley0, worley1, worley2, 1.0);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform vec3 u_noiseTextureDimensions;\\n\\\nattribute vec2 position;\\n\\\n\\n\\\nvarying vec2 v_position;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    gl_Position = vec4(position, 0.1, 1.0);\\n\\\n\\n\\\n    float textureSliceWidth = u_noiseTextureDimensions.x;\\n\\\n    float noiseTextureRows = u_noiseTextureDimensions.y;\\n\\\n    float inverseNoiseTextureRows = u_noiseTextureDimensions.z;\\n\\\n    vec2 transformedPos = (position * 0.5) + vec2(0.5);\\n\\\n    transformedPos *= textureSliceWidth;\\n\\\n    transformedPos.x *= textureSliceWidth * inverseNoiseTextureRows;\\n\\\n    transformedPos.y *= noiseTextureRows;\\n\\\n    v_position = transformedPos;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D u_opaqueDepthTexture;\\n\\\nuniform sampler2D u_translucentDepthTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    float opaqueDepth = texture2D(u_opaqueDepthTexture, v_textureCoordinates).r;\\n\\\n    float translucentDepth = texture2D(u_translucentDepthTexture, v_textureCoordinates).r;\\n\\\n    translucentDepth = czm_branchFreeTernary(translucentDepth > opaqueDepth, 1.0, translucentDepth);\\n\\\n    gl_FragColor = czm_packDepth(translucentDepth);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Compositing for Weighted Blended Order-Independent Transparency. See:\\n\\\n * - http://jcgt.org/published/0002/02/09/\\n\\\n * - http://casual-effects.blogspot.com/2014/03/weighted-blended-order-independent.html\\n\\\n */\\n\\\n\\n\\\nuniform sampler2D u_opaque;\\n\\\nuniform sampler2D u_accumulation;\\n\\\nuniform sampler2D u_revealage;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 opaque = texture2D(u_opaque, v_textureCoordinates);\\n\\\n    vec4 accum = texture2D(u_accumulation, v_textureCoordinates);\\n\\\n    float r = texture2D(u_revealage, v_textureCoordinates).r;\\n\\\n\\n\\\n#ifdef MRT\\n\\\n    vec4 transparent = vec4(accum.rgb / clamp(r, 1e-4, 5e4), accum.a);\\n\\\n#else\\n\\\n    vec4 transparent = vec4(accum.rgb / clamp(accum.a, 1e-4, 5e4), r);\\n\\\n#endif\\n\\\n\\n\\\n    gl_FragColor = (1.0 - transparent.a) * transparent + transparent.a * opaque;\\n\\\n\\n\\\n    if (opaque != czm_backgroundColor)\\n\\\n    {\\n\\\n        gl_FragColor.a = 1.0;\\n\\\n    }\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec4 positionEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 position;\\n\\\n    vec3 direction;\\n\\\n    if (czm_orthographicIn3D == 1.0)\\n\\\n    {\\n\\\n        vec2 uv = (gl_FragCoord.xy -  czm_viewport.xy) / czm_viewport.zw;\\n\\\n        vec2 minPlane = vec2(czm_frustumPlanes.z, czm_frustumPlanes.y); // left, bottom\\n\\\n        vec2 maxPlane = vec2(czm_frustumPlanes.w, czm_frustumPlanes.x); // right, top\\n\\\n        position = vec3(mix(minPlane, maxPlane, uv), 0.0);\\n\\\n        direction = vec3(0.0, 0.0, -1.0);\\n\\\n    } \\n\\\n    else \\n\\\n    {\\n\\\n        position = vec3(0.0);\\n\\\n        direction = normalize(positionEC.xyz);\\n\\\n    }\\n\\\n\\n\\\n    czm_ray ray = czm_ray(position, direction);\\n\\\n\\n\\\n    vec3 ellipsoid_center = czm_view[3].xyz;\\n\\\n\\n\\\n    czm_raySegment intersection = czm_rayEllipsoidIntersectionInterval(ray, ellipsoid_center, czm_ellipsoidInverseRadii);\\n\\\n    if (!czm_isEmpty(intersection))\\n\\\n    {\\n\\\n        gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    czm_writeLogDepth();\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec4 position;\\n\\\n\\n\\\nvarying vec4 positionEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    positionEC = czm_modelView * position;\\n\\\n    gl_Position = czm_projection * positionEC;\\n\\\n\\n\\\n    czm_vertexLogDepth();\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef WRITE_DEPTH\\n\\\n#ifdef GL_EXT_frag_depth\\n\\\n#extension GL_EXT_frag_depth : enable\\n\\\n#endif\\n\\\n#endif\\n\\\n\\n\\\nuniform vec3 u_radii;\\n\\\nuniform vec3 u_oneOverEllipsoidRadiiSquared;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\n\\n\\\nvec4 computeEllipsoidColor(czm_ray ray, float intersection, float side)\\n\\\n{\\n\\\n    vec3 positionEC = czm_pointAlongRay(ray, intersection);\\n\\\n    vec3 positionMC = (czm_inverseModelView * vec4(positionEC, 1.0)).xyz;\\n\\\n    vec3 geodeticNormal = normalize(czm_geodeticSurfaceNormal(positionMC, vec3(0.0), u_oneOverEllipsoidRadiiSquared));\\n\\\n    vec3 sphericalNormal = normalize(positionMC / u_radii);\\n\\\n    vec3 normalMC = geodeticNormal * side;              // normalized surface normal (always facing the viewer) in model coordinates\\n\\\n    vec3 normalEC = normalize(czm_normal * normalMC);   // normalized surface normal in eye coordiantes\\n\\\n\\n\\\n    vec2 st = czm_ellipsoidWgs84TextureCoordinates(sphericalNormal);\\n\\\n    vec3 positionToEyeEC = -positionEC;\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.s = st.s;\\n\\\n    materialInput.st = st;\\n\\\n    materialInput.str = (positionMC + u_radii) / u_radii;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.tangentToEyeMatrix = czm_eastNorthUpToEyeCoordinates(positionMC, normalEC);\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef ONLY_SUN_LIGHTING\\n\\\n    return czm_private_phong(normalize(positionToEyeEC), material, czm_sunDirectionEC);\\n\\\n#else\\n\\\n    return czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\\n#endif\\n\\\n}\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    // PERFORMANCE_TODO: When dynamic branching is available, compute ratio of maximum and minimum radii\\n\\\n    // in the vertex shader. Only when it is larger than some constant, march along the ray.\\n\\\n    // Otherwise perform one intersection test which will be the common case.\\n\\\n\\n\\\n    // Test if the ray intersects a sphere with the ellipsoid's maximum radius.\\n\\\n    // For very oblate ellipsoids, using the ellipsoid's radii for an intersection test\\n\\\n    // may cause false negatives. This will discard fragments before marching the ray forward.\\n\\\n    float maxRadius = max(u_radii.x, max(u_radii.y, u_radii.z)) * 1.5;\\n\\\n    vec3 direction = normalize(v_positionEC);\\n\\\n    vec3 ellipsoidCenter = czm_modelView[3].xyz;\\n\\\n\\n\\\n    float t1 = -1.0;\\n\\\n    float t2 = -1.0;\\n\\\n\\n\\\n    float b = -2.0 * dot(direction, ellipsoidCenter);\\n\\\n    float c = dot(ellipsoidCenter, ellipsoidCenter) - maxRadius * maxRadius;\\n\\\n\\n\\\n    float discriminant = b * b - 4.0 * c;\\n\\\n    if (discriminant >= 0.0) {\\n\\\n        t1 = (-b - sqrt(discriminant)) * 0.5;\\n\\\n        t2 = (-b + sqrt(discriminant)) * 0.5;\\n\\\n    }\\n\\\n\\n\\\n    if (t1 < 0.0 && t2 < 0.0) {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    float t = min(t1, t2);\\n\\\n    if (t < 0.0) {\\n\\\n        t = 0.0;\\n\\\n    }\\n\\\n\\n\\\n    // March ray forward to intersection with larger sphere and find\\n\\\n    czm_ray ray = czm_ray(t * direction, direction);\\n\\\n\\n\\\n    vec3 ellipsoid_inverseRadii = vec3(1.0 / u_radii.x, 1.0 / u_radii.y, 1.0 / u_radii.z);\\n\\\n\\n\\\n    czm_raySegment intersection = czm_rayEllipsoidIntersectionInterval(ray, ellipsoidCenter, ellipsoid_inverseRadii);\\n\\\n\\n\\\n    if (czm_isEmpty(intersection))\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    // If the viewer is outside, compute outsideFaceColor, with normals facing outward.\\n\\\n    vec4 outsideFaceColor = (intersection.start != 0.0) ? computeEllipsoidColor(ray, intersection.start, 1.0) : vec4(0.0);\\n\\\n\\n\\\n    // If the viewer either is inside or can see inside, compute insideFaceColor, with normals facing inward.\\n\\\n    vec4 insideFaceColor = (outsideFaceColor.a < 1.0) ? computeEllipsoidColor(ray, intersection.stop, -1.0) : vec4(0.0);\\n\\\n\\n\\\n    gl_FragColor = mix(insideFaceColor, outsideFaceColor, outsideFaceColor.a);\\n\\\n    gl_FragColor.a = 1.0 - (1.0 - insideFaceColor.a) * (1.0 - outsideFaceColor.a);\\n\\\n\\n\\\n#ifdef WRITE_DEPTH\\n\\\n#ifdef GL_EXT_frag_depth\\n\\\n    t = (intersection.start != 0.0) ? intersection.start : intersection.stop;\\n\\\n    vec3 positionEC = czm_pointAlongRay(ray, t);\\n\\\n    vec4 positionCC = czm_projection * vec4(positionEC, 1.0);\\n\\\n#ifdef LOG_DEPTH\\n\\\n    czm_writeLogDepth(1.0 + positionCC.w);\\n\\\n#else\\n\\\n    float z = positionCC.z / positionCC.w;\\n\\\n\\n\\\n    float n = czm_depthRange.near;\\n\\\n    float f = czm_depthRange.far;\\n\\\n\\n\\\n    gl_FragDepthEXT = (z * (f - n) + f + n) * 0.5;\\n\\\n#endif\\n\\\n#endif\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position;\\n\\\n\\n\\\nuniform vec3 u_radii;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    // In the vertex data, the cube goes from (-1.0, -1.0, -1.0) to (1.0, 1.0, 1.0) in model coordinates.\\n\\\n    // Scale to consider the radii.  We could also do this once on the CPU when using the BoxGeometry,\\n\\\n    // but doing it here allows us to change the radii without rewriting the vertex data, and\\n\\\n    // allows all ellipsoids to reuse the same vertex data.\\n\\\n    vec4 p = vec4(u_radii * position, 1.0);\\n\\\n\\n\\\n    v_positionEC = (czm_modelView * p).xyz;     // position in eye coordinates\\n\\\n    gl_Position = czm_modelViewProjection * p;  // position in clip coordinates\\n\\\n\\n\\\n    // With multi-frustum, when the ellipsoid primitive is positioned on the intersection of two frustums\\n\\\n    // and close to terrain, the terrain (writes depth) in the closest frustum can overwrite part of the\\n\\\n    // ellipsoid (does not write depth) that was rendered in the farther frustum.\\n\\\n    //\\n\\\n    // Here, we clamp the depth in the vertex shader to avoid being overwritten; however, this creates\\n\\\n    // artifacts since some fragments can be alpha blended twice.  This is solved by only rendering\\n\\\n    // the ellipsoid in the closest frustum to the viewer.\\n\\\n    gl_Position.z = clamp(gl_Position.z, czm_depthRange.near, czm_depthRange.far);\\n\\\n\\n\\\n    czm_vertexLogDepth();\\n\\\n}\\n\\\n\";\n","/**\n * @license\n * Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *  * Neither the name of NVIDIA CORPORATION nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * @license\\n\\\n * Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\\n\\\n *\\n\\\n * Redistribution and use in source and binary forms, with or without\\n\\\n * modification, are permitted provided that the following conditions\\n\\\n * are met:\\n\\\n *  * Redistributions of source code must retain the above copyright\\n\\\n *    notice, this list of conditions and the following disclaimer.\\n\\\n *  * Redistributions in binary form must reproduce the above copyright\\n\\\n *    notice, this list of conditions and the following disclaimer in the\\n\\\n *    documentation and/or other materials provided with the distribution.\\n\\\n *  * Neither the name of NVIDIA CORPORATION nor the names of its\\n\\\n *    contributors may be used to endorse or promote products derived\\n\\\n *    from this software without specific prior written permission.\\n\\\n *\\n\\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\\n\\\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n\\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\\n\\\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\\n\\\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\\n\\\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\\n\\\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\\n\\\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\\n\\\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n\\\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n\\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\\n */\\n\\\n\\n\\\n// NVIDIA GameWorks Graphics Samples GitHub link: https://github.com/NVIDIAGameWorks/GraphicsSamples\\n\\\n// Original FXAA 3.11 shader link: https://github.com/NVIDIAGameWorks/GraphicsSamples/blob/master/samples/es3-kepler/FXAA/FXAA3_11.h\\n\\\n\\n\\\n// Steps used to integrate into Cesium:\\n\\\n// * The following defines are set:\\n\\\n//       #define FXAA_PC 1\\n\\\n//       #define FXAA_WEBGL_1 1\\n\\\n//       #define FXAA_GREEN_AS_LUMA 1\\n\\\n//       #define FXAA_EARLY_EXIT 1\\n\\\n//       #define FXAA_GLSL_120 1\\n\\\n// * All other preprocessor directives besides the FXAA_QUALITY__P* directives were removed.\\n\\\n// * Double underscores are invalid for preprocessor directives so replace them with a single underscore. Replace\\n\\\n//   /FXAA_QUALITY__P(.*)/g with /FXAA_QUALITY__P$1/.\\n\\\n// * There are no implicit conversions from ivec* to vec* so replace:\\n\\\n//       #define FxaaInt2 ivec2\\n\\\n//           with\\n\\\n//       #define FxaaInt2 vec2\\n\\\n// * The texture2DLod function is only available in vertex shaders so replace:\\n\\\n//       #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\\n\\\n//       #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\\n\\\n//           with\\n\\\n//       #define FxaaTexTop(t, p) texture2D(t, p)\\n\\\n//       #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r))\\n\\\n// * FXAA_QUALITY_PRESET is prepended in the javascript code. We may want to expose that setting in the future.\\n\\\n// * The following parameters to FxaaPixelShader are unused and can be removed:\\n\\\n//       fxaaConsolePosPos\\n\\\n//       fxaaConsoleRcpFrameOpt\\n\\\n//       fxaaConsoleRcpFrameOpt2\\n\\\n//       fxaaConsole360RcpFrameOpt2\\n\\\n//       fxaaConsoleEdgeSharpness\\n\\\n//       fxaaConsoleEdgeThreshold\\n\\\n//       fxaaConsoleEdgeThresholdMi\\n\\\n//       fxaaConsole360ConstDir\\n\\\n\\n\\\n//\\n\\\n// Choose the quality preset.\\n\\\n// This needs to be compiled into the shader as it effects code.\\n\\\n// Best option to include multiple presets is to\\n\\\n// in each shader define the preset, then include this file.\\n\\\n//\\n\\\n// OPTIONS\\n\\\n// -----------------------------------------------------------------------\\n\\\n// 10 to 15 - default medium dither (10=fastest, 15=highest quality)\\n\\\n// 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\\n\\\n// 39       - no dither, very expensive\\n\\\n//\\n\\\n// NOTES\\n\\\n// -----------------------------------------------------------------------\\n\\\n// 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\\n\\\n// 13 = about same speed as FXAA 3.9 and better than 12\\n\\\n// 23 = closest to FXAA 3.9 visually and performance wise\\n\\\n//  _ = the lowest digit is directly related to performance\\n\\\n// _  = the highest digit is directly related to style\\n\\\n//\\n\\\n//#define FXAA_QUALITY_PRESET 12\\n\\\n\\n\\\n\\n\\\n#if (FXAA_QUALITY_PRESET == 10)\\n\\\n    #define FXAA_QUALITY_PS 3\\n\\\n    #define FXAA_QUALITY_P0 1.5\\n\\\n    #define FXAA_QUALITY_P1 3.0\\n\\\n    #define FXAA_QUALITY_P2 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 11)\\n\\\n    #define FXAA_QUALITY_PS 4\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 3.0\\n\\\n    #define FXAA_QUALITY_P3 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 12)\\n\\\n    #define FXAA_QUALITY_PS 5\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 4.0\\n\\\n    #define FXAA_QUALITY_P4 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 13)\\n\\\n    #define FXAA_QUALITY_PS 6\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 4.0\\n\\\n    #define FXAA_QUALITY_P5 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 14)\\n\\\n    #define FXAA_QUALITY_PS 7\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 4.0\\n\\\n    #define FXAA_QUALITY_P6 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 15)\\n\\\n    #define FXAA_QUALITY_PS 8\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 4.0\\n\\\n    #define FXAA_QUALITY_P7 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 20)\\n\\\n    #define FXAA_QUALITY_PS 3\\n\\\n    #define FXAA_QUALITY_P0 1.5\\n\\\n    #define FXAA_QUALITY_P1 2.0\\n\\\n    #define FXAA_QUALITY_P2 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 21)\\n\\\n    #define FXAA_QUALITY_PS 4\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 22)\\n\\\n    #define FXAA_QUALITY_PS 5\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 23)\\n\\\n    #define FXAA_QUALITY_PS 6\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 24)\\n\\\n    #define FXAA_QUALITY_PS 7\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 3.0\\n\\\n    #define FXAA_QUALITY_P6 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 25)\\n\\\n    #define FXAA_QUALITY_PS 8\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 4.0\\n\\\n    #define FXAA_QUALITY_P7 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 26)\\n\\\n    #define FXAA_QUALITY_PS 9\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 2.0\\n\\\n    #define FXAA_QUALITY_P7 4.0\\n\\\n    #define FXAA_QUALITY_P8 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 27)\\n\\\n    #define FXAA_QUALITY_PS 10\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 2.0\\n\\\n    #define FXAA_QUALITY_P7 2.0\\n\\\n    #define FXAA_QUALITY_P8 4.0\\n\\\n    #define FXAA_QUALITY_P9 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 28)\\n\\\n    #define FXAA_QUALITY_PS 11\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 2.0\\n\\\n    #define FXAA_QUALITY_P7 2.0\\n\\\n    #define FXAA_QUALITY_P8 2.0\\n\\\n    #define FXAA_QUALITY_P9 4.0\\n\\\n    #define FXAA_QUALITY_P10 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 29)\\n\\\n    #define FXAA_QUALITY_PS 12\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 2.0\\n\\\n    #define FXAA_QUALITY_P7 2.0\\n\\\n    #define FXAA_QUALITY_P8 2.0\\n\\\n    #define FXAA_QUALITY_P9 2.0\\n\\\n    #define FXAA_QUALITY_P10 4.0\\n\\\n    #define FXAA_QUALITY_P11 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 39)\\n\\\n    #define FXAA_QUALITY_PS 12\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.0\\n\\\n    #define FXAA_QUALITY_P2 1.0\\n\\\n    #define FXAA_QUALITY_P3 1.0\\n\\\n    #define FXAA_QUALITY_P4 1.0\\n\\\n    #define FXAA_QUALITY_P5 1.5\\n\\\n    #define FXAA_QUALITY_P6 2.0\\n\\\n    #define FXAA_QUALITY_P7 2.0\\n\\\n    #define FXAA_QUALITY_P8 2.0\\n\\\n    #define FXAA_QUALITY_P9 2.0\\n\\\n    #define FXAA_QUALITY_P10 4.0\\n\\\n    #define FXAA_QUALITY_P11 8.0\\n\\\n#endif\\n\\\n\\n\\\n#define FxaaBool bool\\n\\\n#define FxaaFloat float\\n\\\n#define FxaaFloat2 vec2\\n\\\n#define FxaaFloat3 vec3\\n\\\n#define FxaaFloat4 vec4\\n\\\n#define FxaaHalf float\\n\\\n#define FxaaHalf2 vec2\\n\\\n#define FxaaHalf3 vec3\\n\\\n#define FxaaHalf4 vec4\\n\\\n#define FxaaInt2 vec2\\n\\\n#define FxaaTex sampler2D\\n\\\n\\n\\\n#define FxaaSat(x) clamp(x, 0.0, 1.0)\\n\\\n#define FxaaTexTop(t, p) texture2D(t, p)\\n\\\n#define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r))\\n\\\n\\n\\\nFxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\\n\\\n\\n\\\nFxaaFloat4 FxaaPixelShader(\\n\\\n    //\\n\\\n    // Use noperspective interpolation here (turn off perspective interpolation).\\n\\\n    // {xy} = center of pixel\\n\\\n    FxaaFloat2 pos,\\n\\\n    //\\n\\\n    // Input color texture.\\n\\\n    // {rgb_} = color in linear or perceptual color space\\n\\\n    // if (FXAA_GREEN_AS_LUMA == 0)\\n\\\n    //     {___a} = luma in perceptual color space (not linear)\\n\\\n    FxaaTex tex,\\n\\\n    //\\n\\\n    // Only used on FXAA Quality.\\n\\\n    // This must be from a constant/uniform.\\n\\\n    // {x_} = 1.0/screenWidthInPixels\\n\\\n    // {_y} = 1.0/screenHeightInPixels\\n\\\n    FxaaFloat2 fxaaQualityRcpFrame,\\n\\\n    //\\n\\\n    // Only used on FXAA Quality.\\n\\\n    // This used to be the FXAA_QUALITY_SUBPIX define.\\n\\\n    // It is here now to allow easier tuning.\\n\\\n    // Choose the amount of sub-pixel aliasing removal.\\n\\\n    // This can effect sharpness.\\n\\\n    //   1.00 - upper limit (softer)\\n\\\n    //   0.75 - default amount of filtering\\n\\\n    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\\n\\\n    //   0.25 - almost off\\n\\\n    //   0.00 - completely off\\n\\\n    FxaaFloat fxaaQualitySubpix,\\n\\\n    //\\n\\\n    // Only used on FXAA Quality.\\n\\\n    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\\n\\\n    // It is here now to allow easier tuning.\\n\\\n    // The minimum amount of local contrast required to apply algorithm.\\n\\\n    //   0.333 - too little (faster)\\n\\\n    //   0.250 - low quality\\n\\\n    //   0.166 - default\\n\\\n    //   0.125 - high quality\\n\\\n    //   0.063 - overkill (slower)\\n\\\n    FxaaFloat fxaaQualityEdgeThreshold,\\n\\\n    //\\n\\\n    // Only used on FXAA Quality.\\n\\\n    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\\n\\\n    // It is here now to allow easier tuning.\\n\\\n    // Trims the algorithm from processing darks.\\n\\\n    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\\n\\\n    //   0.0625 - high quality (faster)\\n\\\n    //   0.0312 - visible limit (slower)\\n\\\n    // Special notes when using FXAA_GREEN_AS_LUMA,\\n\\\n    //   Likely want to set this to zero.\\n\\\n    //   As colors that are mostly not-green\\n\\\n    //   will appear very dark in the green channel!\\n\\\n    //   Tune by looking at mostly non-green content,\\n\\\n    //   then start at zero and increase until aliasing is a problem.\\n\\\n    FxaaFloat fxaaQualityEdgeThresholdMin\\n\\\n) {\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat2 posM;\\n\\\n    posM.x = pos.x;\\n\\\n    posM.y = pos.y;\\n\\\n    FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\\n\\\n    #define lumaM rgbyM.y\\n\\\n    FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat maxSM = max(lumaS, lumaM);\\n\\\n    FxaaFloat minSM = min(lumaS, lumaM);\\n\\\n    FxaaFloat maxESM = max(lumaE, maxSM);\\n\\\n    FxaaFloat minESM = min(lumaE, minSM);\\n\\\n    FxaaFloat maxWN = max(lumaN, lumaW);\\n\\\n    FxaaFloat minWN = min(lumaN, lumaW);\\n\\\n    FxaaFloat rangeMax = max(maxWN, maxESM);\\n\\\n    FxaaFloat rangeMin = min(minWN, minESM);\\n\\\n    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\\n\\\n    FxaaFloat range = rangeMax - rangeMin;\\n\\\n    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\\n\\\n    FxaaBool earlyExit = range < rangeMaxClamped;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    if(earlyExit)\\n\\\n        return rgbyM;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat lumaNS = lumaN + lumaS;\\n\\\n    FxaaFloat lumaWE = lumaW + lumaE;\\n\\\n    FxaaFloat subpixRcpRange = 1.0/range;\\n\\\n    FxaaFloat subpixNSWE = lumaNS + lumaWE;\\n\\\n    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\\n\\\n    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat lumaNESE = lumaNE + lumaSE;\\n\\\n    FxaaFloat lumaNWNE = lumaNW + lumaNE;\\n\\\n    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\\n\\\n    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat lumaNWSW = lumaNW + lumaSW;\\n\\\n    FxaaFloat lumaSWSE = lumaSW + lumaSE;\\n\\\n    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\\n\\\n    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\\n\\\n    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\\n\\\n    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\\n\\\n    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\\n\\\n    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\\n\\\n    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\\n\\\n    FxaaBool horzSpan = edgeHorz >= edgeVert;\\n\\\n    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    if(!horzSpan) lumaN = lumaW;\\n\\\n    if(!horzSpan) lumaS = lumaE;\\n\\\n    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\\n\\\n    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat gradientN = lumaN - lumaM;\\n\\\n    FxaaFloat gradientS = lumaS - lumaM;\\n\\\n    FxaaFloat lumaNN = lumaN + lumaM;\\n\\\n    FxaaFloat lumaSS = lumaS + lumaM;\\n\\\n    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\\n\\\n    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\\n\\\n    if(pairN) lengthSign = -lengthSign;\\n\\\n    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat2 posB;\\n\\\n    posB.x = posM.x;\\n\\\n    posB.y = posM.y;\\n\\\n    FxaaFloat2 offNP;\\n\\\n    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\\n\\\n    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\\n\\\n    if(!horzSpan) posB.x += lengthSign * 0.5;\\n\\\n    if( horzSpan) posB.y += lengthSign * 0.5;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat2 posN;\\n\\\n    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\\n\\\n    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\\n\\\n    FxaaFloat2 posP;\\n\\\n    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\\n\\\n    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\\n\\\n    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\\n\\\n    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\\n\\\n    FxaaFloat subpixE = subpixC * subpixC;\\n\\\n    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    if(!pairN) lumaNN = lumaSS;\\n\\\n    FxaaFloat gradientScaled = gradient * 1.0/4.0;\\n\\\n    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\\n\\\n    FxaaFloat subpixF = subpixD * subpixE;\\n\\\n    FxaaBool lumaMLTZero = lumaMM < 0.0;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    lumaEndN -= lumaNN * 0.5;\\n\\\n    lumaEndP -= lumaNN * 0.5;\\n\\\n    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\\n\\\n    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\\n\\\n    FxaaBool doneNP = (!doneN) || (!doneP);\\n\\\n    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\\n\\\n    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    if(doneNP) {\\n\\\n        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n        doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n        doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\\n\\\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\\n\\\n        doneNP = (!doneN) || (!doneP);\\n\\\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\\n\\\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n        #if (FXAA_QUALITY_PS > 3)\\n\\\n        if(doneNP) {\\n\\\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n            doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n            doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\\n\\\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\\n\\\n            doneNP = (!doneN) || (!doneP);\\n\\\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\\n\\\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n            #if (FXAA_QUALITY_PS > 4)\\n\\\n            if(doneNP) {\\n\\\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\\n\\\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\\n\\\n                doneNP = (!doneN) || (!doneP);\\n\\\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\\n\\\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                #if (FXAA_QUALITY_PS > 5)\\n\\\n                if(doneNP) {\\n\\\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                    doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                    doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\\n\\\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\\n\\\n                    doneNP = (!doneN) || (!doneP);\\n\\\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\\n\\\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                    #if (FXAA_QUALITY_PS > 6)\\n\\\n                    if(doneNP) {\\n\\\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                        doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                        doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\\n\\\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\\n\\\n                        doneNP = (!doneN) || (!doneP);\\n\\\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\\n\\\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                        #if (FXAA_QUALITY_PS > 7)\\n\\\n                        if(doneNP) {\\n\\\n                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                            doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                            doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\\n\\\n                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\\n\\\n                            doneNP = (!doneN) || (!doneP);\\n\\\n                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\\n\\\n                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    #if (FXAA_QUALITY_PS > 8)\\n\\\n    if(doneNP) {\\n\\\n        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n        doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n        doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\\n\\\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\\n\\\n        doneNP = (!doneN) || (!doneP);\\n\\\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\\n\\\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n        #if (FXAA_QUALITY_PS > 9)\\n\\\n        if(doneNP) {\\n\\\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n            doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n            doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\\n\\\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\\n\\\n            doneNP = (!doneN) || (!doneP);\\n\\\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\\n\\\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n            #if (FXAA_QUALITY_PS > 10)\\n\\\n            if(doneNP) {\\n\\\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\\n\\\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\\n\\\n                doneNP = (!doneN) || (!doneP);\\n\\\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\\n\\\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                #if (FXAA_QUALITY_PS > 11)\\n\\\n                if(doneNP) {\\n\\\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                    doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                    doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\\n\\\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\\n\\\n                    doneNP = (!doneN) || (!doneP);\\n\\\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\\n\\\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                    #if (FXAA_QUALITY_PS > 12)\\n\\\n                    if(doneNP) {\\n\\\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                        doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                        doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\\n\\\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\\n\\\n                        doneNP = (!doneN) || (!doneP);\\n\\\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\\n\\\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                    }\\n\\\n                    #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                }\\n\\\n                #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n            }\\n\\\n            #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n        }\\n\\\n        #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    }\\n\\\n    #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                        }\\n\\\n                        #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                    }\\n\\\n                    #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                }\\n\\\n                #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n            }\\n\\\n            #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n        }\\n\\\n        #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    }\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat dstN = posM.x - posN.x;\\n\\\n    FxaaFloat dstP = posP.x - posM.x;\\n\\\n    if(!horzSpan) dstN = posM.y - posN.y;\\n\\\n    if(!horzSpan) dstP = posP.y - posM.y;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\\n\\\n    FxaaFloat spanLength = (dstP + dstN);\\n\\\n    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\\n\\\n    FxaaFloat spanLengthRcp = 1.0/spanLength;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaBool directionN = dstN < dstP;\\n\\\n    FxaaFloat dst = min(dstN, dstP);\\n\\\n    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\\n\\\n    FxaaFloat subpixG = subpixF * subpixF;\\n\\\n    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\\n\\\n    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\\n\\\n    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\\n\\\n    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\\n\\\n    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\\n\\\n    return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform vec4 u_initialColor;\\n\\\n\\n\\\n#if TEXTURE_UNITS > 0\\n\\\nuniform sampler2D u_dayTextures[TEXTURE_UNITS];\\n\\\nuniform vec4 u_dayTextureTranslationAndScale[TEXTURE_UNITS];\\n\\\nuniform bool u_dayTextureUseWebMercatorT[TEXTURE_UNITS];\\n\\\n\\n\\\n#ifdef APPLY_ALPHA\\n\\\nuniform float u_dayTextureAlpha[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_DAY_NIGHT_ALPHA\\n\\\nuniform float u_dayTextureNightAlpha[TEXTURE_UNITS];\\n\\\nuniform float u_dayTextureDayAlpha[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_SPLIT\\n\\\nuniform float u_dayTextureSplit[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_BRIGHTNESS\\n\\\nuniform float u_dayTextureBrightness[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_CONTRAST\\n\\\nuniform float u_dayTextureContrast[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_HUE\\n\\\nuniform float u_dayTextureHue[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_SATURATION\\n\\\nuniform float u_dayTextureSaturation[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_GAMMA\\n\\\nuniform float u_dayTextureOneOverGamma[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_IMAGERY_CUTOUT\\n\\\nuniform vec4 u_dayTextureCutoutRectangles[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_COLOR_TO_ALPHA\\n\\\nuniform vec4 u_colorsToAlpha[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\nuniform vec4 u_dayTextureTexCoordsRectangle[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef SHOW_REFLECTIVE_OCEAN\\n\\\nuniform sampler2D u_waterMask;\\n\\\nuniform vec4 u_waterMaskTranslationAndScale;\\n\\\nuniform float u_zoomedOutOceanSpecularIntensity;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef SHOW_OCEAN_WAVES\\n\\\nuniform sampler2D u_oceanNormalMap;\\n\\\n#endif\\n\\\n\\n\\\n#if defined(ENABLE_DAYNIGHT_SHADING) || defined(GROUND_ATMOSPHERE)\\n\\\nuniform vec2 u_lightingFadeDistance;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef TILE_LIMIT_RECTANGLE\\n\\\nuniform vec4 u_cartographicLimitRectangle;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef GROUND_ATMOSPHERE\\n\\\nuniform vec2 u_nightFadeDistance;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef ENABLE_CLIPPING_PLANES\\n\\\nuniform highp sampler2D u_clippingPlanes;\\n\\\nuniform mat4 u_clippingPlanesMatrix;\\n\\\nuniform vec4 u_clippingPlanesEdgeStyle;\\n\\\n#endif\\n\\\n\\n\\\n#if defined(GROUND_ATMOSPHERE) || defined(FOG) && defined(DYNAMIC_ATMOSPHERE_LIGHTING) && (defined(ENABLE_VERTEX_LIGHTING) || defined(ENABLE_DAYNIGHT_SHADING))\\n\\\nuniform float u_minimumBrightness;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef COLOR_CORRECT\\n\\\nuniform vec3 u_hsbShift; // Hue, saturation, brightness\\n\\\n#endif\\n\\\n\\n\\\n#ifdef HIGHLIGHT_FILL_TILE\\n\\\nuniform vec4 u_fillHighlightColor;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef TRANSLUCENT\\n\\\nuniform vec4 u_frontFaceAlphaByDistance;\\n\\\nuniform vec4 u_backFaceAlphaByDistance;\\n\\\nuniform vec4 u_translucencyRectangle;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef UNDERGROUND_COLOR\\n\\\nuniform vec4 u_undergroundColor;\\n\\\nuniform vec4 u_undergroundColorAlphaByDistance;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef ENABLE_VERTEX_LIGHTING\\n\\\nuniform float u_lambertDiffuseMultiplier;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec3 v_positionMC;\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec3 v_textureCoordinates;\\n\\\nvarying vec3 v_normalMC;\\n\\\nvarying vec3 v_normalEC;\\n\\\n\\n\\\n#ifdef APPLY_MATERIAL\\n\\\nvarying float v_height;\\n\\\nvarying float v_slope;\\n\\\nvarying float v_aspect;\\n\\\n#endif\\n\\\n\\n\\\n#if defined(FOG) || defined(GROUND_ATMOSPHERE) || defined(UNDERGROUND_COLOR) || defined(TRANSLUCENT)\\n\\\nvarying float v_distance;\\n\\\n#endif\\n\\\n\\n\\\n#if defined(GROUND_ATMOSPHERE) || defined(FOG)\\n\\\nvarying vec3 v_atmosphereRayleighColor;\\n\\\nvarying vec3 v_atmosphereMieColor;\\n\\\nvarying float v_atmosphereOpacity;\\n\\\n#endif\\n\\\n\\n\\\n#if defined(UNDERGROUND_COLOR) || defined(TRANSLUCENT)\\n\\\nfloat interpolateByDistance(vec4 nearFarScalar, float distance)\\n\\\n{\\n\\\n    float startDistance = nearFarScalar.x;\\n\\\n    float startValue = nearFarScalar.y;\\n\\\n    float endDistance = nearFarScalar.z;\\n\\\n    float endValue = nearFarScalar.w;\\n\\\n    float t = clamp((distance - startDistance) / (endDistance - startDistance), 0.0, 1.0);\\n\\\n    return mix(startValue, endValue, t);\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n#if defined(UNDERGROUND_COLOR) || defined(TRANSLUCENT) || defined(APPLY_MATERIAL)\\n\\\nvec4 alphaBlend(vec4 sourceColor, vec4 destinationColor)\\n\\\n{\\n\\\n    return sourceColor * vec4(sourceColor.aaa, 1.0) + destinationColor * (1.0 - sourceColor.a);\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n#ifdef TRANSLUCENT\\n\\\nbool inTranslucencyRectangle()\\n\\\n{\\n\\\n    return\\n\\\n        v_textureCoordinates.x > u_translucencyRectangle.x &&\\n\\\n        v_textureCoordinates.x < u_translucencyRectangle.z &&\\n\\\n        v_textureCoordinates.y > u_translucencyRectangle.y &&\\n\\\n        v_textureCoordinates.y < u_translucencyRectangle.w;\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\nvec4 sampleAndBlend(\\n\\\n    vec4 previousColor,\\n\\\n    sampler2D textureToSample,\\n\\\n    vec2 tileTextureCoordinates,\\n\\\n    vec4 textureCoordinateRectangle,\\n\\\n    vec4 textureCoordinateTranslationAndScale,\\n\\\n    float textureAlpha,\\n\\\n    float textureNightAlpha,\\n\\\n    float textureDayAlpha,\\n\\\n    float textureBrightness,\\n\\\n    float textureContrast,\\n\\\n    float textureHue,\\n\\\n    float textureSaturation,\\n\\\n    float textureOneOverGamma,\\n\\\n    float split,\\n\\\n    vec4 colorToAlpha,\\n\\\n    float nightBlend)\\n\\\n{\\n\\\n    // This crazy step stuff sets the alpha to 0.0 if this following condition is true:\\n\\\n    //    tileTextureCoordinates.s < textureCoordinateRectangle.s ||\\n\\\n    //    tileTextureCoordinates.s > textureCoordinateRectangle.p ||\\n\\\n    //    tileTextureCoordinates.t < textureCoordinateRectangle.t ||\\n\\\n    //    tileTextureCoordinates.t > textureCoordinateRectangle.q\\n\\\n    // In other words, the alpha is zero if the fragment is outside the rectangle\\n\\\n    // covered by this texture.  Would an actual 'if' yield better performance?\\n\\\n    vec2 alphaMultiplier = step(textureCoordinateRectangle.st, tileTextureCoordinates);\\n\\\n    textureAlpha = textureAlpha * alphaMultiplier.x * alphaMultiplier.y;\\n\\\n\\n\\\n    alphaMultiplier = step(vec2(0.0), textureCoordinateRectangle.pq - tileTextureCoordinates);\\n\\\n    textureAlpha = textureAlpha * alphaMultiplier.x * alphaMultiplier.y;\\n\\\n\\n\\\n#if defined(APPLY_DAY_NIGHT_ALPHA) && defined(ENABLE_DAYNIGHT_SHADING)\\n\\\n    textureAlpha *= mix(textureDayAlpha, textureNightAlpha, nightBlend);\\n\\\n#endif\\n\\\n\\n\\\n    vec2 translation = textureCoordinateTranslationAndScale.xy;\\n\\\n    vec2 scale = textureCoordinateTranslationAndScale.zw;\\n\\\n    vec2 textureCoordinates = tileTextureCoordinates * scale + translation;\\n\\\n    vec4 value = texture2D(textureToSample, textureCoordinates);\\n\\\n    vec3 color = value.rgb;\\n\\\n    float alpha = value.a;\\n\\\n\\n\\\n#ifdef APPLY_COLOR_TO_ALPHA\\n\\\n    vec3 colorDiff = abs(color.rgb - colorToAlpha.rgb);\\n\\\n    colorDiff.r = max(max(colorDiff.r, colorDiff.g), colorDiff.b);\\n\\\n    alpha = czm_branchFreeTernary(colorDiff.r < colorToAlpha.a, 0.0, alpha);\\n\\\n#endif\\n\\\n\\n\\\n#if !defined(APPLY_GAMMA)\\n\\\n    vec4 tempColor = czm_gammaCorrect(vec4(color, alpha));\\n\\\n    color = tempColor.rgb;\\n\\\n    alpha = tempColor.a;\\n\\\n#else\\n\\\n    color = pow(color, vec3(textureOneOverGamma));\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_SPLIT\\n\\\n    float splitPosition = czm_splitPosition;\\n\\\n    // Split to the left\\n\\\n    if (split < 0.0 && gl_FragCoord.x > splitPosition) {\\n\\\n       alpha = 0.0;\\n\\\n    }\\n\\\n    // Split to the right\\n\\\n    else if (split > 0.0 && gl_FragCoord.x < splitPosition) {\\n\\\n       alpha = 0.0;\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_BRIGHTNESS\\n\\\n    color = mix(vec3(0.0), color, textureBrightness);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_CONTRAST\\n\\\n    color = mix(vec3(0.5), color, textureContrast);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_HUE\\n\\\n    color = czm_hue(color, textureHue);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_SATURATION\\n\\\n    color = czm_saturation(color, textureSaturation);\\n\\\n#endif\\n\\\n\\n\\\n    float sourceAlpha = alpha * textureAlpha;\\n\\\n    float outAlpha = mix(previousColor.a, 1.0, sourceAlpha);\\n\\\n    outAlpha += sign(outAlpha) - 1.0;\\n\\\n\\n\\\n    vec3 outColor = mix(previousColor.rgb * previousColor.a, color, sourceAlpha) / outAlpha;\\n\\\n\\n\\\n    // When rendering imagery for a tile in multiple passes,\\n\\\n    // some GPU/WebGL implementation combinations will not blend fragments in\\n\\\n    // additional passes correctly if their computation includes an unmasked\\n\\\n    // divide-by-zero operation,\\n\\\n    // even if it's not in the output or if the output has alpha zero.\\n\\\n    //\\n\\\n    // For example, without sanitization for outAlpha,\\n\\\n    // this renders without artifacts:\\n\\\n    //   if (outAlpha == 0.0) { outColor = vec3(0.0); }\\n\\\n    //\\n\\\n    // but using czm_branchFreeTernary will cause portions of the tile that are\\n\\\n    // alpha-zero in the additional pass to render as black instead of blending\\n\\\n    // with the previous pass:\\n\\\n    //   outColor = czm_branchFreeTernary(outAlpha == 0.0, vec3(0.0), outColor);\\n\\\n    //\\n\\\n    // So instead, sanitize against divide-by-zero,\\n\\\n    // store this state on the sign of outAlpha, and correct on return.\\n\\\n\\n\\\n    return vec4(outColor, max(outAlpha, 0.0));\\n\\\n}\\n\\\n\\n\\\nvec3 colorCorrect(vec3 rgb) {\\n\\\n#ifdef COLOR_CORRECT\\n\\\n    // Convert rgb color to hsb\\n\\\n    vec3 hsb = czm_RGBToHSB(rgb);\\n\\\n    // Perform hsb shift\\n\\\n    hsb.x += u_hsbShift.x; // hue\\n\\\n    hsb.y = clamp(hsb.y + u_hsbShift.y, 0.0, 1.0); // saturation\\n\\\n    hsb.z = hsb.z > czm_epsilon7 ? hsb.z + u_hsbShift.z : 0.0; // brightness\\n\\\n    // Convert shifted hsb back to rgb\\n\\\n    rgb = czm_HSBToRGB(hsb);\\n\\\n#endif\\n\\\n    return rgb;\\n\\\n}\\n\\\n\\n\\\nvec4 computeDayColor(vec4 initialColor, vec3 textureCoordinates, float nightBlend);\\n\\\nvec4 computeWaterColor(vec3 positionEyeCoordinates, vec2 textureCoordinates, mat3 enuToEye, vec4 imageryColor, float specularMapValue, float fade);\\n\\\n\\n\\\nconst float fExposure = 2.0;\\n\\\n\\n\\\nvec3 computeEllipsoidPosition()\\n\\\n{\\n\\\n    float mpp = czm_metersPerPixel(vec4(0.0, 0.0, -czm_currentFrustum.x, 1.0), 1.0);\\n\\\n    vec2 xy = gl_FragCoord.xy / czm_viewport.zw * 2.0 - vec2(1.0);\\n\\\n    xy *= czm_viewport.zw * mpp * 0.5;\\n\\\n\\n\\\n    vec3 direction = normalize(vec3(xy, -czm_currentFrustum.x));\\n\\\n    czm_ray ray = czm_ray(vec3(0.0), direction);\\n\\\n\\n\\\n    vec3 ellipsoid_center = czm_view[3].xyz;\\n\\\n\\n\\\n    czm_raySegment intersection = czm_rayEllipsoidIntersectionInterval(ray, ellipsoid_center, czm_ellipsoidInverseRadii);\\n\\\n\\n\\\n    vec3 ellipsoidPosition = czm_pointAlongRay(ray, intersection.start);\\n\\\n    return (czm_inverseView * vec4(ellipsoidPosition, 1.0)).xyz;\\n\\\n}\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n#ifdef TILE_LIMIT_RECTANGLE\\n\\\n    if (v_textureCoordinates.x < u_cartographicLimitRectangle.x || u_cartographicLimitRectangle.z < v_textureCoordinates.x ||\\n\\\n        v_textureCoordinates.y < u_cartographicLimitRectangle.y || u_cartographicLimitRectangle.w < v_textureCoordinates.y)\\n\\\n        {\\n\\\n            discard;\\n\\\n        }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef ENABLE_CLIPPING_PLANES\\n\\\n    float clipDistance = clip(gl_FragCoord, u_clippingPlanes, u_clippingPlanesMatrix);\\n\\\n#endif\\n\\\n\\n\\\n#if defined(SHOW_REFLECTIVE_OCEAN) || defined(ENABLE_DAYNIGHT_SHADING) || defined(HDR)\\n\\\n    vec3 normalMC = czm_geodeticSurfaceNormal(v_positionMC, vec3(0.0), vec3(1.0));   // normalized surface normal in model coordinates\\n\\\n    vec3 normalEC = czm_normal3D * normalMC;                                         // normalized surface normal in eye coordiantes\\n\\\n#endif\\n\\\n\\n\\\n#if defined(APPLY_DAY_NIGHT_ALPHA) && defined(ENABLE_DAYNIGHT_SHADING)\\n\\\n    float nightBlend = 1.0 - clamp(czm_getLambertDiffuse(czm_lightDirectionEC, normalEC) * 5.0, 0.0, 1.0);\\n\\\n#else\\n\\\n    float nightBlend = 0.0;\\n\\\n#endif\\n\\\n\\n\\\n    // The clamp below works around an apparent bug in Chrome Canary v23.0.1241.0\\n\\\n    // where the fragment shader sees textures coordinates < 0.0 and > 1.0 for the\\n\\\n    // fragments on the edges of tiles even though the vertex shader is outputting\\n\\\n    // coordinates strictly in the 0-1 range.\\n\\\n    vec4 color = computeDayColor(u_initialColor, clamp(v_textureCoordinates, 0.0, 1.0), nightBlend);\\n\\\n\\n\\\n#ifdef SHOW_TILE_BOUNDARIES\\n\\\n    if (v_textureCoordinates.x < (1.0/256.0) || v_textureCoordinates.x > (255.0/256.0) ||\\n\\\n        v_textureCoordinates.y < (1.0/256.0) || v_textureCoordinates.y > (255.0/256.0))\\n\\\n    {\\n\\\n        color = vec4(1.0, 0.0, 0.0, 1.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#if defined(ENABLE_DAYNIGHT_SHADING) || defined(GROUND_ATMOSPHERE)\\n\\\n    float cameraDist;\\n\\\n    if (czm_sceneMode == czm_sceneMode2D)\\n\\\n    {\\n\\\n        cameraDist = max(czm_frustumPlanes.x - czm_frustumPlanes.y, czm_frustumPlanes.w - czm_frustumPlanes.z) * 0.5;\\n\\\n    }\\n\\\n    else if (czm_sceneMode == czm_sceneModeColumbusView)\\n\\\n    {\\n\\\n        cameraDist = -czm_view[3].z;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        cameraDist = length(czm_view[3]);\\n\\\n    }\\n\\\n    float fadeOutDist = u_lightingFadeDistance.x;\\n\\\n    float fadeInDist = u_lightingFadeDistance.y;\\n\\\n    if (czm_sceneMode != czm_sceneMode3D) {\\n\\\n        vec3 radii = czm_ellipsoidRadii;\\n\\\n        float maxRadii = max(radii.x, max(radii.y, radii.z));\\n\\\n        fadeOutDist -= maxRadii;\\n\\\n        fadeInDist -= maxRadii;\\n\\\n    }\\n\\\n    float fade = clamp((cameraDist - fadeOutDist) / (fadeInDist - fadeOutDist), 0.0, 1.0);\\n\\\n#else\\n\\\n    float fade = 0.0;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef SHOW_REFLECTIVE_OCEAN\\n\\\n    vec2 waterMaskTranslation = u_waterMaskTranslationAndScale.xy;\\n\\\n    vec2 waterMaskScale = u_waterMaskTranslationAndScale.zw;\\n\\\n    vec2 waterMaskTextureCoordinates = v_textureCoordinates.xy * waterMaskScale + waterMaskTranslation;\\n\\\n    waterMaskTextureCoordinates.y = 1.0 - waterMaskTextureCoordinates.y;\\n\\\n\\n\\\n    float mask = texture2D(u_waterMask, waterMaskTextureCoordinates).r;\\n\\\n\\n\\\n    if (mask > 0.0)\\n\\\n    {\\n\\\n        mat3 enuToEye = czm_eastNorthUpToEyeCoordinates(v_positionMC, normalEC);\\n\\\n\\n\\\n        vec2 ellipsoidTextureCoordinates = czm_ellipsoidWgs84TextureCoordinates(normalMC);\\n\\\n        vec2 ellipsoidFlippedTextureCoordinates = czm_ellipsoidWgs84TextureCoordinates(normalMC.zyx);\\n\\\n\\n\\\n        vec2 textureCoordinates = mix(ellipsoidTextureCoordinates, ellipsoidFlippedTextureCoordinates, czm_morphTime * smoothstep(0.9, 0.95, normalMC.z));\\n\\\n\\n\\\n        color = computeWaterColor(v_positionEC, textureCoordinates, enuToEye, color, mask, fade);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_MATERIAL\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.st = v_textureCoordinates.st;\\n\\\n    materialInput.normalEC = normalize(v_normalEC);\\n\\\n    materialInput.positionToEyeEC = -v_positionEC;\\n\\\n    materialInput.tangentToEyeMatrix = czm_eastNorthUpToEyeCoordinates(v_positionMC, normalize(v_normalEC));     \\n\\\n    materialInput.slope = v_slope;\\n\\\n    materialInput.height = v_height;\\n\\\n    materialInput.aspect = v_aspect;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n    vec4 materialColor = vec4(material.diffuse, material.alpha);\\n\\\n    color = alphaBlend(materialColor, color);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef ENABLE_VERTEX_LIGHTING\\n\\\n    float diffuseIntensity = clamp(czm_getLambertDiffuse(czm_lightDirectionEC, normalize(v_normalEC)) * u_lambertDiffuseMultiplier + 0.3, 0.0, 1.0);\\n\\\n    vec4 finalColor = vec4(color.rgb * czm_lightColor * diffuseIntensity, color.a);\\n\\\n#elif defined(ENABLE_DAYNIGHT_SHADING)\\n\\\n    float diffuseIntensity = clamp(czm_getLambertDiffuse(czm_lightDirectionEC, normalEC) * 5.0 + 0.3, 0.0, 1.0);\\n\\\n    diffuseIntensity = mix(1.0, diffuseIntensity, fade);\\n\\\n    vec4 finalColor = vec4(color.rgb * czm_lightColor * diffuseIntensity, color.a);\\n\\\n#else\\n\\\n    vec4 finalColor = color;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef ENABLE_CLIPPING_PLANES\\n\\\n    vec4 clippingPlanesEdgeColor = vec4(1.0);\\n\\\n    clippingPlanesEdgeColor.rgb = u_clippingPlanesEdgeStyle.rgb;\\n\\\n    float clippingPlanesEdgeWidth = u_clippingPlanesEdgeStyle.a;\\n\\\n\\n\\\n    if (clipDistance < clippingPlanesEdgeWidth)\\n\\\n    {\\n\\\n        finalColor = clippingPlanesEdgeColor;\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef HIGHLIGHT_FILL_TILE\\n\\\n    finalColor = vec4(mix(finalColor.rgb, u_fillHighlightColor.rgb, u_fillHighlightColor.a), finalColor.a);\\n\\\n#endif\\n\\\n\\n\\\n#if defined(DYNAMIC_ATMOSPHERE_LIGHTING_FROM_SUN)\\n\\\n    vec3 atmosphereLightDirection = czm_sunDirectionWC;\\n\\\n#else\\n\\\n    vec3 atmosphereLightDirection = czm_lightDirectionWC;\\n\\\n#endif\\n\\\n\\n\\\n#if defined(GROUND_ATMOSPHERE) || defined(FOG)\\n\\\n    if (!czm_backFacing())\\n\\\n    {\\n\\\n        bool dynamicLighting = false;\\n\\\n        #if defined(DYNAMIC_ATMOSPHERE_LIGHTING) && (defined(ENABLE_DAYNIGHT_SHADING) || defined(ENABLE_VERTEX_LIGHTING))\\n\\\n            dynamicLighting = true;     \\n\\\n        #endif\\n\\\n\\n\\\n        vec3 rayleighColor;\\n\\\n        vec3 mieColor;\\n\\\n        float opacity;\\n\\\n\\n\\\n        vec3 positionWC;\\n\\\n        vec3 lightDirection;\\n\\\n\\n\\\n        // When the camera is far away (camera distance > nightFadeOutDistance), the scattering is computed in the fragment shader.\\n\\\n        // Otherwise, the scattering is computed in the vertex shader.\\n\\\n        #ifdef PER_FRAGMENT_GROUND_ATMOSPHERE\\n\\\n            positionWC = computeEllipsoidPosition();\\n\\\n            lightDirection = czm_branchFreeTernary(dynamicLighting, atmosphereLightDirection, normalize(positionWC));\\n\\\n            computeAtmosphereScattering(\\n\\\n                positionWC,\\n\\\n                lightDirection,\\n\\\n                rayleighColor,\\n\\\n                mieColor,\\n\\\n                opacity\\n\\\n            );\\n\\\n        #else\\n\\\n            positionWC = v_positionMC;\\n\\\n            lightDirection = czm_branchFreeTernary(dynamicLighting, atmosphereLightDirection, normalize(positionWC));\\n\\\n            rayleighColor = v_atmosphereRayleighColor;\\n\\\n            mieColor = v_atmosphereMieColor;\\n\\\n            opacity = v_atmosphereOpacity;\\n\\\n        #endif\\n\\\n\\n\\\n        rayleighColor = colorCorrect(rayleighColor);\\n\\\n        mieColor = colorCorrect(mieColor);\\n\\\n\\n\\\n        vec4 groundAtmosphereColor = computeAtmosphereColor(positionWC, lightDirection, rayleighColor, mieColor, opacity);\\n\\\n\\n\\\n        // Fog is applied to tiles selected for fog, close to the Earth.\\n\\\n        #ifdef FOG\\n\\\n            vec3 fogColor = groundAtmosphereColor.rgb;\\n\\\n            \\n\\\n            // If there is lighting, apply that to the fog.\\n\\\n            #if defined(DYNAMIC_ATMOSPHERE_LIGHTING) && (defined(ENABLE_VERTEX_LIGHTING) || defined(ENABLE_DAYNIGHT_SHADING))\\n\\\n                float darken = clamp(dot(normalize(czm_viewerPositionWC), atmosphereLightDirection), u_minimumBrightness, 1.0);\\n\\\n                fogColor *= darken;                \\n\\\n            #endif\\n\\\n\\n\\\n            #ifndef HDR\\n\\\n                fogColor.rgb = czm_acesTonemapping(fogColor.rgb);\\n\\\n                fogColor.rgb = czm_inverseGamma(fogColor.rgb);\\n\\\n            #endif\\n\\\n            \\n\\\n            const float modifier = 0.15;\\n\\\n            finalColor = vec4(czm_fog(v_distance, finalColor.rgb, fogColor.rgb, modifier), finalColor.a);\\n\\\n\\n\\\n        #else\\n\\\n            // The transmittance is based on optical depth i.e. the length of segment of the ray inside the atmosphere.\\n\\\n            // This value is larger near the \\\"circumference\\\", as it is further away from the camera. We use it to\\n\\\n            // brighten up that area of the ground atmosphere.\\n\\\n            const float transmittanceModifier = 0.5;\\n\\\n            float transmittance = transmittanceModifier + clamp(1.0 - groundAtmosphereColor.a, 0.0, 1.0);\\n\\\n\\n\\\n            vec3 finalAtmosphereColor = finalColor.rgb + groundAtmosphereColor.rgb * transmittance;\\n\\\n\\n\\\n            #if defined(DYNAMIC_ATMOSPHERE_LIGHTING) && (defined(ENABLE_VERTEX_LIGHTING) || defined(ENABLE_DAYNIGHT_SHADING))\\n\\\n                float fadeInDist = u_nightFadeDistance.x;\\n\\\n                float fadeOutDist = u_nightFadeDistance.y;\\n\\\n            \\n\\\n                float sunlitAtmosphereIntensity = clamp((cameraDist - fadeOutDist) / (fadeInDist - fadeOutDist), 0.05, 1.0);\\n\\\n                float darken = clamp(dot(normalize(positionWC), atmosphereLightDirection), 0.0, 1.0);\\n\\\n                vec3 darkenendGroundAtmosphereColor = mix(groundAtmosphereColor.rgb, finalAtmosphereColor.rgb, darken);\\n\\\n\\n\\\n                finalAtmosphereColor = mix(darkenendGroundAtmosphereColor, finalAtmosphereColor, sunlitAtmosphereIntensity);\\n\\\n            #endif\\n\\\n            \\n\\\n            #ifndef HDR\\n\\\n                finalAtmosphereColor.rgb = vec3(1.0) - exp(-fExposure * finalAtmosphereColor.rgb);\\n\\\n            #else\\n\\\n                finalAtmosphereColor.rgb = czm_saturation(finalAtmosphereColor.rgb, 1.6);\\n\\\n            #endif\\n\\\n            \\n\\\n            finalColor.rgb = mix(finalColor.rgb, finalAtmosphereColor.rgb, fade);\\n\\\n        #endif\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef UNDERGROUND_COLOR\\n\\\n    if (czm_backFacing())\\n\\\n    {\\n\\\n        float distanceFromEllipsoid = max(czm_eyeHeight, 0.0);\\n\\\n        float distance = max(v_distance - distanceFromEllipsoid, 0.0);\\n\\\n        float blendAmount = interpolateByDistance(u_undergroundColorAlphaByDistance, distance);\\n\\\n        vec4 undergroundColor = vec4(u_undergroundColor.rgb, u_undergroundColor.a * blendAmount);\\n\\\n        finalColor = alphaBlend(undergroundColor, finalColor);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef TRANSLUCENT\\n\\\n    if (inTranslucencyRectangle())\\n\\\n    {\\n\\\n      vec4 alphaByDistance = gl_FrontFacing ? u_frontFaceAlphaByDistance : u_backFaceAlphaByDistance;\\n\\\n      finalColor.a *= interpolateByDistance(alphaByDistance, v_distance);\\n\\\n    }\\n\\\n#endif\\n\\\n    \\n\\\n    gl_FragColor =  finalColor;\\n\\\n}\\n\\\n\\n\\\n\\n\\\n#ifdef SHOW_REFLECTIVE_OCEAN\\n\\\n\\n\\\nfloat waveFade(float edge0, float edge1, float x)\\n\\\n{\\n\\\n    float y = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\\n\\\n    return pow(1.0 - y, 5.0);\\n\\\n}\\n\\\n\\n\\\nfloat linearFade(float edge0, float edge1, float x)\\n\\\n{\\n\\\n    return clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\\n\\\n}\\n\\\n\\n\\\n// Based on water rendering by Jonas Wagner:\\n\\\n// http://29a.ch/2012/7/19/webgl-terrain-rendering-water-fog\\n\\\n\\n\\\n// low altitude wave settings\\n\\\nconst float oceanFrequencyLowAltitude = 825000.0;\\n\\\nconst float oceanAnimationSpeedLowAltitude = 0.004;\\n\\\nconst float oceanOneOverAmplitudeLowAltitude = 1.0 / 2.0;\\n\\\nconst float oceanSpecularIntensity = 0.5;\\n\\\n\\n\\\n// high altitude wave settings\\n\\\nconst float oceanFrequencyHighAltitude = 125000.0;\\n\\\nconst float oceanAnimationSpeedHighAltitude = 0.008;\\n\\\nconst float oceanOneOverAmplitudeHighAltitude = 1.0 / 2.0;\\n\\\n\\n\\\nvec4 computeWaterColor(vec3 positionEyeCoordinates, vec2 textureCoordinates, mat3 enuToEye, vec4 imageryColor, float maskValue, float fade)\\n\\\n{\\n\\\n    vec3 positionToEyeEC = -positionEyeCoordinates;\\n\\\n    float positionToEyeECLength = length(positionToEyeEC);\\n\\\n\\n\\\n    // The double normalize below works around a bug in Firefox on Android devices.\\n\\\n    vec3 normalizedPositionToEyeEC = normalize(normalize(positionToEyeEC));\\n\\\n\\n\\\n    // Fade out the waves as the camera moves far from the surface.\\n\\\n    float waveIntensity = waveFade(70000.0, 1000000.0, positionToEyeECLength);\\n\\\n\\n\\\n#ifdef SHOW_OCEAN_WAVES\\n\\\n    // high altitude waves\\n\\\n    float time = czm_frameNumber * oceanAnimationSpeedHighAltitude;\\n\\\n    vec4 noise = czm_getWaterNoise(u_oceanNormalMap, textureCoordinates * oceanFrequencyHighAltitude, time, 0.0);\\n\\\n    vec3 normalTangentSpaceHighAltitude = vec3(noise.xy, noise.z * oceanOneOverAmplitudeHighAltitude);\\n\\\n\\n\\\n    // low altitude waves\\n\\\n    time = czm_frameNumber * oceanAnimationSpeedLowAltitude;\\n\\\n    noise = czm_getWaterNoise(u_oceanNormalMap, textureCoordinates * oceanFrequencyLowAltitude, time, 0.0);\\n\\\n    vec3 normalTangentSpaceLowAltitude = vec3(noise.xy, noise.z * oceanOneOverAmplitudeLowAltitude);\\n\\\n\\n\\\n    // blend the 2 wave layers based on distance to surface\\n\\\n    float highAltitudeFade = linearFade(0.0, 60000.0, positionToEyeECLength);\\n\\\n    float lowAltitudeFade = 1.0 - linearFade(20000.0, 60000.0, positionToEyeECLength);\\n\\\n    vec3 normalTangentSpace =\\n\\\n        (highAltitudeFade * normalTangentSpaceHighAltitude) +\\n\\\n        (lowAltitudeFade * normalTangentSpaceLowAltitude);\\n\\\n    normalTangentSpace = normalize(normalTangentSpace);\\n\\\n\\n\\\n    // fade out the normal perturbation as we move farther from the water surface\\n\\\n    normalTangentSpace.xy *= waveIntensity;\\n\\\n    normalTangentSpace = normalize(normalTangentSpace);\\n\\\n#else\\n\\\n    vec3 normalTangentSpace = vec3(0.0, 0.0, 1.0);\\n\\\n#endif\\n\\\n\\n\\\n    vec3 normalEC = enuToEye * normalTangentSpace;\\n\\\n\\n\\\n    const vec3 waveHighlightColor = vec3(0.3, 0.45, 0.6);\\n\\\n\\n\\\n    // Use diffuse light to highlight the waves\\n\\\n    float diffuseIntensity = czm_getLambertDiffuse(czm_lightDirectionEC, normalEC) * maskValue;\\n\\\n    vec3 diffuseHighlight = waveHighlightColor * diffuseIntensity * (1.0 - fade);\\n\\\n\\n\\\n#ifdef SHOW_OCEAN_WAVES\\n\\\n    // Where diffuse light is low or non-existent, use wave highlights based solely on\\n\\\n    // the wave bumpiness and no particular light direction.\\n\\\n    float tsPerturbationRatio = normalTangentSpace.z;\\n\\\n    vec3 nonDiffuseHighlight = mix(waveHighlightColor * 5.0 * (1.0 - tsPerturbationRatio), vec3(0.0), diffuseIntensity);\\n\\\n#else\\n\\\n    vec3 nonDiffuseHighlight = vec3(0.0);\\n\\\n#endif\\n\\\n\\n\\\n    // Add specular highlights in 3D, and in all modes when zoomed in.\\n\\\n    float specularIntensity = czm_getSpecular(czm_lightDirectionEC, normalizedPositionToEyeEC, normalEC, 10.0);\\n\\\n    float surfaceReflectance = mix(0.0, mix(u_zoomedOutOceanSpecularIntensity, oceanSpecularIntensity, waveIntensity), maskValue);\\n\\\n    float specular = specularIntensity * surfaceReflectance;\\n\\\n\\n\\\n#ifdef HDR\\n\\\n    specular *= 1.4;\\n\\\n\\n\\\n    float e = 0.2;\\n\\\n    float d = 3.3;\\n\\\n    float c = 1.7;\\n\\\n\\n\\\n    vec3 color = imageryColor.rgb + (c * (vec3(e) + imageryColor.rgb * d) * (diffuseHighlight + nonDiffuseHighlight + specular));\\n\\\n#else\\n\\\n    vec3 color = imageryColor.rgb + diffuseHighlight + nonDiffuseHighlight + specular;\\n\\\n#endif\\n\\\n\\n\\\n    return vec4(color, imageryColor.a);\\n\\\n}\\n\\\n\\n\\\n#endif // #ifdef SHOW_REFLECTIVE_OCEAN\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef QUANTIZATION_BITS12\\n\\\nattribute vec4 compressed0;\\n\\\nattribute float compressed1;\\n\\\n#else\\n\\\nattribute vec4 position3DAndHeight;\\n\\\nattribute vec4 textureCoordAndEncodedNormals;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef GEODETIC_SURFACE_NORMALS\\n\\\nattribute vec3 geodeticSurfaceNormal;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef EXAGGERATION\\n\\\nuniform vec2 u_terrainExaggerationAndRelativeHeight;\\n\\\n#endif\\n\\\n\\n\\\nuniform vec3 u_center3D;\\n\\\nuniform mat4 u_modifiedModelView;\\n\\\nuniform mat4 u_modifiedModelViewProjection;\\n\\\nuniform vec4 u_tileRectangle;\\n\\\n\\n\\\n// Uniforms for 2D Mercator projection\\n\\\nuniform vec2 u_southAndNorthLatitude;\\n\\\nuniform vec2 u_southMercatorYAndOneOverHeight;\\n\\\n\\n\\\nvarying vec3 v_positionMC;\\n\\\nvarying vec3 v_positionEC;\\n\\\n\\n\\\nvarying vec3 v_textureCoordinates;\\n\\\nvarying vec3 v_normalMC;\\n\\\nvarying vec3 v_normalEC;\\n\\\n\\n\\\n#ifdef APPLY_MATERIAL\\n\\\nvarying float v_slope;\\n\\\nvarying float v_aspect;\\n\\\nvarying float v_height;\\n\\\n#endif\\n\\\n\\n\\\n#if defined(FOG) || defined(GROUND_ATMOSPHERE) || defined(UNDERGROUND_COLOR) || defined(TRANSLUCENT)\\n\\\nvarying float v_distance;\\n\\\n#endif\\n\\\n\\n\\\n#if defined(FOG) || defined(GROUND_ATMOSPHERE)\\n\\\nvarying vec3 v_atmosphereRayleighColor;\\n\\\nvarying vec3 v_atmosphereMieColor;\\n\\\nvarying float v_atmosphereOpacity;\\n\\\n#endif\\n\\\n\\n\\\n// These functions are generated at runtime.\\n\\\nvec4 getPosition(vec3 position, float height, vec2 textureCoordinates);\\n\\\nfloat get2DYPositionFraction(vec2 textureCoordinates);\\n\\\n\\n\\\nvec4 getPosition3DMode(vec3 position, float height, vec2 textureCoordinates)\\n\\\n{\\n\\\n    return u_modifiedModelViewProjection * vec4(position, 1.0);\\n\\\n}\\n\\\n\\n\\\nfloat get2DMercatorYPositionFraction(vec2 textureCoordinates)\\n\\\n{\\n\\\n    // The width of a tile at level 11, in radians and assuming a single root tile, is\\n\\\n    //   2.0 * czm_pi / pow(2.0, 11.0)\\n\\\n    // We want to just linearly interpolate the 2D position from the texture coordinates\\n\\\n    // when we're at this level or higher.  The constant below is the expression\\n\\\n    // above evaluated and then rounded up at the 4th significant digit.\\n\\\n    const float maxTileWidth = 0.003068;\\n\\\n    float positionFraction = textureCoordinates.y;\\n\\\n    float southLatitude = u_southAndNorthLatitude.x;\\n\\\n    float northLatitude = u_southAndNorthLatitude.y;\\n\\\n    if (northLatitude - southLatitude > maxTileWidth)\\n\\\n    {\\n\\\n        float southMercatorY = u_southMercatorYAndOneOverHeight.x;\\n\\\n        float oneOverMercatorHeight = u_southMercatorYAndOneOverHeight.y;\\n\\\n\\n\\\n        float currentLatitude = mix(southLatitude, northLatitude, textureCoordinates.y);\\n\\\n        currentLatitude = clamp(currentLatitude, -czm_webMercatorMaxLatitude, czm_webMercatorMaxLatitude);\\n\\\n        positionFraction = czm_latitudeToWebMercatorFraction(currentLatitude, southMercatorY, oneOverMercatorHeight);\\n\\\n    }\\n\\\n    return positionFraction;\\n\\\n}\\n\\\n\\n\\\nfloat get2DGeographicYPositionFraction(vec2 textureCoordinates)\\n\\\n{\\n\\\n    return textureCoordinates.y;\\n\\\n}\\n\\\n\\n\\\nvec4 getPositionPlanarEarth(vec3 position, float height, vec2 textureCoordinates)\\n\\\n{\\n\\\n    float yPositionFraction = get2DYPositionFraction(textureCoordinates);\\n\\\n    vec4 rtcPosition2D = vec4(height, mix(u_tileRectangle.st, u_tileRectangle.pq, vec2(textureCoordinates.x, yPositionFraction)), 1.0);\\n\\\n    return u_modifiedModelViewProjection * rtcPosition2D;\\n\\\n}\\n\\\n\\n\\\nvec4 getPosition2DMode(vec3 position, float height, vec2 textureCoordinates)\\n\\\n{\\n\\\n    return getPositionPlanarEarth(position, 0.0, textureCoordinates);\\n\\\n}\\n\\\n\\n\\\nvec4 getPositionColumbusViewMode(vec3 position, float height, vec2 textureCoordinates)\\n\\\n{\\n\\\n    return getPositionPlanarEarth(position, height, textureCoordinates);\\n\\\n}\\n\\\n\\n\\\nvec4 getPositionMorphingMode(vec3 position, float height, vec2 textureCoordinates)\\n\\\n{\\n\\\n    // We do not do RTC while morphing, so there is potential for jitter.\\n\\\n    // This is unlikely to be noticeable, though.\\n\\\n    vec3 position3DWC = position + u_center3D;\\n\\\n    float yPositionFraction = get2DYPositionFraction(textureCoordinates);\\n\\\n    vec4 position2DWC = vec4(height, mix(u_tileRectangle.st, u_tileRectangle.pq, vec2(textureCoordinates.x, yPositionFraction)), 1.0);\\n\\\n    vec4 morphPosition = czm_columbusViewMorph(position2DWC, vec4(position3DWC, 1.0), czm_morphTime);\\n\\\n    return czm_modelViewProjection * morphPosition;\\n\\\n}\\n\\\n\\n\\\n#ifdef QUANTIZATION_BITS12\\n\\\nuniform vec2 u_minMaxHeight;\\n\\\nuniform mat4 u_scaleAndBias;\\n\\\n#endif\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n#ifdef QUANTIZATION_BITS12\\n\\\n    vec2 xy = czm_decompressTextureCoordinates(compressed0.x);\\n\\\n    vec2 zh = czm_decompressTextureCoordinates(compressed0.y);\\n\\\n    vec3 position = vec3(xy, zh.x);\\n\\\n    float height = zh.y;\\n\\\n    vec2 textureCoordinates = czm_decompressTextureCoordinates(compressed0.z);\\n\\\n\\n\\\n    height = height * (u_minMaxHeight.y - u_minMaxHeight.x) + u_minMaxHeight.x;\\n\\\n    position = (u_scaleAndBias * vec4(position, 1.0)).xyz;\\n\\\n\\n\\\n#if (defined(ENABLE_VERTEX_LIGHTING) || defined(GENERATE_POSITION_AND_NORMAL)) && defined(INCLUDE_WEB_MERCATOR_Y)\\n\\\n    float webMercatorT = czm_decompressTextureCoordinates(compressed0.w).x;\\n\\\n    float encodedNormal = compressed1;\\n\\\n#elif defined(INCLUDE_WEB_MERCATOR_Y)\\n\\\n    float webMercatorT = czm_decompressTextureCoordinates(compressed0.w).x;\\n\\\n    float encodedNormal = 0.0;\\n\\\n#elif defined(ENABLE_VERTEX_LIGHTING) || defined(GENERATE_POSITION_AND_NORMAL)\\n\\\n    float webMercatorT = textureCoordinates.y;\\n\\\n    float encodedNormal = compressed0.w;\\n\\\n#else\\n\\\n    float webMercatorT = textureCoordinates.y;\\n\\\n    float encodedNormal = 0.0;\\n\\\n#endif\\n\\\n\\n\\\n#else\\n\\\n    // A single float per element\\n\\\n    vec3 position = position3DAndHeight.xyz;\\n\\\n    float height = position3DAndHeight.w;\\n\\\n    vec2 textureCoordinates = textureCoordAndEncodedNormals.xy;\\n\\\n\\n\\\n#if (defined(ENABLE_VERTEX_LIGHTING) || defined(GENERATE_POSITION_AND_NORMAL) || defined(APPLY_MATERIAL)) && defined(INCLUDE_WEB_MERCATOR_Y)\\n\\\n    float webMercatorT = textureCoordAndEncodedNormals.z;\\n\\\n    float encodedNormal = textureCoordAndEncodedNormals.w;\\n\\\n#elif defined(ENABLE_VERTEX_LIGHTING) || defined(GENERATE_POSITION_AND_NORMAL) || defined(APPLY_MATERIAL)\\n\\\n    float webMercatorT = textureCoordinates.y;\\n\\\n    float encodedNormal = textureCoordAndEncodedNormals.z;\\n\\\n#elif defined(INCLUDE_WEB_MERCATOR_Y)\\n\\\n    float webMercatorT = textureCoordAndEncodedNormals.z;\\n\\\n    float encodedNormal = 0.0;\\n\\\n#else\\n\\\n    float webMercatorT = textureCoordinates.y;\\n\\\n    float encodedNormal = 0.0;\\n\\\n#endif\\n\\\n\\n\\\n#endif\\n\\\n\\n\\\n    vec3 position3DWC = position + u_center3D;\\n\\\n\\n\\\n#ifdef GEODETIC_SURFACE_NORMALS\\n\\\n    vec3 ellipsoidNormal = geodeticSurfaceNormal;\\n\\\n#else\\n\\\n    vec3 ellipsoidNormal = normalize(position3DWC);\\n\\\n#endif\\n\\\n\\n\\\n#if defined(EXAGGERATION) && defined(GEODETIC_SURFACE_NORMALS)\\n\\\n    float exaggeration = u_terrainExaggerationAndRelativeHeight.x;\\n\\\n    float relativeHeight = u_terrainExaggerationAndRelativeHeight.y;\\n\\\n    float newHeight = (height - relativeHeight) * exaggeration + relativeHeight;\\n\\\n\\n\\\n    // stop from going through center of earth\\n\\\n    float minRadius = min(min(czm_ellipsoidRadii.x, czm_ellipsoidRadii.y), czm_ellipsoidRadii.z);\\n\\\n    newHeight = max(newHeight, -minRadius);\\n\\\n\\n\\\n    vec3 offset = ellipsoidNormal * (newHeight - height);\\n\\\n    position += offset;\\n\\\n    position3DWC += offset;\\n\\\n    height = newHeight;\\n\\\n#endif\\n\\\n\\n\\\n    gl_Position = getPosition(position, height, textureCoordinates);\\n\\\n\\n\\\n    v_positionEC = (u_modifiedModelView * vec4(position, 1.0)).xyz;\\n\\\n    v_positionMC = position3DWC;  // position in model coordinates\\n\\\n\\n\\\n    v_textureCoordinates = vec3(textureCoordinates, webMercatorT);\\n\\\n\\n\\\n#if defined(ENABLE_VERTEX_LIGHTING) || defined(GENERATE_POSITION_AND_NORMAL) || defined(APPLY_MATERIAL)\\n\\\n    vec3 normalMC = czm_octDecode(encodedNormal);\\n\\\n\\n\\\n#if defined(EXAGGERATION) && defined(GEODETIC_SURFACE_NORMALS)\\n\\\n    vec3 projection = dot(normalMC, ellipsoidNormal) * ellipsoidNormal;\\n\\\n    vec3 rejection = normalMC - projection;\\n\\\n    normalMC = normalize(projection + rejection * exaggeration);\\n\\\n#endif\\n\\\n\\n\\\n    v_normalMC = normalMC;\\n\\\n    v_normalEC = czm_normal3D * v_normalMC;\\n\\\n#endif\\n\\\n\\n\\\n#if defined(FOG) || (defined(GROUND_ATMOSPHERE) && !defined(PER_FRAGMENT_GROUND_ATMOSPHERE))\\n\\\n\\n\\\n    bool dynamicLighting = false;\\n\\\n\\n\\\n    #if defined(DYNAMIC_ATMOSPHERE_LIGHTING) && (defined(ENABLE_DAYNIGHT_SHADING) || defined(ENABLE_VERTEX_LIGHTING))\\n\\\n        dynamicLighting = true;\\n\\\n    #endif\\n\\\n\\n\\\n#if defined(DYNAMIC_ATMOSPHERE_LIGHTING_FROM_SUN)\\n\\\n    vec3 atmosphereLightDirection = czm_sunDirectionWC;\\n\\\n#else\\n\\\n    vec3 atmosphereLightDirection = czm_lightDirectionWC;\\n\\\n#endif\\n\\\n\\n\\\n    vec3 lightDirection = czm_branchFreeTernary(dynamicLighting, atmosphereLightDirection, normalize(position3DWC));\\n\\\n\\n\\\n    computeAtmosphereScattering(\\n\\\n        position3DWC,\\n\\\n        lightDirection,\\n\\\n        v_atmosphereRayleighColor,\\n\\\n        v_atmosphereMieColor,\\n\\\n        v_atmosphereOpacity\\n\\\n    );\\n\\\n#endif\\n\\\n\\n\\\n#if defined(FOG) || defined(GROUND_ATMOSPHERE) || defined(UNDERGROUND_COLOR) || defined(TRANSLUCENT)\\n\\\n    v_distance = length((czm_modelView3D * vec4(position3DWC, 1.0)).xyz);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_MATERIAL\\n\\\n    float northPoleZ = czm_ellipsoidRadii.z;\\n\\\n    vec3 northPolePositionMC = vec3(0.0, 0.0, northPoleZ);\\n\\\n    vec3 vectorEastMC = normalize(cross(northPolePositionMC - v_positionMC, ellipsoidNormal));\\n\\\n    float dotProd = abs(dot(ellipsoidNormal, v_normalMC));\\n\\\n    v_slope = acos(dotProd);\\n\\\n    vec3 normalRejected = ellipsoidNormal * dotProd;\\n\\\n    vec3 normalProjected = v_normalMC - normalRejected;\\n\\\n    vec3 aspectVector = normalize(normalProjected);\\n\\\n    v_aspect = acos(dot(aspectVector, vectorEastMC));\\n\\\n    float determ = dot(cross(vectorEastMC, aspectVector), ellipsoidNormal);\\n\\\n    v_aspect = czm_branchFreeTernary(determ < 0.0, 2.0 * czm_pi - v_aspect, v_aspect);\\n\\\n    v_height = height;\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void computeAtmosphereScattering(vec3 positionWC, vec3 lightDirection, out vec3 rayleighColor, out vec3 mieColor, out float opacity) {\\n\\\n\\n\\\n    vec3 cameraToPositionWC = positionWC - czm_viewerPositionWC;\\n\\\n    vec3 cameraToPositionWCDirection = normalize(cameraToPositionWC);\\n\\\n    czm_ray primaryRay = czm_ray(czm_viewerPositionWC, cameraToPositionWCDirection);\\n\\\n    \\n\\\n    float atmosphereInnerRadius = length(positionWC);\\n\\\n\\n\\\n    computeScattering(\\n\\\n        primaryRay,\\n\\\n        length(cameraToPositionWC),\\n\\\n        lightDirection,\\n\\\n        atmosphereInnerRadius,\\n\\\n        rayleighColor,\\n\\\n        mieColor,\\n\\\n        opacity\\n\\\n    );\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D image;\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n    vec4 rampColor = texture2D(image, vec2(materialInput.aspect / (2.0 * czm_pi), 0.5));\\n\\\n    rampColor = czm_gammaCorrect(rampColor);\\n\\\n    material.diffuse = rampColor.rgb;\\n\\\n    material.alpha = rampColor.a;\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D image;\\n\\\nuniform float strength;\\n\\\nuniform vec2 repeat;\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n\\n\\\n    vec2 st = materialInput.st;\\n\\\n\\n\\\n    vec2 centerPixel = fract(repeat * st);\\n\\\n    float centerBump = texture2D(image, centerPixel).channel;\\n\\\n\\n\\\n    float imageWidth = float(imageDimensions.x);\\n\\\n    vec2 rightPixel = fract(repeat * (st + vec2(1.0 / imageWidth, 0.0)));\\n\\\n    float rightBump = texture2D(image, rightPixel).channel;\\n\\\n\\n\\\n    float imageHeight = float(imageDimensions.y);\\n\\\n    vec2 leftPixel = fract(repeat * (st + vec2(0.0, 1.0 / imageHeight)));\\n\\\n    float topBump = texture2D(image, leftPixel).channel;\\n\\\n\\n\\\n    vec3 normalTangentSpace = normalize(vec3(centerBump - rightBump, centerBump - topBump, clamp(1.0 - strength, 0.1, 1.0)));\\n\\\n    vec3 normalEC = materialInput.tangentToEyeMatrix * normalTangentSpace;\\n\\\n\\n\\\n    material.normal = normalEC;\\n\\\n    material.diffuse = vec3(0.01);\\n\\\n\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform vec4 lightColor;\\n\\\nuniform vec4 darkColor;\\n\\\nuniform vec2 repeat;\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n\\n\\\n    vec2 st = materialInput.st;\\n\\\n\\n\\\n    // From Stefan Gustavson's Procedural Textures in GLSL in OpenGL Insights\\n\\\n    float b = mod(floor(repeat.s * st.s) + floor(repeat.t * st.t), 2.0);  // 0.0 or 1.0\\n\\\n\\n\\\n    // Find the distance from the closest separator (region between two colors)\\n\\\n    float scaledWidth = fract(repeat.s * st.s);\\n\\\n    scaledWidth = abs(scaledWidth - floor(scaledWidth + 0.5));\\n\\\n    float scaledHeight = fract(repeat.t * st.t);\\n\\\n    scaledHeight = abs(scaledHeight - floor(scaledHeight + 0.5));\\n\\\n    float value = min(scaledWidth, scaledHeight);\\n\\\n\\n\\\n    vec4 currentColor = mix(lightColor, darkColor, b);\\n\\\n    vec4 color = czm_antialias(lightColor, darkColor, currentColor, value, 0.03);\\n\\\n\\n\\\n    color = czm_gammaCorrect(color);\\n\\\n    material.diffuse = color.rgb;\\n\\\n    material.alpha = color.a;\\n\\\n\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform vec4 lightColor;\\n\\\nuniform vec4 darkColor;\\n\\\nuniform vec2 repeat;\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n\\n\\\n    // From Stefan Gustavson's Procedural Textures in GLSL in OpenGL Insights\\n\\\n    float b = smoothstep(0.3, 0.32, length(fract(repeat * materialInput.st) - 0.5));  // 0.0 or 1.0\\n\\\n\\n\\\n    vec4 color = mix(lightColor, darkColor, b);\\n\\\n    color = czm_gammaCorrect(color);\\n\\\n    material.diffuse = color.rgb;\\n\\\n    material.alpha = color.a;\\n\\\n\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D heights;\\n\\\nuniform sampler2D colors;\\n\\\n\\n\\\n// This material expects heights to be sorted from lowest to highest.\\n\\\n\\n\\\nfloat getHeight(int idx, float invTexSize)\\n\\\n{\\n\\\n    vec2 uv = vec2((float(idx) + 0.5) * invTexSize, 0.5);\\n\\\n#ifdef OES_texture_float\\n\\\n    return texture2D(heights, uv).x;\\n\\\n#else\\n\\\n    return czm_unpackFloat(texture2D(heights, uv));\\n\\\n#endif\\n\\\n}\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n\\n\\\n    float height = materialInput.height;\\n\\\n    float invTexSize = 1.0 / float(heightsDimensions.x);\\n\\\n\\n\\\n    float minHeight = getHeight(0, invTexSize);\\n\\\n    float maxHeight = getHeight(heightsDimensions.x - 1, invTexSize);\\n\\\n\\n\\\n    // early-out when outside the height range\\n\\\n    if (height < minHeight || height > maxHeight) {\\n\\\n        material.diffuse = vec3(0.0);\\n\\\n        material.alpha = 0.0;\\n\\\n        return material;\\n\\\n    }\\n\\\n\\n\\\n    // Binary search to find heights above and below.\\n\\\n    int idxBelow = 0;\\n\\\n    int idxAbove = heightsDimensions.x;\\n\\\n    float heightBelow = minHeight;\\n\\\n    float heightAbove = maxHeight;\\n\\\n\\n\\\n    // while loop not allowed, so use for loop with max iterations.\\n\\\n    // maxIterations of 16 supports a texture size up to 65536 (2^16).\\n\\\n    const int maxIterations = 16;\\n\\\n    for (int i = 0; i < maxIterations; i++) {\\n\\\n        if (idxBelow >= idxAbove - 1) {\\n\\\n            break;\\n\\\n        }\\n\\\n\\n\\\n        int idxMid = (idxBelow + idxAbove) / 2;\\n\\\n        float heightTex = getHeight(idxMid, invTexSize);\\n\\\n\\n\\\n        if (height > heightTex) {\\n\\\n            idxBelow = idxMid;\\n\\\n            heightBelow = heightTex;\\n\\\n        } else {\\n\\\n            idxAbove = idxMid;\\n\\\n            heightAbove = heightTex;\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    float lerper = heightBelow == heightAbove ? 1.0 : (height - heightBelow) / (heightAbove - heightBelow);\\n\\\n    vec2 colorUv = vec2(invTexSize * (float(idxBelow) + 0.5 + lerper), 0.5);\\n\\\n    vec4 color = texture2D(colors, colorUv);\\n\\\n\\n\\\n    // undo preumultiplied alpha\\n\\\n    if (color.a > 0.0) \\n\\\n    {\\n\\\n        color.rgb /= color.a;\\n\\\n    }\\n\\\n    \\n\\\n    color.rgb = czm_gammaCorrect(color.rgb);\\n\\\n\\n\\\n    material.diffuse = color.rgb;\\n\\\n    material.alpha = color.a;\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef GL_OES_standard_derivatives\\n\\\n    #extension GL_OES_standard_derivatives : enable\\n\\\n#endif\\n\\\n\\n\\\nuniform vec4 color;\\n\\\nuniform float spacing;\\n\\\nuniform float width;\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n\\n\\\n    float distanceToContour = mod(materialInput.height, spacing);\\n\\\n\\n\\\n#ifdef GL_OES_standard_derivatives\\n\\\n    float dxc = abs(dFdx(materialInput.height));\\n\\\n    float dyc = abs(dFdy(materialInput.height));\\n\\\n    float dF = max(dxc, dyc) * czm_pixelRatio * width;\\n\\\n    float alpha = (distanceToContour < dF) ? 1.0 : 0.0;\\n\\\n#else\\n\\\n    float alpha = (distanceToContour < (czm_pixelRatio * width)) ? 1.0 : 0.0;\\n\\\n#endif\\n\\\n\\n\\\n    vec4 outColor = czm_gammaCorrect(vec4(color.rgb, alpha * color.a));\\n\\\n    material.diffuse = outColor.rgb;\\n\\\n    material.alpha = outColor.a;\\n\\\n\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D image;\\n\\\nuniform float minimumHeight;\\n\\\nuniform float maximumHeight;\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n    float scaledHeight = clamp((materialInput.height - minimumHeight) / (maximumHeight - minimumHeight), 0.0, 1.0);\\n\\\n    vec4 rampColor = texture2D(image, vec2(scaledHeight, 0.5));\\n\\\n    rampColor = czm_gammaCorrect(rampColor);\\n\\\n    material.diffuse = rampColor.rgb;\\n\\\n    material.alpha = rampColor.a;\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform vec4 fadeInColor;\\n\\\nuniform vec4 fadeOutColor;\\n\\\nuniform float maximumDistance;\\n\\\nuniform bool repeat;\\n\\\nuniform vec2 fadeDirection;\\n\\\nuniform vec2 time;\\n\\\n\\n\\\nfloat getTime(float t, float coord)\\n\\\n{\\n\\\n    float scalar = 1.0 / maximumDistance;\\n\\\n    float q  = distance(t, coord) * scalar;\\n\\\n    if (repeat)\\n\\\n    {\\n\\\n        float r = distance(t, coord + 1.0) * scalar;\\n\\\n        float s = distance(t, coord - 1.0) * scalar;\\n\\\n        q = min(min(r, s), q);\\n\\\n    }\\n\\\n    return clamp(q, 0.0, 1.0);\\n\\\n}\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n\\n\\\n    vec2 st = materialInput.st;\\n\\\n    float s = getTime(time.x, st.s) * fadeDirection.s;\\n\\\n    float t = getTime(time.y, st.t) * fadeDirection.t;\\n\\\n\\n\\\n    float u = length(vec2(s, t));\\n\\\n    vec4 color = mix(fadeInColor, fadeOutColor, u);\\n\\\n\\n\\\n    color = czm_gammaCorrect(color);\\n\\\n    material.emission = color.rgb;\\n\\\n    material.alpha = color.a;\\n\\\n\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef GL_OES_standard_derivatives\\n\\\n    #extension GL_OES_standard_derivatives : enable\\n\\\n#endif\\n\\\n\\n\\\nuniform vec4 color;\\n\\\nuniform float cellAlpha;\\n\\\nuniform vec2 lineCount;\\n\\\nuniform vec2 lineThickness;\\n\\\nuniform vec2 lineOffset;\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n\\n\\\n    vec2 st = materialInput.st;\\n\\\n\\n\\\n    float scaledWidth = fract(lineCount.s * st.s - lineOffset.s);\\n\\\n    scaledWidth = abs(scaledWidth - floor(scaledWidth + 0.5));\\n\\\n    float scaledHeight = fract(lineCount.t * st.t - lineOffset.t);\\n\\\n    scaledHeight = abs(scaledHeight - floor(scaledHeight + 0.5));\\n\\\n\\n\\\n    float value;\\n\\\n#ifdef GL_OES_standard_derivatives\\n\\\n    // Fuzz Factor - Controls blurriness of lines\\n\\\n    const float fuzz = 1.2;\\n\\\n    vec2 thickness = (lineThickness * czm_pixelRatio) - 1.0;\\n\\\n\\n\\\n    // From \\\"3D Engine Design for Virtual Globes\\\" by Cozzi and Ring, Listing 4.13.\\n\\\n    vec2 dx = abs(dFdx(st));\\n\\\n    vec2 dy = abs(dFdy(st));\\n\\\n    vec2 dF = vec2(max(dx.s, dy.s), max(dx.t, dy.t)) * lineCount;\\n\\\n    value = min(\\n\\\n        smoothstep(dF.s * thickness.s, dF.s * (fuzz + thickness.s), scaledWidth),\\n\\\n        smoothstep(dF.t * thickness.t, dF.t * (fuzz + thickness.t), scaledHeight));\\n\\\n#else\\n\\\n    // Fuzz Factor - Controls blurriness of lines\\n\\\n    const float fuzz = 0.05;\\n\\\n\\n\\\n    vec2 range = 0.5 - (lineThickness * 0.05);\\n\\\n    value = min(\\n\\\n        1.0 - smoothstep(range.s, range.s + fuzz, scaledWidth),\\n\\\n        1.0 - smoothstep(range.t, range.t + fuzz, scaledHeight));\\n\\\n#endif\\n\\\n\\n\\\n    // Edges taken from RimLightingMaterial.glsl\\n\\\n    // See http://www.fundza.com/rman_shaders/surface/fake_rim/fake_rim1.html\\n\\\n    float dRim = 1.0 - abs(dot(materialInput.normalEC, normalize(materialInput.positionToEyeEC)));\\n\\\n    float sRim = smoothstep(0.8, 1.0, dRim);\\n\\\n    value *= (1.0 - sRim);\\n\\\n\\n\\\n    vec4 halfColor;\\n\\\n    halfColor.rgb = color.rgb * 0.5;\\n\\\n    halfColor.a = color.a * (1.0 - ((1.0 - cellAlpha) * value));\\n\\\n    halfColor = czm_gammaCorrect(halfColor);\\n\\\n    material.diffuse = halfColor.rgb;\\n\\\n    material.emission = halfColor.rgb;\\n\\\n    material.alpha = halfColor.a;\\n\\\n\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D image;\\n\\\nuniform float strength;\\n\\\nuniform vec2 repeat;\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n    \\n\\\n    vec4 textureValue = texture2D(image, fract(repeat * materialInput.st));\\n\\\n    vec3 normalTangentSpace = textureValue.channels;\\n\\\n    normalTangentSpace.xy = normalTangentSpace.xy * 2.0 - 1.0;\\n\\\n    normalTangentSpace.z = clamp(1.0 - strength, 0.1, 1.0);\\n\\\n    normalTangentSpace = normalize(normalTangentSpace);\\n\\\n    vec3 normalEC = materialInput.tangentToEyeMatrix * normalTangentSpace;\\n\\\n    \\n\\\n    material.normal = normalEC;\\n\\\n    \\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef GL_OES_standard_derivatives\\n\\\n#extension GL_OES_standard_derivatives : enable\\n\\\n#endif\\n\\\n\\n\\\nuniform vec4 color;\\n\\\n\\n\\\nfloat getPointOnLine(vec2 p0, vec2 p1, float x)\\n\\\n{\\n\\\n    float slope = (p0.y - p1.y) / (p0.x - p1.x);\\n\\\n    return slope * (x - p0.x) + p0.y;\\n\\\n}\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n\\n\\\n    vec2 st = materialInput.st;\\n\\\n\\n\\\n#ifdef GL_OES_standard_derivatives\\n\\\n    float base = 1.0 - abs(fwidth(st.s)) * 10.0 * czm_pixelRatio;\\n\\\n#else\\n\\\n    float base = 0.975; // 2.5% of the line will be the arrow head\\n\\\n#endif\\n\\\n\\n\\\n    vec2 center = vec2(1.0, 0.5);\\n\\\n    float ptOnUpperLine = getPointOnLine(vec2(base, 1.0), center, st.s);\\n\\\n    float ptOnLowerLine = getPointOnLine(vec2(base, 0.0), center, st.s);\\n\\\n\\n\\\n    float halfWidth = 0.15;\\n\\\n    float s = step(0.5 - halfWidth, st.t);\\n\\\n    s *= 1.0 - step(0.5 + halfWidth, st.t);\\n\\\n    s *= 1.0 - step(base, st.s);\\n\\\n\\n\\\n    float t = step(base, materialInput.st.s);\\n\\\n    t *= 1.0 - step(ptOnUpperLine, st.t);\\n\\\n    t *= step(ptOnLowerLine, st.t);\\n\\\n\\n\\\n    // Find the distance from the closest separator (region between two colors)\\n\\\n    float dist;\\n\\\n    if (st.s < base)\\n\\\n    {\\n\\\n        float d1 = abs(st.t - (0.5 - halfWidth));\\n\\\n        float d2 = abs(st.t - (0.5 + halfWidth));\\n\\\n        dist = min(d1, d2);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        float d1 = czm_infinity;\\n\\\n        if (st.t < 0.5 - halfWidth && st.t > 0.5 + halfWidth)\\n\\\n        {\\n\\\n            d1 = abs(st.s - base);\\n\\\n        }\\n\\\n        float d2 = abs(st.t - ptOnUpperLine);\\n\\\n        float d3 = abs(st.t - ptOnLowerLine);\\n\\\n        dist = min(min(d1, d2), d3);\\n\\\n    }\\n\\\n\\n\\\n    vec4 outsideColor = vec4(0.0);\\n\\\n    vec4 currentColor = mix(outsideColor, color, clamp(s + t, 0.0, 1.0));\\n\\\n    vec4 outColor = czm_antialias(outsideColor, color, currentColor, dist);\\n\\\n\\n\\\n    outColor = czm_gammaCorrect(outColor);\\n\\\n    material.diffuse = outColor.rgb;\\n\\\n    material.alpha = outColor.a;\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform vec4 color;\\n\\\nuniform vec4 gapColor;\\n\\\nuniform float dashLength;\\n\\\nuniform float dashPattern;\\n\\\nvarying float v_polylineAngle;\\n\\\n\\n\\\nconst float maskLength = 16.0;\\n\\\n\\n\\\nmat2 rotate(float rad) {\\n\\\n    float c = cos(rad);\\n\\\n    float s = sin(rad);\\n\\\n    return mat2(\\n\\\n        c, s,\\n\\\n        -s, c\\n\\\n    );\\n\\\n}\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n\\n\\\n    vec2 pos = rotate(v_polylineAngle) * gl_FragCoord.xy;\\n\\\n\\n\\\n    // Get the relative position within the dash from 0 to 1\\n\\\n    float dashPosition = fract(pos.x / (dashLength * czm_pixelRatio));\\n\\\n    // Figure out the mask index.\\n\\\n    float maskIndex = floor(dashPosition * maskLength);\\n\\\n    // Test the bit mask.\\n\\\n    float maskTest = floor(dashPattern / pow(2.0, maskIndex));\\n\\\n    vec4 fragColor = (mod(maskTest, 2.0) < 1.0) ? gapColor : color;\\n\\\n    if (fragColor.a < 0.005) {   // matches 0/255 and 1/255\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    fragColor = czm_gammaCorrect(fragColor);\\n\\\n    material.emission = fragColor.rgb;\\n\\\n    material.alpha = fragColor.a;\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform vec4 color;\\n\\\nuniform float glowPower;\\n\\\nuniform float taperPower;\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n\\n\\\n    vec2 st = materialInput.st;\\n\\\n    float glow = glowPower / abs(st.t - 0.5) - (glowPower / 0.5);\\n\\\n\\n\\\n    if (taperPower <= 0.99999) {\\n\\\n        glow *= min(1.0, taperPower / (0.5 - st.s * 0.5) - (taperPower / 0.5));\\n\\\n    }\\n\\\n\\n\\\n    vec4 fragColor;\\n\\\n    fragColor.rgb = max(vec3(glow - 1.0 + color.rgb), color.rgb);\\n\\\n    fragColor.a = clamp(0.0, 1.0, glow) * color.a;\\n\\\n    fragColor = czm_gammaCorrect(fragColor);\\n\\\n\\n\\\n    material.emission = fragColor.rgb;\\n\\\n    material.alpha = fragColor.a;\\n\\\n\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform vec4 color;\\n\\\nuniform vec4 outlineColor;\\n\\\nuniform float outlineWidth;\\n\\\n\\n\\\nvarying float v_width;\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n\\n\\\n    vec2 st = materialInput.st;\\n\\\n    float halfInteriorWidth =  0.5 * (v_width - outlineWidth) / v_width;\\n\\\n    float b = step(0.5 - halfInteriorWidth, st.t);\\n\\\n    b *= 1.0 - step(0.5 + halfInteriorWidth, st.t);\\n\\\n\\n\\\n    // Find the distance from the closest separator (region between two colors)\\n\\\n    float d1 = abs(st.t - (0.5 - halfInteriorWidth));\\n\\\n    float d2 = abs(st.t - (0.5 + halfInteriorWidth));\\n\\\n    float dist = min(d1, d2);\\n\\\n\\n\\\n    vec4 currentColor = mix(outlineColor, color, b);\\n\\\n    vec4 outColor = czm_antialias(outlineColor, color, currentColor, dist);\\n\\\n    outColor = czm_gammaCorrect(outColor);\\n\\\n\\n\\\n    material.diffuse = outColor.rgb;\\n\\\n    material.alpha = outColor.a;\\n\\\n\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform vec4 color;\\n\\\nuniform vec4 rimColor;\\n\\\nuniform float width;\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n\\n\\\n    // See http://www.fundza.com/rman_shaders/surface/fake_rim/fake_rim1.html\\n\\\n    float d = 1.0 - dot(materialInput.normalEC, normalize(materialInput.positionToEyeEC));\\n\\\n    float s = smoothstep(1.0 - width, 1.0, d);\\n\\\n\\n\\\n    vec4 outColor = czm_gammaCorrect(color);\\n\\\n    vec4 outRimColor = czm_gammaCorrect(rimColor);\\n\\\n\\n\\\n    material.diffuse = outColor.rgb;\\n\\\n    material.emission = outRimColor.rgb * s;\\n\\\n    material.alpha = mix(outColor.a, outRimColor.a, s);\\n\\\n\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D image;\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n    vec4 rampColor = texture2D(image, vec2(materialInput.slope / (czm_pi / 2.0), 0.5));\\n\\\n    rampColor = czm_gammaCorrect(rampColor);\\n\\\n    material.diffuse = rampColor.rgb;\\n\\\n    material.alpha = rampColor.a;\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform vec4 evenColor;\\n\\\nuniform vec4 oddColor;\\n\\\nuniform float offset;\\n\\\nuniform float repeat;\\n\\\nuniform bool horizontal;\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n\\n\\\n    // Based on the Stripes Fragment Shader in the Orange Book (11.1.2)\\n\\\n    float coord = mix(materialInput.st.s, materialInput.st.t, float(horizontal));\\n\\\n    float value = fract((coord - offset) * (repeat * 0.5));\\n\\\n    float dist = min(value, min(abs(value - 0.5), 1.0 - value));\\n\\\n\\n\\\n    vec4 currentColor = mix(evenColor, oddColor, step(0.5, value));\\n\\\n    vec4 color = czm_antialias(evenColor, oddColor, currentColor, dist);\\n\\\n    color = czm_gammaCorrect(color);\\n\\\n\\n\\\n    material.diffuse = color.rgb;\\n\\\n    material.alpha = color.a;\\n\\\n\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"// Thanks for the contribution Jonas\\n\\\n// http://29a.ch/2012/7/19/webgl-terrain-rendering-water-fog\\n\\\n\\n\\\nuniform sampler2D specularMap;\\n\\\nuniform sampler2D normalMap;\\n\\\nuniform vec4 baseWaterColor;\\n\\\nuniform vec4 blendColor;\\n\\\nuniform float frequency;\\n\\\nuniform float animationSpeed;\\n\\\nuniform float amplitude;\\n\\\nuniform float specularIntensity;\\n\\\nuniform float fadeFactor;\\n\\\n\\n\\\nczm_material czm_getMaterial(czm_materialInput materialInput)\\n\\\n{\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n\\n\\\n    float time = czm_frameNumber * animationSpeed;\\n\\\n\\n\\\n    // fade is a function of the distance from the fragment and the frequency of the waves\\n\\\n    float fade = max(1.0, (length(materialInput.positionToEyeEC) / 10000000000.0) * frequency * fadeFactor);\\n\\\n\\n\\\n    float specularMapValue = texture2D(specularMap, materialInput.st).r;\\n\\\n\\n\\\n    // note: not using directional motion at this time, just set the angle to 0.0;\\n\\\n    vec4 noise = czm_getWaterNoise(normalMap, materialInput.st * frequency, time, 0.0);\\n\\\n    vec3 normalTangentSpace = noise.xyz * vec3(1.0, 1.0, (1.0 / amplitude));\\n\\\n\\n\\\n    // fade out the normal perturbation as we move further from the water surface\\n\\\n    normalTangentSpace.xy /= fade;\\n\\\n\\n\\\n    // attempt to fade out the normal perturbation as we approach non water areas (low specular map value)\\n\\\n    normalTangentSpace = mix(vec3(0.0, 0.0, 50.0), normalTangentSpace, specularMapValue);\\n\\\n\\n\\\n    normalTangentSpace = normalize(normalTangentSpace);\\n\\\n\\n\\\n    // get ratios for alignment of the new normal vector with a vector perpendicular to the tangent plane\\n\\\n    float tsPerturbationRatio = clamp(dot(normalTangentSpace, vec3(0.0, 0.0, 1.0)), 0.0, 1.0);\\n\\\n\\n\\\n    // fade out water effect as specular map value decreases\\n\\\n    material.alpha = mix(blendColor.a, baseWaterColor.a, specularMapValue) * specularMapValue;\\n\\\n\\n\\\n    // base color is a blend of the water and non-water color based on the value from the specular map\\n\\\n    // may need a uniform blend factor to better control this\\n\\\n    material.diffuse = mix(blendColor.rgb, baseWaterColor.rgb, specularMapValue);\\n\\\n\\n\\\n    // diffuse highlights are based on how perturbed the normal is\\n\\\n    material.diffuse += (0.1 * tsPerturbationRatio);\\n\\\n\\n\\\n    material.diffuse = material.diffuse;\\n\\\n\\n\\\n    material.normal = normalize(materialInput.tangentToEyeMatrix * normalTangentSpace);\\n\\\n\\n\\\n    material.specular = specularIntensity;\\n\\\n    material.shininess = 10.0;\\n\\\n\\n\\\n    return material;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void filterByPassType(vec4 featureColor)\\n\\\n{\\n\\\n    bool styleTranslucent = (featureColor.a != 1.0);\\n\\\n    // Only render translucent features in the translucent pass (if the style or the original command has translucency).\\n\\\n    if (czm_pass == czm_passTranslucent && !styleTranslucent && !model_commandTranslucent)\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n    // If the current pass is not the translucent pass and the style is not translucent, don't render the feature.\\n\\\n    else if (czm_pass != czm_passTranslucent && styleTranslucent)\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n}\\n\\\n\\n\\\nvoid cpuStylingStage(inout czm_modelMaterial material, SelectedFeature feature)\\n\\\n{\\n\\\n    vec4 featureColor = feature.color;\\n\\\n\\n\\\n    if (featureColor.a == 0.0)\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    // If a feature ID vertex attribute is used, the pass type filter is applied in the vertex shader.\\n\\\n    // So, we only apply in in the fragment shader if the feature ID texture is used.\\n\\\n    #ifdef HAS_SELECTED_FEATURE_ID_TEXTURE\\n\\\n    filterByPassType(featureColor);\\n\\\n    #endif\\n\\\n\\n\\\n    featureColor = czm_gammaCorrect(featureColor);\\n\\\n\\n\\\n    float highlight = ceil(model_colorBlend);\\n\\\n    material.diffuse *= mix(featureColor.rgb, vec3(1.0), highlight);\\n\\\n    material.alpha *= featureColor.a;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void filterByPassType(inout vec3 positionMC, vec4 featureColor)\\n\\\n{\\n\\\n    bool styleTranslucent = (featureColor.a != 1.0);\\n\\\n    // Only render translucent features in the translucent pass (if the style or the original command has translucency).\\n\\\n    if (czm_pass == czm_passTranslucent && !styleTranslucent && !model_commandTranslucent)\\n\\\n    {\\n\\\n        positionMC *= 0.0;\\n\\\n    }\\n\\\n    // If the current pass is not the transluceny pass and the style is not translucent, don't rendeer the feature.\\n\\\n    else if (czm_pass != czm_passTranslucent && styleTranslucent)\\n\\\n    {\\n\\\n        positionMC *= 0.0;\\n\\\n    }\\n\\\n}\\n\\\n\\n\\\nvoid cpuStylingStage(inout vec3 positionMC, inout SelectedFeature feature)\\n\\\n{\\n\\\n    float show = ceil(feature.color.a);\\n\\\n    positionMC *= show;\\n\\\n\\n\\\n    #ifdef HAS_SELECTED_FEATURE_ID_ATTRIBUTE\\n\\\n    filterByPassType(positionMC, feature.color);\\n\\\n    #endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void customShaderStage(\\n\\\n    inout czm_modelMaterial material,\\n\\\n    ProcessedAttributes attributes,\\n\\\n    FeatureIds featureIds,\\n\\\n    Metadata metadata\\n\\\n) {\\n\\\n    // FragmentInput and initializeInputStruct() are dynamically generated in JS, \\n\\\n    // see CustomShaderPipelineStage.js\\n\\\n    FragmentInput fsInput;\\n\\\n    initializeInputStruct(fsInput, attributes);\\n\\\n    fsInput.featureIds = featureIds;\\n\\\n    fsInput.metadata = metadata;\\n\\\n    fragmentMain(fsInput, material);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void customShaderStage(\\n\\\n    inout czm_modelVertexOutput vsOutput, \\n\\\n    inout ProcessedAttributes attributes, \\n\\\n    FeatureIds featureIds,\\n\\\n    Metadata metadata\\n\\\n) {\\n\\\n    // VertexInput and initializeInputStruct() are dynamically generated in JS, \\n\\\n    // see CustomShaderPipelineStage.js\\n\\\n    VertexInput vsInput;\\n\\\n    initializeInputStruct(vsInput, attributes);\\n\\\n    vsInput.featureIds = featureIds;\\n\\\n    vsInput.metadata = metadata;\\n\\\n    vertexMain(vsInput, vsOutput);\\n\\\n    attributes.positionMC = vsOutput.positionMC;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void featureIdStage(out FeatureIds featureIds, ProcessedAttributes attributes) {\\n\\\n  initializeFeatureIds(featureIds, attributes);\\n\\\n  initializeFeatureIdAliases(featureIds);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void featureIdStage(out FeatureIds featureIds, ProcessedAttributes attributes) \\n\\\n{\\n\\\n  initializeFeatureIds(featureIds, attributes);\\n\\\n  initializeFeatureIdAliases(featureIds);\\n\\\n  setFeatureIdVaryings();\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void geometryStage(out ProcessedAttributes attributes)\\n\\\n{\\n\\\n  attributes.positionMC = v_positionMC;\\n\\\n  attributes.positionEC = v_positionEC;\\n\\\n\\n\\\n  #ifdef COMPUTE_POSITION_WC\\n\\\n  attributes.positionWC = v_positionWC;\\n\\\n  #endif\\n\\\n\\n\\\n  #ifdef HAS_NORMALS\\n\\\n  // renormalize after interpolation\\n\\\n  attributes.normalEC = normalize(v_normalEC);\\n\\\n  #endif\\n\\\n\\n\\\n  #ifdef HAS_TANGENTS\\n\\\n  attributes.tangentEC = normalize(v_tangentEC);\\n\\\n  #endif\\n\\\n\\n\\\n  #ifdef HAS_BITANGENTS\\n\\\n  attributes.bitangentEC = normalize(v_bitangentEC);\\n\\\n  #endif\\n\\\n\\n\\\n  // Everything else is dynamically generated in GeometryPipelineStage\\n\\\n  setDynamicVaryings(attributes);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void geometryStage(inout ProcessedAttributes attributes, mat4 modelView, mat3 normal) \\n\\\n{\\n\\\n    // Compute positions in different coordinate systems\\n\\\n    vec3 positionMC = attributes.positionMC;\\n\\\n    v_positionMC = positionMC;\\n\\\n    v_positionEC = (modelView * vec4(positionMC, 1.0)).xyz;\\n\\\n\\n\\\n    #ifdef USE_2D_POSITIONS\\n\\\n    vec3 position2D = attributes.position2D;\\n\\\n    vec3 positionEC = (u_modelView2D * vec4(position2D, 1.0)).xyz;\\n\\\n    gl_Position = czm_projection * vec4(positionEC, 1.0);\\n\\\n    #else\\n\\\n    gl_Position = czm_projection * vec4(v_positionEC, 1.0);\\n\\\n    #endif\\n\\\n\\n\\\n    // Sometimes the fragment shader needs this (e.g. custom shaders)\\n\\\n    #ifdef COMPUTE_POSITION_WC\\n\\\n    // Note that this is a 32-bit position which may result in jitter on small\\n\\\n    // scales.\\n\\\n    v_positionWC = (czm_model * vec4(positionMC, 1.0)).xyz;\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_NORMALS\\n\\\n    v_normalEC = normal * attributes.normalMC;\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_TANGENTS\\n\\\n    v_tangentEC = normalize(normal * attributes.tangentMC);    \\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_BITANGENTS\\n\\\n    v_bitangentEC = normalize(normal * attributes.bitangentMC);\\n\\\n    #endif\\n\\\n\\n\\\n    // All other varyings need to be dynamically generated in\\n\\\n    // GeometryPipelineStage\\n\\\n    setDynamicVaryings(attributes);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"vec3 proceduralIBL(\\n\\\n    vec3 positionEC,\\n\\\n    vec3 normalEC,\\n\\\n    vec3 lightDirectionEC,\\n\\\n    vec3 lightColorHdr,\\n\\\n    czm_pbrParameters pbrParameters\\n\\\n) {\\n\\\n    vec3 v = -positionEC;\\n\\\n    vec3 positionWC = vec3(czm_inverseView * vec4(positionEC, 1.0));\\n\\\n    vec3 vWC = -normalize(positionWC);\\n\\\n    vec3 l = normalize(lightDirectionEC);\\n\\\n    vec3 n = normalEC;\\n\\\n    vec3 r = normalize(czm_inverseViewRotation * normalize(reflect(v, n)));\\n\\\n\\n\\\n    float NdotL = clamp(dot(n, l), 0.001, 1.0);\\n\\\n    float NdotV = abs(dot(n, v)) + 0.001;\\n\\\n\\n\\\n    // Figure out if the reflection vector hits the ellipsoid\\n\\\n    float vertexRadius = length(positionWC);\\n\\\n    float horizonDotNadir = 1.0 - min(1.0, czm_ellipsoidRadii.x / vertexRadius);\\n\\\n    float reflectionDotNadir = dot(r, normalize(positionWC));\\n\\\n    // Flipping the X vector is a cheap way to get the inverse of czm_temeToPseudoFixed, since that's a rotation about Z.\\n\\\n    r.x = -r.x;\\n\\\n    r = -normalize(czm_temeToPseudoFixed * r);\\n\\\n    r.x = -r.x;\\n\\\n\\n\\\n    vec3 diffuseColor = pbrParameters.diffuseColor;\\n\\\n    float roughness = pbrParameters.roughness;\\n\\\n    vec3 specularColor = pbrParameters.f0;\\n\\\n\\n\\\n    float inverseRoughness = 1.04 - roughness;\\n\\\n    inverseRoughness *= inverseRoughness;\\n\\\n    vec3 sceneSkyBox = textureCube(czm_environmentMap, r).rgb * inverseRoughness;\\n\\\n\\n\\\n    float atmosphereHeight = 0.05;\\n\\\n    float blendRegionSize = 0.1 * ((1.0 - inverseRoughness) * 8.0 + 1.1 - horizonDotNadir);\\n\\\n    float blendRegionOffset = roughness * -1.0;\\n\\\n    float farAboveHorizon = clamp(horizonDotNadir - blendRegionSize * 0.5 + blendRegionOffset, 1.0e-10 - blendRegionSize, 0.99999);\\n\\\n    float aroundHorizon = clamp(horizonDotNadir + blendRegionSize * 0.5, 1.0e-10 - blendRegionSize, 0.99999);\\n\\\n    float farBelowHorizon = clamp(horizonDotNadir + blendRegionSize * 1.5, 1.0e-10 - blendRegionSize, 0.99999);\\n\\\n    float smoothstepHeight = smoothstep(0.0, atmosphereHeight, horizonDotNadir);\\n\\\n    vec3 belowHorizonColor = mix(vec3(0.1, 0.15, 0.25), vec3(0.4, 0.7, 0.9), smoothstepHeight);\\n\\\n    vec3 nadirColor = belowHorizonColor * 0.5;\\n\\\n    vec3 aboveHorizonColor = mix(vec3(0.9, 1.0, 1.2), belowHorizonColor, roughness * 0.5);\\n\\\n    vec3 blueSkyColor = mix(vec3(0.18, 0.26, 0.48), aboveHorizonColor, reflectionDotNadir * inverseRoughness * 0.5 + 0.75);\\n\\\n    vec3 zenithColor = mix(blueSkyColor, sceneSkyBox, smoothstepHeight);\\n\\\n    vec3 blueSkyDiffuseColor = vec3(0.7, 0.85, 0.9); \\n\\\n    float diffuseIrradianceFromEarth = (1.0 - horizonDotNadir) * (reflectionDotNadir * 0.25 + 0.75) * smoothstepHeight;  \\n\\\n    float diffuseIrradianceFromSky = (1.0 - smoothstepHeight) * (1.0 - (reflectionDotNadir * 0.25 + 0.25));\\n\\\n    vec3 diffuseIrradiance = blueSkyDiffuseColor * clamp(diffuseIrradianceFromEarth + diffuseIrradianceFromSky, 0.0, 1.0);\\n\\\n    float notDistantRough = (1.0 - horizonDotNadir * roughness * 0.8);\\n\\\n    vec3 specularIrradiance = mix(zenithColor, aboveHorizonColor, smoothstep(farAboveHorizon, aroundHorizon, reflectionDotNadir) * notDistantRough);\\n\\\n    specularIrradiance = mix(specularIrradiance, belowHorizonColor, smoothstep(aroundHorizon, farBelowHorizon, reflectionDotNadir) * inverseRoughness);\\n\\\n    specularIrradiance = mix(specularIrradiance, nadirColor, smoothstep(farBelowHorizon, 1.0, reflectionDotNadir) * inverseRoughness);\\n\\\n\\n\\\n    // Luminance model from page 40 of http://silviojemma.com/public/papers/lighting/spherical-harmonic-lighting.pdf\\n\\\n    #ifdef USE_SUN_LUMINANCE \\n\\\n    // Angle between sun and zenith\\n\\\n    float LdotZenith = clamp(dot(normalize(czm_inverseViewRotation * l), vWC), 0.001, 1.0);\\n\\\n    float S = acos(LdotZenith);\\n\\\n    // Angle between zenith and current pixel\\n\\\n    float NdotZenith = clamp(dot(normalize(czm_inverseViewRotation * n), vWC), 0.001, 1.0);\\n\\\n    // Angle between sun and current pixel\\n\\\n    float gamma = acos(NdotL);\\n\\\n    float numerator = ((0.91 + 10.0 * exp(-3.0 * gamma) + 0.45 * pow(NdotL, 2.0)) * (1.0 - exp(-0.32 / NdotZenith)));\\n\\\n    float denominator = (0.91 + 10.0 * exp(-3.0 * S) + 0.45 * pow(LdotZenith,2.0)) * (1.0 - exp(-0.32));\\n\\\n    float luminance = model_luminanceAtZenith * (numerator / denominator);\\n\\\n    #endif \\n\\\n\\n\\\n    vec2 brdfLut = texture2D(czm_brdfLut, vec2(NdotV, roughness)).rg;\\n\\\n    vec3 iblColor = (diffuseIrradiance * diffuseColor * model_iblFactor.x) + (specularIrradiance * czm_srgbToLinear(specularColor * brdfLut.x + brdfLut.y) * model_iblFactor.y);\\n\\\n    float maximumComponent = max(max(lightColorHdr.x, lightColorHdr.y), lightColorHdr.z);\\n\\\n    vec3 lightColor = lightColorHdr / max(maximumComponent, 1.0);\\n\\\n    iblColor *= lightColor;\\n\\\n\\n\\\n    #ifdef USE_SUN_LUMINANCE \\n\\\n    iblColor *= luminance;\\n\\\n    #endif\\n\\\n\\n\\\n    return iblColor;\\n\\\n}\\n\\\n\\n\\\nvec3 textureIBL(\\n\\\n    vec3 positionEC,\\n\\\n    vec3 normalEC,\\n\\\n    vec3 lightDirectionEC,\\n\\\n    czm_pbrParameters pbrParameters\\n\\\n) {\\n\\\n    vec3 diffuseColor = pbrParameters.diffuseColor;\\n\\\n    float roughness = pbrParameters.roughness;\\n\\\n    vec3 specularColor = pbrParameters.f0;\\n\\\n\\n\\\n    vec3 v = -positionEC;\\n\\\n    vec3 n = normalEC;\\n\\\n    vec3 l = normalize(lightDirectionEC);\\n\\\n    vec3 h = normalize(v + l);\\n\\\n\\n\\\n    float NdotV = abs(dot(n, v)) + 0.001;\\n\\\n    float VdotH = clamp(dot(v, h), 0.0, 1.0);\\n\\\n\\n\\\n    const mat3 yUpToZUp = mat3(\\n\\\n        -1.0, 0.0, 0.0,\\n\\\n        0.0, 0.0, -1.0, \\n\\\n        0.0, 1.0, 0.0\\n\\\n    ); \\n\\\n    vec3 cubeDir = normalize(yUpToZUp * model_iblReferenceFrameMatrix * normalize(reflect(-v, n))); \\n\\\n\\n\\\n    #ifdef DIFFUSE_IBL \\n\\\n        #ifdef CUSTOM_SPHERICAL_HARMONICS\\n\\\n        vec3 diffuseIrradiance = czm_sphericalHarmonics(cubeDir, model_sphericalHarmonicCoefficients); \\n\\\n        #else\\n\\\n        vec3 diffuseIrradiance = czm_sphericalHarmonics(cubeDir, czm_sphericalHarmonicCoefficients); \\n\\\n        #endif \\n\\\n    #else \\n\\\n    vec3 diffuseIrradiance = vec3(0.0); \\n\\\n    #endif \\n\\\n\\n\\\n    #ifdef SPECULAR_IBL\\n\\\n    vec3 r0 = specularColor.rgb;\\n\\\n    float reflectance = max(max(r0.r, r0.g), r0.b);\\n\\\n    vec3 r90 = vec3(clamp(reflectance * 25.0, 0.0, 1.0));\\n\\\n    vec3 F = fresnelSchlick2(r0, r90, VdotH);\\n\\\n    \\n\\\n    vec2 brdfLut = texture2D(czm_brdfLut, vec2(NdotV, roughness)).rg;\\n\\\n      #ifdef CUSTOM_SPECULAR_IBL \\n\\\n      vec3 specularIBL = czm_sampleOctahedralProjection(model_specularEnvironmentMaps, model_specularEnvironmentMapsSize, cubeDir, roughness * model_specularEnvironmentMapsMaximumLOD, model_specularEnvironmentMapsMaximumLOD);\\n\\\n      #else \\n\\\n      vec3 specularIBL = czm_sampleOctahedralProjection(czm_specularEnvironmentMaps, czm_specularEnvironmentMapSize, cubeDir,  roughness * czm_specularEnvironmentMapsMaximumLOD, czm_specularEnvironmentMapsMaximumLOD);\\n\\\n      #endif \\n\\\n    specularIBL *= F * brdfLut.x + brdfLut.y;\\n\\\n    #else \\n\\\n    vec3 specularIBL = vec3(0.0); \\n\\\n    #endif\\n\\\n\\n\\\n    return diffuseColor * diffuseIrradiance + specularColor * specularIBL;\\n\\\n}\\n\\\n\\n\\\nvec3 imageBasedLightingStage(\\n\\\n    vec3 positionEC,\\n\\\n    vec3 normalEC,\\n\\\n    vec3 lightDirectionEC,\\n\\\n    vec3 lightColorHdr,\\n\\\n    czm_pbrParameters pbrParameters\\n\\\n) {\\n\\\n  #if defined(DIFFUSE_IBL) || defined(SPECULAR_IBL)\\n\\\n  // Environment maps were provided, use them for IBL\\n\\\n  return textureIBL(\\n\\\n      positionEC,\\n\\\n      normalEC,\\n\\\n      lightDirectionEC,\\n\\\n      pbrParameters\\n\\\n  );\\n\\\n  #else\\n\\\n  // Use the procedural IBL if there are no environment maps\\n\\\n  return proceduralIBL(\\n\\\n      positionEC,\\n\\\n      normalEC,\\n\\\n      lightDirectionEC,\\n\\\n      lightColorHdr,\\n\\\n      pbrParameters\\n\\\n  );\\n\\\n  #endif\\n\\\n}\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"mat4 getInstancingTransform()\\n\\\n{\\n\\\n    mat4 instancingTransform;\\n\\\n\\n\\\n    #ifdef HAS_INSTANCE_MATRICES\\n\\\n    instancingTransform = mat4(\\n\\\n        a_instancingTransformRow0.x, a_instancingTransformRow1.x, a_instancingTransformRow2.x, 0.0, // Column 1\\n\\\n        a_instancingTransformRow0.y, a_instancingTransformRow1.y, a_instancingTransformRow2.y, 0.0, // Column 2\\n\\\n        a_instancingTransformRow0.z, a_instancingTransformRow1.z, a_instancingTransformRow2.z, 0.0, // Column 3\\n\\\n        a_instancingTransformRow0.w, a_instancingTransformRow1.w, a_instancingTransformRow2.w, 1.0  // Column 4\\n\\\n    );\\n\\\n    #else\\n\\\n    vec3 translation = vec3(0.0, 0.0, 0.0);\\n\\\n    vec3 scale = vec3(1.0, 1.0, 1.0);\\n\\\n    \\n\\\n        #ifdef HAS_INSTANCE_TRANSLATION\\n\\\n        translation = a_instanceTranslation;\\n\\\n        #endif\\n\\\n        #ifdef HAS_INSTANCE_SCALE\\n\\\n        scale = a_instanceScale;\\n\\\n        #endif\\n\\\n\\n\\\n    instancingTransform = mat4(\\n\\\n        scale.x, 0.0, 0.0, 0.0,\\n\\\n        0.0, scale.y, 0.0, 0.0,\\n\\\n        0.0, 0.0, scale.z, 0.0,\\n\\\n        translation.x, translation.y, translation.z, 1.0\\n\\\n    ); \\n\\\n    #endif\\n\\\n\\n\\\n    return instancingTransform;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void instancingStage(inout vec3 positionMC) \\n\\\n{\\n\\\n    mat4 instancingTransform = getInstancingTransform();\\n\\\n\\n\\\n    positionMC = (instancingTransform * vec4(positionMC, 1.0)).xyz;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void legacyInstancingStage(inout vec3 positionMC, out mat4 instanceModelView, out mat3 instanceModelViewInverseTranspose)\\n\\\n{\\n\\\n    mat4 instancingTransform = getInstancingTransform();\\n\\\n\\n\\\n    mat4 instanceModel = instancingTransform * u_instance_nodeTransform;\\n\\\n    instanceModelView = u_instance_modifiedModelView;\\n\\\n    instanceModelViewInverseTranspose = mat3(u_instance_modifiedModelView * instanceModel);\\n\\\n\\n\\\n    positionMC = (instanceModel * vec4(positionMC, 1.0)).xyz;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef LIGHTING_PBR\\n\\\nvec3 computePbrLighting(czm_modelMaterial inputMaterial, ProcessedAttributes attributes)\\n\\\n{\\n\\\n    czm_pbrParameters pbrParameters;\\n\\\n    pbrParameters.diffuseColor = inputMaterial.diffuse;\\n\\\n    pbrParameters.f0 = inputMaterial.specular;\\n\\\n    pbrParameters.roughness = inputMaterial.roughness;\\n\\\n    \\n\\\n    #ifdef USE_CUSTOM_LIGHT_COLOR\\n\\\n    vec3 lightColorHdr = model_lightColorHdr;\\n\\\n    #else\\n\\\n    vec3 lightColorHdr = czm_lightColorHdr;\\n\\\n    #endif\\n\\\n\\n\\\n    vec3 color = inputMaterial.diffuse;\\n\\\n    #ifdef HAS_NORMALS\\n\\\n    color = czm_pbrLighting(\\n\\\n        attributes.positionEC,\\n\\\n        inputMaterial.normalEC,\\n\\\n        czm_lightDirectionEC,\\n\\\n        lightColorHdr,\\n\\\n        pbrParameters\\n\\\n    );\\n\\\n\\n\\\n        #ifdef USE_IBL_LIGHTING\\n\\\n        color += imageBasedLightingStage(\\n\\\n            attributes.positionEC,\\n\\\n            inputMaterial.normalEC,\\n\\\n            czm_lightDirectionEC,\\n\\\n            lightColorHdr,\\n\\\n            pbrParameters\\n\\\n        );\\n\\\n        #endif\\n\\\n    #endif\\n\\\n\\n\\\n    color *= inputMaterial.occlusion;\\n\\\n    color += inputMaterial.emissive;\\n\\\n\\n\\\n    // In HDR mode, the frame buffer is in linear color space. The\\n\\\n    // post-processing stages (see PostProcessStageCollection) will handle\\n\\\n    // tonemapping. However, if HDR is not enabled, we must tonemap else large\\n\\\n    // values may be clamped to 1.0\\n\\\n    #ifndef HDR \\n\\\n    color = czm_acesTonemapping(color);\\n\\\n    #endif \\n\\\n\\n\\\n    return color;\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\nvoid lightingStage(inout czm_modelMaterial material, ProcessedAttributes attributes)\\n\\\n{\\n\\\n    // Even though the lighting will only set the diffuse color,\\n\\\n    // pass all other properties so further stages have access to them.\\n\\\n    vec3 color = vec3(0.0);\\n\\\n\\n\\\n    #ifdef LIGHTING_PBR\\n\\\n    color = computePbrLighting(material, attributes);\\n\\\n    #else // unlit\\n\\\n    color = material.diffuse;\\n\\\n    #endif\\n\\\n\\n\\\n    // If HDR is not enabled, the frame buffer stores sRGB colors rather than\\n\\\n    // linear colors so the linear value must be converted.\\n\\\n    #ifndef HDR\\n\\\n    color = czm_linearToSrgb(color);\\n\\\n    #endif\\n\\\n\\n\\\n    material.diffuse = color;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"// If the style color is white, it implies the feature has not been styled.\\n\\\nbool isDefaultStyleColor(vec3 color)\\n\\\n{\\n\\\n    return all(greaterThan(color, vec3(1.0 - czm_epsilon3)));\\n\\\n}\\n\\\n\\n\\\nvec3 blend(vec3 sourceColor, vec3 styleColor, float styleColorBlend)\\n\\\n{\\n\\\n    vec3 blendColor = mix(sourceColor, styleColor, styleColorBlend);\\n\\\n    vec3 color = isDefaultStyleColor(styleColor.rgb) ? sourceColor : blendColor;\\n\\\n    return color;\\n\\\n}\\n\\\n\\n\\\nvec2 computeTextureTransform(vec2 texCoord, mat3 textureTransform)\\n\\\n{\\n\\\n    return vec2(textureTransform * vec3(texCoord, 1.0));\\n\\\n}\\n\\\n\\n\\\n#ifdef HAS_NORMALS\\n\\\nvec3 computeNormal(ProcessedAttributes attributes)\\n\\\n{\\n\\\n    // Geometry normal. This is already normalized \\n\\\n    vec3 ng = attributes.normalEC;\\n\\\n\\n\\\n    vec3 normal = ng;\\n\\\n    #if defined(HAS_NORMAL_TEXTURE) && !defined(USE_WIREFRAME)\\n\\\n    vec2 normalTexCoords = TEXCOORD_NORMAL;\\n\\\n        #ifdef HAS_NORMAL_TEXTURE_TRANSFORM\\n\\\n        normalTexCoords = computeTextureTransform(normalTexCoords, u_normalTextureTransform);\\n\\\n        #endif\\n\\\n\\n\\\n        // If HAS_BITANGENTS is set, then HAS_TANGENTS is also set\\n\\\n        #ifdef HAS_BITANGENTS\\n\\\n        vec3 t = attributes.tangentEC;\\n\\\n        vec3 b = attributes.bitangentEC;\\n\\\n        mat3 tbn = mat3(t, b, ng);\\n\\\n        vec3 n = texture2D(u_normalTexture, normalTexCoords).rgb;\\n\\\n        normal = normalize(tbn * (2.0 * n - 1.0));\\n\\\n        #elif defined(GL_OES_standard_derivatives)\\n\\\n        // Compute tangents\\n\\\n        vec3 positionEC = attributes.positionEC;\\n\\\n        vec3 pos_dx = dFdx(positionEC);\\n\\\n        vec3 pos_dy = dFdy(positionEC);\\n\\\n        vec3 tex_dx = dFdx(vec3(normalTexCoords,0.0));\\n\\\n        vec3 tex_dy = dFdy(vec3(normalTexCoords,0.0));\\n\\\n        vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\\n\\\n        t = normalize(t - ng * dot(ng, t));\\n\\\n        vec3 b = normalize(cross(ng, t));\\n\\\n        mat3 tbn = mat3(t, b, ng);\\n\\\n        vec3 n = texture2D(u_normalTexture, normalTexCoords).rgb;\\n\\\n        normal = normalize(tbn * (2.0 * n - 1.0));\\n\\\n        #endif\\n\\\n    #endif\\n\\\n\\n\\\n    return normal;\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\nvoid materialStage(inout czm_modelMaterial material, ProcessedAttributes attributes, SelectedFeature feature)\\n\\\n{\\n\\\n\\n\\\n    #ifdef HAS_NORMALS\\n\\\n    material.normalEC = computeNormal(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    vec4 baseColorWithAlpha = vec4(1.0);\\n\\\n    // Regardless of whether we use PBR, set a base color\\n\\\n    #ifdef HAS_BASE_COLOR_TEXTURE\\n\\\n    vec2 baseColorTexCoords = TEXCOORD_BASE_COLOR;\\n\\\n\\n\\\n        #ifdef HAS_BASE_COLOR_TEXTURE_TRANSFORM\\n\\\n        baseColorTexCoords = computeTextureTransform(baseColorTexCoords, u_baseColorTextureTransform);\\n\\\n        #endif\\n\\\n\\n\\\n    baseColorWithAlpha = czm_srgbToLinear(texture2D(u_baseColorTexture, baseColorTexCoords));\\n\\\n\\n\\\n        #ifdef HAS_BASE_COLOR_FACTOR\\n\\\n        baseColorWithAlpha *= u_baseColorFactor;\\n\\\n        #endif\\n\\\n    #elif defined(HAS_BASE_COLOR_FACTOR)\\n\\\n    baseColorWithAlpha = u_baseColorFactor;\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_COLOR_0\\n\\\n    vec4 color = attributes.color_0;\\n\\\n        // .pnts files store colors in the sRGB color space\\n\\\n        #ifdef HAS_SRGB_COLOR\\n\\\n        color = czm_srgbToLinear(color);\\n\\\n        #endif\\n\\\n    baseColorWithAlpha *= color;\\n\\\n    #endif\\n\\\n\\n\\\n    material.diffuse = baseColorWithAlpha.rgb;\\n\\\n    material.alpha = baseColorWithAlpha.a;\\n\\\n\\n\\\n    #ifdef USE_CPU_STYLING\\n\\\n    material.diffuse = blend(material.diffuse, feature.color.rgb, model_colorBlend);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_OCCLUSION_TEXTURE\\n\\\n    vec2 occlusionTexCoords = TEXCOORD_OCCLUSION;\\n\\\n        #ifdef HAS_OCCLUSION_TEXTURE_TRANSFORM\\n\\\n        occlusionTexCoords = computeTextureTransform(occlusionTexCoords, u_occlusionTextureTransform);\\n\\\n        #endif\\n\\\n    material.occlusion = texture2D(u_occlusionTexture, occlusionTexCoords).r;\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_EMISSIVE_TEXTURE\\n\\\n    vec2 emissiveTexCoords = TEXCOORD_EMISSIVE;\\n\\\n        #ifdef HAS_EMISSIVE_TEXTURE_TRANSFORM\\n\\\n        emissiveTexCoords = computeTextureTransform(emissiveTexCoords, u_emissiveTextureTransform);\\n\\\n        #endif\\n\\\n\\n\\\n    vec3 emissive = czm_srgbToLinear(texture2D(u_emissiveTexture, emissiveTexCoords).rgb);\\n\\\n        #ifdef HAS_EMISSIVE_FACTOR\\n\\\n        emissive *= u_emissiveFactor;\\n\\\n        #endif\\n\\\n    material.emissive = emissive;\\n\\\n    #elif defined(HAS_EMISSIVE_FACTOR)\\n\\\n    material.emissive = u_emissiveFactor;\\n\\\n    #endif\\n\\\n\\n\\\n    #if defined(LIGHTING_PBR) && defined(USE_SPECULAR_GLOSSINESS)\\n\\\n        #ifdef HAS_SPECULAR_GLOSSINESS_TEXTURE\\n\\\n        vec2 specularGlossinessTexCoords = TEXCOORD_SPECULAR_GLOSSINESS;\\n\\\n          #ifdef HAS_SPECULAR_GLOSSINESS_TEXTURE_TRANSFORM\\n\\\n          specularGlossinessTexCoords = computeTextureTransform(specularGlossinessTexCoords, u_specularGlossinessTextureTransform);\\n\\\n          #endif\\n\\\n\\n\\\n        vec4 specularGlossiness = czm_srgbToLinear(texture2D(u_specularGlossinessTexture, specularGlossinessTexCoords));\\n\\\n        vec3 specular = specularGlossiness.rgb;\\n\\\n        float glossiness = specularGlossiness.a;\\n\\\n            #ifdef HAS_SPECULAR_FACTOR\\n\\\n            specular *= u_specularFactor;\\n\\\n            #endif\\n\\\n\\n\\\n            #ifdef HAS_GLOSSINESS_FACTOR\\n\\\n            glossiness *= u_glossinessFactor;\\n\\\n            #endif\\n\\\n        #else\\n\\\n            #ifdef HAS_SPECULAR_FACTOR\\n\\\n            vec3 specular = clamp(u_specularFactor, vec3(0.0), vec3(1.0));\\n\\\n            #else\\n\\\n            vec3 specular = vec3(1.0);\\n\\\n            #endif\\n\\\n\\n\\\n            #ifdef HAS_GLOSSINESS_FACTOR\\n\\\n            float glossiness = clamp(u_glossinessFactor, 0.0, 1.0);\\n\\\n            #else\\n\\\n            float glossiness = 1.0;\\n\\\n            #endif\\n\\\n        #endif\\n\\\n\\n\\\n        #ifdef HAS_DIFFUSE_TEXTURE\\n\\\n        vec2 diffuseTexCoords = TEXCOORD_DIFFUSE;\\n\\\n            #ifdef HAS_DIFFUSE_TEXTURE_TRANSFORM\\n\\\n            diffuseTexCoords = computeTextureTransform(diffuseTexCoords, u_diffuseTextureTransform);\\n\\\n            #endif\\n\\\n\\n\\\n        vec4 diffuse = czm_srgbToLinear(texture2D(u_diffuseTexture, diffuseTexCoords));\\n\\\n            #ifdef HAS_DIFFUSE_FACTOR\\n\\\n            diffuse *= u_diffuseFactor;\\n\\\n            #endif\\n\\\n        #elif defined(HAS_DIFFUSE_FACTOR)\\n\\\n        vec4 diffuse = clamp(u_diffuseFactor, vec4(0.0), vec4(1.0));\\n\\\n        #else\\n\\\n        vec4 diffuse = vec4(1.0);\\n\\\n        #endif\\n\\\n    czm_pbrParameters parameters = czm_pbrSpecularGlossinessMaterial(\\n\\\n      diffuse.rgb,\\n\\\n      specular,\\n\\\n      glossiness\\n\\\n    );\\n\\\n    material.diffuse = parameters.diffuseColor;\\n\\\n    // the specular glossiness extension's alpha overrides anything set\\n\\\n    // by the base material.\\n\\\n    material.alpha = diffuse.a;\\n\\\n    material.specular = parameters.f0;\\n\\\n    material.roughness = parameters.roughness;\\n\\\n    #elif defined(LIGHTING_PBR)\\n\\\n        #ifdef HAS_METALLIC_ROUGHNESS_TEXTURE\\n\\\n        vec2 metallicRoughnessTexCoords = TEXCOORD_METALLIC_ROUGHNESS;\\n\\\n            #ifdef HAS_METALLIC_ROUGHNESS_TEXTURE_TRANSFORM\\n\\\n            metallicRoughnessTexCoords = computeTextureTransform(metallicRoughnessTexCoords, u_metallicRoughnessTextureTransform);\\n\\\n            #endif\\n\\\n\\n\\\n        vec3 metallicRoughness = texture2D(u_metallicRoughnessTexture, metallicRoughnessTexCoords).rgb;\\n\\\n        float metalness = clamp(metallicRoughness.b, 0.0, 1.0);\\n\\\n        float roughness = clamp(metallicRoughness.g, 0.04, 1.0);\\n\\\n            #ifdef HAS_METALLIC_FACTOR\\n\\\n            metalness *= u_metallicFactor;\\n\\\n            #endif\\n\\\n\\n\\\n            #ifdef HAS_ROUGHNESS_FACTOR\\n\\\n            roughness *= u_roughnessFactor;\\n\\\n            #endif\\n\\\n        #else\\n\\\n            #ifdef HAS_METALLIC_FACTOR\\n\\\n            float metalness = clamp(u_metallicFactor, 0.0, 1.0);\\n\\\n            #else\\n\\\n            float metalness = 1.0;\\n\\\n            #endif\\n\\\n\\n\\\n            #ifdef HAS_ROUGHNESS_FACTOR\\n\\\n            float roughness = clamp(u_roughnessFactor, 0.04, 1.0);\\n\\\n            #else\\n\\\n            float roughness = 1.0;\\n\\\n            #endif\\n\\\n        #endif\\n\\\n    czm_pbrParameters parameters = czm_pbrMetallicRoughnessMaterial(\\n\\\n      material.diffuse,\\n\\\n      metalness,\\n\\\n      roughness\\n\\\n    );\\n\\\n    material.diffuse = parameters.diffuseColor;\\n\\\n    material.specular = parameters.f0;\\n\\\n    material.roughness = parameters.roughness;\\n\\\n    #endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void metadataStage(out Metadata metadata, ProcessedAttributes attributes)\\n\\\n{\\n\\\n  initializeMetadata(metadata, attributes);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void metadataStage(out Metadata metadata, ProcessedAttributes attributes)\\n\\\n{\\n\\\n  initializeMetadata(metadata, attributes);\\n\\\n  setMetadataVaryings();\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef USE_CLIPPING_PLANES_FLOAT_TEXTURE\\n\\\nvec4 getClippingPlane(\\n\\\n    highp sampler2D packedClippingPlanes,\\n\\\n    int clippingPlaneNumber,\\n\\\n    mat4 transform\\n\\\n) {\\n\\\n    int pixY = clippingPlaneNumber / CLIPPING_PLANES_TEXTURE_WIDTH;\\n\\\n    int pixX = clippingPlaneNumber - (pixY * CLIPPING_PLANES_TEXTURE_WIDTH);\\n\\\n    float pixelWidth = 1.0 / float(CLIPPING_PLANES_TEXTURE_WIDTH);\\n\\\n    float pixelHeight = 1.0 / float(CLIPPING_PLANES_TEXTURE_HEIGHT);\\n\\\n    float u = (float(pixX) + 0.5) * pixelWidth; // sample from center of pixel\\n\\\n    float v = (float(pixY) + 0.5) * pixelHeight;\\n\\\n    vec4 plane = texture2D(packedClippingPlanes, vec2(u, v));\\n\\\n    return czm_transformPlane(plane, transform);\\n\\\n}\\n\\\n#else\\n\\\n// Handle uint8 clipping texture instead\\n\\\nvec4 getClippingPlane(\\n\\\n    highp sampler2D packedClippingPlanes,\\n\\\n    int clippingPlaneNumber,\\n\\\n    mat4 transform\\n\\\n) {\\n\\\n    int clippingPlaneStartIndex = clippingPlaneNumber * 2; // clipping planes are two pixels each\\n\\\n    int pixY = clippingPlaneStartIndex / CLIPPING_PLANES_TEXTURE_WIDTH;\\n\\\n    int pixX = clippingPlaneStartIndex - (pixY * CLIPPING_PLANES_TEXTURE_WIDTH);\\n\\\n    float pixelWidth = 1.0 / float(CLIPPING_PLANES_TEXTURE_WIDTH);\\n\\\n    float pixelHeight = 1.0 / float(CLIPPING_PLANES_TEXTURE_HEIGHT);\\n\\\n    float u = (float(pixX) + 0.5) * pixelWidth; // sample from center of pixel\\n\\\n    float v = (float(pixY) + 0.5) * pixelHeight;\\n\\\n    vec4 oct32 = texture2D(packedClippingPlanes, vec2(u, v)) * 255.0;\\n\\\n    vec2 oct = vec2(oct32.x * 256.0 + oct32.y, oct32.z * 256.0 + oct32.w);\\n\\\n    vec4 plane;\\n\\\n    plane.xyz = czm_octDecode(oct, 65535.0);\\n\\\n    plane.w = czm_unpackFloat(texture2D(packedClippingPlanes, vec2(u + pixelWidth, v)));\\n\\\n    return czm_transformPlane(plane, transform);\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\nfloat clip(vec4 fragCoord, sampler2D clippingPlanes, mat4 clippingPlanesMatrix) {\\n\\\n    vec4 position = czm_windowToEyeCoordinates(fragCoord);\\n\\\n    vec3 clipNormal = vec3(0.0);\\n\\\n    vec3 clipPosition = vec3(0.0);\\n\\\n    float pixelWidth = czm_metersPerPixel(position);\\n\\\n    \\n\\\n    #ifdef UNION_CLIPPING_REGIONS\\n\\\n    float clipAmount; // For union planes, we want to get the min distance. So we set the initial value to the first plane distance in the loop below.\\n\\\n    #else\\n\\\n    float clipAmount = 0.0;\\n\\\n    bool clipped = true;\\n\\\n    #endif\\n\\\n\\n\\\n    for (int i = 0; i < CLIPPING_PLANES_LENGTH; ++i) {\\n\\\n        vec4 clippingPlane = getClippingPlane(clippingPlanes, i, clippingPlanesMatrix);\\n\\\n        clipNormal = clippingPlane.xyz;\\n\\\n        clipPosition = -clippingPlane.w * clipNormal;\\n\\\n        float amount = dot(clipNormal, (position.xyz - clipPosition)) / pixelWidth;\\n\\\n        \\n\\\n        #ifdef UNION_CLIPPING_REGIONS\\n\\\n        clipAmount = czm_branchFreeTernary(i == 0, amount, min(amount, clipAmount));\\n\\\n        if (amount <= 0.0) {\\n\\\n            discard;\\n\\\n        }\\n\\\n        #else\\n\\\n        clipAmount = max(amount, clipAmount);\\n\\\n        clipped = clipped && (amount <= 0.0);\\n\\\n        #endif\\n\\\n    }\\n\\\n\\n\\\n    #ifndef UNION_CLIPPING_REGIONS\\n\\\n    if (clipped) {\\n\\\n        discard;\\n\\\n    }\\n\\\n    #endif\\n\\\n    \\n\\\n    return clipAmount;\\n\\\n}\\n\\\n\\n\\\nvoid modelClippingPlanesStage(inout vec4 color)\\n\\\n{\\n\\\n    float clipDistance = clip(gl_FragCoord, model_clippingPlanes, model_clippingPlanesMatrix);\\n\\\n    vec4 clippingPlanesEdgeColor = vec4(1.0);\\n\\\n    clippingPlanesEdgeColor.rgb = model_clippingPlanesEdgeStyle.rgb;\\n\\\n    float clippingPlanesEdgeWidth = model_clippingPlanesEdgeStyle.a;\\n\\\n    \\n\\\n    if (clipDistance > 0.0 && clipDistance < clippingPlanesEdgeWidth) {\\n\\\n        color = clippingPlanesEdgeColor;\\n\\\n    }\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void modelColorStage(inout czm_modelMaterial material)\\n\\\n{\\n\\\n    material.diffuse = mix(material.diffuse, model_color.rgb, model_colorBlend);\\n\\\n    float highlight = ceil(model_colorBlend);\\n\\\n    material.diffuse *= mix(model_color.rgb, vec3(1.0), highlight);\\n\\\n    material.alpha *= model_color.a;\\n\\\n}\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#if defined(HAS_NORMALS) && !defined(HAS_TANGENTS) && !defined(LIGHTING_UNLIT)\\n\\\n    #ifdef GL_OES_standard_derivatives\\n\\\n    #extension GL_OES_standard_derivatives : enable\\n\\\n    #endif\\n\\\n#endif\\n\\\n\\n\\\nczm_modelMaterial defaultModelMaterial()\\n\\\n{\\n\\\n    czm_modelMaterial material;\\n\\\n    material.diffuse = vec3(1.0);\\n\\\n    material.specular = vec3(0.04); // dielectric (non-metal)\\n\\\n    material.roughness = 0.0;\\n\\\n    material.occlusion = 1.0;\\n\\\n    material.normalEC = vec3(0.0, 0.0, 1.0);\\n\\\n    material.emissive = vec3(0.0);\\n\\\n    material.alpha = 1.0;\\n\\\n    return material;\\n\\\n}\\n\\\n\\n\\\nvec4 handleAlpha(vec3 color, float alpha)\\n\\\n{\\n\\\n    #ifdef ALPHA_MODE_MASK\\n\\\n    if (alpha < u_alphaCutoff) {\\n\\\n        discard;\\n\\\n    }\\n\\\n    return vec4(color, 1.0);\\n\\\n    #elif defined(ALPHA_MODE_BLEND)\\n\\\n    return vec4(color, alpha);\\n\\\n    #else // OPAQUE\\n\\\n    return vec4(color, 1.0);\\n\\\n    #endif\\n\\\n}\\n\\\n\\n\\\nSelectedFeature selectedFeature;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    #ifdef HAS_MODEL_SPLITTER\\n\\\n    modelSplitterStage();\\n\\\n    #endif\\n\\\n\\n\\\n    czm_modelMaterial material = defaultModelMaterial();\\n\\\n\\n\\\n    ProcessedAttributes attributes;\\n\\\n    geometryStage(attributes);\\n\\\n\\n\\\n    FeatureIds featureIds;\\n\\\n    featureIdStage(featureIds, attributes);\\n\\\n\\n\\\n    Metadata metadata;\\n\\\n    metadataStage(metadata, attributes);\\n\\\n\\n\\\n    #ifdef HAS_SELECTED_FEATURE_ID\\n\\\n    selectedFeatureIdStage(selectedFeature, featureIds);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifndef CUSTOM_SHADER_REPLACE_MATERIAL\\n\\\n    materialStage(material, attributes, selectedFeature);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_CUSTOM_FRAGMENT_SHADER\\n\\\n    customShaderStage(material, attributes, featureIds, metadata);\\n\\\n    #endif\\n\\\n\\n\\\n    lightingStage(material, attributes);\\n\\\n\\n\\\n    #ifdef HAS_SELECTED_FEATURE_ID\\n\\\n    cpuStylingStage(material, selectedFeature);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_MODEL_COLOR\\n\\\n    modelColorStage(material);\\n\\\n    #endif\\n\\\n\\n\\\n    vec4 color = handleAlpha(material.diffuse, material.alpha);\\n\\\n\\n\\\n    #ifdef HAS_CLIPPING_PLANES\\n\\\n    modelClippingPlanesStage(color);\\n\\\n    #endif\\n\\\n\\n\\\n    gl_FragColor = color;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"precision highp float;\\n\\\n\\n\\\nczm_modelVertexOutput defaultVertexOutput(vec3 positionMC) {\\n\\\n    czm_modelVertexOutput vsOutput;\\n\\\n    vsOutput.positionMC = positionMC;\\n\\\n    vsOutput.pointSize = 1.0;\\n\\\n    return vsOutput;\\n\\\n}\\n\\\n\\n\\\nvoid main() \\n\\\n{\\n\\\n    // Initialize the attributes struct with all\\n\\\n    // attributes except quantized ones.\\n\\\n    ProcessedAttributes attributes;\\n\\\n    initializeAttributes(attributes);\\n\\\n\\n\\\n    // Dequantize the quantized ones and add them to the\\n\\\n    // attributes struct.\\n\\\n    #ifdef USE_DEQUANTIZATION\\n\\\n    dequantizationStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_MORPH_TARGETS\\n\\\n    morphTargetsStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_SKINNING\\n\\\n    skinningStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    // Compute the bitangent according to the formula in the glTF spec.\\n\\\n    // Normal and tangents can be affected by morphing and skinning, so\\n\\\n    // the bitangent should not be computed until their values are finalized.\\n\\\n    #ifdef HAS_BITANGENTS\\n\\\n    attributes.bitangentMC = normalize(cross(attributes.normalMC, attributes.tangentMC) * attributes.tangentSignMC);\\n\\\n    #endif\\n\\\n\\n\\\n    FeatureIds featureIds;\\n\\\n    featureIdStage(featureIds, attributes);\\n\\\n\\n\\\n    #ifdef HAS_SELECTED_FEATURE_ID\\n\\\n    SelectedFeature feature;\\n\\\n    selectedFeatureIdStage(feature, featureIds);\\n\\\n    cpuStylingStage(attributes.positionMC, feature);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef USE_2D_POSITIONS\\n\\\n    // The scene mode 2D pipeline stage adds a different model view matrix to\\n\\\n    // accurately project the model's positions in 2D. However, the output\\n\\\n    // positions and normals should be transformed by the 3D matrices to keep\\n\\\n    // the data the same for the fragment shader.\\n\\\n    mat4 modelView = czm_modelView3D;\\n\\\n    mat3 normal = czm_normal3D;\\n\\\n    #else\\n\\\n    // These are used for individual model projection because they will\\n\\\n    // automatically change based on the scene mode.\\n\\\n    mat4 modelView = czm_modelView;\\n\\\n    mat3 normal = czm_normal;\\n\\\n    #endif\\n\\\n    \\n\\\n\\n\\\n    // Update the position for this instance in place\\n\\\n    #ifdef HAS_INSTANCING\\n\\\n\\n\\\n        // The legacy instance stage is used when rendering i3dm models that \\n\\\n        // encode instances transforms in world space, as opposed to glTF models\\n\\\n        // that use EXT_mesh_gpu_instancing, where instance transforms are encoded\\n\\\n        // in object space.\\n\\\n        #ifdef USE_LEGACY_INSTANCING\\n\\\n        mat4 instanceModelView;\\n\\\n        mat3 instanceModelViewInverseTranspose;\\n\\\n        \\n\\\n        legacyInstancingStage(attributes.positionMC, instanceModelView, instanceModelViewInverseTranspose);\\n\\\n\\n\\\n        modelView = instanceModelView;\\n\\\n        normal = instanceModelViewInverseTranspose;\\n\\\n        #else\\n\\\n        instancingStage(attributes.positionMC);\\n\\\n        #endif\\n\\\n\\n\\\n        #ifdef USE_PICKING\\n\\\n        v_pickColor = a_pickColor;\\n\\\n        #endif\\n\\\n\\n\\\n    #endif\\n\\\n\\n\\\n    Metadata metadata;\\n\\\n    metadataStage(metadata, attributes);\\n\\\n\\n\\\n    #ifdef HAS_CUSTOM_VERTEX_SHADER\\n\\\n    czm_modelVertexOutput vsOutput = defaultVertexOutput(attributes.positionMC);\\n\\\n    customShaderStage(vsOutput, attributes, featureIds, metadata);\\n\\\n    #endif\\n\\\n\\n\\\n    // Compute the final position in each coordinate system needed.\\n\\\n    // This also sets gl_Position.\\n\\\n    geometryStage(attributes, modelView, normal);    \\n\\\n\\n\\\n    #ifdef PRIMITIVE_TYPE_POINTS\\n\\\n        #ifdef HAS_CUSTOM_VERTEX_SHADER\\n\\\n        gl_PointSize = vsOutput.pointSize;\\n\\\n        #elif defined(USE_POINT_CLOUD_ATTENUATION)\\n\\\n        gl_PointSize = pointCloudAttenuationStage(v_positionEC);\\n\\\n        #else\\n\\\n        gl_PointSize = 1.0;\\n\\\n        #endif\\n\\\n    #endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void modelSplitterStage()\\n\\\n{\\n\\\n    // Don't split when rendering the shadow map, because it is rendered from\\n\\\n    // the perspective of a totally different camera.\\n\\\n#ifndef SHADOW_MAP\\n\\\n    if (model_splitDirection < 0.0 && gl_FragCoord.x > czm_splitPosition) discard;\\n\\\n    if (model_splitDirection > 0.0 && gl_FragCoord.x < czm_splitPosition) discard;\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void morphTargetsStage(inout ProcessedAttributes attributes) \\n\\\n{\\n\\\n    vec3 positionMC = attributes.positionMC;\\n\\\n    attributes.positionMC = getMorphedPosition(positionMC);\\n\\\n\\n\\\n    #ifdef HAS_NORMALS\\n\\\n    vec3 normalMC = attributes.normalMC;\\n\\\n    attributes.normalMC = getMorphedNormal(normalMC);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_TANGENTS\\n\\\n    vec3 tangentMC = attributes.tangentMC;\\n\\\n    attributes.tangentMC = getMorphedTangent(tangentMC);\\n\\\n    #endif\\n\\\n}\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"float pointCloudAttenuationStage(vec3 positionEC) {\\n\\\n  // Variables are packed into a single vector to minimize gl.uniformXXX() calls\\n\\\n  float pointSize = model_pointCloudAttenuation.x;\\n\\\n  float geometricError = model_pointCloudAttenuation.y;\\n\\\n  float depthMultiplier = model_pointCloudAttenuation.z;\\n\\\n  float depth = -positionEC.z;\\n\\\n  return min((geometricError / depth) * depthMultiplier, pointSize);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"vec2 computeSt(float featureId)\\n\\\n{\\n\\\n    float stepX = model_textureStep.x;\\n\\\n    float centerX = model_textureStep.y;\\n\\\n\\n\\\n    #ifdef MULTILINE_BATCH_TEXTURE\\n\\\n    float stepY = model_textureStep.z;\\n\\\n    float centerY = model_textureStep.w;\\n\\\n\\n\\\n    float xId = mod(featureId, model_textureDimensions.x); \\n\\\n    float yId = floor(featureId / model_textureDimensions.x);\\n\\\n    \\n\\\n    return vec2(centerX + (xId * stepX), centerY + (yId * stepY));\\n\\\n    #else\\n\\\n    return vec2(centerX + (featureId * stepX), 0.5);\\n\\\n    #endif\\n\\\n}\\n\\\n\\n\\\nvoid selectedFeatureIdStage(out SelectedFeature feature, FeatureIds featureIds)\\n\\\n{   \\n\\\n    int featureId = featureIds.SELECTED_FEATURE_ID;\\n\\\n\\n\\\n\\n\\\n    if (featureId < model_featuresLength)\\n\\\n    {\\n\\\n        vec2 featureSt = computeSt(float(featureId));\\n\\\n\\n\\\n        feature.id = featureId;\\n\\\n        feature.st = featureSt;\\n\\\n        feature.color = texture2D(model_batchTexture, featureSt);\\n\\\n    }\\n\\\n    // Floating point comparisons can be unreliable in GLSL, so we\\n\\\n    // increment the feature ID to make sure it's always greater\\n\\\n    // then the model_featuresLength - a condition we check for in the\\n\\\n    // pick ID, to avoid sampling the pick texture if the feature ID is\\n\\\n    // greater than the number of features.\\n\\\n    else\\n\\\n    {\\n\\\n        feature.id = model_featuresLength + 1;\\n\\\n        feature.st = vec2(0.0);\\n\\\n        feature.color = vec4(1.0);\\n\\\n    }\\n\\\n\\n\\\n    #ifdef HAS_NULL_FEATURE_ID\\n\\\n    if (featureId == model_nullFeatureId) {\\n\\\n        feature.id = featureId;\\n\\\n        feature.st = vec2(0.0);\\n\\\n        feature.color = vec4(1.0);\\n\\\n    }\\n\\\n    #endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void skinningStage(inout ProcessedAttributes attributes) \\n\\\n{\\n\\\n    mat4 skinningMatrix = getSkinningMatrix();\\n\\\n    mat3 skinningMatrixMat3 = mat3(skinningMatrix);\\n\\\n\\n\\\n    vec4 positionMC = vec4(attributes.positionMC, 1.0);\\n\\\n    attributes.positionMC = vec3(skinningMatrix * positionMC);\\n\\\n\\n\\\n    #ifdef HAS_NORMALS\\n\\\n    vec3 normalMC = attributes.normalMC;\\n\\\n    attributes.normalMC = skinningMatrixMat3 * normalMC;\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_TANGENTS\\n\\\n    vec3 tangentMC = attributes.tangentMC;\\n\\\n    attributes.tangentMC = skinningMatrixMat3 * tangentMC;\\n\\\n    #endif\\n\\\n}\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec2 v_textureCoordinates;\\n\\\n\\n\\\nuniform float originalSize;\\n\\\nuniform sampler2D texture0;\\n\\\nuniform sampler2D texture1;\\n\\\nuniform sampler2D texture2;\\n\\\nuniform sampler2D texture3;\\n\\\nuniform sampler2D texture4;\\n\\\nuniform sampler2D texture5;\\n\\\n\\n\\\nconst float yMipLevel1 = 1.0 - (1.0 / pow(2.0, 1.0));\\n\\\nconst float yMipLevel2 = 1.0 - (1.0 / pow(2.0, 2.0));\\n\\\nconst float yMipLevel3 = 1.0 - (1.0 / pow(2.0, 3.0));\\n\\\nconst float yMipLevel4 = 1.0 - (1.0 / pow(2.0, 4.0));\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec2 uv = v_textureCoordinates;\\n\\\n    vec2 textureSize = vec2(originalSize * 1.5 + 2.0, originalSize);\\n\\\n    vec2 pixel = 1.0 / textureSize;\\n\\\n\\n\\\n    float mipLevel = 0.0;\\n\\\n\\n\\\n    if (uv.x - pixel.x > (textureSize.y / textureSize.x))\\n\\\n    {\\n\\\n        mipLevel = 1.0;\\n\\\n        if (uv.y - pixel.y > yMipLevel1)\\n\\\n        {\\n\\\n            mipLevel = 2.0;\\n\\\n            if (uv.y - pixel.y * 3.0 > yMipLevel2)\\n\\\n            {\\n\\\n                mipLevel = 3.0;\\n\\\n                if (uv.y - pixel.y * 5.0 > yMipLevel3)\\n\\\n                {\\n\\\n                    mipLevel = 4.0;\\n\\\n                    if (uv.y - pixel.y * 7.0 > yMipLevel4)\\n\\\n                    {\\n\\\n                        mipLevel = 5.0;\\n\\\n                    }\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    if (mipLevel > 0.0)\\n\\\n    {\\n\\\n        float scale = pow(2.0, mipLevel);\\n\\\n\\n\\\n        uv.y -= (pixel.y * (mipLevel - 1.0) * 2.0);\\n\\\n        uv.x *= ((textureSize.x - 2.0) / textureSize.y);\\n\\\n\\n\\\n        uv.x -= 1.0 + pixel.x;\\n\\\n        uv.y -= (1.0 - (1.0 / pow(2.0, mipLevel - 1.0)));\\n\\\n        uv *= scale;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        uv.x *= (textureSize.x / textureSize.y);\\n\\\n    }\\n\\\n\\n\\\n    if(mipLevel == 0.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture0, uv);\\n\\\n    }\\n\\\n    else if(mipLevel == 1.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture1, uv);\\n\\\n    }\\n\\\n    else if(mipLevel == 2.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture2, uv);\\n\\\n    }\\n\\\n    else if(mipLevel == 3.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture3, uv);\\n\\\n    }\\n\\\n    else if(mipLevel == 4.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture4, uv);\\n\\\n    }\\n\\\n    else if(mipLevel == 5.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture5, uv);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        gl_FragColor = vec4(0.0);\\n\\\n    }\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec3 v_cubeMapCoordinates;\\n\\\nuniform samplerCube cubeMap;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 rgba = textureCube(cubeMap, v_cubeMapCoordinates);\\n\\\n    #ifdef RGBA_NORMALIZED\\n\\\n        gl_FragColor = vec4(rgba.rgb, 1.0);\\n\\\n    #else\\n\\\n        float m = rgba.a * 16.0;\\n\\\n        vec3 r = rgba.rgb * m;\\n\\\n        gl_FragColor = vec4(r * r, 1.0);\\n\\\n    #endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec4 position;\\n\\\nattribute vec3 cubeMapCoordinates;\\n\\\n\\n\\\nvarying vec3 v_cubeMapCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    gl_Position = position;\\n\\\n    v_cubeMapCoordinates = cubeMapCoordinates;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec4 v_color;\\n\\\nvarying vec4 v_outlineColor;\\n\\\nvarying float v_innerPercent;\\n\\\nvarying float v_pixelDistance;\\n\\\nvarying vec4 v_pickColor;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    // The distance in UV space from this fragment to the center of the point, at most 0.5.\\n\\\n    float distanceToCenter = length(gl_PointCoord - vec2(0.5));\\n\\\n    // The max distance stops one pixel shy of the edge to leave space for anti-aliasing.\\n\\\n    float maxDistance = max(0.0, 0.5 - v_pixelDistance);\\n\\\n    float wholeAlpha = 1.0 - smoothstep(maxDistance, 0.5, distanceToCenter);\\n\\\n    float innerAlpha = 1.0 - smoothstep(maxDistance * v_innerPercent, 0.5 * v_innerPercent, distanceToCenter);\\n\\\n\\n\\\n    vec4 color = mix(v_outlineColor, v_color, innerAlpha);\\n\\\n    color.a *= wholeAlpha;\\n\\\n\\n\\\n// Fully transparent parts of the billboard are not pickable.\\n\\\n#if !defined(OPAQUE) && !defined(TRANSLUCENT)\\n\\\n    if (color.a < 0.005)   // matches 0/255 and 1/255\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n#else\\n\\\n// The billboard is rendered twice. The opaque pass discards translucent fragments\\n\\\n// and the translucent pass discards opaque fragments.\\n\\\n#ifdef OPAQUE\\n\\\n    if (color.a < 0.995)   // matches < 254/255\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n#else\\n\\\n    if (color.a >= 0.995)  // matches 254/255 and 255/255\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n#endif\\n\\\n#endif\\n\\\n\\n\\\n    gl_FragColor = czm_gammaCorrect(color);\\n\\\n    czm_writeLogDepth();\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform float u_maxTotalPointSize;\\n\\\n\\n\\\nattribute vec4 positionHighAndSize;\\n\\\nattribute vec4 positionLowAndOutline;\\n\\\nattribute vec4 compressedAttribute0;                       // color, outlineColor, pick color\\n\\\nattribute vec4 compressedAttribute1;                       // show, translucency by distance, some free space\\n\\\nattribute vec4 scaleByDistance;                            // near, nearScale, far, farScale\\n\\\nattribute vec3 distanceDisplayConditionAndDisableDepth;    // near, far, disableDepthTestDistance\\n\\\n\\n\\\nvarying vec4 v_color;\\n\\\nvarying vec4 v_outlineColor;\\n\\\nvarying float v_innerPercent;\\n\\\nvarying float v_pixelDistance;\\n\\\nvarying vec4 v_pickColor;\\n\\\n\\n\\\nconst float SHIFT_LEFT8 = 256.0;\\n\\\nconst float SHIFT_RIGHT8 = 1.0 / 256.0;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    // Modifying this shader may also require modifications to PointPrimitive._computeScreenSpacePosition\\n\\\n\\n\\\n    // unpack attributes\\n\\\n    vec3 positionHigh = positionHighAndSize.xyz;\\n\\\n    vec3 positionLow = positionLowAndOutline.xyz;\\n\\\n    float outlineWidthBothSides = 2.0 * positionLowAndOutline.w;\\n\\\n    float totalSize = positionHighAndSize.w + outlineWidthBothSides;\\n\\\n    float outlinePercent = outlineWidthBothSides / totalSize;\\n\\\n    // Scale in response to browser-zoom.\\n\\\n    totalSize *= czm_pixelRatio;\\n\\\n    // Add padding for anti-aliasing on both sides.\\n\\\n    totalSize += 3.0;\\n\\\n\\n\\\n    float temp = compressedAttribute1.x * SHIFT_RIGHT8;\\n\\\n    float show = floor(temp);\\n\\\n\\n\\\n#ifdef EYE_DISTANCE_TRANSLUCENCY\\n\\\n    vec4 translucencyByDistance;\\n\\\n    translucencyByDistance.x = compressedAttribute1.z;\\n\\\n    translucencyByDistance.z = compressedAttribute1.w;\\n\\\n\\n\\\n    translucencyByDistance.y = ((temp - floor(temp)) * SHIFT_LEFT8) / 255.0;\\n\\\n\\n\\\n    temp = compressedAttribute1.y * SHIFT_RIGHT8;\\n\\\n    translucencyByDistance.w = ((temp - floor(temp)) * SHIFT_LEFT8) / 255.0;\\n\\\n#endif\\n\\\n\\n\\\n    ///////////////////////////////////////////////////////////////////////////\\n\\\n\\n\\\n    vec4 color;\\n\\\n    vec4 outlineColor;\\n\\\n    vec4 pickColor;\\n\\\n\\n\\\n    // compressedAttribute0.z => pickColor.rgb\\n\\\n\\n\\\n    temp = compressedAttribute0.z * SHIFT_RIGHT8;\\n\\\n    pickColor.b = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    pickColor.g = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    pickColor.r = floor(temp);\\n\\\n\\n\\\n    // compressedAttribute0.x => color.rgb\\n\\\n\\n\\\n    temp = compressedAttribute0.x * SHIFT_RIGHT8;\\n\\\n    color.b = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    color.g = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    color.r = floor(temp);\\n\\\n\\n\\\n    // compressedAttribute0.y => outlineColor.rgb\\n\\\n\\n\\\n    temp = compressedAttribute0.y * SHIFT_RIGHT8;\\n\\\n    outlineColor.b = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    outlineColor.g = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    outlineColor.r = floor(temp);\\n\\\n\\n\\\n    // compressedAttribute0.w => color.a, outlineColor.a, pickColor.a\\n\\\n\\n\\\n    temp = compressedAttribute0.w * SHIFT_RIGHT8;\\n\\\n    pickColor.a = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    pickColor = pickColor / 255.0;\\n\\\n\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    outlineColor.a = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    outlineColor /= 255.0;\\n\\\n    color.a = floor(temp);\\n\\\n    color /= 255.0;\\n\\\n\\n\\\n    ///////////////////////////////////////////////////////////////////////////\\n\\\n\\n\\\n    vec4 p = czm_translateRelativeToEye(positionHigh, positionLow);\\n\\\n    vec4 positionEC = czm_modelViewRelativeToEye * p;\\n\\\n\\n\\\n    ///////////////////////////////////////////////////////////////////////////\\n\\\n\\n\\\n#if defined(EYE_DISTANCE_SCALING) || defined(EYE_DISTANCE_TRANSLUCENCY) || defined(DISTANCE_DISPLAY_CONDITION) || defined(DISABLE_DEPTH_DISTANCE)\\n\\\n    float lengthSq;\\n\\\n    if (czm_sceneMode == czm_sceneMode2D)\\n\\\n    {\\n\\\n        // 2D camera distance is a special case\\n\\\n        // treat all billboards as flattened to the z=0.0 plane\\n\\\n        lengthSq = czm_eyeHeight2D.y;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        lengthSq = dot(positionEC.xyz, positionEC.xyz);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef EYE_DISTANCE_SCALING\\n\\\n    totalSize *= czm_nearFarScalar(scaleByDistance, lengthSq);\\n\\\n#endif\\n\\\n    // Clamp to max point size.\\n\\\n    totalSize = min(totalSize, u_maxTotalPointSize);\\n\\\n    // If size is too small, push vertex behind near plane for clipping.\\n\\\n    // Note that context.minimumAliasedPointSize \\\"will be at most 1.0\\\".\\n\\\n    if (totalSize < 1.0)\\n\\\n    {\\n\\\n        positionEC.xyz = vec3(0.0);\\n\\\n        totalSize = 1.0;\\n\\\n    }\\n\\\n\\n\\\n    float translucency = 1.0;\\n\\\n#ifdef EYE_DISTANCE_TRANSLUCENCY\\n\\\n    translucency = czm_nearFarScalar(translucencyByDistance, lengthSq);\\n\\\n    // push vertex behind near plane for clipping\\n\\\n    if (translucency < 0.004)\\n\\\n    {\\n\\\n        positionEC.xyz = vec3(0.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef DISTANCE_DISPLAY_CONDITION\\n\\\n    float nearSq = distanceDisplayConditionAndDisableDepth.x;\\n\\\n    float farSq = distanceDisplayConditionAndDisableDepth.y;\\n\\\n    if (lengthSq < nearSq || lengthSq > farSq) {\\n\\\n        // push vertex behind camera to force it to be clipped\\n\\\n        positionEC.xyz = vec3(0.0, 0.0, 1.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    gl_Position = czm_projection * positionEC;\\n\\\n    czm_vertexLogDepth();\\n\\\n\\n\\\n#ifdef DISABLE_DEPTH_DISTANCE\\n\\\n    float disableDepthTestDistance = distanceDisplayConditionAndDisableDepth.z;\\n\\\n    if (disableDepthTestDistance == 0.0 && czm_minimumDisableDepthTestDistance != 0.0)\\n\\\n    {\\n\\\n        disableDepthTestDistance = czm_minimumDisableDepthTestDistance;\\n\\\n    }\\n\\\n\\n\\\n    if (disableDepthTestDistance != 0.0)\\n\\\n    {\\n\\\n        // Don't try to \\\"multiply both sides\\\" by w.  Greater/less-than comparisons won't work for negative values of w.\\n\\\n        float zclip = gl_Position.z / gl_Position.w;\\n\\\n        bool clipped = (zclip < -1.0 || zclip > 1.0);\\n\\\n        if (!clipped && (disableDepthTestDistance < 0.0 || (lengthSq > 0.0 && lengthSq < disableDepthTestDistance)))\\n\\\n        {\\n\\\n            // Position z on the near plane.\\n\\\n            gl_Position.z = -gl_Position.w;\\n\\\n#ifdef LOG_DEPTH\\n\\\n            czm_vertexLogDepth(vec4(czm_currentFrustum.x));\\n\\\n#endif\\n\\\n        }\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    v_color = color;\\n\\\n    v_color.a *= translucency * show;\\n\\\n    v_outlineColor = outlineColor;\\n\\\n    v_outlineColor.a *= translucency * show;\\n\\\n\\n\\\n    v_innerPercent = 1.0 - outlinePercent;\\n\\\n    v_pixelDistance = 2.0 / totalSize;\\n\\\n    gl_PointSize = totalSize * show;\\n\\\n    gl_Position *= show;\\n\\\n\\n\\\n    v_pickColor = pickColor;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"void clipLineSegmentToNearPlane(\\n\\\n    vec3 p0,\\n\\\n    vec3 p1,\\n\\\n    out vec4 positionWC,\\n\\\n    out bool clipped,\\n\\\n    out bool culledByNearPlane,\\n\\\n    out vec4 clippedPositionEC)\\n\\\n{\\n\\\n    culledByNearPlane = false;\\n\\\n    clipped = false;\\n\\\n\\n\\\n    vec3 p0ToP1 = p1 - p0;\\n\\\n    float magnitude = length(p0ToP1);\\n\\\n    vec3 direction = normalize(p0ToP1);\\n\\\n\\n\\\n    // Distance that p0 is behind the near plane. Negative means p0 is\\n\\\n    // in front of the near plane.\\n\\\n    float endPoint0Distance =  czm_currentFrustum.x + p0.z;\\n\\\n\\n\\\n    // Camera looks down -Z.\\n\\\n    // When moving a point along +Z: LESS VISIBLE\\n\\\n    //   * Points in front of the camera move closer to the camera.\\n\\\n    //   * Points behind the camrea move farther away from the camera.\\n\\\n    // When moving a point along -Z: MORE VISIBLE\\n\\\n    //   * Points in front of the camera move farther away from the camera.\\n\\\n    //   * Points behind the camera move closer to the camera.\\n\\\n\\n\\\n    // Positive denominator: -Z, becoming more visible\\n\\\n    // Negative denominator: +Z, becoming less visible\\n\\\n    // Nearly zero: parallel to near plane\\n\\\n    float denominator = -direction.z;\\n\\\n\\n\\\n    if (endPoint0Distance > 0.0 && abs(denominator) < czm_epsilon7)\\n\\\n    {\\n\\\n        // p0 is behind the near plane and the line to p1 is nearly parallel to\\n\\\n        // the near plane, so cull the segment completely.\\n\\\n        culledByNearPlane = true;\\n\\\n    }\\n\\\n    else if (endPoint0Distance > 0.0)\\n\\\n    {\\n\\\n        // p0 is behind the near plane, and the line to p1 is moving distinctly\\n\\\n        // toward or away from it.\\n\\\n\\n\\\n        // t = (-plane distance - dot(plane normal, ray origin)) / dot(plane normal, ray direction)\\n\\\n        float t = endPoint0Distance / denominator;\\n\\\n        if (t < 0.0 || t > magnitude)\\n\\\n        {\\n\\\n            // Near plane intersection is not between the two points.\\n\\\n            // We already confirmed p0 is behind the naer plane, so now\\n\\\n            // we know the entire segment is behind it.\\n\\\n            culledByNearPlane = true;\\n\\\n        }\\n\\\n        else\\n\\\n        {\\n\\\n            // Segment crosses the near plane, update p0 to lie exactly on it.\\n\\\n            p0 = p0 + t * direction;\\n\\\n\\n\\\n            // Numerical noise might put us a bit on the wrong side of the near plane.\\n\\\n            // Don't let that happen.\\n\\\n            p0.z = min(p0.z, -czm_currentFrustum.x);\\n\\\n\\n\\\n            clipped = true;\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    clippedPositionEC = vec4(p0, 1.0);\\n\\\n    positionWC = czm_eyeToWindowCoordinates(clippedPositionEC);\\n\\\n}\\n\\\n\\n\\\nvec4 getPolylineWindowCoordinatesEC(vec4 positionEC, vec4 prevEC, vec4 nextEC, float expandDirection, float width, bool usePrevious, out float angle)\\n\\\n{\\n\\\n    // expandDirection +1 is to the _left_ when looking from positionEC toward nextEC.\\n\\\n\\n\\\n#ifdef POLYLINE_DASH\\n\\\n    // Compute the window coordinates of the points.\\n\\\n    vec4 positionWindow = czm_eyeToWindowCoordinates(positionEC);\\n\\\n    vec4 previousWindow = czm_eyeToWindowCoordinates(prevEC);\\n\\\n    vec4 nextWindow = czm_eyeToWindowCoordinates(nextEC);\\n\\\n\\n\\\n    // Determine the relative screen space direction of the line.\\n\\\n    vec2 lineDir;\\n\\\n    if (usePrevious) {\\n\\\n        lineDir = normalize(positionWindow.xy - previousWindow.xy);\\n\\\n    }\\n\\\n    else {\\n\\\n        lineDir = normalize(nextWindow.xy - positionWindow.xy);\\n\\\n    }\\n\\\n    angle = atan(lineDir.x, lineDir.y) - 1.570796327; // precomputed atan(1,0)\\n\\\n\\n\\\n    // Quantize the angle so it doesn't change rapidly between segments.\\n\\\n    angle = floor(angle / czm_piOverFour + 0.5) * czm_piOverFour;\\n\\\n#endif\\n\\\n\\n\\\n    vec4 clippedPrevWC, clippedPrevEC;\\n\\\n    bool prevSegmentClipped, prevSegmentCulled;\\n\\\n    clipLineSegmentToNearPlane(prevEC.xyz, positionEC.xyz, clippedPrevWC, prevSegmentClipped, prevSegmentCulled, clippedPrevEC);\\n\\\n\\n\\\n    vec4 clippedNextWC, clippedNextEC;\\n\\\n    bool nextSegmentClipped, nextSegmentCulled;\\n\\\n    clipLineSegmentToNearPlane(nextEC.xyz, positionEC.xyz, clippedNextWC, nextSegmentClipped, nextSegmentCulled, clippedNextEC);\\n\\\n\\n\\\n    bool segmentClipped, segmentCulled;\\n\\\n    vec4 clippedPositionWC, clippedPositionEC;\\n\\\n    clipLineSegmentToNearPlane(positionEC.xyz, usePrevious ? prevEC.xyz : nextEC.xyz, clippedPositionWC, segmentClipped, segmentCulled, clippedPositionEC);\\n\\\n\\n\\\n    if (segmentCulled)\\n\\\n    {\\n\\\n        return vec4(0.0, 0.0, 0.0, 1.0);\\n\\\n    }\\n\\\n\\n\\\n    vec2 directionToPrevWC = normalize(clippedPrevWC.xy - clippedPositionWC.xy);\\n\\\n    vec2 directionToNextWC = normalize(clippedNextWC.xy - clippedPositionWC.xy);\\n\\\n\\n\\\n    // If a segment was culled, we can't use the corresponding direction\\n\\\n    // computed above. We should never see both of these be true without\\n\\\n    // `segmentCulled` above also being true.\\n\\\n    if (prevSegmentCulled)\\n\\\n    {\\n\\\n        directionToPrevWC = -directionToNextWC;\\n\\\n    }\\n\\\n    else if (nextSegmentCulled)\\n\\\n    {\\n\\\n        directionToNextWC = -directionToPrevWC;\\n\\\n    }\\n\\\n\\n\\\n    vec2 thisSegmentForwardWC, otherSegmentForwardWC;\\n\\\n    if (usePrevious)\\n\\\n    {\\n\\\n        thisSegmentForwardWC = -directionToPrevWC;\\n\\\n        otherSegmentForwardWC = directionToNextWC;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        thisSegmentForwardWC = directionToNextWC;\\n\\\n        otherSegmentForwardWC =  -directionToPrevWC;\\n\\\n    }\\n\\\n\\n\\\n    vec2 thisSegmentLeftWC = vec2(-thisSegmentForwardWC.y, thisSegmentForwardWC.x);\\n\\\n\\n\\\n    vec2 leftWC = thisSegmentLeftWC;\\n\\\n    float expandWidth = width * 0.5;\\n\\\n\\n\\\n    // When lines are split at the anti-meridian, the position may be at the\\n\\\n    // same location as the next or previous position, and we need to handle\\n\\\n    // that to avoid producing NaNs.\\n\\\n    if (!czm_equalsEpsilon(prevEC.xyz - positionEC.xyz, vec3(0.0), czm_epsilon1) && !czm_equalsEpsilon(nextEC.xyz - positionEC.xyz, vec3(0.0), czm_epsilon1))\\n\\\n    {\\n\\\n        vec2 otherSegmentLeftWC = vec2(-otherSegmentForwardWC.y, otherSegmentForwardWC.x);\\n\\\n\\n\\\n        vec2 leftSumWC = thisSegmentLeftWC + otherSegmentLeftWC;\\n\\\n        float leftSumLength = length(leftSumWC);\\n\\\n        leftWC = leftSumLength < czm_epsilon6 ? thisSegmentLeftWC : (leftSumWC / leftSumLength);\\n\\\n\\n\\\n        // The sine of the angle between the two vectors is given by the formula\\n\\\n        //         |a x b| = |a||b|sin(theta)\\n\\\n        // which is\\n\\\n        //     float sinAngle = length(cross(vec3(leftWC, 0.0), vec3(-thisSegmentForwardWC, 0.0)));\\n\\\n        // Because the z components of both vectors are zero, the x and y coordinate will be zero.\\n\\\n        // Therefore, the sine of the angle is just the z component of the cross product.\\n\\\n        vec2 u = -thisSegmentForwardWC;\\n\\\n        vec2 v = leftWC;\\n\\\n        float sinAngle = abs(u.x * v.y - u.y * v.x);\\n\\\n        expandWidth = clamp(expandWidth / sinAngle, 0.0, width * 2.0);\\n\\\n    }\\n\\\n\\n\\\n    vec2 offset = leftWC * expandDirection * expandWidth * czm_pixelRatio;\\n\\\n    return vec4(clippedPositionWC.xy + offset, -clippedPositionWC.z, 1.0) * (czm_projection * clippedPositionEC).w;\\n\\\n}\\n\\\n\\n\\\nvec4 getPolylineWindowCoordinates(vec4 position, vec4 previous, vec4 next, float expandDirection, float width, bool usePrevious, out float angle)\\n\\\n{\\n\\\n    vec4 positionEC = czm_modelViewRelativeToEye * position;\\n\\\n    vec4 prevEC = czm_modelViewRelativeToEye * previous;\\n\\\n    vec4 nextEC = czm_modelViewRelativeToEye * next;\\n\\\n    return getPolylineWindowCoordinatesEC(positionEC, prevEC, nextEC, expandDirection, width, usePrevious, angle);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef VECTOR_TILE\\n\\\nuniform vec4 u_highlightColor;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    czm_materialInput materialInput;\\n\\\n\\n\\\n    vec2 st = v_st;\\n\\\n    st.t = czm_readNonPerspective(st.t, gl_FragCoord.w);\\n\\\n\\n\\\n    materialInput.s = st.s;\\n\\\n    materialInput.st = st;\\n\\\n    materialInput.str = vec3(st, 0.0);\\n\\\n\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#ifdef VECTOR_TILE\\n\\\n    gl_FragColor *= u_highlightColor;\\n\\\n#endif\\n\\\n\\n\\\n    czm_writeLogDepth();\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef GL_EXT_frag_depth\\n\\\n#extension GL_EXT_frag_depth : enable\\n\\\n#endif\\n\\\n\\n\\\nvarying vec4 v_startPlaneNormalEcAndHalfWidth;\\n\\\nvarying vec4 v_endPlaneNormalEcAndBatchId;\\n\\\nvarying vec4 v_rightPlaneEC; // Technically can compute distance for this here\\n\\\nvarying vec4 v_endEcAndStartEcX;\\n\\\nvarying vec4 v_texcoordNormalizationAndStartEcYZ;\\n\\\n\\n\\\n#ifdef PER_INSTANCE_COLOR\\n\\\nvarying vec4 v_color;\\n\\\n#endif\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    float logDepthOrDepth = czm_branchFreeTernary(czm_sceneMode == czm_sceneMode2D, gl_FragCoord.z, czm_unpackDepth(texture2D(czm_globeDepthTexture, gl_FragCoord.xy / czm_viewport.zw)));\\n\\\n    vec3 ecStart = vec3(v_endEcAndStartEcX.w, v_texcoordNormalizationAndStartEcYZ.zw);\\n\\\n\\n\\\n    // Discard for sky\\n\\\n    if (logDepthOrDepth == 0.0) {\\n\\\n#ifdef DEBUG_SHOW_VOLUME\\n\\\n        gl_FragColor = vec4(1.0, 0.0, 0.0, 0.5);\\n\\\n        return;\\n\\\n#else // DEBUG_SHOW_VOLUME\\n\\\n        discard;\\n\\\n#endif // DEBUG_SHOW_VOLUME\\n\\\n    }\\n\\\n\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(gl_FragCoord.xy, logDepthOrDepth);\\n\\\n    eyeCoordinate /= eyeCoordinate.w;\\n\\\n\\n\\\n    float halfMaxWidth = v_startPlaneNormalEcAndHalfWidth.w * czm_metersPerPixel(eyeCoordinate);\\n\\\n    // Check distance of the eye coordinate against the right-facing plane\\n\\\n    float widthwiseDistance = czm_planeDistance(v_rightPlaneEC, eyeCoordinate.xyz);\\n\\\n\\n\\\n    // Check eye coordinate against the mitering planes\\n\\\n    float distanceFromStart = czm_planeDistance(v_startPlaneNormalEcAndHalfWidth.xyz, -dot(ecStart, v_startPlaneNormalEcAndHalfWidth.xyz), eyeCoordinate.xyz);\\n\\\n    float distanceFromEnd = czm_planeDistance(v_endPlaneNormalEcAndBatchId.xyz, -dot(v_endEcAndStartEcX.xyz, v_endPlaneNormalEcAndBatchId.xyz), eyeCoordinate.xyz);\\n\\\n\\n\\\n    if (abs(widthwiseDistance) > halfMaxWidth || distanceFromStart < 0.0 || distanceFromEnd < 0.0) {\\n\\\n#ifdef DEBUG_SHOW_VOLUME\\n\\\n        gl_FragColor = vec4(1.0, 0.0, 0.0, 0.5);\\n\\\n        return;\\n\\\n#else // DEBUG_SHOW_VOLUME\\n\\\n        discard;\\n\\\n#endif // DEBUG_SHOW_VOLUME\\n\\\n    }\\n\\\n\\n\\\n    // Check distance of the eye coordinate against start and end planes with normals in the right plane.\\n\\\n    // For computing unskewed lengthwise texture coordinate.\\n\\\n    // Can also be used for clipping extremely pointy miters, but in practice unnecessary because of miter breaking.\\n\\\n\\n\\\n    // aligned plane: cross the right plane normal with miter plane normal, then cross the result with right again to point it more \\\"forward\\\"\\n\\\n    vec3 alignedPlaneNormal;\\n\\\n\\n\\\n    // start aligned plane\\n\\\n    alignedPlaneNormal = cross(v_rightPlaneEC.xyz, v_startPlaneNormalEcAndHalfWidth.xyz);\\n\\\n    alignedPlaneNormal = normalize(cross(alignedPlaneNormal, v_rightPlaneEC.xyz));\\n\\\n    distanceFromStart = czm_planeDistance(alignedPlaneNormal, -dot(alignedPlaneNormal, ecStart), eyeCoordinate.xyz);\\n\\\n\\n\\\n    // end aligned plane\\n\\\n    alignedPlaneNormal = cross(v_rightPlaneEC.xyz, v_endPlaneNormalEcAndBatchId.xyz);\\n\\\n    alignedPlaneNormal = normalize(cross(alignedPlaneNormal, v_rightPlaneEC.xyz));\\n\\\n    distanceFromEnd = czm_planeDistance(alignedPlaneNormal, -dot(alignedPlaneNormal, v_endEcAndStartEcX.xyz), eyeCoordinate.xyz);\\n\\\n\\n\\\n#ifdef PER_INSTANCE_COLOR\\n\\\n    gl_FragColor = czm_gammaCorrect(v_color);\\n\\\n#else // PER_INSTANCE_COLOR\\n\\\n    // Clamp - distance to aligned planes may be negative due to mitering,\\n\\\n    // so fragment texture coordinate might be out-of-bounds.\\n\\\n    float s = clamp(distanceFromStart / (distanceFromStart + distanceFromEnd), 0.0, 1.0);\\n\\\n    s = (s * v_texcoordNormalizationAndStartEcYZ.x) + v_texcoordNormalizationAndStartEcYZ.y;\\n\\\n    float t = (widthwiseDistance + halfMaxWidth) / (2.0 * halfMaxWidth);\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n\\n\\\n    materialInput.s = s;\\n\\\n    materialInput.st = vec2(s, t);\\n\\\n    materialInput.str = vec3(s, t, 0.0);\\n\\\n\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#endif // PER_INSTANCE_COLOR\\n\\\n\\n\\\n    // Premultiply alpha. Required for classification primitives on translucent globe.\\n\\\n    gl_FragColor.rgb *= gl_FragColor.a;\\n\\\n\\n\\\n    czm_writeDepthClamp();\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec3 v_forwardDirectionEC;\\n\\\nvarying vec3 v_texcoordNormalizationAndHalfWidth;\\n\\\nvarying float v_batchId;\\n\\\n\\n\\\n#ifdef PER_INSTANCE_COLOR\\n\\\nvarying vec4 v_color;\\n\\\n#else\\n\\\nvarying vec2 v_alignedPlaneDistances;\\n\\\nvarying float v_texcoordT;\\n\\\n#endif\\n\\\n\\n\\\nfloat rayPlaneDistanceUnsafe(vec3 origin, vec3 direction, vec3 planeNormal, float planeDistance) {\\n\\\n    // We don't expect the ray to ever be parallel to the plane\\n\\\n    return (-planeDistance - dot(planeNormal, origin)) / dot(planeNormal, direction);\\n\\\n}\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    vec4 eyeCoordinate = gl_FragCoord;\\n\\\n    eyeCoordinate /= eyeCoordinate.w;\\n\\\n\\n\\\n#ifdef PER_INSTANCE_COLOR\\n\\\n    gl_FragColor = czm_gammaCorrect(v_color);\\n\\\n#else // PER_INSTANCE_COLOR\\n\\\n    // Use distances for planes aligned with segment to prevent skew in dashing\\n\\\n    float distanceFromStart = rayPlaneDistanceUnsafe(eyeCoordinate.xyz, -v_forwardDirectionEC, v_forwardDirectionEC.xyz, v_alignedPlaneDistances.x);\\n\\\n    float distanceFromEnd = rayPlaneDistanceUnsafe(eyeCoordinate.xyz, v_forwardDirectionEC, -v_forwardDirectionEC.xyz, v_alignedPlaneDistances.y);\\n\\\n\\n\\\n    // Clamp - distance to aligned planes may be negative due to mitering\\n\\\n    distanceFromStart = max(0.0, distanceFromStart);\\n\\\n    distanceFromEnd = max(0.0, distanceFromEnd);\\n\\\n\\n\\\n    float s = distanceFromStart / (distanceFromStart + distanceFromEnd);\\n\\\n    s = (s * v_texcoordNormalizationAndHalfWidth.x) + v_texcoordNormalizationAndHalfWidth.y;\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n\\n\\\n    materialInput.s = s;\\n\\\n    materialInput.st = vec2(s, v_texcoordT);\\n\\\n    materialInput.str = vec3(s, v_texcoordT, 0.0);\\n\\\n\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#endif // PER_INSTANCE_COLOR\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\n\\n\\\nattribute vec4 startHiAndForwardOffsetX;\\n\\\nattribute vec4 startLoAndForwardOffsetY;\\n\\\nattribute vec4 startNormalAndForwardOffsetZ;\\n\\\nattribute vec4 endNormalAndTextureCoordinateNormalizationX;\\n\\\nattribute vec4 rightNormalAndTextureCoordinateNormalizationY;\\n\\\nattribute vec4 startHiLo2D;\\n\\\nattribute vec4 offsetAndRight2D;\\n\\\nattribute vec4 startEndNormals2D;\\n\\\nattribute vec2 texcoordNormalization2D;\\n\\\n\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_forwardDirectionEC;\\n\\\nvarying vec3 v_texcoordNormalizationAndHalfWidth;\\n\\\nvarying float v_batchId;\\n\\\n\\n\\\n// For materials\\n\\\n#ifdef WIDTH_VARYING\\n\\\nvarying float v_width;\\n\\\n#endif\\n\\\n#ifdef ANGLE_VARYING\\n\\\nvarying float v_polylineAngle;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef PER_INSTANCE_COLOR\\n\\\nvarying vec4 v_color;\\n\\\n#else\\n\\\nvarying vec2 v_alignedPlaneDistances;\\n\\\nvarying float v_texcoordT;\\n\\\n#endif\\n\\\n\\n\\\n// Morphing planes using SLERP or NLERP doesn't seem to work, so instead draw the material directly on the shadow volume.\\n\\\n// Morph views are from very far away and aren't meant to be used precisely, so this should be sufficient.\\n\\\nvoid main()\\n\\\n{\\n\\\n    v_batchId = batchId;\\n\\\n\\n\\\n    // Start position\\n\\\n    vec4 posRelativeToEye2D = czm_translateRelativeToEye(vec3(0.0, startHiLo2D.xy), vec3(0.0, startHiLo2D.zw));\\n\\\n    vec4 posRelativeToEye3D = czm_translateRelativeToEye(startHiAndForwardOffsetX.xyz, startLoAndForwardOffsetY.xyz);\\n\\\n    vec4 posRelativeToEye = czm_columbusViewMorph(posRelativeToEye2D, posRelativeToEye3D, czm_morphTime);\\n\\\n    vec3 posEc2D = (czm_modelViewRelativeToEye * posRelativeToEye2D).xyz;\\n\\\n    vec3 posEc3D = (czm_modelViewRelativeToEye * posRelativeToEye3D).xyz;\\n\\\n    vec3 startEC = (czm_modelViewRelativeToEye * posRelativeToEye).xyz;\\n\\\n\\n\\\n    // Start plane\\n\\\n    vec4 startPlane2D;\\n\\\n    vec4 startPlane3D;\\n\\\n    startPlane2D.xyz = czm_normal * vec3(0.0, startEndNormals2D.xy);\\n\\\n    startPlane3D.xyz = czm_normal * startNormalAndForwardOffsetZ.xyz;\\n\\\n    startPlane2D.w = -dot(startPlane2D.xyz, posEc2D);\\n\\\n    startPlane3D.w = -dot(startPlane3D.xyz, posEc3D);\\n\\\n\\n\\\n    // Right plane\\n\\\n    vec4 rightPlane2D;\\n\\\n    vec4 rightPlane3D;\\n\\\n    rightPlane2D.xyz = czm_normal * vec3(0.0, offsetAndRight2D.zw);\\n\\\n    rightPlane3D.xyz = czm_normal * rightNormalAndTextureCoordinateNormalizationY.xyz;\\n\\\n    rightPlane2D.w = -dot(rightPlane2D.xyz, posEc2D);\\n\\\n    rightPlane3D.w = -dot(rightPlane3D.xyz, posEc3D);\\n\\\n\\n\\\n    // End position\\n\\\n    posRelativeToEye2D = posRelativeToEye2D + vec4(0.0, offsetAndRight2D.xy, 0.0);\\n\\\n    posRelativeToEye3D = posRelativeToEye3D + vec4(startHiAndForwardOffsetX.w, startLoAndForwardOffsetY.w, startNormalAndForwardOffsetZ.w, 0.0);\\n\\\n    posRelativeToEye = czm_columbusViewMorph(posRelativeToEye2D, posRelativeToEye3D, czm_morphTime);\\n\\\n    posEc2D = (czm_modelViewRelativeToEye * posRelativeToEye2D).xyz;\\n\\\n    posEc3D = (czm_modelViewRelativeToEye * posRelativeToEye3D).xyz;\\n\\\n    vec3 endEC = (czm_modelViewRelativeToEye * posRelativeToEye).xyz;\\n\\\n    vec3 forwardEc3D = czm_normal * normalize(vec3(startHiAndForwardOffsetX.w, startLoAndForwardOffsetY.w, startNormalAndForwardOffsetZ.w));\\n\\\n    vec3 forwardEc2D = czm_normal * normalize(vec3(0.0, offsetAndRight2D.xy));\\n\\\n\\n\\\n    // End plane\\n\\\n    vec4 endPlane2D;\\n\\\n    vec4 endPlane3D;\\n\\\n    endPlane2D.xyz = czm_normal * vec3(0.0, startEndNormals2D.zw);\\n\\\n    endPlane3D.xyz = czm_normal * endNormalAndTextureCoordinateNormalizationX.xyz;\\n\\\n    endPlane2D.w = -dot(endPlane2D.xyz, posEc2D);\\n\\\n    endPlane3D.w = -dot(endPlane3D.xyz, posEc3D);\\n\\\n\\n\\\n    // Forward direction\\n\\\n    v_forwardDirectionEC = normalize(endEC - startEC);\\n\\\n\\n\\\n    vec2 cleanTexcoordNormalization2D;\\n\\\n    cleanTexcoordNormalization2D.x = abs(texcoordNormalization2D.x);\\n\\\n    cleanTexcoordNormalization2D.y = czm_branchFreeTernary(texcoordNormalization2D.y > 1.0, 0.0, abs(texcoordNormalization2D.y));\\n\\\n    vec2 cleanTexcoordNormalization3D;\\n\\\n    cleanTexcoordNormalization3D.x = abs(endNormalAndTextureCoordinateNormalizationX.w);\\n\\\n    cleanTexcoordNormalization3D.y = rightNormalAndTextureCoordinateNormalizationY.w;\\n\\\n    cleanTexcoordNormalization3D.y = czm_branchFreeTernary(cleanTexcoordNormalization3D.y > 1.0, 0.0, abs(cleanTexcoordNormalization3D.y));\\n\\\n\\n\\\n    v_texcoordNormalizationAndHalfWidth.xy = mix(cleanTexcoordNormalization2D, cleanTexcoordNormalization3D, czm_morphTime);\\n\\\n\\n\\\n#ifdef PER_INSTANCE_COLOR\\n\\\n    v_color = czm_batchTable_color(batchId);\\n\\\n#else // PER_INSTANCE_COLOR\\n\\\n    // For computing texture coordinates\\n\\\n\\n\\\n    v_alignedPlaneDistances.x = -dot(v_forwardDirectionEC, startEC);\\n\\\n    v_alignedPlaneDistances.y = -dot(-v_forwardDirectionEC, endEC);\\n\\\n#endif // PER_INSTANCE_COLOR\\n\\\n\\n\\\n#ifdef WIDTH_VARYING\\n\\\n    float width = czm_batchTable_width(batchId);\\n\\\n    float halfWidth = width * 0.5;\\n\\\n    v_width = width;\\n\\\n    v_texcoordNormalizationAndHalfWidth.z = halfWidth;\\n\\\n#else\\n\\\n    float halfWidth = 0.5 * czm_batchTable_width(batchId);\\n\\\n    v_texcoordNormalizationAndHalfWidth.z = halfWidth;\\n\\\n#endif\\n\\\n\\n\\\n    // Compute a normal along which to \\\"push\\\" the position out, extending the miter depending on view distance.\\n\\\n    // Position has already been \\\"pushed\\\" by unit length along miter normal, and miter normals are encoded in the planes.\\n\\\n    // Decode the normal to use at this specific vertex, push the position back, and then push to where it needs to be.\\n\\\n    // Since this is morphing, compute both 3D and 2D positions and then blend.\\n\\\n\\n\\\n    // ****** 3D ******\\n\\\n    // Check distance to the end plane and start plane, pick the plane that is closer\\n\\\n    vec4 positionEc3D = czm_modelViewRelativeToEye * czm_translateRelativeToEye(position3DHigh, position3DLow); // w = 1.0, see czm_computePosition\\n\\\n    float absStartPlaneDistance = abs(czm_planeDistance(startPlane3D, positionEc3D.xyz));\\n\\\n    float absEndPlaneDistance = abs(czm_planeDistance(endPlane3D, positionEc3D.xyz));\\n\\\n    vec3 planeDirection = czm_branchFreeTernary(absStartPlaneDistance < absEndPlaneDistance, startPlane3D.xyz, endPlane3D.xyz);\\n\\\n    vec3 upOrDown = normalize(cross(rightPlane3D.xyz, planeDirection)); // Points \\\"up\\\" for start plane, \\\"down\\\" at end plane.\\n\\\n    vec3 normalEC = normalize(cross(planeDirection, upOrDown));         // In practice, the opposite seems to work too.\\n\\\n\\n\\\n    // Nudge the top vertex upwards to prevent flickering\\n\\\n    vec3 geodeticSurfaceNormal = normalize(cross(normalEC, forwardEc3D));\\n\\\n    geodeticSurfaceNormal *= float(0.0 <= rightNormalAndTextureCoordinateNormalizationY.w && rightNormalAndTextureCoordinateNormalizationY.w <= 1.0);\\n\\\n    geodeticSurfaceNormal *= MAX_TERRAIN_HEIGHT;\\n\\\n    positionEc3D.xyz += geodeticSurfaceNormal;\\n\\\n\\n\\\n    // Determine if this vertex is on the \\\"left\\\" or \\\"right\\\"\\n\\\n    normalEC *= sign(endNormalAndTextureCoordinateNormalizationX.w);\\n\\\n\\n\\\n    // A \\\"perfect\\\" implementation would push along normals according to the angle against forward.\\n\\\n    // In practice, just pushing the normal out by halfWidth is sufficient for morph views.\\n\\\n    positionEc3D.xyz += halfWidth * max(0.0, czm_metersPerPixel(positionEc3D)) * normalEC; // prevent artifacts when czm_metersPerPixel is negative (behind camera)\\n\\\n\\n\\\n    // ****** 2D ******\\n\\\n    // Check distance to the end plane and start plane, pick the plane that is closer\\n\\\n    vec4 positionEc2D = czm_modelViewRelativeToEye * czm_translateRelativeToEye(position2DHigh.zxy, position2DLow.zxy); // w = 1.0, see czm_computePosition\\n\\\n    absStartPlaneDistance = abs(czm_planeDistance(startPlane2D, positionEc2D.xyz));\\n\\\n    absEndPlaneDistance = abs(czm_planeDistance(endPlane2D, positionEc2D.xyz));\\n\\\n    planeDirection = czm_branchFreeTernary(absStartPlaneDistance < absEndPlaneDistance, startPlane2D.xyz, endPlane2D.xyz);\\n\\\n    upOrDown = normalize(cross(rightPlane2D.xyz, planeDirection)); // Points \\\"up\\\" for start plane, \\\"down\\\" at end plane.\\n\\\n    normalEC = normalize(cross(planeDirection, upOrDown));         // In practice, the opposite seems to work too.\\n\\\n\\n\\\n    // Nudge the top vertex upwards to prevent flickering\\n\\\n    geodeticSurfaceNormal = normalize(cross(normalEC, forwardEc2D));\\n\\\n    geodeticSurfaceNormal *= float(0.0 <= texcoordNormalization2D.y && texcoordNormalization2D.y <= 1.0);\\n\\\n    geodeticSurfaceNormal *= MAX_TERRAIN_HEIGHT;\\n\\\n    positionEc2D.xyz += geodeticSurfaceNormal;\\n\\\n\\n\\\n    // Determine if this vertex is on the \\\"left\\\" or \\\"right\\\"\\n\\\n    normalEC *= sign(texcoordNormalization2D.x);\\n\\\n#ifndef PER_INSTANCE_COLOR\\n\\\n    // Use vertex's sidedness to compute its texture coordinate.\\n\\\n    v_texcoordT = clamp(sign(texcoordNormalization2D.x), 0.0, 1.0);\\n\\\n#endif\\n\\\n\\n\\\n    // A \\\"perfect\\\" implementation would push along normals according to the angle against forward.\\n\\\n    // In practice, just pushing the normal out by halfWidth is sufficient for morph views.\\n\\\n    positionEc2D.xyz += halfWidth * max(0.0, czm_metersPerPixel(positionEc2D)) * normalEC; // prevent artifacts when czm_metersPerPixel is negative (behind camera)\\n\\\n\\n\\\n    // Blend for actual position\\n\\\n    gl_Position = czm_projection * mix(positionEc2D, positionEc3D, czm_morphTime);\\n\\\n\\n\\\n#ifdef ANGLE_VARYING\\n\\\n    // Approximate relative screen space direction of the line.\\n\\\n    vec2 approxLineDirection = normalize(vec2(v_forwardDirectionEC.x, -v_forwardDirectionEC.y));\\n\\\n    approxLineDirection.y = czm_branchFreeTernary(approxLineDirection.x == 0.0 && approxLineDirection.y == 0.0, -1.0, approxLineDirection.y);\\n\\\n    v_polylineAngle = czm_fastApproximateAtan(approxLineDirection.x, approxLineDirection.y);\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\n\\n\\\n// In 2D and in 3D, texture coordinate normalization component signs encodes:\\n\\\n// * X sign - sidedness relative to right plane\\n\\\n// * Y sign - is negative OR magnitude is greater than 1.0 if vertex is on bottom of volume\\n\\\n#ifndef COLUMBUS_VIEW_2D\\n\\\nattribute vec4 startHiAndForwardOffsetX;\\n\\\nattribute vec4 startLoAndForwardOffsetY;\\n\\\nattribute vec4 startNormalAndForwardOffsetZ;\\n\\\nattribute vec4 endNormalAndTextureCoordinateNormalizationX;\\n\\\nattribute vec4 rightNormalAndTextureCoordinateNormalizationY;\\n\\\n#else\\n\\\nattribute vec4 startHiLo2D;\\n\\\nattribute vec4 offsetAndRight2D;\\n\\\nattribute vec4 startEndNormals2D;\\n\\\nattribute vec2 texcoordNormalization2D;\\n\\\n#endif\\n\\\n\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec4 v_startPlaneNormalEcAndHalfWidth;\\n\\\nvarying vec4 v_endPlaneNormalEcAndBatchId;\\n\\\nvarying vec4 v_rightPlaneEC;\\n\\\nvarying vec4 v_endEcAndStartEcX;\\n\\\nvarying vec4 v_texcoordNormalizationAndStartEcYZ;\\n\\\n\\n\\\n// For materials\\n\\\n#ifdef WIDTH_VARYING\\n\\\nvarying float v_width;\\n\\\n#endif\\n\\\n#ifdef ANGLE_VARYING\\n\\\nvarying float v_polylineAngle;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef PER_INSTANCE_COLOR\\n\\\nvarying vec4 v_color;\\n\\\n#endif\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n#ifdef COLUMBUS_VIEW_2D\\n\\\n    vec3 ecStart = (czm_modelViewRelativeToEye * czm_translateRelativeToEye(vec3(0.0, startHiLo2D.xy), vec3(0.0, startHiLo2D.zw))).xyz;\\n\\\n\\n\\\n    vec3 forwardDirectionEC = czm_normal * vec3(0.0, offsetAndRight2D.xy);\\n\\\n    vec3 ecEnd = forwardDirectionEC + ecStart;\\n\\\n    forwardDirectionEC = normalize(forwardDirectionEC);\\n\\\n\\n\\\n    // Right plane\\n\\\n    v_rightPlaneEC.xyz = czm_normal * vec3(0.0, offsetAndRight2D.zw);\\n\\\n    v_rightPlaneEC.w = -dot(v_rightPlaneEC.xyz, ecStart);\\n\\\n\\n\\\n    // start plane\\n\\\n    vec4 startPlaneEC;\\n\\\n    startPlaneEC.xyz =  czm_normal * vec3(0.0, startEndNormals2D.xy);\\n\\\n    startPlaneEC.w = -dot(startPlaneEC.xyz, ecStart);\\n\\\n\\n\\\n    // end plane\\n\\\n    vec4 endPlaneEC;\\n\\\n    endPlaneEC.xyz =  czm_normal * vec3(0.0, startEndNormals2D.zw);\\n\\\n    endPlaneEC.w = -dot(endPlaneEC.xyz, ecEnd);\\n\\\n\\n\\\n    v_texcoordNormalizationAndStartEcYZ.x = abs(texcoordNormalization2D.x);\\n\\\n    v_texcoordNormalizationAndStartEcYZ.y = texcoordNormalization2D.y;\\n\\\n\\n\\\n#else // COLUMBUS_VIEW_2D\\n\\\n    vec3 ecStart = (czm_modelViewRelativeToEye * czm_translateRelativeToEye(startHiAndForwardOffsetX.xyz, startLoAndForwardOffsetY.xyz)).xyz;\\n\\\n    vec3 offset = czm_normal * vec3(startHiAndForwardOffsetX.w, startLoAndForwardOffsetY.w, startNormalAndForwardOffsetZ.w);\\n\\\n    vec3 ecEnd = ecStart + offset;\\n\\\n\\n\\\n    vec3 forwardDirectionEC = normalize(offset);\\n\\\n\\n\\\n    // start plane\\n\\\n    vec4 startPlaneEC;\\n\\\n    startPlaneEC.xyz = czm_normal * startNormalAndForwardOffsetZ.xyz;\\n\\\n    startPlaneEC.w = -dot(startPlaneEC.xyz, ecStart);\\n\\\n\\n\\\n    // end plane\\n\\\n    vec4 endPlaneEC;\\n\\\n    endPlaneEC.xyz = czm_normal * endNormalAndTextureCoordinateNormalizationX.xyz;\\n\\\n    endPlaneEC.w = -dot(endPlaneEC.xyz, ecEnd);\\n\\\n\\n\\\n    // Right plane\\n\\\n    v_rightPlaneEC.xyz = czm_normal * rightNormalAndTextureCoordinateNormalizationY.xyz;\\n\\\n    v_rightPlaneEC.w = -dot(v_rightPlaneEC.xyz, ecStart);\\n\\\n\\n\\\n    v_texcoordNormalizationAndStartEcYZ.x = abs(endNormalAndTextureCoordinateNormalizationX.w);\\n\\\n    v_texcoordNormalizationAndStartEcYZ.y = rightNormalAndTextureCoordinateNormalizationY.w;\\n\\\n\\n\\\n#endif // COLUMBUS_VIEW_2D\\n\\\n\\n\\\n    v_endEcAndStartEcX.xyz = ecEnd;\\n\\\n    v_endEcAndStartEcX.w = ecStart.x;\\n\\\n    v_texcoordNormalizationAndStartEcYZ.zw = ecStart.yz;\\n\\\n\\n\\\n#ifdef PER_INSTANCE_COLOR\\n\\\n    v_color = czm_batchTable_color(batchId);\\n\\\n#endif // PER_INSTANCE_COLOR\\n\\\n\\n\\\n    // Compute a normal along which to \\\"push\\\" the position out, extending the miter depending on view distance.\\n\\\n    // Position has already been \\\"pushed\\\" by unit length along miter normal, and miter normals are encoded in the planes.\\n\\\n    // Decode the normal to use at this specific vertex, push the position back, and then push to where it needs to be.\\n\\\n    vec4 positionRelativeToEye = czm_computePosition();\\n\\\n\\n\\\n    // Check distance to the end plane and start plane, pick the plane that is closer\\n\\\n    vec4 positionEC = czm_modelViewRelativeToEye * positionRelativeToEye; // w = 1.0, see czm_computePosition\\n\\\n    float absStartPlaneDistance = abs(czm_planeDistance(startPlaneEC, positionEC.xyz));\\n\\\n    float absEndPlaneDistance = abs(czm_planeDistance(endPlaneEC, positionEC.xyz));\\n\\\n    vec3 planeDirection = czm_branchFreeTernary(absStartPlaneDistance < absEndPlaneDistance, startPlaneEC.xyz, endPlaneEC.xyz);\\n\\\n    vec3 upOrDown = normalize(cross(v_rightPlaneEC.xyz, planeDirection)); // Points \\\"up\\\" for start plane, \\\"down\\\" at end plane.\\n\\\n    vec3 normalEC = normalize(cross(planeDirection, upOrDown));           // In practice, the opposite seems to work too.\\n\\\n\\n\\\n    // Extrude bottom vertices downward for far view distances, like for GroundPrimitives\\n\\\n    upOrDown = cross(forwardDirectionEC, normalEC);\\n\\\n    upOrDown = float(czm_sceneMode == czm_sceneMode3D) * upOrDown;\\n\\\n    upOrDown = float(v_texcoordNormalizationAndStartEcYZ.y > 1.0 || v_texcoordNormalizationAndStartEcYZ.y < 0.0) * upOrDown;\\n\\\n    upOrDown = min(GLOBE_MINIMUM_ALTITUDE, czm_geometricToleranceOverMeter * length(positionRelativeToEye.xyz)) * upOrDown;\\n\\\n    positionEC.xyz += upOrDown;\\n\\\n\\n\\\n    v_texcoordNormalizationAndStartEcYZ.y = czm_branchFreeTernary(v_texcoordNormalizationAndStartEcYZ.y > 1.0, 0.0, abs(v_texcoordNormalizationAndStartEcYZ.y));\\n\\\n\\n\\\n    // Determine distance along normalEC to push for a volume of appropriate width.\\n\\\n    // Make volumes about double pixel width for a conservative fit - in practice the\\n\\\n    // extra cost here is minimal compared to the loose volume heights.\\n\\\n    //\\n\\\n    // N = normalEC (guaranteed \\\"right-facing\\\")\\n\\\n    // R = rightEC\\n\\\n    // p = angle between N and R\\n\\\n    // w = distance to push along R if R == N\\n\\\n    // d = distance to push along N\\n\\\n    //\\n\\\n    //   N   R\\n\\\n    //  { \\ p| }      * cos(p) = dot(N, R) = w / d\\n\\\n    //  d\\ \\ |  |w    * d = w / dot(N, R)\\n\\\n    //    { \\| }\\n\\\n    //       o---------- polyline segment ---->\\n\\\n    //\\n\\\n    float width = czm_batchTable_width(batchId);\\n\\\n#ifdef WIDTH_VARYING\\n\\\n    v_width = width;\\n\\\n#endif\\n\\\n\\n\\\n    v_startPlaneNormalEcAndHalfWidth.xyz = startPlaneEC.xyz;\\n\\\n    v_startPlaneNormalEcAndHalfWidth.w = width * 0.5;\\n\\\n\\n\\\n    v_endPlaneNormalEcAndBatchId.xyz = endPlaneEC.xyz;\\n\\\n    v_endPlaneNormalEcAndBatchId.w = batchId;\\n\\\n\\n\\\n    width = width * max(0.0, czm_metersPerPixel(positionEC)); // width = distance to push along R\\n\\\n    width = width / dot(normalEC, v_rightPlaneEC.xyz); // width = distance to push along N\\n\\\n\\n\\\n    // Determine if this vertex is on the \\\"left\\\" or \\\"right\\\"\\n\\\n#ifdef COLUMBUS_VIEW_2D\\n\\\n        normalEC *= sign(texcoordNormalization2D.x);\\n\\\n#else\\n\\\n        normalEC *= sign(endNormalAndTextureCoordinateNormalizationX.w);\\n\\\n#endif\\n\\\n\\n\\\n    positionEC.xyz += width * normalEC;\\n\\\n    gl_Position = czm_depthClamp(czm_projection * positionEC);\\n\\\n\\n\\\n#ifdef ANGLE_VARYING\\n\\\n    // Approximate relative screen space direction of the line.\\n\\\n    vec2 approxLineDirection = normalize(vec2(forwardDirectionEC.x, -forwardDirectionEC.y));\\n\\\n    approxLineDirection.y = czm_branchFreeTernary(approxLineDirection.x == 0.0 && approxLineDirection.y == 0.0, -1.0, approxLineDirection.y);\\n\\\n    v_polylineAngle = czm_fastApproximateAtan(approxLineDirection.x, approxLineDirection.y);\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 position2DHigh;\\n\\\nattribute vec3 position2DLow;\\n\\\nattribute vec3 prevPosition3DHigh;\\n\\\nattribute vec3 prevPosition3DLow;\\n\\\nattribute vec3 prevPosition2DHigh;\\n\\\nattribute vec3 prevPosition2DLow;\\n\\\nattribute vec3 nextPosition3DHigh;\\n\\\nattribute vec3 nextPosition3DLow;\\n\\\nattribute vec3 nextPosition2DHigh;\\n\\\nattribute vec3 nextPosition2DLow;\\n\\\nattribute vec4 texCoordExpandAndBatchIndex;\\n\\\n\\n\\\nvarying vec2  v_st;\\n\\\nvarying float v_width;\\n\\\nvarying vec4 v_pickColor;\\n\\\nvarying float v_polylineAngle;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    float texCoord = texCoordExpandAndBatchIndex.x;\\n\\\n    float expandDir = texCoordExpandAndBatchIndex.y;\\n\\\n    bool usePrev = texCoordExpandAndBatchIndex.z < 0.0;\\n\\\n    float batchTableIndex = texCoordExpandAndBatchIndex.w;\\n\\\n\\n\\\n    vec2 widthAndShow = batchTable_getWidthAndShow(batchTableIndex);\\n\\\n    float width = widthAndShow.x + 0.5;\\n\\\n    float show = widthAndShow.y;\\n\\\n\\n\\\n    if (width < 1.0)\\n\\\n    {\\n\\\n        show = 0.0;\\n\\\n    }\\n\\\n\\n\\\n    vec4 pickColor = batchTable_getPickColor(batchTableIndex);\\n\\\n\\n\\\n    vec4 p, prev, next;\\n\\\n    if (czm_morphTime == 1.0)\\n\\\n    {\\n\\\n        p = czm_translateRelativeToEye(position3DHigh.xyz, position3DLow.xyz);\\n\\\n        prev = czm_translateRelativeToEye(prevPosition3DHigh.xyz, prevPosition3DLow.xyz);\\n\\\n        next = czm_translateRelativeToEye(nextPosition3DHigh.xyz, nextPosition3DLow.xyz);\\n\\\n    }\\n\\\n    else if (czm_morphTime == 0.0)\\n\\\n    {\\n\\\n        p = czm_translateRelativeToEye(position2DHigh.zxy, position2DLow.zxy);\\n\\\n        prev = czm_translateRelativeToEye(prevPosition2DHigh.zxy, prevPosition2DLow.zxy);\\n\\\n        next = czm_translateRelativeToEye(nextPosition2DHigh.zxy, nextPosition2DLow.zxy);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        p = czm_columbusViewMorph(\\n\\\n                czm_translateRelativeToEye(position2DHigh.zxy, position2DLow.zxy),\\n\\\n                czm_translateRelativeToEye(position3DHigh.xyz, position3DLow.xyz),\\n\\\n                czm_morphTime);\\n\\\n        prev = czm_columbusViewMorph(\\n\\\n                czm_translateRelativeToEye(prevPosition2DHigh.zxy, prevPosition2DLow.zxy),\\n\\\n                czm_translateRelativeToEye(prevPosition3DHigh.xyz, prevPosition3DLow.xyz),\\n\\\n                czm_morphTime);\\n\\\n        next = czm_columbusViewMorph(\\n\\\n                czm_translateRelativeToEye(nextPosition2DHigh.zxy, nextPosition2DLow.zxy),\\n\\\n                czm_translateRelativeToEye(nextPosition3DHigh.xyz, nextPosition3DLow.xyz),\\n\\\n                czm_morphTime);\\n\\\n    }\\n\\\n\\n\\\n    #ifdef DISTANCE_DISPLAY_CONDITION\\n\\\n        vec3 centerHigh = batchTable_getCenterHigh(batchTableIndex);\\n\\\n        vec4 centerLowAndRadius = batchTable_getCenterLowAndRadius(batchTableIndex);\\n\\\n        vec3 centerLow = centerLowAndRadius.xyz;\\n\\\n        float radius = centerLowAndRadius.w;\\n\\\n        vec2 distanceDisplayCondition = batchTable_getDistanceDisplayCondition(batchTableIndex);\\n\\\n\\n\\\n        float lengthSq;\\n\\\n        if (czm_sceneMode == czm_sceneMode2D)\\n\\\n        {\\n\\\n            lengthSq = czm_eyeHeight2D.y;\\n\\\n        }\\n\\\n        else\\n\\\n        {\\n\\\n            vec4 center = czm_translateRelativeToEye(centerHigh.xyz, centerLow.xyz);\\n\\\n            lengthSq = max(0.0, dot(center.xyz, center.xyz) - radius * radius);\\n\\\n        }\\n\\\n\\n\\\n        float nearSq = distanceDisplayCondition.x * distanceDisplayCondition.x;\\n\\\n        float farSq = distanceDisplayCondition.y * distanceDisplayCondition.y;\\n\\\n        if (lengthSq < nearSq || lengthSq > farSq)\\n\\\n        {\\n\\\n            show = 0.0;\\n\\\n        }\\n\\\n    #endif\\n\\\n\\n\\\n    float polylineAngle;\\n\\\n    vec4 positionWC = getPolylineWindowCoordinates(p, prev, next, expandDir, width, usePrev, polylineAngle);\\n\\\n    gl_Position = czm_viewportOrthographic * positionWC * show;\\n\\\n\\n\\\n    v_st.s = texCoord;\\n\\\n    v_st.t = czm_writeNonPerspective(clamp(expandDir, 0.0, 1.0), gl_Position.w);\\n\\\n\\n\\\n    v_width = width;\\n\\\n    v_pickColor = pickColor;\\n\\\n    v_polylineAngle = polylineAngle;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D colorTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\n#ifdef AUTO_EXPOSURE\\n\\\nuniform sampler2D autoExposure;\\n\\\n#endif\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 fragmentColor = texture2D(colorTexture, v_textureCoordinates);\\n\\\n    vec3 color = fragmentColor.rgb;\\n\\\n\\n\\\n#ifdef AUTO_EXPOSURE\\n\\\n    color /= texture2D(autoExposure, vec2(0.5)).r;\\n\\\n#endif\\n\\\n    color = czm_acesTonemapping(color);\\n\\\n    color = czm_inverseGamma(color);\\n\\\n\\n\\\n    gl_FragColor = vec4(color, fragmentColor.a);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D colorTexture;\\n\\\nuniform sampler2D colorTexture2;\\n\\\n\\n\\\nuniform vec2 center;\\n\\\nuniform float radius;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 color0 = texture2D(colorTexture, v_textureCoordinates);\\n\\\n    vec4 color1 = texture2D(colorTexture2, v_textureCoordinates);\\n\\\n\\n\\\n    float x = length(gl_FragCoord.xy - center) / radius;\\n\\\n    float t = smoothstep(0.5, 0.8, x);\\n\\\n    gl_FragColor = mix(color0 + color1, color1, t);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D randomTexture;\\n\\\nuniform sampler2D depthTexture;\\n\\\nuniform float intensity;\\n\\\nuniform float bias;\\n\\\nuniform float lengthCap;\\n\\\nuniform float stepSize;\\n\\\nuniform float frustumLength;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvec4 clipToEye(vec2 uv, float depth)\\n\\\n{\\n\\\n    vec2 xy = vec2((uv.x * 2.0 - 1.0), ((1.0 - uv.y) * 2.0 - 1.0));\\n\\\n    vec4 posEC = czm_inverseProjection * vec4(xy, depth, 1.0);\\n\\\n    posEC = posEC / posEC.w;\\n\\\n    return posEC;\\n\\\n}\\n\\\n\\n\\\n//Reconstruct Normal Without Edge Removation\\n\\\nvec3 getNormalXEdge(vec3 posInCamera, float depthU, float depthD, float depthL, float depthR, vec2 pixelSize)\\n\\\n{\\n\\\n    vec4 posInCameraUp = clipToEye(v_textureCoordinates - vec2(0.0, pixelSize.y), depthU);\\n\\\n    vec4 posInCameraDown = clipToEye(v_textureCoordinates + vec2(0.0, pixelSize.y), depthD);\\n\\\n    vec4 posInCameraLeft = clipToEye(v_textureCoordinates - vec2(pixelSize.x, 0.0), depthL);\\n\\\n    vec4 posInCameraRight = clipToEye(v_textureCoordinates + vec2(pixelSize.x, 0.0), depthR);\\n\\\n\\n\\\n    vec3 up = posInCamera.xyz - posInCameraUp.xyz;\\n\\\n    vec3 down = posInCameraDown.xyz - posInCamera.xyz;\\n\\\n    vec3 left = posInCamera.xyz - posInCameraLeft.xyz;\\n\\\n    vec3 right = posInCameraRight.xyz - posInCamera.xyz;\\n\\\n\\n\\\n    vec3 DX = length(left) < length(right) ? left : right;\\n\\\n    vec3 DY = length(up) < length(down) ? up : down;\\n\\\n\\n\\\n    return normalize(cross(DY, DX));\\n\\\n}\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    float depth = czm_readDepth(depthTexture, v_textureCoordinates);\\n\\\n    vec4 posInCamera = clipToEye(v_textureCoordinates, depth);\\n\\\n\\n\\\n    if (posInCamera.z > frustumLength)\\n\\\n    {\\n\\\n        gl_FragColor = vec4(1.0);\\n\\\n        return;\\n\\\n    }\\n\\\n\\n\\\n    vec2 pixelSize = czm_pixelRatio / czm_viewport.zw;\\n\\\n    float depthU = czm_readDepth(depthTexture, v_textureCoordinates - vec2(0.0, pixelSize.y));\\n\\\n    float depthD = czm_readDepth(depthTexture, v_textureCoordinates + vec2(0.0, pixelSize.y));\\n\\\n    float depthL = czm_readDepth(depthTexture, v_textureCoordinates - vec2(pixelSize.x, 0.0));\\n\\\n    float depthR = czm_readDepth(depthTexture, v_textureCoordinates + vec2(pixelSize.x, 0.0));\\n\\\n    vec3 normalInCamera = getNormalXEdge(posInCamera.xyz, depthU, depthD, depthL, depthR, pixelSize);\\n\\\n\\n\\\n    float ao = 0.0;\\n\\\n    vec2 sampleDirection = vec2(1.0, 0.0);\\n\\\n    float gapAngle = 90.0 * czm_radiansPerDegree;\\n\\\n\\n\\\n    // RandomNoise\\n\\\n    float randomVal = texture2D(randomTexture, v_textureCoordinates).x;\\n\\\n\\n\\\n    //Loop for each direction\\n\\\n    for (int i = 0; i < 4; i++)\\n\\\n    {\\n\\\n        float newGapAngle = gapAngle * (float(i) + randomVal);\\n\\\n        float cosVal = cos(newGapAngle);\\n\\\n        float sinVal = sin(newGapAngle);\\n\\\n\\n\\\n        //Rotate Sampling Direction\\n\\\n        vec2 rotatedSampleDirection = vec2(cosVal * sampleDirection.x - sinVal * sampleDirection.y, sinVal * sampleDirection.x + cosVal * sampleDirection.y);\\n\\\n        float localAO = 0.0;\\n\\\n        float localStepSize = stepSize;\\n\\\n\\n\\\n        //Loop for each step\\n\\\n        for (int j = 0; j < 6; j++)\\n\\\n        {\\n\\\n            vec2 newCoords = v_textureCoordinates + rotatedSampleDirection * localStepSize * pixelSize;\\n\\\n\\n\\\n            //Exception Handling\\n\\\n            if(newCoords.x > 1.0 || newCoords.y > 1.0 || newCoords.x < 0.0 || newCoords.y < 0.0)\\n\\\n            {\\n\\\n                break;\\n\\\n            }\\n\\\n\\n\\\n            float stepDepthInfo = czm_readDepth(depthTexture, newCoords);\\n\\\n            vec4 stepPosInCamera = clipToEye(newCoords, stepDepthInfo);\\n\\\n            vec3 diffVec = stepPosInCamera.xyz - posInCamera.xyz;\\n\\\n            float len = length(diffVec);\\n\\\n\\n\\\n            if (len > lengthCap)\\n\\\n            {\\n\\\n                break;\\n\\\n            }\\n\\\n\\n\\\n            float dotVal = clamp(dot(normalInCamera, normalize(diffVec)), 0.0, 1.0 );\\n\\\n            float weight = len / lengthCap;\\n\\\n            weight = 1.0 - weight * weight;\\n\\\n\\n\\\n            if (dotVal < bias)\\n\\\n            {\\n\\\n                dotVal = 0.0;\\n\\\n            }\\n\\\n\\n\\\n            localAO = max(localAO, dotVal * weight);\\n\\\n            localStepSize += stepSize;\\n\\\n        }\\n\\\n        ao += localAO;\\n\\\n    }\\n\\\n\\n\\\n    ao /= 4.0;\\n\\\n    ao = 1.0 - clamp(ao, 0.0, 1.0);\\n\\\n    ao = pow(ao, intensity);\\n\\\n    gl_FragColor = vec4(vec3(ao), 1.0);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D colorTexture;\\n\\\nuniform sampler2D ambientOcclusionTexture;\\n\\\nuniform bool ambientOcclusionOnly;\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    vec3 color = texture2D(colorTexture, v_textureCoordinates).rgb;\\n\\\n    vec3 ao = texture2D(ambientOcclusionTexture, v_textureCoordinates).rgb;\\n\\\n    gl_FragColor.rgb = ambientOcclusionOnly ? ao : ao * color;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D colorTexture;\\n\\\nuniform float gradations;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    vec3 rgb = texture2D(colorTexture, v_textureCoordinates).rgb;\\n\\\n#ifdef CZM_SELECTED_FEATURE\\n\\\n    if (czm_selected()) {\\n\\\n        gl_FragColor = vec4(rgb, 1.0);\\n\\\n        return;\\n\\\n    }\\n\\\n#endif\\n\\\n    float luminance = czm_luminance(rgb);\\n\\\n    float darkness = luminance * gradations;\\n\\\n    darkness = (darkness - fract(darkness)) / gradations;\\n\\\n    gl_FragColor = vec4(vec3(darkness), 1.0);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D colorTexture;\\n\\\nuniform sampler2D bloomTexture;\\n\\\nuniform bool glowOnly;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n\\\n\\n\\\n#ifdef CZM_SELECTED_FEATURE\\n\\\n    if (czm_selected()) {\\n\\\n        gl_FragColor = color;\\n\\\n        return;\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    vec4 bloom = texture2D(bloomTexture, v_textureCoordinates);\\n\\\n    gl_FragColor = glowOnly ? bloom : bloom + color;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D colorTexture;\\n\\\n\\n\\\nuniform float avgLuminance;\\n\\\nuniform float threshold;\\n\\\nuniform float offset;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nfloat key(float avg)\\n\\\n{\\n\\\n    float guess = 1.5 - (1.5 / (avg * 0.1 + 1.0));\\n\\\n    return max(0.0, guess) + 0.1;\\n\\\n}\\n\\\n\\n\\\n// See section 9. \\\"The bright-pass filter\\\" of Realtime HDR Rendering\\n\\\n// http://www.cg.tuwien.ac.at/research/publications/2007/Luksch_2007_RHR/Luksch_2007_RHR-RealtimeHDR%20.pdf\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n\\\n    vec3 xyz = czm_RGBToXYZ(color.rgb);\\n\\\n    float luminance = xyz.r;\\n\\\n\\n\\\n    float scaledLum = key(avgLuminance) * luminance / avgLuminance;\\n\\\n    float brightLum = max(scaledLum - threshold, 0.0);\\n\\\n    float brightness = brightLum / (offset + brightLum);\\n\\\n\\n\\\n    xyz.r = brightness;\\n\\\n    gl_FragColor = vec4(czm_XYZToRGB(xyz), 1.0);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D colorTexture;\\n\\\nuniform float brightness;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    vec3 rgb = texture2D(colorTexture, v_textureCoordinates).rgb;\\n\\\n    vec3 target = vec3(0.0);\\n\\\n    gl_FragColor = vec4(mix(target, rgb, brightness), 1.0);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D colorTexture;\\n\\\n\\n\\\n#ifdef DEBUG_SHOW_DEPTH\\n\\\nuniform sampler2D u_packedTranslucentDepth;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n#ifdef DEBUG_SHOW_DEPTH\\n\\\n    if (v_textureCoordinates.x < 0.5)\\n\\\n    {\\n\\\n        gl_FragColor.rgb = vec3(czm_unpackDepth(texture2D(u_packedTranslucentDepth, v_textureCoordinates)));\\n\\\n        gl_FragColor.a = 1.0;\\n\\\n    }\\n\\\n#else\\n\\\n    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n\\\n\\n\\\n#ifdef PICK\\n\\\n    if (color == vec4(0.0))\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n#else\\n\\\n    // Reverse premultiplication process to get the correct composited result of the classification primitives\\n\\\n    color.rgb /= color.a;\\n\\\n#endif\\n\\\n    gl_FragColor = color;\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D colorTexture;\\n\\\nuniform float contrast;\\n\\\nuniform float brightness;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    vec3 sceneColor = texture2D(colorTexture, v_textureCoordinates).xyz;\\n\\\n    sceneColor = czm_RGBToHSB(sceneColor);\\n\\\n    sceneColor.z += brightness;\\n\\\n    sceneColor = czm_HSBToRGB(sceneColor);\\n\\\n\\n\\\n    float factor = (259.0 * (contrast + 255.0)) / (255.0 * (259.0 - contrast));\\n\\\n    sceneColor = factor * (sceneColor - vec3(0.5)) + vec3(0.5);\\n\\\n    gl_FragColor = vec4(sceneColor, 1.0);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D colorTexture;\\n\\\nuniform sampler2D blurTexture;\\n\\\nuniform sampler2D depthTexture;\\n\\\nuniform float focalDistance;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvec4 toEye(vec2 uv, float depth)\\n\\\n{\\n\\\n   vec2 xy = vec2((uv.x * 2.0 - 1.0), ((1.0 - uv.y) * 2.0 - 1.0));\\n\\\n   vec4 posInCamera = czm_inverseProjection * vec4(xy, depth, 1.0);\\n\\\n   posInCamera = posInCamera / posInCamera.w;\\n\\\n   return posInCamera;\\n\\\n}\\n\\\n\\n\\\nfloat computeDepthBlur(float depth)\\n\\\n{\\n\\\n    float f;\\n\\\n    if (depth < focalDistance)\\n\\\n    {\\n\\\n        f = (focalDistance - depth) / (focalDistance - czm_currentFrustum.x);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        f = (depth - focalDistance) / (czm_currentFrustum.y - focalDistance);\\n\\\n        f = pow(f, 0.1);\\n\\\n    }\\n\\\n    f *= f;\\n\\\n    f = clamp(f, 0.0, 1.0);\\n\\\n    return pow(f, 0.5);\\n\\\n}\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    float depth = czm_readDepth(depthTexture, v_textureCoordinates);\\n\\\n    vec4 posInCamera = toEye(v_textureCoordinates, depth);\\n\\\n    float d = computeDepthBlur(-posInCamera.z);\\n\\\n    gl_FragColor = mix(texture2D(colorTexture, v_textureCoordinates), texture2D(blurTexture, v_textureCoordinates), d);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D depthTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    float depth = czm_readDepth(depthTexture, v_textureCoordinates);\\n\\\n    gl_FragColor = vec4(vec3(depth), 1.0);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D u_depthTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    float z_window = czm_unpackDepth(texture2D(u_depthTexture, v_textureCoordinates));\\n\\\n    z_window = czm_reverseLogDepth(z_window);\\n\\\n    float n_range = czm_depthRange.near;\\n\\\n    float f_range = czm_depthRange.far;\\n\\\n    float z_ndc = (2.0 * z_window - n_range - f_range) / (f_range - n_range);\\n\\\n    float scale = pow(z_ndc * 0.5 + 0.5, 8.0);\\n\\\n    gl_FragColor = vec4(mix(vec3(0.0), vec3(1.0), scale), 1.0);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D depthTexture;\\n\\\nuniform float length;\\n\\\nuniform vec4 color;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    float directions[3];\\n\\\n    directions[0] = -1.0;\\n\\\n    directions[1] = 0.0;\\n\\\n    directions[2] = 1.0;\\n\\\n\\n\\\n    float scalars[3];\\n\\\n    scalars[0] = 3.0;\\n\\\n    scalars[1] = 10.0;\\n\\\n    scalars[2] = 3.0;\\n\\\n\\n\\\n    float padx = czm_pixelRatio / czm_viewport.z;\\n\\\n    float pady = czm_pixelRatio / czm_viewport.w;\\n\\\n\\n\\\n#ifdef CZM_SELECTED_FEATURE\\n\\\n    bool selected = false;\\n\\\n    for (int i = 0; i < 3; ++i)\\n\\\n    {\\n\\\n        float dir = directions[i];\\n\\\n        selected = selected || czm_selected(vec2(-padx, dir * pady));\\n\\\n        selected = selected || czm_selected(vec2(padx, dir * pady));\\n\\\n        selected = selected || czm_selected(vec2(dir * padx, -pady));\\n\\\n        selected = selected || czm_selected(vec2(dir * padx, pady));\\n\\\n        if (selected)\\n\\\n        {\\n\\\n            break;\\n\\\n        }\\n\\\n    }\\n\\\n    if (!selected)\\n\\\n    {\\n\\\n        gl_FragColor = vec4(color.rgb, 0.0);\\n\\\n        return;\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    float horizEdge = 0.0;\\n\\\n    float vertEdge = 0.0;\\n\\\n\\n\\\n    for (int i = 0; i < 3; ++i)\\n\\\n    {\\n\\\n        float dir = directions[i];\\n\\\n        float scale = scalars[i];\\n\\\n\\n\\\n        horizEdge -= texture2D(depthTexture, v_textureCoordinates + vec2(-padx, dir * pady)).x * scale;\\n\\\n        horizEdge += texture2D(depthTexture, v_textureCoordinates + vec2(padx, dir * pady)).x * scale;\\n\\\n\\n\\\n        vertEdge -= texture2D(depthTexture, v_textureCoordinates + vec2(dir * padx, -pady)).x * scale;\\n\\\n        vertEdge += texture2D(depthTexture, v_textureCoordinates + vec2(dir * padx, pady)).x * scale;\\n\\\n    }\\n\\\n\\n\\\n    float len = sqrt(horizEdge * horizEdge + vertEdge * vertEdge);\\n\\\n    gl_FragColor = vec4(color.rgb, len > length ? color.a : 0.0);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec2 v_textureCoordinates;\\n\\\n\\n\\\nuniform sampler2D colorTexture;\\n\\\n\\n\\\nconst float fxaaQualitySubpix = 0.5;\\n\\\nconst float fxaaQualityEdgeThreshold = 0.125;\\n\\\nconst float fxaaQualityEdgeThresholdMin = 0.0833;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec2 fxaaQualityRcpFrame = vec2(1.0) / czm_viewport.zw;\\n\\\n    vec4 color = FxaaPixelShader(\\n\\\n        v_textureCoordinates,\\n\\\n        colorTexture,\\n\\\n        fxaaQualityRcpFrame,\\n\\\n        fxaaQualitySubpix,\\n\\\n        fxaaQualityEdgeThreshold,\\n\\\n        fxaaQualityEdgeThresholdMin);\\n\\\n    float alpha = texture2D(colorTexture, v_textureCoordinates).a;\\n\\\n    gl_FragColor = vec4(color.rgb, alpha);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D colorTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\n#ifdef AUTO_EXPOSURE\\n\\\nuniform sampler2D autoExposure;\\n\\\n#endif\\n\\\n\\n\\\n// See slides 142 and 143:\\n\\\n//     http://www.gdcvault.com/play/1012459/Uncharted_2__HDR_Lighting\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 fragmentColor = texture2D(colorTexture, v_textureCoordinates);\\n\\\n    vec3 color = fragmentColor.rgb;\\n\\\n\\n\\\n#ifdef AUTO_EXPOSURE\\n\\\n    float exposure = texture2D(autoExposure, vec2(0.5)).r;\\n\\\n    color /= exposure;\\n\\\n#endif\\n\\\n\\n\\\n\tconst float A = 0.22; // shoulder strength\\n\\\n\tconst float B = 0.30; // linear strength\\n\\\n\tconst float C = 0.10; // linear angle\\n\\\n\tconst float D = 0.20; // toe strength\\n\\\n\tconst float E = 0.01; // toe numerator\\n\\\n\tconst float F = 0.30; // toe denominator\\n\\\n\\n\\\n\tconst float white = 11.2; // linear white point value\\n\\\n\\n\\\n\tvec3 c = ((color * (A * color + C * B) + D * E) / (color * ( A * color + B) + D * F)) - E / F;\\n\\\n\tfloat w = ((white * (A * white + C * B) + D * E) / (white * ( A * white + B) + D * F)) - E / F;\\n\\\n\\n\\\n\tc = czm_inverseGamma(c / w);\\n\\\n\tgl_FragColor = vec4(c, fragmentColor.a);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#define SAMPLES 8\\n\\\n\\n\\\nuniform float delta;\\n\\\nuniform float sigma;\\n\\\nuniform float direction; // 0.0 for x direction, 1.0 for y direction\\n\\\n\\n\\\nuniform sampler2D colorTexture;\\n\\\n\\n\\\n#ifdef USE_STEP_SIZE\\n\\\nuniform float stepSize;\\n\\\n#else\\n\\\nuniform vec2 step;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\n//  Incremental Computation of the Gaussian:\\n\\\n//  https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch40.html\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec2 st = v_textureCoordinates;\\n\\\n    vec2 dir = vec2(1.0 - direction, direction);\\n\\\n\\n\\\n#ifdef USE_STEP_SIZE\\n\\\n    vec2 step = vec2(stepSize * (czm_pixelRatio / czm_viewport.zw));\\n\\\n#else\\n\\\n    vec2 step = step;\\n\\\n#endif\\n\\\n\\n\\\n    vec3 g;\\n\\\n    g.x = 1.0 / (sqrt(czm_twoPi) * sigma);\\n\\\n    g.y = exp((-0.5 * delta * delta) / (sigma * sigma));\\n\\\n    g.z = g.y * g.y;\\n\\\n\\n\\\n    vec4 result = texture2D(colorTexture, st) * g.x;\\n\\\n    for (int i = 1; i < SAMPLES; ++i)\\n\\\n    {\\n\\\n        g.xy *= g.yz;\\n\\\n\\n\\\n        vec2 offset = float(i) * dir * step;\\n\\\n        result += texture2D(colorTexture, st - offset) * g.x;\\n\\\n        result += texture2D(colorTexture, st + offset) * g.x;\\n\\\n    }\\n\\\n\\n\\\n    gl_FragColor = result;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D colorTexture;\\n\\\nuniform sampler2D dirtTexture;\\n\\\nuniform sampler2D starTexture;\\n\\\nuniform vec2 dirtTextureDimensions;\\n\\\nuniform float distortion;\\n\\\nuniform float ghostDispersal;\\n\\\nuniform float haloWidth;\\n\\\nuniform float dirtAmount;\\n\\\nuniform float earthRadius;\\n\\\nuniform float intensity;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\n// whether it is in space or not\\n\\\n// 6500000.0 is empirical value\\n\\\n#define DISTANCE_TO_SPACE 6500000.0\\n\\\n\\n\\\n// return ndc from world coordinate biased earthRadius\\n\\\nvec4 getNDCFromWC(vec3 WC, float earthRadius)\\n\\\n{\\n\\\n    vec4 positionEC = czm_view * vec4(WC, 1.0);\\n\\\n    positionEC = vec4(positionEC.x + earthRadius, positionEC.y, positionEC.z, 1.0);\\n\\\n    vec4 positionWC = czm_eyeToWindowCoordinates(positionEC);\\n\\\n    return czm_viewportOrthographic * vec4(positionWC.xy, -positionWC.z, 1.0);\\n\\\n}\\n\\\n\\n\\\n// Check if current pixel is included Earth\\n\\\n// if then mask it gradually\\n\\\nfloat isInEarth(vec2 texcoord, vec2 sceneSize)\\n\\\n{\\n\\\n    vec2 NDC = texcoord * 2.0 - 1.0;\\n\\\n    vec4 earthPosSC = getNDCFromWC(vec3(0.0), 0.0);\\n\\\n    vec4 earthPosSCEdge = getNDCFromWC(vec3(0.0), earthRadius * 1.5);\\n\\\n    NDC.xy -= earthPosSC.xy;\\n\\\n\\n\\\n    float X = abs(NDC.x) * sceneSize.x;\\n\\\n    float Y = abs(NDC.y) * sceneSize.y;\\n\\\n\\n\\\n    return clamp(0.0, 1.0, max(sqrt(X * X + Y * Y) / max(abs(earthPosSCEdge.x * sceneSize.x), 1.0) - 0.8 , 0.0));\\n\\\n}\\n\\\n\\n\\\n// For Chromatic effect\\n\\\nvec4 textureDistorted(sampler2D tex, vec2 texcoord, vec2 direction, vec3 distortion, bool isSpace)\\n\\\n{\\n\\\n    vec2 sceneSize = czm_viewport.zw;\\n\\\n    vec3 color;\\n\\\n    if(isSpace)\\n\\\n    {\\n\\\n        color.r = isInEarth(texcoord + direction * distortion.r, sceneSize) * texture2D(tex, texcoord + direction * distortion.r).r;\\n\\\n        color.g = isInEarth(texcoord + direction * distortion.g, sceneSize) * texture2D(tex, texcoord + direction * distortion.g).g;\\n\\\n        color.b = isInEarth(texcoord + direction * distortion.b, sceneSize) * texture2D(tex, texcoord + direction * distortion.b).b;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        color.r = texture2D(tex, texcoord + direction * distortion.r).r;\\n\\\n        color.g = texture2D(tex, texcoord + direction * distortion.g).g;\\n\\\n        color.b = texture2D(tex, texcoord + direction * distortion.b).b;\\n\\\n    }\\n\\\n    return vec4(clamp(color, 0.0, 1.0), 0.0);\\n\\\n}\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    vec4 originalColor = texture2D(colorTexture, v_textureCoordinates);\\n\\\n    vec3 rgb = originalColor.rgb;\\n\\\n    bool isSpace = length(czm_viewerPositionWC.xyz) > DISTANCE_TO_SPACE;\\n\\\n\\n\\\n    // Sun position\\n\\\n    vec4 sunPos = czm_morphTime == 1.0 ? vec4(czm_sunPositionWC, 1.0) : vec4(czm_sunPositionColumbusView.zxy, 1.0);\\n\\\n    vec4 sunPositionEC = czm_view * sunPos;\\n\\\n    vec4 sunPositionWC = czm_eyeToWindowCoordinates(sunPositionEC);\\n\\\n    sunPos = czm_viewportOrthographic * vec4(sunPositionWC.xy, -sunPositionWC.z, 1.0);\\n\\\n\\n\\\n    // If sun is not in the screen space, use original color.\\n\\\n    if(!isSpace || !((sunPos.x >= -1.1 && sunPos.x <= 1.1) && (sunPos.y >= -1.1 && sunPos.y <= 1.1)))\\n\\\n    {\\n\\\n        // Lens flare is disabled when not in space until #5932 is fixed.\\n\\\n        //    https://github.com/CesiumGS/cesium/issues/5932\\n\\\n        gl_FragColor = originalColor;\\n\\\n        return;\\n\\\n    }\\n\\\n\\n\\\n    vec2 texcoord = vec2(1.0) - v_textureCoordinates;\\n\\\n    vec2 pixelSize = czm_pixelRatio / czm_viewport.zw;\\n\\\n    vec2 invPixelSize = 1.0 / pixelSize;\\n\\\n    vec3 distortionVec = pixelSize.x * vec3(-distortion, 0.0, distortion);\\n\\\n\\n\\\n    // ghost vector to image centre:\\n\\\n    vec2 ghostVec = (vec2(0.5) - texcoord) * ghostDispersal;\\n\\\n    vec3 direction = normalize(vec3(ghostVec, 0.0));\\n\\\n\\n\\\n    // sample ghosts:\\n\\\n    vec4 result = vec4(0.0);\\n\\\n    vec4 ghost = vec4(0.0);\\n\\\n    for (int i = 0; i < 4; ++i)\\n\\\n    {\\n\\\n        vec2 offset = fract(texcoord + ghostVec * float(i));\\n\\\n        // Only bright spots from the centre of the source image\\n\\\n        ghost += textureDistorted(colorTexture, offset, direction.xy, distortionVec, isSpace);\\n\\\n    }\\n\\\n    result += ghost;\\n\\\n\\n\\\n    // sample halo\\n\\\n    vec2 haloVec = normalize(ghostVec) * haloWidth;\\n\\\n    float weightForHalo = length(vec2(0.5) - fract(texcoord + haloVec)) / length(vec2(0.5));\\n\\\n    weightForHalo = pow(1.0 - weightForHalo, 5.0);\\n\\\n\\n\\\n    result += textureDistorted(colorTexture, texcoord + haloVec, direction.xy, distortionVec, isSpace) * weightForHalo * 1.5;\\n\\\n\\n\\\n    // dirt on lens\\n\\\n    vec2 dirtTexCoords = (v_textureCoordinates * invPixelSize) / dirtTextureDimensions;\\n\\\n    if (dirtTexCoords.x > 1.0)\\n\\\n    {\\n\\\n        dirtTexCoords.x = mod(floor(dirtTexCoords.x), 2.0) == 1.0 ? 1.0 - fract(dirtTexCoords.x) :  fract(dirtTexCoords.x);\\n\\\n    }\\n\\\n    if (dirtTexCoords.y > 1.0)\\n\\\n    {\\n\\\n        dirtTexCoords.y = mod(floor(dirtTexCoords.y), 2.0) == 1.0 ? 1.0 - fract(dirtTexCoords.y) :  fract(dirtTexCoords.y);\\n\\\n    }\\n\\\n    result += dirtAmount * texture2D(dirtTexture, dirtTexCoords);\\n\\\n\\n\\\n    // Rotating starburst texture's coordinate\\n\\\n    // dot(czm_view[0].xyz, vec3(0.0, 0.0, 1.0)) + dot(czm_view[1].xyz, vec3(0.0, 1.0, 0.0))\\n\\\n    float camrot = czm_view[0].z + czm_view[1].y;\\n\\\n    float cosValue = cos(camrot);\\n\\\n    float sinValue = sin(camrot);\\n\\\n    mat3 rotation = mat3(\\n\\\n        cosValue, -sinValue, 0.0,\\n\\\n        sinValue, cosValue, 0.0,\\n\\\n        0.0, 0.0, 1.0\\n\\\n    );\\n\\\n\\n\\\n    vec3 st1 = vec3(v_textureCoordinates * 2.0 - vec2(1.0), 1.0);\\n\\\n    vec3 st2 = vec3((rotation * st1).xy, 1.0);\\n\\\n    vec3 st3 = st2 * 0.5 + vec3(0.5);\\n\\\n    vec2 lensStarTexcoord = st3.xy;\\n\\\n    float weightForLensFlare = length(vec3(sunPos.xy, 0.0));\\n\\\n    float oneMinusWeightForLensFlare = max(1.0 - weightForLensFlare, 0.0);\\n\\\n\\n\\\n    if (!isSpace)\\n\\\n    {\\n\\\n        result *= oneMinusWeightForLensFlare * intensity * 0.2;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        result *= oneMinusWeightForLensFlare * intensity;\\n\\\n        result *= texture2D(starTexture, lensStarTexcoord) * pow(weightForLensFlare, 1.0) * max((1.0 - length(vec3(st1.xy, 0.0))), 0.0) * 2.0;\\n\\\n    }\\n\\\n\\n\\\n    result += texture2D(colorTexture, v_textureCoordinates);\\n\\\n\\n\\\n    gl_FragColor = result;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D colorTexture;\\n\\\nuniform vec3 white;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\n#ifdef AUTO_EXPOSURE\\n\\\nuniform sampler2D autoExposure;\\n\\\n#endif\\n\\\n\\n\\\n// See equation 4:\\n\\\n//    http://www.cs.utah.edu/~reinhard/cdrom/tonemap.pdf\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 fragmentColor = texture2D(colorTexture, v_textureCoordinates);\\n\\\n    vec3 color = fragmentColor.rgb;\\n\\\n#ifdef AUTO_EXPOSURE\\n\\\n    float exposure = texture2D(autoExposure, vec2(0.5)).r;\\n\\\n    color /= exposure;\\n\\\n#endif\\n\\\n    color = (color * (1.0 + color / white)) / (1.0 + color);\\n\\\n    color = czm_inverseGamma(color);\\n\\\n    gl_FragColor = vec4(color, fragmentColor.a);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D colorTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nfloat rand(vec2 co)\\n\\\n{\\n\\\n    return fract(sin(dot(co.xy ,vec2(12.9898, 78.233))) * 43758.5453);\\n\\\n}\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    float noiseValue = rand(v_textureCoordinates + sin(czm_frameNumber)) * 0.1;\\n\\\n    vec3 rgb = texture2D(colorTexture, v_textureCoordinates).rgb;\\n\\\n    vec3 green = vec3(0.0, 1.0, 0.0);\\n\\\n    gl_FragColor = vec4((noiseValue + rgb) * green, 1.0);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D colorTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    gl_FragColor = texture2D(colorTexture, v_textureCoordinates);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform highp sampler2D u_depthTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    gl_FragColor = czm_packDepth(texture2D(u_depthTexture, v_textureCoordinates).r);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#extension GL_EXT_frag_depth : enable\\n\\\n\\n\\\nuniform sampler2D u_pointCloud_colorGBuffer;\\n\\\nuniform sampler2D u_pointCloud_depthGBuffer;\\n\\\nuniform vec2 u_distanceAndEdlStrength;\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvec2 neighborContribution(float log2Depth, vec2 offset)\\n\\\n{\\n\\\n    float dist = u_distanceAndEdlStrength.x;\\n\\\n    vec2 texCoordOrig = v_textureCoordinates + offset * dist;\\n\\\n    vec2 texCoord0 = v_textureCoordinates + offset * floor(dist);\\n\\\n    vec2 texCoord1 = v_textureCoordinates + offset * ceil(dist);\\n\\\n\\n\\\n    float depthOrLogDepth0 = czm_unpackDepth(texture2D(u_pointCloud_depthGBuffer, texCoord0));\\n\\\n    float depthOrLogDepth1 = czm_unpackDepth(texture2D(u_pointCloud_depthGBuffer, texCoord1));\\n\\\n\\n\\\n    // ignore depth values that are the clear depth\\n\\\n    if (depthOrLogDepth0 == 0.0 || depthOrLogDepth1 == 0.0) {\\n\\\n        return vec2(0.0);\\n\\\n    }\\n\\\n\\n\\\n    // interpolate the two adjacent depth values\\n\\\n    float depthMix = mix(depthOrLogDepth0, depthOrLogDepth1, fract(dist));\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(texCoordOrig, depthMix);\\n\\\n    return vec2(max(0.0, log2Depth - log2(-eyeCoordinate.z / eyeCoordinate.w)), 1.0);\\n\\\n}\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    float depthOrLogDepth = czm_unpackDepth(texture2D(u_pointCloud_depthGBuffer, v_textureCoordinates));\\n\\\n\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(gl_FragCoord.xy, depthOrLogDepth);\\n\\\n    eyeCoordinate /= eyeCoordinate.w;\\n\\\n\\n\\\n    float log2Depth = log2(-eyeCoordinate.z);\\n\\\n\\n\\\n    if (depthOrLogDepth == 0.0) // 0.0 is the clear value for the gbuffer\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    vec4 color = texture2D(u_pointCloud_colorGBuffer, v_textureCoordinates);\\n\\\n\\n\\\n    // sample from neighbors left, right, down, up\\n\\\n    vec2 texelSize = 1.0 / czm_viewport.zw;\\n\\\n\\n\\\n    vec2 responseAndCount = vec2(0.0);\\n\\\n\\n\\\n    responseAndCount += neighborContribution(log2Depth, vec2(-texelSize.x, 0.0));\\n\\\n    responseAndCount += neighborContribution(log2Depth, vec2(+texelSize.x, 0.0));\\n\\\n    responseAndCount += neighborContribution(log2Depth, vec2(0.0, -texelSize.y));\\n\\\n    responseAndCount += neighborContribution(log2Depth, vec2(0.0, +texelSize.y));\\n\\\n\\n\\\n    float response = responseAndCount.x / responseAndCount.y;\\n\\\n    float strength = u_distanceAndEdlStrength.y;\\n\\\n    float shade = exp(-response * 300.0 * strength);\\n\\\n    color.rgb *= shade;\\n\\\n    gl_FragColor = vec4(color);\\n\\\n\\n\\\n    // Input and output depth are the same.\\n\\\n    gl_FragDepthEXT = depthOrLogDepth;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D colorTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\n#ifdef AUTO_EXPOSURE\\n\\\nuniform sampler2D autoExposure;\\n\\\n#endif\\n\\\n\\n\\\n// See equation 3:\\n\\\n//    http://www.cs.utah.edu/~reinhard/cdrom/tonemap.pdf\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 fragmentColor = texture2D(colorTexture, v_textureCoordinates);\\n\\\n    vec3 color = fragmentColor.rgb;\\n\\\n#ifdef AUTO_EXPOSURE\\n\\\n    float exposure = texture2D(autoExposure, vec2(0.5)).r;\\n\\\n    color /= exposure;\\n\\\n#endif\\n\\\n    color = color / (1.0 + color);\\n\\\n    color = czm_inverseGamma(color);\\n\\\n    gl_FragColor = vec4(color, fragmentColor.a);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D colorTexture;\\n\\\nuniform sampler2D silhouetteTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    vec4 silhouetteColor = texture2D(silhouetteTexture, v_textureCoordinates);\\n\\\n    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n\\\n    gl_FragColor = mix(color, silhouetteColor, silhouetteColor.a);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D u_texture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    gl_FragColor = texture2D(u_texture, v_textureCoordinates);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec4 position;\\n\\\nattribute float webMercatorT;\\n\\\n\\n\\\nuniform vec2 u_textureDimensions;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    v_textureCoordinates = vec2(position.x, webMercatorT);\\n\\\n    gl_Position = czm_viewportOrthographic * (position * vec4(u_textureDimensions, 1.0, 1.0));\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef GL_EXT_frag_depth\\n\\\n#extension GL_EXT_frag_depth : enable\\n\\\n#endif\\n\\\n\\n\\\n#ifdef TEXTURE_COORDINATES\\n\\\n#ifdef SPHERICAL\\n\\\nvarying vec4 v_sphericalExtents;\\n\\\n#else // SPHERICAL\\n\\\nvarying vec2 v_inversePlaneExtents;\\n\\\nvarying vec4 v_westPlane;\\n\\\nvarying vec4 v_southPlane;\\n\\\n#endif // SPHERICAL\\n\\\nvarying vec3 v_uvMinAndSphericalLongitudeRotation;\\n\\\nvarying vec3 v_uMaxAndInverseDistance;\\n\\\nvarying vec3 v_vMaxAndInverseDistance;\\n\\\n#endif // TEXTURE_COORDINATES\\n\\\n\\n\\\n#ifdef PER_INSTANCE_COLOR\\n\\\nvarying vec4 v_color;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef NORMAL_EC\\n\\\nvec3 getEyeCoordinate3FromWindowCoordinate(vec2 fragCoord, float logDepthOrDepth) {\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(fragCoord, logDepthOrDepth);\\n\\\n    return eyeCoordinate.xyz / eyeCoordinate.w;\\n\\\n}\\n\\\n\\n\\\nvec3 vectorFromOffset(vec4 eyeCoordinate, vec2 positiveOffset) {\\n\\\n    vec2 glFragCoordXY = gl_FragCoord.xy;\\n\\\n    // Sample depths at both offset and negative offset\\n\\\n    float upOrRightLogDepth = czm_unpackDepth(texture2D(czm_globeDepthTexture, (glFragCoordXY + positiveOffset) / czm_viewport.zw));\\n\\\n    float downOrLeftLogDepth = czm_unpackDepth(texture2D(czm_globeDepthTexture, (glFragCoordXY - positiveOffset) / czm_viewport.zw));\\n\\\n    // Explicitly evaluate both paths\\n\\\n    // Necessary for multifrustum and for edges of the screen\\n\\\n    bvec2 upOrRightInBounds = lessThan(glFragCoordXY + positiveOffset, czm_viewport.zw);\\n\\\n    float useUpOrRight = float(upOrRightLogDepth > 0.0 && upOrRightInBounds.x && upOrRightInBounds.y);\\n\\\n    float useDownOrLeft = float(useUpOrRight == 0.0);\\n\\\n    vec3 upOrRightEC = getEyeCoordinate3FromWindowCoordinate(glFragCoordXY + positiveOffset, upOrRightLogDepth);\\n\\\n    vec3 downOrLeftEC = getEyeCoordinate3FromWindowCoordinate(glFragCoordXY - positiveOffset, downOrLeftLogDepth);\\n\\\n    return (upOrRightEC - (eyeCoordinate.xyz / eyeCoordinate.w)) * useUpOrRight + ((eyeCoordinate.xyz / eyeCoordinate.w) - downOrLeftEC) * useDownOrLeft;\\n\\\n}\\n\\\n#endif // NORMAL_EC\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n#ifdef REQUIRES_EC\\n\\\n    float logDepthOrDepth = czm_unpackDepth(texture2D(czm_globeDepthTexture, gl_FragCoord.xy / czm_viewport.zw));\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(gl_FragCoord.xy, logDepthOrDepth);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef REQUIRES_WC\\n\\\n    vec4 worldCoordinate4 = czm_inverseView * eyeCoordinate;\\n\\\n    vec3 worldCoordinate = worldCoordinate4.xyz / worldCoordinate4.w;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef TEXTURE_COORDINATES\\n\\\n    vec2 uv;\\n\\\n#ifdef SPHERICAL\\n\\\n    // Treat world coords as a sphere normal for spherical coordinates\\n\\\n    vec2 sphericalLatLong = czm_approximateSphericalCoordinates(worldCoordinate);\\n\\\n    sphericalLatLong.y += v_uvMinAndSphericalLongitudeRotation.z;\\n\\\n    sphericalLatLong.y = czm_branchFreeTernary(sphericalLatLong.y < czm_pi, sphericalLatLong.y, sphericalLatLong.y - czm_twoPi);\\n\\\n    uv.x = (sphericalLatLong.y - v_sphericalExtents.y) * v_sphericalExtents.w;\\n\\\n    uv.y = (sphericalLatLong.x - v_sphericalExtents.x) * v_sphericalExtents.z;\\n\\\n#else // SPHERICAL\\n\\\n    // Unpack planes and transform to eye space\\n\\\n    uv.x = czm_planeDistance(v_westPlane, eyeCoordinate.xyz / eyeCoordinate.w) * v_inversePlaneExtents.x;\\n\\\n    uv.y = czm_planeDistance(v_southPlane, eyeCoordinate.xyz / eyeCoordinate.w) * v_inversePlaneExtents.y;\\n\\\n#endif // SPHERICAL\\n\\\n#endif // TEXTURE_COORDINATES\\n\\\n\\n\\\n#ifdef PICK\\n\\\n#ifdef CULL_FRAGMENTS\\n\\\n    // When classifying translucent geometry, logDepthOrDepth == 0.0\\n\\\n    // indicates a region that should not be classified, possibly due to there\\n\\\n    // being opaque pixels there in another buffer.\\n\\\n    // Check for logDepthOrDepth != 0.0 to make sure this should be classified.\\n\\\n    if (0.0 <= uv.x && uv.x <= 1.0 && 0.0 <= uv.y && uv.y <= 1.0 || logDepthOrDepth != 0.0) {\\n\\\n        gl_FragColor.a = 1.0; // 0.0 alpha leads to discard from ShaderSource.createPickFragmentShaderSource\\n\\\n        czm_writeDepthClamp();\\n\\\n    }\\n\\\n#else // CULL_FRAGMENTS\\n\\\n        gl_FragColor.a = 1.0;\\n\\\n#endif // CULL_FRAGMENTS\\n\\\n#else // PICK\\n\\\n\\n\\\n#ifdef CULL_FRAGMENTS\\n\\\n    // When classifying translucent geometry, logDepthOrDepth == 0.0\\n\\\n    // indicates a region that should not be classified, possibly due to there\\n\\\n    // being opaque pixels there in another buffer.\\n\\\n    if (uv.x <= 0.0 || 1.0 <= uv.x || uv.y <= 0.0 || 1.0 <= uv.y || logDepthOrDepth == 0.0) {\\n\\\n        discard;\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef NORMAL_EC\\n\\\n    // Compute normal by sampling adjacent pixels in 2x2 block in screen space\\n\\\n    vec3 downUp = vectorFromOffset(eyeCoordinate, vec2(0.0, 1.0));\\n\\\n    vec3 leftRight = vectorFromOffset(eyeCoordinate, vec2(1.0, 0.0));\\n\\\n    vec3 normalEC = normalize(cross(leftRight, downUp));\\n\\\n#endif\\n\\\n\\n\\\n\\n\\\n#ifdef PER_INSTANCE_COLOR\\n\\\n\\n\\\n    vec4 color = czm_gammaCorrect(v_color);\\n\\\n#ifdef FLAT\\n\\\n    gl_FragColor = color;\\n\\\n#else // FLAT\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.positionToEyeEC = -eyeCoordinate.xyz;\\n\\\n    czm_material material = czm_getDefaultMaterial(materialInput);\\n\\\n    material.diffuse = color.rgb;\\n\\\n    material.alpha = color.a;\\n\\\n\\n\\\n    gl_FragColor = czm_phong(normalize(-eyeCoordinate.xyz), material, czm_lightDirectionEC);\\n\\\n#endif // FLAT\\n\\\n\\n\\\n    // Premultiply alpha. Required for classification primitives on translucent globe.\\n\\\n    gl_FragColor.rgb *= gl_FragColor.a;\\n\\\n\\n\\\n#else // PER_INSTANCE_COLOR\\n\\\n\\n\\\n    // Material support.\\n\\\n    // USES_ is distinct from REQUIRES_, because some things are dependencies of each other or\\n\\\n    // dependencies for culling but might not actually be used by the material.\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n\\n\\\n#ifdef USES_NORMAL_EC\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef USES_POSITION_TO_EYE_EC\\n\\\n    materialInput.positionToEyeEC = -eyeCoordinate.xyz;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef USES_TANGENT_TO_EYE\\n\\\n    materialInput.tangentToEyeMatrix = czm_eastNorthUpToEyeCoordinates(worldCoordinate, normalEC);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef USES_ST\\n\\\n    // Remap texture coordinates from computed (approximately aligned with cartographic space) to the desired\\n\\\n    // texture coordinate system, which typically forms a tight oriented bounding box around the geometry.\\n\\\n    // Shader is provided a set of reference points for remapping.\\n\\\n    materialInput.st.x = czm_lineDistance(v_uvMinAndSphericalLongitudeRotation.xy, v_uMaxAndInverseDistance.xy, uv) * v_uMaxAndInverseDistance.z;\\n\\\n    materialInput.st.y = czm_lineDistance(v_uvMinAndSphericalLongitudeRotation.xy, v_vMaxAndInverseDistance.xy, uv) * v_vMaxAndInverseDistance.z;\\n\\\n#endif\\n\\\n\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef FLAT\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#else // FLAT\\n\\\n    gl_FragColor = czm_phong(normalize(-eyeCoordinate.xyz), material, czm_lightDirectionEC);\\n\\\n#endif // FLAT\\n\\\n\\n\\\n    // Premultiply alpha. Required for classification primitives on translucent globe.\\n\\\n    gl_FragColor.rgb *= gl_FragColor.a;\\n\\\n\\n\\\n#endif // PER_INSTANCE_COLOR\\n\\\n    czm_writeDepthClamp();\\n\\\n#endif // PICK\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute float batchId;\\n\\\n\\n\\\n#ifdef EXTRUDED_GEOMETRY\\n\\\nattribute vec3 extrudeDirection;\\n\\\n\\n\\\nuniform float u_globeMinimumAltitude;\\n\\\n#endif // EXTRUDED_GEOMETRY\\n\\\n\\n\\\n#ifdef PER_INSTANCE_COLOR\\n\\\nvarying vec4 v_color;\\n\\\n#endif // PER_INSTANCE_COLOR\\n\\\n\\n\\\n#ifdef TEXTURE_COORDINATES\\n\\\n#ifdef SPHERICAL\\n\\\nvarying vec4 v_sphericalExtents;\\n\\\n#else // SPHERICAL\\n\\\nvarying vec2 v_inversePlaneExtents;\\n\\\nvarying vec4 v_westPlane;\\n\\\nvarying vec4 v_southPlane;\\n\\\n#endif // SPHERICAL\\n\\\nvarying vec3 v_uvMinAndSphericalLongitudeRotation;\\n\\\nvarying vec3 v_uMaxAndInverseDistance;\\n\\\nvarying vec3 v_vMaxAndInverseDistance;\\n\\\n#endif // TEXTURE_COORDINATES\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 position = czm_computePosition();\\n\\\n\\n\\\n#ifdef EXTRUDED_GEOMETRY\\n\\\n    float delta = min(u_globeMinimumAltitude, czm_geometricToleranceOverMeter * length(position.xyz));\\n\\\n    delta *= czm_sceneMode == czm_sceneMode3D ? 1.0 : 0.0;\\n\\\n\\n\\\n    //extrudeDirection is zero for the top layer\\n\\\n    position = position + vec4(extrudeDirection * delta, 0.0);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef TEXTURE_COORDINATES\\n\\\n#ifdef SPHERICAL\\n\\\n    v_sphericalExtents = czm_batchTable_sphericalExtents(batchId);\\n\\\n    v_uvMinAndSphericalLongitudeRotation.z = czm_batchTable_longitudeRotation(batchId);\\n\\\n#else // SPHERICAL\\n\\\n#ifdef COLUMBUS_VIEW_2D\\n\\\n    vec4 planes2D_high = czm_batchTable_planes2D_HIGH(batchId);\\n\\\n    vec4 planes2D_low = czm_batchTable_planes2D_LOW(batchId);\\n\\\n\\n\\\n    // If the primitive is split across the IDL (planes2D_high.x > planes2D_high.w):\\n\\\n    // - If this vertex is on the east side of the IDL (position3DLow.y > 0.0, comparison with position3DHigh may produce artifacts)\\n\\\n    // - existing \\\"east\\\" is on the wrong side of the world, far away (planes2D_high/low.w)\\n\\\n    // - so set \\\"east\\\" as beyond the eastmost extent of the projection (idlSplitNewPlaneHiLow)\\n\\\n    vec2 idlSplitNewPlaneHiLow = vec2(EAST_MOST_X_HIGH - (WEST_MOST_X_HIGH - planes2D_high.w), EAST_MOST_X_LOW - (WEST_MOST_X_LOW - planes2D_low.w));\\n\\\n    bool idlSplit = planes2D_high.x > planes2D_high.w && position3DLow.y > 0.0;\\n\\\n    planes2D_high.w = czm_branchFreeTernary(idlSplit, idlSplitNewPlaneHiLow.x, planes2D_high.w);\\n\\\n    planes2D_low.w = czm_branchFreeTernary(idlSplit, idlSplitNewPlaneHiLow.y, planes2D_low.w);\\n\\\n\\n\\\n    // - else, if this vertex is on the west side of the IDL (position3DLow.y < 0.0)\\n\\\n    // - existing \\\"west\\\" is on the wrong side of the world, far away (planes2D_high/low.x)\\n\\\n    // - so set \\\"west\\\" as beyond the westmost extent of the projection (idlSplitNewPlaneHiLow)\\n\\\n    idlSplit = planes2D_high.x > planes2D_high.w && position3DLow.y < 0.0;\\n\\\n    idlSplitNewPlaneHiLow = vec2(WEST_MOST_X_HIGH - (EAST_MOST_X_HIGH - planes2D_high.x), WEST_MOST_X_LOW - (EAST_MOST_X_LOW - planes2D_low.x));\\n\\\n    planes2D_high.x = czm_branchFreeTernary(idlSplit, idlSplitNewPlaneHiLow.x, planes2D_high.x);\\n\\\n    planes2D_low.x = czm_branchFreeTernary(idlSplit, idlSplitNewPlaneHiLow.y, planes2D_low.x);\\n\\\n\\n\\\n    vec3 southWestCorner = (czm_modelViewRelativeToEye * czm_translateRelativeToEye(vec3(0.0, planes2D_high.xy), vec3(0.0, planes2D_low.xy))).xyz;\\n\\\n    vec3 northWestCorner = (czm_modelViewRelativeToEye * czm_translateRelativeToEye(vec3(0.0, planes2D_high.x, planes2D_high.z), vec3(0.0, planes2D_low.x, planes2D_low.z))).xyz;\\n\\\n    vec3 southEastCorner = (czm_modelViewRelativeToEye * czm_translateRelativeToEye(vec3(0.0, planes2D_high.w, planes2D_high.y), vec3(0.0, planes2D_low.w, planes2D_low.y))).xyz;\\n\\\n#else // COLUMBUS_VIEW_2D\\n\\\n    // 3D case has smaller \\\"plane extents,\\\" so planes encoded as a 64 bit position and 2 vec3s for distances/direction\\n\\\n    vec3 southWestCorner = (czm_modelViewRelativeToEye * czm_translateRelativeToEye(czm_batchTable_southWest_HIGH(batchId), czm_batchTable_southWest_LOW(batchId))).xyz;\\n\\\n    vec3 northWestCorner = czm_normal * czm_batchTable_northward(batchId) + southWestCorner;\\n\\\n    vec3 southEastCorner = czm_normal * czm_batchTable_eastward(batchId) + southWestCorner;\\n\\\n#endif // COLUMBUS_VIEW_2D\\n\\\n\\n\\\n    vec3 eastWard = southEastCorner - southWestCorner;\\n\\\n    float eastExtent = length(eastWard);\\n\\\n    eastWard /= eastExtent;\\n\\\n\\n\\\n    vec3 northWard = northWestCorner - southWestCorner;\\n\\\n    float northExtent = length(northWard);\\n\\\n    northWard /= northExtent;\\n\\\n\\n\\\n    v_westPlane = vec4(eastWard, -dot(eastWard, southWestCorner));\\n\\\n    v_southPlane = vec4(northWard, -dot(northWard, southWestCorner));\\n\\\n    v_inversePlaneExtents = vec2(1.0 / eastExtent, 1.0 / northExtent);\\n\\\n#endif // SPHERICAL\\n\\\n    vec4 uvMinAndExtents = czm_batchTable_uvMinAndExtents(batchId);\\n\\\n    vec4 uMaxVmax = czm_batchTable_uMaxVmax(batchId);\\n\\\n\\n\\\n    v_uMaxAndInverseDistance = vec3(uMaxVmax.xy, uvMinAndExtents.z);\\n\\\n    v_vMaxAndInverseDistance = vec3(uMaxVmax.zw, uvMinAndExtents.w);\\n\\\n    v_uvMinAndSphericalLongitudeRotation.xy = uvMinAndExtents.xy;\\n\\\n#endif // TEXTURE_COORDINATES\\n\\\n\\n\\\n#ifdef PER_INSTANCE_COLOR\\n\\\n    v_color = czm_batchTable_color(batchId);\\n\\\n#endif\\n\\\n\\n\\\n    gl_Position = czm_depthClamp(czm_modelViewProjectionRelativeToEye * position);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef GL_EXT_frag_depth\\n\\\n#extension GL_EXT_frag_depth : enable\\n\\\n#endif\\n\\\n\\n\\\n#ifdef VECTOR_TILE\\n\\\nuniform vec4 u_highlightColor;\\n\\\n#endif\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n#ifdef VECTOR_TILE\\n\\\n    gl_FragColor = czm_gammaCorrect(u_highlightColor);\\n\\\n#else\\n\\\n    gl_FragColor = vec4(1.0);\\n\\\n#endif\\n\\\n    czm_writeDepthClamp();\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"float interpolateByDistance(vec4 nearFarScalar, float distance)\\n\\\n{\\n\\\n    float startDistance = nearFarScalar.x;\\n\\\n    float startValue = nearFarScalar.y;\\n\\\n    float endDistance = nearFarScalar.z;\\n\\\n    float endValue = nearFarScalar.w;\\n\\\n    float t = clamp((distance - startDistance) / (endDistance - startDistance), 0.0, 1.0);\\n\\\n    return mix(startValue, endValue, t);\\n\\\n}\\n\\\n\\n\\\nvec3 getLightDirection(vec3 positionWC)\\n\\\n{\\n\\\n    float lightEnum = u_radiiAndDynamicAtmosphereColor.z;\\n\\\n    vec3 lightDirection =\\n\\\n        positionWC * float(lightEnum == 0.0) +\\n\\\n        czm_lightDirectionWC * float(lightEnum == 1.0) +\\n\\\n        czm_sunDirectionWC * float(lightEnum == 2.0);\\n\\\n    return normalize(lightDirection);\\n\\\n}\\n\\\n\\n\\\nvoid computeAtmosphereScattering(vec3 positionWC, vec3 lightDirection, out vec3 rayleighColor, out vec3 mieColor, out float opacity, out float underTranslucentGlobe)\\n\\\n{\\n\\\n    float ellipsoidRadiiDifference = czm_ellipsoidRadii.x - czm_ellipsoidRadii.z;\\n\\\n\\n\\\n    // Adjustment to the atmosphere radius applied based on the camera height.\\n\\\n    float distanceAdjustMin = czm_ellipsoidRadii.x / 4.0;\\n\\\n    float distanceAdjustMax = czm_ellipsoidRadii.x;\\n\\\n    float distanceAdjustModifier = ellipsoidRadiiDifference / 2.0;\\n\\\n    float distanceAdjust = distanceAdjustModifier * clamp((czm_eyeHeight - distanceAdjustMin) / (distanceAdjustMax - distanceAdjustMin), 0.0, 1.0);\\n\\\n\\n\\\n    // Since atmosphere scattering assumes the atmosphere is a spherical shell, we compute an inner radius of the atmosphere best fit \\n\\\n    // for the position on the ellipsoid.\\n\\\n    float radiusAdjust = (ellipsoidRadiiDifference / 4.0) + distanceAdjust;\\n\\\n    float atmosphereInnerRadius = (length(czm_viewerPositionWC) - czm_eyeHeight) - radiusAdjust;\\n\\\n\\n\\\n    // Setup the primary ray: from the camera position to the vertex position.\\n\\\n    vec3 cameraToPositionWC = positionWC - czm_viewerPositionWC;\\n\\\n    vec3 cameraToPositionWCDirection = normalize(cameraToPositionWC);\\n\\\n    czm_ray primaryRay = czm_ray(czm_viewerPositionWC, cameraToPositionWCDirection);\\n\\\n\\n\\\n    underTranslucentGlobe = 0.0;\\n\\\n\\n\\\n    // Brighten the sky atmosphere under the Earth's atmosphere when translucency is enabled.\\n\\\n    #if defined(GLOBE_TRANSLUCENT)\\n\\\n\\n\\\n        // Check for intersection with the inner radius of the atmopshere.\\n\\\n        czm_raySegment primaryRayEarthIntersect = czm_raySphereIntersectionInterval(primaryRay, vec3(0.0), atmosphereInnerRadius + radiusAdjust);\\n\\\n        if (primaryRayEarthIntersect.start > 0.0 && primaryRayEarthIntersect.stop > 0.0) {\\n\\\n            \\n\\\n            // Compute position on globe.\\n\\\n            vec3 direction = normalize(positionWC);\\n\\\n            czm_ray ellipsoidRay = czm_ray(positionWC, -direction);\\n\\\n            czm_raySegment ellipsoidIntersection = czm_rayEllipsoidIntersectionInterval(ellipsoidRay, vec3(0.0), czm_ellipsoidInverseRadii);\\n\\\n            vec3 onEarth = positionWC - (direction * ellipsoidIntersection.start);\\n\\\n\\n\\\n            // Control the color using the camera angle.\\n\\\n            float angle = dot(normalize(czm_viewerPositionWC), normalize(onEarth));\\n\\\n\\n\\\n            // Control the opacity using the distance from Earth.\\n\\\n            opacity = interpolateByDistance(vec4(0.0, 1.0, czm_ellipsoidRadii.x, 0.0), length(czm_viewerPositionWC - onEarth));\\n\\\n            vec3 horizonColor = vec3(0.1, 0.2, 0.3);\\n\\\n            vec3 nearColor = vec3(0.0);\\n\\\n\\n\\\n            rayleighColor = mix(nearColor, horizonColor, exp(-angle) * opacity);\\n\\\n            \\n\\\n            // Set the traslucent flag to avoid alpha adjustment in computeFinalColor funciton.\\n\\\n            underTranslucentGlobe = 1.0;\\n\\\n            return;\\n\\\n        }\\n\\\n    #endif\\n\\\n\\n\\\n    computeScattering(\\n\\\n        primaryRay,\\n\\\n        length(cameraToPositionWC),\\n\\\n        lightDirection,\\n\\\n        atmosphereInnerRadius,\\n\\\n        rayleighColor,\\n\\\n        mieColor,\\n\\\n        opacity\\n\\\n    );\\n\\\n\\n\\\n    // Alter the opacity based on how close the viewer is to the ground.\\n\\\n    // (0.0 = At edge of atmosphere, 1.0 = On ground)\\n\\\n    float cameraHeight = czm_eyeHeight + atmosphereInnerRadius;\\n\\\n    float atmosphereOuterRadius = atmosphereInnerRadius + ATMOSPHERE_THICKNESS;\\n\\\n    opacity = clamp((atmosphereOuterRadius - cameraHeight) / (atmosphereOuterRadius - atmosphereInnerRadius), 0.0, 1.0);\\n\\\n\\n\\\n    // Alter alpha based on time of day (0.0 = night , 1.0 = day)\\n\\\n    float nightAlpha = (u_radiiAndDynamicAtmosphereColor.z != 0.0) ? clamp(dot(normalize(positionWC), lightDirection), 0.0, 1.0) : 1.0;\\n\\\n    opacity *= pow(nightAlpha, 0.5);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec3 v_outerPositionWC;\\n\\\n\\n\\\nuniform vec3 u_hsbShift;\\n\\\n\\n\\\n#ifndef PER_FRAGMENT_ATMOSPHERE\\n\\\nvarying vec3 v_mieColor;\\n\\\nvarying vec3 v_rayleighColor;\\n\\\nvarying float v_opacity;\\n\\\nvarying float v_translucent;\\n\\\n#endif\\n\\\n\\n\\\nvoid main (void)\\n\\\n{\\n\\\n    vec3 lightDirection = getLightDirection(v_outerPositionWC);\\n\\\n   \\n\\\n    vec3 mieColor;\\n\\\n    vec3 rayleighColor;\\n\\\n    float opacity;\\n\\\n    float translucent;\\n\\\n\\n\\\n    #ifdef PER_FRAGMENT_ATMOSPHERE\\n\\\n        computeAtmosphereScattering(\\n\\\n            v_outerPositionWC,\\n\\\n            lightDirection,\\n\\\n            rayleighColor,\\n\\\n            mieColor,\\n\\\n            opacity,\\n\\\n            translucent\\n\\\n        );\\n\\\n    #else\\n\\\n        mieColor = v_mieColor;\\n\\\n        rayleighColor = v_rayleighColor;\\n\\\n        opacity = v_opacity;\\n\\\n        translucent = v_translucent;\\n\\\n    #endif\\n\\\n\\n\\\n    vec4 color = computeAtmosphereColor(v_outerPositionWC, lightDirection, rayleighColor, mieColor, opacity);\\n\\\n\\n\\\n    #ifndef HDR\\n\\\n        color.rgb = czm_acesTonemapping(color.rgb);\\n\\\n        color.rgb = czm_inverseGamma(color.rgb);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef COLOR_CORRECT\\n\\\n        // Convert rgb color to hsb\\n\\\n        vec3 hsb = czm_RGBToHSB(color.rgb);\\n\\\n        // Perform hsb shift\\n\\\n        hsb.x += u_hsbShift.x; // hue\\n\\\n        hsb.y = clamp(hsb.y + u_hsbShift.y, 0.0, 1.0); // saturation\\n\\\n        hsb.z = hsb.z > czm_epsilon7 ? hsb.z + u_hsbShift.z : 0.0; // brightness\\n\\\n        // Convert shifted hsb back to rgb\\n\\\n        color.rgb = czm_HSBToRGB(hsb);\\n\\\n    #endif\\n\\\n\\n\\\n    // For the parts of the sky atmosphere that are not behind a translucent globe,\\n\\\n    // we mix in the default opacity so that the sky atmosphere still appears at distance.\\n\\\n    // This is needed because the opacity in the sky atmosphere is initially adjusted based\\n\\\n    // on the camera height.\\n\\\n    if (translucent == 0.0) {\\n\\\n        color.a = mix(color.b, 1.0, color.a) * smoothstep(0.0, 1.0, czm_morphTime);\\n\\\n    }\\n\\\n\\n\\\n    gl_FragColor = color;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec4 position;\\n\\\n\\n\\\nvarying vec3 v_outerPositionWC;\\n\\\n\\n\\\n#ifndef PER_FRAGMENT_ATMOSPHERE\\n\\\nvarying vec3 v_mieColor;\\n\\\nvarying vec3 v_rayleighColor;\\n\\\nvarying float v_opacity;\\n\\\nvarying float v_translucent;\\n\\\n#endif\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    vec4 positionWC = czm_model * position;\\n\\\n    vec3 lightDirection = getLightDirection(positionWC.xyz);\\n\\\n\\n\\\n    #ifndef PER_FRAGMENT_ATMOSPHERE\\n\\\n        computeAtmosphereScattering(\\n\\\n            positionWC.xyz,\\n\\\n            lightDirection,\\n\\\n            v_rayleighColor,\\n\\\n            v_mieColor,\\n\\\n            v_opacity,\\n\\\n            v_translucent\\n\\\n        );\\n\\\n    #endif\\n\\\n    \\n\\\n    v_outerPositionWC = positionWC.xyz;\\n\\\n    gl_Position = czm_modelViewProjection * position;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform samplerCube u_cubeMap;\\n\\\n\\n\\\nvarying vec3 v_texCoord;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 color = textureCube(u_cubeMap, normalize(v_texCoord));\\n\\\n    gl_FragColor = vec4(czm_gammaCorrect(color).rgb, czm_morphTime);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position;\\n\\\n\\n\\\nvarying vec3 v_texCoord;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 p = czm_viewRotation * (czm_temeToPseudoFixed * (czm_entireFrustum.y * position));\\n\\\n    gl_Position = czm_projection * vec4(p, 1.0);\\n\\\n    v_texCoord = position.xyz;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D u_texture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 color = texture2D(u_texture, v_textureCoordinates);\\n\\\n    gl_FragColor = czm_gammaCorrect(color);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform float u_radiusTS;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvec2 rotate(vec2 p, vec2 direction)\\n\\\n{\\n\\\n    return vec2(p.x * direction.x - p.y * direction.y, p.x * direction.y + p.y * direction.x);\\n\\\n}\\n\\\n\\n\\\nvec4 addBurst(vec2 position, vec2 direction, float lengthScalar)\\n\\\n{\\n\\\n    vec2 rotatedPosition = rotate(position, direction) * vec2(25.0, 0.75);\\n\\\n    float radius = length(rotatedPosition) * lengthScalar;\\n\\\n    float burst = 1.0 - smoothstep(0.0, 0.55, radius);\\n\\\n    return vec4(burst);\\n\\\n}\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    float lengthScalar = 2.0 / sqrt(2.0);\\n\\\n    vec2 position = v_textureCoordinates - vec2(0.5);\\n\\\n    float radius = length(position) * lengthScalar;\\n\\\n    float surface = step(radius, u_radiusTS);\\n\\\n    vec4 color = vec4(vec2(1.0), surface + 0.2, surface);\\n\\\n\\n\\\n    float glow = 1.0 - smoothstep(0.0, 0.55, radius);\\n\\\n    color.ba += mix(vec2(0.0), vec2(1.0), glow) * 0.75;\\n\\\n\\n\\\n    vec4 burst = vec4(0.0);\\n\\\n\\n\\\n    // The following loop has been manually unrolled for speed, to\\n\\\n    // avoid sin() and cos().\\n\\\n    //\\n\\\n    //for (float i = 0.4; i < 3.2; i += 1.047) {\\n\\\n    //    vec2 direction = vec2(sin(i), cos(i));\\n\\\n    //    burst += 0.4 * addBurst(position, direction, lengthScalar);\\n\\\n    //\\n\\\n    //    direction = vec2(sin(i - 0.08), cos(i - 0.08));\\n\\\n    //    burst += 0.3 * addBurst(position, direction, lengthScalar);\\n\\\n    //}\\n\\\n\\n\\\n    burst += 0.4 * addBurst(position, vec2(0.38942,  0.92106), lengthScalar);  // angle == 0.4\\n\\\n    burst += 0.4 * addBurst(position, vec2(0.99235,  0.12348), lengthScalar);  // angle == 0.4 + 1.047\\n\\\n    burst += 0.4 * addBurst(position, vec2(0.60327, -0.79754), lengthScalar);  // angle == 0.4 + 1.047 * 2.0\\n\\\n\\n\\\n    burst += 0.3 * addBurst(position, vec2(0.31457,  0.94924), lengthScalar);  // angle == 0.4 - 0.08\\n\\\n    burst += 0.3 * addBurst(position, vec2(0.97931,  0.20239), lengthScalar);  // angle == 0.4 + 1.047 - 0.08\\n\\\n    burst += 0.3 * addBurst(position, vec2(0.66507, -0.74678), lengthScalar);  // angle == 0.4 + 1.047 * 2.0 - 0.08\\n\\\n\\n\\\n    // End of manual loop unrolling.\\n\\\n\\n\\\n    color += clamp(burst, vec4(0.0), vec4(1.0)) * 0.15;\\n\\\n\\n\\\n    gl_FragColor = clamp(color, vec4(0.0), vec4(1.0));\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec2 direction;\\n\\\n\\n\\\nuniform float u_size;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main() \\n\\\n{\\n\\\n    vec4 position;\\n\\\n    if (czm_morphTime == 1.0)\\n\\\n    {\\n\\\n        position = vec4(czm_sunPositionWC, 1.0);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        position = vec4(czm_sunPositionColumbusView.zxy, 1.0);\\n\\\n    }\\n\\\n    \\n\\\n    vec4 positionEC = czm_view * position;\\n\\\n    vec4 positionWC = czm_eyeToWindowCoordinates(positionEC);\\n\\\n    \\n\\\n    vec2 halfSize = vec2(u_size * 0.5);\\n\\\n    halfSize *= ((direction * 2.0) - 1.0);\\n\\\n    \\n\\\n    gl_Position = czm_viewportOrthographic * vec4(positionWC.xy + halfSize, -positionWC.z, 1.0);\\n\\\n    \\n\\\n    v_textureCoordinates = direction;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef GL_EXT_frag_depth\\n\\\n#extension GL_EXT_frag_depth : enable\\n\\\n#endif\\n\\\n\\n\\\nvarying vec4 v_startPlaneEC;\\n\\\nvarying vec4 v_endPlaneEC;\\n\\\nvarying vec4 v_rightPlaneEC;\\n\\\nvarying float v_halfWidth;\\n\\\nvarying vec3 v_volumeUpEC;\\n\\\n\\n\\\nuniform vec4 u_highlightColor;\\n\\\nvoid main()\\n\\\n{\\n\\\n    float logDepthOrDepth = czm_branchFreeTernary(czm_sceneMode == czm_sceneMode2D, gl_FragCoord.z, czm_unpackDepth(texture2D(czm_globeDepthTexture, gl_FragCoord.xy / czm_viewport.zw)));\\n\\\n\\n\\\n    // Discard for sky\\n\\\n    if (logDepthOrDepth == 0.0) {\\n\\\n#ifdef DEBUG_SHOW_VOLUME\\n\\\n        gl_FragColor = vec4(0.0, 0.0, 1.0, 0.5);\\n\\\n        return;\\n\\\n#else // DEBUG_SHOW_VOLUME\\n\\\n        discard;\\n\\\n#endif // DEBUG_SHOW_VOLUME\\n\\\n    }\\n\\\n\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(gl_FragCoord.xy, logDepthOrDepth);\\n\\\n    eyeCoordinate /= eyeCoordinate.w;\\n\\\n\\n\\\n    float halfMaxWidth = v_halfWidth * czm_metersPerPixel(eyeCoordinate);\\n\\\n\\n\\\n    // Expand halfMaxWidth if direction to camera is almost perpendicular with the volume's up direction\\n\\\n    halfMaxWidth += halfMaxWidth * (1.0 - dot(-normalize(eyeCoordinate.xyz), v_volumeUpEC));\\n\\\n\\n\\\n    // Check distance of the eye coordinate against the right-facing plane\\n\\\n    float widthwiseDistance = czm_planeDistance(v_rightPlaneEC, eyeCoordinate.xyz);\\n\\\n\\n\\\n    // Check eye coordinate against the mitering planes\\n\\\n    float distanceFromStart = czm_planeDistance(v_startPlaneEC, eyeCoordinate.xyz);\\n\\\n    float distanceFromEnd = czm_planeDistance(v_endPlaneEC, eyeCoordinate.xyz);\\n\\\n\\n\\\n    if (abs(widthwiseDistance) > halfMaxWidth || distanceFromStart < 0.0 || distanceFromEnd < 0.0) {\\n\\\n#ifdef DEBUG_SHOW_VOLUME\\n\\\n        gl_FragColor = vec4(logDepthOrDepth, 0.0, 0.0, 0.5);\\n\\\n        return;\\n\\\n#else // DEBUG_SHOW_VOLUME\\n\\\n        discard;\\n\\\n#endif // DEBUG_SHOW_VOLUME\\n\\\n    }\\n\\\n    gl_FragColor = u_highlightColor;\\n\\\n\\n\\\n    czm_writeDepthClamp();\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 startEllipsoidNormal;\\n\\\nattribute vec3 endEllipsoidNormal;\\n\\\nattribute vec4 startPositionAndHeight;\\n\\\nattribute vec4 endPositionAndHeight;\\n\\\nattribute vec4 startFaceNormalAndVertexCorner;\\n\\\nattribute vec4 endFaceNormalAndHalfWidth;\\n\\\nattribute float a_batchId;\\n\\\n\\n\\\nuniform mat4 u_modifiedModelView;\\n\\\nuniform vec2 u_minimumMaximumVectorHeights;\\n\\\n\\n\\\nvarying vec4 v_startPlaneEC;\\n\\\nvarying vec4 v_endPlaneEC;\\n\\\nvarying vec4 v_rightPlaneEC;\\n\\\nvarying float v_halfWidth;\\n\\\nvarying vec3 v_volumeUpEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    // vertex corner IDs\\n\\\n    //          3-----------7\\n\\\n    //         /|   left   /|\\n\\\n    //        / | 1       / |\\n\\\n    //       2-----------6  5  end\\n\\\n    //       | /         | /\\n\\\n    // start |/  right   |/\\n\\\n    //       0-----------4\\n\\\n    //\\n\\\n    float isEnd = floor(startFaceNormalAndVertexCorner.w * 0.251); // 0 for front, 1 for end\\n\\\n    float isTop = floor(startFaceNormalAndVertexCorner.w * mix(0.51, 0.19, isEnd)); // 0 for bottom, 1 for top\\n\\\n\\n\\\n    vec3 forward = endPositionAndHeight.xyz - startPositionAndHeight.xyz;\\n\\\n    vec3 right = normalize(cross(forward, startEllipsoidNormal));\\n\\\n\\n\\\n    vec4 position = vec4(startPositionAndHeight.xyz, 1.0);\\n\\\n    position.xyz += forward * isEnd;\\n\\\n\\n\\\n    v_volumeUpEC = czm_normal * normalize(cross(right, forward));\\n\\\n\\n\\\n    // Push for volume height\\n\\\n    float offset;\\n\\\n    vec3 ellipsoidNormal = mix(startEllipsoidNormal, endEllipsoidNormal, isEnd);\\n\\\n\\n\\\n    // offset height to create volume\\n\\\n    offset = mix(startPositionAndHeight.w, endPositionAndHeight.w, isEnd);\\n\\\n    offset = mix(u_minimumMaximumVectorHeights.y, u_minimumMaximumVectorHeights.x, isTop) - offset;\\n\\\n    position.xyz += offset * ellipsoidNormal;\\n\\\n\\n\\\n    // move from RTC to EC\\n\\\n    position = u_modifiedModelView * position;\\n\\\n    right = czm_normal * right;\\n\\\n\\n\\\n    // Push for width in a direction that is in the start or end plane and in a plane with right\\n\\\n    // N = normalEC (\\\"right-facing\\\" direction for push)\\n\\\n    // R = right\\n\\\n    // p = angle between N and R\\n\\\n    // w = distance to push along R if R == N\\n\\\n    // d = distance to push along N\\n\\\n    //\\n\\\n    //   N   R\\n\\\n    //  { \\ p| }      * cos(p) = dot(N, R) = w / d\\n\\\n    //  d\\ \\ |  |w    * d = w / dot(N, R)\\n\\\n    //    { \\| }\\n\\\n    //       o---------- polyline segment ---->\\n\\\n    //\\n\\\n    vec3 scratchNormal = mix(-startFaceNormalAndVertexCorner.xyz, endFaceNormalAndHalfWidth.xyz, isEnd);\\n\\\n    scratchNormal = cross(scratchNormal, mix(startEllipsoidNormal, endEllipsoidNormal, isEnd));\\n\\\n    vec3 miterPushNormal = czm_normal * normalize(scratchNormal);\\n\\\n\\n\\\n    offset = 2.0 * endFaceNormalAndHalfWidth.w * max(0.0, czm_metersPerPixel(position)); // offset = widthEC\\n\\\n    offset = offset / dot(miterPushNormal, right);\\n\\\n    position.xyz += miterPushNormal * (offset * sign(0.5 - mod(startFaceNormalAndVertexCorner.w, 2.0)));\\n\\\n\\n\\\n    gl_Position = czm_depthClamp(czm_projection * position);\\n\\\n\\n\\\n    position = u_modifiedModelView * vec4(startPositionAndHeight.xyz, 1.0);\\n\\\n    vec3 startNormalEC = czm_normal * startFaceNormalAndVertexCorner.xyz;\\n\\\n    v_startPlaneEC = vec4(startNormalEC, -dot(startNormalEC, position.xyz));\\n\\\n    v_rightPlaneEC = vec4(right, -dot(right, position.xyz));\\n\\\n\\n\\\n    position = u_modifiedModelView * vec4(endPositionAndHeight.xyz, 1.0);\\n\\\n    vec3 endNormalEC = czm_normal * endFaceNormalAndHalfWidth.xyz;\\n\\\n    v_endPlaneEC = vec4(endNormalEC, -dot(endNormalEC, position.xyz));\\n\\\n    v_halfWidth = endFaceNormalAndHalfWidth.w;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec4 currentPosition;\\n\\\nattribute vec4 previousPosition;\\n\\\nattribute vec4 nextPosition;\\n\\\nattribute vec2 expandAndWidth;\\n\\\nattribute float a_batchId;\\n\\\n\\n\\\nuniform mat4 u_modifiedModelView;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    float expandDir = expandAndWidth.x;\\n\\\n    float width = abs(expandAndWidth.y) + 0.5;\\n\\\n    bool usePrev = expandAndWidth.y < 0.0;\\n\\\n\\n\\\n    vec4 p = u_modifiedModelView * currentPosition;\\n\\\n    vec4 prev = u_modifiedModelView * previousPosition;\\n\\\n    vec4 next = u_modifiedModelView * nextPosition;\\n\\\n\\n\\\n    float angle;\\n\\\n    vec4 positionWC = getPolylineWindowCoordinatesEC(p, prev, next, expandDir, width, usePrev, angle);\\n\\\n    gl_Position = czm_viewportOrthographic * positionWC;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position;\\n\\\nattribute float a_batchId;\\n\\\n\\n\\\nuniform mat4 u_modifiedModelViewProjection;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    gl_Position = czm_depthClamp(u_modifiedModelViewProjection * vec4(position, 1.0));\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    czm_materialInput materialInput;\\n\\\n    \\n\\\n    materialInput.s = v_textureCoordinates.s;\\n\\\n    materialInput.st = v_textureCoordinates;\\n\\\n    materialInput.str = vec3(v_textureCoordinates, 0.0);\\n\\\n    materialInput.normalEC = vec3(0.0, 0.0, -1.0);\\n\\\n    \\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec4 position;\\n\\\nattribute vec2 textureCoordinates;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main() \\n\\\n{\\n\\\n    gl_Position = position;\\n\\\n    v_textureCoordinates = textureCoordinates;\\n\\\n}\\n\\\n\";\n"],"names":["CommandExtent","this","command","undefined","near","far","View","scene","camera","viewport","context","globeDepth","oit","depthTexture","_useOIT","passState","_cameraClone","_cameraStartFired","_cameraMovedTime","pickFramebuffer","pickDepthFramebuffer","sceneFramebuffer","globeTranslucencyFramebuffer","translucentTileClassification","pickDepths","frustumCommandsList","debugFrustumStatistics","_commandExtents","scratchPosition0","scratchPosition1","cameraEqual","camera0","camera1","epsilon","scalar","Math","max","a","b","x","abs","y","z","maxComponent","position","direction","up","right","transform","frustum","equalsEpsilon","insertIntoBin","view","commandNear","commandFar","debugShowFrustums","debugOverlappingFrustums","length","i","frustumCommands","curNear","pass","index","indices","commands","executeInClosestFrustum","cf","commandsInFrustums","totalCommands","updateDerivedCommands","prototype","checkForCameraUpdates","cameraClone","cameraEventWaitTime","moveEnd","raiseEvent","moveStart","scratchCullingVolume","scratchNearFarInterval","createPotentiallyVisibleSet","frameState","directionWC","positionWC","computeList","_computeCommandList","overlayList","_overlayCommandList","commandList","numberOfFrustums","numberOfPasses","n","p","commandExtents","commandExtentCapacity","commandExtentCount","Number","MAX_VALUE","shadowsEnabled","shadowState","shadowNear","shadowFar","shadowClosestObjectSize","occluder","mode","cullingVolume","planes","k","push","boundingVolume","isVisible","nearFarInterval","computePlaneDistances","start","stop","min","receiveShadows","size","extent","c","ce","nearPlane","farPlane","closestObjectSize","farToNearRatio","useLogDepth","logarithmicDepthFarToNearRatio","is2D","nearToFarDistance2D","numFrustums","ceil","log","m","curFar","pow","updateFrustums","frustumSplits","j","destroy","ViewportQuad","rectangle","material","show","color","_material","_overlayCommand","_rs","update","rs","blending","passes","render","shaderProgram","fs","sources","shaderSource","createViewportQuadCommand","renderState","uniformMap","_uniforms","owner","isDestroyed","includesReverseAxis","excludesReverseAxis","WebMapServiceImageryProvider","options","url","layers","times","clock","defaultAlpha","defaultNightAlpha","defaultDayAlpha","defaultBrightness","defaultContrast","defaultHue","defaultSaturation","defaultGamma","defaultMinificationFilter","defaultMagnificationFilter","_getFeatureInfoUrl","getFeatureInfoUrl","resource","pickFeatureResource","setQueryParameters","DefaultParameters","GetFeatureInfoDefaultParameters","parameters","objectToLowercase","getFeatureInfoParameters","that","_reload","_timeDynamicImagery","requestImageFunction","level","request","interval","requestImage","reloadFunction","bbox","width","height","parseFloat","queryParameters","version","crs","tilingScheme","projection","parts","split","code","includes","srs","pickFeatureParams","query_layers","info_format","_resource","_pickFeaturesResource","_layers","_tileProvider","pickFeaturesUrl","ellipsoid","tileWidth","tileHeight","minimumLevel","maximumLevel","subdomains","tileDiscardPolicy","credit","getFeatureInfoFormats","DefaultGetFeatureInfoFormats","enablePickFeatures","imageryProvider","col","row","dynamicIntervalData","data","tileProvider","obj","result","key","hasOwnProperty","toLowerCase","Object","defineProperties","get","_url","proxy","errorEvent","ready","readyPromise","hasAlphaChannel","set","value","getTileCredits","timeDynamicImagery","currentInterval","getFromCache","checkApproachingInterval","pickFeatures","longitude","latitude","freeze","service","styles","format","defaultParameters","WebMapTileServiceImageryProvider","layer","style","tileMatrixSetID","bracketMatch","match","test","_useKvp","templateValues","Style","TileMatrixSet","setTemplateValues","_layer","_style","_tileMatrixSetID","_tileMatrixLabels","tileMatrixLabels","_format","_tileDiscardPolicy","_tilingScheme","_tileWidth","_tileHeight","_minimumLevel","_maximumLevel","_rectangle","_dimensions","dimensions","_readyPromise","Promise","resolve","swTile","positionToTileXY","neTile","tileCount","_errorEvent","_credit","_subdomains","Array","isArray","slice","labels","tileMatrix","toString","staticDimensions","query","tilematrix","tilerow","tilecol","tilematrixset","s","getDerivedResource","TileMatrix","TileRow","TileCol","computeFlyToLocationForRectangle","terrainProvider","mapProjection","positionWithoutTerrain","tmp","getRectangleCameraCoordinates","cartesianToCartographic","unproject","then","availability","cartographics","_sampleTerrainMostDetailed","positionsOnTerrain","maxHeight","reduce","currentMax","item","finalPosition","centerAlpha","cssColor","cssOutlineColor","cssOutlineWidth","pixelSize","canvas","document","createElement","context2D","getContext","clearRect","beginPath","arc","PI","closePath","fillStyle","fill","save","globalCompositeOperation","restore","scratchColor","scratchColorAbove","scratchColorBelow","scratchColorBlend","scratchPackedFloat","scratchColorBytes","Uint8Array","lerpEntryColor","entryBefore","entryAfter","lerpFactor","createNewEntry","removeDuplicates","entries","filter","entry","array","hasPrev","hasNext","sameHeightAsPrev","sameHeightAsNext","sameColorAsPrev","sameColorAsNext","createLayeredEntries","layeredEntries","layersLength","entriesOrig","entriesLength","entryOrig","createElevationBandMaterial","_minimumHeight","_maximumHeight","red","alpha","green","blue","sortedAscending","sortedDescending","currEntry","nextEntry","reverse","extendDownwards","extendUpwards","splice","preprocess","entriesAccumNext","entriesAccumCurr","addEntry","addBlendEntry","layerLength","idx","accumIdx","entriesAccumLength","prevEntry","entryAccum","prevEntryAccum","nextEntryAccum","isSplitAccum","isStartAccum","isEndAccum","isSplit","isStart","isEnd","colorBelow","colorAbove","_emptyColor","heightTexBuffer","heightTexDatatype","heightTexFormat","_useFloatTexture","Float32Array","heightsTex","pixelFormat","pixelDatatype","source","arrayBufferView","sampler","wrapS","wrapT","minificationFilter","magnificationFilter","colorsArray","toBytes","colorsTex","heights","colors","floatingPointTexture","tileset","defaultColor","toCssColorString","instances","geometry","attributes","primitiveType","constructor","createGeometry","modelMatrix","normal","tangent","bitangent","asynchronous","geometryInstances","appearance","flat","translucent","assetId","findContentMetadata","contentHeader","metadataJson","extensions","metadata","schema","_oneTimeWarning","classes","class","contentClass","content","findGroupMetadata","metadataExtension","groups","group","groupIds","findIndex","id","findTileMetadata","tileHeader","tileClass","tile","ComponentsPerAttribute","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","ClassPerType","accessor","componentType","componentDatatype","componentsPerAttribute","type","classType","createArrayBufferView","buffer","byteOffset","samplerUniformName","matrixUniformName","styleUniformName","textureResolutionScratch","clippingPlaneCollection","unionClippingRegions","clippingPlanesLength","usingFloatTexture","textureResolution","functions","pixelHeight","pixelWidthString","indexOf","pixelHeightString","getClippingPlaneFloat","getClippingPlaneUint8","clippingFunctionUnion","clippingFunctionIntersect","hasExtension","json","extensionName","parseBatchTable","count","batchTable","featureCount","binaryBody","partitionResults","legacyHierarchy","HIERARCHY","extras","hierarchyExtension","_deprecationWarning","jsonProperties","binaryProperties","propertyId","property","hierarchy","partitionProperties","jsonMetadataTable","properties","extension","initializeHierarchy","binaryResults","className","classProperties","featureTableProperties","bufferViewsU8","bufferViewCount","binaryAccessor","bufferView","transcodePropertyType","schemaJson","transcodedSchema","featureTableJson","transcodedClass","transcodeBinaryProperties","metadataTable","bufferViews","propertyTable","name","batchTableHierarchy","propertyTables","transcodeComponentType","parseBoundingVolumeSemantics","tileMetadata","parseBoundingVolume","minimumHeight","parseMinimumHeight","maximumHeight","parseMaximumHeight","prefix","boundingBoxSemantic","boundingBox","getPropertyBySemantic","box","boundingRegionSemantic","boundingRegion","region","boundingSphereSemantic","boundingSphere","sphere","minimumHeightSemantic","maximumHeightSemantic","parseFeatureMetadataLegacy","sortedIds","featureTables","keys","sort","featureTableId","featureTable","classDefinition","propertyTextures","featureTextures","featureTextureId","featureTexture","propertyTexture","transcodeToPropertyTexture","textures","statistics","oldProperty","channels","reformatChannels","texture","channelsString","parseStructuralMetadata","propertyAttributes","propertyAttribute","preprocess3DTileContent","arrayBuffer","uint8Array","contentType","binaryPayload","error","getJsonContent","root","jsonPayload","asset","tileAvailability","getKHRMaterialsCommonValueType","paramName","paramValue","gltf","KHR_techniques_webgl","programs","shaders","techniques","extensionsUsed","extensionsRequired","techniquesWebgl","khrMaterialsCommon","KHR_materials_common","lights","lightsLength","lightId","light","ambient","ambientLight","directional","directionalLight","point","pointLight","constantAttenuation","linearAttenuation","quadraticAttenuation","spot","spotLight","fallOffAngle","fallOffExponent","lightDefaults","lightParameters","nodes","nodeName","node","nodeLightId","lightCount","lightName","lightType","lightBaseName","baseName","semantic","useInFragment","generateLightParameters","primitiveByMaterial","generatedTechniques","materialIndex","primitiveInfo","techniqueKey","technique","values","keysCount","jointCount","skinningInfo","skinning","hasVertexColors","getTechniqueKey","addBatchIdToGeneratedShaders","lightingModel","toUpperCase","parameterValues","hasSkinning","skinned","vertexShader","fragmentShader","hasNormals","techniqueUniforms","u_modelViewMatrix","u_projectionMatrix","u_normalMatrix","u_jointMatrix","uniformName","hasTexCoords","uniformType","u_diffuse","lightParamName","uniform","arraySize","vertexShaderMain","techniqueAttributes","a_position","a_normal","v_texcoord","a_texcoord_0","a_joint","a_weight","a_vertexColor","a_batchId","hasSpecular","u_specular","u_shininess","hasNonAmbientLights","hasAmbientLights","fragmentLightingBlock","lightColorName","varyingDirectionName","varyingPositionName","finalColorComputation","colorCreationBlock","doubleSided","u_transparency","u_emission","u_ambient","vertexShaderId","_pipeline","fragmentShaderId","programId","program","uniforms","generateTechnique","materialValues","valueName","alphaMode","transparent","addTextureCoordinates","textureName","generatedMaterialValues","defaultTexCoord","texCoord","texInfo","replace","fragmentShaderMain","DEFAULT_TEXTURE_OFFSET","DEFAULT_TEXTURE_ROTATION","DEFAULT_TEXTURE_SCALE","handleKHRTextureTransform","parameterName","KHR_texture_transform","offset","rotation","scale","getPBRValueType","materials","useSpecGloss","KHR_materials_pbrSpecularGlossiness","isSpecularGlossinessMaterial","pbrMetallicRoughness","pbrSpecularGlossiness","additional","skin","skins","joints","morphTargets","hasMorphTargets","hasTangents","hasTexCoord1","hasOutline","isUnlit","mesh","primitive","targets","KHR_materials_unlit","u_morphWeights","u_alphaCutoff","baseColorUniform","u_baseColorTexture","u_baseColorFactor","a_outlineCoordinates","targetAttributes","targetAttribute","attributeName","a_tangent","v_texCoord","normalTexCoord","baseColorTexCoord","specularGlossinessTexCoord","diffuseTexCoord","metallicRoughnessTexCoord","occlusionTexCoord","emissiveTexCoord","a_texcoord_1","v_texCoord1","u_normalTexture","u_specularGlossinessTexture","u_specularFactor","u_glossinessFactor","u_diffuseTexture","u_diffuseFactor","u_metallicRoughnessTexture","u_metallicFactor","u_roughnessFactor","u_occlusionTexture","u_emissiveTexture","u_emissiveFactor","czm_degreesPerRadian","czm_depthRange","czm_epsilon1","czm_epsilon2","czm_epsilon3","czm_epsilon4","czm_epsilon5","czm_epsilon6","czm_epsilon7","czm_infinity","czm_oneOverPi","czm_oneOverTwoPi","czm_passCesium3DTile","czm_passCesium3DTileClassification","czm_passCesium3DTileClassificationIgnoreShow","czm_passClassification","czm_passCompute","czm_passEnvironment","czm_passGlobe","czm_passOpaque","czm_passOverlay","czm_passTerrainClassification","czm_passTranslucent","czm_pi","czm_piOverFour","czm_piOverSix","czm_piOverThree","czm_piOverTwo","czm_radiansPerDegree","czm_sceneMode2D","czm_sceneMode3D","czm_sceneModeColumbusView","czm_sceneModeMorphing","czm_solarRadius","czm_threePiOver2","czm_twoPi","czm_webMercatorMaxLatitude","czm_depthRangeStruct","czm_material","czm_materialInput","czm_modelMaterial","czm_modelVertexOutput","czm_pbrParameters","czm_ray","czm_raySegment","czm_shadowParameters","czm_HSBToRGB","czm_HSLToRGB","czm_RGBToHSB","czm_RGBToHSL","czm_RGBToXYZ","czm_XYZToRGB","czm_acesTonemapping","czm_alphaWeight","czm_antialias","czm_approximateSphericalCoordinates","czm_backFacing","czm_branchFreeTernary","czm_cascadeColor","czm_cascadeDistance","czm_cascadeMatrix","czm_cascadeWeights","czm_columbusViewMorph","czm_computePosition","czm_cosineAndSine","czm_decompressTextureCoordinates","czm_defaultPbrMaterial","czm_depthClamp","czm_eastNorthUpToEyeCoordinates","czm_ellipsoidContainsPoint","czm_ellipsoidWgs84TextureCoordinates","czm_equalsEpsilon","czm_eyeOffset","czm_eyeToWindowCoordinates","czm_fastApproximateAtan","czm_fog","czm_gammaCorrect","czm_geodeticSurfaceNormal","czm_getDefaultMaterial","czm_getLambertDiffuse","czm_getSpecular","czm_getWaterNoise","czm_hue","czm_inverseGamma","czm_isEmpty","czm_isFull","czm_latitudeToWebMercatorFraction","czm_lineDistance","czm_linearToSrgb","czm_luminance","czm_metersPerPixel","czm_modelToWindowCoordinates","czm_multiplyWithColorBalance","czm_nearFarScalar","czm_octDecode","czm_packDepth","czm_pbrLighting","czm_pbrMetallicRoughnessMaterial","czm_pbrSpecularGlossinessMaterial","czm_phong","czm_planeDistance","czm_pointAlongRay","czm_rayEllipsoidIntersectionInterval","czm_raySphereIntersectionInterval","czm_readDepth","czm_readNonPerspective","czm_reverseLogDepth","czm_round","czm_sampleOctahedralProjection","czm_saturation","czm_shadowDepthCompare","czm_shadowVisibility","czm_signNotZero","czm_sphericalHarmonics","czm_srgbToLinear","czm_tangentToEyeSpaceMatrix","czm_transformPlane","czm_translateRelativeToEye","czm_translucentPhong","czm_transpose","czm_unpackDepth","czm_unpackFloat","czm_unpackUint","czm_valueTransform","czm_vertexLogDepth","czm_windowToEyeCoordinates","czm_writeDepthClamp","czm_writeLogDepth","czm_writeNonPerspective"],"sourceRoot":""}