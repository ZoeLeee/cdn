{"version":3,"file":"js/6011.27783f26.js","mappings":"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","sources":["webpack:///./components/QueryPane/index.tsx","webpack:///./components/SPagination/index.tsx","webpack:///./components/STable/index.tsx","webpack:///./views/list/Deploy.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport { Paper, InputBase } from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\n\r\nconst SelfPaper = styled(Paper)(({ theme }) => ({\r\n  border: \"1px solid #E2E2E2\",\r\n  p: \"0 0 0 4px\",\r\n  display: \"inline-flex\",\r\n  alignItems: \"center\",\r\n  width: 400,\r\n  height: 36,\r\n  boxShadow: \"none\",\r\n  borderRadius: \"5px\",\r\n}));\r\n\r\nconst SearchPane = styled(\"div\")(({ theme }) => ({\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\",\r\n  padding: \"0 3px\",\r\n  background: \"#075FB8\",\r\n  height: \"100%\",\r\n  width: 36,\r\n  color: \"#fff\",\r\n  borderRadius: \"0 5px 5px 0\",\r\n  cursor: \"pointer\",\r\n}));\r\n\r\nexport default function QueryPane(props) {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const handleClick = () => {\r\n    const { search } = props;\r\n    search && search(value);\r\n  };\r\n\r\n  const changeVal = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const keyEvent = (e) => {\r\n    if (e.keyCode !== 13) {\r\n      return;\r\n    }\r\n    handleClick();\r\n  };\r\n\r\n  return (\r\n    <SelfPaper>\r\n      <InputBase\r\n        sx={{ ml: 1, flex: 1 }}\r\n        placeholder=\"搜索\"\r\n        value={value}\r\n        onChange={changeVal}\r\n        onKeyUp={keyEvent}\r\n      />\r\n      <SearchPane onClick={handleClick}>\r\n        <SearchIcon />\r\n      </SearchPane>\r\n    </SelfPaper>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { TablePagination } from \"@mui/material\";\r\n\r\ninterface STableProp {\r\n  total?: number;\r\n  pagenation?: {\r\n    pageNum?: number;\r\n    pageSize?: number;\r\n    pageSizeOptions?: Array<number>;\r\n  };\r\n  onPageChange?: (pageNum: number) => void;\r\n  onRowsPerPageChange?: (pageSize: number) => void;\r\n}\r\n\r\nconst STable: React.FC<STableProp> = ({\r\n  total,\r\n  pagenation,\r\n  onPageChange,\r\n  onRowsPerPageChange,\r\n}) => {\r\n  const { pageNum, pageSize, pageSizeOptions } = pagenation;\r\n\r\n  const changePage = (event: unknown, newPage: number) => {\r\n    onPageChange && onPageChange(newPage + 1);\r\n  };\r\n\r\n  const changeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    onRowsPerPageChange &&\r\n      onRowsPerPageChange(parseInt(event.target.value, 10));\r\n  };\r\n\r\n  return (\r\n    <TablePagination\r\n      rowsPerPageOptions={pageSizeOptions || []}\r\n      component=\"div\"\r\n      count={total}\r\n      rowsPerPage={pageSize}\r\n      page={pageNum > 0 ? pageNum - 1 : 0}\r\n      onPageChange={changePage}\r\n      onRowsPerPageChange={changeRowsPerPage}\r\n      labelRowsPerPage=\"每页条数：\"\r\n      labelDisplayedRows={({ from, to }) => {\r\n        return `${from}–${to} 共 ${Math.ceil(total / pageSize)}页, ${total}条`;\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default STable;\r\n","import React, { useState } from \"react\";\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Checkbox,\r\n  TableSortLabel,\r\n  Box,\r\n} from \"@mui/material\";\r\nimport { visuallyHidden } from \"@mui/utils\";\r\nimport { styled } from \"@mui/material/styles\";\r\n\r\nimport { getUUID } from \"~/utils/common\";\r\nimport SPagination from \"~/components/SPagination\";\r\ninterface STableProp {\r\n  // props: {\r\n  columns?: Array<any>;\r\n  dataSource?: Array<any>;\r\n  rowKey?: string;\r\n  ipagenation?: {\r\n    pageNum: number;\r\n    pageSize: number;\r\n    pageSizeOptions: Array<number>;\r\n  };\r\n  handleChangePage?: (pageNum: number) => void;\r\n  handleChangeRowsPerPage?: (pageSize: number) => void;\r\n  selectedRowKeys?: Array<number | string>;\r\n  selectionRows?: Array<object>;\r\n  selectedChange?: Function;\r\n  changeSort?: Function;\r\n  tableStyle?: object;\r\n  total?: number;\r\n  // };\r\n  // state: {\r\n  //   sortType?: object;\r\n  // };\r\n}\r\n\r\nconst NoData = styled(\"div\")(({ theme }) => ({\r\n  textAlign: \"center\",\r\n  fontSize: \"14px\",\r\n  padding: \"20px 0\",\r\n  \"& img\": {\r\n    width: 300,\r\n    height: 300,\r\n  },\r\n  \"& p\": {\r\n    margin: 0,\r\n  },\r\n}));\r\n\r\nconst SelfTableCell = styled(TableCell)(({ theme }) => ({\r\n  padding: \"15px\",\r\n}));\r\n\r\nconst STable: React.FC<STableProp> = ({\r\n  columns,\r\n  dataSource,\r\n  rowKey,\r\n  ipagenation,\r\n  handleChangePage,\r\n  handleChangeRowsPerPage,\r\n  selectedRowKeys,\r\n  selectionRows,\r\n  selectedChange,\r\n  changeSort,\r\n  tableStyle,\r\n  total,\r\n}) => {\r\n  const [sortType, setSortType] = useState({});\r\n\r\n  const createColumns = (list) => {\r\n    let startNum = ipagenation.pageNum * ipagenation.pageSize,\r\n      endNum =\r\n        ipagenation.pageNum * ipagenation.pageSize + ipagenation.pageSize;\r\n    let length = dataSource.slice(startNum, endNum).length;\r\n    return (\r\n      <TableRow>\r\n        {selectedRowKeys ? (\r\n          <SelfTableCell key={getUUID()} padding=\"checkbox\">\r\n            <Checkbox\r\n              color=\"primary\"\r\n              checked={\r\n                selectedRowKeys.length > 0 && selectedRowKeys.length === length\r\n              }\r\n              onChange={(event) => onSelectAllClick(event, null, null)}\r\n              indeterminate={\r\n                selectedRowKeys.length > 0 && selectedRowKeys.length < length\r\n              }\r\n              // inputProps={{\r\n              //   \"aria-label\": \"select all desserts\",\r\n              // }}\r\n            />\r\n          </SelfTableCell>\r\n        ) : null}\r\n        {list.map((item) =>\r\n          item.sort ? (\r\n            <SelfTableCell\r\n              key={item.key}\r\n              align={item.align ? item.align : \"left\"}\r\n              sortDirection={sortType ? \"desc\" : \"asc\"}\r\n              onClick={() => changeSortMethod(sortType, item.key)}\r\n            >\r\n              <TableSortLabel direction={sortType[item.key] ? \"desc\" : \"asc\"}>\r\n                {item.title}\r\n              </TableSortLabel>\r\n              <Box component=\"span\" sx={visuallyHidden}>\r\n                {/* {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"} */}\r\n                {\"sorted descending\"}\r\n              </Box>\r\n            </SelfTableCell>\r\n          ) : (\r\n            <SelfTableCell\r\n              key={item.key}\r\n              align={item.align ? item.align : \"left\"}\r\n            >\r\n              {item.title}\r\n            </SelfTableCell>\r\n          )\r\n        )}\r\n      </TableRow>\r\n    );\r\n  };\r\n\r\n  const changeSortMethod = (type, column) => {\r\n    let newType = !type[column];\r\n    let newSortType = JSON.parse(JSON.stringify(sortType));\r\n    newSortType[column] = newType;\r\n    // debugger;\r\n    setSortType(newSortType);\r\n    changeSort && changeSort(newType, column);\r\n  };\r\n\r\n  const onSelectAllClick = (event, key, item) => {\r\n    let checked = event.target.checked;\r\n    let newSelectedRowKeys = [],\r\n      newSelectionRows = [];\r\n    if (!key && !item) {\r\n      newSelectedRowKeys = checked ? getAllSelected().rowKeys : [];\r\n      newSelectionRows = checked ? getAllSelected().rows : [];\r\n    } else {\r\n      if (checked) {\r\n        newSelectedRowKeys = [...selectedRowKeys, key];\r\n        newSelectionRows = [...selectionRows, item];\r\n      } else {\r\n        newSelectedRowKeys = [...selectedRowKeys];\r\n        newSelectionRows = [...selectionRows];\r\n        let index = newSelectedRowKeys.indexOf(key);\r\n        newSelectedRowKeys.splice(index, 1);\r\n        newSelectionRows.splice(index, 1);\r\n      }\r\n    }\r\n    selectedChange && selectedChange(selectedRowKeys, selectionRows);\r\n  };\r\n\r\n  const getAllSelected = () => {\r\n    let startNum = ipagenation.pageNum * ipagenation.pageSize,\r\n      endNum =\r\n        ipagenation.pageNum * ipagenation.pageSize + ipagenation.pageSize;\r\n    let rows = dataSource.slice(startNum, endNum);\r\n    let rowKeys = dataSource.slice(startNum, endNum).map((item) => {\r\n      return item[rowKey];\r\n    });\r\n    return {\r\n      rows,\r\n      rowKeys,\r\n    };\r\n  };\r\n\r\n  const createDataSource = (data, index) => {\r\n    let itemArr = [];\r\n    // for (let key in data) {\r\n    let dataKeys = Object.keys(data);\r\n    for (let colItem of columns) {\r\n      if (colItem.render) {\r\n        let text = \"\";\r\n        let res = dataKeys.find((key) => key === colItem.key);\r\n        if (res) {\r\n          text = data[colItem.key];\r\n        }\r\n        itemArr.push(\r\n          <SelfTableCell\r\n            key={getUUID()}\r\n            align={colItem.align ? colItem.align : \"left\"}\r\n          >\r\n            {colItem.render(text, data, index)}\r\n          </SelfTableCell>\r\n        );\r\n      } else {\r\n        let res = dataKeys.find((key) => key === colItem.key);\r\n        if (res) {\r\n          itemArr.push(\r\n            <SelfTableCell\r\n              key={colItem.key}\r\n              align={colItem.align ? colItem.align : \"left\"}\r\n            >\r\n              {data[colItem.key]}\r\n            </SelfTableCell>\r\n          );\r\n        } else {\r\n          itemArr.push(\r\n            <SelfTableCell\r\n              key={getUUID()}\r\n              align={colItem.align ? colItem.align : \"left\"}\r\n            ></SelfTableCell>\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return itemArr;\r\n  };\r\n\r\n  const changePage = (event: unknown, newPage: number) => {\r\n    handleChangePage && handleChangePage(newPage + 1);\r\n  };\r\n\r\n  const changeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    handleChangeRowsPerPage &&\r\n      handleChangeRowsPerPage(parseInt(event.target.value, 10));\r\n  };\r\n\r\n  const getStatus = (id, arr) => {\r\n    let res = arr.find((item) => item === id);\r\n    if (res) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const renderTable = () => {\r\n    const tableRowKey = rowKey || \"id\";\r\n    return (\r\n      <Paper sx={{ width: \"100%\", mb: 2, height: \"100%\", overflow: \"auto\" }}>\r\n        <TableContainer\r\n          sx={{\r\n            width: \"100%\",\r\n            overflow: \"auto\",\r\n            height: \"100%\",\r\n            minHeight: 650,\r\n            ...(tableStyle || {}),\r\n          }}\r\n        >\r\n          <Table aria-label=\"simple table\" sx={{ overflowY: \"auto\" }}>\r\n            <TableHead>{columns ? createColumns(columns) : null}</TableHead>\r\n            <TableBody>\r\n              {dataSource &&\r\n                dataSource.map((row, index) => (\r\n                  <TableRow\r\n                    key={row[tableRowKey] || getUUID()}\r\n                    sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n                  >\r\n                    {selectedRowKeys ? (\r\n                      <SelfTableCell key={getUUID()} padding=\"checkbox\">\r\n                        <Checkbox\r\n                          color=\"primary\"\r\n                          checked={getStatus(row.id, selectedRowKeys)}\r\n                          onChange={(e) => onSelectAllClick(e, row.id, row)}\r\n                        />\r\n                      </SelfTableCell>\r\n                    ) : null}\r\n                    {createDataSource(row, index)}\r\n                  </TableRow>\r\n                ))}\r\n            </TableBody>\r\n          </Table>\r\n          {ipagenation && total > 0 ? (\r\n            <SPagination\r\n              pagenation={ipagenation}\r\n              total={total}\r\n              onPageChange={handleChangePage}\r\n              onRowsPerPageChange={handleChangeRowsPerPage}\r\n            />\r\n          ) : null}\r\n          {!dataSource || dataSource.length === 0 ? (\r\n            <NoData>\r\n              <img src=\"/static/images/nodata.svg\" />\r\n              <p>暂无数据</p>\r\n            </NoData>\r\n          ) : null}\r\n        </TableContainer>\r\n      </Paper>\r\n    );\r\n  };\r\n\r\n  return renderTable();\r\n};\r\n\r\nexport default STable;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { styled } from \"@mui/material/styles\";\r\nimport { Grid, Box } from \"@mui/material\";\r\n\r\nimport STable from \"~/components/STable\";\r\nimport QueryPane from \"~/components/QueryPane\";\r\n\r\nimport { getAction } from \"~/apis/manage\";\r\nimport { commonStore } from \"~/stores/commonStore\";\r\n\r\nconst Nav = styled(\"div\")(({ theme }) => ({\r\n  display: \"flex\",\r\n  height: \"50px\",\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  fontSize: \"15px\",\r\n  padding: \"15px 0\",\r\n}));\r\n\r\nconst SlefLink = styled(\"a\")(({ theme }) => ({\r\n  color: \"#333\",\r\n  textDecoration: \"none\",\r\n  \"& i\": {\r\n    fontSize: \"20px\",\r\n  },\r\n}));\r\n\r\nconst url = {\r\n  list: \"trade/deploy/list\",\r\n  add: \"\",\r\n  edit: \"\",\r\n  delete: \"\",\r\n  project: \"\",\r\n};\r\n\r\nexport default function Deploy() {\r\n  const [dataSource, setDataSource] = useState([]);\r\n  const [ipagenation, setIpagenation] = useState({\r\n    pageNum: 0,\r\n    pageSize: 10,\r\n    pageSizeOptions: [],\r\n  });\r\n  const [total, setTotal] = useState(0);\r\n  let columns = [\r\n    {\r\n      key: \"\",\r\n      title: \"序号\",\r\n      align: \"center\",\r\n      render: (text, record, index) => index + 1,\r\n    },\r\n    {\r\n      key: \"project_name\",\r\n      title: \"名称\",\r\n      align: \"left\",\r\n    },\r\n    // {\r\n    //   key: \"appNum\",\r\n    //   title: \"场景\",\r\n    //   align: \"center\",\r\n    //   render: (t, r, i) => t || 0,\r\n    // },\r\n    {\r\n      key: \"expiration\",\r\n      title: \"部署失效时间\",\r\n      align: \"center\",\r\n    },\r\n    // {\r\n    //   key: \"hardware_info\",\r\n    //   title: \"硬件信息\",\r\n    //   align: \"center\",\r\n    // },\r\n    {\r\n      key: \"env\",\r\n      title: \"部署环境\",\r\n      align: \"center\",\r\n      render: (t, r, i) => t || \"Windows\",\r\n    },\r\n    {\r\n      key: \"create_date\",\r\n      title: \"提审时间\",\r\n      align: \"center\",\r\n      // sort: true,\r\n    },\r\n    {\r\n      key: \"action\",\r\n      title: \"操作\",\r\n      align: \"center\",\r\n      render: (text, record, index) =>\r\n        // <SlefButton disabled={!record.download}>\r\n        record.download ? (\r\n          <SlefLink download href={setDownloadHref(record.download)}>\r\n            <i className=\"iconfont icon-3Dxiazai\"></i>\r\n          </SlefLink>\r\n        ) : (\r\n          \"-\"\r\n        ),\r\n      // </SlefButton>\r\n    },\r\n  ];\r\n\r\n  /* --start */\r\n  // 获取列表\r\n  const getDataList = (params?: {}) => {\r\n    let formData = {\r\n      Current: ipagenation.pageNum,\r\n      Size: ipagenation.pageSize,\r\n      ...params,\r\n    };\r\n    getAction(url.list, formData)\r\n      .then((res) => {\r\n        if (res[\"code\"] === 0) {\r\n          let { list, total } = res.data;\r\n          if (list && list.length > 0) {\r\n            setDataSource(list);\r\n            setTotal(total);\r\n          } else {\r\n            setDataSource([]);\r\n            setTotal(0);\r\n          }\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getDataList();\r\n  }, []);\r\n\r\n  const handleChangePage = (page) => {\r\n    setIpagenation({\r\n      pageNum: page,\r\n      pageSize: ipagenation.pageSize,\r\n      pageSizeOptions: ipagenation.pageSizeOptions,\r\n    });\r\n    getDataList({ Current: page });\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n    setIpagenation({\r\n      pageNum: 1,\r\n      pageSize: rowsPerPage,\r\n      pageSizeOptions: ipagenation.pageSizeOptions,\r\n    });\r\n    getDataList({ Size: rowsPerPage });\r\n  };\r\n\r\n  const search = (val) => {\r\n    getDataList({ name: val });\r\n  };\r\n\r\n  const setDownloadHref = (url) => {\r\n    if (url.indexOf(\"http://\") !== -1 || url.indexOf(\"https://\") !== -1) {\r\n      return url;\r\n    } else {\r\n      return commonStore.prefix + url.slice(1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1, height: \"100%\" }}>\r\n      <Grid\r\n        container\r\n        spacing={0}\r\n        sx={{\r\n          height: \"100%\",\r\n        }}\r\n      >\r\n        <Grid item xs={12} sx={{ padding: \"0 15px\" }}>\r\n          <Nav>\r\n            <span style={{ fontWeight: \"bold\" }}>项目部署</span>\r\n            <QueryPane search={search}></QueryPane>\r\n          </Nav>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          sx={{\r\n            background: \"rgb(240, 242, 245)\",\r\n            padding: \"15px\",\r\n            height: \"calc(100% - 50px)\",\r\n          }}\r\n        >\r\n          <STable\r\n            columns={columns}\r\n            dataSource={dataSource}\r\n            rowKey=\"id\"\r\n            ipagenation={ipagenation}\r\n            handleChangePage={handleChangePage}\r\n            handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n            total={total}\r\n          ></STable>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n"],"names":["SelfPaper","styled","Paper","theme","border","p","display","alignItems","width","height","boxShadow","borderRadius","SearchPane","justifyContent","padding","background","color","cursor","QueryPane","props","value","setValue","useState","handleClick","search","sx","ml","flex","placeholder","onChange","e","target","onKeyUp","keyCode","onClick","total","pagenation","onPageChange","onRowsPerPageChange","pageNum","pageSize","pageSizeOptions","rowsPerPageOptions","component","count","rowsPerPage","page","event","newPage","labelRowsPerPage","labelDisplayedRows","from","to","Math","ceil","NoData","textAlign","fontSize","margin","SelfTableCell","TableCell","columns","dataSource","rowKey","ipagenation","handleChangePage","handleChangeRowsPerPage","selectedRowKeys","selectionRows","selectedChange","changeSort","tableStyle","sortType","setSortType","changeSortMethod","type","column","newType","newSortType","JSON","parse","onSelectAllClick","key","item","checked","newSelectedRowKeys","newSelectionRows","index","getAllSelected","rowKeys","rows","startNum","endNum","tableRowKey","mb","overflow","minHeight","overflowY","list","length","getUUID","indeterminate","align","sortDirection","direction","title","visuallyHidden","createColumns","row","id","arr","data","itemArr","dataKeys","colItem","render","text","push","createDataSource","src","renderTable","Nav","SlefLink","textDecoration","url","Deploy","setDataSource","setIpagenation","setTotal","record","t","r","i","download","href","setDownloadHref","className","getDataList","params","formData","Current","Size","getAction","then","res","catch","err","useEffect","commonStore","flexGrow","container","spacing","xs","style","fontWeight","val","name"],"sourceRoot":""}