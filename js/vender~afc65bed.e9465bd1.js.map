{"version":3,"file":"js/vender~afc65bed.e9465bd1.js","mappings":"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","sources":["webpack:///../../../node_modules/@babylonjs/core/Materials/PBR/pbrBaseSimpleMaterial.js","webpack:///../../../node_modules/@babylonjs/core/Materials/PBR/pbrMetallicRoughnessMaterial.js","webpack:///../../../node_modules/@babylonjs/core/Materials/PBR/pbrSpecularGlossinessMaterial.js","webpack:///../../../node_modules/@babylonjs/core/Materials/PBR/pbrAnisotropicConfiguration.js","webpack:///../../../node_modules/@babylonjs/core/Materials/PBR/pbrBRDFConfiguration.js","webpack:///../../../node_modules/@babylonjs/core/Materials/PBR/pbrBaseMaterial.js","webpack:///../../../node_modules/@babylonjs/core/Materials/PBR/pbrClearCoatConfiguration.js","webpack:///../../../node_modules/@babylonjs/core/Materials/PBR/pbrIridescenceConfiguration.js","webpack:///../../../node_modules/@babylonjs/core/Materials/PBR/pbrMaterial.js","webpack:///../../../node_modules/@babylonjs/core/Materials/PBR/pbrSheenConfiguration.js","webpack:///../../../node_modules/@babylonjs/core/Materials/PBR/pbrSubSurfaceConfiguration.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/Filtering/hdrFiltering.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/Loaders/ddsTextureLoader.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/Loaders/envTextureLoader.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/Loaders/ktxTextureLoader.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/MultiviewRenderTarget.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/Procedurals/proceduralTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/Procedurals/proceduralTextureSceneComponent.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/baseTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/baseTexture.polynomial.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/cubeTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/dynamicTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/equiRectangularCubeTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/externalTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/hdrCubeTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/colorGradingTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/htmlElementTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/Loaders/tgaTextureLoader.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/Loaders/hdrTextureLoader.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/Loaders/basisTextureLoader.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/Packer/frame.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/Packer/packer.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/Procedurals/customProceduralTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/Procedurals/noiseProceduralTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/rawTexture3D.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/refractionTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/internalTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/mirrorTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/multiRenderTarget.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/prePassRenderTarget.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/rawCubeTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/rawTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/rawTexture2DArray.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/renderTargetTexture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/texture.js","webpack:///../../../node_modules/@babylonjs/core/Materials/Textures/textureSampler.js"],"sourcesContent":["import { __decorate, __extends } from \"tslib\";\nimport { serialize, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators.js\";\nimport { Color3 } from \"../../Maths/math.color.js\";\nimport { PBRBaseMaterial } from \"./pbrBaseMaterial.js\";\n/**\n * The Physically based simple base material of BJS.\n *\n * This enables better naming and convention enforcements on top of the pbrMaterial.\n * It is used as the base class for both the specGloss and metalRough conventions.\n */\nvar PBRBaseSimpleMaterial = /** @class */ (function (_super) {\n    __extends(PBRBaseSimpleMaterial, _super);\n    /**\n     * Instantiates a new PBRMaterial instance.\n     *\n     * @param name The material name\n     * @param scene The scene the material will be use in.\n     */\n    function PBRBaseSimpleMaterial(name, scene) {\n        var _this = _super.call(this, name, scene) || this;\n        /**\n         * Number of Simultaneous lights allowed on the material.\n         */\n        _this.maxSimultaneousLights = 4;\n        /**\n         * If sets to true, disables all the lights affecting the material.\n         */\n        _this.disableLighting = false;\n        /**\n         * If sets to true, x component of normal map value will invert (x = 1.0 - x).\n         */\n        _this.invertNormalMapX = false;\n        /**\n         * If sets to true, y component of normal map value will invert (y = 1.0 - y).\n         */\n        _this.invertNormalMapY = false;\n        /**\n         * Emissivie color used to self-illuminate the model.\n         */\n        _this.emissiveColor = new Color3(0, 0, 0);\n        /**\n         * Occlusion Channel Strength.\n         */\n        _this.occlusionStrength = 1.0;\n        /**\n         * If true, the light map contains occlusion information instead of lighting info.\n         */\n        _this.useLightmapAsShadowmap = false;\n        _this._useAlphaFromAlbedoTexture = true;\n        _this._useAmbientInGrayScale = true;\n        return _this;\n    }\n    Object.defineProperty(PBRBaseSimpleMaterial.prototype, \"doubleSided\", {\n        /**\n         * Gets the current double sided mode.\n         */\n        get: function () {\n            return this._twoSidedLighting;\n        },\n        /**\n         * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\n         */\n        set: function (value) {\n            if (this._twoSidedLighting === value) {\n                return;\n            }\n            this._twoSidedLighting = value;\n            this.backFaceCulling = !value;\n            this._markAllSubMeshesAsTexturesDirty();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    PBRBaseSimpleMaterial.prototype.getClassName = function () {\n        return \"PBRBaseSimpleMaterial\";\n    };\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    ], PBRBaseSimpleMaterial.prototype, \"maxSimultaneousLights\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    ], PBRBaseSimpleMaterial.prototype, \"disableLighting\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_reflectionTexture\")\n    ], PBRBaseSimpleMaterial.prototype, \"environmentTexture\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRBaseSimpleMaterial.prototype, \"invertNormalMapX\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRBaseSimpleMaterial.prototype, \"invertNormalMapY\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_bumpTexture\")\n    ], PBRBaseSimpleMaterial.prototype, \"normalTexture\", void 0);\n    __decorate([\n        serializeAsColor3(\"emissive\"),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRBaseSimpleMaterial.prototype, \"emissiveColor\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRBaseSimpleMaterial.prototype, \"emissiveTexture\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_ambientTextureStrength\")\n    ], PBRBaseSimpleMaterial.prototype, \"occlusionStrength\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_ambientTexture\")\n    ], PBRBaseSimpleMaterial.prototype, \"occlusionTexture\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_alphaCutOff\")\n    ], PBRBaseSimpleMaterial.prototype, \"alphaCutOff\", void 0);\n    __decorate([\n        serialize()\n    ], PBRBaseSimpleMaterial.prototype, \"doubleSided\", null);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", null)\n    ], PBRBaseSimpleMaterial.prototype, \"lightmapTexture\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRBaseSimpleMaterial.prototype, \"useLightmapAsShadowmap\", void 0);\n    return PBRBaseSimpleMaterial;\n}(PBRBaseMaterial));\nexport { PBRBaseSimpleMaterial };\n//# sourceMappingURL=pbrBaseSimpleMaterial.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize, SerializationHelper, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators.js\";\nimport { PBRBaseSimpleMaterial } from \"./pbrBaseSimpleMaterial.js\";\nimport { RegisterClass } from \"../../Misc/typeStore.js\";\n/**\n * The PBR material of BJS following the metal roughness convention.\n *\n * This fits to the PBR convention in the GLTF definition:\n * https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness\n */\nvar PBRMetallicRoughnessMaterial = /** @class */ (function (_super) {\n    __extends(PBRMetallicRoughnessMaterial, _super);\n    /**\n     * Instantiates a new PBRMetalRoughnessMaterial instance.\n     *\n     * @param name The material name\n     * @param scene The scene the material will be use in.\n     */\n    function PBRMetallicRoughnessMaterial(name, scene) {\n        var _this = _super.call(this, name, scene) || this;\n        _this._useRoughnessFromMetallicTextureAlpha = false;\n        _this._useRoughnessFromMetallicTextureGreen = true;\n        _this._useMetallnessFromMetallicTextureBlue = true;\n        _this.metallic = 1.0;\n        _this.roughness = 1.0;\n        return _this;\n    }\n    /**\n     * Return the current class name of the material.\n     */\n    PBRMetallicRoughnessMaterial.prototype.getClassName = function () {\n        return \"PBRMetallicRoughnessMaterial\";\n    };\n    /**\n     * Makes a duplicate of the current material.\n     * @param name - name to use for the new material.\n     */\n    PBRMetallicRoughnessMaterial.prototype.clone = function (name) {\n        var _this = this;\n        var clone = SerializationHelper.Clone(function () { return new PBRMetallicRoughnessMaterial(name, _this.getScene()); }, this);\n        clone.id = name;\n        clone.name = name;\n        this.clearCoat.copyTo(clone.clearCoat);\n        this.anisotropy.copyTo(clone.anisotropy);\n        this.brdf.copyTo(clone.brdf);\n        this.sheen.copyTo(clone.sheen);\n        this.subSurface.copyTo(clone.subSurface);\n        return clone;\n    };\n    /**\n     * Serialize the material to a parsable JSON object.\n     */\n    PBRMetallicRoughnessMaterial.prototype.serialize = function () {\n        var serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"BABYLON.PBRMetallicRoughnessMaterial\";\n        serializationObject.clearCoat = this.clearCoat.serialize();\n        serializationObject.anisotropy = this.anisotropy.serialize();\n        serializationObject.brdf = this.brdf.serialize();\n        serializationObject.sheen = this.sheen.serialize();\n        serializationObject.subSurface = this.subSurface.serialize();\n        serializationObject.iridescence = this.iridescence.serialize();\n        return serializationObject;\n    };\n    /**\n     * Parses a JSON object corresponding to the serialize function.\n     * @param source\n     * @param scene\n     * @param rootUrl\n     */\n    PBRMetallicRoughnessMaterial.Parse = function (source, scene, rootUrl) {\n        var material = SerializationHelper.Parse(function () { return new PBRMetallicRoughnessMaterial(source.name, scene); }, source, scene, rootUrl);\n        if (source.clearCoat) {\n            material.clearCoat.parse(source.clearCoat, scene, rootUrl);\n        }\n        if (source.anisotropy) {\n            material.anisotropy.parse(source.anisotropy, scene, rootUrl);\n        }\n        if (source.brdf) {\n            material.brdf.parse(source.brdf, scene, rootUrl);\n        }\n        if (source.sheen) {\n            material.sheen.parse(source.sheen, scene, rootUrl);\n        }\n        if (source.subSurface) {\n            material.subSurface.parse(source.subSurface, scene, rootUrl);\n        }\n        if (source.iridescence) {\n            material.iridescence.parse(source.iridescence, scene, rootUrl);\n        }\n        return material;\n    };\n    __decorate([\n        serializeAsColor3(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoColor\")\n    ], PBRMetallicRoughnessMaterial.prototype, \"baseColor\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoTexture\")\n    ], PBRMetallicRoughnessMaterial.prototype, \"baseTexture\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMetallicRoughnessMaterial.prototype, \"metallic\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMetallicRoughnessMaterial.prototype, \"roughness\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_metallicTexture\")\n    ], PBRMetallicRoughnessMaterial.prototype, \"metallicRoughnessTexture\", void 0);\n    return PBRMetallicRoughnessMaterial;\n}(PBRBaseSimpleMaterial));\nexport { PBRMetallicRoughnessMaterial };\nRegisterClass(\"BABYLON.PBRMetallicRoughnessMaterial\", PBRMetallicRoughnessMaterial);\n//# sourceMappingURL=pbrMetallicRoughnessMaterial.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize, SerializationHelper, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators.js\";\nimport { PBRBaseSimpleMaterial } from \"./pbrBaseSimpleMaterial.js\";\nimport { RegisterClass } from \"../../Misc/typeStore.js\";\n/**\n * The PBR material of BJS following the specular glossiness convention.\n *\n * This fits to the PBR convention in the GLTF definition:\n * https://github.com/KhronosGroup/glTF/tree/2.0/extensions/Khronos/KHR_materials_pbrSpecularGlossiness\n */\nvar PBRSpecularGlossinessMaterial = /** @class */ (function (_super) {\n    __extends(PBRSpecularGlossinessMaterial, _super);\n    /**\n     * Instantiates a new PBRSpecularGlossinessMaterial instance.\n     *\n     * @param name The material name\n     * @param scene The scene the material will be use in.\n     */\n    function PBRSpecularGlossinessMaterial(name, scene) {\n        var _this = _super.call(this, name, scene) || this;\n        _this._useMicroSurfaceFromReflectivityMapAlpha = true;\n        return _this;\n    }\n    Object.defineProperty(PBRSpecularGlossinessMaterial.prototype, \"useMicroSurfaceFromReflectivityMapAlpha\", {\n        /**\n         * Specifies if the reflectivity texture contains the glossiness information in its alpha channel.\n         */\n        get: function () {\n            return this._useMicroSurfaceFromReflectivityMapAlpha;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Return the current class name of the material.\n     */\n    PBRSpecularGlossinessMaterial.prototype.getClassName = function () {\n        return \"PBRSpecularGlossinessMaterial\";\n    };\n    /**\n     * Makes a duplicate of the current material.\n     * @param name - name to use for the new material.\n     */\n    PBRSpecularGlossinessMaterial.prototype.clone = function (name) {\n        var _this = this;\n        var clone = SerializationHelper.Clone(function () { return new PBRSpecularGlossinessMaterial(name, _this.getScene()); }, this);\n        clone.id = name;\n        clone.name = name;\n        this.clearCoat.copyTo(clone.clearCoat);\n        this.anisotropy.copyTo(clone.anisotropy);\n        this.brdf.copyTo(clone.brdf);\n        this.sheen.copyTo(clone.sheen);\n        this.subSurface.copyTo(clone.subSurface);\n        return clone;\n    };\n    /**\n     * Serialize the material to a parsable JSON object.\n     */\n    PBRSpecularGlossinessMaterial.prototype.serialize = function () {\n        var serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"BABYLON.PBRSpecularGlossinessMaterial\";\n        serializationObject.clearCoat = this.clearCoat.serialize();\n        serializationObject.anisotropy = this.anisotropy.serialize();\n        serializationObject.brdf = this.brdf.serialize();\n        serializationObject.sheen = this.sheen.serialize();\n        serializationObject.subSurface = this.subSurface.serialize();\n        serializationObject.iridescence = this.iridescence.serialize();\n        return serializationObject;\n    };\n    /**\n     * Parses a JSON object corresponding to the serialize function.\n     * @param source\n     * @param scene\n     * @param rootUrl\n     */\n    PBRSpecularGlossinessMaterial.Parse = function (source, scene, rootUrl) {\n        var material = SerializationHelper.Parse(function () { return new PBRSpecularGlossinessMaterial(source.name, scene); }, source, scene, rootUrl);\n        if (source.clearCoat) {\n            material.clearCoat.parse(source.clearCoat, scene, rootUrl);\n        }\n        if (source.anisotropy) {\n            material.anisotropy.parse(source.anisotropy, scene, rootUrl);\n        }\n        if (source.brdf) {\n            material.brdf.parse(source.brdf, scene, rootUrl);\n        }\n        if (source.sheen) {\n            material.sheen.parse(source.sheen, scene, rootUrl);\n        }\n        if (source.subSurface) {\n            material.subSurface.parse(source.subSurface, scene, rootUrl);\n        }\n        if (source.iridescence) {\n            material.iridescence.parse(source.iridescence, scene, rootUrl);\n        }\n        return material;\n    };\n    __decorate([\n        serializeAsColor3(\"diffuse\"),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoColor\")\n    ], PBRSpecularGlossinessMaterial.prototype, \"diffuseColor\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoTexture\")\n    ], PBRSpecularGlossinessMaterial.prototype, \"diffuseTexture\", void 0);\n    __decorate([\n        serializeAsColor3(\"specular\"),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_reflectivityColor\")\n    ], PBRSpecularGlossinessMaterial.prototype, \"specularColor\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_microSurface\")\n    ], PBRSpecularGlossinessMaterial.prototype, \"glossiness\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_reflectivityTexture\")\n    ], PBRSpecularGlossinessMaterial.prototype, \"specularGlossinessTexture\", void 0);\n    return PBRSpecularGlossinessMaterial;\n}(PBRBaseSimpleMaterial));\nexport { PBRSpecularGlossinessMaterial };\nRegisterClass(\"BABYLON.PBRSpecularGlossinessMaterial\", PBRSpecularGlossinessMaterial);\n//# sourceMappingURL=pbrSpecularGlossinessMaterial.js.map","import { __decorate, __extends } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { serialize, expandToProperty, serializeAsVector2, serializeAsTexture } from \"../../Misc/decorators.js\";\nimport { VertexBuffer } from \"../../Buffers/buffer.js\";\nimport { Vector2 } from \"../../Maths/math.vector.js\";\nimport { MaterialFlags } from \"../../Materials/materialFlags.js\";\nimport { MaterialHelper } from \"../../Materials/materialHelper.js\";\nimport { MaterialPluginBase } from \"../materialPluginBase.js\";\n\nimport { MaterialDefines } from \"../materialDefines.js\";\n/**\n * @hidden\n */\nvar MaterialAnisotropicDefines = /** @class */ (function (_super) {\n    __extends(MaterialAnisotropicDefines, _super);\n    function MaterialAnisotropicDefines() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.ANISOTROPIC = false;\n        _this.ANISOTROPIC_TEXTURE = false;\n        _this.ANISOTROPIC_TEXTUREDIRECTUV = 0;\n        _this.MAINUV1 = false;\n        return _this;\n    }\n    return MaterialAnisotropicDefines;\n}(MaterialDefines));\nexport { MaterialAnisotropicDefines };\n/**\n * Plugin that implements the anisotropic component of the PBR material\n */\nvar PBRAnisotropicConfiguration = /** @class */ (function (_super) {\n    __extends(PBRAnisotropicConfiguration, _super);\n    function PBRAnisotropicConfiguration(material, addToPluginList) {\n        if (addToPluginList === void 0) { addToPluginList = true; }\n        var _this = _super.call(this, material, \"PBRAnisotropic\", 110, new MaterialAnisotropicDefines(), addToPluginList) || this;\n        _this._isEnabled = false;\n        /**\n         * Defines if the anisotropy is enabled in the material.\n         */\n        _this.isEnabled = false;\n        /**\n         * Defines the anisotropy strength (between 0 and 1) it defaults to 1.\n         */\n        _this.intensity = 1;\n        /**\n         * Defines if the effect is along the tangents, bitangents or in between.\n         * By default, the effect is \"stretching\" the highlights along the tangents.\n         */\n        _this.direction = new Vector2(1, 0);\n        _this._texture = null;\n        /**\n         * Stores the anisotropy values in a texture.\n         * rg is direction (like normal from -1 to 1)\n         * b is a intensity\n         */\n        _this.texture = null;\n        _this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n        return _this;\n    }\n    /** @hidden */\n    PBRAnisotropicConfiguration.prototype._markAllSubMeshesAsTexturesDirty = function () {\n        this._enable(this._isEnabled);\n        this._internalMarkAllSubMeshesAsTexturesDirty();\n    };\n    PBRAnisotropicConfiguration.prototype.isReadyForSubMesh = function (defines, scene) {\n        if (!this._isEnabled) {\n            return true;\n        }\n        if (defines._areTexturesDirty) {\n            if (scene.texturesEnabled) {\n                if (this._texture && MaterialFlags.AnisotropicTextureEnabled) {\n                    if (!this._texture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    PBRAnisotropicConfiguration.prototype.prepareDefinesBeforeAttributes = function (defines, scene, mesh) {\n        if (this._isEnabled) {\n            defines.ANISOTROPIC = this._isEnabled;\n            if (this._isEnabled && !mesh.isVerticesDataPresent(VertexBuffer.TangentKind)) {\n                defines._needUVs = true;\n                defines.MAINUV1 = true;\n            }\n            if (defines._areTexturesDirty) {\n                if (scene.texturesEnabled) {\n                    if (this._texture && MaterialFlags.AnisotropicTextureEnabled) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"ANISOTROPIC_TEXTURE\");\n                    }\n                    else {\n                        defines.ANISOTROPIC_TEXTURE = false;\n                    }\n                }\n            }\n        }\n        else {\n            defines.ANISOTROPIC = false;\n            defines.ANISOTROPIC_TEXTURE = false;\n        }\n    };\n    PBRAnisotropicConfiguration.prototype.bindForSubMesh = function (uniformBuffer, scene) {\n        if (!this._isEnabled) {\n            return;\n        }\n        var isFrozen = this._material.isFrozen;\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n            if (this._texture && MaterialFlags.AnisotropicTextureEnabled) {\n                uniformBuffer.updateFloat2(\"vAnisotropyInfos\", this._texture.coordinatesIndex, this._texture.level);\n                MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"anisotropy\");\n            }\n            // Anisotropy\n            uniformBuffer.updateFloat3(\"vAnisotropy\", this.direction.x, this.direction.y, this.intensity);\n        }\n        // Textures\n        if (scene.texturesEnabled) {\n            if (this._texture && MaterialFlags.AnisotropicTextureEnabled) {\n                uniformBuffer.setTexture(\"anisotropySampler\", this._texture);\n            }\n        }\n    };\n    PBRAnisotropicConfiguration.prototype.hasTexture = function (texture) {\n        if (this._texture === texture) {\n            return true;\n        }\n        return false;\n    };\n    PBRAnisotropicConfiguration.prototype.getActiveTextures = function (activeTextures) {\n        if (this._texture) {\n            activeTextures.push(this._texture);\n        }\n    };\n    PBRAnisotropicConfiguration.prototype.getAnimatables = function (animatables) {\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n            animatables.push(this._texture);\n        }\n    };\n    PBRAnisotropicConfiguration.prototype.dispose = function (forceDisposeTextures) {\n        if (forceDisposeTextures) {\n            if (this._texture) {\n                this._texture.dispose();\n            }\n        }\n    };\n    PBRAnisotropicConfiguration.prototype.getClassName = function () {\n        return \"PBRAnisotropicConfiguration\";\n    };\n    PBRAnisotropicConfiguration.prototype.addFallbacks = function (defines, fallbacks, currentRank) {\n        if (defines.ANISOTROPIC) {\n            fallbacks.addFallback(currentRank++, \"ANISOTROPIC\");\n        }\n        return currentRank;\n    };\n    PBRAnisotropicConfiguration.prototype.getSamplers = function (samplers) {\n        samplers.push(\"anisotropySampler\");\n    };\n    PBRAnisotropicConfiguration.prototype.getUniforms = function () {\n        return {\n            ubo: [\n                { name: \"vAnisotropy\", size: 3, type: \"vec3\" },\n                { name: \"vAnisotropyInfos\", size: 2, type: \"vec2\" },\n                { name: \"anisotropyMatrix\", size: 16, type: \"mat4\" },\n            ],\n        };\n    };\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRAnisotropicConfiguration.prototype, \"isEnabled\", void 0);\n    __decorate([\n        serialize()\n    ], PBRAnisotropicConfiguration.prototype, \"intensity\", void 0);\n    __decorate([\n        serializeAsVector2()\n    ], PBRAnisotropicConfiguration.prototype, \"direction\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRAnisotropicConfiguration.prototype, \"texture\", void 0);\n    return PBRAnisotropicConfiguration;\n}(MaterialPluginBase));\nexport { PBRAnisotropicConfiguration };\n//# sourceMappingURL=pbrAnisotropicConfiguration.js.map","import { __decorate, __extends } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { serialize, expandToProperty } from \"../../Misc/decorators.js\";\nimport { MaterialDefines } from \"../materialDefines.js\";\nimport { MaterialPluginBase } from \"../materialPluginBase.js\";\n/**\n * @hidden\n */\nvar MaterialBRDFDefines = /** @class */ (function (_super) {\n    __extends(MaterialBRDFDefines, _super);\n    function MaterialBRDFDefines() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.BRDF_V_HEIGHT_CORRELATED = false;\n        _this.MS_BRDF_ENERGY_CONSERVATION = false;\n        _this.SPHERICAL_HARMONICS = false;\n        _this.SPECULAR_GLOSSINESS_ENERGY_CONSERVATION = false;\n        return _this;\n    }\n    return MaterialBRDFDefines;\n}(MaterialDefines));\nexport { MaterialBRDFDefines };\n/**\n * Plugin that implements the BRDF component of the PBR material\n */\nvar PBRBRDFConfiguration = /** @class */ (function (_super) {\n    __extends(PBRBRDFConfiguration, _super);\n    function PBRBRDFConfiguration(material, addToPluginList) {\n        if (addToPluginList === void 0) { addToPluginList = true; }\n        var _this = _super.call(this, material, \"PBRBRDF\", 90, new MaterialBRDFDefines(), addToPluginList) || this;\n        _this._useEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_ENERGY_CONSERVATION;\n        /**\n         * Defines if the material uses energy conservation.\n         */\n        _this.useEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_ENERGY_CONSERVATION;\n        _this._useSmithVisibilityHeightCorrelated = PBRBRDFConfiguration.DEFAULT_USE_SMITH_VISIBILITY_HEIGHT_CORRELATED;\n        /**\n         * LEGACY Mode set to false\n         * Defines if the material uses height smith correlated visibility term.\n         * If you intent to not use our default BRDF, you need to load a separate BRDF Texture for the PBR\n         * You can either load https://assets.babylonjs.com/environments/uncorrelatedBRDF.png\n         * or https://assets.babylonjs.com/environments/uncorrelatedBRDF.dds to have more precision\n         * Not relying on height correlated will also disable energy conservation.\n         */\n        _this.useSmithVisibilityHeightCorrelated = PBRBRDFConfiguration.DEFAULT_USE_SMITH_VISIBILITY_HEIGHT_CORRELATED;\n        _this._useSphericalHarmonics = PBRBRDFConfiguration.DEFAULT_USE_SPHERICAL_HARMONICS;\n        /**\n         * LEGACY Mode set to false\n         * Defines if the material uses spherical harmonics vs spherical polynomials for the\n         * diffuse part of the IBL.\n         * The harmonics despite a tiny bigger cost has been proven to provide closer results\n         * to the ground truth.\n         */\n        _this.useSphericalHarmonics = PBRBRDFConfiguration.DEFAULT_USE_SPHERICAL_HARMONICS;\n        _this._useSpecularGlossinessInputEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_SPECULAR_GLOSSINESS_INPUT_ENERGY_CONSERVATION;\n        /**\n         * Defines if the material uses energy conservation, when the specular workflow is active.\n         * If activated, the albedo color is multiplied with (1. - maxChannel(specular color)).\n         * If deactivated, a material is only physically plausible, when (albedo color + specular color) < 1.\n         * In the deactivated case, the material author has to ensure energy conservation, for a physically plausible rendering.\n         */\n        _this.useSpecularGlossinessInputEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_SPECULAR_GLOSSINESS_INPUT_ENERGY_CONSERVATION;\n        _this._internalMarkAllSubMeshesAsMiscDirty = material._dirtyCallbacks[16];\n        _this._enable(true);\n        return _this;\n    }\n    /** @hidden */\n    PBRBRDFConfiguration.prototype._markAllSubMeshesAsMiscDirty = function () {\n        this._internalMarkAllSubMeshesAsMiscDirty();\n    };\n    PBRBRDFConfiguration.prototype.prepareDefines = function (defines) {\n        defines.BRDF_V_HEIGHT_CORRELATED = this._useSmithVisibilityHeightCorrelated;\n        defines.MS_BRDF_ENERGY_CONSERVATION = this._useEnergyConservation && this._useSmithVisibilityHeightCorrelated;\n        defines.SPHERICAL_HARMONICS = this._useSphericalHarmonics;\n        defines.SPECULAR_GLOSSINESS_ENERGY_CONSERVATION = this._useSpecularGlossinessInputEnergyConservation;\n    };\n    PBRBRDFConfiguration.prototype.getClassName = function () {\n        return \"PBRBRDFConfiguration\";\n    };\n    /**\n     * Default value used for the energy conservation.\n     * This should only be changed to adapt to the type of texture in scene.environmentBRDFTexture.\n     */\n    PBRBRDFConfiguration.DEFAULT_USE_ENERGY_CONSERVATION = true;\n    /**\n     * Default value used for the Smith Visibility Height Correlated mode.\n     * This should only be changed to adapt to the type of texture in scene.environmentBRDFTexture.\n     */\n    PBRBRDFConfiguration.DEFAULT_USE_SMITH_VISIBILITY_HEIGHT_CORRELATED = true;\n    /**\n     * Default value used for the IBL diffuse part.\n     * This can help switching back to the polynomials mode globally which is a tiny bit\n     * less GPU intensive at the drawback of a lower quality.\n     */\n    PBRBRDFConfiguration.DEFAULT_USE_SPHERICAL_HARMONICS = true;\n    /**\n     * Default value used for activating energy conservation for the specular workflow.\n     * If activated, the albedo color is multiplied with (1. - maxChannel(specular color)).\n     * If deactivated, a material is only physically plausible, when (albedo color + specular color) < 1.\n     */\n    PBRBRDFConfiguration.DEFAULT_USE_SPECULAR_GLOSSINESS_INPUT_ENERGY_CONSERVATION = true;\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n    ], PBRBRDFConfiguration.prototype, \"useEnergyConservation\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n    ], PBRBRDFConfiguration.prototype, \"useSmithVisibilityHeightCorrelated\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n    ], PBRBRDFConfiguration.prototype, \"useSphericalHarmonics\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n    ], PBRBRDFConfiguration.prototype, \"useSpecularGlossinessInputEnergyConservation\", void 0);\n    return PBRBRDFConfiguration;\n}(MaterialPluginBase));\nexport { PBRBRDFConfiguration };\n//# sourceMappingURL=pbrBRDFConfiguration.js.map","import { __assign, __decorate, __extends } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { serialize, serializeAsImageProcessingConfiguration, expandToProperty } from \"../../Misc/decorators.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { SmartArray } from \"../../Misc/smartArray.js\";\nimport { GetEnvironmentBRDFTexture } from \"../../Misc/brdfTextureTools.js\";\nimport { Scene } from \"../../scene.js\";\nimport { Vector4 } from \"../../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../../Buffers/buffer.js\";\nimport { PBRBRDFConfiguration } from \"./pbrBRDFConfiguration.js\";\nimport { PrePassConfiguration } from \"../prePassConfiguration.js\";\nimport { Color3, TmpColors } from \"../../Maths/math.color.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\nimport { ImageProcessingConfiguration } from \"../../Materials/imageProcessingConfiguration.js\";\nimport { Material } from \"../../Materials/material.js\";\nimport { MaterialPluginEvent } from \"../materialPluginEvent.js\";\nimport { MaterialDefines } from \"../../Materials/materialDefines.js\";\nimport { PushMaterial } from \"../../Materials/pushMaterial.js\";\nimport { MaterialHelper } from \"../../Materials/materialHelper.js\";\nimport { Texture } from \"../../Materials/Textures/texture.js\";\nimport { MaterialFlags } from \"../materialFlags.js\";\n\nimport \"../../Materials/Textures/baseTexture.polynomial.js\";\nimport \"../../Shaders/pbr.fragment.js\";\nimport \"../../Shaders/pbr.vertex.js\";\nimport { EffectFallbacks } from \"../effectFallbacks.js\";\nimport { PBRClearCoatConfiguration } from \"./pbrClearCoatConfiguration.js\";\nimport { PBRIridescenceConfiguration } from \"./pbrIridescenceConfiguration.js\";\nimport { PBRAnisotropicConfiguration } from \"./pbrAnisotropicConfiguration.js\";\nimport { PBRSheenConfiguration } from \"./pbrSheenConfiguration.js\";\nimport { PBRSubSurfaceConfiguration } from \"./pbrSubSurfaceConfiguration.js\";\nimport { DetailMapConfiguration } from \"../material.detailMapConfiguration.js\";\nvar onCreatedEffectParameters = { effect: null, subMesh: null };\n/**\n * Manages the defines for the PBR Material.\n * @hidden\n */\nvar PBRMaterialDefines = /** @class */ (function (_super) {\n    __extends(PBRMaterialDefines, _super);\n    /**\n     * Initializes the PBR Material defines.\n     * @param externalProperties The external properties\n     */\n    function PBRMaterialDefines(externalProperties) {\n        var _this = _super.call(this, externalProperties) || this;\n        _this.PBR = true;\n        _this.NUM_SAMPLES = \"0\";\n        _this.REALTIME_FILTERING = false;\n        _this.MAINUV1 = false;\n        _this.MAINUV2 = false;\n        _this.MAINUV3 = false;\n        _this.MAINUV4 = false;\n        _this.MAINUV5 = false;\n        _this.MAINUV6 = false;\n        _this.UV1 = false;\n        _this.UV2 = false;\n        _this.UV3 = false;\n        _this.UV4 = false;\n        _this.UV5 = false;\n        _this.UV6 = false;\n        _this.ALBEDO = false;\n        _this.GAMMAALBEDO = false;\n        _this.ALBEDODIRECTUV = 0;\n        _this.VERTEXCOLOR = false;\n        _this.BAKED_VERTEX_ANIMATION_TEXTURE = false;\n        _this.AMBIENT = false;\n        _this.AMBIENTDIRECTUV = 0;\n        _this.AMBIENTINGRAYSCALE = false;\n        _this.OPACITY = false;\n        _this.VERTEXALPHA = false;\n        _this.OPACITYDIRECTUV = 0;\n        _this.OPACITYRGB = false;\n        _this.ALPHATEST = false;\n        _this.DEPTHPREPASS = false;\n        _this.ALPHABLEND = false;\n        _this.ALPHAFROMALBEDO = false;\n        _this.ALPHATESTVALUE = \"0.5\";\n        _this.SPECULAROVERALPHA = false;\n        _this.RADIANCEOVERALPHA = false;\n        _this.ALPHAFRESNEL = false;\n        _this.LINEARALPHAFRESNEL = false;\n        _this.PREMULTIPLYALPHA = false;\n        _this.EMISSIVE = false;\n        _this.EMISSIVEDIRECTUV = 0;\n        _this.GAMMAEMISSIVE = false;\n        _this.REFLECTIVITY = false;\n        _this.REFLECTIVITY_GAMMA = false;\n        _this.REFLECTIVITYDIRECTUV = 0;\n        _this.SPECULARTERM = false;\n        _this.MICROSURFACEFROMREFLECTIVITYMAP = false;\n        _this.MICROSURFACEAUTOMATIC = false;\n        _this.LODBASEDMICROSFURACE = false;\n        _this.MICROSURFACEMAP = false;\n        _this.MICROSURFACEMAPDIRECTUV = 0;\n        _this.METALLICWORKFLOW = false;\n        _this.ROUGHNESSSTOREINMETALMAPALPHA = false;\n        _this.ROUGHNESSSTOREINMETALMAPGREEN = false;\n        _this.METALLNESSSTOREINMETALMAPBLUE = false;\n        _this.AOSTOREINMETALMAPRED = false;\n        _this.METALLIC_REFLECTANCE = false;\n        _this.METALLIC_REFLECTANCE_GAMMA = false;\n        _this.METALLIC_REFLECTANCEDIRECTUV = 0;\n        _this.METALLIC_REFLECTANCE_USE_ALPHA_ONLY = false;\n        _this.REFLECTANCE = false;\n        _this.REFLECTANCE_GAMMA = false;\n        _this.REFLECTANCEDIRECTUV = 0;\n        _this.ENVIRONMENTBRDF = false;\n        _this.ENVIRONMENTBRDF_RGBD = false;\n        _this.NORMAL = false;\n        _this.TANGENT = false;\n        _this.BUMP = false;\n        _this.BUMPDIRECTUV = 0;\n        _this.OBJECTSPACE_NORMALMAP = false;\n        _this.PARALLAX = false;\n        _this.PARALLAXOCCLUSION = false;\n        _this.NORMALXYSCALE = true;\n        _this.LIGHTMAP = false;\n        _this.LIGHTMAPDIRECTUV = 0;\n        _this.USELIGHTMAPASSHADOWMAP = false;\n        _this.GAMMALIGHTMAP = false;\n        _this.RGBDLIGHTMAP = false;\n        _this.REFLECTION = false;\n        _this.REFLECTIONMAP_3D = false;\n        _this.REFLECTIONMAP_SPHERICAL = false;\n        _this.REFLECTIONMAP_PLANAR = false;\n        _this.REFLECTIONMAP_CUBIC = false;\n        _this.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\n        _this.REFLECTIONMAP_PROJECTION = false;\n        _this.REFLECTIONMAP_SKYBOX = false;\n        _this.REFLECTIONMAP_EXPLICIT = false;\n        _this.REFLECTIONMAP_EQUIRECTANGULAR = false;\n        _this.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n        _this.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n        _this.INVERTCUBICMAP = false;\n        _this.USESPHERICALFROMREFLECTIONMAP = false;\n        _this.USEIRRADIANCEMAP = false;\n        _this.USESPHERICALINVERTEX = false;\n        _this.REFLECTIONMAP_OPPOSITEZ = false;\n        _this.LODINREFLECTIONALPHA = false;\n        _this.GAMMAREFLECTION = false;\n        _this.RGBDREFLECTION = false;\n        _this.LINEARSPECULARREFLECTION = false;\n        _this.RADIANCEOCCLUSION = false;\n        _this.HORIZONOCCLUSION = false;\n        _this.INSTANCES = false;\n        _this.THIN_INSTANCES = false;\n        _this.INSTANCESCOLOR = false;\n        _this.PREPASS = false;\n        _this.PREPASS_IRRADIANCE = false;\n        _this.PREPASS_IRRADIANCE_INDEX = -1;\n        _this.PREPASS_ALBEDO_SQRT = false;\n        _this.PREPASS_ALBEDO_SQRT_INDEX = -1;\n        _this.PREPASS_DEPTH = false;\n        _this.PREPASS_DEPTH_INDEX = -1;\n        _this.PREPASS_NORMAL = false;\n        _this.PREPASS_NORMAL_INDEX = -1;\n        _this.PREPASS_POSITION = false;\n        _this.PREPASS_POSITION_INDEX = -1;\n        _this.PREPASS_VELOCITY = false;\n        _this.PREPASS_VELOCITY_INDEX = -1;\n        _this.PREPASS_REFLECTIVITY = false;\n        _this.PREPASS_REFLECTIVITY_INDEX = -1;\n        _this.SCENE_MRT_COUNT = 0;\n        _this.NUM_BONE_INFLUENCERS = 0;\n        _this.BonesPerMesh = 0;\n        _this.BONETEXTURE = false;\n        _this.BONES_VELOCITY_ENABLED = false;\n        _this.NONUNIFORMSCALING = false;\n        _this.MORPHTARGETS = false;\n        _this.MORPHTARGETS_NORMAL = false;\n        _this.MORPHTARGETS_TANGENT = false;\n        _this.MORPHTARGETS_UV = false;\n        _this.NUM_MORPH_INFLUENCERS = 0;\n        _this.MORPHTARGETS_TEXTURE = false;\n        _this.IMAGEPROCESSING = false;\n        _this.VIGNETTE = false;\n        _this.VIGNETTEBLENDMODEMULTIPLY = false;\n        _this.VIGNETTEBLENDMODEOPAQUE = false;\n        _this.TONEMAPPING = false;\n        _this.TONEMAPPING_ACES = false;\n        _this.CONTRAST = false;\n        _this.COLORCURVES = false;\n        _this.COLORGRADING = false;\n        _this.COLORGRADING3D = false;\n        _this.SAMPLER3DGREENDEPTH = false;\n        _this.SAMPLER3DBGRMAP = false;\n        _this.IMAGEPROCESSINGPOSTPROCESS = false;\n        _this.SKIPFINALCOLORCLAMP = false;\n        _this.EXPOSURE = false;\n        _this.MULTIVIEW = false;\n        _this.ORDER_INDEPENDENT_TRANSPARENCY = false;\n        _this.ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\n        _this.USEPHYSICALLIGHTFALLOFF = false;\n        _this.USEGLTFLIGHTFALLOFF = false;\n        _this.TWOSIDEDLIGHTING = false;\n        _this.SHADOWFLOAT = false;\n        _this.CLIPPLANE = false;\n        _this.CLIPPLANE2 = false;\n        _this.CLIPPLANE3 = false;\n        _this.CLIPPLANE4 = false;\n        _this.CLIPPLANE5 = false;\n        _this.CLIPPLANE6 = false;\n        _this.POINTSIZE = false;\n        _this.FOG = false;\n        _this.LOGARITHMICDEPTH = false;\n        _this.FORCENORMALFORWARD = false;\n        _this.SPECULARAA = false;\n        _this.UNLIT = false;\n        _this.DEBUGMODE = 0;\n        _this.rebuild();\n        return _this;\n    }\n    /**\n     * Resets the PBR Material defines.\n     */\n    PBRMaterialDefines.prototype.reset = function () {\n        _super.prototype.reset.call(this);\n        this.ALPHATESTVALUE = \"0.5\";\n        this.PBR = true;\n        this.NORMALXYSCALE = true;\n    };\n    return PBRMaterialDefines;\n}(MaterialDefines));\nexport { PBRMaterialDefines };\n/**\n * The Physically based material base class of BJS.\n *\n * This offers the main features of a standard PBR material.\n * For more information, please refer to the documentation :\n * https://doc.babylonjs.com/how_to/physically_based_rendering\n */\nvar PBRBaseMaterial = /** @class */ (function (_super) {\n    __extends(PBRBaseMaterial, _super);\n    /**\n     * Instantiates a new PBRMaterial instance.\n     *\n     * @param name The material name\n     * @param scene The scene the material will be use in.\n     */\n    function PBRBaseMaterial(name, scene) {\n        var _this = _super.call(this, name, scene) || this;\n        /**\n         * Intensity of the direct lights e.g. the four lights available in your scene.\n         * This impacts both the direct diffuse and specular highlights.\n         * @hidden\n         */\n        _this._directIntensity = 1.0;\n        /**\n         * Intensity of the emissive part of the material.\n         * This helps controlling the emissive effect without modifying the emissive color.\n         * @hidden\n         */\n        _this._emissiveIntensity = 1.0;\n        /**\n         * Intensity of the environment e.g. how much the environment will light the object\n         * either through harmonics for rough material or through the reflection for shiny ones.\n         * @hidden\n         */\n        _this._environmentIntensity = 1.0;\n        /**\n         * This is a special control allowing the reduction of the specular highlights coming from the\n         * four lights of the scene. Those highlights may not be needed in full environment lighting.\n         * @hidden\n         */\n        _this._specularIntensity = 1.0;\n        /**\n         * This stores the direct, emissive, environment, and specular light intensities into a Vector4.\n         */\n        _this._lightingInfos = new Vector4(_this._directIntensity, _this._emissiveIntensity, _this._environmentIntensity, _this._specularIntensity);\n        /**\n         * Debug Control allowing disabling the bump map on this material.\n         * @hidden\n         */\n        _this._disableBumpMap = false;\n        /**\n         * AKA Diffuse Texture in standard nomenclature.\n         * @hidden\n         */\n        _this._albedoTexture = null;\n        /**\n         * AKA Occlusion Texture in other nomenclature.\n         * @hidden\n         */\n        _this._ambientTexture = null;\n        /**\n         * AKA Occlusion Texture Intensity in other nomenclature.\n         * @hidden\n         */\n        _this._ambientTextureStrength = 1.0;\n        /**\n         * Defines how much the AO map is occluding the analytical lights (point spot...).\n         * 1 means it completely occludes it\n         * 0 mean it has no impact\n         * @hidden\n         */\n        _this._ambientTextureImpactOnAnalyticalLights = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS;\n        /**\n         * Stores the alpha values in a texture.\n         * @hidden\n         */\n        _this._opacityTexture = null;\n        /**\n         * Stores the reflection values in a texture.\n         * @hidden\n         */\n        _this._reflectionTexture = null;\n        /**\n         * Stores the emissive values in a texture.\n         * @hidden\n         */\n        _this._emissiveTexture = null;\n        /**\n         * AKA Specular texture in other nomenclature.\n         * @hidden\n         */\n        _this._reflectivityTexture = null;\n        /**\n         * Used to switch from specular/glossiness to metallic/roughness workflow.\n         * @hidden\n         */\n        _this._metallicTexture = null;\n        /**\n         * Specifies the metallic scalar of the metallic/roughness workflow.\n         * Can also be used to scale the metalness values of the metallic texture.\n         * @hidden\n         */\n        _this._metallic = null;\n        /**\n         * Specifies the roughness scalar of the metallic/roughness workflow.\n         * Can also be used to scale the roughness values of the metallic texture.\n         * @hidden\n         */\n        _this._roughness = null;\n        /**\n         * In metallic workflow, specifies an F0 factor to help configuring the material F0.\n         * By default the indexOfrefraction is used to compute F0;\n         *\n         * This is used as a factor against the default reflectance at normal incidence to tweak it.\n         *\n         * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor;\n         * F90 = metallicReflectanceColor;\n         * @hidden\n         */\n        _this._metallicF0Factor = 1;\n        /**\n         * In metallic workflow, specifies an F90 color to help configuring the material F90.\n         * By default the F90 is always 1;\n         *\n         * Please note that this factor is also used as a factor against the default reflectance at normal incidence.\n         *\n         * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor\n         * F90 = metallicReflectanceColor;\n         * @hidden\n         */\n        _this._metallicReflectanceColor = Color3.White();\n        /**\n         * Specifies that only the A channel from _metallicReflectanceTexture should be used.\n         * If false, both RGB and A channels will be used\n         * @hidden\n         */\n        _this._useOnlyMetallicFromMetallicReflectanceTexture = false;\n        /**\n         * Defines to store metallicReflectanceColor in RGB and metallicF0Factor in A\n         * This is multiply against the scalar values defined in the material.\n         * @hidden\n         */\n        _this._metallicReflectanceTexture = null;\n        /**\n         * Defines to store reflectanceColor in RGB\n         * This is multiplied against the scalar values defined in the material.\n         * If both _reflectanceTexture and _metallicReflectanceTexture textures are provided and _useOnlyMetallicFromMetallicReflectanceTexture\n         * is false, _metallicReflectanceTexture takes precedence and _reflectanceTexture is not used\n         * @hidden\n         */\n        _this._reflectanceTexture = null;\n        /**\n         * Used to enable roughness/glossiness fetch from a separate channel depending on the current mode.\n         * Gray Scale represents roughness in metallic mode and glossiness in specular mode.\n         * @hidden\n         */\n        _this._microSurfaceTexture = null;\n        /**\n         * Stores surface normal data used to displace a mesh in a texture.\n         * @hidden\n         */\n        _this._bumpTexture = null;\n        /**\n         * Stores the pre-calculated light information of a mesh in a texture.\n         * @hidden\n         */\n        _this._lightmapTexture = null;\n        /**\n         * The color of a material in ambient lighting.\n         * @hidden\n         */\n        _this._ambientColor = new Color3(0, 0, 0);\n        /**\n         * AKA Diffuse Color in other nomenclature.\n         * @hidden\n         */\n        _this._albedoColor = new Color3(1, 1, 1);\n        /**\n         * AKA Specular Color in other nomenclature.\n         * @hidden\n         */\n        _this._reflectivityColor = new Color3(1, 1, 1);\n        /**\n         * The color applied when light is reflected from a material.\n         * @hidden\n         */\n        _this._reflectionColor = new Color3(1, 1, 1);\n        /**\n         * The color applied when light is emitted from a material.\n         * @hidden\n         */\n        _this._emissiveColor = new Color3(0, 0, 0);\n        /**\n         * AKA Glossiness in other nomenclature.\n         * @hidden\n         */\n        _this._microSurface = 0.9;\n        /**\n         * Specifies that the material will use the light map as a show map.\n         * @hidden\n         */\n        _this._useLightmapAsShadowmap = false;\n        /**\n         * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\n         * makes the reflect vector face the model (under horizon).\n         * @hidden\n         */\n        _this._useHorizonOcclusion = true;\n        /**\n         * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\n         * too much the area relying on ambient texture to define their ambient occlusion.\n         * @hidden\n         */\n        _this._useRadianceOcclusion = true;\n        /**\n         * Specifies that the alpha is coming form the albedo channel alpha channel for alpha blending.\n         * @hidden\n         */\n        _this._useAlphaFromAlbedoTexture = false;\n        /**\n         * Specifies that the material will keeps the specular highlights over a transparent surface (only the most luminous ones).\n         * A car glass is a good example of that. When sun reflects on it you can not see what is behind.\n         * @hidden\n         */\n        _this._useSpecularOverAlpha = true;\n        /**\n         * Specifies if the reflectivity texture contains the glossiness information in its alpha channel.\n         * @hidden\n         */\n        _this._useMicroSurfaceFromReflectivityMapAlpha = false;\n        /**\n         * Specifies if the metallic texture contains the roughness information in its alpha channel.\n         * @hidden\n         */\n        _this._useRoughnessFromMetallicTextureAlpha = true;\n        /**\n         * Specifies if the metallic texture contains the roughness information in its green channel.\n         * @hidden\n         */\n        _this._useRoughnessFromMetallicTextureGreen = false;\n        /**\n         * Specifies if the metallic texture contains the metallness information in its blue channel.\n         * @hidden\n         */\n        _this._useMetallnessFromMetallicTextureBlue = false;\n        /**\n         * Specifies if the metallic texture contains the ambient occlusion information in its red channel.\n         * @hidden\n         */\n        _this._useAmbientOcclusionFromMetallicTextureRed = false;\n        /**\n         * Specifies if the ambient texture contains the ambient occlusion information in its red channel only.\n         * @hidden\n         */\n        _this._useAmbientInGrayScale = false;\n        /**\n         * In case the reflectivity map does not contain the microsurface information in its alpha channel,\n         * The material will try to infer what glossiness each pixel should be.\n         * @hidden\n         */\n        _this._useAutoMicroSurfaceFromReflectivityMap = false;\n        /**\n         * Defines the  falloff type used in this material.\n         * It by default is Physical.\n         * @hidden\n         */\n        _this._lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL;\n        /**\n         * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\n         * A car glass is a good example of that. When the street lights reflects on it you can not see what is behind.\n         * @hidden\n         */\n        _this._useRadianceOverAlpha = true;\n        /**\n         * Allows using an object space normal map (instead of tangent space).\n         * @hidden\n         */\n        _this._useObjectSpaceNormalMap = false;\n        /**\n         * Allows using the bump map in parallax mode.\n         * @hidden\n         */\n        _this._useParallax = false;\n        /**\n         * Allows using the bump map in parallax occlusion mode.\n         * @hidden\n         */\n        _this._useParallaxOcclusion = false;\n        /**\n         * Controls the scale bias of the parallax mode.\n         * @hidden\n         */\n        _this._parallaxScaleBias = 0.05;\n        /**\n         * If sets to true, disables all the lights affecting the material.\n         * @hidden\n         */\n        _this._disableLighting = false;\n        /**\n         * Number of Simultaneous lights allowed on the material.\n         * @hidden\n         */\n        _this._maxSimultaneousLights = 4;\n        /**\n         * If sets to true, x component of normal map value will be inverted (x = 1.0 - x).\n         * @hidden\n         */\n        _this._invertNormalMapX = false;\n        /**\n         * If sets to true, y component of normal map value will be inverted (y = 1.0 - y).\n         * @hidden\n         */\n        _this._invertNormalMapY = false;\n        /**\n         * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\n         * @hidden\n         */\n        _this._twoSidedLighting = false;\n        /**\n         * Defines the alpha limits in alpha test mode.\n         * @hidden\n         */\n        _this._alphaCutOff = 0.4;\n        /**\n         * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\n         * @hidden\n         */\n        _this._forceAlphaTest = false;\n        /**\n         * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n         * And/Or occlude the blended part. (alpha is converted to gamma to compute the fresnel)\n         * @hidden\n         */\n        _this._useAlphaFresnel = false;\n        /**\n         * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n         * And/Or occlude the blended part. (alpha stays linear to compute the fresnel)\n         * @hidden\n         */\n        _this._useLinearAlphaFresnel = false;\n        /**\n         * Specifies the environment BRDF texture used to compute the scale and offset roughness values\n         * from cos theta and roughness:\n         * http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\n         * @hidden\n         */\n        _this._environmentBRDFTexture = null;\n        /**\n         * Force the shader to compute irradiance in the fragment shader in order to take bump in account.\n         * @hidden\n         */\n        _this._forceIrradianceInFragment = false;\n        _this._realTimeFiltering = false;\n        _this._realTimeFilteringQuality = 8;\n        /**\n         * Force normal to face away from face.\n         * @hidden\n         */\n        _this._forceNormalForward = false;\n        /**\n         * Enables specular anti aliasing in the PBR shader.\n         * It will both interacts on the Geometry for analytical and IBL lighting.\n         * It also prefilter the roughness map based on the bump values.\n         * @hidden\n         */\n        _this._enableSpecularAntiAliasing = false;\n        /**\n         * Keep track of the image processing observer to allow dispose and replace.\n         */\n        _this._imageProcessingObserver = null;\n        /**\n         * Stores the available render targets.\n         */\n        _this._renderTargets = new SmartArray(16);\n        /**\n         * Sets the global ambient color for the material used in lighting calculations.\n         */\n        _this._globalAmbientColor = new Color3(0, 0, 0);\n        /**\n         * Enables the use of logarithmic depth buffers, which is good for wide depth buffers.\n         */\n        _this._useLogarithmicDepth = false;\n        /**\n         * If set to true, no lighting calculations will be applied.\n         */\n        _this._unlit = false;\n        _this._debugMode = 0;\n        /**\n         * @hidden\n         * This is reserved for the inspector.\n         * Defines the material debug mode.\n         * It helps seeing only some components of the material while troubleshooting.\n         */\n        _this.debugMode = 0;\n        /**\n         * @hidden\n         * This is reserved for the inspector.\n         * Specify from where on screen the debug mode should start.\n         * The value goes from -1 (full screen) to 1 (not visible)\n         * It helps with side by side comparison against the final render\n         * This defaults to -1\n         */\n        _this._debugLimit = -1;\n        /**\n         * @hidden\n         * This is reserved for the inspector.\n         * As the default viewing range might not be enough (if the ambient is really small for instance)\n         * You can use the factor to better multiply the final value.\n         */\n        _this._debugFactor = 1;\n        _this._cacheHasRenderTargetTextures = false;\n        _this.brdf = new PBRBRDFConfiguration(_this);\n        _this.clearCoat = new PBRClearCoatConfiguration(_this);\n        _this.iridescence = new PBRIridescenceConfiguration(_this);\n        _this.anisotropy = new PBRAnisotropicConfiguration(_this);\n        _this.sheen = new PBRSheenConfiguration(_this);\n        _this.subSurface = new PBRSubSurfaceConfiguration(_this);\n        _this.detailMap = new DetailMapConfiguration(_this);\n        // Setup the default processing configuration to the scene.\n        _this._attachImageProcessingConfiguration(null);\n        _this.getRenderTargetTextures = function () {\n            _this._renderTargets.reset();\n            if (MaterialFlags.ReflectionTextureEnabled && _this._reflectionTexture && _this._reflectionTexture.isRenderTarget) {\n                _this._renderTargets.push(_this._reflectionTexture);\n            }\n            _this._eventInfo.renderTargets = _this._renderTargets;\n            _this._callbackPluginEventFillRenderTargetTextures(_this._eventInfo);\n            return _this._renderTargets;\n        };\n        _this._environmentBRDFTexture = GetEnvironmentBRDFTexture(_this.getScene());\n        _this.prePassConfiguration = new PrePassConfiguration();\n        return _this;\n    }\n    Object.defineProperty(PBRBaseMaterial.prototype, \"realTimeFiltering\", {\n        /**\n         * Enables realtime filtering on the texture.\n         */\n        get: function () {\n            return this._realTimeFiltering;\n        },\n        set: function (b) {\n            this._realTimeFiltering = b;\n            this.markAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRBaseMaterial.prototype, \"realTimeFilteringQuality\", {\n        /**\n         * Quality switch for realtime filtering\n         */\n        get: function () {\n            return this._realTimeFilteringQuality;\n        },\n        set: function (n) {\n            this._realTimeFilteringQuality = n;\n            this.markAsDirty(1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRBaseMaterial.prototype, \"canRenderToMRT\", {\n        /**\n         * Can this material render to several textures at once\n         */\n        get: function () {\n            return true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Attaches a new image processing configuration to the PBR Material.\n     * @param configuration\n     */\n    PBRBaseMaterial.prototype._attachImageProcessingConfiguration = function (configuration) {\n        var _this = this;\n        if (configuration === this._imageProcessingConfiguration) {\n            return;\n        }\n        // Detaches observer.\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        // Pick the scene configuration if needed.\n        if (!configuration) {\n            this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\n        }\n        else {\n            this._imageProcessingConfiguration = configuration;\n        }\n        // Attaches observer.\n        if (this._imageProcessingConfiguration) {\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(function () {\n                _this._markAllSubMeshesAsImageProcessingDirty();\n            });\n        }\n    };\n    Object.defineProperty(PBRBaseMaterial.prototype, \"hasRenderTargetTextures\", {\n        /**\n         * Gets a boolean indicating that current material needs to register RTT\n         */\n        get: function () {\n            if (MaterialFlags.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n                return true;\n            }\n            return this._cacheHasRenderTargetTextures;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRBaseMaterial.prototype, \"isPrePassCapable\", {\n        /**\n         * Can this material render to prepass\n         */\n        get: function () {\n            return !this.disableDepthWrite;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the name of the material class.\n     */\n    PBRBaseMaterial.prototype.getClassName = function () {\n        return \"PBRBaseMaterial\";\n    };\n    Object.defineProperty(PBRBaseMaterial.prototype, \"useLogarithmicDepth\", {\n        /**\n         * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\n         */\n        get: function () {\n            return this._useLogarithmicDepth;\n        },\n        /**\n         * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\n         */\n        set: function (value) {\n            this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRBaseMaterial.prototype, \"_disableAlphaBlending\", {\n        /**\n         * Returns true if alpha blending should be disabled.\n         */\n        get: function () {\n            var _a;\n            return (this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_OPAQUE ||\n                this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST ||\n                ((_a = this.subSurface) === null || _a === void 0 ? void 0 : _a.disableAlphaBlending));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Specifies whether or not this material should be rendered in alpha blend mode.\n     */\n    PBRBaseMaterial.prototype.needAlphaBlending = function () {\n        if (this._disableAlphaBlending) {\n            return false;\n        }\n        return this.alpha < 1.0 || this._opacityTexture != null || this._shouldUseAlphaFromAlbedoTexture();\n    };\n    /**\n     * Specifies whether or not this material should be rendered in alpha test mode.\n     */\n    PBRBaseMaterial.prototype.needAlphaTesting = function () {\n        var _a;\n        if (this._forceAlphaTest) {\n            return true;\n        }\n        if ((_a = this.subSurface) === null || _a === void 0 ? void 0 : _a.disableAlphaBlending) {\n            return false;\n        }\n        return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST);\n    };\n    /**\n     * Specifies whether or not the alpha value of the albedo texture should be used for alpha blending.\n     */\n    PBRBaseMaterial.prototype._shouldUseAlphaFromAlbedoTexture = function () {\n        return this._albedoTexture != null && this._albedoTexture.hasAlpha && this._useAlphaFromAlbedoTexture && this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE;\n    };\n    /**\n     * Specifies whether or not there is a usable alpha channel for transparency.\n     */\n    PBRBaseMaterial.prototype._hasAlphaChannel = function () {\n        return (this._albedoTexture != null && this._albedoTexture.hasAlpha) || this._opacityTexture != null;\n    };\n    /**\n     * Gets the texture used for the alpha test.\n     */\n    PBRBaseMaterial.prototype.getAlphaTestTexture = function () {\n        return this._albedoTexture;\n    };\n    /**\n     * Specifies that the submesh is ready to be used.\n     * @param mesh - BJS mesh.\n     * @param subMesh - A submesh of the BJS mesh.  Used to check if it is ready.\n     * @param useInstances - Specifies that instances should be used.\n     * @returns - boolean indicating that the submesh is ready or not.\n     */\n    PBRBaseMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh, useInstances) {\n        if (!this._uniformBufferLayoutBuilt) {\n            this.buildUniformLayout();\n        }\n        if (subMesh.effect && this.isFrozen) {\n            if (subMesh.effect._wasPreviouslyReady) {\n                return true;\n            }\n        }\n        if (!subMesh.materialDefines) {\n            this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\n            subMesh.materialDefines = new PBRMaterialDefines(this._eventInfo.defineNames);\n        }\n        var defines = subMesh.materialDefines;\n        if (this._isReadyForSubMesh(subMesh)) {\n            return true;\n        }\n        var scene = this.getScene();\n        var engine = scene.getEngine();\n        if (defines._areTexturesDirty) {\n            this._eventInfo.hasRenderTargetTextures = false;\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\n            if (scene.texturesEnabled) {\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n                    if (!this._albedoTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n                    if (!this._ambientTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n                    if (!this._opacityTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n                var reflectionTexture = this._getReflectionTexture();\n                if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n                    if (!reflectionTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                    if (reflectionTexture.irradianceTexture && !reflectionTexture.irradianceTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n                    if (!this._lightmapTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n                    if (!this._emissiveTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n                if (MaterialFlags.SpecularTextureEnabled) {\n                    if (this._metallicTexture) {\n                        if (!this._metallicTexture.isReadyOrNotBlocking()) {\n                            return false;\n                        }\n                    }\n                    else if (this._reflectivityTexture) {\n                        if (!this._reflectivityTexture.isReadyOrNotBlocking()) {\n                            return false;\n                        }\n                    }\n                    if (this._metallicReflectanceTexture) {\n                        if (!this._metallicReflectanceTexture.isReadyOrNotBlocking()) {\n                            return false;\n                        }\n                    }\n                    if (this._reflectanceTexture) {\n                        if (!this._reflectanceTexture.isReadyOrNotBlocking()) {\n                            return false;\n                        }\n                    }\n                    if (this._microSurfaceTexture) {\n                        if (!this._microSurfaceTexture.isReadyOrNotBlocking()) {\n                            return false;\n                        }\n                    }\n                }\n                if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n                    // Bump texture cannot be not blocking.\n                    if (!this._bumpTexture.isReady()) {\n                        return false;\n                    }\n                }\n                if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n                    // This is blocking.\n                    if (!this._environmentBRDFTexture.isReady()) {\n                        return false;\n                    }\n                }\n            }\n        }\n        this._eventInfo.isReadyForSubMesh = true;\n        this._eventInfo.defines = defines;\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\n        if (!this._eventInfo.isReadyForSubMesh) {\n            return false;\n        }\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n            if (!this._imageProcessingConfiguration.isReady()) {\n                return false;\n            }\n        }\n        if (!engine.getCaps().standardDerivatives && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n            mesh.createNormals(true);\n            Logger.Warn(\"PBRMaterial: Normals have been created for the mesh: \" + mesh.name);\n        }\n        var previousEffect = subMesh.effect;\n        var lightDisposed = defines._areLightsDisposed;\n        var effect = this._prepareEffect(mesh, defines, this.onCompiled, this.onError, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\n        if (effect) {\n            if (this._onEffectCreatedObservable) {\n                onCreatedEffectParameters.effect = effect;\n                onCreatedEffectParameters.subMesh = subMesh;\n                this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n            }\n            // Use previous effect while new one is compiling\n            if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\n                effect = previousEffect;\n                defines.markAsUnprocessed();\n                if (lightDisposed) {\n                    // re register in case it takes more than one frame.\n                    defines._areLightsDisposed = true;\n                    return false;\n                }\n            }\n            else {\n                scene.resetCachedMaterial();\n                subMesh.setEffect(effect, defines, this._materialContext);\n            }\n        }\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\n            return false;\n        }\n        defines._renderId = scene.getRenderId();\n        subMesh.effect._wasPreviouslyReady = true;\n        return true;\n    };\n    /**\n     * Specifies if the material uses metallic roughness workflow.\n     * @returns boolean specifying if the material uses metallic roughness workflow.\n     */\n    PBRBaseMaterial.prototype.isMetallicWorkflow = function () {\n        if (this._metallic != null || this._roughness != null || this._metallicTexture) {\n            return true;\n        }\n        return false;\n    };\n    PBRBaseMaterial.prototype._prepareEffect = function (mesh, defines, onCompiled, onError, useInstances, useClipPlane, useThinInstances) {\n        if (onCompiled === void 0) { onCompiled = null; }\n        if (onError === void 0) { onError = null; }\n        if (useInstances === void 0) { useInstances = null; }\n        if (useClipPlane === void 0) { useClipPlane = null; }\n        this._prepareDefines(mesh, defines, useInstances, useClipPlane, useThinInstances);\n        if (!defines.isDirty) {\n            return null;\n        }\n        defines.markAsProcessed();\n        var scene = this.getScene();\n        var engine = scene.getEngine();\n        // Fallbacks\n        var fallbacks = new EffectFallbacks();\n        var fallbackRank = 0;\n        if (defines.USESPHERICALINVERTEX) {\n            fallbacks.addFallback(fallbackRank++, \"USESPHERICALINVERTEX\");\n        }\n        if (defines.FOG) {\n            fallbacks.addFallback(fallbackRank, \"FOG\");\n        }\n        if (defines.SPECULARAA) {\n            fallbacks.addFallback(fallbackRank, \"SPECULARAA\");\n        }\n        if (defines.POINTSIZE) {\n            fallbacks.addFallback(fallbackRank, \"POINTSIZE\");\n        }\n        if (defines.LOGARITHMICDEPTH) {\n            fallbacks.addFallback(fallbackRank, \"LOGARITHMICDEPTH\");\n        }\n        if (defines.PARALLAX) {\n            fallbacks.addFallback(fallbackRank, \"PARALLAX\");\n        }\n        if (defines.PARALLAXOCCLUSION) {\n            fallbacks.addFallback(fallbackRank++, \"PARALLAXOCCLUSION\");\n        }\n        if (defines.ENVIRONMENTBRDF) {\n            fallbacks.addFallback(fallbackRank++, \"ENVIRONMENTBRDF\");\n        }\n        if (defines.TANGENT) {\n            fallbacks.addFallback(fallbackRank++, \"TANGENT\");\n        }\n        if (defines.BUMP) {\n            fallbacks.addFallback(fallbackRank++, \"BUMP\");\n        }\n        fallbackRank = MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights, fallbackRank++);\n        if (defines.SPECULARTERM) {\n            fallbacks.addFallback(fallbackRank++, \"SPECULARTERM\");\n        }\n        if (defines.USESPHERICALFROMREFLECTIONMAP) {\n            fallbacks.addFallback(fallbackRank++, \"USESPHERICALFROMREFLECTIONMAP\");\n        }\n        if (defines.USEIRRADIANCEMAP) {\n            fallbacks.addFallback(fallbackRank++, \"USEIRRADIANCEMAP\");\n        }\n        if (defines.LIGHTMAP) {\n            fallbacks.addFallback(fallbackRank++, \"LIGHTMAP\");\n        }\n        if (defines.NORMAL) {\n            fallbacks.addFallback(fallbackRank++, \"NORMAL\");\n        }\n        if (defines.AMBIENT) {\n            fallbacks.addFallback(fallbackRank++, \"AMBIENT\");\n        }\n        if (defines.EMISSIVE) {\n            fallbacks.addFallback(fallbackRank++, \"EMISSIVE\");\n        }\n        if (defines.VERTEXCOLOR) {\n            fallbacks.addFallback(fallbackRank++, \"VERTEXCOLOR\");\n        }\n        if (defines.MORPHTARGETS) {\n            fallbacks.addFallback(fallbackRank++, \"MORPHTARGETS\");\n        }\n        if (defines.MULTIVIEW) {\n            fallbacks.addFallback(0, \"MULTIVIEW\");\n        }\n        //Attributes\n        var attribs = [VertexBuffer.PositionKind];\n        if (defines.NORMAL) {\n            attribs.push(VertexBuffer.NormalKind);\n        }\n        if (defines.TANGENT) {\n            attribs.push(VertexBuffer.TangentKind);\n        }\n        for (var i = 1; i <= 6; ++i) {\n            if (defines[\"UV\" + i]) {\n                attribs.push(\"uv\".concat(i === 1 ? \"\" : i));\n            }\n        }\n        if (defines.VERTEXCOLOR) {\n            attribs.push(VertexBuffer.ColorKind);\n        }\n        if (defines.INSTANCESCOLOR) {\n            attribs.push(VertexBuffer.ColorInstanceKind);\n        }\n        MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n        MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n        MaterialHelper.PrepareAttributesForMorphTargets(attribs, mesh, defines);\n        MaterialHelper.PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\n        var shaderName = \"pbr\";\n        var uniforms = [\n            \"world\",\n            \"view\",\n            \"viewProjection\",\n            \"vEyePosition\",\n            \"vLightsType\",\n            \"vAmbientColor\",\n            \"vAlbedoColor\",\n            \"vReflectivityColor\",\n            \"vMetallicReflectanceFactors\",\n            \"vEmissiveColor\",\n            \"visibility\",\n            \"vReflectionColor\",\n            \"vFogInfos\",\n            \"vFogColor\",\n            \"pointSize\",\n            \"vAlbedoInfos\",\n            \"vAmbientInfos\",\n            \"vOpacityInfos\",\n            \"vReflectionInfos\",\n            \"vReflectionPosition\",\n            \"vReflectionSize\",\n            \"vEmissiveInfos\",\n            \"vReflectivityInfos\",\n            \"vReflectionFilteringInfo\",\n            \"vMetallicReflectanceInfos\",\n            \"vReflectanceInfos\",\n            \"vMicroSurfaceSamplerInfos\",\n            \"vBumpInfos\",\n            \"vLightmapInfos\",\n            \"mBones\",\n            \"vClipPlane\",\n            \"vClipPlane2\",\n            \"vClipPlane3\",\n            \"vClipPlane4\",\n            \"vClipPlane5\",\n            \"vClipPlane6\",\n            \"albedoMatrix\",\n            \"ambientMatrix\",\n            \"opacityMatrix\",\n            \"reflectionMatrix\",\n            \"emissiveMatrix\",\n            \"reflectivityMatrix\",\n            \"normalMatrix\",\n            \"microSurfaceSamplerMatrix\",\n            \"bumpMatrix\",\n            \"lightmapMatrix\",\n            \"metallicReflectanceMatrix\",\n            \"reflectanceMatrix\",\n            \"vLightingIntensity\",\n            \"logarithmicDepthConstant\",\n            \"vSphericalX\",\n            \"vSphericalY\",\n            \"vSphericalZ\",\n            \"vSphericalXX_ZZ\",\n            \"vSphericalYY_ZZ\",\n            \"vSphericalZZ\",\n            \"vSphericalXY\",\n            \"vSphericalYZ\",\n            \"vSphericalZX\",\n            \"vSphericalL00\",\n            \"vSphericalL1_1\",\n            \"vSphericalL10\",\n            \"vSphericalL11\",\n            \"vSphericalL2_2\",\n            \"vSphericalL2_1\",\n            \"vSphericalL20\",\n            \"vSphericalL21\",\n            \"vSphericalL22\",\n            \"vReflectionMicrosurfaceInfos\",\n            \"vTangentSpaceParams\",\n            \"boneTextureWidth\",\n            \"vDebugMode\",\n            \"morphTargetTextureInfo\",\n            \"morphTargetTextureIndices\",\n        ];\n        var samplers = [\n            \"albedoSampler\",\n            \"reflectivitySampler\",\n            \"ambientSampler\",\n            \"emissiveSampler\",\n            \"bumpSampler\",\n            \"lightmapSampler\",\n            \"opacitySampler\",\n            \"reflectionSampler\",\n            \"reflectionSamplerLow\",\n            \"reflectionSamplerHigh\",\n            \"irradianceSampler\",\n            \"microSurfaceSampler\",\n            \"environmentBrdfSampler\",\n            \"boneSampler\",\n            \"metallicReflectanceSampler\",\n            \"reflectanceSampler\",\n            \"morphTargets\",\n            \"oitDepthSampler\",\n            \"oitFrontColorSampler\",\n        ];\n        var uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\n        this._eventInfo.fallbacks = fallbacks;\n        this._eventInfo.fallbackRank = fallbackRank;\n        this._eventInfo.defines = defines;\n        this._eventInfo.uniforms = uniforms;\n        this._eventInfo.attributes = attribs;\n        this._eventInfo.samplers = samplers;\n        this._eventInfo.uniformBuffersNames = uniformBuffers;\n        this._eventInfo.customCode = undefined;\n        this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareEffect, this._eventInfo);\n        PrePassConfiguration.AddUniforms(uniforms);\n        PrePassConfiguration.AddSamplers(samplers);\n        if (ImageProcessingConfiguration) {\n            ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\n            ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\n        }\n        MaterialHelper.PrepareUniformsAndSamplersList({\n            uniformsNames: uniforms,\n            uniformBuffersNames: uniformBuffers,\n            samplers: samplers,\n            defines: defines,\n            maxSimultaneousLights: this._maxSimultaneousLights,\n        });\n        var csnrOptions = {};\n        if (this.customShaderNameResolve) {\n            shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\n        }\n        var join = defines.toString();\n        return engine.createEffect(shaderName, {\n            attributes: attribs,\n            uniformsNames: uniforms,\n            uniformBuffersNames: uniformBuffers,\n            samplers: samplers,\n            defines: join,\n            fallbacks: fallbacks,\n            onCompiled: onCompiled,\n            onError: onError,\n            indexParameters: { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS },\n            processFinalCode: csnrOptions.processFinalCode,\n            processCodeAfterIncludes: this._eventInfo.customCode,\n            multiTarget: defines.PREPASS,\n        }, engine);\n    };\n    PBRBaseMaterial.prototype._prepareDefines = function (mesh, defines, useInstances, useClipPlane, useThinInstances) {\n        var _a;\n        if (useInstances === void 0) { useInstances = null; }\n        if (useClipPlane === void 0) { useClipPlane = null; }\n        if (useThinInstances === void 0) { useThinInstances = false; }\n        var scene = this.getScene();\n        var engine = scene.getEngine();\n        // Lights\n        MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\n        defines._needNormals = true;\n        // Multiview\n        MaterialHelper.PrepareDefinesForMultiview(scene, defines);\n        // PrePass\n        var oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\n        MaterialHelper.PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\n        // Order independant transparency\n        MaterialHelper.PrepareDefinesForOIT(scene, defines, oit);\n        // Textures\n        defines.METALLICWORKFLOW = this.isMetallicWorkflow();\n        if (defines._areTexturesDirty) {\n            defines._needUVs = false;\n            if (scene.texturesEnabled) {\n                if (scene.getEngine().getCaps().textureLOD) {\n                    defines.LODBASEDMICROSFURACE = true;\n                }\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n                    MaterialHelper.PrepareDefinesForMergedUV(this._albedoTexture, defines, \"ALBEDO\");\n                    defines.GAMMAALBEDO = this._albedoTexture.gammaSpace;\n                }\n                else {\n                    defines.ALBEDO = false;\n                }\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n                    MaterialHelper.PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\n                    defines.AMBIENTINGRAYSCALE = this._useAmbientInGrayScale;\n                }\n                else {\n                    defines.AMBIENT = false;\n                }\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n                    MaterialHelper.PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\n                    defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\n                }\n                else {\n                    defines.OPACITY = false;\n                }\n                var reflectionTexture = this._getReflectionTexture();\n                if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n                    defines.REFLECTION = true;\n                    defines.GAMMAREFLECTION = reflectionTexture.gammaSpace;\n                    defines.RGBDREFLECTION = reflectionTexture.isRGBD;\n                    defines.LODINREFLECTIONALPHA = reflectionTexture.lodLevelInAlpha;\n                    defines.LINEARSPECULARREFLECTION = reflectionTexture.linearSpecularLOD;\n                    if (this.realTimeFiltering && this.realTimeFilteringQuality > 0) {\n                        defines.NUM_SAMPLES = \"\" + this.realTimeFilteringQuality;\n                        if (engine._features.needTypeSuffixInShaderConstants) {\n                            defines.NUM_SAMPLES = defines.NUM_SAMPLES + \"u\";\n                        }\n                        defines.REALTIME_FILTERING = true;\n                    }\n                    else {\n                        defines.REALTIME_FILTERING = false;\n                    }\n                    if (reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE) {\n                        defines.INVERTCUBICMAP = true;\n                    }\n                    defines.REFLECTIONMAP_3D = reflectionTexture.isCube;\n                    defines.REFLECTIONMAP_OPPOSITEZ = defines.REFLECTIONMAP_3D && this.getScene().useRightHandedSystem ? !reflectionTexture.invertZ : reflectionTexture.invertZ;\n                    defines.REFLECTIONMAP_CUBIC = false;\n                    defines.REFLECTIONMAP_EXPLICIT = false;\n                    defines.REFLECTIONMAP_PLANAR = false;\n                    defines.REFLECTIONMAP_PROJECTION = false;\n                    defines.REFLECTIONMAP_SKYBOX = false;\n                    defines.REFLECTIONMAP_SPHERICAL = false;\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n                    defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n                    switch (reflectionTexture.coordinatesMode) {\n                        case Texture.EXPLICIT_MODE:\n                            defines.REFLECTIONMAP_EXPLICIT = true;\n                            break;\n                        case Texture.PLANAR_MODE:\n                            defines.REFLECTIONMAP_PLANAR = true;\n                            break;\n                        case Texture.PROJECTION_MODE:\n                            defines.REFLECTIONMAP_PROJECTION = true;\n                            break;\n                        case Texture.SKYBOX_MODE:\n                            defines.REFLECTIONMAP_SKYBOX = true;\n                            break;\n                        case Texture.SPHERICAL_MODE:\n                            defines.REFLECTIONMAP_SPHERICAL = true;\n                            break;\n                        case Texture.EQUIRECTANGULAR_MODE:\n                            defines.REFLECTIONMAP_EQUIRECTANGULAR = true;\n                            break;\n                        case Texture.FIXED_EQUIRECTANGULAR_MODE:\n                            defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = true;\n                            break;\n                        case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\n                            defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = true;\n                            break;\n                        case Texture.CUBIC_MODE:\n                        case Texture.INVCUBIC_MODE:\n                        default:\n                            defines.REFLECTIONMAP_CUBIC = true;\n                            defines.USE_LOCAL_REFLECTIONMAP_CUBIC = reflectionTexture.boundingBoxSize ? true : false;\n                            break;\n                    }\n                    if (reflectionTexture.coordinatesMode !== Texture.SKYBOX_MODE) {\n                        if (reflectionTexture.irradianceTexture) {\n                            defines.USEIRRADIANCEMAP = true;\n                            defines.USESPHERICALFROMREFLECTIONMAP = false;\n                        }\n                        // Assume using spherical polynomial if the reflection texture is a cube map\n                        else if (reflectionTexture.isCube) {\n                            defines.USESPHERICALFROMREFLECTIONMAP = true;\n                            defines.USEIRRADIANCEMAP = false;\n                            if (this._forceIrradianceInFragment || this.realTimeFiltering || scene.getEngine().getCaps().maxVaryingVectors <= 8) {\n                                defines.USESPHERICALINVERTEX = false;\n                            }\n                            else {\n                                defines.USESPHERICALINVERTEX = true;\n                            }\n                        }\n                    }\n                }\n                else {\n                    defines.REFLECTION = false;\n                    defines.REFLECTIONMAP_3D = false;\n                    defines.REFLECTIONMAP_SPHERICAL = false;\n                    defines.REFLECTIONMAP_PLANAR = false;\n                    defines.REFLECTIONMAP_CUBIC = false;\n                    defines.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\n                    defines.REFLECTIONMAP_PROJECTION = false;\n                    defines.REFLECTIONMAP_SKYBOX = false;\n                    defines.REFLECTIONMAP_EXPLICIT = false;\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n                    defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n                    defines.INVERTCUBICMAP = false;\n                    defines.USESPHERICALFROMREFLECTIONMAP = false;\n                    defines.USEIRRADIANCEMAP = false;\n                    defines.USESPHERICALINVERTEX = false;\n                    defines.REFLECTIONMAP_OPPOSITEZ = false;\n                    defines.LODINREFLECTIONALPHA = false;\n                    defines.GAMMAREFLECTION = false;\n                    defines.RGBDREFLECTION = false;\n                    defines.LINEARSPECULARREFLECTION = false;\n                }\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n                    MaterialHelper.PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\n                    defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\n                    defines.GAMMALIGHTMAP = this._lightmapTexture.gammaSpace;\n                    defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\n                }\n                else {\n                    defines.LIGHTMAP = false;\n                }\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n                    MaterialHelper.PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\n                    defines.GAMMAEMISSIVE = this._emissiveTexture.gammaSpace;\n                }\n                else {\n                    defines.EMISSIVE = false;\n                }\n                if (MaterialFlags.SpecularTextureEnabled) {\n                    if (this._metallicTexture) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._metallicTexture, defines, \"REFLECTIVITY\");\n                        defines.ROUGHNESSSTOREINMETALMAPALPHA = this._useRoughnessFromMetallicTextureAlpha;\n                        defines.ROUGHNESSSTOREINMETALMAPGREEN = !this._useRoughnessFromMetallicTextureAlpha && this._useRoughnessFromMetallicTextureGreen;\n                        defines.METALLNESSSTOREINMETALMAPBLUE = this._useMetallnessFromMetallicTextureBlue;\n                        defines.AOSTOREINMETALMAPRED = this._useAmbientOcclusionFromMetallicTextureRed;\n                        defines.REFLECTIVITY_GAMMA = false;\n                    }\n                    else if (this._reflectivityTexture) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._reflectivityTexture, defines, \"REFLECTIVITY\");\n                        defines.MICROSURFACEFROMREFLECTIVITYMAP = this._useMicroSurfaceFromReflectivityMapAlpha;\n                        defines.MICROSURFACEAUTOMATIC = this._useAutoMicroSurfaceFromReflectivityMap;\n                        defines.REFLECTIVITY_GAMMA = this._reflectivityTexture.gammaSpace;\n                    }\n                    else {\n                        defines.REFLECTIVITY = false;\n                    }\n                    if (this._metallicReflectanceTexture || this._reflectanceTexture) {\n                        var identicalTextures = this._metallicReflectanceTexture !== null &&\n                            this._metallicReflectanceTexture._texture === ((_a = this._reflectanceTexture) === null || _a === void 0 ? void 0 : _a._texture) &&\n                            this._metallicReflectanceTexture.checkTransformsAreIdentical(this._reflectanceTexture);\n                        defines.METALLIC_REFLECTANCE_USE_ALPHA_ONLY = this._useOnlyMetallicFromMetallicReflectanceTexture && !identicalTextures;\n                        if (this._metallicReflectanceTexture) {\n                            MaterialHelper.PrepareDefinesForMergedUV(this._metallicReflectanceTexture, defines, \"METALLIC_REFLECTANCE\");\n                            defines.METALLIC_REFLECTANCE_GAMMA = this._metallicReflectanceTexture.gammaSpace;\n                        }\n                        else {\n                            defines.METALLIC_REFLECTANCE = false;\n                        }\n                        if (this._reflectanceTexture &&\n                            !identicalTextures &&\n                            (!this._metallicReflectanceTexture || (this._metallicReflectanceTexture && this._useOnlyMetallicFromMetallicReflectanceTexture))) {\n                            MaterialHelper.PrepareDefinesForMergedUV(this._reflectanceTexture, defines, \"REFLECTANCE\");\n                            defines.REFLECTANCE_GAMMA = this._reflectanceTexture.gammaSpace;\n                        }\n                        else {\n                            defines.REFLECTANCE = false;\n                        }\n                    }\n                    else {\n                        defines.METALLIC_REFLECTANCE = false;\n                        defines.REFLECTANCE = false;\n                    }\n                    if (this._microSurfaceTexture) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._microSurfaceTexture, defines, \"MICROSURFACEMAP\");\n                    }\n                    else {\n                        defines.MICROSURFACEMAP = false;\n                    }\n                }\n                else {\n                    defines.REFLECTIVITY = false;\n                    defines.MICROSURFACEMAP = false;\n                }\n                if (scene.getEngine().getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n                    MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\n                    if (this._useParallax && this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n                        defines.PARALLAX = true;\n                        defines.PARALLAXOCCLUSION = !!this._useParallaxOcclusion;\n                    }\n                    else {\n                        defines.PARALLAX = false;\n                    }\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\n                }\n                else {\n                    defines.BUMP = false;\n                }\n                if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n                    defines.ENVIRONMENTBRDF = true;\n                    defines.ENVIRONMENTBRDF_RGBD = this._environmentBRDFTexture.isRGBD;\n                }\n                else {\n                    defines.ENVIRONMENTBRDF = false;\n                    defines.ENVIRONMENTBRDF_RGBD = false;\n                }\n                if (this._shouldUseAlphaFromAlbedoTexture()) {\n                    defines.ALPHAFROMALBEDO = true;\n                }\n                else {\n                    defines.ALPHAFROMALBEDO = false;\n                }\n            }\n            defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\n            if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\n                defines.USEPHYSICALLIGHTFALLOFF = false;\n                defines.USEGLTFLIGHTFALLOFF = false;\n            }\n            else if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\n                defines.USEPHYSICALLIGHTFALLOFF = false;\n                defines.USEGLTFLIGHTFALLOFF = true;\n            }\n            else {\n                defines.USEPHYSICALLIGHTFALLOFF = true;\n                defines.USEGLTFLIGHTFALLOFF = false;\n            }\n            defines.RADIANCEOVERALPHA = this._useRadianceOverAlpha;\n            if (!this.backFaceCulling && this._twoSidedLighting) {\n                defines.TWOSIDEDLIGHTING = true;\n            }\n            else {\n                defines.TWOSIDEDLIGHTING = false;\n            }\n            defines.SPECULARAA = scene.getEngine().getCaps().standardDerivatives && this._enableSpecularAntiAliasing;\n        }\n        if (defines._areTexturesDirty || defines._areMiscDirty) {\n            defines.ALPHATESTVALUE = \"\".concat(this._alphaCutOff).concat(this._alphaCutOff % 1 === 0 ? \".\" : \"\");\n            defines.PREMULTIPLYALPHA = this.alphaMode === 7 || this.alphaMode === 8;\n            defines.ALPHABLEND = this.needAlphaBlendingForMesh(mesh);\n            defines.ALPHAFRESNEL = this._useAlphaFresnel || this._useLinearAlphaFresnel;\n            defines.LINEARALPHAFRESNEL = this._useLinearAlphaFresnel;\n        }\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n            this._imageProcessingConfiguration.prepareDefines(defines);\n        }\n        defines.FORCENORMALFORWARD = this._forceNormalForward;\n        defines.RADIANCEOCCLUSION = this._useRadianceOcclusion;\n        defines.HORIZONOCCLUSION = this._useHorizonOcclusion;\n        // Misc.\n        if (defines._areMiscDirty) {\n            MaterialHelper.PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh) || this._forceAlphaTest, defines);\n            defines.UNLIT = this._unlit || ((this.pointsCloud || this.wireframe) && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind));\n            defines.DEBUGMODE = this._debugMode;\n        }\n        // Values that need to be evaluated on every frame\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false, useClipPlane, useThinInstances);\n        // External config\n        this._eventInfo.defines = defines;\n        this._eventInfo.mesh = mesh;\n        this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\n        // Attribs\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true, true, this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE);\n        // External config\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\n    };\n    /**\n     * Force shader compilation\n     * @param mesh\n     * @param onCompiled\n     * @param options\n     */\n    PBRBaseMaterial.prototype.forceCompilation = function (mesh, onCompiled, options) {\n        var _this = this;\n        var localOptions = __assign({ clipPlane: false, useInstances: false }, options);\n        if (!this._uniformBufferLayoutBuilt) {\n            this.buildUniformLayout();\n        }\n        this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\n        var defines = new PBRMaterialDefines(this._eventInfo.defineNames);\n        var effect = this._prepareEffect(mesh, defines, undefined, undefined, localOptions.useInstances, localOptions.clipPlane, mesh.hasThinInstances);\n        if (this._onEffectCreatedObservable) {\n            onCreatedEffectParameters.effect = effect;\n            onCreatedEffectParameters.subMesh = null;\n            this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n        }\n        if (effect.isReady()) {\n            if (onCompiled) {\n                onCompiled(this);\n            }\n        }\n        else {\n            effect.onCompileObservable.add(function () {\n                if (onCompiled) {\n                    onCompiled(_this);\n                }\n            });\n        }\n    };\n    /**\n     * Initializes the uniform buffer layout for the shader.\n     */\n    PBRBaseMaterial.prototype.buildUniformLayout = function () {\n        // Order is important !\n        var ubo = this._uniformBuffer;\n        ubo.addUniform(\"vAlbedoInfos\", 2);\n        ubo.addUniform(\"vAmbientInfos\", 4);\n        ubo.addUniform(\"vOpacityInfos\", 2);\n        ubo.addUniform(\"vEmissiveInfos\", 2);\n        ubo.addUniform(\"vLightmapInfos\", 2);\n        ubo.addUniform(\"vReflectivityInfos\", 3);\n        ubo.addUniform(\"vMicroSurfaceSamplerInfos\", 2);\n        ubo.addUniform(\"vReflectionInfos\", 2);\n        ubo.addUniform(\"vReflectionFilteringInfo\", 2);\n        ubo.addUniform(\"vReflectionPosition\", 3);\n        ubo.addUniform(\"vReflectionSize\", 3);\n        ubo.addUniform(\"vBumpInfos\", 3);\n        ubo.addUniform(\"albedoMatrix\", 16);\n        ubo.addUniform(\"ambientMatrix\", 16);\n        ubo.addUniform(\"opacityMatrix\", 16);\n        ubo.addUniform(\"emissiveMatrix\", 16);\n        ubo.addUniform(\"lightmapMatrix\", 16);\n        ubo.addUniform(\"reflectivityMatrix\", 16);\n        ubo.addUniform(\"microSurfaceSamplerMatrix\", 16);\n        ubo.addUniform(\"bumpMatrix\", 16);\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\n        ubo.addUniform(\"reflectionMatrix\", 16);\n        ubo.addUniform(\"vReflectionColor\", 3);\n        ubo.addUniform(\"vAlbedoColor\", 4);\n        ubo.addUniform(\"vLightingIntensity\", 4);\n        ubo.addUniform(\"vReflectionMicrosurfaceInfos\", 3);\n        ubo.addUniform(\"pointSize\", 1);\n        ubo.addUniform(\"vReflectivityColor\", 4);\n        ubo.addUniform(\"vEmissiveColor\", 3);\n        ubo.addUniform(\"vAmbientColor\", 3);\n        ubo.addUniform(\"vDebugMode\", 2);\n        ubo.addUniform(\"vMetallicReflectanceFactors\", 4);\n        ubo.addUniform(\"vMetallicReflectanceInfos\", 2);\n        ubo.addUniform(\"metallicReflectanceMatrix\", 16);\n        ubo.addUniform(\"vReflectanceInfos\", 2);\n        ubo.addUniform(\"reflectanceMatrix\", 16);\n        ubo.addUniform(\"vSphericalL00\", 3);\n        ubo.addUniform(\"vSphericalL1_1\", 3);\n        ubo.addUniform(\"vSphericalL10\", 3);\n        ubo.addUniform(\"vSphericalL11\", 3);\n        ubo.addUniform(\"vSphericalL2_2\", 3);\n        ubo.addUniform(\"vSphericalL2_1\", 3);\n        ubo.addUniform(\"vSphericalL20\", 3);\n        ubo.addUniform(\"vSphericalL21\", 3);\n        ubo.addUniform(\"vSphericalL22\", 3);\n        ubo.addUniform(\"vSphericalX\", 3);\n        ubo.addUniform(\"vSphericalY\", 3);\n        ubo.addUniform(\"vSphericalZ\", 3);\n        ubo.addUniform(\"vSphericalXX_ZZ\", 3);\n        ubo.addUniform(\"vSphericalYY_ZZ\", 3);\n        ubo.addUniform(\"vSphericalZZ\", 3);\n        ubo.addUniform(\"vSphericalXY\", 3);\n        ubo.addUniform(\"vSphericalYZ\", 3);\n        ubo.addUniform(\"vSphericalZX\", 3);\n        _super.prototype.buildUniformLayout.call(this);\n    };\n    /**\n     * Binds the submesh data.\n     * @param world - The world matrix.\n     * @param mesh - The BJS mesh.\n     * @param subMesh - A submesh of the BJS mesh.\n     */\n    PBRBaseMaterial.prototype.bindForSubMesh = function (world, mesh, subMesh) {\n        var _a, _b, _c, _d;\n        var scene = this.getScene();\n        var defines = subMesh.materialDefines;\n        if (!defines) {\n            return;\n        }\n        var effect = subMesh.effect;\n        if (!effect) {\n            return;\n        }\n        this._activeEffect = effect;\n        // Matrices Mesh.\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n        mesh.transferToEffect(world);\n        var engine = scene.getEngine();\n        // Binding unconditionally\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\n        this._eventInfo.subMesh = subMesh;\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\n        // Normal Matrix\n        if (defines.OBJECTSPACE_NORMALMAP) {\n            world.toNormalMatrix(this._normalMatrix);\n            this.bindOnlyNormalMatrix(this._normalMatrix);\n        }\n        var mustRebind = this._mustRebind(scene, effect, mesh.visibility);\n        // Bones\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect, this.prePassConfiguration);\n        var reflectionTexture = null;\n        var ubo = this._uniformBuffer;\n        if (mustRebind) {\n            this.bindViewProjection(effect);\n            reflectionTexture = this._getReflectionTexture();\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync) {\n                // Texture uniforms\n                if (scene.texturesEnabled) {\n                    if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n                        ubo.updateFloat2(\"vAlbedoInfos\", this._albedoTexture.coordinatesIndex, this._albedoTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._albedoTexture, ubo, \"albedo\");\n                    }\n                    if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n                        ubo.updateFloat4(\"vAmbientInfos\", this._ambientTexture.coordinatesIndex, this._ambientTexture.level, this._ambientTextureStrength, this._ambientTextureImpactOnAnalyticalLights);\n                        MaterialHelper.BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\n                    }\n                    if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n                        ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\n                    }\n                    if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n                        ubo.updateMatrix(\"reflectionMatrix\", reflectionTexture.getReflectionTextureMatrix());\n                        ubo.updateFloat2(\"vReflectionInfos\", reflectionTexture.level, 0);\n                        if (reflectionTexture.boundingBoxSize) {\n                            var cubeTexture = reflectionTexture;\n                            ubo.updateVector3(\"vReflectionPosition\", cubeTexture.boundingBoxPosition);\n                            ubo.updateVector3(\"vReflectionSize\", cubeTexture.boundingBoxSize);\n                        }\n                        if (this.realTimeFiltering) {\n                            var width = reflectionTexture.getSize().width;\n                            ubo.updateFloat2(\"vReflectionFilteringInfo\", width, Scalar.Log2(width));\n                        }\n                        if (!defines.USEIRRADIANCEMAP) {\n                            var polynomials = reflectionTexture.sphericalPolynomial;\n                            if (defines.USESPHERICALFROMREFLECTIONMAP && polynomials) {\n                                if (defines.SPHERICAL_HARMONICS) {\n                                    var preScaledHarmonics = polynomials.preScaledHarmonics;\n                                    ubo.updateVector3(\"vSphericalL00\", preScaledHarmonics.l00);\n                                    ubo.updateVector3(\"vSphericalL1_1\", preScaledHarmonics.l1_1);\n                                    ubo.updateVector3(\"vSphericalL10\", preScaledHarmonics.l10);\n                                    ubo.updateVector3(\"vSphericalL11\", preScaledHarmonics.l11);\n                                    ubo.updateVector3(\"vSphericalL2_2\", preScaledHarmonics.l2_2);\n                                    ubo.updateVector3(\"vSphericalL2_1\", preScaledHarmonics.l2_1);\n                                    ubo.updateVector3(\"vSphericalL20\", preScaledHarmonics.l20);\n                                    ubo.updateVector3(\"vSphericalL21\", preScaledHarmonics.l21);\n                                    ubo.updateVector3(\"vSphericalL22\", preScaledHarmonics.l22);\n                                }\n                                else {\n                                    ubo.updateFloat3(\"vSphericalX\", polynomials.x.x, polynomials.x.y, polynomials.x.z);\n                                    ubo.updateFloat3(\"vSphericalY\", polynomials.y.x, polynomials.y.y, polynomials.y.z);\n                                    ubo.updateFloat3(\"vSphericalZ\", polynomials.z.x, polynomials.z.y, polynomials.z.z);\n                                    ubo.updateFloat3(\"vSphericalXX_ZZ\", polynomials.xx.x - polynomials.zz.x, polynomials.xx.y - polynomials.zz.y, polynomials.xx.z - polynomials.zz.z);\n                                    ubo.updateFloat3(\"vSphericalYY_ZZ\", polynomials.yy.x - polynomials.zz.x, polynomials.yy.y - polynomials.zz.y, polynomials.yy.z - polynomials.zz.z);\n                                    ubo.updateFloat3(\"vSphericalZZ\", polynomials.zz.x, polynomials.zz.y, polynomials.zz.z);\n                                    ubo.updateFloat3(\"vSphericalXY\", polynomials.xy.x, polynomials.xy.y, polynomials.xy.z);\n                                    ubo.updateFloat3(\"vSphericalYZ\", polynomials.yz.x, polynomials.yz.y, polynomials.yz.z);\n                                    ubo.updateFloat3(\"vSphericalZX\", polynomials.zx.x, polynomials.zx.y, polynomials.zx.z);\n                                }\n                            }\n                        }\n                        ubo.updateFloat3(\"vReflectionMicrosurfaceInfos\", reflectionTexture.getSize().width, reflectionTexture.lodGenerationScale, reflectionTexture.lodGenerationOffset);\n                    }\n                    if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n                        ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\n                    }\n                    if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n                        ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\n                        MaterialHelper.BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\n                    }\n                    if (MaterialFlags.SpecularTextureEnabled) {\n                        if (this._metallicTexture) {\n                            ubo.updateFloat3(\"vReflectivityInfos\", this._metallicTexture.coordinatesIndex, this._metallicTexture.level, this._ambientTextureStrength);\n                            MaterialHelper.BindTextureMatrix(this._metallicTexture, ubo, \"reflectivity\");\n                        }\n                        else if (this._reflectivityTexture) {\n                            ubo.updateFloat3(\"vReflectivityInfos\", this._reflectivityTexture.coordinatesIndex, this._reflectivityTexture.level, 1.0);\n                            MaterialHelper.BindTextureMatrix(this._reflectivityTexture, ubo, \"reflectivity\");\n                        }\n                        if (this._metallicReflectanceTexture) {\n                            ubo.updateFloat2(\"vMetallicReflectanceInfos\", this._metallicReflectanceTexture.coordinatesIndex, this._metallicReflectanceTexture.level);\n                            MaterialHelper.BindTextureMatrix(this._metallicReflectanceTexture, ubo, \"metallicReflectance\");\n                        }\n                        if (this._reflectanceTexture && defines.REFLECTANCE) {\n                            ubo.updateFloat2(\"vReflectanceInfos\", this._reflectanceTexture.coordinatesIndex, this._reflectanceTexture.level);\n                            MaterialHelper.BindTextureMatrix(this._reflectanceTexture, ubo, \"reflectance\");\n                        }\n                        if (this._microSurfaceTexture) {\n                            ubo.updateFloat2(\"vMicroSurfaceSamplerInfos\", this._microSurfaceTexture.coordinatesIndex, this._microSurfaceTexture.level);\n                            MaterialHelper.BindTextureMatrix(this._microSurfaceTexture, ubo, \"microSurfaceSampler\");\n                        }\n                    }\n                    if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n                        ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level, this._parallaxScaleBias);\n                        MaterialHelper.BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\n                        if (scene._mirroredCameraPosition) {\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\n                        }\n                        else {\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\n                        }\n                    }\n                }\n                // Point size\n                if (this.pointsCloud) {\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\n                }\n                // Colors\n                if (defines.METALLICWORKFLOW) {\n                    TmpColors.Color3[0].r = this._metallic === undefined || this._metallic === null ? 1 : this._metallic;\n                    TmpColors.Color3[0].g = this._roughness === undefined || this._roughness === null ? 1 : this._roughness;\n                    ubo.updateColor4(\"vReflectivityColor\", TmpColors.Color3[0], 1);\n                    var ior = (_b = (_a = this.subSurface) === null || _a === void 0 ? void 0 : _a._indexOfRefraction) !== null && _b !== void 0 ? _b : 1.5;\n                    var outsideIOR = 1; // consider air as clear coat and other layers would remap in the shader.\n                    // We are here deriving our default reflectance from a common value for none metallic surface.\n                    // Based of the schlick fresnel approximation model\n                    // for dielectrics.\n                    var f0 = Math.pow((ior - outsideIOR) / (ior + outsideIOR), 2);\n                    // Tweak the default F0 and F90 based on our given setup\n                    this._metallicReflectanceColor.scaleToRef(f0 * this._metallicF0Factor, TmpColors.Color3[0]);\n                    var metallicF90 = this._metallicF0Factor;\n                    ubo.updateColor4(\"vMetallicReflectanceFactors\", TmpColors.Color3[0], metallicF90);\n                }\n                else {\n                    ubo.updateColor4(\"vReflectivityColor\", this._reflectivityColor, this._microSurface);\n                }\n                ubo.updateColor3(\"vEmissiveColor\", MaterialFlags.EmissiveTextureEnabled ? this._emissiveColor : Color3.BlackReadOnly);\n                ubo.updateColor3(\"vReflectionColor\", this._reflectionColor);\n                if (!defines.SS_REFRACTION && ((_c = this.subSurface) === null || _c === void 0 ? void 0 : _c._linkRefractionWithTransparency)) {\n                    ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, 1);\n                }\n                else {\n                    ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, this.alpha);\n                }\n                // Misc\n                this._lightingInfos.x = this._directIntensity;\n                this._lightingInfos.y = this._emissiveIntensity;\n                this._lightingInfos.z = this._environmentIntensity * scene.environmentIntensity;\n                this._lightingInfos.w = this._specularIntensity;\n                ubo.updateVector4(\"vLightingIntensity\", this._lightingInfos);\n                // Colors\n                scene.ambientColor.multiplyToRef(this._ambientColor, this._globalAmbientColor);\n                ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\n                ubo.updateFloat2(\"vDebugMode\", this._debugLimit, this._debugFactor);\n            }\n            // Textures\n            if (scene.texturesEnabled) {\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n                    ubo.setTexture(\"albedoSampler\", this._albedoTexture);\n                }\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n                    ubo.setTexture(\"ambientSampler\", this._ambientTexture);\n                }\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n                    ubo.setTexture(\"opacitySampler\", this._opacityTexture);\n                }\n                if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n                    if (defines.LODBASEDMICROSFURACE) {\n                        ubo.setTexture(\"reflectionSampler\", reflectionTexture);\n                    }\n                    else {\n                        ubo.setTexture(\"reflectionSampler\", reflectionTexture._lodTextureMid || reflectionTexture);\n                        ubo.setTexture(\"reflectionSamplerLow\", reflectionTexture._lodTextureLow || reflectionTexture);\n                        ubo.setTexture(\"reflectionSamplerHigh\", reflectionTexture._lodTextureHigh || reflectionTexture);\n                    }\n                    if (defines.USEIRRADIANCEMAP) {\n                        ubo.setTexture(\"irradianceSampler\", reflectionTexture.irradianceTexture);\n                    }\n                }\n                if (defines.ENVIRONMENTBRDF) {\n                    ubo.setTexture(\"environmentBrdfSampler\", this._environmentBRDFTexture);\n                }\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n                    ubo.setTexture(\"emissiveSampler\", this._emissiveTexture);\n                }\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n                    ubo.setTexture(\"lightmapSampler\", this._lightmapTexture);\n                }\n                if (MaterialFlags.SpecularTextureEnabled) {\n                    if (this._metallicTexture) {\n                        ubo.setTexture(\"reflectivitySampler\", this._metallicTexture);\n                    }\n                    else if (this._reflectivityTexture) {\n                        ubo.setTexture(\"reflectivitySampler\", this._reflectivityTexture);\n                    }\n                    if (this._metallicReflectanceTexture) {\n                        ubo.setTexture(\"metallicReflectanceSampler\", this._metallicReflectanceTexture);\n                    }\n                    if (this._reflectanceTexture && defines.REFLECTANCE) {\n                        ubo.setTexture(\"reflectanceSampler\", this._reflectanceTexture);\n                    }\n                    if (this._microSurfaceTexture) {\n                        ubo.setTexture(\"microSurfaceSampler\", this._microSurfaceTexture);\n                    }\n                }\n                if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n                    ubo.setTexture(\"bumpSampler\", this._bumpTexture);\n                }\n            }\n            // OIT with depth peeling\n            if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\n                this.getScene().depthPeelingRenderer.bind(effect);\n            }\n            this._eventInfo.subMesh = subMesh;\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\n            // Clip plane\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\n            this.bindEyePosition(effect);\n        }\n        else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\n            this._needToBindSceneUbo = true;\n        }\n        if (mustRebind || !this.isFrozen) {\n            // Lights\n            if (scene.lightsEnabled && !this._disableLighting) {\n                MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights);\n            }\n            // View\n            if ((scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) || reflectionTexture || mesh.receiveShadows || defines.PREPASS) {\n                this.bindView(effect);\n            }\n            // Fog\n            MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect, true);\n            // Morph targets\n            if (defines.NUM_MORPH_INFLUENCERS) {\n                MaterialHelper.BindMorphTargetParameters(mesh, this._activeEffect);\n            }\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\n                (_d = mesh.bakedVertexAnimationManager) === null || _d === void 0 ? void 0 : _d.bind(effect, defines.INSTANCES);\n            }\n            // image processing\n            this._imageProcessingConfiguration.bind(this._activeEffect);\n            // Log. depth\n            MaterialHelper.BindLogDepth(defines, this._activeEffect, scene);\n        }\n        this._afterBind(mesh, this._activeEffect);\n        ubo.update();\n    };\n    /**\n     * Returns the animatable textures.\n     * @returns - Array of animatable textures.\n     */\n    PBRBaseMaterial.prototype.getAnimatables = function () {\n        var results = _super.prototype.getAnimatables.call(this);\n        if (this._albedoTexture && this._albedoTexture.animations && this._albedoTexture.animations.length > 0) {\n            results.push(this._albedoTexture);\n        }\n        if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\n            results.push(this._ambientTexture);\n        }\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\n            results.push(this._opacityTexture);\n        }\n        if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\n            results.push(this._reflectionTexture);\n        }\n        if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\n            results.push(this._emissiveTexture);\n        }\n        if (this._metallicTexture && this._metallicTexture.animations && this._metallicTexture.animations.length > 0) {\n            results.push(this._metallicTexture);\n        }\n        else if (this._reflectivityTexture && this._reflectivityTexture.animations && this._reflectivityTexture.animations.length > 0) {\n            results.push(this._reflectivityTexture);\n        }\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n            results.push(this._bumpTexture);\n        }\n        if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\n            results.push(this._lightmapTexture);\n        }\n        return results;\n    };\n    /**\n     * Returns the texture used for reflections.\n     * @returns - Reflection texture if present.  Otherwise, returns the environment texture.\n     */\n    PBRBaseMaterial.prototype._getReflectionTexture = function () {\n        if (this._reflectionTexture) {\n            return this._reflectionTexture;\n        }\n        return this.getScene().environmentTexture;\n    };\n    /**\n     * Returns an array of the actively used textures.\n     * @returns - Array of BaseTextures\n     */\n    PBRBaseMaterial.prototype.getActiveTextures = function () {\n        var activeTextures = _super.prototype.getActiveTextures.call(this);\n        if (this._albedoTexture) {\n            activeTextures.push(this._albedoTexture);\n        }\n        if (this._ambientTexture) {\n            activeTextures.push(this._ambientTexture);\n        }\n        if (this._opacityTexture) {\n            activeTextures.push(this._opacityTexture);\n        }\n        if (this._reflectionTexture) {\n            activeTextures.push(this._reflectionTexture);\n        }\n        if (this._emissiveTexture) {\n            activeTextures.push(this._emissiveTexture);\n        }\n        if (this._reflectivityTexture) {\n            activeTextures.push(this._reflectivityTexture);\n        }\n        if (this._metallicTexture) {\n            activeTextures.push(this._metallicTexture);\n        }\n        if (this._metallicReflectanceTexture) {\n            activeTextures.push(this._metallicReflectanceTexture);\n        }\n        if (this._reflectanceTexture) {\n            activeTextures.push(this._reflectanceTexture);\n        }\n        if (this._microSurfaceTexture) {\n            activeTextures.push(this._microSurfaceTexture);\n        }\n        if (this._bumpTexture) {\n            activeTextures.push(this._bumpTexture);\n        }\n        if (this._lightmapTexture) {\n            activeTextures.push(this._lightmapTexture);\n        }\n        return activeTextures;\n    };\n    /**\n     * Checks to see if a texture is used in the material.\n     * @param texture - Base texture to use.\n     * @returns - Boolean specifying if a texture is used in the material.\n     */\n    PBRBaseMaterial.prototype.hasTexture = function (texture) {\n        if (_super.prototype.hasTexture.call(this, texture)) {\n            return true;\n        }\n        if (this._albedoTexture === texture) {\n            return true;\n        }\n        if (this._ambientTexture === texture) {\n            return true;\n        }\n        if (this._opacityTexture === texture) {\n            return true;\n        }\n        if (this._reflectionTexture === texture) {\n            return true;\n        }\n        if (this._reflectivityTexture === texture) {\n            return true;\n        }\n        if (this._metallicTexture === texture) {\n            return true;\n        }\n        if (this._metallicReflectanceTexture === texture) {\n            return true;\n        }\n        if (this._reflectanceTexture === texture) {\n            return true;\n        }\n        if (this._microSurfaceTexture === texture) {\n            return true;\n        }\n        if (this._bumpTexture === texture) {\n            return true;\n        }\n        if (this._lightmapTexture === texture) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Sets the required values to the prepass renderer.\n     */\n    PBRBaseMaterial.prototype.setPrePassRenderer = function () {\n        var _a;\n        if ((_a = this.subSurface) === null || _a === void 0 ? void 0 : _a.isScatteringEnabled) {\n            var subSurfaceConfiguration = this.getScene().enableSubSurfaceForPrePass();\n            if (subSurfaceConfiguration) {\n                subSurfaceConfiguration.enabled = true;\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Disposes the resources of the material.\n     * @param forceDisposeEffect - Forces the disposal of effects.\n     * @param forceDisposeTextures - Forces the disposal of all textures.\n     */\n    PBRBaseMaterial.prototype.dispose = function (forceDisposeEffect, forceDisposeTextures) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        if (forceDisposeTextures) {\n            if (this._environmentBRDFTexture && this.getScene().environmentBRDFTexture !== this._environmentBRDFTexture) {\n                this._environmentBRDFTexture.dispose();\n            }\n            (_a = this._albedoTexture) === null || _a === void 0 ? void 0 : _a.dispose();\n            (_b = this._ambientTexture) === null || _b === void 0 ? void 0 : _b.dispose();\n            (_c = this._opacityTexture) === null || _c === void 0 ? void 0 : _c.dispose();\n            (_d = this._reflectionTexture) === null || _d === void 0 ? void 0 : _d.dispose();\n            (_e = this._emissiveTexture) === null || _e === void 0 ? void 0 : _e.dispose();\n            (_f = this._metallicTexture) === null || _f === void 0 ? void 0 : _f.dispose();\n            (_g = this._reflectivityTexture) === null || _g === void 0 ? void 0 : _g.dispose();\n            (_h = this._bumpTexture) === null || _h === void 0 ? void 0 : _h.dispose();\n            (_j = this._lightmapTexture) === null || _j === void 0 ? void 0 : _j.dispose();\n            (_k = this._metallicReflectanceTexture) === null || _k === void 0 ? void 0 : _k.dispose();\n            (_l = this._reflectanceTexture) === null || _l === void 0 ? void 0 : _l.dispose();\n            (_m = this._microSurfaceTexture) === null || _m === void 0 ? void 0 : _m.dispose();\n        }\n        this._renderTargets.dispose();\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        _super.prototype.dispose.call(this, forceDisposeEffect, forceDisposeTextures);\n    };\n    /**\n     * PBRMaterialTransparencyMode: No transparency mode, Alpha channel is not use.\n     */\n    PBRBaseMaterial.PBRMATERIAL_OPAQUE = Material.MATERIAL_OPAQUE;\n    /**\n     * PBRMaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\n     */\n    PBRBaseMaterial.PBRMATERIAL_ALPHATEST = Material.MATERIAL_ALPHATEST;\n    /**\n     * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\n     */\n    PBRBaseMaterial.PBRMATERIAL_ALPHABLEND = Material.MATERIAL_ALPHABLEND;\n    /**\n     * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\n     * They are also discarded below the alpha cutoff threshold to improve performances.\n     */\n    PBRBaseMaterial.PBRMATERIAL_ALPHATESTANDBLEND = Material.MATERIAL_ALPHATESTANDBLEND;\n    /**\n     * Defines the default value of how much AO map is occluding the analytical lights\n     * (point spot...).\n     */\n    PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS = 0;\n    /**\n     * PBRMaterialLightFalloff Physical: light is falling off following the inverse squared distance law.\n     */\n    PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL = 0;\n    /**\n     * PBRMaterialLightFalloff gltf: light is falling off as described in the gltf moving to PBR document\n     * to enhance interoperability with other engines.\n     */\n    PBRBaseMaterial.LIGHTFALLOFF_GLTF = 1;\n    /**\n     * PBRMaterialLightFalloff Standard: light is falling off like in the standard material\n     * to enhance interoperability with other materials.\n     */\n    PBRBaseMaterial.LIGHTFALLOFF_STANDARD = 2;\n    __decorate([\n        serializeAsImageProcessingConfiguration()\n    ], PBRBaseMaterial.prototype, \"_imageProcessingConfiguration\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n    ], PBRBaseMaterial.prototype, \"debugMode\", void 0);\n    __decorate([\n        serialize()\n    ], PBRBaseMaterial.prototype, \"useLogarithmicDepth\", null);\n    return PBRBaseMaterial;\n}(PushMaterial));\nexport { PBRBaseMaterial };\n//# sourceMappingURL=pbrBaseMaterial.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize, serializeAsTexture, expandToProperty, serializeAsColor3 } from \"../../Misc/decorators.js\";\nimport { Color3 } from \"../../Maths/math.color.js\";\nimport { MaterialFlags } from \"../materialFlags.js\";\nimport { MaterialHelper } from \"../../Materials/materialHelper.js\";\n\nimport { MaterialPluginBase } from \"../materialPluginBase.js\";\nimport { MaterialDefines } from \"../materialDefines.js\";\n/**\n * @hidden\n */\nvar MaterialClearCoatDefines = /** @class */ (function (_super) {\n    __extends(MaterialClearCoatDefines, _super);\n    function MaterialClearCoatDefines() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.CLEARCOAT = false;\n        _this.CLEARCOAT_DEFAULTIOR = false;\n        _this.CLEARCOAT_TEXTURE = false;\n        _this.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n        _this.CLEARCOAT_TEXTUREDIRECTUV = 0;\n        _this.CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV = 0;\n        _this.CLEARCOAT_BUMP = false;\n        _this.CLEARCOAT_BUMPDIRECTUV = 0;\n        _this.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n        _this.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\n        _this.CLEARCOAT_REMAP_F0 = false;\n        _this.CLEARCOAT_TINT = false;\n        _this.CLEARCOAT_TINT_TEXTURE = false;\n        _this.CLEARCOAT_TINT_TEXTUREDIRECTUV = 0;\n        _this.CLEARCOAT_TINT_GAMMATEXTURE = false;\n        return _this;\n    }\n    return MaterialClearCoatDefines;\n}(MaterialDefines));\nexport { MaterialClearCoatDefines };\n/**\n * Plugin that implements the clear coat component of the PBR material\n */\nvar PBRClearCoatConfiguration = /** @class */ (function (_super) {\n    __extends(PBRClearCoatConfiguration, _super);\n    function PBRClearCoatConfiguration(material, addToPluginList) {\n        if (addToPluginList === void 0) { addToPluginList = true; }\n        var _this = _super.call(this, material, \"PBRClearCoat\", 100, new MaterialClearCoatDefines(), addToPluginList) || this;\n        _this._isEnabled = false;\n        /**\n         * Defines if the clear coat is enabled in the material.\n         */\n        _this.isEnabled = false;\n        /**\n         * Defines the clear coat layer strength (between 0 and 1) it defaults to 1.\n         */\n        _this.intensity = 1;\n        /**\n         * Defines the clear coat layer roughness.\n         */\n        _this.roughness = 0;\n        _this._indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n        /**\n         * Defines the index of refraction of the clear coat.\n         * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\n         * The default fits with a polyurethane material.\n         * Changing the default value is more performance intensive.\n         */\n        _this.indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n        _this._texture = null;\n        /**\n         * Stores the clear coat values in a texture (red channel is intensity and green channel is roughness)\n         * If useRoughnessFromMainTexture is false, the green channel of texture is not used and the green channel of textureRoughness is used instead\n         * if textureRoughness is not empty, else no texture roughness is used\n         */\n        _this.texture = null;\n        _this._useRoughnessFromMainTexture = true;\n        /**\n         * Indicates that the green channel of the texture property will be used for roughness (default: true)\n         * If false, the green channel from textureRoughness is used for roughness\n         */\n        _this.useRoughnessFromMainTexture = true;\n        _this._textureRoughness = null;\n        /**\n         * Stores the clear coat roughness in a texture (green channel)\n         * Not used if useRoughnessFromMainTexture is true\n         */\n        _this.textureRoughness = null;\n        _this._remapF0OnInterfaceChange = true;\n        /**\n         * Defines if the F0 value should be remapped to account for the interface change in the material.\n         */\n        _this.remapF0OnInterfaceChange = true;\n        _this._bumpTexture = null;\n        /**\n         * Define the clear coat specific bump texture.\n         */\n        _this.bumpTexture = null;\n        _this._isTintEnabled = false;\n        /**\n         * Defines if the clear coat tint is enabled in the material.\n         */\n        _this.isTintEnabled = false;\n        /**\n         * Defines the clear coat tint of the material.\n         * This is only use if tint is enabled\n         */\n        _this.tintColor = Color3.White();\n        /**\n         * Defines the distance at which the tint color should be found in the\n         * clear coat media.\n         * This is only use if tint is enabled\n         */\n        _this.tintColorAtDistance = 1;\n        /**\n         * Defines the clear coat layer thickness.\n         * This is only use if tint is enabled\n         */\n        _this.tintThickness = 1;\n        _this._tintTexture = null;\n        /**\n         * Stores the clear tint values in a texture.\n         * rgb is tint\n         * a is a thickness factor\n         */\n        _this.tintTexture = null;\n        _this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n        return _this;\n    }\n    /** @hidden */\n    PBRClearCoatConfiguration.prototype._markAllSubMeshesAsTexturesDirty = function () {\n        this._enable(this._isEnabled);\n        this._internalMarkAllSubMeshesAsTexturesDirty();\n    };\n    PBRClearCoatConfiguration.prototype.isReadyForSubMesh = function (defines, scene, engine) {\n        if (!this._isEnabled) {\n            return true;\n        }\n        var disableBumpMap = this._material._disableBumpMap;\n        if (defines._areTexturesDirty) {\n            if (scene.texturesEnabled) {\n                if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n                    if (!this._texture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n                if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\n                    if (!this._textureRoughness.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n                if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\n                    // Bump texture cannot be not blocking.\n                    if (!this._bumpTexture.isReady()) {\n                        return false;\n                    }\n                }\n                if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n                    if (!this._tintTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    PBRClearCoatConfiguration.prototype.prepareDefines = function (defines, scene) {\n        var _a;\n        if (this._isEnabled) {\n            defines.CLEARCOAT = true;\n            defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL =\n                this._texture !== null && this._texture._texture === ((_a = this._textureRoughness) === null || _a === void 0 ? void 0 : _a._texture) && this._texture.checkTransformsAreIdentical(this._textureRoughness);\n            defines.CLEARCOAT_REMAP_F0 = this._remapF0OnInterfaceChange;\n            if (defines._areTexturesDirty) {\n                if (scene.texturesEnabled) {\n                    if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"CLEARCOAT_TEXTURE\");\n                    }\n                    else {\n                        defines.CLEARCOAT_TEXTURE = false;\n                    }\n                    if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._textureRoughness, defines, \"CLEARCOAT_TEXTURE_ROUGHNESS\");\n                    }\n                    else {\n                        defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n                    }\n                    if (this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"CLEARCOAT_BUMP\");\n                    }\n                    else {\n                        defines.CLEARCOAT_BUMP = false;\n                    }\n                    defines.CLEARCOAT_DEFAULTIOR = this._indexOfRefraction === PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n                    if (this._isTintEnabled) {\n                        defines.CLEARCOAT_TINT = true;\n                        if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n                            MaterialHelper.PrepareDefinesForMergedUV(this._tintTexture, defines, \"CLEARCOAT_TINT_TEXTURE\");\n                            defines.CLEARCOAT_TINT_GAMMATEXTURE = this._tintTexture.gammaSpace;\n                        }\n                        else {\n                            defines.CLEARCOAT_TINT_TEXTURE = false;\n                        }\n                    }\n                    else {\n                        defines.CLEARCOAT_TINT = false;\n                        defines.CLEARCOAT_TINT_TEXTURE = false;\n                    }\n                }\n            }\n        }\n        else {\n            defines.CLEARCOAT = false;\n            defines.CLEARCOAT_TEXTURE = false;\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n            defines.CLEARCOAT_BUMP = false;\n            defines.CLEARCOAT_TINT = false;\n            defines.CLEARCOAT_TINT_TEXTURE = false;\n            defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\n        }\n    };\n    PBRClearCoatConfiguration.prototype.bindForSubMesh = function (uniformBuffer, scene, engine, subMesh) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (!this._isEnabled) {\n            return;\n        }\n        var defines = subMesh.materialDefines;\n        var isFrozen = this._material.isFrozen;\n        var disableBumpMap = this._material._disableBumpMap;\n        var invertNormalMapX = this._material._invertNormalMapX;\n        var invertNormalMapY = this._material._invertNormalMapY;\n        var identicalTextures = defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL;\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n            if (identicalTextures && MaterialFlags.ClearCoatTextureEnabled) {\n                uniformBuffer.updateFloat4(\"vClearCoatInfos\", this._texture.coordinatesIndex, this._texture.level, -1, -1);\n                MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\n            }\n            else if ((this._texture || this._textureRoughness) && MaterialFlags.ClearCoatTextureEnabled) {\n                uniformBuffer.updateFloat4(\"vClearCoatInfos\", (_b = (_a = this._texture) === null || _a === void 0 ? void 0 : _a.coordinatesIndex) !== null && _b !== void 0 ? _b : 0, (_d = (_c = this._texture) === null || _c === void 0 ? void 0 : _c.level) !== null && _d !== void 0 ? _d : 0, (_f = (_e = this._textureRoughness) === null || _e === void 0 ? void 0 : _e.coordinatesIndex) !== null && _f !== void 0 ? _f : 0, (_h = (_g = this._textureRoughness) === null || _g === void 0 ? void 0 : _g.level) !== null && _h !== void 0 ? _h : 0);\n                if (this._texture) {\n                    MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\n                }\n                if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE) {\n                    MaterialHelper.BindTextureMatrix(this._textureRoughness, uniformBuffer, \"clearCoatRoughness\");\n                }\n            }\n            if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatTextureEnabled && !disableBumpMap) {\n                uniformBuffer.updateFloat2(\"vClearCoatBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level);\n                MaterialHelper.BindTextureMatrix(this._bumpTexture, uniformBuffer, \"clearCoatBump\");\n                if (scene._mirroredCameraPosition) {\n                    uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? 1.0 : -1.0, invertNormalMapY ? 1.0 : -1.0);\n                }\n                else {\n                    uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? -1.0 : 1.0, invertNormalMapY ? -1.0 : 1.0);\n                }\n            }\n            if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n                uniformBuffer.updateFloat2(\"vClearCoatTintInfos\", this._tintTexture.coordinatesIndex, this._tintTexture.level);\n                MaterialHelper.BindTextureMatrix(this._tintTexture, uniformBuffer, \"clearCoatTint\");\n            }\n            // Clear Coat General params\n            uniformBuffer.updateFloat2(\"vClearCoatParams\", this.intensity, this.roughness);\n            // Clear Coat Refraction params\n            var a = 1 - this._indexOfRefraction;\n            var b = 1 + this._indexOfRefraction;\n            var f0 = Math.pow(-a / b, 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\n            var eta = 1 / this._indexOfRefraction;\n            uniformBuffer.updateFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b);\n            if (this._isTintEnabled) {\n                uniformBuffer.updateFloat4(\"vClearCoatTintParams\", this.tintColor.r, this.tintColor.g, this.tintColor.b, Math.max(0.00001, this.tintThickness));\n                uniformBuffer.updateFloat(\"clearCoatColorAtDistance\", Math.max(0.00001, this.tintColorAtDistance));\n            }\n        }\n        // Textures\n        if (scene.texturesEnabled) {\n            if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n                uniformBuffer.setTexture(\"clearCoatSampler\", this._texture);\n            }\n            if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.ClearCoatTextureEnabled) {\n                uniformBuffer.setTexture(\"clearCoatRoughnessSampler\", this._textureRoughness);\n            }\n            if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\n                uniformBuffer.setTexture(\"clearCoatBumpSampler\", this._bumpTexture);\n            }\n            if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n                uniformBuffer.setTexture(\"clearCoatTintSampler\", this._tintTexture);\n            }\n        }\n    };\n    PBRClearCoatConfiguration.prototype.hasTexture = function (texture) {\n        if (this._texture === texture) {\n            return true;\n        }\n        if (this._textureRoughness === texture) {\n            return true;\n        }\n        if (this._bumpTexture === texture) {\n            return true;\n        }\n        if (this._tintTexture === texture) {\n            return true;\n        }\n        return false;\n    };\n    PBRClearCoatConfiguration.prototype.getActiveTextures = function (activeTextures) {\n        if (this._texture) {\n            activeTextures.push(this._texture);\n        }\n        if (this._textureRoughness) {\n            activeTextures.push(this._textureRoughness);\n        }\n        if (this._bumpTexture) {\n            activeTextures.push(this._bumpTexture);\n        }\n        if (this._tintTexture) {\n            activeTextures.push(this._tintTexture);\n        }\n    };\n    PBRClearCoatConfiguration.prototype.getAnimatables = function (animatables) {\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n            animatables.push(this._texture);\n        }\n        if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\n            animatables.push(this._textureRoughness);\n        }\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n            animatables.push(this._bumpTexture);\n        }\n        if (this._tintTexture && this._tintTexture.animations && this._tintTexture.animations.length > 0) {\n            animatables.push(this._tintTexture);\n        }\n    };\n    PBRClearCoatConfiguration.prototype.dispose = function (forceDisposeTextures) {\n        var _a, _b, _c, _d;\n        if (forceDisposeTextures) {\n            (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n            (_b = this._textureRoughness) === null || _b === void 0 ? void 0 : _b.dispose();\n            (_c = this._bumpTexture) === null || _c === void 0 ? void 0 : _c.dispose();\n            (_d = this._tintTexture) === null || _d === void 0 ? void 0 : _d.dispose();\n        }\n    };\n    PBRClearCoatConfiguration.prototype.getClassName = function () {\n        return \"PBRClearCoatConfiguration\";\n    };\n    PBRClearCoatConfiguration.prototype.addFallbacks = function (defines, fallbacks, currentRank) {\n        if (defines.CLEARCOAT_BUMP) {\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT_BUMP\");\n        }\n        if (defines.CLEARCOAT_TINT) {\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT_TINT\");\n        }\n        if (defines.CLEARCOAT) {\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT\");\n        }\n        return currentRank;\n    };\n    PBRClearCoatConfiguration.prototype.getSamplers = function (samplers) {\n        samplers.push(\"clearCoatSampler\", \"clearCoatRoughnessSampler\", \"clearCoatBumpSampler\", \"clearCoatTintSampler\");\n    };\n    PBRClearCoatConfiguration.prototype.getUniforms = function () {\n        return {\n            ubo: [\n                { name: \"vClearCoatParams\", size: 2, type: \"vec2\" },\n                { name: \"vClearCoatRefractionParams\", size: 4, type: \"vec4\" },\n                { name: \"vClearCoatInfos\", size: 4, type: \"vec4\" },\n                { name: \"clearCoatMatrix\", size: 16, type: \"mat4\" },\n                { name: \"clearCoatRoughnessMatrix\", size: 16, type: \"mat4\" },\n                { name: \"vClearCoatBumpInfos\", size: 2, type: \"vec2\" },\n                { name: \"vClearCoatTangentSpaceParams\", size: 2, type: \"vec2\" },\n                { name: \"clearCoatBumpMatrix\", size: 16, type: \"mat4\" },\n                { name: \"vClearCoatTintParams\", size: 4, type: \"vec4\" },\n                { name: \"clearCoatColorAtDistance\", size: 1, type: \"float\" },\n                { name: \"vClearCoatTintInfos\", size: 2, type: \"vec2\" },\n                { name: \"clearCoatTintMatrix\", size: 16, type: \"mat4\" },\n            ],\n        };\n    };\n    /**\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\n     * The default fits with a polyurethane material.\n     * @hidden\n     */\n    PBRClearCoatConfiguration._DefaultIndexOfRefraction = 1.5;\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRClearCoatConfiguration.prototype, \"isEnabled\", void 0);\n    __decorate([\n        serialize()\n    ], PBRClearCoatConfiguration.prototype, \"intensity\", void 0);\n    __decorate([\n        serialize()\n    ], PBRClearCoatConfiguration.prototype, \"roughness\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRClearCoatConfiguration.prototype, \"indexOfRefraction\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRClearCoatConfiguration.prototype, \"texture\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRClearCoatConfiguration.prototype, \"useRoughnessFromMainTexture\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRClearCoatConfiguration.prototype, \"textureRoughness\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRClearCoatConfiguration.prototype, \"remapF0OnInterfaceChange\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRClearCoatConfiguration.prototype, \"bumpTexture\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRClearCoatConfiguration.prototype, \"isTintEnabled\", void 0);\n    __decorate([\n        serializeAsColor3()\n    ], PBRClearCoatConfiguration.prototype, \"tintColor\", void 0);\n    __decorate([\n        serialize()\n    ], PBRClearCoatConfiguration.prototype, \"tintColorAtDistance\", void 0);\n    __decorate([\n        serialize()\n    ], PBRClearCoatConfiguration.prototype, \"tintThickness\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRClearCoatConfiguration.prototype, \"tintTexture\", void 0);\n    return PBRClearCoatConfiguration;\n}(MaterialPluginBase));\nexport { PBRClearCoatConfiguration };\n//# sourceMappingURL=pbrClearCoatConfiguration.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize, serializeAsTexture, expandToProperty } from \"../../Misc/decorators.js\";\nimport { MaterialFlags } from \"../materialFlags.js\";\nimport { MaterialHelper } from \"../../Materials/materialHelper.js\";\n\nimport { MaterialPluginBase } from \"../materialPluginBase.js\";\nimport { MaterialDefines } from \"../materialDefines.js\";\n/**\n * @hidden\n */\nvar MaterialIridescenceDefines = /** @class */ (function (_super) {\n    __extends(MaterialIridescenceDefines, _super);\n    function MaterialIridescenceDefines() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.IRIDESCENCE = false;\n        _this.IRIDESCENCE_TEXTURE = false;\n        _this.IRIDESCENCE_TEXTUREDIRECTUV = 0;\n        _this.IRIDESCENCE_THICKNESS_TEXTURE = false;\n        _this.IRIDESCENCE_THICKNESS_TEXTUREDIRECTUV = 0;\n        _this.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE = false;\n        return _this;\n    }\n    return MaterialIridescenceDefines;\n}(MaterialDefines));\nexport { MaterialIridescenceDefines };\n/**\n * Plugin that implements the iridescence (thin film) component of the PBR material\n */\nvar PBRIridescenceConfiguration = /** @class */ (function (_super) {\n    __extends(PBRIridescenceConfiguration, _super);\n    function PBRIridescenceConfiguration(material, addToPluginList) {\n        if (addToPluginList === void 0) { addToPluginList = true; }\n        var _this = _super.call(this, material, \"PBRIridescence\", 110, new MaterialIridescenceDefines(), addToPluginList) || this;\n        _this._isEnabled = false;\n        /**\n         * Defines if the iridescence is enabled in the material.\n         */\n        _this.isEnabled = false;\n        /**\n         * Defines the iridescence layer strength (between 0 and 1) it defaults to 1.\n         */\n        _this.intensity = 1;\n        /**\n         * Defines the minimum thickness of the thin-film layer given in nanometers (nm).\n         */\n        _this.minimumThickness = PBRIridescenceConfiguration._DefaultMinimumThickness;\n        /**\n         * Defines the maximum thickness of the thin-film layer given in nanometers (nm). This will be the thickness used if not thickness texture has been set.\n         */\n        _this.maximumThickness = PBRIridescenceConfiguration._DefaultMaximumThickness;\n        /**\n         * Defines the maximum thickness of the thin-film layer given in nanometers (nm).\n         */\n        _this.indexOfRefraction = PBRIridescenceConfiguration._DefaultIndexOfRefraction;\n        _this._texture = null;\n        /**\n         * Stores the iridescence intensity in a texture (red channel)\n         */\n        _this.texture = null;\n        _this._thicknessTexture = null;\n        /**\n         * Stores the iridescence thickness in a texture (green channel)\n         */\n        _this.thicknessTexture = null;\n        _this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n        return _this;\n    }\n    /** @hidden */\n    PBRIridescenceConfiguration.prototype._markAllSubMeshesAsTexturesDirty = function () {\n        this._enable(this._isEnabled);\n        this._internalMarkAllSubMeshesAsTexturesDirty();\n    };\n    PBRIridescenceConfiguration.prototype.isReadyForSubMesh = function (defines, scene) {\n        if (!this._isEnabled) {\n            return true;\n        }\n        if (defines._areTexturesDirty) {\n            if (scene.texturesEnabled) {\n                if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\n                    if (!this._texture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n                if (this._thicknessTexture && MaterialFlags.IridescenceTextureEnabled) {\n                    if (!this._thicknessTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    PBRIridescenceConfiguration.prototype.prepareDefines = function (defines, scene) {\n        var _a;\n        if (this._isEnabled) {\n            defines.IRIDESCENCE = true;\n            defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE =\n                this._texture !== null && this._texture._texture === ((_a = this._thicknessTexture) === null || _a === void 0 ? void 0 : _a._texture) && this._texture.checkTransformsAreIdentical(this._thicknessTexture);\n            if (defines._areTexturesDirty) {\n                if (scene.texturesEnabled) {\n                    if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"IRIDESCENCE_TEXTURE\");\n                    }\n                    else {\n                        defines.IRIDESCENCE_TEXTURE = false;\n                    }\n                    if (!defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE && this._thicknessTexture && MaterialFlags.IridescenceTextureEnabled) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._thicknessTexture, defines, \"IRIDESCENCE_THICKNESS_TEXTURE\");\n                    }\n                    else {\n                        defines.IRIDESCENCE_THICKNESS_TEXTURE = false;\n                    }\n                }\n            }\n        }\n        else {\n            defines.IRIDESCENCE = false;\n            defines.IRIDESCENCE_TEXTURE = false;\n            defines.IRIDESCENCE_THICKNESS_TEXTURE = false;\n            defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE = false;\n        }\n    };\n    PBRIridescenceConfiguration.prototype.bindForSubMesh = function (uniformBuffer, scene, engine, subMesh) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (!this._isEnabled) {\n            return;\n        }\n        var defines = subMesh.materialDefines;\n        var isFrozen = this._material.isFrozen;\n        var identicalTextures = defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE;\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n            if (identicalTextures && MaterialFlags.IridescenceTextureEnabled) {\n                uniformBuffer.updateFloat4(\"vIridescenceInfos\", this._texture.coordinatesIndex, this._texture.level, -1, -1);\n                MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"iridescence\");\n            }\n            else if ((this._texture || this._thicknessTexture) && MaterialFlags.IridescenceTextureEnabled) {\n                uniformBuffer.updateFloat4(\"vIridescenceInfos\", (_b = (_a = this._texture) === null || _a === void 0 ? void 0 : _a.coordinatesIndex) !== null && _b !== void 0 ? _b : 0, (_d = (_c = this._texture) === null || _c === void 0 ? void 0 : _c.level) !== null && _d !== void 0 ? _d : 0, (_f = (_e = this._thicknessTexture) === null || _e === void 0 ? void 0 : _e.coordinatesIndex) !== null && _f !== void 0 ? _f : 0, (_h = (_g = this._thicknessTexture) === null || _g === void 0 ? void 0 : _g.level) !== null && _h !== void 0 ? _h : 0);\n                if (this._texture) {\n                    MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"iridescence\");\n                }\n                if (this._thicknessTexture && !identicalTextures && !defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE) {\n                    MaterialHelper.BindTextureMatrix(this._thicknessTexture, uniformBuffer, \"iridescenceThickness\");\n                }\n            }\n            // Clear Coat General params\n            uniformBuffer.updateFloat4(\"vIridescenceParams\", this.intensity, this.indexOfRefraction, this.minimumThickness, this.maximumThickness);\n        }\n        // Textures\n        if (scene.texturesEnabled) {\n            if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\n                uniformBuffer.setTexture(\"iridescenceSampler\", this._texture);\n            }\n            if (this._thicknessTexture && !identicalTextures && !defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE && MaterialFlags.IridescenceTextureEnabled) {\n                uniformBuffer.setTexture(\"iridescenceThicknessSampler\", this._thicknessTexture);\n            }\n        }\n    };\n    PBRIridescenceConfiguration.prototype.hasTexture = function (texture) {\n        if (this._texture === texture) {\n            return true;\n        }\n        if (this._thicknessTexture === texture) {\n            return true;\n        }\n        return false;\n    };\n    PBRIridescenceConfiguration.prototype.getActiveTextures = function (activeTextures) {\n        if (this._texture) {\n            activeTextures.push(this._texture);\n        }\n        if (this._thicknessTexture) {\n            activeTextures.push(this._thicknessTexture);\n        }\n    };\n    PBRIridescenceConfiguration.prototype.getAnimatables = function (animatables) {\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n            animatables.push(this._texture);\n        }\n        if (this._thicknessTexture && this._thicknessTexture.animations && this._thicknessTexture.animations.length > 0) {\n            animatables.push(this._thicknessTexture);\n        }\n    };\n    PBRIridescenceConfiguration.prototype.dispose = function (forceDisposeTextures) {\n        var _a, _b;\n        if (forceDisposeTextures) {\n            (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n            (_b = this._thicknessTexture) === null || _b === void 0 ? void 0 : _b.dispose();\n        }\n    };\n    PBRIridescenceConfiguration.prototype.getClassName = function () {\n        return \"PBRIridescenceConfiguration\";\n    };\n    PBRIridescenceConfiguration.prototype.addFallbacks = function (defines, fallbacks, currentRank) {\n        if (defines.IRIDESCENCE) {\n            fallbacks.addFallback(currentRank++, \"IRIDESCENCE\");\n        }\n        return currentRank;\n    };\n    PBRIridescenceConfiguration.prototype.getSamplers = function (samplers) {\n        samplers.push(\"iridescenceSampler\", \"iridescenceThicknessSampler\");\n    };\n    PBRIridescenceConfiguration.prototype.getUniforms = function () {\n        return {\n            ubo: [\n                { name: \"vIridescenceParams\", size: 4, type: \"vec4\" },\n                { name: \"vIridescenceInfos\", size: 4, type: \"vec4\" },\n                { name: \"iridescenceMatrix\", size: 16, type: \"mat4\" },\n                { name: \"iridescenceThicknessMatrix\", size: 16, type: \"mat4\" },\n            ],\n        };\n    };\n    /**\n     * The default minimum thickness of the thin-film layer given in nanometers (nm).\n     * Defaults to 100 nm.\n     * @hidden\n     */\n    PBRIridescenceConfiguration._DefaultMinimumThickness = 100;\n    /**\n     * The default maximum thickness of the thin-film layer given in nanometers (nm).\n     * Defaults to 400 nm.\n     * @hidden\n     */\n    PBRIridescenceConfiguration._DefaultMaximumThickness = 400;\n    /**\n     * The default index of refraction of the thin-film layer.\n     * Defaults to 1.3\n     * @hidden\n     */\n    PBRIridescenceConfiguration._DefaultIndexOfRefraction = 1.3;\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRIridescenceConfiguration.prototype, \"isEnabled\", void 0);\n    __decorate([\n        serialize()\n    ], PBRIridescenceConfiguration.prototype, \"intensity\", void 0);\n    __decorate([\n        serialize()\n    ], PBRIridescenceConfiguration.prototype, \"minimumThickness\", void 0);\n    __decorate([\n        serialize()\n    ], PBRIridescenceConfiguration.prototype, \"maximumThickness\", void 0);\n    __decorate([\n        serialize()\n    ], PBRIridescenceConfiguration.prototype, \"indexOfRefraction\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRIridescenceConfiguration.prototype, \"texture\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRIridescenceConfiguration.prototype, \"thicknessTexture\", void 0);\n    return PBRIridescenceConfiguration;\n}(MaterialPluginBase));\nexport { PBRIridescenceConfiguration };\n//# sourceMappingURL=pbrIridescenceConfiguration.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize, SerializationHelper, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators.js\";\nimport { GetEnvironmentBRDFTexture } from \"../../Misc/brdfTextureTools.js\";\nimport { Color3 } from \"../../Maths/math.color.js\";\nimport { PBRBaseMaterial } from \"./pbrBaseMaterial.js\";\nimport { RegisterClass } from \"../../Misc/typeStore.js\";\n/**\n * The Physically based material of BJS.\n *\n * This offers the main features of a standard PBR material.\n * For more information, please refer to the documentation :\n * https://doc.babylonjs.com/how_to/physically_based_rendering\n */\nvar PBRMaterial = /** @class */ (function (_super) {\n    __extends(PBRMaterial, _super);\n    /**\n     * Instantiates a new PBRMaterial instance.\n     *\n     * @param name The material name\n     * @param scene The scene the material will be use in.\n     */\n    function PBRMaterial(name, scene) {\n        var _this = _super.call(this, name, scene) || this;\n        /**\n         * Intensity of the direct lights e.g. the four lights available in your scene.\n         * This impacts both the direct diffuse and specular highlights.\n         */\n        _this.directIntensity = 1.0;\n        /**\n         * Intensity of the emissive part of the material.\n         * This helps controlling the emissive effect without modifying the emissive color.\n         */\n        _this.emissiveIntensity = 1.0;\n        /**\n         * Intensity of the environment e.g. how much the environment will light the object\n         * either through harmonics for rough material or through the reflection for shiny ones.\n         */\n        _this.environmentIntensity = 1.0;\n        /**\n         * This is a special control allowing the reduction of the specular highlights coming from the\n         * four lights of the scene. Those highlights may not be needed in full environment lighting.\n         */\n        _this.specularIntensity = 1.0;\n        /**\n         * Debug Control allowing disabling the bump map on this material.\n         */\n        _this.disableBumpMap = false;\n        /**\n         * AKA Occlusion Texture Intensity in other nomenclature.\n         */\n        _this.ambientTextureStrength = 1.0;\n        /**\n         * Defines how much the AO map is occluding the analytical lights (point spot...).\n         * 1 means it completely occludes it\n         * 0 mean it has no impact\n         */\n        _this.ambientTextureImpactOnAnalyticalLights = PBRMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS;\n        /**\n         * In metallic workflow, specifies an F0 factor to help configuring the material F0.\n         * By default the indexOfrefraction is used to compute F0;\n         *\n         * This is used as a factor against the default reflectance at normal incidence to tweak it.\n         *\n         * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor;\n         * F90 = metallicReflectanceColor;\n         */\n        _this.metallicF0Factor = 1;\n        /**\n         * In metallic workflow, specifies an F90 color to help configuring the material F90.\n         * By default the F90 is always 1;\n         *\n         * Please note that this factor is also used as a factor against the default reflectance at normal incidence.\n         *\n         * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor\n         * F90 = metallicReflectanceColor;\n         */\n        _this.metallicReflectanceColor = Color3.White();\n        /**\n         * Specifies that only the A channel from metallicReflectanceTexture should be used.\n         * If false, both RGB and A channels will be used\n         */\n        _this.useOnlyMetallicFromMetallicReflectanceTexture = false;\n        /**\n         * The color of a material in ambient lighting.\n         */\n        _this.ambientColor = new Color3(0, 0, 0);\n        /**\n         * AKA Diffuse Color in other nomenclature.\n         */\n        _this.albedoColor = new Color3(1, 1, 1);\n        /**\n         * AKA Specular Color in other nomenclature.\n         */\n        _this.reflectivityColor = new Color3(1, 1, 1);\n        /**\n         * The color reflected from the material.\n         */\n        _this.reflectionColor = new Color3(1.0, 1.0, 1.0);\n        /**\n         * The color emitted from the material.\n         */\n        _this.emissiveColor = new Color3(0, 0, 0);\n        /**\n         * AKA Glossiness in other nomenclature.\n         */\n        _this.microSurface = 1.0;\n        /**\n         * If true, the light map contains occlusion information instead of lighting info.\n         */\n        _this.useLightmapAsShadowmap = false;\n        /**\n         * Specifies that the alpha is coming form the albedo channel alpha channel for alpha blending.\n         */\n        _this.useAlphaFromAlbedoTexture = false;\n        /**\n         * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\n         */\n        _this.forceAlphaTest = false;\n        /**\n         * Defines the alpha limits in alpha test mode.\n         */\n        _this.alphaCutOff = 0.4;\n        /**\n         * Specifies that the material will keep the specular highlights over a transparent surface (only the most luminous ones).\n         * A car glass is a good example of that. When sun reflects on it you can not see what is behind.\n         */\n        _this.useSpecularOverAlpha = true;\n        /**\n         * Specifies if the reflectivity texture contains the glossiness information in its alpha channel.\n         */\n        _this.useMicroSurfaceFromReflectivityMapAlpha = false;\n        /**\n         * Specifies if the metallic texture contains the roughness information in its alpha channel.\n         */\n        _this.useRoughnessFromMetallicTextureAlpha = true;\n        /**\n         * Specifies if the metallic texture contains the roughness information in its green channel.\n         */\n        _this.useRoughnessFromMetallicTextureGreen = false;\n        /**\n         * Specifies if the metallic texture contains the metallness information in its blue channel.\n         */\n        _this.useMetallnessFromMetallicTextureBlue = false;\n        /**\n         * Specifies if the metallic texture contains the ambient occlusion information in its red channel.\n         */\n        _this.useAmbientOcclusionFromMetallicTextureRed = false;\n        /**\n         * Specifies if the ambient texture contains the ambient occlusion information in its red channel only.\n         */\n        _this.useAmbientInGrayScale = false;\n        /**\n         * In case the reflectivity map does not contain the microsurface information in its alpha channel,\n         * The material will try to infer what glossiness each pixel should be.\n         */\n        _this.useAutoMicroSurfaceFromReflectivityMap = false;\n        /**\n         * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\n         * A car glass is a good example of that. When the street lights reflects on it you can not see what is behind.\n         */\n        _this.useRadianceOverAlpha = true;\n        /**\n         * Allows using an object space normal map (instead of tangent space).\n         */\n        _this.useObjectSpaceNormalMap = false;\n        /**\n         * Allows using the bump map in parallax mode.\n         */\n        _this.useParallax = false;\n        /**\n         * Allows using the bump map in parallax occlusion mode.\n         */\n        _this.useParallaxOcclusion = false;\n        /**\n         * Controls the scale bias of the parallax mode.\n         */\n        _this.parallaxScaleBias = 0.05;\n        /**\n         * If sets to true, disables all the lights affecting the material.\n         */\n        _this.disableLighting = false;\n        /**\n         * Force the shader to compute irradiance in the fragment shader in order to take bump in account.\n         */\n        _this.forceIrradianceInFragment = false;\n        /**\n         * Number of Simultaneous lights allowed on the material.\n         */\n        _this.maxSimultaneousLights = 4;\n        /**\n         * If sets to true, x component of normal map value will invert (x = 1.0 - x).\n         */\n        _this.invertNormalMapX = false;\n        /**\n         * If sets to true, y component of normal map value will invert (y = 1.0 - y).\n         */\n        _this.invertNormalMapY = false;\n        /**\n         * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\n         */\n        _this.twoSidedLighting = false;\n        /**\n         * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n         * And/Or occlude the blended part. (alpha is converted to gamma to compute the fresnel)\n         */\n        _this.useAlphaFresnel = false;\n        /**\n         * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n         * And/Or occlude the blended part. (alpha stays linear to compute the fresnel)\n         */\n        _this.useLinearAlphaFresnel = false;\n        /**\n         * Let user defines the brdf lookup texture used for IBL.\n         * A default 8bit version is embedded but you could point at :\n         * * Default texture: https://assets.babylonjs.com/environments/correlatedMSBRDF_RGBD.png\n         * * Default 16bit pixel depth texture: https://assets.babylonjs.com/environments/correlatedMSBRDF.dds\n         * * LEGACY Default None correlated https://assets.babylonjs.com/environments/uncorrelatedBRDF_RGBD.png\n         * * LEGACY Default None correlated 16bit pixel depth https://assets.babylonjs.com/environments/uncorrelatedBRDF.dds\n         */\n        _this.environmentBRDFTexture = null;\n        /**\n         * Force normal to face away from face.\n         */\n        _this.forceNormalForward = false;\n        /**\n         * Enables specular anti aliasing in the PBR shader.\n         * It will both interacts on the Geometry for analytical and IBL lighting.\n         * It also prefilter the roughness map based on the bump values.\n         */\n        _this.enableSpecularAntiAliasing = false;\n        /**\n         * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\n         * makes the reflect vector face the model (under horizon).\n         */\n        _this.useHorizonOcclusion = true;\n        /**\n         * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\n         * too much the area relying on ambient texture to define their ambient occlusion.\n         */\n        _this.useRadianceOcclusion = true;\n        /**\n         * If set to true, no lighting calculations will be applied.\n         */\n        _this.unlit = false;\n        _this._environmentBRDFTexture = GetEnvironmentBRDFTexture(_this.getScene());\n        return _this;\n    }\n    Object.defineProperty(PBRMaterial.prototype, \"refractionTexture\", {\n        /**\n         * Stores the refracted light information in a texture.\n         */\n        get: function () {\n            return this.subSurface.refractionTexture;\n        },\n        set: function (value) {\n            this.subSurface.refractionTexture = value;\n            if (value) {\n                this.subSurface.isRefractionEnabled = true;\n            }\n            else if (!this.subSurface.linkRefractionWithTransparency) {\n                this.subSurface.isRefractionEnabled = false;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRMaterial.prototype, \"indexOfRefraction\", {\n        /**\n         * Index of refraction of the material base layer.\n         * https://en.wikipedia.org/wiki/List_of_refractive_indices\n         *\n         * This does not only impact refraction but also the Base F0 of Dielectric Materials.\n         *\n         * From dielectric fresnel rules: F0 = square((iorT - iorI) / (iorT + iorI))\n         */\n        get: function () {\n            return this.subSurface.indexOfRefraction;\n        },\n        set: function (value) {\n            this.subSurface.indexOfRefraction = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRMaterial.prototype, \"invertRefractionY\", {\n        /**\n         * Controls if refraction needs to be inverted on Y. This could be useful for procedural texture.\n         */\n        get: function () {\n            return this.subSurface.invertRefractionY;\n        },\n        set: function (value) {\n            this.subSurface.invertRefractionY = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRMaterial.prototype, \"linkRefractionWithTransparency\", {\n        /**\n         * This parameters will make the material used its opacity to control how much it is refracting against not.\n         * Materials half opaque for instance using refraction could benefit from this control.\n         */\n        get: function () {\n            return this.subSurface.linkRefractionWithTransparency;\n        },\n        set: function (value) {\n            this.subSurface.linkRefractionWithTransparency = value;\n            if (value) {\n                this.subSurface.isRefractionEnabled = true;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRMaterial.prototype, \"usePhysicalLightFalloff\", {\n        /**\n         * BJS is using an hardcoded light falloff based on a manually sets up range.\n         * In PBR, one way to represents the falloff is to use the inverse squared root algorithm.\n         * This parameter can help you switch back to the BJS mode in order to create scenes using both materials.\n         */\n        get: function () {\n            return this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL;\n        },\n        /**\n         * BJS is using an hardcoded light falloff based on a manually sets up range.\n         * In PBR, one way to represents the falloff is to use the inverse squared root algorithm.\n         * This parameter can help you switch back to the BJS mode in order to create scenes using both materials.\n         */\n        set: function (value) {\n            if (value !== this.usePhysicalLightFalloff) {\n                // Ensure the effect will be rebuilt.\n                this._markAllSubMeshesAsTexturesDirty();\n                if (value) {\n                    this._lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL;\n                }\n                else {\n                    this._lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_STANDARD;\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRMaterial.prototype, \"useGLTFLightFalloff\", {\n        /**\n         * In order to support the falloff compatibility with gltf, a special mode has been added\n         * to reproduce the gltf light falloff.\n         */\n        get: function () {\n            return this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF;\n        },\n        /**\n         * In order to support the falloff compatibility with gltf, a special mode has been added\n         * to reproduce the gltf light falloff.\n         */\n        set: function (value) {\n            if (value !== this.useGLTFLightFalloff) {\n                // Ensure the effect will be rebuilt.\n                this._markAllSubMeshesAsTexturesDirty();\n                if (value) {\n                    this._lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_GLTF;\n                }\n                else {\n                    this._lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_STANDARD;\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRMaterial.prototype, \"imageProcessingConfiguration\", {\n        /**\n         * Gets the image processing configuration used either in this material.\n         */\n        get: function () {\n            return this._imageProcessingConfiguration;\n        },\n        /**\n         * Sets the Default image processing configuration used either in the this material.\n         *\n         * If sets to null, the scene one is in use.\n         */\n        set: function (value) {\n            this._attachImageProcessingConfiguration(value);\n            // Ensure the effect will be rebuilt.\n            this._markAllSubMeshesAsTexturesDirty();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRMaterial.prototype, \"cameraColorCurvesEnabled\", {\n        /**\n         * Gets whether the color curves effect is enabled.\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.colorCurvesEnabled;\n        },\n        /**\n         * Sets whether the color curves effect is enabled.\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.colorCurvesEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRMaterial.prototype, \"cameraColorGradingEnabled\", {\n        /**\n         * Gets whether the color grading effect is enabled.\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.colorGradingEnabled;\n        },\n        /**\n         * Gets whether the color grading effect is enabled.\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.colorGradingEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRMaterial.prototype, \"cameraToneMappingEnabled\", {\n        /**\n         * Gets whether tonemapping is enabled or not.\n         */\n        get: function () {\n            return this._imageProcessingConfiguration.toneMappingEnabled;\n        },\n        /**\n         * Sets whether tonemapping is enabled or not\n         */\n        set: function (value) {\n            this._imageProcessingConfiguration.toneMappingEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRMaterial.prototype, \"cameraExposure\", {\n        /**\n         * The camera exposure used on this material.\n         * This property is here and not in the camera to allow controlling exposure without full screen post process.\n         * This corresponds to a photographic exposure.\n         */\n        get: function () {\n            return this._imageProcessingConfiguration.exposure;\n        },\n        /**\n         * The camera exposure used on this material.\n         * This property is here and not in the camera to allow controlling exposure without full screen post process.\n         * This corresponds to a photographic exposure.\n         */\n        set: function (value) {\n            this._imageProcessingConfiguration.exposure = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRMaterial.prototype, \"cameraContrast\", {\n        /**\n         * Gets The camera contrast used on this material.\n         */\n        get: function () {\n            return this._imageProcessingConfiguration.contrast;\n        },\n        /**\n         * Sets The camera contrast used on this material.\n         */\n        set: function (value) {\n            this._imageProcessingConfiguration.contrast = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRMaterial.prototype, \"cameraColorGradingTexture\", {\n        /**\n         * Gets the Color Grading 2D Lookup Texture.\n         */\n        get: function () {\n            return this._imageProcessingConfiguration.colorGradingTexture;\n        },\n        /**\n         * Sets the Color Grading 2D Lookup Texture.\n         */\n        set: function (value) {\n            this._imageProcessingConfiguration.colorGradingTexture = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRMaterial.prototype, \"cameraColorCurves\", {\n        /**\n         * The color grading curves provide additional color adjustment that is applied after any color grading transform (3D LUT).\n         * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\n         * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\n         * corresponding to low luminance, medium luminance, and high luminance areas respectively.\n         */\n        get: function () {\n            return this._imageProcessingConfiguration.colorCurves;\n        },\n        /**\n         * The color grading curves provide additional color adjustment that is applied after any color grading transform (3D LUT).\n         * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\n         * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\n         * corresponding to low luminance, medium luminance, and high luminance areas respectively.\n         */\n        set: function (value) {\n            this._imageProcessingConfiguration.colorCurves = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns the name of this material class.\n     */\n    PBRMaterial.prototype.getClassName = function () {\n        return \"PBRMaterial\";\n    };\n    /**\n     * Makes a duplicate of the current material.\n     * @param name - name to use for the new material.\n     */\n    PBRMaterial.prototype.clone = function (name) {\n        var _this = this;\n        var clone = SerializationHelper.Clone(function () { return new PBRMaterial(name, _this.getScene()); }, this);\n        clone.id = name;\n        clone.name = name;\n        this.stencil.copyTo(clone.stencil);\n        this.clearCoat.copyTo(clone.clearCoat);\n        this.anisotropy.copyTo(clone.anisotropy);\n        this.brdf.copyTo(clone.brdf);\n        this.sheen.copyTo(clone.sheen);\n        this.subSurface.copyTo(clone.subSurface);\n        return clone;\n    };\n    /**\n     * Serializes this PBR Material.\n     * @returns - An object with the serialized material.\n     */\n    PBRMaterial.prototype.serialize = function () {\n        var serializationObject = _super.prototype.serialize.call(this);\n        serializationObject.customType = \"BABYLON.PBRMaterial\";\n        serializationObject.clearCoat = this.clearCoat.serialize();\n        serializationObject.anisotropy = this.anisotropy.serialize();\n        serializationObject.brdf = this.brdf.serialize();\n        serializationObject.sheen = this.sheen.serialize();\n        serializationObject.subSurface = this.subSurface.serialize();\n        serializationObject.iridescence = this.iridescence.serialize();\n        return serializationObject;\n    };\n    // Statics\n    /**\n     * Parses a PBR Material from a serialized object.\n     * @param source - Serialized object.\n     * @param scene - BJS scene instance.\n     * @param rootUrl - url for the scene object\n     * @returns - PBRMaterial\n     */\n    PBRMaterial.Parse = function (source, scene, rootUrl) {\n        var material = SerializationHelper.Parse(function () { return new PBRMaterial(source.name, scene); }, source, scene, rootUrl);\n        if (source.stencil) {\n            material.stencil.parse(source.stencil, scene, rootUrl);\n        }\n        if (source.clearCoat) {\n            material.clearCoat.parse(source.clearCoat, scene, rootUrl);\n        }\n        if (source.anisotropy) {\n            material.anisotropy.parse(source.anisotropy, scene, rootUrl);\n        }\n        if (source.brdf) {\n            material.brdf.parse(source.brdf, scene, rootUrl);\n        }\n        if (source.sheen) {\n            material.sheen.parse(source.sheen, scene, rootUrl);\n        }\n        if (source.subSurface) {\n            material.subSurface.parse(source.subSurface, scene, rootUrl);\n        }\n        if (source.iridescence) {\n            material.iridescence.parse(source.iridescence, scene, rootUrl);\n        }\n        return material;\n    };\n    /**\n     * PBRMaterialTransparencyMode: No transparency mode, Alpha channel is not use.\n     */\n    PBRMaterial.PBRMATERIAL_OPAQUE = PBRBaseMaterial.PBRMATERIAL_OPAQUE;\n    /**\n     * PBRMaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\n     */\n    PBRMaterial.PBRMATERIAL_ALPHATEST = PBRBaseMaterial.PBRMATERIAL_ALPHATEST;\n    /**\n     * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\n     */\n    PBRMaterial.PBRMATERIAL_ALPHABLEND = PBRBaseMaterial.PBRMATERIAL_ALPHABLEND;\n    /**\n     * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\n     * They are also discarded below the alpha cutoff threshold to improve performances.\n     */\n    PBRMaterial.PBRMATERIAL_ALPHATESTANDBLEND = PBRBaseMaterial.PBRMATERIAL_ALPHATESTANDBLEND;\n    /**\n     * Defines the default value of how much AO map is occluding the analytical lights\n     * (point spot...).\n     */\n    PBRMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS;\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"directIntensity\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"emissiveIntensity\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"environmentIntensity\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"specularIntensity\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"disableBumpMap\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"albedoTexture\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"ambientTexture\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"ambientTextureStrength\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"ambientTextureImpactOnAnalyticalLights\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n    ], PBRMaterial.prototype, \"opacityTexture\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"reflectionTexture\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"emissiveTexture\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"reflectivityTexture\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"metallicTexture\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"metallic\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"roughness\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"metallicF0Factor\", void 0);\n    __decorate([\n        serializeAsColor3(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"metallicReflectanceColor\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useOnlyMetallicFromMetallicReflectanceTexture\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"metallicReflectanceTexture\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"reflectanceTexture\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"microSurfaceTexture\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"bumpTexture\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", null)\n    ], PBRMaterial.prototype, \"lightmapTexture\", void 0);\n    __decorate([\n        serializeAsColor3(\"ambient\"),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"ambientColor\", void 0);\n    __decorate([\n        serializeAsColor3(\"albedo\"),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"albedoColor\", void 0);\n    __decorate([\n        serializeAsColor3(\"reflectivity\"),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"reflectivityColor\", void 0);\n    __decorate([\n        serializeAsColor3(\"reflection\"),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"reflectionColor\", void 0);\n    __decorate([\n        serializeAsColor3(\"emissive\"),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"emissiveColor\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"microSurface\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useLightmapAsShadowmap\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n    ], PBRMaterial.prototype, \"useAlphaFromAlbedoTexture\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n    ], PBRMaterial.prototype, \"forceAlphaTest\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\n    ], PBRMaterial.prototype, \"alphaCutOff\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useSpecularOverAlpha\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useMicroSurfaceFromReflectivityMapAlpha\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useRoughnessFromMetallicTextureAlpha\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useRoughnessFromMetallicTextureGreen\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useMetallnessFromMetallicTextureBlue\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useAmbientOcclusionFromMetallicTextureRed\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useAmbientInGrayScale\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useAutoMicroSurfaceFromReflectivityMap\", void 0);\n    __decorate([\n        serialize()\n    ], PBRMaterial.prototype, \"usePhysicalLightFalloff\", null);\n    __decorate([\n        serialize()\n    ], PBRMaterial.prototype, \"useGLTFLightFalloff\", null);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useRadianceOverAlpha\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useObjectSpaceNormalMap\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useParallax\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useParallaxOcclusion\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"parallaxScaleBias\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    ], PBRMaterial.prototype, \"disableLighting\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"forceIrradianceInFragment\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\n    ], PBRMaterial.prototype, \"maxSimultaneousLights\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"invertNormalMapX\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"invertNormalMapY\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"twoSidedLighting\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useAlphaFresnel\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useLinearAlphaFresnel\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"environmentBRDFTexture\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"forceNormalForward\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"enableSpecularAntiAliasing\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useHorizonOcclusion\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRMaterial.prototype, \"useRadianceOcclusion\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\n    ], PBRMaterial.prototype, \"unlit\", void 0);\n    return PBRMaterial;\n}(PBRBaseMaterial));\nexport { PBRMaterial };\nRegisterClass(\"BABYLON.PBRMaterial\", PBRMaterial);\n//# sourceMappingURL=pbrMaterial.js.map","import { __decorate, __extends } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { serialize, expandToProperty, serializeAsColor3, serializeAsTexture } from \"../../Misc/decorators.js\";\nimport { Color3 } from \"../../Maths/math.color.js\";\nimport { MaterialFlags } from \"../../Materials/materialFlags.js\";\nimport { MaterialHelper } from \"../../Materials/materialHelper.js\";\n\nimport { MaterialPluginBase } from \"../materialPluginBase.js\";\nimport { MaterialDefines } from \"../materialDefines.js\";\n/**\n * @hidden\n */\nvar MaterialSheenDefines = /** @class */ (function (_super) {\n    __extends(MaterialSheenDefines, _super);\n    function MaterialSheenDefines() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.SHEEN = false;\n        _this.SHEEN_TEXTURE = false;\n        _this.SHEEN_GAMMATEXTURE = false;\n        _this.SHEEN_TEXTURE_ROUGHNESS = false;\n        _this.SHEEN_TEXTUREDIRECTUV = 0;\n        _this.SHEEN_TEXTURE_ROUGHNESSDIRECTUV = 0;\n        _this.SHEEN_LINKWITHALBEDO = false;\n        _this.SHEEN_ROUGHNESS = false;\n        _this.SHEEN_ALBEDOSCALING = false;\n        _this.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n        _this.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL = false;\n        return _this;\n    }\n    return MaterialSheenDefines;\n}(MaterialDefines));\nexport { MaterialSheenDefines };\n/**\n * Plugin that implements the sheen component of the PBR material.\n */\nvar PBRSheenConfiguration = /** @class */ (function (_super) {\n    __extends(PBRSheenConfiguration, _super);\n    function PBRSheenConfiguration(material, addToPluginList) {\n        if (addToPluginList === void 0) { addToPluginList = true; }\n        var _this = _super.call(this, material, \"Sheen\", 120, new MaterialSheenDefines(), addToPluginList) || this;\n        _this._isEnabled = false;\n        /**\n         * Defines if the material uses sheen.\n         */\n        _this.isEnabled = false;\n        _this._linkSheenWithAlbedo = false;\n        /**\n         * Defines if the sheen is linked to the sheen color.\n         */\n        _this.linkSheenWithAlbedo = false;\n        /**\n         * Defines the sheen intensity.\n         */\n        _this.intensity = 1;\n        /**\n         * Defines the sheen color.\n         */\n        _this.color = Color3.White();\n        _this._texture = null;\n        /**\n         * Stores the sheen tint values in a texture.\n         * rgb is tint\n         * a is a intensity or roughness if the roughness property has been defined and useRoughnessFromTexture is true (in that case, textureRoughness won't be used)\n         * If the roughness property has been defined and useRoughnessFromTexture is false then the alpha channel is not used to modulate roughness\n         */\n        _this.texture = null;\n        _this._useRoughnessFromMainTexture = true;\n        /**\n         * Indicates that the alpha channel of the texture property will be used for roughness.\n         * Has no effect if the roughness (and texture!) property is not defined\n         */\n        _this.useRoughnessFromMainTexture = true;\n        _this._roughness = null;\n        /**\n         * Defines the sheen roughness.\n         * It is not taken into account if linkSheenWithAlbedo is true.\n         * To stay backward compatible, material roughness is used instead if sheen roughness = null\n         */\n        _this.roughness = null;\n        _this._textureRoughness = null;\n        /**\n         * Stores the sheen roughness in a texture.\n         * alpha channel is the roughness. This texture won't be used if the texture property is not empty and useRoughnessFromTexture is true\n         */\n        _this.textureRoughness = null;\n        _this._albedoScaling = false;\n        /**\n         * If true, the sheen effect is layered above the base BRDF with the albedo-scaling technique.\n         * It allows the strength of the sheen effect to not depend on the base color of the material,\n         * making it easier to setup and tweak the effect\n         */\n        _this.albedoScaling = false;\n        _this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n        return _this;\n    }\n    /** @hidden */\n    PBRSheenConfiguration.prototype._markAllSubMeshesAsTexturesDirty = function () {\n        this._enable(this._isEnabled);\n        this._internalMarkAllSubMeshesAsTexturesDirty();\n    };\n    PBRSheenConfiguration.prototype.isReadyForSubMesh = function (defines, scene) {\n        if (!this._isEnabled) {\n            return true;\n        }\n        if (defines._areTexturesDirty) {\n            if (scene.texturesEnabled) {\n                if (this._texture && MaterialFlags.SheenTextureEnabled) {\n                    if (!this._texture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n                if (this._textureRoughness && MaterialFlags.SheenTextureEnabled) {\n                    if (!this._textureRoughness.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    PBRSheenConfiguration.prototype.prepareDefines = function (defines, scene) {\n        var _a;\n        if (this._isEnabled) {\n            defines.SHEEN = true;\n            defines.SHEEN_LINKWITHALBEDO = this._linkSheenWithAlbedo;\n            defines.SHEEN_ROUGHNESS = this._roughness !== null;\n            defines.SHEEN_ALBEDOSCALING = this._albedoScaling;\n            defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\n            defines.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL =\n                this._texture !== null && this._texture._texture === ((_a = this._textureRoughness) === null || _a === void 0 ? void 0 : _a._texture) && this._texture.checkTransformsAreIdentical(this._textureRoughness);\n            if (defines._areTexturesDirty) {\n                if (scene.texturesEnabled) {\n                    if (this._texture && MaterialFlags.SheenTextureEnabled) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"SHEEN_TEXTURE\");\n                        defines.SHEEN_GAMMATEXTURE = this._texture.gammaSpace;\n                    }\n                    else {\n                        defines.SHEEN_TEXTURE = false;\n                    }\n                    if (this._textureRoughness && MaterialFlags.SheenTextureEnabled) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._textureRoughness, defines, \"SHEEN_TEXTURE_ROUGHNESS\");\n                    }\n                    else {\n                        defines.SHEEN_TEXTURE_ROUGHNESS = false;\n                    }\n                }\n            }\n        }\n        else {\n            defines.SHEEN = false;\n            defines.SHEEN_TEXTURE = false;\n            defines.SHEEN_TEXTURE_ROUGHNESS = false;\n            defines.SHEEN_LINKWITHALBEDO = false;\n            defines.SHEEN_ROUGHNESS = false;\n            defines.SHEEN_ALBEDOSCALING = false;\n            defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n            defines.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL = false;\n        }\n    };\n    PBRSheenConfiguration.prototype.bindForSubMesh = function (uniformBuffer, scene, engine, subMesh) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (!this._isEnabled) {\n            return;\n        }\n        var defines = subMesh.materialDefines;\n        var isFrozen = this._material.isFrozen;\n        var identicalTextures = defines.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL;\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n            if (identicalTextures && MaterialFlags.SheenTextureEnabled) {\n                uniformBuffer.updateFloat4(\"vSheenInfos\", this._texture.coordinatesIndex, this._texture.level, -1, -1);\n                MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"sheen\");\n            }\n            else if ((this._texture || this._textureRoughness) && MaterialFlags.SheenTextureEnabled) {\n                uniformBuffer.updateFloat4(\"vSheenInfos\", (_b = (_a = this._texture) === null || _a === void 0 ? void 0 : _a.coordinatesIndex) !== null && _b !== void 0 ? _b : 0, (_d = (_c = this._texture) === null || _c === void 0 ? void 0 : _c.level) !== null && _d !== void 0 ? _d : 0, (_f = (_e = this._textureRoughness) === null || _e === void 0 ? void 0 : _e.coordinatesIndex) !== null && _f !== void 0 ? _f : 0, (_h = (_g = this._textureRoughness) === null || _g === void 0 ? void 0 : _g.level) !== null && _h !== void 0 ? _h : 0);\n                if (this._texture) {\n                    MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"sheen\");\n                }\n                if (this._textureRoughness && !identicalTextures && !defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE) {\n                    MaterialHelper.BindTextureMatrix(this._textureRoughness, uniformBuffer, \"sheenRoughness\");\n                }\n            }\n            // Sheen\n            uniformBuffer.updateFloat4(\"vSheenColor\", this.color.r, this.color.g, this.color.b, this.intensity);\n            if (this._roughness !== null) {\n                uniformBuffer.updateFloat(\"vSheenRoughness\", this._roughness);\n            }\n        }\n        // Textures\n        if (scene.texturesEnabled) {\n            if (this._texture && MaterialFlags.SheenTextureEnabled) {\n                uniformBuffer.setTexture(\"sheenSampler\", this._texture);\n            }\n            if (this._textureRoughness && !identicalTextures && !defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.SheenTextureEnabled) {\n                uniformBuffer.setTexture(\"sheenRoughnessSampler\", this._textureRoughness);\n            }\n        }\n    };\n    PBRSheenConfiguration.prototype.hasTexture = function (texture) {\n        if (this._texture === texture) {\n            return true;\n        }\n        if (this._textureRoughness === texture) {\n            return true;\n        }\n        return false;\n    };\n    PBRSheenConfiguration.prototype.getActiveTextures = function (activeTextures) {\n        if (this._texture) {\n            activeTextures.push(this._texture);\n        }\n        if (this._textureRoughness) {\n            activeTextures.push(this._textureRoughness);\n        }\n    };\n    PBRSheenConfiguration.prototype.getAnimatables = function (animatables) {\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n            animatables.push(this._texture);\n        }\n        if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\n            animatables.push(this._textureRoughness);\n        }\n    };\n    PBRSheenConfiguration.prototype.dispose = function (forceDisposeTextures) {\n        var _a, _b;\n        if (forceDisposeTextures) {\n            (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n            (_b = this._textureRoughness) === null || _b === void 0 ? void 0 : _b.dispose();\n        }\n    };\n    PBRSheenConfiguration.prototype.getClassName = function () {\n        return \"PBRSheenConfiguration\";\n    };\n    PBRSheenConfiguration.prototype.addFallbacks = function (defines, fallbacks, currentRank) {\n        if (defines.SHEEN) {\n            fallbacks.addFallback(currentRank++, \"SHEEN\");\n        }\n        return currentRank;\n    };\n    PBRSheenConfiguration.prototype.getSamplers = function (samplers) {\n        samplers.push(\"sheenSampler\", \"sheenRoughnessSampler\");\n    };\n    PBRSheenConfiguration.prototype.getUniforms = function () {\n        return {\n            ubo: [\n                { name: \"vSheenColor\", size: 4, type: \"vec4\" },\n                { name: \"vSheenRoughness\", size: 1, type: \"float\" },\n                { name: \"vSheenInfos\", size: 4, type: \"vec4\" },\n                { name: \"sheenMatrix\", size: 16, type: \"mat4\" },\n                { name: \"sheenRoughnessMatrix\", size: 16, type: \"mat4\" },\n            ],\n        };\n    };\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSheenConfiguration.prototype, \"isEnabled\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSheenConfiguration.prototype, \"linkSheenWithAlbedo\", void 0);\n    __decorate([\n        serialize()\n    ], PBRSheenConfiguration.prototype, \"intensity\", void 0);\n    __decorate([\n        serializeAsColor3()\n    ], PBRSheenConfiguration.prototype, \"color\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSheenConfiguration.prototype, \"texture\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSheenConfiguration.prototype, \"useRoughnessFromMainTexture\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSheenConfiguration.prototype, \"roughness\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSheenConfiguration.prototype, \"textureRoughness\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSheenConfiguration.prototype, \"albedoScaling\", void 0);\n    return PBRSheenConfiguration;\n}(MaterialPluginBase));\nexport { PBRSheenConfiguration };\n//# sourceMappingURL=pbrSheenConfiguration.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize, serializeAsTexture, expandToProperty, serializeAsColor3 } from \"../../Misc/decorators.js\";\nimport { Color3 } from \"../../Maths/math.color.js\";\nimport { MaterialFlags } from \"../materialFlags.js\";\nimport { MaterialHelper } from \"../../Materials/materialHelper.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\nimport { TmpVectors } from \"../../Maths/math.vector.js\";\nimport { MaterialPluginBase } from \"../materialPluginBase.js\";\n\nimport { MaterialDefines } from \"../materialDefines.js\";\n/**\n * @hidden\n */\nvar MaterialSubSurfaceDefines = /** @class */ (function (_super) {\n    __extends(MaterialSubSurfaceDefines, _super);\n    function MaterialSubSurfaceDefines() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.SUBSURFACE = false;\n        _this.SS_REFRACTION = false;\n        _this.SS_REFRACTION_USE_INTENSITY_FROM_TEXTURE = false;\n        _this.SS_TRANSLUCENCY = false;\n        _this.SS_TRANSLUCENCY_USE_INTENSITY_FROM_TEXTURE = false;\n        _this.SS_SCATTERING = false;\n        _this.SS_THICKNESSANDMASK_TEXTURE = false;\n        _this.SS_THICKNESSANDMASK_TEXTUREDIRECTUV = 0;\n        _this.SS_HAS_THICKNESS = false;\n        _this.SS_REFRACTIONINTENSITY_TEXTURE = false;\n        _this.SS_REFRACTIONINTENSITY_TEXTUREDIRECTUV = 0;\n        _this.SS_TRANSLUCENCYINTENSITY_TEXTURE = false;\n        _this.SS_TRANSLUCENCYINTENSITY_TEXTUREDIRECTUV = 0;\n        _this.SS_REFRACTIONMAP_3D = false;\n        _this.SS_REFRACTIONMAP_OPPOSITEZ = false;\n        _this.SS_LODINREFRACTIONALPHA = false;\n        _this.SS_GAMMAREFRACTION = false;\n        _this.SS_RGBDREFRACTION = false;\n        _this.SS_LINEARSPECULARREFRACTION = false;\n        _this.SS_LINKREFRACTIONTOTRANSPARENCY = false;\n        _this.SS_ALBEDOFORREFRACTIONTINT = false;\n        _this.SS_ALBEDOFORTRANSLUCENCYTINT = false;\n        _this.SS_USE_LOCAL_REFRACTIONMAP_CUBIC = false;\n        _this.SS_USE_THICKNESS_AS_DEPTH = false;\n        _this.SS_MASK_FROM_THICKNESS_TEXTURE = false;\n        _this.SS_USE_GLTF_TEXTURES = false;\n        return _this;\n    }\n    return MaterialSubSurfaceDefines;\n}(MaterialDefines));\nexport { MaterialSubSurfaceDefines };\n/**\n * Plugin that implements the sub surface component of the PBR material\n */\nvar PBRSubSurfaceConfiguration = /** @class */ (function (_super) {\n    __extends(PBRSubSurfaceConfiguration, _super);\n    function PBRSubSurfaceConfiguration(material, addToPluginList) {\n        if (addToPluginList === void 0) { addToPluginList = true; }\n        var _this = _super.call(this, material, \"PBRSubSurface\", 130, new MaterialSubSurfaceDefines(), addToPluginList) || this;\n        _this._isRefractionEnabled = false;\n        /**\n         * Defines if the refraction is enabled in the material.\n         */\n        _this.isRefractionEnabled = false;\n        _this._isTranslucencyEnabled = false;\n        /**\n         * Defines if the translucency is enabled in the material.\n         */\n        _this.isTranslucencyEnabled = false;\n        _this._isScatteringEnabled = false;\n        /**\n         * Defines if the sub surface scattering is enabled in the material.\n         */\n        _this.isScatteringEnabled = false;\n        _this._scatteringDiffusionProfileIndex = 0;\n        /**\n         * Defines the refraction intensity of the material.\n         * The refraction when enabled replaces the Diffuse part of the material.\n         * The intensity helps transitioning between diffuse and refraction.\n         */\n        _this.refractionIntensity = 1;\n        /**\n         * Defines the translucency intensity of the material.\n         * When translucency has been enabled, this defines how much of the \"translucency\"\n         * is added to the diffuse part of the material.\n         */\n        _this.translucencyIntensity = 1;\n        /**\n         * When enabled, transparent surfaces will be tinted with the albedo colour (independent of thickness)\n         */\n        _this.useAlbedoToTintRefraction = false;\n        /**\n         * When enabled, translucent surfaces will be tinted with the albedo colour (independent of thickness)\n         */\n        _this.useAlbedoToTintTranslucency = false;\n        _this._thicknessTexture = null;\n        /**\n         * Stores the average thickness of a mesh in a texture (The texture is holding the values linearly).\n         * The red (or green if useGltfStyleTextures=true) channel of the texture should contain the thickness remapped between 0 and 1.\n         * 0 would mean minimumThickness\n         * 1 would mean maximumThickness\n         * The other channels might be use as a mask to vary the different effects intensity.\n         */\n        _this.thicknessTexture = null;\n        _this._refractionTexture = null;\n        /**\n         * Defines the texture to use for refraction.\n         */\n        _this.refractionTexture = null;\n        /** @hidden */\n        _this._indexOfRefraction = 1.5;\n        /**\n         * Index of refraction of the material base layer.\n         * https://en.wikipedia.org/wiki/List_of_refractive_indices\n         *\n         * This does not only impact refraction but also the Base F0 of Dielectric Materials.\n         *\n         * From dielectric fresnel rules: F0 = square((iorT - iorI) / (iorT + iorI))\n         */\n        _this.indexOfRefraction = 1.5;\n        _this._volumeIndexOfRefraction = -1.0;\n        _this._invertRefractionY = false;\n        /**\n         * Controls if refraction needs to be inverted on Y. This could be useful for procedural texture.\n         */\n        _this.invertRefractionY = false;\n        /** @hidden */\n        _this._linkRefractionWithTransparency = false;\n        /**\n         * This parameters will make the material used its opacity to control how much it is refracting against not.\n         * Materials half opaque for instance using refraction could benefit from this control.\n         */\n        _this.linkRefractionWithTransparency = false;\n        /**\n         * Defines the minimum thickness stored in the thickness map.\n         * If no thickness map is defined, this value will be used to simulate thickness.\n         */\n        _this.minimumThickness = 0;\n        /**\n         * Defines the maximum thickness stored in the thickness map.\n         */\n        _this.maximumThickness = 1;\n        /**\n         * Defines that the thickness should be used as a measure of the depth volume.\n         */\n        _this.useThicknessAsDepth = false;\n        /**\n         * Defines the volume tint of the material.\n         * This is used for both translucency and scattering.\n         */\n        _this.tintColor = Color3.White();\n        /**\n         * Defines the distance at which the tint color should be found in the media.\n         * This is used for refraction only.\n         */\n        _this.tintColorAtDistance = 1;\n        /**\n         * Defines how far each channel transmit through the media.\n         * It is defined as a color to simplify it selection.\n         */\n        _this.diffusionDistance = Color3.White();\n        _this._useMaskFromThicknessTexture = false;\n        /**\n         * Stores the intensity of the different subsurface effects in the thickness texture.\n         * Note that if refractionIntensityTexture and/or translucencyIntensityTexture is provided it takes precedence over thicknessTexture + useMaskFromThicknessTexture\n         * * the green (red if useGltfStyleTextures = true) channel is the refraction intensity.\n         * * the blue channel is the translucency intensity.\n         */\n        _this.useMaskFromThicknessTexture = false;\n        _this._refractionIntensityTexture = null;\n        /**\n         * Stores the intensity of the refraction. If provided, it takes precedence over thicknessTexture + useMaskFromThicknessTexture\n         * * the green (red if useGltfStyleTextures = true) channel is the refraction intensity.\n         */\n        _this.refractionIntensityTexture = null;\n        _this._translucencyIntensityTexture = null;\n        /**\n         * Stores the intensity of the translucency. If provided, it takes precedence over thicknessTexture + useMaskFromThicknessTexture\n         * * the blue channel is the translucency intensity.\n         */\n        _this.translucencyIntensityTexture = null;\n        _this._useGltfStyleTextures = false;\n        /**\n         * Use channels layout used by glTF:\n         * * thicknessTexture: the green (instead of red) channel is the thickness\n         * * thicknessTexture/refractionIntensityTexture: the red (instead of green) channel is the refraction intensity\n         * * thicknessTexture/translucencyIntensityTexture: no change, use the blue channel for the translucency intensity\n         */\n        _this.useGltfStyleTextures = false;\n        _this._scene = material.getScene();\n        _this.registerForExtraEvents = true;\n        _this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n        _this._internalMarkScenePrePassDirty = material._dirtyCallbacks[32];\n        return _this;\n    }\n    Object.defineProperty(PBRSubSurfaceConfiguration.prototype, \"scatteringDiffusionProfile\", {\n        /**\n         * Diffusion profile for subsurface scattering.\n         * Useful for better scattering in the skins or foliages.\n         */\n        get: function () {\n            if (!this._scene.subSurfaceConfiguration) {\n                return null;\n            }\n            return this._scene.subSurfaceConfiguration.ssDiffusionProfileColors[this._scatteringDiffusionProfileIndex];\n        },\n        set: function (c) {\n            if (!this._scene.enableSubSurfaceForPrePass()) {\n                // Not supported\n                return;\n            }\n            // addDiffusionProfile automatically checks for doubles\n            if (c) {\n                this._scatteringDiffusionProfileIndex = this._scene.subSurfaceConfiguration.addDiffusionProfile(c);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PBRSubSurfaceConfiguration.prototype, \"volumeIndexOfRefraction\", {\n        /**\n         * Index of refraction of the material's volume.\n         * https://en.wikipedia.org/wiki/List_of_refractive_indices\n         *\n         * This ONLY impacts refraction. If not provided or given a non-valid value,\n         * the volume will use the same IOR as the surface.\n         */\n        get: function () {\n            if (this._volumeIndexOfRefraction >= 1.0) {\n                return this._volumeIndexOfRefraction;\n            }\n            return this._indexOfRefraction;\n        },\n        set: function (value) {\n            if (value >= 1.0) {\n                this._volumeIndexOfRefraction = value;\n            }\n            else {\n                this._volumeIndexOfRefraction = -1.0;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /** @hidden */\n    PBRSubSurfaceConfiguration.prototype._markAllSubMeshesAsTexturesDirty = function () {\n        this._enable(this._isRefractionEnabled || this._isTranslucencyEnabled || this._isScatteringEnabled);\n        this._internalMarkAllSubMeshesAsTexturesDirty();\n    };\n    /** @hidden */\n    PBRSubSurfaceConfiguration.prototype._markScenePrePassDirty = function () {\n        this._internalMarkAllSubMeshesAsTexturesDirty();\n        this._internalMarkScenePrePassDirty();\n    };\n    PBRSubSurfaceConfiguration.prototype.isReadyForSubMesh = function (defines, scene) {\n        if (!this._isRefractionEnabled && !this._isTranslucencyEnabled && !this._isScatteringEnabled) {\n            return true;\n        }\n        if (defines._areTexturesDirty) {\n            if (scene.texturesEnabled) {\n                if (this._thicknessTexture && MaterialFlags.ThicknessTextureEnabled) {\n                    if (!this._thicknessTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n                var refractionTexture = this._getRefractionTexture(scene);\n                if (refractionTexture && MaterialFlags.RefractionTextureEnabled) {\n                    if (!refractionTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    PBRSubSurfaceConfiguration.prototype.prepareDefines = function (defines, scene) {\n        if (!this._isRefractionEnabled && !this._isTranslucencyEnabled && !this._isScatteringEnabled) {\n            defines.SUBSURFACE = false;\n            defines.SS_TRANSLUCENCY = false;\n            defines.SS_SCATTERING = false;\n            defines.SS_REFRACTION = false;\n            return;\n        }\n        if (defines._areTexturesDirty) {\n            defines.SUBSURFACE = true;\n            defines.SS_TRANSLUCENCY = this._isTranslucencyEnabled;\n            defines.SS_TRANSLUCENCY_USE_INTENSITY_FROM_TEXTURE = false;\n            defines.SS_SCATTERING = this._isScatteringEnabled;\n            defines.SS_THICKNESSANDMASK_TEXTURE = false;\n            defines.SS_REFRACTIONINTENSITY_TEXTURE = false;\n            defines.SS_TRANSLUCENCYINTENSITY_TEXTURE = false;\n            defines.SS_HAS_THICKNESS = false;\n            defines.SS_MASK_FROM_THICKNESS_TEXTURE = false;\n            defines.SS_USE_GLTF_TEXTURES = false;\n            defines.SS_REFRACTION = false;\n            defines.SS_REFRACTION_USE_INTENSITY_FROM_TEXTURE = false;\n            defines.SS_REFRACTIONMAP_3D = false;\n            defines.SS_GAMMAREFRACTION = false;\n            defines.SS_RGBDREFRACTION = false;\n            defines.SS_LINEARSPECULARREFRACTION = false;\n            defines.SS_REFRACTIONMAP_OPPOSITEZ = false;\n            defines.SS_LODINREFRACTIONALPHA = false;\n            defines.SS_LINKREFRACTIONTOTRANSPARENCY = false;\n            defines.SS_ALBEDOFORREFRACTIONTINT = false;\n            defines.SS_ALBEDOFORTRANSLUCENCYTINT = false;\n            defines.SS_USE_LOCAL_REFRACTIONMAP_CUBIC = false;\n            defines.SS_USE_THICKNESS_AS_DEPTH = false;\n            var refractionIntensityTextureIsThicknessTexture = !!this._thicknessTexture &&\n                !!this._refractionIntensityTexture &&\n                this._refractionIntensityTexture.checkTransformsAreIdentical(this._thicknessTexture) &&\n                this._refractionIntensityTexture._texture === this._thicknessTexture._texture;\n            var translucencyIntensityTextureIsThicknessTexture = !!this._thicknessTexture &&\n                !!this._translucencyIntensityTexture &&\n                this._translucencyIntensityTexture.checkTransformsAreIdentical(this._thicknessTexture) &&\n                this._translucencyIntensityTexture._texture === this._thicknessTexture._texture;\n            // if true, it means the refraction/translucency textures are the same than the thickness texture so there's no need to pass them to the shader, only thicknessTexture\n            var useOnlyThicknessTexture = (refractionIntensityTextureIsThicknessTexture || !this._refractionIntensityTexture) &&\n                (translucencyIntensityTextureIsThicknessTexture || !this._translucencyIntensityTexture);\n            if (defines._areTexturesDirty) {\n                if (scene.texturesEnabled) {\n                    if (this._thicknessTexture && MaterialFlags.ThicknessTextureEnabled) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._thicknessTexture, defines, \"SS_THICKNESSANDMASK_TEXTURE\");\n                    }\n                    if (this._refractionIntensityTexture && MaterialFlags.RefractionIntensityTextureEnabled && !useOnlyThicknessTexture) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._refractionIntensityTexture, defines, \"SS_REFRACTIONINTENSITY_TEXTURE\");\n                    }\n                    if (this._translucencyIntensityTexture && MaterialFlags.TranslucencyIntensityTextureEnabled && !useOnlyThicknessTexture) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._translucencyIntensityTexture, defines, \"SS_TRANSLUCENCYINTENSITY_TEXTURE\");\n                    }\n                }\n            }\n            defines.SS_HAS_THICKNESS = this.maximumThickness - this.minimumThickness !== 0.0;\n            defines.SS_MASK_FROM_THICKNESS_TEXTURE =\n                (this._useMaskFromThicknessTexture || !!this._refractionIntensityTexture || !!this._translucencyIntensityTexture) && useOnlyThicknessTexture;\n            defines.SS_USE_GLTF_TEXTURES = this._useGltfStyleTextures;\n            defines.SS_REFRACTION_USE_INTENSITY_FROM_TEXTURE = (this._useMaskFromThicknessTexture || !!this._refractionIntensityTexture) && useOnlyThicknessTexture;\n            defines.SS_TRANSLUCENCY_USE_INTENSITY_FROM_TEXTURE = (this._useMaskFromThicknessTexture || !!this._translucencyIntensityTexture) && useOnlyThicknessTexture;\n            if (this._isRefractionEnabled) {\n                if (scene.texturesEnabled) {\n                    var refractionTexture = this._getRefractionTexture(scene);\n                    if (refractionTexture && MaterialFlags.RefractionTextureEnabled) {\n                        defines.SS_REFRACTION = true;\n                        defines.SS_REFRACTIONMAP_3D = refractionTexture.isCube;\n                        defines.SS_GAMMAREFRACTION = refractionTexture.gammaSpace;\n                        defines.SS_RGBDREFRACTION = refractionTexture.isRGBD;\n                        defines.SS_LINEARSPECULARREFRACTION = refractionTexture.linearSpecularLOD;\n                        defines.SS_REFRACTIONMAP_OPPOSITEZ = refractionTexture.invertZ;\n                        defines.SS_LODINREFRACTIONALPHA = refractionTexture.lodLevelInAlpha;\n                        defines.SS_LINKREFRACTIONTOTRANSPARENCY = this._linkRefractionWithTransparency;\n                        defines.SS_ALBEDOFORREFRACTIONTINT = this.useAlbedoToTintRefraction;\n                        defines.SS_USE_LOCAL_REFRACTIONMAP_CUBIC = refractionTexture.isCube && refractionTexture.boundingBoxSize;\n                        defines.SS_USE_THICKNESS_AS_DEPTH = this.useThicknessAsDepth;\n                    }\n                }\n            }\n            if (this._isTranslucencyEnabled) {\n                defines.SS_ALBEDOFORTRANSLUCENCYTINT = this.useAlbedoToTintTranslucency;\n            }\n        }\n    };\n    /**\n     * Binds the material data (this function is called even if mustRebind() returns false)\n     * @param uniformBuffer defines the Uniform buffer to fill in.\n     * @param scene defines the scene the material belongs to.\n     * @param engine defines the engine the material belongs to.\n     * @param subMesh the submesh to bind data for\n     */\n    PBRSubSurfaceConfiguration.prototype.hardBindForSubMesh = function (uniformBuffer, scene, engine, subMesh) {\n        if (!this._isRefractionEnabled && !this._isTranslucencyEnabled && !this._isScatteringEnabled) {\n            return;\n        }\n        subMesh.getRenderingMesh().getWorldMatrix().decompose(TmpVectors.Vector3[0]);\n        var thicknessScale = Math.max(Math.abs(TmpVectors.Vector3[0].x), Math.abs(TmpVectors.Vector3[0].y), Math.abs(TmpVectors.Vector3[0].z));\n        uniformBuffer.updateFloat2(\"vThicknessParam\", this.minimumThickness * thicknessScale, (this.maximumThickness - this.minimumThickness) * thicknessScale);\n    };\n    PBRSubSurfaceConfiguration.prototype.bindForSubMesh = function (uniformBuffer, scene, engine, subMesh) {\n        if (!this._isRefractionEnabled && !this._isTranslucencyEnabled && !this._isScatteringEnabled) {\n            return;\n        }\n        var defines = subMesh.materialDefines;\n        var isFrozen = this._material.isFrozen;\n        var realTimeFiltering = this._material.realTimeFiltering;\n        var lodBasedMicrosurface = defines.LODBASEDMICROSFURACE;\n        var refractionTexture = this._getRefractionTexture(scene);\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n            if (this._thicknessTexture && MaterialFlags.ThicknessTextureEnabled) {\n                uniformBuffer.updateFloat2(\"vThicknessInfos\", this._thicknessTexture.coordinatesIndex, this._thicknessTexture.level);\n                MaterialHelper.BindTextureMatrix(this._thicknessTexture, uniformBuffer, \"thickness\");\n            }\n            if (this._refractionIntensityTexture && MaterialFlags.RefractionIntensityTextureEnabled && defines.SS_REFRACTIONINTENSITY_TEXTURE) {\n                uniformBuffer.updateFloat2(\"vRefractionIntensityInfos\", this._refractionIntensityTexture.coordinatesIndex, this._refractionIntensityTexture.level);\n                MaterialHelper.BindTextureMatrix(this._refractionIntensityTexture, uniformBuffer, \"refractionIntensity\");\n            }\n            if (this._translucencyIntensityTexture && MaterialFlags.TranslucencyIntensityTextureEnabled && defines.SS_TRANSLUCENCYINTENSITY_TEXTURE) {\n                uniformBuffer.updateFloat2(\"vTranslucencyIntensityInfos\", this._translucencyIntensityTexture.coordinatesIndex, this._translucencyIntensityTexture.level);\n                MaterialHelper.BindTextureMatrix(this._translucencyIntensityTexture, uniformBuffer, \"translucencyIntensity\");\n            }\n            if (refractionTexture && MaterialFlags.RefractionTextureEnabled) {\n                uniformBuffer.updateMatrix(\"refractionMatrix\", refractionTexture.getReflectionTextureMatrix());\n                var depth = 1.0;\n                if (!refractionTexture.isCube) {\n                    if (refractionTexture.depth) {\n                        depth = refractionTexture.depth;\n                    }\n                }\n                var width = refractionTexture.getSize().width;\n                var refractionIor = this.volumeIndexOfRefraction;\n                uniformBuffer.updateFloat4(\"vRefractionInfos\", refractionTexture.level, 1 / refractionIor, depth, this._invertRefractionY ? -1 : 1);\n                uniformBuffer.updateFloat4(\"vRefractionMicrosurfaceInfos\", width, refractionTexture.lodGenerationScale, refractionTexture.lodGenerationOffset, 1.0 / this.indexOfRefraction);\n                if (realTimeFiltering) {\n                    uniformBuffer.updateFloat2(\"vRefractionFilteringInfo\", width, Scalar.Log2(width));\n                }\n                if (refractionTexture.boundingBoxSize) {\n                    var cubeTexture = refractionTexture;\n                    uniformBuffer.updateVector3(\"vRefractionPosition\", cubeTexture.boundingBoxPosition);\n                    uniformBuffer.updateVector3(\"vRefractionSize\", cubeTexture.boundingBoxSize);\n                }\n            }\n            if (this._isScatteringEnabled) {\n                uniformBuffer.updateFloat(\"scatteringDiffusionProfile\", this._scatteringDiffusionProfileIndex);\n            }\n            uniformBuffer.updateColor3(\"vDiffusionDistance\", this.diffusionDistance);\n            uniformBuffer.updateFloat4(\"vTintColor\", this.tintColor.r, this.tintColor.g, this.tintColor.b, Math.max(0.00001, this.tintColorAtDistance));\n            uniformBuffer.updateFloat3(\"vSubSurfaceIntensity\", this.refractionIntensity, this.translucencyIntensity, 0);\n        }\n        // Textures\n        if (scene.texturesEnabled) {\n            if (this._thicknessTexture && MaterialFlags.ThicknessTextureEnabled) {\n                uniformBuffer.setTexture(\"thicknessSampler\", this._thicknessTexture);\n            }\n            if (this._refractionIntensityTexture && MaterialFlags.RefractionIntensityTextureEnabled && defines.SS_REFRACTIONINTENSITY_TEXTURE) {\n                uniformBuffer.setTexture(\"refractionIntensitySampler\", this._refractionIntensityTexture);\n            }\n            if (this._translucencyIntensityTexture && MaterialFlags.TranslucencyIntensityTextureEnabled && defines.SS_TRANSLUCENCYINTENSITY_TEXTURE) {\n                uniformBuffer.setTexture(\"translucencyIntensitySampler\", this._translucencyIntensityTexture);\n            }\n            if (refractionTexture && MaterialFlags.RefractionTextureEnabled) {\n                if (lodBasedMicrosurface) {\n                    uniformBuffer.setTexture(\"refractionSampler\", refractionTexture);\n                }\n                else {\n                    uniformBuffer.setTexture(\"refractionSampler\", refractionTexture._lodTextureMid || refractionTexture);\n                    uniformBuffer.setTexture(\"refractionSamplerLow\", refractionTexture._lodTextureLow || refractionTexture);\n                    uniformBuffer.setTexture(\"refractionSamplerHigh\", refractionTexture._lodTextureHigh || refractionTexture);\n                }\n            }\n        }\n    };\n    /**\n     * Returns the texture used for refraction or null if none is used.\n     * @param scene defines the scene the material belongs to.\n     * @returns - Refraction texture if present.  If no refraction texture and refraction\n     * is linked with transparency, returns environment texture.  Otherwise, returns null.\n     */\n    PBRSubSurfaceConfiguration.prototype._getRefractionTexture = function (scene) {\n        if (this._refractionTexture) {\n            return this._refractionTexture;\n        }\n        if (this._isRefractionEnabled) {\n            return scene.environmentTexture;\n        }\n        return null;\n    };\n    Object.defineProperty(PBRSubSurfaceConfiguration.prototype, \"disableAlphaBlending\", {\n        /**\n         * Returns true if alpha blending should be disabled.\n         */\n        get: function () {\n            return this._isRefractionEnabled && this._linkRefractionWithTransparency;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Fills the list of render target textures.\n     * @param renderTargets the list of render targets to update\n     */\n    PBRSubSurfaceConfiguration.prototype.fillRenderTargetTextures = function (renderTargets) {\n        if (MaterialFlags.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\n            renderTargets.push(this._refractionTexture);\n        }\n    };\n    PBRSubSurfaceConfiguration.prototype.hasTexture = function (texture) {\n        if (this._thicknessTexture === texture) {\n            return true;\n        }\n        if (this._refractionTexture === texture) {\n            return true;\n        }\n        return false;\n    };\n    PBRSubSurfaceConfiguration.prototype.hasRenderTargetTextures = function () {\n        if (MaterialFlags.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\n            return true;\n        }\n        return false;\n    };\n    PBRSubSurfaceConfiguration.prototype.getActiveTextures = function (activeTextures) {\n        if (this._thicknessTexture) {\n            activeTextures.push(this._thicknessTexture);\n        }\n        if (this._refractionTexture) {\n            activeTextures.push(this._refractionTexture);\n        }\n    };\n    PBRSubSurfaceConfiguration.prototype.getAnimatables = function (animatables) {\n        if (this._thicknessTexture && this._thicknessTexture.animations && this._thicknessTexture.animations.length > 0) {\n            animatables.push(this._thicknessTexture);\n        }\n        if (this._refractionTexture && this._refractionTexture.animations && this._refractionTexture.animations.length > 0) {\n            animatables.push(this._refractionTexture);\n        }\n    };\n    PBRSubSurfaceConfiguration.prototype.dispose = function (forceDisposeTextures) {\n        if (forceDisposeTextures) {\n            if (this._thicknessTexture) {\n                this._thicknessTexture.dispose();\n            }\n            if (this._refractionTexture) {\n                this._refractionTexture.dispose();\n            }\n        }\n    };\n    PBRSubSurfaceConfiguration.prototype.getClassName = function () {\n        return \"PBRSubSurfaceConfiguration\";\n    };\n    PBRSubSurfaceConfiguration.prototype.addFallbacks = function (defines, fallbacks, currentRank) {\n        if (defines.SS_SCATTERING) {\n            fallbacks.addFallback(currentRank++, \"SS_SCATTERING\");\n        }\n        if (defines.SS_TRANSLUCENCY) {\n            fallbacks.addFallback(currentRank++, \"SS_TRANSLUCENCY\");\n        }\n        return currentRank;\n    };\n    PBRSubSurfaceConfiguration.prototype.getSamplers = function (samplers) {\n        samplers.push(\"thicknessSampler\", \"refractionIntensitySampler\", \"translucencyIntensitySampler\", \"refractionSampler\", \"refractionSamplerLow\", \"refractionSamplerHigh\");\n    };\n    PBRSubSurfaceConfiguration.prototype.getUniforms = function () {\n        return {\n            ubo: [\n                { name: \"vRefractionMicrosurfaceInfos\", size: 4, type: \"vec4\" },\n                { name: \"vRefractionFilteringInfo\", size: 2, type: \"vec2\" },\n                { name: \"vTranslucencyIntensityInfos\", size: 2, type: \"vec2\" },\n                { name: \"vRefractionInfos\", size: 4, type: \"vec4\" },\n                { name: \"refractionMatrix\", size: 16, type: \"mat4\" },\n                { name: \"vThicknessInfos\", size: 2, type: \"vec2\" },\n                { name: \"vRefractionIntensityInfos\", size: 2, type: \"vec2\" },\n                { name: \"thicknessMatrix\", size: 16, type: \"mat4\" },\n                { name: \"refractionIntensityMatrix\", size: 16, type: \"mat4\" },\n                { name: \"translucencyIntensityMatrix\", size: 16, type: \"mat4\" },\n                { name: \"vThicknessParam\", size: 2, type: \"vec2\" },\n                { name: \"vDiffusionDistance\", size: 3, type: \"vec3\" },\n                { name: \"vTintColor\", size: 4, type: \"vec4\" },\n                { name: \"vSubSurfaceIntensity\", size: 3, type: \"vec3\" },\n                { name: \"vRefractionPosition\", size: 3, type: \"vec3\" },\n                { name: \"vRefractionSize\", size: 3, type: \"vec3\" },\n                { name: \"scatteringDiffusionProfile\", size: 1, type: \"float\" },\n            ],\n        };\n    };\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSubSurfaceConfiguration.prototype, \"isRefractionEnabled\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSubSurfaceConfiguration.prototype, \"isTranslucencyEnabled\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markScenePrePassDirty\")\n    ], PBRSubSurfaceConfiguration.prototype, \"isScatteringEnabled\", void 0);\n    __decorate([\n        serialize()\n    ], PBRSubSurfaceConfiguration.prototype, \"_scatteringDiffusionProfileIndex\", void 0);\n    __decorate([\n        serialize()\n    ], PBRSubSurfaceConfiguration.prototype, \"refractionIntensity\", void 0);\n    __decorate([\n        serialize()\n    ], PBRSubSurfaceConfiguration.prototype, \"translucencyIntensity\", void 0);\n    __decorate([\n        serialize()\n    ], PBRSubSurfaceConfiguration.prototype, \"useAlbedoToTintRefraction\", void 0);\n    __decorate([\n        serialize()\n    ], PBRSubSurfaceConfiguration.prototype, \"useAlbedoToTintTranslucency\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSubSurfaceConfiguration.prototype, \"thicknessTexture\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSubSurfaceConfiguration.prototype, \"refractionTexture\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSubSurfaceConfiguration.prototype, \"indexOfRefraction\", void 0);\n    __decorate([\n        serialize()\n    ], PBRSubSurfaceConfiguration.prototype, \"_volumeIndexOfRefraction\", void 0);\n    __decorate([\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSubSurfaceConfiguration.prototype, \"volumeIndexOfRefraction\", null);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSubSurfaceConfiguration.prototype, \"invertRefractionY\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSubSurfaceConfiguration.prototype, \"linkRefractionWithTransparency\", void 0);\n    __decorate([\n        serialize()\n    ], PBRSubSurfaceConfiguration.prototype, \"minimumThickness\", void 0);\n    __decorate([\n        serialize()\n    ], PBRSubSurfaceConfiguration.prototype, \"maximumThickness\", void 0);\n    __decorate([\n        serialize()\n    ], PBRSubSurfaceConfiguration.prototype, \"useThicknessAsDepth\", void 0);\n    __decorate([\n        serializeAsColor3()\n    ], PBRSubSurfaceConfiguration.prototype, \"tintColor\", void 0);\n    __decorate([\n        serialize()\n    ], PBRSubSurfaceConfiguration.prototype, \"tintColorAtDistance\", void 0);\n    __decorate([\n        serializeAsColor3()\n    ], PBRSubSurfaceConfiguration.prototype, \"diffusionDistance\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSubSurfaceConfiguration.prototype, \"useMaskFromThicknessTexture\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSubSurfaceConfiguration.prototype, \"refractionIntensityTexture\", void 0);\n    __decorate([\n        serializeAsTexture(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSubSurfaceConfiguration.prototype, \"translucencyIntensityTexture\", void 0);\n    __decorate([\n        serialize(),\n        expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    ], PBRSubSurfaceConfiguration.prototype, \"useGltfStyleTextures\", void 0);\n    return PBRSubSurfaceConfiguration;\n}(MaterialPluginBase));\nexport { PBRSubSurfaceConfiguration };\n//# sourceMappingURL=pbrSubSurfaceConfiguration.js.map","import { Vector3 } from \"../../../Maths/math.js\";\nimport { Scalar } from \"../../../Maths/math.scalar.js\";\n\nimport { EffectWrapper, EffectRenderer } from \"../../../Materials/effectRenderer.js\";\nimport \"../../../Shaders/hdrFiltering.vertex.js\";\nimport \"../../../Shaders/hdrFiltering.fragment.js\";\nimport { Logger } from \"../../../Misc/logger.js\";\n/**\n * Filters HDR maps to get correct renderings of PBR reflections\n */\nvar HDRFiltering = /** @class */ (function () {\n    /**\n     * Instantiates HDR filter for reflection maps\n     *\n     * @param engine Thin engine\n     * @param options Options\n     */\n    function HDRFiltering(engine, options) {\n        if (options === void 0) { options = {}; }\n        this._lodGenerationOffset = 0;\n        this._lodGenerationScale = 0.8;\n        /**\n         * Quality switch for prefiltering. Should be set to `4096` unless\n         * you care about baking speed.\n         */\n        this.quality = 4096;\n        /**\n         * Scales pixel intensity for the input HDR map.\n         */\n        this.hdrScale = 1;\n        // pass\n        this._engine = engine;\n        this.hdrScale = options.hdrScale || this.hdrScale;\n        this.quality = options.quality || this.quality;\n    }\n    HDRFiltering.prototype._createRenderTarget = function (size) {\n        var textureType = 0;\n        if (this._engine.getCaps().textureHalfFloatRender) {\n            textureType = 2;\n        }\n        else if (this._engine.getCaps().textureFloatRender) {\n            textureType = 1;\n        }\n        var rtWrapper = this._engine.createRenderTargetCubeTexture(size, {\n            format: 5,\n            type: textureType,\n            createMipMaps: true,\n            generateMipMaps: false,\n            generateDepthBuffer: false,\n            generateStencilBuffer: false,\n            samplingMode: 1,\n        });\n        this._engine.updateTextureWrappingMode(rtWrapper.texture, 0, 0, 0);\n        this._engine.updateTextureSamplingMode(3, rtWrapper.texture, true);\n        return rtWrapper;\n    };\n    HDRFiltering.prototype._prefilterInternal = function (texture) {\n        var width = texture.getSize().width;\n        var mipmapsCount = Scalar.ILog2(width) + 1;\n        var effect = this._effectWrapper.effect;\n        var outputTexture = this._createRenderTarget(width);\n        this._effectRenderer.setViewport();\n        var intTexture = texture.getInternalTexture();\n        if (intTexture) {\n            // Just in case generate fresh clean mips.\n            this._engine.updateTextureSamplingMode(3, intTexture, true);\n        }\n        this._effectRenderer.applyEffectWrapper(this._effectWrapper);\n        var directions = [\n            [new Vector3(0, 0, -1), new Vector3(0, -1, 0), new Vector3(1, 0, 0)],\n            [new Vector3(0, 0, 1), new Vector3(0, -1, 0), new Vector3(-1, 0, 0)],\n            [new Vector3(1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 1, 0)],\n            [new Vector3(1, 0, 0), new Vector3(0, 0, -1), new Vector3(0, -1, 0)],\n            [new Vector3(1, 0, 0), new Vector3(0, -1, 0), new Vector3(0, 0, 1)],\n            [new Vector3(-1, 0, 0), new Vector3(0, -1, 0), new Vector3(0, 0, -1)], // NegativeZ\n        ];\n        effect.setFloat(\"hdrScale\", this.hdrScale);\n        effect.setFloat2(\"vFilteringInfo\", texture.getSize().width, mipmapsCount);\n        effect.setTexture(\"inputTexture\", texture);\n        for (var face = 0; face < 6; face++) {\n            effect.setVector3(\"up\", directions[face][0]);\n            effect.setVector3(\"right\", directions[face][1]);\n            effect.setVector3(\"front\", directions[face][2]);\n            for (var lod = 0; lod < mipmapsCount; lod++) {\n                this._engine.bindFramebuffer(outputTexture, face, undefined, undefined, true, lod);\n                this._effectRenderer.applyEffectWrapper(this._effectWrapper);\n                var alpha = Math.pow(2, (lod - this._lodGenerationOffset) / this._lodGenerationScale) / width;\n                if (lod === 0) {\n                    alpha = 0;\n                }\n                effect.setFloat(\"alphaG\", alpha);\n                this._effectRenderer.draw();\n            }\n        }\n        // Cleanup\n        this._effectRenderer.restoreStates();\n        this._engine.restoreDefaultFramebuffer();\n        this._engine._releaseTexture(texture._texture);\n        // Internal Swap\n        outputTexture._swapAndDie(texture._texture);\n        texture._prefiltered = true;\n        return texture;\n    };\n    HDRFiltering.prototype._createEffect = function (texture, onCompiled) {\n        var defines = [];\n        if (texture.gammaSpace) {\n            defines.push(\"#define GAMMA_INPUT\");\n        }\n        defines.push(\"#define NUM_SAMPLES \" + this.quality + \"u\"); // unsigned int\n        var effectWrapper = new EffectWrapper({\n            engine: this._engine,\n            name: \"hdrFiltering\",\n            vertexShader: \"hdrFiltering\",\n            fragmentShader: \"hdrFiltering\",\n            samplerNames: [\"inputTexture\"],\n            uniformNames: [\"vSampleDirections\", \"vWeights\", \"up\", \"right\", \"front\", \"vFilteringInfo\", \"hdrScale\", \"alphaG\"],\n            useShaderStore: true,\n            defines: defines,\n            onCompiled: onCompiled,\n        });\n        return effectWrapper;\n    };\n    /**\n     * Get a value indicating if the filter is ready to be used\n     * @param texture Texture to filter\n     * @returns true if the filter is ready\n     */\n    HDRFiltering.prototype.isReady = function (texture) {\n        return texture.isReady() && this._effectWrapper.effect.isReady();\n    };\n    /**\n     * Prefilters a cube texture to have mipmap levels representing roughness values.\n     * Prefiltering will be invoked at the end of next rendering pass.\n     * This has to be done once the map is loaded, and has not been prefiltered by a third party software.\n     * See http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf for more information\n     * @param texture Texture to filter\n     * @param onFinished Callback when filtering is done\n     * @return Promise called when prefiltering is done\n     */\n    HDRFiltering.prototype.prefilter = function (texture, onFinished) {\n        var _this = this;\n        if (onFinished === void 0) { onFinished = null; }\n        if (!this._engine._features.allowTexturePrefiltering) {\n            Logger.Warn(\"HDR prefiltering is not available in WebGL 1., you can use real time filtering instead.\");\n            return Promise.reject(\"HDR prefiltering is not available in WebGL 1., you can use real time filtering instead.\");\n        }\n        return new Promise(function (resolve) {\n            _this._effectRenderer = new EffectRenderer(_this._engine);\n            _this._effectWrapper = _this._createEffect(texture);\n            _this._effectWrapper.effect.executeWhenCompiled(function () {\n                _this._prefilterInternal(texture);\n                _this._effectRenderer.dispose();\n                _this._effectWrapper.dispose();\n                resolve();\n                if (onFinished) {\n                    onFinished();\n                }\n            });\n        });\n    };\n    return HDRFiltering;\n}());\nexport { HDRFiltering };\n//# sourceMappingURL=hdrFiltering.js.map","import { SphericalPolynomial } from \"../../../Maths/sphericalPolynomial.js\";\nimport { Engine } from \"../../../Engines/engine.js\";\nimport { DDSTools } from \"../../../Misc/dds.js\";\n/**\n * Implementation of the DDS Texture Loader.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nvar _DDSTextureLoader = /** @class */ (function () {\n    function _DDSTextureLoader() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = true;\n    }\n    /**\n     * This returns if the loader support the current file information.\n     * @param extension defines the file extension of the file being loaded\n     * @returns true if the loader can load the specified file\n     */\n    _DDSTextureLoader.prototype.canLoad = function (extension) {\n        return extension.endsWith(\".dds\");\n    };\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param imgs contains the cube maps\n     * @param texture defines the BabylonJS internal texture\n     * @param createPolynomials will be true if polynomials have been requested\n     * @param onLoad defines the callback to trigger once the texture is ready\n     */\n    _DDSTextureLoader.prototype.loadCubeData = function (imgs, texture, createPolynomials, onLoad) {\n        var engine = texture.getEngine();\n        var info;\n        var loadMipmap = false;\n        var maxLevel = 1000;\n        if (Array.isArray(imgs)) {\n            for (var index = 0; index < imgs.length; index++) {\n                var data = imgs[index];\n                info = DDSTools.GetDDSInfo(data);\n                texture.width = info.width;\n                texture.height = info.height;\n                loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\n                engine._unpackFlipY(info.isCompressed);\n                DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6, -1, index);\n                if (!info.isFourCC && info.mipmapCount === 1) {\n                    engine.generateMipMapsForCubemap(texture);\n                }\n                else {\n                    maxLevel = info.mipmapCount - 1;\n                }\n            }\n        }\n        else {\n            var data = imgs;\n            info = DDSTools.GetDDSInfo(data);\n            texture.width = info.width;\n            texture.height = info.height;\n            if (createPolynomials) {\n                info.sphericalPolynomial = new SphericalPolynomial();\n            }\n            loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\n            engine._unpackFlipY(info.isCompressed);\n            DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6);\n            if (!info.isFourCC && info.mipmapCount === 1) {\n                // Do not unbind as we still need to set the parameters.\n                engine.generateMipMapsForCubemap(texture, false);\n            }\n            else {\n                maxLevel = info.mipmapCount - 1;\n            }\n        }\n        engine._setCubeMapTextureParams(texture, loadMipmap, maxLevel);\n        texture.isReady = true;\n        texture.onLoadedObservable.notifyObservers(texture);\n        texture.onLoadedObservable.clear();\n        if (onLoad) {\n            onLoad({ isDDS: true, width: texture.width, info: info, data: imgs, texture: texture });\n        }\n    };\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    _DDSTextureLoader.prototype.loadData = function (data, texture, callback) {\n        var info = DDSTools.GetDDSInfo(data);\n        var loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps && info.width >> (info.mipmapCount - 1) === 1;\n        callback(info.width, info.height, loadMipmap, info.isFourCC, function () {\n            DDSTools.UploadDDSLevels(texture.getEngine(), texture, data, info, loadMipmap, 1);\n        });\n    };\n    return _DDSTextureLoader;\n}());\nexport { _DDSTextureLoader };\n// Register the loader.\nEngine._TextureLoaders.push(new _DDSTextureLoader());\n//# sourceMappingURL=ddsTextureLoader.js.map","import { GetEnvInfo, UploadEnvLevelsAsync, UploadEnvSpherical } from \"../../../Misc/environmentTextureTools.js\";\nimport { Engine } from \"../../../Engines/engine.js\";\n/**\n * Implementation of the ENV Texture Loader.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nvar _ENVTextureLoader = /** @class */ (function () {\n    function _ENVTextureLoader() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * This returns if the loader support the current file information.\n     * @param extension defines the file extension of the file being loaded\n     * @returns true if the loader can load the specified file\n     */\n    _ENVTextureLoader.prototype.canLoad = function (extension) {\n        return extension.endsWith(\".env\");\n    };\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param createPolynomials will be true if polynomials have been requested\n     * @param onLoad defines the callback to trigger once the texture is ready\n     * @param onError defines the callback to trigger in case of error\n     */\n    _ENVTextureLoader.prototype.loadCubeData = function (data, texture, createPolynomials, onLoad, onError) {\n        if (Array.isArray(data)) {\n            return;\n        }\n        var info = GetEnvInfo(data);\n        if (info) {\n            texture.width = info.width;\n            texture.height = info.width;\n            try {\n                UploadEnvSpherical(texture, info);\n                UploadEnvLevelsAsync(texture, data, info).then(function () {\n                    texture.isReady = true;\n                    texture.onLoadedObservable.notifyObservers(texture);\n                    texture.onLoadedObservable.clear();\n                    if (onLoad) {\n                        onLoad();\n                    }\n                }, function (reason) {\n                    onError === null || onError === void 0 ? void 0 : onError(\"Can not upload environment levels\", reason);\n                });\n            }\n            catch (e) {\n                onError === null || onError === void 0 ? void 0 : onError(\"Can not upload environment file\", e);\n            }\n        }\n        else if (onError) {\n            onError(\"Can not parse the environment file\", null);\n        }\n    };\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     */\n    _ENVTextureLoader.prototype.loadData = function () {\n        throw \".env not supported in 2d.\";\n    };\n    return _ENVTextureLoader;\n}());\nexport { _ENVTextureLoader };\n// Register the loader.\nEngine._TextureLoaders.push(new _ENVTextureLoader());\n//# sourceMappingURL=envTextureLoader.js.map","import { KhronosTextureContainer } from \"../../../Misc/khronosTextureContainer.js\";\nimport { KhronosTextureContainer2 } from \"../../../Misc/khronosTextureContainer2.js\";\nimport { Engine } from \"../../../Engines/engine.js\";\nimport { Logger } from \"../../../Misc/logger.js\";\n\nfunction mapSRGBToLinear(format) {\n    switch (format) {\n        case 35916:\n            return 33776;\n        case 35918:\n            return 33778;\n        case 35919:\n            return 33779;\n        case 37493:\n            return 37492;\n        case 37497:\n            return 37496;\n        case 37495:\n            return 37494;\n        case 37840:\n            return 37808;\n        case 36493:\n            return 36492;\n    }\n    return null;\n}\n/**\n * Implementation of the KTX Texture Loader.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nvar _KTXTextureLoader = /** @class */ (function () {\n    function _KTXTextureLoader() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * This returns if the loader support the current file information.\n     * @param extension defines the file extension of the file being loaded\n     * @param mimeType defines the optional mime type of the file being loaded\n     * @returns true if the loader can load the specified file\n     */\n    _KTXTextureLoader.prototype.canLoad = function (extension, mimeType) {\n        // The \".ktx2\" file extension is still up for debate: https://github.com/KhronosGroup/KTX-Specification/issues/18\n        return extension.endsWith(\".ktx\") || extension.endsWith(\".ktx2\") || mimeType === \"image/ktx\" || mimeType === \"image/ktx2\";\n    };\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param createPolynomials will be true if polynomials have been requested\n     * @param onLoad defines the callback to trigger once the texture is ready\n     */\n    _KTXTextureLoader.prototype.loadCubeData = function (data, texture, createPolynomials, onLoad) {\n        if (Array.isArray(data)) {\n            return;\n        }\n        // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\n        texture._invertVScale = !texture.invertY;\n        var engine = texture.getEngine();\n        var ktx = new KhronosTextureContainer(data, 6);\n        var loadMipmap = ktx.numberOfMipmapLevels > 1 && texture.generateMipMaps;\n        engine._unpackFlipY(true);\n        ktx.uploadLevels(texture, texture.generateMipMaps);\n        texture.width = ktx.pixelWidth;\n        texture.height = ktx.pixelHeight;\n        engine._setCubeMapTextureParams(texture, loadMipmap, ktx.numberOfMipmapLevels - 1);\n        texture.isReady = true;\n        texture.onLoadedObservable.notifyObservers(texture);\n        texture.onLoadedObservable.clear();\n        if (onLoad) {\n            onLoad();\n        }\n    };\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     * @param options\n     */\n    _KTXTextureLoader.prototype.loadData = function (data, texture, callback, options) {\n        if (KhronosTextureContainer.IsValid(data)) {\n            // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\n            texture._invertVScale = !texture.invertY;\n            var ktx_1 = new KhronosTextureContainer(data, 1);\n            var mappedFormat = mapSRGBToLinear(ktx_1.glInternalFormat);\n            if (mappedFormat) {\n                texture.format = mappedFormat;\n                texture._useSRGBBuffer = texture.getEngine()._getUseSRGBBuffer(true, texture.generateMipMaps);\n                texture._gammaSpace = true;\n            }\n            else {\n                texture.format = ktx_1.glInternalFormat;\n            }\n            callback(ktx_1.pixelWidth, ktx_1.pixelHeight, texture.generateMipMaps, true, function () {\n                ktx_1.uploadLevels(texture, texture.generateMipMaps);\n            }, ktx_1.isInvalid);\n        }\n        else if (KhronosTextureContainer2.IsValid(data)) {\n            var ktx2 = new KhronosTextureContainer2(texture.getEngine());\n            ktx2.uploadAsync(data, texture, options).then(function () {\n                callback(texture.width, texture.height, texture.generateMipMaps, true, function () { }, false);\n            }, function (error) {\n                Logger.Warn(\"Failed to load KTX2 texture data: \".concat(error.message));\n                callback(0, 0, false, false, function () { }, true);\n            });\n        }\n        else {\n            Logger.Error(\"texture missing KTX identifier\");\n            callback(0, 0, false, false, function () { }, true);\n        }\n    };\n    return _KTXTextureLoader;\n}());\nexport { _KTXTextureLoader };\n// Register the loader.\nEngine._TextureLoaders.unshift(new _KTXTextureLoader());\n//# sourceMappingURL=ktxTextureLoader.js.map","import { __extends } from \"tslib\";\nimport { RenderTargetTexture } from \"../Textures/renderTargetTexture.js\";\n\n/**\n * Renders to multiple views with a single draw call\n * @see https://www.khronos.org/registry/webgl/extensions/OVR_multiview2/\n */\nvar MultiviewRenderTarget = /** @class */ (function (_super) {\n    __extends(MultiviewRenderTarget, _super);\n    /**\n     * Creates a multiview render target\n     * @param scene scene used with the render target\n     * @param size the size of the render target (used for each view)\n     */\n    function MultiviewRenderTarget(scene, size) {\n        if (size === void 0) { size = 512; }\n        var _this = _super.call(this, \"multiview rtt\", size, scene, false, true, 0, false, undefined, false, false, true, undefined, true) || this;\n        _this._renderTarget = _this.getScene().getEngine().createMultiviewRenderTargetTexture(_this.getRenderWidth(), _this.getRenderHeight());\n        _this._texture = _this._renderTarget.texture;\n        _this._texture.isMultiview = true;\n        _this._texture.format = 5;\n        _this.samples = _this._getEngine().getCaps().maxSamples || _this.samples;\n        _this._texture.samples = _this._samples;\n        return _this;\n    }\n    Object.defineProperty(MultiviewRenderTarget.prototype, \"samples\", {\n        set: function (value) {\n            // We override this setter because multisampling is handled by framebufferTextureMultisampleMultiviewOVR\n            this._samples = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    MultiviewRenderTarget.prototype._bindFrameBuffer = function () {\n        if (!this._renderTarget) {\n            return;\n        }\n        this.getScene().getEngine().bindMultiviewFramebuffer(this._renderTarget);\n    };\n    /**\n     * Gets the number of views the corresponding to the texture (eg. a MultiviewRenderTarget will have > 1)\n     * @returns the view count\n     */\n    MultiviewRenderTarget.prototype.getViewCount = function () {\n        return 2;\n    };\n    return MultiviewRenderTarget;\n}(RenderTargetTexture));\nexport { MultiviewRenderTarget };\n//# sourceMappingURL=MultiviewRenderTarget.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize } from \"../../../Misc/decorators.js\";\nimport { Observable } from \"../../../Misc/observable.js\";\nimport { VertexBuffer } from \"../../../Buffers/buffer.js\";\nimport { SceneComponentConstants } from \"../../../sceneComponent.js\";\nimport { Material } from \"../../../Materials/material.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { RenderTargetTexture } from \"../../../Materials/Textures/renderTargetTexture.js\";\nimport { ProceduralTextureSceneComponent } from \"./proceduralTextureSceneComponent.js\";\nimport \"../../../Engines/Extensions/engine.renderTarget.js\";\nimport \"../../../Engines/Extensions/engine.renderTargetCube.js\";\nimport \"../../../Shaders/procedural.vertex.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { EngineStore } from \"../../../Engines/engineStore.js\";\n\nimport { DrawWrapper } from \"../../drawWrapper.js\";\n/**\n * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes calmpler' images.\n * This is the base class of any Procedural texture and contains most of the shareable code.\n * @see https://doc.babylonjs.com/how_to/how_to_use_procedural_textures\n */\nvar ProceduralTexture = /** @class */ (function (_super) {\n    __extends(ProceduralTexture, _super);\n    /**\n     * Instantiates a new procedural texture.\n     * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\n     * This is the base class of any Procedural texture and contains most of the shareable code.\n     * @see https://doc.babylonjs.com/how_to/how_to_use_procedural_textures\n     * @param name  Define the name of the texture\n     * @param size Define the size of the texture to create\n     * @param fragment Define the fragment shader to use to generate the texture or null if it is defined later\n     * @param scene Define the scene the texture belongs to\n     * @param fallbackTexture Define a fallback texture in case there were issues to create the custom texture\n     * @param generateMipMaps Define if the texture should creates mip maps or not\n     * @param isCube Define if the texture is a cube texture or not (this will render each faces of the cube)\n     * @param textureType The FBO internal texture type\n     */\n    function ProceduralTexture(name, size, fragment, scene, fallbackTexture, generateMipMaps, isCube, textureType) {\n        if (fallbackTexture === void 0) { fallbackTexture = null; }\n        if (generateMipMaps === void 0) { generateMipMaps = true; }\n        if (isCube === void 0) { isCube = false; }\n        if (textureType === void 0) { textureType = 0; }\n        var _this = _super.call(this, null, scene, !generateMipMaps) || this;\n        /**\n         * Define if the texture is enabled or not (disabled texture will not render)\n         */\n        _this.isEnabled = true;\n        /**\n         * Define if the texture must be cleared before rendering (default is true)\n         */\n        _this.autoClear = true;\n        /**\n         * Event raised when the texture is generated\n         */\n        _this.onGeneratedObservable = new Observable();\n        /**\n         * Event raised before the texture is generated\n         */\n        _this.onBeforeGenerationObservable = new Observable();\n        /**\n         * Gets or sets the node material used to create this texture (null if the texture was manually created)\n         */\n        _this.nodeMaterialSource = null;\n        /** @hidden */\n        _this._textures = {};\n        _this._currentRefreshId = -1;\n        _this._frameId = -1;\n        _this._refreshRate = 1;\n        _this._vertexBuffers = {};\n        _this._uniforms = new Array();\n        _this._samplers = new Array();\n        _this._floats = {};\n        _this._ints = {};\n        _this._floatsArrays = {};\n        _this._colors3 = {};\n        _this._colors4 = {};\n        _this._vectors2 = {};\n        _this._vectors3 = {};\n        _this._matrices = {};\n        _this._fallbackTextureUsed = false;\n        _this._cachedDefines = null;\n        _this._contentUpdateId = -1;\n        _this._rtWrapper = null;\n        scene = _this.getScene() || EngineStore.LastCreatedScene;\n        var component = scene._getComponent(SceneComponentConstants.NAME_PROCEDURALTEXTURE);\n        if (!component) {\n            component = new ProceduralTextureSceneComponent(scene);\n            scene._addComponent(component);\n        }\n        scene.proceduralTextures.push(_this);\n        _this._fullEngine = scene.getEngine();\n        _this.name = name;\n        _this.isRenderTarget = true;\n        _this._size = size;\n        _this._textureType = textureType;\n        _this._generateMipMaps = generateMipMaps;\n        _this._drawWrapper = new DrawWrapper(_this._fullEngine);\n        _this.setFragment(fragment);\n        _this._fallbackTexture = fallbackTexture;\n        var rtWrapper = _this._createRtWrapper(isCube, size, generateMipMaps, textureType);\n        _this._texture = rtWrapper.texture;\n        // VBO\n        var vertices = [];\n        vertices.push(1, 1);\n        vertices.push(-1, 1);\n        vertices.push(-1, -1);\n        vertices.push(1, -1);\n        _this._vertexBuffers[VertexBuffer.PositionKind] = new VertexBuffer(_this._fullEngine, vertices, VertexBuffer.PositionKind, false, false, 2);\n        _this._createIndexBuffer();\n        return _this;\n    }\n    ProceduralTexture.prototype._createRtWrapper = function (isCube, size, generateMipMaps, textureType) {\n        if (isCube) {\n            this._rtWrapper = this._fullEngine.createRenderTargetCubeTexture(size, {\n                generateMipMaps: generateMipMaps,\n                generateDepthBuffer: false,\n                generateStencilBuffer: false,\n                type: textureType,\n            });\n            this.setFloat(\"face\", 0);\n        }\n        else {\n            this._rtWrapper = this._fullEngine.createRenderTargetTexture(size, {\n                generateMipMaps: generateMipMaps,\n                generateDepthBuffer: false,\n                generateStencilBuffer: false,\n                type: textureType,\n            });\n        }\n        return this._rtWrapper;\n    };\n    /**\n     * The effect that is created when initializing the post process.\n     * @returns The created effect corresponding the the postprocess.\n     */\n    ProceduralTexture.prototype.getEffect = function () {\n        return this._drawWrapper.effect;\n    };\n    /**\n     * @param effect\n     * @hidden*\n     */\n    ProceduralTexture.prototype._setEffect = function (effect) {\n        this._drawWrapper.effect = effect;\n    };\n    /**\n     * Gets texture content (Use this function wisely as reading from a texture can be slow)\n     * @returns an ArrayBufferView promise (Uint8Array or Float32Array)\n     */\n    ProceduralTexture.prototype.getContent = function () {\n        var _this = this;\n        if (this._contentData && this._frameId === this._contentUpdateId) {\n            return this._contentData;\n        }\n        if (this._contentData) {\n            this._contentData.then(function (buffer) {\n                _this._contentData = _this.readPixels(0, 0, buffer);\n                _this._contentUpdateId = _this._frameId;\n            });\n        }\n        else {\n            this._contentData = this.readPixels(0, 0);\n            this._contentUpdateId = this._frameId;\n        }\n        return this._contentData;\n    };\n    ProceduralTexture.prototype._createIndexBuffer = function () {\n        var engine = this._fullEngine;\n        // Indices\n        var indices = [];\n        indices.push(0);\n        indices.push(1);\n        indices.push(2);\n        indices.push(0);\n        indices.push(2);\n        indices.push(3);\n        this._indexBuffer = engine.createIndexBuffer(indices);\n    };\n    /** @hidden */\n    ProceduralTexture.prototype._rebuild = function () {\n        var vb = this._vertexBuffers[VertexBuffer.PositionKind];\n        if (vb) {\n            vb._rebuild();\n        }\n        this._createIndexBuffer();\n        if (this.refreshRate === RenderTargetTexture.REFRESHRATE_RENDER_ONCE) {\n            this.refreshRate = RenderTargetTexture.REFRESHRATE_RENDER_ONCE;\n        }\n    };\n    /**\n     * Resets the texture in order to recreate its associated resources.\n     * This can be called in case of context loss\n     */\n    ProceduralTexture.prototype.reset = function () {\n        var _a;\n        (_a = this._drawWrapper.effect) === null || _a === void 0 ? void 0 : _a.dispose();\n    };\n    ProceduralTexture.prototype._getDefines = function () {\n        return \"\";\n    };\n    /**\n     * Is the texture ready to be used ? (rendered at least once)\n     * @returns true if ready, otherwise, false.\n     */\n    ProceduralTexture.prototype.isReady = function () {\n        var _this = this;\n        var engine = this._fullEngine;\n        var shaders;\n        if (this.nodeMaterialSource) {\n            return this._drawWrapper.effect.isReady();\n        }\n        if (!this._fragment) {\n            return false;\n        }\n        if (this._fallbackTextureUsed) {\n            return true;\n        }\n        if (!this._texture) {\n            return false;\n        }\n        var defines = this._getDefines();\n        if (this._drawWrapper.effect && defines === this._cachedDefines && this._drawWrapper.effect.isReady()) {\n            return true;\n        }\n        if (this._fragment.fragmentElement !== undefined) {\n            shaders = { vertex: \"procedural\", fragmentElement: this._fragment.fragmentElement };\n        }\n        else {\n            shaders = { vertex: \"procedural\", fragment: this._fragment };\n        }\n        if (this._cachedDefines !== defines) {\n            this._cachedDefines = defines;\n            this._drawWrapper.effect = engine.createEffect(shaders, [VertexBuffer.PositionKind], this._uniforms, this._samplers, defines, undefined, undefined, function () {\n                var _a;\n                (_a = _this._rtWrapper) === null || _a === void 0 ? void 0 : _a.dispose();\n                _this._rtWrapper = _this._texture = null;\n                if (_this._fallbackTexture) {\n                    _this._texture = _this._fallbackTexture._texture;\n                    if (_this._texture) {\n                        _this._texture.incrementReferences();\n                    }\n                }\n                _this._fallbackTextureUsed = true;\n            });\n        }\n        return this._drawWrapper.effect.isReady();\n    };\n    /**\n     * Resets the refresh counter of the texture and start bak from scratch.\n     * Could be useful to regenerate the texture if it is setup to render only once.\n     */\n    ProceduralTexture.prototype.resetRefreshCounter = function () {\n        this._currentRefreshId = -1;\n    };\n    /**\n     * Set the fragment shader to use in order to render the texture.\n     * @param fragment This can be set to a path (into the shader store) or to a json object containing a fragmentElement property.\n     */\n    ProceduralTexture.prototype.setFragment = function (fragment) {\n        this._fragment = fragment;\n    };\n    Object.defineProperty(ProceduralTexture.prototype, \"refreshRate\", {\n        /**\n         * Define the refresh rate of the texture or the rendering frequency.\n         * Use 0 to render just once, 1 to render on every frame, 2 to render every two frames and so on...\n         */\n        get: function () {\n            return this._refreshRate;\n        },\n        set: function (value) {\n            this._refreshRate = value;\n            this.resetRefreshCounter();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /** @hidden */\n    ProceduralTexture.prototype._shouldRender = function () {\n        if (!this.isEnabled || !this.isReady() || !this._texture) {\n            if (this._texture) {\n                this._texture.isReady = false;\n            }\n            return false;\n        }\n        if (this._fallbackTextureUsed) {\n            return false;\n        }\n        if (this._currentRefreshId === -1) {\n            // At least render once\n            this._currentRefreshId = 1;\n            this._frameId++;\n            return true;\n        }\n        if (this.refreshRate === this._currentRefreshId) {\n            this._currentRefreshId = 1;\n            this._frameId++;\n            return true;\n        }\n        this._currentRefreshId++;\n        return false;\n    };\n    /**\n     * Get the size the texture is rendering at.\n     * @returns the size (on cube texture it is always squared)\n     */\n    ProceduralTexture.prototype.getRenderSize = function () {\n        return this._size;\n    };\n    /**\n     * Resize the texture to new value.\n     * @param size Define the new size the texture should have\n     * @param generateMipMaps Define whether the new texture should create mip maps\n     */\n    ProceduralTexture.prototype.resize = function (size, generateMipMaps) {\n        if (this._fallbackTextureUsed || !this._rtWrapper || !this._texture) {\n            return;\n        }\n        var isCube = this._texture.isCube;\n        this._rtWrapper.dispose();\n        var rtWrapper = this._createRtWrapper(isCube, size, generateMipMaps, this._textureType);\n        this._texture = rtWrapper.texture;\n        // Update properties\n        this._size = size;\n        this._generateMipMaps = generateMipMaps;\n    };\n    ProceduralTexture.prototype._checkUniform = function (uniformName) {\n        if (this._uniforms.indexOf(uniformName) === -1) {\n            this._uniforms.push(uniformName);\n        }\n    };\n    /**\n     * Set a texture in the shader program used to render.\n     * @param name Define the name of the uniform samplers as defined in the shader\n     * @param texture Define the texture to bind to this sampler\n     * @return the texture itself allowing \"fluent\" like uniform updates\n     */\n    ProceduralTexture.prototype.setTexture = function (name, texture) {\n        if (this._samplers.indexOf(name) === -1) {\n            this._samplers.push(name);\n        }\n        this._textures[name] = texture;\n        return this;\n    };\n    /**\n     * Set a float in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the texture itself allowing \"fluent\" like uniform updates\n     */\n    ProceduralTexture.prototype.setFloat = function (name, value) {\n        this._checkUniform(name);\n        this._floats[name] = value;\n        return this;\n    };\n    /**\n     * Set a int in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the texture itself allowing \"fluent\" like uniform updates\n     */\n    ProceduralTexture.prototype.setInt = function (name, value) {\n        this._checkUniform(name);\n        this._ints[name] = value;\n        return this;\n    };\n    /**\n     * Set an array of floats in the shader.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the texture itself allowing \"fluent\" like uniform updates\n     */\n    ProceduralTexture.prototype.setFloats = function (name, value) {\n        this._checkUniform(name);\n        this._floatsArrays[name] = value;\n        return this;\n    };\n    /**\n     * Set a vec3 in the shader from a Color3.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the texture itself allowing \"fluent\" like uniform updates\n     */\n    ProceduralTexture.prototype.setColor3 = function (name, value) {\n        this._checkUniform(name);\n        this._colors3[name] = value;\n        return this;\n    };\n    /**\n     * Set a vec4 in the shader from a Color4.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the texture itself allowing \"fluent\" like uniform updates\n     */\n    ProceduralTexture.prototype.setColor4 = function (name, value) {\n        this._checkUniform(name);\n        this._colors4[name] = value;\n        return this;\n    };\n    /**\n     * Set a vec2 in the shader from a Vector2.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the texture itself allowing \"fluent\" like uniform updates\n     */\n    ProceduralTexture.prototype.setVector2 = function (name, value) {\n        this._checkUniform(name);\n        this._vectors2[name] = value;\n        return this;\n    };\n    /**\n     * Set a vec3 in the shader from a Vector3.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the texture itself allowing \"fluent\" like uniform updates\n     */\n    ProceduralTexture.prototype.setVector3 = function (name, value) {\n        this._checkUniform(name);\n        this._vectors3[name] = value;\n        return this;\n    };\n    /**\n     * Set a mat4 in the shader from a MAtrix.\n     * @param name Define the name of the uniform as defined in the shader\n     * @param value Define the value to give to the uniform\n     * @return the texture itself allowing \"fluent\" like uniform updates\n     */\n    ProceduralTexture.prototype.setMatrix = function (name, value) {\n        this._checkUniform(name);\n        this._matrices[name] = value;\n        return this;\n    };\n    /**\n     * Render the texture to its associated render target.\n     * @param useCameraPostProcess Define if camera post process should be applied to the texture\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ProceduralTexture.prototype.render = function (useCameraPostProcess) {\n        var _a, _b;\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        var engine = this._fullEngine;\n        // Render\n        engine.enableEffect(this._drawWrapper);\n        this.onBeforeGenerationObservable.notifyObservers(this);\n        engine.setState(false);\n        if (!this.nodeMaterialSource) {\n            // Texture\n            for (var name_1 in this._textures) {\n                this._drawWrapper.effect.setTexture(name_1, this._textures[name_1]);\n            }\n            // Float\n            for (var name_2 in this._ints) {\n                this._drawWrapper.effect.setInt(name_2, this._ints[name_2]);\n            }\n            // Float\n            for (var name_3 in this._floats) {\n                this._drawWrapper.effect.setFloat(name_3, this._floats[name_3]);\n            }\n            // Floats\n            for (var name_4 in this._floatsArrays) {\n                this._drawWrapper.effect.setArray(name_4, this._floatsArrays[name_4]);\n            }\n            // Color3\n            for (var name_5 in this._colors3) {\n                this._drawWrapper.effect.setColor3(name_5, this._colors3[name_5]);\n            }\n            // Color4\n            for (var name_6 in this._colors4) {\n                var color = this._colors4[name_6];\n                this._drawWrapper.effect.setFloat4(name_6, color.r, color.g, color.b, color.a);\n            }\n            // Vector2\n            for (var name_7 in this._vectors2) {\n                this._drawWrapper.effect.setVector2(name_7, this._vectors2[name_7]);\n            }\n            // Vector3\n            for (var name_8 in this._vectors3) {\n                this._drawWrapper.effect.setVector3(name_8, this._vectors3[name_8]);\n            }\n            // Matrix\n            for (var name_9 in this._matrices) {\n                this._drawWrapper.effect.setMatrix(name_9, this._matrices[name_9]);\n            }\n        }\n        if (!this._texture || !this._rtWrapper) {\n            return;\n        }\n        (_a = engine._debugPushGroup) === null || _a === void 0 ? void 0 : _a.call(engine, \"procedural texture generation for \".concat(this.name), 1);\n        if (this.isCube) {\n            for (var face = 0; face < 6; face++) {\n                engine.bindFramebuffer(this._rtWrapper, face, undefined, undefined, true);\n                // VBOs\n                engine.bindBuffers(this._vertexBuffers, this._indexBuffer, this._drawWrapper.effect);\n                this._drawWrapper.effect.setFloat(\"face\", face);\n                // Clear\n                if (this.autoClear) {\n                    engine.clear(scene.clearColor, true, false, false);\n                }\n                // Draw order\n                engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n            }\n        }\n        else {\n            engine.bindFramebuffer(this._rtWrapper, 0, undefined, undefined, true);\n            // VBOs\n            engine.bindBuffers(this._vertexBuffers, this._indexBuffer, this._drawWrapper.effect);\n            // Clear\n            if (this.autoClear) {\n                engine.clear(scene.clearColor, true, false, false);\n            }\n            // Draw order\n            engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n        }\n        // Unbind\n        engine.unBindFramebuffer(this._rtWrapper, this.isCube);\n        // Mipmaps\n        if (this.isCube) {\n            engine.generateMipMapsForCubemap(this._texture);\n        }\n        (_b = engine._debugPopGroup) === null || _b === void 0 ? void 0 : _b.call(engine, 1);\n        if (this.onGenerated) {\n            this.onGenerated();\n        }\n        this.onGeneratedObservable.notifyObservers(this);\n    };\n    /**\n     * Clone the texture.\n     * @returns the cloned texture\n     */\n    ProceduralTexture.prototype.clone = function () {\n        var textureSize = this.getSize();\n        var newTexture = new ProceduralTexture(this.name, textureSize.width, this._fragment, this.getScene(), this._fallbackTexture, this._generateMipMaps);\n        // Base texture\n        newTexture.hasAlpha = this.hasAlpha;\n        newTexture.level = this.level;\n        // RenderTarget Texture\n        newTexture.coordinatesMode = this.coordinatesMode;\n        return newTexture;\n    };\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    ProceduralTexture.prototype.dispose = function () {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        var index = scene.proceduralTextures.indexOf(this);\n        if (index >= 0) {\n            scene.proceduralTextures.splice(index, 1);\n        }\n        var vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\n        if (vertexBuffer) {\n            vertexBuffer.dispose();\n            this._vertexBuffers[VertexBuffer.PositionKind] = null;\n        }\n        if (this._indexBuffer && this._fullEngine._releaseBuffer(this._indexBuffer)) {\n            this._indexBuffer = null;\n        }\n        this.onGeneratedObservable.clear();\n        this.onBeforeGenerationObservable.clear();\n        _super.prototype.dispose.call(this);\n    };\n    __decorate([\n        serialize()\n    ], ProceduralTexture.prototype, \"isEnabled\", void 0);\n    __decorate([\n        serialize()\n    ], ProceduralTexture.prototype, \"autoClear\", void 0);\n    __decorate([\n        serialize()\n    ], ProceduralTexture.prototype, \"_generateMipMaps\", void 0);\n    __decorate([\n        serialize()\n    ], ProceduralTexture.prototype, \"_size\", void 0);\n    __decorate([\n        serialize()\n    ], ProceduralTexture.prototype, \"refreshRate\", null);\n    return ProceduralTexture;\n}(Texture));\nexport { ProceduralTexture };\nRegisterClass(\"BABYLON.ProceduralTexture\", ProceduralTexture);\n//# sourceMappingURL=proceduralTexture.js.map","import { Tools } from \"../../../Misc/tools.js\";\nimport { SceneComponentConstants } from \"../../../sceneComponent.js\";\n/**\n * Defines the Procedural Texture scene component responsible to manage any Procedural Texture\n * in a given scene.\n */\nvar ProceduralTextureSceneComponent = /** @class */ (function () {\n    /**\n     * Creates a new instance of the component for the given scene\n     * @param scene Defines the scene to register the component in\n     */\n    function ProceduralTextureSceneComponent(scene) {\n        /**\n         * The component name helpful to identify the component in the list of scene components.\n         */\n        this.name = SceneComponentConstants.NAME_PROCEDURALTEXTURE;\n        this.scene = scene;\n        this.scene.proceduralTextures = new Array();\n    }\n    /**\n     * Registers the component in a given scene\n     */\n    ProceduralTextureSceneComponent.prototype.register = function () {\n        this.scene._beforeClearStage.registerStep(SceneComponentConstants.STEP_BEFORECLEAR_PROCEDURALTEXTURE, this, this._beforeClear);\n    };\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    ProceduralTextureSceneComponent.prototype.rebuild = function () {\n        // Nothing to do here.\n    };\n    /**\n     * Disposes the component and the associated resources.\n     */\n    ProceduralTextureSceneComponent.prototype.dispose = function () {\n        // Nothing to do here.\n    };\n    ProceduralTextureSceneComponent.prototype._beforeClear = function () {\n        if (this.scene.proceduralTexturesEnabled) {\n            Tools.StartPerformanceCounter(\"Procedural textures\", this.scene.proceduralTextures.length > 0);\n            for (var proceduralIndex = 0; proceduralIndex < this.scene.proceduralTextures.length; proceduralIndex++) {\n                var proceduralTexture = this.scene.proceduralTextures[proceduralIndex];\n                if (proceduralTexture._shouldRender()) {\n                    proceduralTexture.render();\n                }\n            }\n            Tools.EndPerformanceCounter(\"Procedural textures\", this.scene.proceduralTextures.length > 0);\n        }\n    };\n    return ProceduralTextureSceneComponent;\n}());\nexport { ProceduralTextureSceneComponent };\n//# sourceMappingURL=proceduralTextureSceneComponent.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize, SerializationHelper, serializeAsTexture } from \"../../Misc/decorators.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Matrix } from \"../../Maths/math.vector.js\";\nimport { EngineStore } from \"../../Engines/engineStore.js\";\n\nimport { RandomGUID } from \"../../Misc/guid.js\";\nimport \"../../Misc/fileTools.js\";\nimport { ThinTexture } from \"./thinTexture.js\";\n/**\n * Base class of all the textures in babylon.\n * It groups all the common properties the materials, post process, lights... might need\n * in order to make a correct use of the texture.\n */\nvar BaseTexture = /** @class */ (function (_super) {\n    __extends(BaseTexture, _super);\n    /**\n     * Instantiates a new BaseTexture.\n     * Base class of all the textures in babylon.\n     * It groups all the common properties the materials, post process, lights... might need\n     * in order to make a correct use of the texture.\n     * @param sceneOrEngine Define the scene or engine the texture belongs to\n     */\n    function BaseTexture(sceneOrEngine) {\n        var _this = _super.call(this, null) || this;\n        /**\n         * Gets or sets an object used to store user defined information.\n         */\n        _this.metadata = null;\n        /**\n         * For internal use only. Please do not use.\n         */\n        _this.reservedDataStore = null;\n        _this._hasAlpha = false;\n        _this._getAlphaFromRGB = false;\n        /**\n         * Intensity or strength of the texture.\n         * It is commonly used by materials to fine tune the intensity of the texture\n         */\n        _this.level = 1;\n        _this._coordinatesIndex = 0;\n        _this._coordinatesMode = 0;\n        /**\n         * | Value | Type               | Description |\n         * | ----- | ------------------ | ----------- |\n         * | 0     | CLAMP_ADDRESSMODE  |             |\n         * | 1     | WRAP_ADDRESSMODE   |             |\n         * | 2     | MIRROR_ADDRESSMODE |             |\n         */\n        _this.wrapR = 1;\n        /**\n         * With compliant hardware and browser (supporting anisotropic filtering)\n         * this defines the level of anisotropic filtering in the texture.\n         * The higher the better but the slower. This defaults to 4 as it seems to be the best tradeoff.\n         */\n        _this.anisotropicFilteringLevel = BaseTexture.DEFAULT_ANISOTROPIC_FILTERING_LEVEL;\n        _this._isCube = false;\n        _this._gammaSpace = true;\n        /**\n         * Is Z inverted in the texture (useful in a cube texture).\n         */\n        _this.invertZ = false;\n        /**\n         * @hidden\n         */\n        _this.lodLevelInAlpha = false;\n        /**\n         * Define if the texture is a render target.\n         */\n        _this.isRenderTarget = false;\n        /** @hidden */\n        _this._prefiltered = false;\n        /** @hidden */\n        _this._forceSerialize = false;\n        /**\n         * Define the list of animation attached to the texture.\n         */\n        _this.animations = new Array();\n        /**\n         * An event triggered when the texture is disposed.\n         */\n        _this.onDisposeObservable = new Observable();\n        _this._onDisposeObserver = null;\n        _this._scene = null;\n        /** @hidden */\n        _this._uid = null;\n        /** @hidden */\n        _this._parentContainer = null;\n        _this._loadingError = false;\n        if (sceneOrEngine) {\n            if (BaseTexture._IsScene(sceneOrEngine)) {\n                _this._scene = sceneOrEngine;\n            }\n            else {\n                _this._engine = sceneOrEngine;\n            }\n        }\n        else {\n            _this._scene = EngineStore.LastCreatedScene;\n        }\n        if (_this._scene) {\n            _this.uniqueId = _this._scene.getUniqueId();\n            _this._scene.addTexture(_this);\n            _this._engine = _this._scene.getEngine();\n        }\n        _this._uid = null;\n        return _this;\n    }\n    Object.defineProperty(BaseTexture.prototype, \"hasAlpha\", {\n        get: function () {\n            return this._hasAlpha;\n        },\n        /**\n         * Define if the texture is having a usable alpha value (can be use for transparency or glossiness for instance).\n         */\n        set: function (value) {\n            var _this = this;\n            if (this._hasAlpha === value) {\n                return;\n            }\n            this._hasAlpha = value;\n            if (this._scene) {\n                this._scene.markAllMaterialsAsDirty(1, function (mat) {\n                    return mat.hasTexture(_this);\n                });\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"getAlphaFromRGB\", {\n        get: function () {\n            return this._getAlphaFromRGB;\n        },\n        /**\n         * Defines if the alpha value should be determined via the rgb values.\n         * If true the luminance of the pixel might be used to find the corresponding alpha value.\n         */\n        set: function (value) {\n            var _this = this;\n            if (this._getAlphaFromRGB === value) {\n                return;\n            }\n            this._getAlphaFromRGB = value;\n            if (this._scene) {\n                this._scene.markAllMaterialsAsDirty(1, function (mat) {\n                    return mat.hasTexture(_this);\n                });\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"coordinatesIndex\", {\n        get: function () {\n            return this._coordinatesIndex;\n        },\n        /**\n         * Define the UV channel to use starting from 0 and defaulting to 0.\n         * This is part of the texture as textures usually maps to one uv set.\n         */\n        set: function (value) {\n            var _this = this;\n            if (this._coordinatesIndex === value) {\n                return;\n            }\n            this._coordinatesIndex = value;\n            if (this._scene) {\n                this._scene.markAllMaterialsAsDirty(1, function (mat) {\n                    return mat.hasTexture(_this);\n                });\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"coordinatesMode\", {\n        get: function () {\n            return this._coordinatesMode;\n        },\n        /**\n         * How a texture is mapped.\n         *\n         * | Value | Type                                | Description |\n         * | ----- | ----------------------------------- | ----------- |\n         * | 0     | EXPLICIT_MODE                       |             |\n         * | 1     | SPHERICAL_MODE                      |             |\n         * | 2     | PLANAR_MODE                         |             |\n         * | 3     | CUBIC_MODE                          |             |\n         * | 4     | PROJECTION_MODE                     |             |\n         * | 5     | SKYBOX_MODE                         |             |\n         * | 6     | INVCUBIC_MODE                       |             |\n         * | 7     | EQUIRECTANGULAR_MODE                |             |\n         * | 8     | FIXED_EQUIRECTANGULAR_MODE          |             |\n         * | 9     | FIXED_EQUIRECTANGULAR_MIRRORED_MODE |             |\n         */\n        set: function (value) {\n            var _this = this;\n            if (this._coordinatesMode === value) {\n                return;\n            }\n            this._coordinatesMode = value;\n            if (this._scene) {\n                this._scene.markAllMaterialsAsDirty(1, function (mat) {\n                    return mat.hasTexture(_this);\n                });\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"wrapU\", {\n        /**\n         * | Value | Type               | Description |\n         * | ----- | ------------------ | ----------- |\n         * | 0     | CLAMP_ADDRESSMODE  |             |\n         * | 1     | WRAP_ADDRESSMODE   |             |\n         * | 2     | MIRROR_ADDRESSMODE |             |\n         */\n        get: function () {\n            return this._wrapU;\n        },\n        set: function (value) {\n            this._wrapU = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"wrapV\", {\n        /**\n         * | Value | Type               | Description |\n         * | ----- | ------------------ | ----------- |\n         * | 0     | CLAMP_ADDRESSMODE  |             |\n         * | 1     | WRAP_ADDRESSMODE   |             |\n         * | 2     | MIRROR_ADDRESSMODE |             |\n         */\n        get: function () {\n            return this._wrapV;\n        },\n        set: function (value) {\n            this._wrapV = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"isCube\", {\n        /**\n         * Define if the texture is a cube texture or if false a 2d texture.\n         */\n        get: function () {\n            if (!this._texture) {\n                return this._isCube;\n            }\n            return this._texture.isCube;\n        },\n        set: function (value) {\n            if (!this._texture) {\n                this._isCube = value;\n            }\n            else {\n                this._texture.isCube = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"is3D\", {\n        /**\n         * Define if the texture is a 3d texture (webgl 2) or if false a 2d texture.\n         */\n        get: function () {\n            if (!this._texture) {\n                return false;\n            }\n            return this._texture.is3D;\n        },\n        set: function (value) {\n            if (!this._texture) {\n                return;\n            }\n            this._texture.is3D = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"is2DArray\", {\n        /**\n         * Define if the texture is a 2d array texture (webgl 2) or if false a 2d texture.\n         */\n        get: function () {\n            if (!this._texture) {\n                return false;\n            }\n            return this._texture.is2DArray;\n        },\n        set: function (value) {\n            if (!this._texture) {\n                return;\n            }\n            this._texture.is2DArray = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"gammaSpace\", {\n        /**\n         * Define if the texture contains data in gamma space (most of the png/jpg aside bump).\n         * HDR texture are usually stored in linear space.\n         * This only impacts the PBR and Background materials\n         */\n        get: function () {\n            if (!this._texture) {\n                return this._gammaSpace;\n            }\n            else {\n                if (this._texture._gammaSpace === null) {\n                    this._texture._gammaSpace = this._gammaSpace;\n                }\n            }\n            return this._texture._gammaSpace && !this._texture._useSRGBBuffer;\n        },\n        set: function (gamma) {\n            if (!this._texture) {\n                if (this._gammaSpace === gamma) {\n                    return;\n                }\n                this._gammaSpace = gamma;\n            }\n            else {\n                if (this._texture._gammaSpace === gamma) {\n                    return;\n                }\n                this._texture._gammaSpace = gamma;\n            }\n            this._markAllSubMeshesAsTexturesDirty();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"isRGBD\", {\n        /**\n         * Gets or sets whether or not the texture contains RGBD data.\n         */\n        get: function () {\n            return this._texture != null && this._texture._isRGBD;\n        },\n        set: function (value) {\n            if (this._texture) {\n                this._texture._isRGBD = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"noMipmap\", {\n        /**\n         * Are mip maps generated for this texture or not.\n         */\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"lodGenerationOffset\", {\n        /**\n         * With prefiltered texture, defined the offset used during the prefiltering steps.\n         */\n        get: function () {\n            if (this._texture) {\n                return this._texture._lodGenerationOffset;\n            }\n            return 0.0;\n        },\n        set: function (value) {\n            if (this._texture) {\n                this._texture._lodGenerationOffset = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"lodGenerationScale\", {\n        /**\n         * With prefiltered texture, defined the scale used during the prefiltering steps.\n         */\n        get: function () {\n            if (this._texture) {\n                return this._texture._lodGenerationScale;\n            }\n            return 0.0;\n        },\n        set: function (value) {\n            if (this._texture) {\n                this._texture._lodGenerationScale = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"linearSpecularLOD\", {\n        /**\n         * With prefiltered texture, defined if the specular generation is based on a linear ramp.\n         * By default we are using a log2 of the linear roughness helping to keep a better resolution for\n         * average roughness values.\n         */\n        get: function () {\n            if (this._texture) {\n                return this._texture._linearSpecularLOD;\n            }\n            return false;\n        },\n        set: function (value) {\n            if (this._texture) {\n                this._texture._linearSpecularLOD = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"irradianceTexture\", {\n        /**\n         * In case a better definition than spherical harmonics is required for the diffuse part of the environment.\n         * You can set the irradiance texture to rely on a texture instead of the spherical approach.\n         * This texture need to have the same characteristics than its parent (Cube vs 2d, coordinates mode, Gamma/Linear, RGBD).\n         */\n        get: function () {\n            if (this._texture) {\n                return this._texture._irradianceTexture;\n            }\n            return null;\n        },\n        set: function (value) {\n            if (this._texture) {\n                this._texture._irradianceTexture = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"uid\", {\n        /**\n         * Define the unique id of the texture in the scene.\n         */\n        get: function () {\n            if (!this._uid) {\n                this._uid = RandomGUID();\n            }\n            return this._uid;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Return a string representation of the texture.\n     * @returns the texture as a string\n     */\n    BaseTexture.prototype.toString = function () {\n        return this.name;\n    };\n    /**\n     * Get the class name of the texture.\n     * @returns \"BaseTexture\"\n     */\n    BaseTexture.prototype.getClassName = function () {\n        return \"BaseTexture\";\n    };\n    Object.defineProperty(BaseTexture.prototype, \"onDispose\", {\n        /**\n         * Callback triggered when the texture has been disposed.\n         * Kept for back compatibility, you can use the onDisposeObservable instead.\n         */\n        set: function (callback) {\n            if (this._onDisposeObserver) {\n                this.onDisposeObservable.remove(this._onDisposeObserver);\n            }\n            this._onDisposeObserver = this.onDisposeObservable.add(callback);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"isBlocking\", {\n        /**\n         * Define if the texture is preventing a material to render or not.\n         * If not and the texture is not ready, the engine will use a default black texture instead.\n         */\n        get: function () {\n            return true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"loadingError\", {\n        /**\n         * Was there any loading error?\n         */\n        get: function () {\n            return this._loadingError;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"errorObject\", {\n        /**\n         * If a loading error occurred this object will be populated with information about the error.\n         */\n        get: function () {\n            return this._errorObject;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get the scene the texture belongs to.\n     * @returns the scene or null if undefined\n     */\n    BaseTexture.prototype.getScene = function () {\n        return this._scene;\n    };\n    /** @hidden */\n    BaseTexture.prototype._getEngine = function () {\n        return this._engine;\n    };\n    /**\n     * Checks if the texture has the same transform matrix than another texture\n     * @param texture texture to check against\n     * @returns true if the transforms are the same, else false\n     */\n    BaseTexture.prototype.checkTransformsAreIdentical = function (texture) {\n        return texture !== null;\n    };\n    /**\n     * Get the texture transform matrix used to offset tile the texture for instance.\n     * @returns the transformation matrix\n     */\n    BaseTexture.prototype.getTextureMatrix = function () {\n        return Matrix.IdentityReadOnly;\n    };\n    /**\n     * Get the texture reflection matrix used to rotate/transform the reflection.\n     * @returns the reflection matrix\n     */\n    BaseTexture.prototype.getReflectionTextureMatrix = function () {\n        return Matrix.IdentityReadOnly;\n    };\n    /**\n     * Get if the texture is ready to be consumed (either it is ready or it is not blocking)\n     * @returns true if ready, not blocking or if there was an error loading the texture\n     */\n    BaseTexture.prototype.isReadyOrNotBlocking = function () {\n        return !this.isBlocking || this.isReady() || this.loadingError;\n    };\n    /**\n     * Scales the texture if is `canRescale()`\n     * @param ratio the resize factor we want to use to rescale\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    BaseTexture.prototype.scale = function (ratio) { };\n    Object.defineProperty(BaseTexture.prototype, \"canRescale\", {\n        /**\n         * Get if the texture can rescale.\n         */\n        get: function () {\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @param url\n     * @param noMipmap\n     * @param sampling\n     * @param invertY\n     * @param useSRGBBuffer\n     * @param isCube\n     * @hidden\n     */\n    BaseTexture.prototype._getFromCache = function (url, noMipmap, sampling, invertY, useSRGBBuffer, isCube) {\n        var engine = this._getEngine();\n        if (!engine) {\n            return null;\n        }\n        var correctedUseSRGBBuffer = engine._getUseSRGBBuffer(!!useSRGBBuffer, noMipmap);\n        var texturesCache = engine.getLoadedTexturesCache();\n        for (var index = 0; index < texturesCache.length; index++) {\n            var texturesCacheEntry = texturesCache[index];\n            if (useSRGBBuffer === undefined || correctedUseSRGBBuffer === texturesCacheEntry._useSRGBBuffer) {\n                if (invertY === undefined || invertY === texturesCacheEntry.invertY) {\n                    if (texturesCacheEntry.url === url && texturesCacheEntry.generateMipMaps === !noMipmap) {\n                        if (!sampling || sampling === texturesCacheEntry.samplingMode) {\n                            if (isCube === undefined || isCube === texturesCacheEntry.isCube) {\n                                texturesCacheEntry.incrementReferences();\n                                return texturesCacheEntry;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    };\n    /** @hidden */\n    BaseTexture.prototype._rebuild = function () { };\n    /**\n     * Clones the texture.\n     * @returns the cloned texture\n     */\n    BaseTexture.prototype.clone = function () {\n        return null;\n    };\n    Object.defineProperty(BaseTexture.prototype, \"textureType\", {\n        /**\n         * Get the texture underlying type (INT, FLOAT...)\n         */\n        get: function () {\n            if (!this._texture) {\n                return 0;\n            }\n            return this._texture.type !== undefined ? this._texture.type : 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"textureFormat\", {\n        /**\n         * Get the texture underlying format (RGB, RGBA...)\n         */\n        get: function () {\n            if (!this._texture) {\n                return 5;\n            }\n            return this._texture.format !== undefined ? this._texture.format : 5;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Indicates that textures need to be re-calculated for all materials\n     */\n    BaseTexture.prototype._markAllSubMeshesAsTexturesDirty = function () {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        scene.markAllMaterialsAsDirty(1);\n    };\n    /**\n     * Reads the pixels stored in the webgl texture and returns them as an ArrayBuffer.\n     * This will returns an RGBA array buffer containing either in values (0-255) or\n     * float values (0-1) depending of the underlying buffer type.\n     * @param faceIndex defines the face of the texture to read (in case of cube texture)\n     * @param level defines the LOD level of the texture to read (in case of Mip Maps)\n     * @param buffer defines a user defined buffer to fill with data (can be null)\n     * @param flushRenderer true to flush the renderer from the pending commands before reading the pixels\n     * @param noDataConversion false to convert the data to Uint8Array (if texture type is UNSIGNED_BYTE) or to Float32Array (if texture type is anything but UNSIGNED_BYTE). If true, the type of the generated buffer (if buffer==null) will depend on the type of the texture\n     * @param x defines the region x coordinates to start reading from (default to 0)\n     * @param y defines the region y coordinates to start reading from (default to 0)pe is UNSIGNED_BYTE) or to Float32Array (if texture type is anything but UNSIGNED_BYTE). If true, the type of the generated buffer (if buffer==null) will depend on the type of the texture\n     * @param width defines the region width to read from (default to the texture size at level)\n     * @param height defines the region width to read from (default to the texture size at level)\n     * @returns The Array buffer promise containing the pixels data.\n     */\n    BaseTexture.prototype.readPixels = function (faceIndex, level, buffer, flushRenderer, noDataConversion, x, y, width, height) {\n        if (faceIndex === void 0) { faceIndex = 0; }\n        if (level === void 0) { level = 0; }\n        if (buffer === void 0) { buffer = null; }\n        if (flushRenderer === void 0) { flushRenderer = true; }\n        if (noDataConversion === void 0) { noDataConversion = false; }\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (width === void 0) { width = Number.MAX_VALUE; }\n        if (height === void 0) { height = Number.MAX_VALUE; }\n        if (!this._texture) {\n            return null;\n        }\n        var engine = this._getEngine();\n        if (!engine) {\n            return null;\n        }\n        var size = this.getSize();\n        var maxWidth = size.width;\n        var maxHeight = size.height;\n        if (level !== 0) {\n            maxWidth = maxWidth / Math.pow(2, level);\n            maxHeight = maxHeight / Math.pow(2, level);\n            maxWidth = Math.round(maxWidth);\n            maxHeight = Math.round(maxHeight);\n        }\n        width = Math.min(maxWidth, width);\n        height = Math.min(maxHeight, height);\n        try {\n            if (this._texture.isCube) {\n                return engine._readTexturePixels(this._texture, width, height, faceIndex, level, buffer, flushRenderer, noDataConversion, x, y);\n            }\n            return engine._readTexturePixels(this._texture, width, height, -1, level, buffer, flushRenderer, noDataConversion, x, y);\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    /**\n     * @param faceIndex\n     * @param level\n     * @param buffer\n     * @param flushRenderer\n     * @param noDataConversion\n     * @hidden\n     */\n    BaseTexture.prototype._readPixelsSync = function (faceIndex, level, buffer, flushRenderer, noDataConversion) {\n        if (faceIndex === void 0) { faceIndex = 0; }\n        if (level === void 0) { level = 0; }\n        if (buffer === void 0) { buffer = null; }\n        if (flushRenderer === void 0) { flushRenderer = true; }\n        if (noDataConversion === void 0) { noDataConversion = false; }\n        if (!this._texture) {\n            return null;\n        }\n        var size = this.getSize();\n        var width = size.width;\n        var height = size.height;\n        var engine = this._getEngine();\n        if (!engine) {\n            return null;\n        }\n        if (level != 0) {\n            width = width / Math.pow(2, level);\n            height = height / Math.pow(2, level);\n            width = Math.round(width);\n            height = Math.round(height);\n        }\n        try {\n            if (this._texture.isCube) {\n                return engine._readTexturePixelsSync(this._texture, width, height, faceIndex, level, buffer, flushRenderer, noDataConversion);\n            }\n            return engine._readTexturePixelsSync(this._texture, width, height, -1, level, buffer, flushRenderer, noDataConversion);\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    Object.defineProperty(BaseTexture.prototype, \"_lodTextureHigh\", {\n        /** @hidden */\n        get: function () {\n            if (this._texture) {\n                return this._texture._lodTextureHigh;\n            }\n            return null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"_lodTextureMid\", {\n        /** @hidden */\n        get: function () {\n            if (this._texture) {\n                return this._texture._lodTextureMid;\n            }\n            return null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTexture.prototype, \"_lodTextureLow\", {\n        /** @hidden */\n        get: function () {\n            if (this._texture) {\n                return this._texture._lodTextureLow;\n            }\n            return null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    BaseTexture.prototype.dispose = function () {\n        if (this._scene) {\n            // Animations\n            if (this._scene.stopAnimation) {\n                this._scene.stopAnimation(this);\n            }\n            // Remove from scene\n            this._scene._removePendingData(this);\n            var index = this._scene.textures.indexOf(this);\n            if (index >= 0) {\n                this._scene.textures.splice(index, 1);\n            }\n            this._scene.onTextureRemovedObservable.notifyObservers(this);\n            this._scene = null;\n            if (this._parentContainer) {\n                var index_1 = this._parentContainer.textures.indexOf(this);\n                if (index_1 > -1) {\n                    this._parentContainer.textures.splice(index_1, 1);\n                }\n                this._parentContainer = null;\n            }\n        }\n        // Callback\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n        this.metadata = null;\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Serialize the texture into a JSON representation that can be parsed later on.\n     * @returns the JSON representation of the texture\n     */\n    BaseTexture.prototype.serialize = function () {\n        if (!this.name) {\n            return null;\n        }\n        var serializationObject = SerializationHelper.Serialize(this);\n        // Animations\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\n        return serializationObject;\n    };\n    /**\n     * Helper function to be called back once a list of texture contains only ready textures.\n     * @param textures Define the list of textures to wait for\n     * @param callback Define the callback triggered once the entire list will be ready\n     */\n    BaseTexture.WhenAllReady = function (textures, callback) {\n        var numRemaining = textures.length;\n        if (numRemaining === 0) {\n            callback();\n            return;\n        }\n        for (var i = 0; i < textures.length; i++) {\n            var texture = textures[i];\n            if (texture.isReady()) {\n                if (--numRemaining === 0) {\n                    callback();\n                }\n            }\n            else {\n                var onLoadObservable = texture.onLoadObservable;\n                if (onLoadObservable) {\n                    onLoadObservable.addOnce(function () {\n                        if (--numRemaining === 0) {\n                            callback();\n                        }\n                    });\n                }\n                else {\n                    if (--numRemaining === 0) {\n                        callback();\n                    }\n                }\n            }\n        }\n    };\n    BaseTexture._IsScene = function (sceneOrEngine) {\n        return sceneOrEngine.getClassName() === \"Scene\";\n    };\n    /**\n     * Default anisotropic filtering level for the application.\n     * It is set to 4 as a good tradeoff between perf and quality.\n     */\n    BaseTexture.DEFAULT_ANISOTROPIC_FILTERING_LEVEL = 4;\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"uniqueId\", void 0);\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"name\", void 0);\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"metadata\", void 0);\n    __decorate([\n        serialize(\"hasAlpha\")\n    ], BaseTexture.prototype, \"_hasAlpha\", void 0);\n    __decorate([\n        serialize(\"getAlphaFromRGB\")\n    ], BaseTexture.prototype, \"_getAlphaFromRGB\", void 0);\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"level\", void 0);\n    __decorate([\n        serialize(\"coordinatesIndex\")\n    ], BaseTexture.prototype, \"_coordinatesIndex\", void 0);\n    __decorate([\n        serialize(\"coordinatesMode\")\n    ], BaseTexture.prototype, \"_coordinatesMode\", void 0);\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"wrapU\", null);\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"wrapV\", null);\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"wrapR\", void 0);\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"anisotropicFilteringLevel\", void 0);\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"isCube\", null);\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"is3D\", null);\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"is2DArray\", null);\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"gammaSpace\", null);\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"invertZ\", void 0);\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"lodLevelInAlpha\", void 0);\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"lodGenerationOffset\", null);\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"lodGenerationScale\", null);\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"linearSpecularLOD\", null);\n    __decorate([\n        serializeAsTexture()\n    ], BaseTexture.prototype, \"irradianceTexture\", null);\n    __decorate([\n        serialize()\n    ], BaseTexture.prototype, \"isRenderTarget\", void 0);\n    return BaseTexture;\n}(ThinTexture));\nexport { BaseTexture };\n//# sourceMappingURL=baseTexture.js.map","import { CubeMapToSphericalPolynomialTools } from \"../../Misc/HighDynamicRange/cubemapToSphericalPolynomial.js\";\nimport { BaseTexture } from \"./baseTexture.js\";\nBaseTexture.prototype.forceSphericalPolynomialsRecompute = function () {\n    if (this._texture) {\n        this._texture._sphericalPolynomial = null;\n        this._texture._sphericalPolynomialPromise = null;\n        this._texture._sphericalPolynomialComputed = false;\n    }\n};\nObject.defineProperty(BaseTexture.prototype, \"sphericalPolynomial\", {\n    get: function () {\n        var _this = this;\n        if (this._texture) {\n            if (this._texture._sphericalPolynomial || this._texture._sphericalPolynomialComputed) {\n                return this._texture._sphericalPolynomial;\n            }\n            if (this._texture.isReady) {\n                if (!this._texture._sphericalPolynomialPromise) {\n                    this._texture._sphericalPolynomialPromise = CubeMapToSphericalPolynomialTools.ConvertCubeMapTextureToSphericalPolynomial(this);\n                    if (this._texture._sphericalPolynomialPromise === null) {\n                        this._texture._sphericalPolynomialComputed = true;\n                    }\n                    else {\n                        this._texture._sphericalPolynomialPromise.then(function (sphericalPolynomial) {\n                            _this._texture._sphericalPolynomial = sphericalPolynomial;\n                            _this._texture._sphericalPolynomialComputed = true;\n                        });\n                    }\n                }\n                return null;\n            }\n        }\n        return null;\n    },\n    set: function (value) {\n        if (this._texture) {\n            this._texture._sphericalPolynomial = value;\n        }\n    },\n    enumerable: true,\n    configurable: true,\n});\n//# sourceMappingURL=baseTexture.polynomial.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize, serializeAsMatrix, SerializationHelper } from \"../../Misc/decorators.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture.js\";\nimport { Texture } from \"../../Materials/Textures/texture.js\";\n\nimport { GetClass, RegisterClass } from \"../../Misc/typeStore.js\";\nimport \"../../Engines/Extensions/engine.cubeTexture.js\";\nimport { Observable } from \"../../Misc/observable.js\";\n/**\n * Class for creating a cube texture\n */\nvar CubeTexture = /** @class */ (function (_super) {\n    __extends(CubeTexture, _super);\n    /**\n     * Creates a cube texture to use with reflection for instance. It can be based upon dds or six images as well\n     * as prefiltered data.\n     * @param rootUrl defines the url of the texture or the root name of the six images\n     * @param sceneOrEngine defines the scene or engine the texture is attached to\n     * @param extensions defines the suffixes add to the picture name in case six images are in use like _px.jpg...\n     * @param noMipmap defines if mipmaps should be created or not\n     * @param files defines the six files to load for the different faces in that order: px, py, pz, nx, ny, nz\n     * @param onLoad defines a callback triggered at the end of the file load if no errors occurred\n     * @param onError defines a callback triggered in case of error during load\n     * @param format defines the internal format to use for the texture once loaded\n     * @param prefiltered defines whether or not the texture is created from prefiltered data\n     * @param forcedExtension defines the extensions to use (force a special type of file to load) in case it is different from the file name\n     * @param createPolynomials defines whether or not to create polynomial harmonics from the texture data if necessary\n     * @param lodScale defines the scale applied to environment texture. This manages the range of LOD level used for IBL according to the roughness\n     * @param lodOffset defines the offset applied to environment texture. This manages first LOD level used for IBL according to the roughness\n     * @param loaderOptions options to be passed to the loader\n     * @param useSRGBBuffer Defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU) (default: false)\n     * @return the cube texture\n     */\n    function CubeTexture(rootUrl, sceneOrEngine, extensions, noMipmap, files, onLoad, onError, format, prefiltered, forcedExtension, createPolynomials, lodScale, lodOffset, loaderOptions, useSRGBBuffer) {\n        if (extensions === void 0) { extensions = null; }\n        if (noMipmap === void 0) { noMipmap = false; }\n        if (files === void 0) { files = null; }\n        if (onLoad === void 0) { onLoad = null; }\n        if (onError === void 0) { onError = null; }\n        if (format === void 0) { format = 5; }\n        if (prefiltered === void 0) { prefiltered = false; }\n        if (forcedExtension === void 0) { forcedExtension = null; }\n        if (createPolynomials === void 0) { createPolynomials = false; }\n        if (lodScale === void 0) { lodScale = 0.8; }\n        if (lodOffset === void 0) { lodOffset = 0; }\n        var _this = this;\n        var _a;\n        _this = _super.call(this, sceneOrEngine) || this;\n        _this._lodScale = 0.8;\n        _this._lodOffset = 0;\n        /**\n         * Observable triggered once the texture has been loaded.\n         */\n        _this.onLoadObservable = new Observable();\n        /**\n         * Gets or sets the center of the bounding box associated with the cube texture.\n         * It must define where the camera used to render the texture was set\n         * @see https://doc.babylonjs.com/how_to/reflect#using-local-cubemap-mode\n         */\n        _this.boundingBoxPosition = Vector3.Zero();\n        _this._rotationY = 0;\n        /** @hidden */\n        _this._files = null;\n        _this._forcedExtension = null;\n        _this._extensions = null;\n        _this.name = rootUrl;\n        _this.url = rootUrl;\n        _this._noMipmap = noMipmap;\n        _this.hasAlpha = false;\n        _this._format = format;\n        _this.isCube = true;\n        _this._textureMatrix = Matrix.Identity();\n        _this._createPolynomials = createPolynomials;\n        _this.coordinatesMode = Texture.CUBIC_MODE;\n        _this._extensions = extensions;\n        _this._files = files;\n        _this._forcedExtension = forcedExtension;\n        _this._loaderOptions = loaderOptions;\n        _this._useSRGBBuffer = useSRGBBuffer;\n        _this._lodScale = lodScale;\n        _this._lodOffset = lodOffset;\n        if (!rootUrl && !files) {\n            return _this;\n        }\n        _this.updateURL(rootUrl, forcedExtension, onLoad, prefiltered, onError, extensions, (_a = _this.getScene()) === null || _a === void 0 ? void 0 : _a.useDelayedTextureLoading, files);\n        return _this;\n    }\n    Object.defineProperty(CubeTexture.prototype, \"boundingBoxSize\", {\n        /**\n         * Returns the bounding box size\n         * @see https://doc.babylonjs.com/how_to/reflect#using-local-cubemap-mode\n         */\n        get: function () {\n            return this._boundingBoxSize;\n        },\n        /**\n         * Gets or sets the size of the bounding box associated with the cube texture\n         * When defined, the cubemap will switch to local mode\n         * @see https://community.arm.com/graphics/b/blog/posts/reflections-based-on-local-cubemaps-in-unity\n         * @example https://www.babylonjs-playground.com/#RNASML\n         */\n        set: function (value) {\n            if (this._boundingBoxSize && this._boundingBoxSize.equals(value)) {\n                return;\n            }\n            this._boundingBoxSize = value;\n            var scene = this.getScene();\n            if (scene) {\n                scene.markAllMaterialsAsDirty(1);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CubeTexture.prototype, \"rotationY\", {\n        /**\n         * Gets texture matrix rotation angle around Y axis radians.\n         */\n        get: function () {\n            return this._rotationY;\n        },\n        /**\n         * Sets texture matrix rotation angle around Y axis in radians.\n         */\n        set: function (value) {\n            this._rotationY = value;\n            this.setReflectionTextureMatrix(Matrix.RotationY(this._rotationY));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CubeTexture.prototype, \"noMipmap\", {\n        /**\n         * Are mip maps generated for this texture or not.\n         */\n        get: function () {\n            return this._noMipmap;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CubeTexture.prototype, \"forcedExtension\", {\n        /**\n         * Gets the forced extension (if any)\n         */\n        get: function () {\n            return this._forcedExtension;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Creates a cube texture from an array of image urls\n     * @param files defines an array of image urls\n     * @param scene defines the hosting scene\n     * @param noMipmap specifies if mip maps are not used\n     * @returns a cube texture\n     */\n    CubeTexture.CreateFromImages = function (files, scene, noMipmap) {\n        var rootUrlKey = \"\";\n        files.forEach(function (url) { return (rootUrlKey += url); });\n        return new CubeTexture(rootUrlKey, scene, null, noMipmap, files);\n    };\n    /**\n     * Creates and return a texture created from prefilterd data by tools like IBL Baker or Lys.\n     * @param url defines the url of the prefiltered texture\n     * @param scene defines the scene the texture is attached to\n     * @param forcedExtension defines the extension of the file if different from the url\n     * @param createPolynomials defines whether or not to create polynomial harmonics from the texture data if necessary\n     * @return the prefiltered texture\n     */\n    CubeTexture.CreateFromPrefilteredData = function (url, scene, forcedExtension, createPolynomials) {\n        if (forcedExtension === void 0) { forcedExtension = null; }\n        if (createPolynomials === void 0) { createPolynomials = true; }\n        var oldValue = scene.useDelayedTextureLoading;\n        scene.useDelayedTextureLoading = false;\n        var result = new CubeTexture(url, scene, null, false, null, null, null, undefined, true, forcedExtension, createPolynomials);\n        scene.useDelayedTextureLoading = oldValue;\n        return result;\n    };\n    /**\n     * Get the current class name of the texture useful for serialization or dynamic coding.\n     * @returns \"CubeTexture\"\n     */\n    CubeTexture.prototype.getClassName = function () {\n        return \"CubeTexture\";\n    };\n    /**\n     * Update the url (and optional buffer) of this texture if url was null during construction.\n     * @param url the url of the texture\n     * @param forcedExtension defines the extension to use\n     * @param onLoad callback called when the texture is loaded  (defaults to null)\n     * @param prefiltered Defines whether the updated texture is prefiltered or not\n     * @param onError callback called if there was an error during the loading process (defaults to null)\n     * @param extensions defines the suffixes add to the picture name in case six images are in use like _px.jpg...\n     * @param delayLoad defines if the texture should be loaded now (false by default)\n     * @param files defines the six files to load for the different faces in that order: px, py, pz, nx, ny, nz\n     */\n    CubeTexture.prototype.updateURL = function (url, forcedExtension, onLoad, prefiltered, onError, extensions, delayLoad, files) {\n        if (onLoad === void 0) { onLoad = null; }\n        if (prefiltered === void 0) { prefiltered = false; }\n        if (onError === void 0) { onError = null; }\n        if (extensions === void 0) { extensions = null; }\n        if (delayLoad === void 0) { delayLoad = false; }\n        if (files === void 0) { files = null; }\n        if (!this.name || this.name.startsWith(\"data:\")) {\n            this.name = url;\n        }\n        this.url = url;\n        if (forcedExtension) {\n            this._forcedExtension = forcedExtension;\n        }\n        var lastDot = url.lastIndexOf(\".\");\n        var extension = forcedExtension ? forcedExtension : lastDot > -1 ? url.substring(lastDot).toLowerCase() : \"\";\n        var isDDS = extension.indexOf(\".dds\") === 0;\n        var isEnv = extension.indexOf(\".env\") === 0;\n        if (isEnv) {\n            this.gammaSpace = false;\n            this._prefiltered = false;\n            this.anisotropicFilteringLevel = 1;\n        }\n        else {\n            this._prefiltered = prefiltered;\n            if (prefiltered) {\n                this.gammaSpace = false;\n                this.anisotropicFilteringLevel = 1;\n            }\n        }\n        if (files) {\n            this._files = files;\n        }\n        else {\n            if (!isEnv && !isDDS && !extensions) {\n                extensions = [\"_px.jpg\", \"_py.jpg\", \"_pz.jpg\", \"_nx.jpg\", \"_ny.jpg\", \"_nz.jpg\"];\n            }\n            this._files = this._files || [];\n            this._files.length = 0;\n            if (extensions) {\n                for (var index = 0; index < extensions.length; index++) {\n                    this._files.push(url + extensions[index]);\n                }\n                this._extensions = extensions;\n            }\n        }\n        if (delayLoad) {\n            this.delayLoadState = 4;\n            this._delayedOnLoad = onLoad;\n            this._delayedOnError = onError;\n        }\n        else {\n            this._loadTexture(onLoad, onError);\n        }\n    };\n    /**\n     * Delays loading of the cube texture\n     * @param forcedExtension defines the extension to use\n     */\n    CubeTexture.prototype.delayLoad = function (forcedExtension) {\n        if (this.delayLoadState !== 4) {\n            return;\n        }\n        if (forcedExtension) {\n            this._forcedExtension = forcedExtension;\n        }\n        this.delayLoadState = 1;\n        this._loadTexture(this._delayedOnLoad, this._delayedOnError);\n    };\n    /**\n     * Returns the reflection texture matrix\n     * @returns the reflection texture matrix\n     */\n    CubeTexture.prototype.getReflectionTextureMatrix = function () {\n        return this._textureMatrix;\n    };\n    /**\n     * Sets the reflection texture matrix\n     * @param value Reflection texture matrix\n     */\n    CubeTexture.prototype.setReflectionTextureMatrix = function (value) {\n        var _this = this;\n        var _a;\n        if (value.updateFlag === this._textureMatrix.updateFlag) {\n            return;\n        }\n        if (value.isIdentity() !== this._textureMatrix.isIdentity()) {\n            (_a = this.getScene()) === null || _a === void 0 ? void 0 : _a.markAllMaterialsAsDirty(1, function (mat) { return mat.getActiveTextures().indexOf(_this) !== -1; });\n        }\n        this._textureMatrix = value;\n    };\n    CubeTexture.prototype._loadTexture = function (onLoad, onError) {\n        var _this = this;\n        var _a;\n        if (onLoad === void 0) { onLoad = null; }\n        if (onError === void 0) { onError = null; }\n        var scene = this.getScene();\n        var oldTexture = this._texture;\n        this._texture = this._getFromCache(this.url, this._noMipmap, undefined, undefined, this._useSRGBBuffer, this.isCube);\n        var onLoadProcessing = function () {\n            var _a;\n            _this.onLoadObservable.notifyObservers(_this);\n            if (oldTexture) {\n                oldTexture.dispose();\n                (_a = _this.getScene()) === null || _a === void 0 ? void 0 : _a.markAllMaterialsAsDirty(1);\n            }\n            if (onLoad) {\n                onLoad();\n            }\n        };\n        var errorHandler = function (message, exception) {\n            _this._loadingError = true;\n            _this._errorObject = { message: message, exception: exception };\n            if (onError) {\n                onError(message, exception);\n            }\n            Texture.OnTextureLoadErrorObservable.notifyObservers(_this);\n        };\n        if (!this._texture) {\n            if (this._prefiltered) {\n                this._texture = this._getEngine().createPrefilteredCubeTexture(this.url, scene, this._lodScale, this._lodOffset, onLoad, errorHandler, this._format, this._forcedExtension, this._createPolynomials);\n            }\n            else {\n                this._texture = this._getEngine().createCubeTexture(this.url, scene, this._files, this._noMipmap, onLoad, errorHandler, this._format, this._forcedExtension, false, this._lodScale, this._lodOffset, null, this._loaderOptions, !!this._useSRGBBuffer);\n            }\n            (_a = this._texture) === null || _a === void 0 ? void 0 : _a.onLoadedObservable.add(function () { return _this.onLoadObservable.notifyObservers(_this); });\n        }\n        else {\n            if (this._texture.isReady) {\n                Tools.SetImmediate(function () { return onLoadProcessing(); });\n            }\n            else {\n                this._texture.onLoadedObservable.add(function () { return onLoadProcessing(); });\n            }\n        }\n    };\n    /**\n     * Parses text to create a cube texture\n     * @param parsedTexture define the serialized text to read from\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root url of the cube texture\n     * @returns a cube texture\n     */\n    CubeTexture.Parse = function (parsedTexture, scene, rootUrl) {\n        var texture = SerializationHelper.Parse(function () {\n            var prefiltered = false;\n            if (parsedTexture.prefiltered) {\n                prefiltered = parsedTexture.prefiltered;\n            }\n            return new CubeTexture(rootUrl + parsedTexture.name, scene, parsedTexture.extensions, false, parsedTexture.files || null, null, null, undefined, prefiltered, parsedTexture.forcedExtension);\n        }, parsedTexture, scene);\n        // Local Cubemaps\n        if (parsedTexture.boundingBoxPosition) {\n            texture.boundingBoxPosition = Vector3.FromArray(parsedTexture.boundingBoxPosition);\n        }\n        if (parsedTexture.boundingBoxSize) {\n            texture.boundingBoxSize = Vector3.FromArray(parsedTexture.boundingBoxSize);\n        }\n        // Animations\n        if (parsedTexture.animations) {\n            for (var animationIndex = 0; animationIndex < parsedTexture.animations.length; animationIndex++) {\n                var parsedAnimation = parsedTexture.animations[animationIndex];\n                var internalClass = GetClass(\"BABYLON.Animation\");\n                if (internalClass) {\n                    texture.animations.push(internalClass.Parse(parsedAnimation));\n                }\n            }\n        }\n        return texture;\n    };\n    /**\n     * Makes a clone, or deep copy, of the cube texture\n     * @returns a new cube texture\n     */\n    CubeTexture.prototype.clone = function () {\n        var _this = this;\n        var uniqueId = 0;\n        var newCubeTexture = SerializationHelper.Clone(function () {\n            var cubeTexture = new CubeTexture(_this.url, _this.getScene() || _this._getEngine(), _this._extensions, _this._noMipmap, _this._files);\n            uniqueId = cubeTexture.uniqueId;\n            return cubeTexture;\n        }, this);\n        newCubeTexture.uniqueId = uniqueId;\n        return newCubeTexture;\n    };\n    __decorate([\n        serialize()\n    ], CubeTexture.prototype, \"url\", void 0);\n    __decorate([\n        serialize(\"rotationY\")\n    ], CubeTexture.prototype, \"rotationY\", null);\n    __decorate([\n        serialize(\"files\")\n    ], CubeTexture.prototype, \"_files\", void 0);\n    __decorate([\n        serialize(\"forcedExtension\")\n    ], CubeTexture.prototype, \"_forcedExtension\", void 0);\n    __decorate([\n        serialize(\"extensions\")\n    ], CubeTexture.prototype, \"_extensions\", void 0);\n    __decorate([\n        serializeAsMatrix(\"textureMatrix\")\n    ], CubeTexture.prototype, \"_textureMatrix\", void 0);\n    return CubeTexture;\n}(BaseTexture));\nexport { CubeTexture };\nTexture._CubeTextureParser = CubeTexture.Parse;\n// Some exporters relies on Tools.Instantiate\nRegisterClass(\"BABYLON.CubeTexture\", CubeTexture);\n//# sourceMappingURL=cubeTexture.js.map","import { __extends } from \"tslib\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { Texture } from \"../../Materials/Textures/texture.js\";\n\nimport \"../../Engines/Extensions/engine.dynamicTexture.js\";\n/**\n * A class extending Texture allowing drawing on a texture\n * @see https://doc.babylonjs.com/divingDeeper/materials/using/dynamicTexture\n */\nvar DynamicTexture = /** @class */ (function (_super) {\n    __extends(DynamicTexture, _super);\n    /**\n     * Creates a DynamicTexture\n     * @param name defines the name of the texture\n     * @param options provides 3 alternatives for width and height of texture, a canvas, object with width and height properties, number for both width and height\n     * @param scene defines the scene where you want the texture\n     * @param generateMipMaps defines the use of MinMaps or not (default is false)\n     * @param samplingMode defines the sampling mode to use (default is Texture.TRILINEAR_SAMPLINGMODE)\n     * @param format defines the texture format to use (default is Engine.TEXTUREFORMAT_RGBA)\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading\n     */\n    function DynamicTexture(name, options, scene, generateMipMaps, samplingMode, format, invertY) {\n        if (scene === void 0) { scene = null; }\n        if (generateMipMaps === void 0) { generateMipMaps = false; }\n        if (samplingMode === void 0) { samplingMode = 3; }\n        if (format === void 0) { format = 5; }\n        var _this = _super.call(this, null, scene, !generateMipMaps, invertY, samplingMode, undefined, undefined, undefined, undefined, format) || this;\n        _this.name = name;\n        _this.wrapU = Texture.CLAMP_ADDRESSMODE;\n        _this.wrapV = Texture.CLAMP_ADDRESSMODE;\n        _this._generateMipMaps = generateMipMaps;\n        var engine = _this._getEngine();\n        if (!engine) {\n            return _this;\n        }\n        if (options.getContext) {\n            _this._canvas = options;\n            _this._texture = engine.createDynamicTexture(options.width, options.height, generateMipMaps, samplingMode);\n        }\n        else {\n            _this._canvas = engine.createCanvas(1, 1);\n            if (options.width || options.width === 0) {\n                _this._texture = engine.createDynamicTexture(options.width, options.height, generateMipMaps, samplingMode);\n            }\n            else {\n                _this._texture = engine.createDynamicTexture(options, options, generateMipMaps, samplingMode);\n            }\n        }\n        var textureSize = _this.getSize();\n        if (_this._canvas.width !== textureSize.width) {\n            _this._canvas.width = textureSize.width;\n        }\n        if (_this._canvas.height !== textureSize.height) {\n            _this._canvas.height = textureSize.height;\n        }\n        _this._context = _this._canvas.getContext(\"2d\");\n        return _this;\n    }\n    /**\n     * Get the current class name of the texture useful for serialization or dynamic coding.\n     * @returns \"DynamicTexture\"\n     */\n    DynamicTexture.prototype.getClassName = function () {\n        return \"DynamicTexture\";\n    };\n    Object.defineProperty(DynamicTexture.prototype, \"canRescale\", {\n        /**\n         * Gets the current state of canRescale\n         */\n        get: function () {\n            return true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    DynamicTexture.prototype._recreate = function (textureSize) {\n        this._canvas.width = textureSize.width;\n        this._canvas.height = textureSize.height;\n        this.releaseInternalTexture();\n        this._texture = this._getEngine().createDynamicTexture(textureSize.width, textureSize.height, this._generateMipMaps, this.samplingMode);\n    };\n    /**\n     * Scales the texture\n     * @param ratio the scale factor to apply to both width and height\n     */\n    DynamicTexture.prototype.scale = function (ratio) {\n        var textureSize = this.getSize();\n        textureSize.width *= ratio;\n        textureSize.height *= ratio;\n        this._recreate(textureSize);\n    };\n    /**\n     * Resizes the texture\n     * @param width the new width\n     * @param height the new height\n     */\n    DynamicTexture.prototype.scaleTo = function (width, height) {\n        var textureSize = this.getSize();\n        textureSize.width = width;\n        textureSize.height = height;\n        this._recreate(textureSize);\n    };\n    /**\n     * Gets the context of the canvas used by the texture\n     * @returns the canvas context of the dynamic texture\n     */\n    DynamicTexture.prototype.getContext = function () {\n        return this._context;\n    };\n    /**\n     * Clears the texture\n     */\n    DynamicTexture.prototype.clear = function () {\n        var size = this.getSize();\n        this._context.fillRect(0, 0, size.width, size.height);\n    };\n    /**\n     * Updates the texture\n     * @param invertY defines the direction for the Y axis (default is true - y increases downwards)\n     * @param premulAlpha defines if alpha is stored as premultiplied (default is false)\n     * @param allowGPUOptimization true to allow some specific GPU optimizations (subject to engine feature \"allowGPUOptimizationsForGUI\" being true)\n     */\n    DynamicTexture.prototype.update = function (invertY, premulAlpha, allowGPUOptimization) {\n        if (premulAlpha === void 0) { premulAlpha = false; }\n        if (allowGPUOptimization === void 0) { allowGPUOptimization = false; }\n        this._getEngine().updateDynamicTexture(this._texture, this._canvas, invertY === undefined ? true : invertY, premulAlpha, this._format || undefined, undefined, allowGPUOptimization);\n    };\n    /**\n     * Draws text onto the texture\n     * @param text defines the text to be drawn\n     * @param x defines the placement of the text from the left\n     * @param y defines the placement of the text from the top when invertY is true and from the bottom when false\n     * @param font defines the font to be used with font-style, font-size, font-name\n     * @param color defines the color used for the text\n     * @param clearColor defines the color for the canvas, use null to not overwrite canvas\n     * @param invertY defines the direction for the Y axis (default is true - y increases downwards)\n     * @param update defines whether texture is immediately update (default is true)\n     */\n    DynamicTexture.prototype.drawText = function (text, x, y, font, color, clearColor, invertY, update) {\n        if (update === void 0) { update = true; }\n        var size = this.getSize();\n        if (clearColor) {\n            this._context.fillStyle = clearColor;\n            this._context.fillRect(0, 0, size.width, size.height);\n        }\n        this._context.font = font;\n        if (x === null || x === undefined) {\n            var textSize = this._context.measureText(text);\n            x = (size.width - textSize.width) / 2;\n        }\n        if (y === null || y === undefined) {\n            var fontSize = parseInt(font.replace(/\\D/g, \"\"));\n            y = size.height / 2 + fontSize / 3.65;\n        }\n        this._context.fillStyle = color || \"\";\n        this._context.fillText(text, x, y);\n        if (update) {\n            this.update(invertY);\n        }\n    };\n    /**\n     * Clones the texture\n     * @returns the clone of the texture.\n     */\n    DynamicTexture.prototype.clone = function () {\n        var scene = this.getScene();\n        if (!scene) {\n            return this;\n        }\n        var textureSize = this.getSize();\n        var newTexture = new DynamicTexture(this.name, textureSize, scene, this._generateMipMaps);\n        // Base texture\n        newTexture.hasAlpha = this.hasAlpha;\n        newTexture.level = this.level;\n        // Dynamic Texture\n        newTexture.wrapU = this.wrapU;\n        newTexture.wrapV = this.wrapV;\n        return newTexture;\n    };\n    /**\n     * Serializes the dynamic texture.  The scene should be ready before the dynamic texture is serialized\n     * @returns a serialized dynamic texture object\n     */\n    DynamicTexture.prototype.serialize = function () {\n        var scene = this.getScene();\n        if (scene && !scene.isReady()) {\n            Logger.Warn(\"The scene must be ready before serializing the dynamic texture\");\n        }\n        var serializationObject = _super.prototype.serialize.call(this);\n        if (DynamicTexture._IsCanvasElement(this._canvas)) {\n            serializationObject.base64String = this._canvas.toDataURL();\n        }\n        serializationObject.invertY = this._invertY;\n        serializationObject.samplingMode = this.samplingMode;\n        return serializationObject;\n    };\n    DynamicTexture._IsCanvasElement = function (canvas) {\n        return canvas.toDataURL !== undefined;\n    };\n    /** @hidden */\n    DynamicTexture.prototype._rebuild = function () {\n        this.update();\n    };\n    return DynamicTexture;\n}(Texture));\nexport { DynamicTexture };\n//# sourceMappingURL=dynamicTexture.js.map","import { __extends } from \"tslib\";\nimport { PanoramaToCubeMapTools } from \"../../Misc/HighDynamicRange/panoramaToCubemap.js\";\nimport { BaseTexture } from \"./baseTexture.js\";\nimport { Texture } from \"./texture.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport \"../../Engines/Extensions/engine.rawTexture.js\";\n\nimport { LoadImage } from \"../../Misc/fileTools.js\";\n/**\n * This represents a texture coming from an equirectangular image supported by the web browser canvas.\n */\nvar EquiRectangularCubeTexture = /** @class */ (function (_super) {\n    __extends(EquiRectangularCubeTexture, _super);\n    /**\n     * Instantiates an EquiRectangularCubeTexture from the following parameters.\n     * @param url The location of the image\n     * @param scene The scene the texture will be used in\n     * @param size The cubemap desired size (the more it increases the longer the generation will be)\n     * @param noMipmap Forces to not generate the mipmap if true\n     * @param gammaSpace Specifies if the texture will be used in gamma or linear space\n     * (the PBR material requires those textures in linear space, but the standard material would require them in Gamma space)\n     * @param onLoad — defines a callback called when texture is loaded\n     * @param onError — defines a callback called if there is an error\n     */\n    function EquiRectangularCubeTexture(url, scene, size, noMipmap, gammaSpace, onLoad, onError) {\n        if (noMipmap === void 0) { noMipmap = false; }\n        if (gammaSpace === void 0) { gammaSpace = true; }\n        if (onLoad === void 0) { onLoad = null; }\n        if (onError === void 0) { onError = null; }\n        var _this = _super.call(this, scene) || this;\n        _this._onLoad = null;\n        _this._onError = null;\n        if (!url) {\n            throw new Error(\"Image url is not set\");\n        }\n        _this._coordinatesMode = Texture.CUBIC_MODE;\n        _this.name = url;\n        _this.url = url;\n        _this._size = size;\n        _this._noMipmap = noMipmap;\n        _this.gammaSpace = gammaSpace;\n        _this._onLoad = onLoad;\n        _this._onError = onError;\n        _this.hasAlpha = false;\n        _this.isCube = true;\n        _this._texture = _this._getFromCache(url, _this._noMipmap, undefined, undefined, undefined, _this.isCube);\n        if (!_this._texture) {\n            if (!scene.useDelayedTextureLoading) {\n                _this._loadImage(_this._loadTexture.bind(_this), _this._onError);\n            }\n            else {\n                _this.delayLoadState = 4;\n            }\n        }\n        else if (onLoad) {\n            if (_this._texture.isReady) {\n                Tools.SetImmediate(function () { return onLoad(); });\n            }\n            else {\n                _this._texture.onLoadedObservable.add(onLoad);\n            }\n        }\n        return _this;\n    }\n    /**\n     * Load the image data, by putting the image on a canvas and extracting its buffer.\n     * @param loadTextureCallback\n     * @param onError\n     */\n    EquiRectangularCubeTexture.prototype._loadImage = function (loadTextureCallback, onError) {\n        var _this = this;\n        var canvas = document.createElement(\"canvas\");\n        LoadImage(this.url, function (image) {\n            _this._width = image.width;\n            _this._height = image.height;\n            canvas.width = _this._width;\n            canvas.height = _this._height;\n            var ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(image, 0, 0);\n            var imageData = ctx.getImageData(0, 0, image.width, image.height);\n            _this._buffer = imageData.data.buffer;\n            canvas.remove();\n            loadTextureCallback();\n        }, function (_, e) {\n            if (onError) {\n                onError(\"\".concat(_this.getClassName(), \" could not be loaded\"), e);\n            }\n        }, null);\n    };\n    /**\n     * Convert the image buffer into a cubemap and create a CubeTexture.\n     */\n    EquiRectangularCubeTexture.prototype._loadTexture = function () {\n        var _this = this;\n        var scene = this.getScene();\n        var callback = function () {\n            var imageData = _this._getFloat32ArrayFromArrayBuffer(_this._buffer);\n            // Extract the raw linear data.\n            var data = PanoramaToCubeMapTools.ConvertPanoramaToCubemap(imageData, _this._width, _this._height, _this._size);\n            var results = [];\n            // Push each faces.\n            for (var i = 0; i < 6; i++) {\n                var dataFace = data[EquiRectangularCubeTexture._FacesMapping[i]];\n                results.push(dataFace);\n            }\n            return results;\n        };\n        if (!scene) {\n            return;\n        }\n        this._texture = scene\n            .getEngine()\n            .createRawCubeTextureFromUrl(this.url, scene, this._size, 4, scene.getEngine().getCaps().textureFloat ? 1 : 7, this._noMipmap, callback, null, this._onLoad, this._onError);\n    };\n    /**\n     * Convert the ArrayBuffer into a Float32Array and drop the transparency channel.\n     * @param buffer The ArrayBuffer that should be converted.\n     * @returns The buffer as Float32Array.\n     */\n    EquiRectangularCubeTexture.prototype._getFloat32ArrayFromArrayBuffer = function (buffer) {\n        var dataView = new DataView(buffer);\n        var floatImageData = new Float32Array((buffer.byteLength * 3) / 4);\n        var k = 0;\n        for (var i = 0; i < buffer.byteLength; i++) {\n            // We drop the transparency channel, because we do not need/want it\n            if ((i + 1) % 4 !== 0) {\n                floatImageData[k++] = dataView.getUint8(i) / 255;\n            }\n        }\n        return floatImageData;\n    };\n    /**\n     * Get the current class name of the texture useful for serialization or dynamic coding.\n     * @returns \"EquiRectangularCubeTexture\"\n     */\n    EquiRectangularCubeTexture.prototype.getClassName = function () {\n        return \"EquiRectangularCubeTexture\";\n    };\n    /**\n     * Create a clone of the current EquiRectangularCubeTexture and return it.\n     * @returns A clone of the current EquiRectangularCubeTexture.\n     */\n    EquiRectangularCubeTexture.prototype.clone = function () {\n        var scene = this.getScene();\n        if (!scene) {\n            return this;\n        }\n        var newTexture = new EquiRectangularCubeTexture(this.url, scene, this._size, this._noMipmap, this.gammaSpace);\n        // Base texture\n        newTexture.level = this.level;\n        newTexture.wrapU = this.wrapU;\n        newTexture.wrapV = this.wrapV;\n        newTexture.coordinatesIndex = this.coordinatesIndex;\n        newTexture.coordinatesMode = this.coordinatesMode;\n        return newTexture;\n    };\n    /** The six faces of the cube. */\n    EquiRectangularCubeTexture._FacesMapping = [\"right\", \"left\", \"up\", \"down\", \"front\", \"back\"];\n    return EquiRectangularCubeTexture;\n}(BaseTexture));\nexport { EquiRectangularCubeTexture };\n//# sourceMappingURL=equiRectangularCubeTexture.js.map","\nimport { InternalTexture } from \"./internalTexture.js\";\n/**\n * Class used to store an external texture (like GPUExternalTexture in WebGPU)\n */\nvar ExternalTexture = /** @class */ (function () {\n    /**\n     * Constructs the texture\n     * @param video The video the texture should be wrapped around\n     */\n    function ExternalTexture(video) {\n        /**\n         * Gets a boolean indicating if the texture uses mipmaps\n         */\n        this.useMipMaps = false;\n        /**\n         * The type of the underlying texture is implementation dependent, so return \"UNDEFINED\" for the type\n         */\n        this.type = 16;\n        this._video = video;\n        this.uniqueId = InternalTexture._Counter++;\n    }\n    /**\n     * Checks if a texture is an external or internal texture\n     * @param texture the external or internal texture\n     * @returns true if the texture is an external texture, else false\n     */\n    ExternalTexture.IsExternalTexture = function (texture) {\n        return texture.underlyingResource !== undefined;\n    };\n    /**\n     * Get the class name of the texture.\n     * @returns \"ExternalTexture\"\n     */\n    ExternalTexture.prototype.getClassName = function () {\n        return \"ExternalTexture\";\n    };\n    Object.defineProperty(ExternalTexture.prototype, \"underlyingResource\", {\n        /**\n         * Gets the underlying texture object\n         */\n        get: function () {\n            return this._video;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get if the texture is ready to be used (downloaded, converted, mip mapped...).\n     * @returns true if fully ready\n     */\n    ExternalTexture.prototype.isReady = function () {\n        return this._video.readyState >= this._video.HAVE_CURRENT_DATA;\n    };\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    ExternalTexture.prototype.dispose = function () { };\n    return ExternalTexture;\n}());\nexport { ExternalTexture };\n//# sourceMappingURL=externalTexture.js.map","import { __extends } from \"tslib\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture.js\";\nimport { Texture } from \"../../Materials/Textures/texture.js\";\n\nimport { HDRTools } from \"../../Misc/HighDynamicRange/hdr.js\";\nimport { CubeMapToSphericalPolynomialTools } from \"../../Misc/HighDynamicRange/cubemapToSphericalPolynomial.js\";\nimport { RegisterClass } from \"../../Misc/typeStore.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { ToGammaSpace } from \"../../Maths/math.constants.js\";\nimport { HDRFiltering } from \"../../Materials/Textures/Filtering/hdrFiltering.js\";\nimport { ToHalfFloat } from \"../../Misc/textureTools.js\";\nimport \"../../Engines/Extensions/engine.rawTexture.js\";\nimport \"../../Materials/Textures/baseTexture.polynomial.js\";\n/**\n * This represents a texture coming from an HDR input.\n *\n * The only supported format is currently panorama picture stored in RGBE format.\n * Example of such files can be found on Poly Haven: https://polyhaven.com/hdris\n */\nvar HDRCubeTexture = /** @class */ (function (_super) {\n    __extends(HDRCubeTexture, _super);\n    /**\n     * Instantiates an HDRTexture from the following parameters.\n     *\n     * @param url The location of the HDR raw data (Panorama stored in RGBE format)\n     * @param sceneOrEngine The scene or engine the texture will be used in\n     * @param size The cubemap desired size (the more it increases the longer the generation will be)\n     * @param noMipmap Forces to not generate the mipmap if true\n     * @param generateHarmonics Specifies whether you want to extract the polynomial harmonics during the generation process\n     * @param gammaSpace Specifies if the texture will be use in gamma or linear space (the PBR material requires those texture in linear space, but the standard material would require them in Gamma space)\n     * @param prefilterOnLoad Prefilters HDR texture to allow use of this texture as a PBR reflection texture.\n     * @param onLoad\n     * @param onError\n     */\n    function HDRCubeTexture(url, sceneOrEngine, size, noMipmap, generateHarmonics, gammaSpace, prefilterOnLoad, onLoad, onError) {\n        if (noMipmap === void 0) { noMipmap = false; }\n        if (generateHarmonics === void 0) { generateHarmonics = true; }\n        if (gammaSpace === void 0) { gammaSpace = false; }\n        if (prefilterOnLoad === void 0) { prefilterOnLoad = false; }\n        if (onLoad === void 0) { onLoad = null; }\n        if (onError === void 0) { onError = null; }\n        var _this = this;\n        var _a;\n        _this = _super.call(this, sceneOrEngine) || this;\n        _this._generateHarmonics = true;\n        _this._onError = null;\n        _this._isBlocking = true;\n        _this._rotationY = 0;\n        /**\n         * Gets or sets the center of the bounding box associated with the cube texture\n         * It must define where the camera used to render the texture was set\n         */\n        _this.boundingBoxPosition = Vector3.Zero();\n        /**\n         * Observable triggered once the texture has been loaded.\n         */\n        _this.onLoadObservable = new Observable();\n        if (!url) {\n            return _this;\n        }\n        _this._coordinatesMode = Texture.CUBIC_MODE;\n        _this.name = url;\n        _this.url = url;\n        _this.hasAlpha = false;\n        _this.isCube = true;\n        _this._textureMatrix = Matrix.Identity();\n        _this._prefilterOnLoad = prefilterOnLoad;\n        _this._onLoad = function () {\n            _this.onLoadObservable.notifyObservers(_this);\n            if (onLoad) {\n                onLoad();\n            }\n        };\n        _this._onError = onError;\n        _this.gammaSpace = gammaSpace;\n        _this._noMipmap = noMipmap;\n        _this._size = size;\n        _this._generateHarmonics = generateHarmonics;\n        _this._texture = _this._getFromCache(url, _this._noMipmap, undefined, undefined, undefined, _this.isCube);\n        if (!_this._texture) {\n            if (!((_a = _this.getScene()) === null || _a === void 0 ? void 0 : _a.useDelayedTextureLoading)) {\n                _this._loadTexture();\n            }\n            else {\n                _this.delayLoadState = 4;\n            }\n        }\n        else {\n            if (_this._texture.isReady) {\n                Tools.SetImmediate(function () { return _this._onLoad(); });\n            }\n            else {\n                _this._texture.onLoadedObservable.add(_this._onLoad);\n            }\n        }\n        return _this;\n    }\n    Object.defineProperty(HDRCubeTexture.prototype, \"isBlocking\", {\n        /**\n         * Gets whether or not the texture is blocking during loading.\n         */\n        get: function () {\n            return this._isBlocking;\n        },\n        /**\n         * Sets whether or not the texture is blocking during loading.\n         */\n        set: function (value) {\n            this._isBlocking = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(HDRCubeTexture.prototype, \"rotationY\", {\n        /**\n         * Gets texture matrix rotation angle around Y axis radians.\n         */\n        get: function () {\n            return this._rotationY;\n        },\n        /**\n         * Sets texture matrix rotation angle around Y axis in radians.\n         */\n        set: function (value) {\n            this._rotationY = value;\n            this.setReflectionTextureMatrix(Matrix.RotationY(this._rotationY));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(HDRCubeTexture.prototype, \"boundingBoxSize\", {\n        get: function () {\n            return this._boundingBoxSize;\n        },\n        /**\n         * Gets or sets the size of the bounding box associated with the cube texture\n         * When defined, the cubemap will switch to local mode\n         * @see https://community.arm.com/graphics/b/blog/posts/reflections-based-on-local-cubemaps-in-unity\n         * @example https://www.babylonjs-playground.com/#RNASML\n         */\n        set: function (value) {\n            if (this._boundingBoxSize && this._boundingBoxSize.equals(value)) {\n                return;\n            }\n            this._boundingBoxSize = value;\n            var scene = this.getScene();\n            if (scene) {\n                scene.markAllMaterialsAsDirty(1);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get the current class name of the texture useful for serialization or dynamic coding.\n     * @returns \"HDRCubeTexture\"\n     */\n    HDRCubeTexture.prototype.getClassName = function () {\n        return \"HDRCubeTexture\";\n    };\n    /**\n     * Occurs when the file is raw .hdr file.\n     */\n    HDRCubeTexture.prototype._loadTexture = function () {\n        var _this = this;\n        var engine = this._getEngine();\n        var caps = engine.getCaps();\n        var textureType = 0;\n        if (caps.textureFloat && caps.textureFloatLinearFiltering) {\n            textureType = 1;\n        }\n        else if (caps.textureHalfFloat && caps.textureHalfFloatLinearFiltering) {\n            textureType = 2;\n        }\n        var callback = function (buffer) {\n            _this.lodGenerationOffset = 0.0;\n            _this.lodGenerationScale = 0.8;\n            // Extract the raw linear data.\n            var data = HDRTools.GetCubeMapTextureData(buffer, _this._size);\n            // Generate harmonics if needed.\n            if (_this._generateHarmonics) {\n                var sphericalPolynomial = CubeMapToSphericalPolynomialTools.ConvertCubeMapToSphericalPolynomial(data);\n                _this.sphericalPolynomial = sphericalPolynomial;\n            }\n            var results = [];\n            var byteArray = null;\n            var shortArray = null;\n            // Push each faces.\n            for (var j = 0; j < 6; j++) {\n                // Create fallback array\n                if (textureType === 2) {\n                    shortArray = new Uint16Array(_this._size * _this._size * 3);\n                }\n                else if (textureType === 0) {\n                    // 3 channels of 1 bytes per pixel in bytes.\n                    byteArray = new Uint8Array(_this._size * _this._size * 3);\n                }\n                var dataFace = data[HDRCubeTexture._FacesMapping[j]];\n                // If special cases.\n                if (_this.gammaSpace || shortArray || byteArray) {\n                    for (var i = 0; i < _this._size * _this._size; i++) {\n                        // Put in gamma space if requested.\n                        if (_this.gammaSpace) {\n                            dataFace[i * 3 + 0] = Math.pow(dataFace[i * 3 + 0], ToGammaSpace);\n                            dataFace[i * 3 + 1] = Math.pow(dataFace[i * 3 + 1], ToGammaSpace);\n                            dataFace[i * 3 + 2] = Math.pow(dataFace[i * 3 + 2], ToGammaSpace);\n                        }\n                        // Convert to half float texture for fallback.\n                        if (shortArray) {\n                            shortArray[i * 3 + 0] = ToHalfFloat(dataFace[i * 3 + 0]);\n                            shortArray[i * 3 + 1] = ToHalfFloat(dataFace[i * 3 + 1]);\n                            shortArray[i * 3 + 2] = ToHalfFloat(dataFace[i * 3 + 2]);\n                        }\n                        // Convert to int texture for fallback.\n                        if (byteArray) {\n                            var r = Math.max(dataFace[i * 3 + 0] * 255, 0);\n                            var g = Math.max(dataFace[i * 3 + 1] * 255, 0);\n                            var b = Math.max(dataFace[i * 3 + 2] * 255, 0);\n                            // May use luminance instead if the result is not accurate.\n                            var max = Math.max(Math.max(r, g), b);\n                            if (max > 255) {\n                                var scale = 255 / max;\n                                r *= scale;\n                                g *= scale;\n                                b *= scale;\n                            }\n                            byteArray[i * 3 + 0] = r;\n                            byteArray[i * 3 + 1] = g;\n                            byteArray[i * 3 + 2] = b;\n                        }\n                    }\n                }\n                if (shortArray) {\n                    results.push(shortArray);\n                }\n                else if (byteArray) {\n                    results.push(byteArray);\n                }\n                else {\n                    results.push(dataFace);\n                }\n            }\n            return results;\n        };\n        if (engine._features.allowTexturePrefiltering && this._prefilterOnLoad) {\n            var previousOnLoad_1 = this._onLoad;\n            var hdrFiltering_1 = new HDRFiltering(engine);\n            this._onLoad = function () {\n                hdrFiltering_1.prefilter(_this, previousOnLoad_1);\n            };\n        }\n        this._texture = engine.createRawCubeTextureFromUrl(this.url, this.getScene(), this._size, 4, textureType, this._noMipmap, callback, null, this._onLoad, this._onError);\n    };\n    HDRCubeTexture.prototype.clone = function () {\n        var newTexture = new HDRCubeTexture(this.url, this.getScene() || this._getEngine(), this._size, this._noMipmap, this._generateHarmonics, this.gammaSpace);\n        // Base texture\n        newTexture.level = this.level;\n        newTexture.wrapU = this.wrapU;\n        newTexture.wrapV = this.wrapV;\n        newTexture.coordinatesIndex = this.coordinatesIndex;\n        newTexture.coordinatesMode = this.coordinatesMode;\n        return newTexture;\n    };\n    // Methods\n    HDRCubeTexture.prototype.delayLoad = function () {\n        if (this.delayLoadState !== 4) {\n            return;\n        }\n        this.delayLoadState = 1;\n        this._texture = this._getFromCache(this.url, this._noMipmap);\n        if (!this._texture) {\n            this._loadTexture();\n        }\n    };\n    /**\n     * Get the texture reflection matrix used to rotate/transform the reflection.\n     * @returns the reflection matrix\n     */\n    HDRCubeTexture.prototype.getReflectionTextureMatrix = function () {\n        return this._textureMatrix;\n    };\n    /**\n     * Set the texture reflection matrix used to rotate/transform the reflection.\n     * @param value Define the reflection matrix to set\n     */\n    HDRCubeTexture.prototype.setReflectionTextureMatrix = function (value) {\n        var _this = this;\n        var _a;\n        this._textureMatrix = value;\n        if (value.updateFlag === this._textureMatrix.updateFlag) {\n            return;\n        }\n        if (value.isIdentity() !== this._textureMatrix.isIdentity()) {\n            (_a = this.getScene()) === null || _a === void 0 ? void 0 : _a.markAllMaterialsAsDirty(1, function (mat) { return mat.getActiveTextures().indexOf(_this) !== -1; });\n        }\n    };\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    HDRCubeTexture.prototype.dispose = function () {\n        this.onLoadObservable.clear();\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Parses a JSON representation of an HDR Texture in order to create the texture\n     * @param parsedTexture Define the JSON representation\n     * @param scene Define the scene the texture should be created in\n     * @param rootUrl Define the root url in case we need to load relative dependencies\n     * @returns the newly created texture after parsing\n     */\n    HDRCubeTexture.Parse = function (parsedTexture, scene, rootUrl) {\n        var texture = null;\n        if (parsedTexture.name && !parsedTexture.isRenderTarget) {\n            texture = new HDRCubeTexture(rootUrl + parsedTexture.name, scene, parsedTexture.size, parsedTexture.noMipmap, parsedTexture.generateHarmonics, parsedTexture.useInGammaSpace);\n            texture.name = parsedTexture.name;\n            texture.hasAlpha = parsedTexture.hasAlpha;\n            texture.level = parsedTexture.level;\n            texture.coordinatesMode = parsedTexture.coordinatesMode;\n            texture.isBlocking = parsedTexture.isBlocking;\n        }\n        if (texture) {\n            if (parsedTexture.boundingBoxPosition) {\n                texture.boundingBoxPosition = Vector3.FromArray(parsedTexture.boundingBoxPosition);\n            }\n            if (parsedTexture.boundingBoxSize) {\n                texture.boundingBoxSize = Vector3.FromArray(parsedTexture.boundingBoxSize);\n            }\n            if (parsedTexture.rotationY) {\n                texture.rotationY = parsedTexture.rotationY;\n            }\n        }\n        return texture;\n    };\n    HDRCubeTexture.prototype.serialize = function () {\n        if (!this.name) {\n            return null;\n        }\n        var serializationObject = {};\n        serializationObject.name = this.name;\n        serializationObject.hasAlpha = this.hasAlpha;\n        serializationObject.isCube = true;\n        serializationObject.level = this.level;\n        serializationObject.size = this._size;\n        serializationObject.coordinatesMode = this.coordinatesMode;\n        serializationObject.useInGammaSpace = this.gammaSpace;\n        serializationObject.generateHarmonics = this._generateHarmonics;\n        serializationObject.customType = \"BABYLON.HDRCubeTexture\";\n        serializationObject.noMipmap = this._noMipmap;\n        serializationObject.isBlocking = this._isBlocking;\n        serializationObject.rotationY = this._rotationY;\n        return serializationObject;\n    };\n    HDRCubeTexture._FacesMapping = [\"right\", \"left\", \"up\", \"down\", \"front\", \"back\"];\n    return HDRCubeTexture;\n}(BaseTexture));\nexport { HDRCubeTexture };\nRegisterClass(\"BABYLON.HDRCubeTexture\", HDRCubeTexture);\n//# sourceMappingURL=hdrCubeTexture.js.map","import { __extends } from \"tslib\";\nimport { Matrix } from \"../../Maths/math.vector.js\";\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture.js\";\n\nimport { RegisterClass } from \"../../Misc/typeStore.js\";\n// Ensures Raw texture are included\nimport \"../../Engines/Extensions/engine.rawTexture.js\";\n/**\n * This represents a color grading texture. This acts as a lookup table LUT, useful during post process\n * It can help converting any input color in a desired output one. This can then be used to create effects\n * from sepia, black and white to sixties or futuristic rendering...\n *\n * The only supported format is currently 3dl.\n * More information on LUT: https://en.wikipedia.org/wiki/3D_lookup_table\n */\nvar ColorGradingTexture = /** @class */ (function (_super) {\n    __extends(ColorGradingTexture, _super);\n    /**\n     * Instantiates a ColorGradingTexture from the following parameters.\n     *\n     * @param url The location of the color grading data (currently only supporting 3dl)\n     * @param sceneOrEngine The scene or engine the texture will be used in\n     * @param onLoad defines a callback triggered when the texture has been loaded\n     */\n    function ColorGradingTexture(url, sceneOrEngine, onLoad) {\n        if (onLoad === void 0) { onLoad = null; }\n        var _this = _super.call(this, sceneOrEngine) || this;\n        if (!url) {\n            return _this;\n        }\n        _this._textureMatrix = Matrix.Identity();\n        _this.name = url;\n        _this.url = url;\n        _this._onLoad = onLoad;\n        _this._texture = _this._getFromCache(url, true);\n        if (!_this._texture) {\n            var scene = _this.getScene();\n            if (scene) {\n                if (!scene.useDelayedTextureLoading) {\n                    _this._loadTexture();\n                }\n                else {\n                    _this.delayLoadState = 4;\n                }\n            }\n            else {\n                _this._loadTexture();\n            }\n        }\n        else {\n            _this._triggerOnLoad();\n        }\n        return _this;\n    }\n    /**\n     * Fires the onload event from the constructor if requested.\n     */\n    ColorGradingTexture.prototype._triggerOnLoad = function () {\n        if (this._onLoad) {\n            this._onLoad();\n        }\n    };\n    /**\n     * Returns the texture matrix used in most of the material.\n     * This is not used in color grading but keep for troubleshooting purpose (easily swap diffuse by colorgrading to look in).\n     */\n    ColorGradingTexture.prototype.getTextureMatrix = function () {\n        return this._textureMatrix;\n    };\n    /**\n     * Occurs when the file being loaded is a .3dl LUT file.\n     */\n    ColorGradingTexture.prototype._load3dlTexture = function () {\n        var _this = this;\n        var engine = this._getEngine();\n        var texture;\n        if (!engine._features.support3DTextures) {\n            texture = engine.createRawTexture(null, 1, 1, 5, false, false, 2, null, 0);\n        }\n        else {\n            texture = engine.createRawTexture3D(null, 1, 1, 1, 5, false, false, 2, null, 0);\n        }\n        this._texture = texture;\n        this._texture.isReady = false;\n        this.isCube = false;\n        this.is3D = engine._features.support3DTextures;\n        this.wrapU = 0;\n        this.wrapV = 0;\n        this.wrapR = 0;\n        this.anisotropicFilteringLevel = 1;\n        var callback = function (text) {\n            if (typeof text !== \"string\") {\n                return;\n            }\n            var data = null;\n            var tempData = null;\n            var line;\n            var lines = text.split(\"\\n\");\n            var size = 0, pixelIndexW = 0, pixelIndexH = 0, pixelIndexSlice = 0;\n            var maxColor = 0;\n            for (var i = 0; i < lines.length; i++) {\n                line = lines[i];\n                if (!ColorGradingTexture._NoneEmptyLineRegex.test(line)) {\n                    continue;\n                }\n                if (line.indexOf(\"#\") === 0) {\n                    continue;\n                }\n                var words = line.split(\" \");\n                if (size === 0) {\n                    // Number of space + one\n                    size = words.length;\n                    data = new Uint8Array(size * size * size * 4); // volume texture of side size and rgb 8\n                    tempData = new Float32Array(size * size * size * 4);\n                    continue;\n                }\n                if (size != 0) {\n                    var r = Math.max(parseInt(words[0]), 0);\n                    var g = Math.max(parseInt(words[1]), 0);\n                    var b = Math.max(parseInt(words[2]), 0);\n                    maxColor = Math.max(r, maxColor);\n                    maxColor = Math.max(g, maxColor);\n                    maxColor = Math.max(b, maxColor);\n                    var pixelStorageIndex = (pixelIndexW + pixelIndexSlice * size + pixelIndexH * size * size) * 4;\n                    if (tempData) {\n                        tempData[pixelStorageIndex + 0] = r;\n                        tempData[pixelStorageIndex + 1] = g;\n                        tempData[pixelStorageIndex + 2] = b;\n                    }\n                    // Keep for reference in case of back compat problems.\n                    // pixelIndexSlice++;\n                    // if (pixelIndexSlice % size == 0) {\n                    //     pixelIndexH++;\n                    //     pixelIndexSlice = 0;\n                    //     if (pixelIndexH % size == 0) {\n                    //         pixelIndexW++;\n                    //         pixelIndexH = 0;\n                    //     }\n                    // }\n                    pixelIndexH++;\n                    if (pixelIndexH % size == 0) {\n                        pixelIndexSlice++;\n                        pixelIndexH = 0;\n                        if (pixelIndexSlice % size == 0) {\n                            pixelIndexW++;\n                            pixelIndexSlice = 0;\n                        }\n                    }\n                }\n            }\n            if (tempData && data) {\n                for (var i = 0; i < tempData.length; i++) {\n                    if (i > 0 && (i + 1) % 4 === 0) {\n                        data[i] = 255;\n                    }\n                    else {\n                        var value = tempData[i];\n                        data[i] = (value / maxColor) * 255;\n                    }\n                }\n            }\n            if (texture.is3D) {\n                texture.updateSize(size, size, size);\n                engine.updateRawTexture3D(texture, data, 5, false);\n            }\n            else {\n                texture.updateSize(size * size, size);\n                engine.updateRawTexture(texture, data, 5, false);\n            }\n            texture.isReady = true;\n            _this._triggerOnLoad();\n        };\n        var scene = this.getScene();\n        if (scene) {\n            scene._loadFile(this.url, callback);\n        }\n        else {\n            engine._loadFile(this.url, callback);\n        }\n        return this._texture;\n    };\n    /**\n     * Starts the loading process of the texture.\n     */\n    ColorGradingTexture.prototype._loadTexture = function () {\n        if (this.url && this.url.toLocaleLowerCase().indexOf(\".3dl\") == this.url.length - 4) {\n            this._load3dlTexture();\n        }\n    };\n    /**\n     * Clones the color grading texture.\n     */\n    ColorGradingTexture.prototype.clone = function () {\n        var newTexture = new ColorGradingTexture(this.url, this.getScene() || this._getEngine());\n        // Base texture\n        newTexture.level = this.level;\n        return newTexture;\n    };\n    /**\n     * Called during delayed load for textures.\n     */\n    ColorGradingTexture.prototype.delayLoad = function () {\n        if (this.delayLoadState !== 4) {\n            return;\n        }\n        this.delayLoadState = 1;\n        this._texture = this._getFromCache(this.url, true);\n        if (!this._texture) {\n            this._loadTexture();\n        }\n    };\n    /**\n     * Parses a color grading texture serialized by Babylon.\n     * @param parsedTexture The texture information being parsedTexture\n     * @param scene The scene to load the texture in\n     * @return A color grading texture\n     */\n    ColorGradingTexture.Parse = function (parsedTexture, scene) {\n        var texture = null;\n        if (parsedTexture.name && !parsedTexture.isRenderTarget) {\n            texture = new ColorGradingTexture(parsedTexture.name, scene);\n            texture.name = parsedTexture.name;\n            texture.level = parsedTexture.level;\n        }\n        return texture;\n    };\n    /**\n     * Serializes the LUT texture to json format.\n     */\n    ColorGradingTexture.prototype.serialize = function () {\n        if (!this.name) {\n            return null;\n        }\n        var serializationObject = {};\n        serializationObject.name = this.name;\n        serializationObject.level = this.level;\n        serializationObject.customType = \"BABYLON.ColorGradingTexture\";\n        return serializationObject;\n    };\n    /**\n     * Empty line regex stored for GC.\n     */\n    ColorGradingTexture._NoneEmptyLineRegex = /\\S+/;\n    return ColorGradingTexture;\n}(BaseTexture));\nexport { ColorGradingTexture };\nRegisterClass(\"BABYLON.ColorGradingTexture\", ColorGradingTexture);\n//# sourceMappingURL=colorGradingTexture.js.map","import { __assign, __extends } from \"tslib\";\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture.js\";\n\nimport { Matrix } from \"../../Maths/math.vector.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport \"../../Engines/Extensions/engine.dynamicTexture.js\";\nimport \"../../Engines/Extensions/engine.videoTexture.js\";\n/**\n * This represents the smallest workload to use an already existing element (Canvas or Video) as a texture.\n * To be as efficient as possible depending on your constraints nothing aside the first upload\n * is automatically managed.\n * It is a cheap VideoTexture or DynamicTexture if you prefer to keep full control of the elements\n * in your application.\n *\n * As the update is not automatic, you need to call them manually.\n */\nvar HtmlElementTexture = /** @class */ (function (_super) {\n    __extends(HtmlElementTexture, _super);\n    /**\n     * Instantiates a HtmlElementTexture from the following parameters.\n     *\n     * @param name Defines the name of the texture\n     * @param element Defines the video or canvas the texture is filled with\n     * @param options Defines the other none mandatory texture creation options\n     */\n    function HtmlElementTexture(name, element, options) {\n        var _this = _super.call(this, options.scene || options.engine) || this;\n        /**\n         * Observable triggered once the texture has been loaded.\n         */\n        _this.onLoadObservable = new Observable();\n        if (!element || (!options.engine && !options.scene)) {\n            return _this;\n        }\n        options = __assign(__assign({}, HtmlElementTexture._DefaultOptions), options);\n        _this._generateMipMaps = options.generateMipMaps;\n        _this._samplingMode = options.samplingMode;\n        _this._textureMatrix = Matrix.Identity();\n        _this.name = name;\n        _this.element = element;\n        _this._isVideo = element instanceof HTMLVideoElement;\n        _this.anisotropicFilteringLevel = 1;\n        _this._createInternalTexture();\n        return _this;\n    }\n    HtmlElementTexture.prototype._createInternalTexture = function () {\n        var width = 0;\n        var height = 0;\n        if (this._isVideo) {\n            width = this.element.videoWidth;\n            height = this.element.videoHeight;\n        }\n        else {\n            width = this.element.width;\n            height = this.element.height;\n        }\n        var engine = this._getEngine();\n        if (engine) {\n            this._texture = engine.createDynamicTexture(width, height, this._generateMipMaps, this._samplingMode);\n        }\n        this.update();\n    };\n    /**\n     * Returns the texture matrix used in most of the material.\n     */\n    HtmlElementTexture.prototype.getTextureMatrix = function () {\n        return this._textureMatrix;\n    };\n    /**\n     * Updates the content of the texture.\n     * @param invertY Defines whether the texture should be inverted on Y (false by default on video and true on canvas)\n     */\n    HtmlElementTexture.prototype.update = function (invertY) {\n        if (invertY === void 0) { invertY = null; }\n        var engine = this._getEngine();\n        if (this._texture == null || engine == null) {\n            return;\n        }\n        var wasReady = this.isReady();\n        if (this._isVideo) {\n            var videoElement = this.element;\n            if (videoElement.readyState < videoElement.HAVE_CURRENT_DATA) {\n                return;\n            }\n            engine.updateVideoTexture(this._texture, videoElement, invertY === null ? true : invertY);\n        }\n        else {\n            var canvasElement = this.element;\n            engine.updateDynamicTexture(this._texture, canvasElement, invertY === null ? true : invertY, false);\n        }\n        if (!wasReady && this.isReady()) {\n            this.onLoadObservable.notifyObservers(this);\n        }\n    };\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    HtmlElementTexture.prototype.dispose = function () {\n        this.onLoadObservable.clear();\n        _super.prototype.dispose.call(this);\n    };\n    HtmlElementTexture._DefaultOptions = {\n        generateMipMaps: false,\n        samplingMode: 2,\n        engine: null,\n        scene: null,\n    };\n    return HtmlElementTexture;\n}(BaseTexture));\nexport { HtmlElementTexture };\n//# sourceMappingURL=htmlElementTexture.js.map","import { GetTGAHeader, UploadContent } from \"../../../Misc/tga.js\";\nimport { Engine } from \"../../../Engines/engine.js\";\n/**\n * Implementation of the TGA Texture Loader.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nvar _TGATextureLoader = /** @class */ (function () {\n    function _TGATextureLoader() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * This returns if the loader support the current file information.\n     * @param extension defines the file extension of the file being loaded\n     * @returns true if the loader can load the specified file\n     */\n    _TGATextureLoader.prototype.canLoad = function (extension) {\n        return extension.endsWith(\".tga\");\n    };\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     */\n    _TGATextureLoader.prototype.loadCubeData = function () {\n        throw \".env not supported in Cube.\";\n    };\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    _TGATextureLoader.prototype.loadData = function (data, texture, callback) {\n        var bytes = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n        var header = GetTGAHeader(bytes);\n        callback(header.width, header.height, texture.generateMipMaps, false, function () {\n            UploadContent(texture, bytes);\n        });\n    };\n    return _TGATextureLoader;\n}());\nexport { _TGATextureLoader };\n// Register the loader.\nEngine._TextureLoaders.push(new _TGATextureLoader());\n//# sourceMappingURL=tgaTextureLoader.js.map","import { HDRTools } from \"../../../Misc/HighDynamicRange/hdr.js\";\nimport { Engine } from \"../../../Engines/engine.js\";\n\n/**\n * Implementation of the HDR Texture Loader.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nvar _HDRTextureLoader = /** @class */ (function () {\n    function _HDRTextureLoader() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * This returns if the loader support the current file information.\n     * @param extension defines the file extension of the file being loaded\n     * @returns true if the loader can load the specified file\n     */\n    _HDRTextureLoader.prototype.canLoad = function (extension) {\n        return extension.endsWith(\".hdr\");\n    };\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     */\n    _HDRTextureLoader.prototype.loadCubeData = function () {\n        throw \".env not supported in Cube.\";\n    };\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    _HDRTextureLoader.prototype.loadData = function (data, texture, callback) {\n        var uint8array = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n        var hdrInfo = HDRTools.RGBE_ReadHeader(uint8array);\n        var pixelsDataRGB32 = HDRTools.RGBE_ReadPixels(uint8array, hdrInfo);\n        var pixels = hdrInfo.width * hdrInfo.height;\n        var pixelsDataRGBA32 = new Float32Array(pixels * 4);\n        for (var i = 0; i < pixels; i += 1) {\n            pixelsDataRGBA32[i * 4] = pixelsDataRGB32[i * 3];\n            pixelsDataRGBA32[i * 4 + 1] = pixelsDataRGB32[i * 3 + 1];\n            pixelsDataRGBA32[i * 4 + 2] = pixelsDataRGB32[i * 3 + 2];\n            pixelsDataRGBA32[i * 4 + 3] = 1;\n        }\n        callback(hdrInfo.width, hdrInfo.height, texture.generateMipMaps, false, function () {\n            var engine = texture.getEngine();\n            texture.type = 1;\n            texture.format = 5;\n            texture._gammaSpace = false;\n            engine._uploadDataToTextureDirectly(texture, pixelsDataRGBA32);\n        });\n    };\n    return _HDRTextureLoader;\n}());\nexport { _HDRTextureLoader };\n// Register the loader.\nEngine._TextureLoaders.push(new _HDRTextureLoader());\n//# sourceMappingURL=hdrTextureLoader.js.map","import { Engine } from \"../../../Engines/engine.js\";\nimport { LoadTextureFromTranscodeResult, TranscodeAsync } from \"../../../Misc/basis.js\";\nimport { Tools } from \"../../../Misc/tools.js\";\n/**\n * Loader for .basis file format\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nvar _BasisTextureLoader = /** @class */ (function () {\n    function _BasisTextureLoader() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * This returns if the loader support the current file information.\n     * @param extension defines the file extension of the file being loaded\n     * @returns true if the loader can load the specified file\n     */\n    _BasisTextureLoader.prototype.canLoad = function (extension) {\n        return extension.endsWith(\".basis\");\n    };\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param createPolynomials will be true if polynomials have been requested\n     * @param onLoad defines the callback to trigger once the texture is ready\n     * @param onError defines the callback to trigger in case of error\n     */\n    _BasisTextureLoader.prototype.loadCubeData = function (data, texture, createPolynomials, onLoad, onError) {\n        if (Array.isArray(data)) {\n            return;\n        }\n        var caps = texture.getEngine().getCaps();\n        var transcodeConfig = {\n            supportedCompressionFormats: {\n                etc1: caps.etc1 ? true : false,\n                s3tc: caps.s3tc ? true : false,\n                pvrtc: caps.pvrtc ? true : false,\n                etc2: caps.etc2 ? true : false,\n            },\n        };\n        TranscodeAsync(data, transcodeConfig)\n            .then(function (result) {\n            var hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\n            LoadTextureFromTranscodeResult(texture, result);\n            texture.getEngine()._setCubeMapTextureParams(texture, hasMipmap);\n            texture.isReady = true;\n            texture.onLoadedObservable.notifyObservers(texture);\n            texture.onLoadedObservable.clear();\n            if (onLoad) {\n                onLoad();\n            }\n        })\n            .catch(function (err) {\n            var errorMessage = \"Failed to transcode Basis file, transcoding may not be supported on this device\";\n            Tools.Warn(errorMessage);\n            texture.isReady = true;\n            if (onError) {\n                onError(err);\n            }\n        });\n    };\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    _BasisTextureLoader.prototype.loadData = function (data, texture, callback) {\n        var caps = texture.getEngine().getCaps();\n        var transcodeConfig = {\n            supportedCompressionFormats: {\n                etc1: caps.etc1 ? true : false,\n                s3tc: caps.s3tc ? true : false,\n                pvrtc: caps.pvrtc ? true : false,\n                etc2: caps.etc2 ? true : false,\n            },\n        };\n        TranscodeAsync(data, transcodeConfig)\n            .then(function (result) {\n            var rootImage = result.fileInfo.images[0].levels[0];\n            var hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\n            callback(rootImage.width, rootImage.height, hasMipmap, result.format !== -1, function () {\n                LoadTextureFromTranscodeResult(texture, result);\n            });\n        })\n            .catch(function () {\n            Tools.Warn(\"Failed to transcode Basis file, transcoding may not be supported on this device\");\n            callback(0, 0, false, false, function () { }, true);\n        });\n    };\n    return _BasisTextureLoader;\n}());\nexport { _BasisTextureLoader };\n// Register the loader.\nEngine._TextureLoaders.push(new _BasisTextureLoader());\n//# sourceMappingURL=basisTextureLoader.js.map","/**\n * This is a support class for frame Data on texture packer sets.\n */\nvar TexturePackerFrame = /** @class */ (function () {\n    /**\n     * Initializes a texture package frame.\n     * @param id The numerical frame identifier\n     * @param scale Scalar Vector2 for UV frame\n     * @param offset Vector2 for the frame position in UV units.\n     * @returns TexturePackerFrame\n     */\n    function TexturePackerFrame(id, scale, offset) {\n        this.id = id;\n        this.scale = scale;\n        this.offset = offset;\n    }\n    return TexturePackerFrame;\n}());\nexport { TexturePackerFrame };\n//# sourceMappingURL=frame.js.map","import { Engine } from \"../../../Engines/engine.js\";\nimport { VertexBuffer } from \"../../../Buffers/buffer.js\";\nimport { Texture } from \"../texture.js\";\nimport { DynamicTexture } from \"../dynamicTexture.js\";\nimport { Vector2 } from \"../../../Maths/math.vector.js\";\nimport { Color3, Color4 } from \"../../../Maths/math.color.js\";\nimport { TexturePackerFrame } from \"./frame.js\";\nimport { Logger } from \"../../../Misc/logger.js\";\nimport { Tools } from \"../../../Misc/tools.js\";\n/**\n * This is a support class that generates a series of packed texture sets.\n * @see https://doc.babylonjs.com/babylon101/materials\n */\nvar TexturePacker = /** @class */ (function () {\n    /**\n     * Initializes a texture package series from an array of meshes or a single mesh.\n     * @param name The name of the package\n     * @param meshes The target meshes to compose the package from\n     * @param options The arguments that texture packer should follow while building.\n     * @param scene The scene which the textures are scoped to.\n     * @returns TexturePacker\n     */\n    function TexturePacker(name, meshes, options, scene) {\n        var _b, _c, _d, _e, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n        this.name = name;\n        this.meshes = meshes;\n        this.scene = scene;\n        /**\n         * Run through the options and set what ever defaults are needed that where not declared.\n         */\n        this.options = options;\n        this.options.map = (_b = this.options.map) !== null && _b !== void 0 ? _b : [\n            \"ambientTexture\",\n            \"bumpTexture\",\n            \"diffuseTexture\",\n            \"emissiveTexture\",\n            \"lightmapTexture\",\n            \"opacityTexture\",\n            \"reflectionTexture\",\n            \"refractionTexture\",\n            \"specularTexture\",\n        ];\n        this.options.uvsIn = (_c = this.options.uvsIn) !== null && _c !== void 0 ? _c : VertexBuffer.UVKind;\n        this.options.uvsOut = (_d = this.options.uvsOut) !== null && _d !== void 0 ? _d : VertexBuffer.UVKind;\n        this.options.layout = (_e = this.options.layout) !== null && _e !== void 0 ? _e : TexturePacker.LAYOUT_STRIP;\n        if (this.options.layout === TexturePacker.LAYOUT_COLNUM) {\n            this.options.colnum = (_g = this.options.colnum) !== null && _g !== void 0 ? _g : 8;\n        }\n        this.options.updateInputMeshes = (_h = this.options.updateInputMeshes) !== null && _h !== void 0 ? _h : true;\n        this.options.disposeSources = (_j = this.options.disposeSources) !== null && _j !== void 0 ? _j : true;\n        this._expecting = 0;\n        this.options.fillBlanks = (_k = this.options.fillBlanks) !== null && _k !== void 0 ? _k : true;\n        if (this.options.fillBlanks === true) {\n            this.options.customFillColor = (_l = this.options.customFillColor) !== null && _l !== void 0 ? _l : \"black\";\n        }\n        this.options.frameSize = (_m = this.options.frameSize) !== null && _m !== void 0 ? _m : 256;\n        this.options.paddingRatio = (_o = this.options.paddingRatio) !== null && _o !== void 0 ? _o : 0.0115;\n        this._paddingValue = Math.ceil(this.options.frameSize * this.options.paddingRatio);\n        //Make it an even padding Number.\n        if (this._paddingValue % 2 !== 0) {\n            this._paddingValue++;\n        }\n        this.options.paddingMode = (_p = this.options.paddingMode) !== null && _p !== void 0 ? _p : TexturePacker.SUBUV_WRAP;\n        if (this.options.paddingMode === TexturePacker.SUBUV_COLOR) {\n            this.options.paddingColor = (_q = this.options.paddingColor) !== null && _q !== void 0 ? _q : new Color4(0, 0, 0, 1.0);\n        }\n        this.sets = {};\n        this.frames = [];\n        return this;\n    }\n    /**\n     * Starts the package process\n     * @param resolve The promises resolution function\n     * @returns TexturePacker\n     */\n    TexturePacker.prototype._createFrames = function (resolve) {\n        var _this = this;\n        var dtSize = this._calculateSize();\n        var dtUnits = new Vector2(1, 1).divide(dtSize);\n        var doneCount = 0;\n        var expecting = this._expecting;\n        var meshLength = this.meshes.length;\n        var sKeys = Object.keys(this.sets);\n        for (var i = 0; i < sKeys.length; i++) {\n            var setName = sKeys[i];\n            var dt = new DynamicTexture(this.name + \".TexturePack.\" + setName + \"Set\", { width: dtSize.x, height: dtSize.y }, this.scene, true, //Generate Mips\n            Texture.TRILINEAR_SAMPLINGMODE, Engine.TEXTUREFORMAT_RGBA);\n            var dtx = dt.getContext();\n            dtx.fillStyle = \"rgba(0,0,0,0)\";\n            dtx.fillRect(0, 0, dtSize.x, dtSize.y);\n            dt.update(false);\n            this.sets[setName] = dt;\n        }\n        var baseSize = this.options.frameSize || 256;\n        var padding = this._paddingValue;\n        var tcs = baseSize + 2 * padding;\n        var done = function () {\n            _this._calculateMeshUVFrames(baseSize, padding, dtSize, dtUnits, _this.options.updateInputMeshes || false);\n        };\n        //Update the Textures\n        for (var i = 0; i < meshLength; i++) {\n            var m = this.meshes[i];\n            var mat = m.material;\n            var _loop_1 = function (j) {\n                var tempTexture = new DynamicTexture(\"temp\", tcs, this_1.scene, true);\n                var tcx = tempTexture.getContext();\n                var offset = this_1._getFrameOffset(i);\n                var updateDt = function () {\n                    doneCount++;\n                    tempTexture.update(false);\n                    var iDat = tcx.getImageData(0, 0, tcs, tcs);\n                    //Update Set\n                    var dt = _this.sets[setName];\n                    var dtx = dt.getContext();\n                    dtx.putImageData(iDat, dtSize.x * offset.x, dtSize.y * offset.y);\n                    tempTexture.dispose();\n                    dt.update(false);\n                    if (doneCount == expecting) {\n                        done();\n                        resolve();\n                        return;\n                    }\n                };\n                var setName = sKeys[j] || \"_blank\";\n                if (!mat || mat[setName] === null) {\n                    tcx.fillStyle = \"rgba(0,0,0,0)\";\n                    if (this_1.options.fillBlanks) {\n                        tcx.fillStyle = this_1.options.customFillColor;\n                    }\n                    tcx.fillRect(0, 0, tcs, tcs);\n                    updateDt();\n                }\n                else {\n                    var setTexture = mat[setName];\n                    var img_1 = new Image();\n                    if (setTexture instanceof DynamicTexture) {\n                        img_1.src = setTexture.getContext().canvas.toDataURL(\"image/png\");\n                    }\n                    else {\n                        img_1.src = setTexture.url;\n                    }\n                    Tools.SetCorsBehavior(img_1.src, img_1);\n                    img_1.onload = function () {\n                        tcx.fillStyle = \"rgba(0,0,0,0)\";\n                        tcx.fillRect(0, 0, tcs, tcs);\n                        tempTexture.update(false);\n                        tcx.setTransform(1, 0, 0, -1, 0, 0);\n                        var cellOffsets = [0, 0, 1, 0, 1, 1, 0, 1, -1, 1, -1, 0, -1 - 1, 0, -1, 1, -1];\n                        switch (_this.options.paddingMode) {\n                            //Wrap Mode\n                            case 0:\n                                for (var i_1 = 0; i_1 < 9; i_1++) {\n                                    tcx.drawImage(img_1, 0, 0, img_1.width, img_1.height, padding + baseSize * cellOffsets[i_1], padding + baseSize * cellOffsets[i_1 + 1] - tcs, baseSize, baseSize);\n                                }\n                                break;\n                            //Extend Mode\n                            case 1:\n                                for (var i_2 = 0; i_2 < padding; i_2++) {\n                                    tcx.drawImage(img_1, 0, 0, img_1.width, img_1.height, i_2 + baseSize * cellOffsets[0], padding - tcs, baseSize, baseSize);\n                                    tcx.drawImage(img_1, 0, 0, img_1.width, img_1.height, padding * 2 - i_2, padding - tcs, baseSize, baseSize);\n                                    tcx.drawImage(img_1, 0, 0, img_1.width, img_1.height, padding, i_2 - tcs, baseSize, baseSize);\n                                    tcx.drawImage(img_1, 0, 0, img_1.width, img_1.height, padding, padding * 2 - i_2 - tcs, baseSize, baseSize);\n                                }\n                                tcx.drawImage(img_1, 0, 0, img_1.width, img_1.height, padding + baseSize * cellOffsets[0], padding + baseSize * cellOffsets[1] - tcs, baseSize, baseSize);\n                                break;\n                            //Color Mode\n                            case 2:\n                                tcx.fillStyle = (_this.options.paddingColor || Color3.Black()).toHexString();\n                                tcx.fillRect(0, 0, tcs, -tcs);\n                                tcx.clearRect(padding, padding, baseSize, baseSize);\n                                tcx.drawImage(img_1, 0, 0, img_1.width, img_1.height, padding + baseSize * cellOffsets[0], padding + baseSize * cellOffsets[1] - tcs, baseSize, baseSize);\n                                break;\n                        }\n                        tcx.setTransform(1, 0, 0, 1, 0, 0);\n                        updateDt();\n                    };\n                }\n            };\n            var this_1 = this;\n            //Check if the material has the texture\n            //Create a temporary canvas the same size as 1 frame\n            //Then apply the texture to the center and the 8 offsets\n            //Copy the Context and place in the correct frame on the DT\n            for (var j = 0; j < sKeys.length; j++) {\n                _loop_1(j);\n            }\n        }\n    };\n    /**\n     * Calculates the Size of the Channel Sets\n     * @returns Vector2\n     */\n    TexturePacker.prototype._calculateSize = function () {\n        var meshLength = this.meshes.length || 0;\n        var baseSize = this.options.frameSize || 0;\n        var padding = this._paddingValue || 0;\n        switch (this.options.layout) {\n            case 0: {\n                //STRIP_LAYOUT\n                return new Vector2(baseSize * meshLength + 2 * padding * meshLength, baseSize + 2 * padding);\n            }\n            case 1: {\n                //POWER2\n                var sqrtCount = Math.max(2, Math.ceil(Math.sqrt(meshLength)));\n                var size = baseSize * sqrtCount + 2 * padding * sqrtCount;\n                return new Vector2(size, size);\n            }\n            case 2: {\n                //COLNUM\n                var cols = this.options.colnum || 1;\n                var rowCnt = Math.max(1, Math.ceil(meshLength / cols));\n                return new Vector2(baseSize * cols + 2 * padding * cols, baseSize * rowCnt + 2 * padding * rowCnt);\n            }\n        }\n        return Vector2.Zero();\n    };\n    /**\n     * Calculates the UV data for the frames.\n     * @param baseSize the base frameSize\n     * @param padding the base frame padding\n     * @param dtSize size of the Dynamic Texture for that channel\n     * @param dtUnits is 1/dtSize\n     * @param update flag to update the input meshes\n     */\n    TexturePacker.prototype._calculateMeshUVFrames = function (baseSize, padding, dtSize, dtUnits, update) {\n        var meshLength = this.meshes.length;\n        for (var i = 0; i < meshLength; i++) {\n            var m = this.meshes[i];\n            var scale = new Vector2(baseSize / dtSize.x, baseSize / dtSize.y);\n            var pOffset = dtUnits.clone().scale(padding);\n            var frameOffset = this._getFrameOffset(i);\n            var offset = frameOffset.add(pOffset);\n            var frame = new TexturePackerFrame(i, scale, offset);\n            this.frames.push(frame);\n            //Update Output UVs\n            if (update) {\n                this._updateMeshUV(m, i);\n                this._updateTextureReferences(m);\n            }\n        }\n    };\n    /**\n     * Calculates the frames Offset.\n     * @param index of the frame\n     * @returns Vector2\n     */\n    TexturePacker.prototype._getFrameOffset = function (index) {\n        var meshLength = this.meshes.length;\n        var uvStep, yStep, xStep;\n        switch (this.options.layout) {\n            case 0: {\n                //STRIP_LAYOUT\n                uvStep = 1 / meshLength;\n                return new Vector2(index * uvStep, 0);\n            }\n            case 1: {\n                //POWER2\n                var sqrtCount = Math.max(2, Math.ceil(Math.sqrt(meshLength)));\n                yStep = Math.floor(index / sqrtCount);\n                xStep = index - yStep * sqrtCount;\n                uvStep = 1 / sqrtCount;\n                return new Vector2(xStep * uvStep, yStep * uvStep);\n            }\n            case 2: {\n                //COLNUM\n                var cols = this.options.colnum || 1;\n                var rowCnt = Math.max(1, Math.ceil(meshLength / cols));\n                xStep = Math.floor(index / rowCnt);\n                yStep = index - xStep * rowCnt;\n                uvStep = new Vector2(1 / cols, 1 / rowCnt);\n                return new Vector2(xStep * uvStep.x, yStep * uvStep.y);\n            }\n        }\n        return Vector2.Zero();\n    };\n    /**\n     * Updates a Mesh to the frame data\n     * @param mesh that is the target\n     * @param frameID or the frame index\n     */\n    TexturePacker.prototype._updateMeshUV = function (mesh, frameID) {\n        var frame = this.frames[frameID];\n        var uvIn = mesh.getVerticesData(this.options.uvsIn || VertexBuffer.UVKind);\n        var uvOut = [];\n        var toCount = 0;\n        if (uvIn.length) {\n            toCount = uvIn.length || 0;\n        }\n        for (var i = 0; i < toCount; i += 2) {\n            uvOut.push(uvIn[i] * frame.scale.x + frame.offset.x, uvIn[i + 1] * frame.scale.y + frame.offset.y);\n        }\n        mesh.setVerticesData(this.options.uvsOut || VertexBuffer.UVKind, uvOut);\n    };\n    /**\n     * Updates a Meshes materials to use the texture packer channels\n     * @param m is the mesh to target\n     * @param force all channels on the packer to be set.\n     */\n    TexturePacker.prototype._updateTextureReferences = function (m, force) {\n        if (force === void 0) { force = false; }\n        var mat = m.material;\n        var sKeys = Object.keys(this.sets);\n        var _dispose = function (_t) {\n            if (_t.dispose) {\n                _t.dispose();\n            }\n        };\n        for (var i = 0; i < sKeys.length; i++) {\n            var setName = sKeys[i];\n            if (!force) {\n                if (!mat) {\n                    return;\n                }\n                if (mat[setName] !== null) {\n                    _dispose(mat[setName]);\n                    mat[setName] = this.sets[setName];\n                }\n            }\n            else {\n                if (mat[setName] !== null) {\n                    _dispose(mat[setName]);\n                }\n                mat[setName] = this.sets[setName];\n            }\n        }\n    };\n    /**\n     * Public method to set a Mesh to a frame\n     * @param m that is the target\n     * @param frameID or the frame index\n     * @param updateMaterial trigger for if the Meshes attached Material be updated?\n     */\n    TexturePacker.prototype.setMeshToFrame = function (m, frameID, updateMaterial) {\n        if (updateMaterial === void 0) { updateMaterial = false; }\n        this._updateMeshUV(m, frameID);\n        if (updateMaterial) {\n            this._updateTextureReferences(m, true);\n        }\n    };\n    /**\n     * Starts the async promise to compile the texture packer.\n     * @returns Promise<void>\n     */\n    TexturePacker.prototype.processAsync = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                if (_this.meshes.length === 0) {\n                    //Must be a JSON load!\n                    resolve();\n                    return;\n                }\n                var done_1 = 0;\n                var doneCheck_1 = function (mat) {\n                    done_1++;\n                    //Check Status of all Textures on all meshes, till they are ready.\n                    if (_this.options.map) {\n                        for (var j = 0; j < _this.options.map.length; j++) {\n                            var index = _this.options.map[j];\n                            var t = mat[index];\n                            if (t !== null) {\n                                if (!_this.sets[_this.options.map[j]]) {\n                                    _this.sets[_this.options.map[j]] = true;\n                                }\n                                _this._expecting++;\n                            }\n                        }\n                        if (done_1 === _this.meshes.length) {\n                            _this._createFrames(resolve);\n                        }\n                    }\n                };\n                var _loop_2 = function (i) {\n                    var mesh = _this.meshes[i];\n                    var material = mesh.material;\n                    if (!material) {\n                        done_1++;\n                        if (done_1 === _this.meshes.length) {\n                            return { value: _this._createFrames(resolve) };\n                        }\n                        return \"continue\";\n                    }\n                    material.forceCompilationAsync(mesh).then(function () {\n                        doneCheck_1(material);\n                    });\n                };\n                for (var i = 0; i < _this.meshes.length; i++) {\n                    var state_1 = _loop_2(i);\n                    if (typeof state_1 === \"object\")\n                        return state_1.value;\n                }\n            }\n            catch (e) {\n                return reject(e);\n            }\n        });\n    };\n    /**\n     * Disposes all textures associated with this packer\n     */\n    TexturePacker.prototype.dispose = function () {\n        var sKeys = Object.keys(this.sets);\n        for (var i = 0; i < sKeys.length; i++) {\n            var channel = sKeys[i];\n            this.sets[channel].dispose();\n        }\n    };\n    /**\n     * Starts the download process for all the channels converting them to base64 data and embedding it all in a JSON file.\n     * @param imageType is the image type to use.\n     * @param quality of the image if downloading as jpeg, Ranges from >0 to 1.\n     */\n    TexturePacker.prototype.download = function (imageType, quality) {\n        var _this = this;\n        if (imageType === void 0) { imageType = \"png\"; }\n        if (quality === void 0) { quality = 1; }\n        setTimeout(function () {\n            var pack = {\n                name: _this.name,\n                sets: {},\n                options: {},\n                frames: [],\n            };\n            var sKeys = Object.keys(_this.sets);\n            var oKeys = Object.keys(_this.options);\n            try {\n                for (var i = 0; i < sKeys.length; i++) {\n                    var channel = sKeys[i];\n                    var dt = _this.sets[channel];\n                    pack.sets[channel] = dt.getContext().canvas.toDataURL(\"image/\" + imageType, quality);\n                }\n                for (var i = 0; i < oKeys.length; i++) {\n                    var opt = oKeys[i];\n                    pack.options[opt] = _this.options[opt];\n                }\n                for (var i = 0; i < _this.frames.length; i++) {\n                    var _f = _this.frames[i];\n                    pack.frames.push(_f.scale.x, _f.scale.y, _f.offset.x, _f.offset.y);\n                }\n            }\n            catch (err) {\n                Logger.Warn(\"Unable to download: \" + err);\n                return;\n            }\n            var data = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(pack, null, 4));\n            var _a = document.createElement(\"a\");\n            _a.setAttribute(\"href\", data);\n            _a.setAttribute(\"download\", _this.name + \"_texurePackage.json\");\n            document.body.appendChild(_a);\n            _a.click();\n            _a.remove();\n        }, 0);\n    };\n    /**\n     * Public method to load a texturePacker JSON file.\n     * @param data of the JSON file in string format.\n     */\n    TexturePacker.prototype.updateFromJSON = function (data) {\n        try {\n            var parsedData = JSON.parse(data);\n            this.name = parsedData.name;\n            var _options = Object.keys(parsedData.options);\n            for (var i = 0; i < _options.length; i++) {\n                this.options[_options[i]] = parsedData.options[_options[i]];\n            }\n            for (var i = 0; i < parsedData.frames.length; i += 4) {\n                var frame = new TexturePackerFrame(i / 4, new Vector2(parsedData.frames[i], parsedData.frames[i + 1]), new Vector2(parsedData.frames[i + 2], parsedData.frames[i + 3]));\n                this.frames.push(frame);\n            }\n            var channels = Object.keys(parsedData.sets);\n            for (var i = 0; i < channels.length; i++) {\n                var _t = new Texture(parsedData.sets[channels[i]], this.scene, false, false);\n                this.sets[channels[i]] = _t;\n            }\n        }\n        catch (err) {\n            Logger.Warn(\"Unable to update from JSON: \" + err);\n        }\n    };\n    /** Packer Layout Constant 0 */\n    TexturePacker.LAYOUT_STRIP = 0;\n    /** Packer Layout Constant 1 */\n    TexturePacker.LAYOUT_POWER2 = 1;\n    /** Packer Layout Constant 2 */\n    TexturePacker.LAYOUT_COLNUM = 2;\n    /** Packer Layout Constant 0 */\n    TexturePacker.SUBUV_WRAP = 0;\n    /** Packer Layout Constant 1 */\n    TexturePacker.SUBUV_EXTEND = 1;\n    /** Packer Layout Constant 2 */\n    TexturePacker.SUBUV_COLOR = 2;\n    return TexturePacker;\n}());\nexport { TexturePacker };\n//# sourceMappingURL=packer.js.map","import { __extends } from \"tslib\";\nimport { Logger } from \"../../../Misc/logger.js\";\nimport { Vector3, Vector2 } from \"../../../Maths/math.vector.js\";\nimport { Color4, Color3 } from \"../../../Maths/math.color.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { ProceduralTexture } from \"./proceduralTexture.js\";\nimport { WebRequest } from \"../../../Misc/webRequest.js\";\n/**\n * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\n * Custom Procedural textures are the easiest way to create your own procedural in your application.\n * @see https://doc.babylonjs.com/how_to/how_to_use_procedural_textures#creating-custom-procedural-textures\n */\nvar CustomProceduralTexture = /** @class */ (function (_super) {\n    __extends(CustomProceduralTexture, _super);\n    /**\n     * Instantiates a new Custom Procedural Texture.\n     * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\n     * Custom Procedural textures are the easiest way to create your own procedural in your application.\n     * @see https://doc.babylonjs.com/how_to/how_to_use_procedural_textures#creating-custom-procedural-textures\n     * @param name Define the name of the texture\n     * @param texturePath Define the folder path containing all the custom texture related files (config, shaders...)\n     * @param size Define the size of the texture to create\n     * @param scene Define the scene the texture belongs to\n     * @param fallbackTexture Define a fallback texture in case there were issues to create the custom texture\n     * @param generateMipMaps Define if the texture should creates mip maps or not\n     */\n    function CustomProceduralTexture(name, texturePath, size, scene, fallbackTexture, generateMipMaps) {\n        var _this = _super.call(this, name, size, null, scene, fallbackTexture, generateMipMaps) || this;\n        _this._animate = true;\n        _this._time = 0;\n        _this._texturePath = texturePath;\n        //Try to load json\n        _this._loadJson(texturePath);\n        _this.refreshRate = 1;\n        return _this;\n    }\n    CustomProceduralTexture.prototype._loadJson = function (jsonUrl) {\n        var _this = this;\n        var noConfigFile = function () {\n            try {\n                _this.setFragment(_this._texturePath);\n            }\n            catch (ex) {\n                Logger.Log(\"No json or ShaderStore or DOM element found for CustomProceduralTexture\");\n            }\n        };\n        var configFileUrl = jsonUrl + \"/config.json\";\n        var xhr = new WebRequest();\n        xhr.open(\"GET\", configFileUrl);\n        xhr.addEventListener(\"load\", function () {\n            if (xhr.status === 200 || (xhr.responseText && xhr.responseText.length > 0)) {\n                try {\n                    _this._config = JSON.parse(xhr.response);\n                    _this.updateShaderUniforms();\n                    _this.updateTextures();\n                    _this.setFragment(_this._texturePath + \"/custom\");\n                    _this._animate = _this._config.animate;\n                    _this.refreshRate = _this._config.refreshrate;\n                }\n                catch (ex) {\n                    noConfigFile();\n                }\n            }\n            else {\n                noConfigFile();\n            }\n        }, false);\n        xhr.addEventListener(\"error\", function () {\n            noConfigFile();\n        }, false);\n        try {\n            xhr.send();\n        }\n        catch (ex) {\n            Logger.Error(\"CustomProceduralTexture: Error on XHR send request.\");\n        }\n    };\n    /**\n     * Is the texture ready to be used ? (rendered at least once)\n     * @returns true if ready, otherwise, false.\n     */\n    CustomProceduralTexture.prototype.isReady = function () {\n        if (!_super.prototype.isReady.call(this)) {\n            return false;\n        }\n        for (var name_1 in this._textures) {\n            var texture = this._textures[name_1];\n            if (!texture.isReady()) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Render the texture to its associated render target.\n     * @param useCameraPostProcess Define if camera post process should be applied to the texture\n     */\n    CustomProceduralTexture.prototype.render = function (useCameraPostProcess) {\n        var scene = this.getScene();\n        if (this._animate && scene) {\n            this._time += scene.getAnimationRatio() * 0.03;\n            this.updateShaderUniforms();\n        }\n        _super.prototype.render.call(this, useCameraPostProcess);\n    };\n    /**\n     * Update the list of dependant textures samplers in the shader.\n     */\n    CustomProceduralTexture.prototype.updateTextures = function () {\n        for (var i = 0; i < this._config.sampler2Ds.length; i++) {\n            this.setTexture(this._config.sampler2Ds[i].sample2Dname, new Texture(this._texturePath + \"/\" + this._config.sampler2Ds[i].textureRelativeUrl, this.getScene()));\n        }\n    };\n    /**\n     * Update the uniform values of the procedural texture in the shader.\n     */\n    CustomProceduralTexture.prototype.updateShaderUniforms = function () {\n        if (this._config) {\n            for (var j = 0; j < this._config.uniforms.length; j++) {\n                var uniform = this._config.uniforms[j];\n                switch (uniform.type) {\n                    case \"float\":\n                        this.setFloat(uniform.name, uniform.value);\n                        break;\n                    case \"color3\":\n                        this.setColor3(uniform.name, new Color3(uniform.r, uniform.g, uniform.b));\n                        break;\n                    case \"color4\":\n                        this.setColor4(uniform.name, new Color4(uniform.r, uniform.g, uniform.b, uniform.a));\n                        break;\n                    case \"vector2\":\n                        this.setVector2(uniform.name, new Vector2(uniform.x, uniform.y));\n                        break;\n                    case \"vector3\":\n                        this.setVector3(uniform.name, new Vector3(uniform.x, uniform.y, uniform.z));\n                        break;\n                }\n            }\n        }\n        this.setFloat(\"time\", this._time);\n    };\n    Object.defineProperty(CustomProceduralTexture.prototype, \"animate\", {\n        /**\n         * Define if the texture animates or not.\n         */\n        get: function () {\n            return this._animate;\n        },\n        set: function (value) {\n            this._animate = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return CustomProceduralTexture;\n}(ProceduralTexture));\nexport { CustomProceduralTexture };\n//# sourceMappingURL=customProceduralTexture.js.map","import { __extends } from \"tslib\";\nimport { EngineStore } from \"../../../Engines/engineStore.js\";\nimport { ProceduralTexture } from \"./proceduralTexture.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport \"../../../Shaders/noise.fragment.js\";\n/**\n * Class used to generate noise procedural textures\n */\nvar NoiseProceduralTexture = /** @class */ (function (_super) {\n    __extends(NoiseProceduralTexture, _super);\n    /**\n     * Creates a new NoiseProceduralTexture\n     * @param name defines the name fo the texture\n     * @param size defines the size of the texture (default is 256)\n     * @param scene defines the hosting scene\n     * @param fallbackTexture defines the texture to use if the NoiseProceduralTexture can't be created\n     * @param generateMipMaps defines if mipmaps must be generated (true by default)\n     */\n    function NoiseProceduralTexture(name, size, scene, fallbackTexture, generateMipMaps) {\n        if (size === void 0) { size = 256; }\n        if (scene === void 0) { scene = EngineStore.LastCreatedScene; }\n        var _this = _super.call(this, name, size, \"noise\", scene, fallbackTexture, generateMipMaps) || this;\n        /** Gets or sets the start time (default is 0) */\n        _this.time = 0.0;\n        /** Gets or sets a value between 0 and 1 indicating the overall brightness of the texture (default is 0.2) */\n        _this.brightness = 0.2;\n        /** Defines the number of octaves to process */\n        _this.octaves = 3;\n        /** Defines the level of persistence (0.8 by default) */\n        _this.persistence = 0.8;\n        /** Gets or sets animation speed factor (default is 1) */\n        _this.animationSpeedFactor = 1;\n        _this.autoClear = false;\n        _this._updateShaderUniforms();\n        return _this;\n    }\n    NoiseProceduralTexture.prototype._updateShaderUniforms = function () {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this.time += scene.getAnimationRatio() * this.animationSpeedFactor * 0.01;\n        this.setFloat(\"brightness\", this.brightness);\n        this.setFloat(\"persistence\", this.persistence);\n        this.setFloat(\"timeScale\", this.time);\n    };\n    NoiseProceduralTexture.prototype._getDefines = function () {\n        return \"#define OCTAVES \" + (this.octaves | 0);\n    };\n    /**\n     * Generate the current state of the procedural texture\n     * @param useCameraPostProcess\n     */\n    NoiseProceduralTexture.prototype.render = function (useCameraPostProcess) {\n        this._updateShaderUniforms();\n        _super.prototype.render.call(this, useCameraPostProcess);\n    };\n    /**\n     * Serializes this noise procedural texture\n     * @returns a serialized noise procedural texture object\n     */\n    NoiseProceduralTexture.prototype.serialize = function () {\n        var serializationObject = {};\n        serializationObject.customType = \"BABYLON.NoiseProceduralTexture\";\n        serializationObject.brightness = this.brightness;\n        serializationObject.octaves = this.octaves;\n        serializationObject.persistence = this.persistence;\n        serializationObject.animationSpeedFactor = this.animationSpeedFactor;\n        serializationObject.size = this.getSize().width;\n        serializationObject.generateMipMaps = this._generateMipMaps;\n        serializationObject.time = this.time;\n        return serializationObject;\n    };\n    /**\n     * Clone the texture.\n     * @returns the cloned texture\n     */\n    NoiseProceduralTexture.prototype.clone = function () {\n        var textureSize = this.getSize();\n        var newTexture = new NoiseProceduralTexture(this.name, textureSize.width, this.getScene(), this._fallbackTexture ? this._fallbackTexture : undefined, this._generateMipMaps);\n        // Base texture\n        newTexture.hasAlpha = this.hasAlpha;\n        newTexture.level = this.level;\n        // RenderTarget Texture\n        newTexture.coordinatesMode = this.coordinatesMode;\n        // Noise Specifics\n        newTexture.brightness = this.brightness;\n        newTexture.octaves = this.octaves;\n        newTexture.persistence = this.persistence;\n        newTexture.animationSpeedFactor = this.animationSpeedFactor;\n        newTexture.time = this.time;\n        return newTexture;\n    };\n    /**\n     * Creates a NoiseProceduralTexture from parsed noise procedural texture data\n     * @param parsedTexture defines parsed texture data\n     * @param scene defines the current scene\n     * @returns a parsed NoiseProceduralTexture\n     */\n    NoiseProceduralTexture.Parse = function (parsedTexture, scene) {\n        var _a;\n        var texture = new NoiseProceduralTexture(parsedTexture.name, parsedTexture.size, scene, undefined, parsedTexture.generateMipMaps);\n        texture.brightness = parsedTexture.brightness;\n        texture.octaves = parsedTexture.octaves;\n        texture.persistence = parsedTexture.persistence;\n        texture.animationSpeedFactor = parsedTexture.animationSpeedFactor;\n        texture.time = (_a = parsedTexture.time) !== null && _a !== void 0 ? _a : 0;\n        return texture;\n    };\n    return NoiseProceduralTexture;\n}(ProceduralTexture));\nexport { NoiseProceduralTexture };\nRegisterClass(\"BABYLON.NoiseProceduralTexture\", NoiseProceduralTexture);\n//# sourceMappingURL=noiseProceduralTexture.js.map","import { __extends } from \"tslib\";\nimport { Texture } from \"./texture.js\";\n\nimport \"../../Engines/Extensions/engine.rawTexture.js\";\n/**\n * Class used to store 3D textures containing user data\n */\nvar RawTexture3D = /** @class */ (function (_super) {\n    __extends(RawTexture3D, _super);\n    /**\n     * Create a new RawTexture3D\n     * @param data defines the data of the texture\n     * @param width defines the width of the texture\n     * @param height defines the height of the texture\n     * @param depth defines the depth of the texture\n     * @param format defines the texture format to use\n     * @param scene defines the hosting scene\n     * @param generateMipMaps defines a boolean indicating if mip levels should be generated (true by default)\n     * @param invertY defines if texture must be stored with Y axis inverted\n     * @param samplingMode defines the sampling mode to use (Texture.TRILINEAR_SAMPLINGMODE by default)\n     * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_INT, Engine.TEXTURETYPE_FLOAT...)\n     */\n    function RawTexture3D(data, width, height, depth, \n    /** Gets or sets the texture format to use */\n    format, scene, generateMipMaps, invertY, samplingMode, textureType) {\n        if (generateMipMaps === void 0) { generateMipMaps = true; }\n        if (invertY === void 0) { invertY = false; }\n        if (samplingMode === void 0) { samplingMode = Texture.TRILINEAR_SAMPLINGMODE; }\n        if (textureType === void 0) { textureType = 0; }\n        var _this = _super.call(this, null, scene, !generateMipMaps, invertY) || this;\n        _this.format = format;\n        _this._texture = scene.getEngine().createRawTexture3D(data, width, height, depth, format, generateMipMaps, invertY, samplingMode, null, textureType);\n        _this.is3D = true;\n        return _this;\n    }\n    /**\n     * Update the texture with new data\n     * @param data defines the data to store in the texture\n     */\n    RawTexture3D.prototype.update = function (data) {\n        if (!this._texture) {\n            return;\n        }\n        this._getEngine().updateRawTexture3D(this._texture, data, this._texture.format, this._texture.invertY, null, this._texture.type);\n    };\n    return RawTexture3D;\n}(Texture));\nexport { RawTexture3D };\n//# sourceMappingURL=rawTexture3D.js.map","import { __extends } from \"tslib\";\nimport { Plane } from \"../../Maths/math.plane.js\";\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture.js\";\n/**\n * Creates a refraction texture used by refraction channel of the standard material.\n * It is like a mirror but to see through a material.\n * @see https://doc.babylonjs.com/how_to/reflect#refraction\n */\nvar RefractionTexture = /** @class */ (function (_super) {\n    __extends(RefractionTexture, _super);\n    /**\n     * Creates a refraction texture used by refraction channel of the standard material.\n     * It is like a mirror but to see through a material.\n     * @see https://doc.babylonjs.com/how_to/reflect#refraction\n     * @param name Define the texture name\n     * @param size Define the size of the underlying texture\n     * @param scene Define the scene the refraction belongs to\n     * @param generateMipMaps Define if we need to generate mips level for the refraction\n     */\n    function RefractionTexture(name, size, scene, generateMipMaps) {\n        var _this = _super.call(this, name, size, scene, generateMipMaps, true) || this;\n        /**\n         * Define the reflection plane we want to use. The refractionPlane is usually set to the constructed refractor.\n         * It is possible to directly set the refractionPlane by directly using a Plane(a, b, c, d) where a, b and c give the plane normal vector (a, b, c) and d is a scalar displacement from the refractionPlane to the origin. However in all but the very simplest of situations it is more straight forward to set it to the refractor as stated in the doc.\n         * @see https://doc.babylonjs.com/how_to/reflect#refraction\n         */\n        _this.refractionPlane = new Plane(0, 1, 0, 1);\n        /**\n         * Define how deep under the surface we should see.\n         */\n        _this.depth = 2.0;\n        _this.onBeforeRenderObservable.add(function () {\n            _this.getScene().clipPlane = _this.refractionPlane;\n        });\n        _this.onAfterRenderObservable.add(function () {\n            _this.getScene().clipPlane = null;\n        });\n        return _this;\n    }\n    /**\n     * Clone the refraction texture.\n     * @returns the cloned texture\n     */\n    RefractionTexture.prototype.clone = function () {\n        var scene = this.getScene();\n        if (!scene) {\n            return this;\n        }\n        var textureSize = this.getSize();\n        var newTexture = new RefractionTexture(this.name, textureSize.width, scene, this._generateMipMaps);\n        // Base texture\n        newTexture.hasAlpha = this.hasAlpha;\n        newTexture.level = this.level;\n        // Refraction Texture\n        newTexture.refractionPlane = this.refractionPlane.clone();\n        if (this.renderList) {\n            newTexture.renderList = this.renderList.slice(0);\n        }\n        newTexture.depth = this.depth;\n        return newTexture;\n    };\n    /**\n     * Serialize the texture to a JSON representation you could use in Parse later on\n     * @returns the serialized JSON representation\n     */\n    RefractionTexture.prototype.serialize = function () {\n        if (!this.name) {\n            return null;\n        }\n        var serializationObject = _super.prototype.serialize.call(this);\n        serializationObject.mirrorPlane = this.refractionPlane.asArray();\n        serializationObject.depth = this.depth;\n        return serializationObject;\n    };\n    return RefractionTexture;\n}(RenderTargetTexture));\nexport { RefractionTexture };\n//# sourceMappingURL=refractionTexture.js.map","import { __extends } from \"tslib\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { TextureSampler } from \"./textureSampler.js\";\n/**\n * Defines the source of the internal texture\n */\nexport var InternalTextureSource;\n(function (InternalTextureSource) {\n    /**\n     * The source of the texture data is unknown\n     */\n    InternalTextureSource[InternalTextureSource[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * Texture data comes from an URL\n     */\n    InternalTextureSource[InternalTextureSource[\"Url\"] = 1] = \"Url\";\n    /**\n     * Texture data is only used for temporary storage\n     */\n    InternalTextureSource[InternalTextureSource[\"Temp\"] = 2] = \"Temp\";\n    /**\n     * Texture data comes from raw data (ArrayBuffer)\n     */\n    InternalTextureSource[InternalTextureSource[\"Raw\"] = 3] = \"Raw\";\n    /**\n     * Texture content is dynamic (video or dynamic texture)\n     */\n    InternalTextureSource[InternalTextureSource[\"Dynamic\"] = 4] = \"Dynamic\";\n    /**\n     * Texture content is generated by rendering to it\n     */\n    InternalTextureSource[InternalTextureSource[\"RenderTarget\"] = 5] = \"RenderTarget\";\n    /**\n     * Texture content is part of a multi render target process\n     */\n    InternalTextureSource[InternalTextureSource[\"MultiRenderTarget\"] = 6] = \"MultiRenderTarget\";\n    /**\n     * Texture data comes from a cube data file\n     */\n    InternalTextureSource[InternalTextureSource[\"Cube\"] = 7] = \"Cube\";\n    /**\n     * Texture data comes from a raw cube data\n     */\n    InternalTextureSource[InternalTextureSource[\"CubeRaw\"] = 8] = \"CubeRaw\";\n    /**\n     * Texture data come from a prefiltered cube data file\n     */\n    InternalTextureSource[InternalTextureSource[\"CubePrefiltered\"] = 9] = \"CubePrefiltered\";\n    /**\n     * Texture content is raw 3D data\n     */\n    InternalTextureSource[InternalTextureSource[\"Raw3D\"] = 10] = \"Raw3D\";\n    /**\n     * Texture content is raw 2D array data\n     */\n    InternalTextureSource[InternalTextureSource[\"Raw2DArray\"] = 11] = \"Raw2DArray\";\n    /**\n     * Texture content is a depth/stencil texture\n     */\n    InternalTextureSource[InternalTextureSource[\"DepthStencil\"] = 12] = \"DepthStencil\";\n    /**\n     * Texture data comes from a raw cube data encoded with RGBD\n     */\n    InternalTextureSource[InternalTextureSource[\"CubeRawRGBD\"] = 13] = \"CubeRawRGBD\";\n    /**\n     * Texture content is a depth texture\n     */\n    InternalTextureSource[InternalTextureSource[\"Depth\"] = 14] = \"Depth\";\n})(InternalTextureSource || (InternalTextureSource = {}));\n/**\n * Class used to store data associated with WebGL texture data for the engine\n * This class should not be used directly\n */\nvar InternalTexture = /** @class */ (function (_super) {\n    __extends(InternalTexture, _super);\n    /**\n     * Creates a new InternalTexture\n     * @param engine defines the engine to use\n     * @param source defines the type of data that will be used\n     * @param delayAllocation if the texture allocation should be delayed (default: false)\n     */\n    function InternalTexture(engine, source, delayAllocation) {\n        if (delayAllocation === void 0) { delayAllocation = false; }\n        var _this = _super.call(this) || this;\n        /**\n         * Defines if the texture is ready\n         */\n        _this.isReady = false;\n        /**\n         * Defines if the texture is a cube texture\n         */\n        _this.isCube = false;\n        /**\n         * Defines if the texture contains 3D data\n         */\n        _this.is3D = false;\n        /**\n         * Defines if the texture contains 2D array data\n         */\n        _this.is2DArray = false;\n        /**\n         * Defines if the texture contains multiview data\n         */\n        _this.isMultiview = false;\n        /**\n         * Gets the URL used to load this texture\n         */\n        _this.url = \"\";\n        /**\n         * Gets a boolean indicating if the texture needs mipmaps generation\n         */\n        _this.generateMipMaps = false;\n        /**\n         * Gets the number of samples used by the texture (WebGL2+ only)\n         */\n        _this.samples = 0;\n        /**\n         * Gets the type of the texture (int, float...)\n         */\n        _this.type = -1;\n        /**\n         * Gets the format of the texture (RGB, RGBA...)\n         */\n        _this.format = -1;\n        /**\n         * Observable called when the texture is loaded\n         */\n        _this.onLoadedObservable = new Observable();\n        /**\n         * Observable called when the texture load is raising an error\n         */\n        _this.onErrorObservable = new Observable();\n        /**\n         * If this callback is defined it will be called instead of the default _rebuild function\n         */\n        _this.onRebuildCallback = null;\n        /**\n         * Gets the width of the texture\n         */\n        _this.width = 0;\n        /**\n         * Gets the height of the texture\n         */\n        _this.height = 0;\n        /**\n         * Gets the depth of the texture\n         */\n        _this.depth = 0;\n        /**\n         * Gets the initial width of the texture (It could be rescaled if the current system does not support non power of two textures)\n         */\n        _this.baseWidth = 0;\n        /**\n         * Gets the initial height of the texture (It could be rescaled if the current system does not support non power of two textures)\n         */\n        _this.baseHeight = 0;\n        /**\n         * Gets the initial depth of the texture (It could be rescaled if the current system does not support non power of two textures)\n         */\n        _this.baseDepth = 0;\n        /**\n         * Gets a boolean indicating if the texture is inverted on Y axis\n         */\n        _this.invertY = false;\n        // Private\n        /** @hidden */\n        _this._invertVScale = false;\n        /** @hidden */\n        _this._associatedChannel = -1;\n        /** @hidden */\n        _this._source = InternalTextureSource.Unknown;\n        /** @hidden */\n        _this._buffer = null;\n        /** @hidden */\n        _this._bufferView = null;\n        /** @hidden */\n        _this._bufferViewArray = null;\n        /** @hidden */\n        _this._bufferViewArrayArray = null;\n        /** @hidden */\n        _this._size = 0;\n        /** @hidden */\n        _this._extension = \"\";\n        /** @hidden */\n        _this._files = null;\n        /** @hidden */\n        _this._workingCanvas = null;\n        /** @hidden */\n        _this._workingContext = null;\n        /** @hidden */\n        _this._cachedCoordinatesMode = null;\n        /** @hidden */\n        _this._isDisabled = false;\n        /** @hidden */\n        _this._compression = null;\n        /** @hidden */\n        _this._sphericalPolynomial = null;\n        /** @hidden */\n        _this._sphericalPolynomialPromise = null;\n        /** @hidden */\n        _this._sphericalPolynomialComputed = false;\n        /** @hidden */\n        _this._lodGenerationScale = 0;\n        /** @hidden */\n        _this._lodGenerationOffset = 0;\n        /** @hidden */\n        _this._useSRGBBuffer = false;\n        // The following three fields helps sharing generated fixed LODs for texture filtering\n        // In environment not supporting the textureLOD extension like EDGE. They are for internal use only.\n        // They are at the level of the gl texture to benefit from the cache.\n        /** @hidden */\n        _this._lodTextureHigh = null;\n        /** @hidden */\n        _this._lodTextureMid = null;\n        /** @hidden */\n        _this._lodTextureLow = null;\n        /** @hidden */\n        _this._isRGBD = false;\n        /** @hidden */\n        _this._linearSpecularLOD = false;\n        /** @hidden */\n        _this._irradianceTexture = null;\n        /** @hidden */\n        _this._hardwareTexture = null;\n        /** @hidden */\n        _this._maxLodLevel = null;\n        /** @hidden */\n        _this._references = 1;\n        /** @hidden */\n        _this._gammaSpace = null;\n        _this._engine = engine;\n        _this._source = source;\n        _this._uniqueId = InternalTexture._Counter++;\n        if (!delayAllocation) {\n            _this._hardwareTexture = engine._createHardwareTexture();\n        }\n        return _this;\n    }\n    Object.defineProperty(InternalTexture.prototype, \"useMipMaps\", {\n        /**\n         * Gets a boolean indicating if the texture uses mipmaps\n         * TODO implements useMipMaps as a separate setting from generateMipMaps\n         */\n        get: function () {\n            return this.generateMipMaps;\n        },\n        set: function (value) {\n            this.generateMipMaps = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(InternalTexture.prototype, \"uniqueId\", {\n        /** Gets the unique id of the internal texture */\n        get: function () {\n            return this._uniqueId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the Engine the texture belongs to.\n     * @returns The babylon engine\n     */\n    InternalTexture.prototype.getEngine = function () {\n        return this._engine;\n    };\n    Object.defineProperty(InternalTexture.prototype, \"source\", {\n        /**\n         * Gets the data source type of the texture\n         */\n        get: function () {\n            return this._source;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Increments the number of references (ie. the number of Texture that point to it)\n     */\n    InternalTexture.prototype.incrementReferences = function () {\n        this._references++;\n    };\n    /**\n     * Change the size of the texture (not the size of the content)\n     * @param width defines the new width\n     * @param height defines the new height\n     * @param depth defines the new depth (1 by default)\n     */\n    InternalTexture.prototype.updateSize = function (width, height, depth) {\n        if (depth === void 0) { depth = 1; }\n        this._engine.updateTextureDimensions(this, width, height, depth);\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.baseWidth = width;\n        this.baseHeight = height;\n        this.baseDepth = depth;\n        this._size = width * height * depth;\n    };\n    /** @hidden */\n    InternalTexture.prototype._rebuild = function () {\n        var _this = this;\n        var _a;\n        this.isReady = false;\n        this._cachedCoordinatesMode = null;\n        this._cachedWrapU = null;\n        this._cachedWrapV = null;\n        this._cachedWrapR = null;\n        this._cachedAnisotropicFilteringLevel = null;\n        if (this.onRebuildCallback) {\n            var data_1 = this.onRebuildCallback(this);\n            var swapAndSetIsReady = function (proxyInternalTexture) {\n                proxyInternalTexture._swapAndDie(_this, false);\n                _this.isReady = data_1.isReady;\n            };\n            if (data_1.isAsync) {\n                data_1.proxy.then(swapAndSetIsReady);\n            }\n            else {\n                swapAndSetIsReady(data_1.proxy);\n            }\n            return;\n        }\n        var proxy;\n        switch (this.source) {\n            case InternalTextureSource.Temp:\n                break;\n            case InternalTextureSource.Url:\n                proxy = this._engine.createTexture((_a = this._originalUrl) !== null && _a !== void 0 ? _a : this.url, !this.generateMipMaps, this.invertY, null, this.samplingMode, function () {\n                    proxy._swapAndDie(_this, false);\n                    _this.isReady = true;\n                }, null, this._buffer, undefined, this.format, this._extension, undefined, undefined, undefined, this._useSRGBBuffer);\n                return;\n            case InternalTextureSource.Raw:\n                proxy = this._engine.createRawTexture(this._bufferView, this.baseWidth, this.baseHeight, this.format, this.generateMipMaps, this.invertY, this.samplingMode, this._compression, this.type, undefined, this._useSRGBBuffer);\n                proxy._swapAndDie(this, false);\n                this.isReady = true;\n                break;\n            case InternalTextureSource.Raw3D:\n                proxy = this._engine.createRawTexture3D(this._bufferView, this.baseWidth, this.baseHeight, this.baseDepth, this.format, this.generateMipMaps, this.invertY, this.samplingMode, this._compression, this.type);\n                proxy._swapAndDie(this, false);\n                this.isReady = true;\n                break;\n            case InternalTextureSource.Raw2DArray:\n                proxy = this._engine.createRawTexture2DArray(this._bufferView, this.baseWidth, this.baseHeight, this.baseDepth, this.format, this.generateMipMaps, this.invertY, this.samplingMode, this._compression, this.type);\n                proxy._swapAndDie(this, false);\n                this.isReady = true;\n                break;\n            case InternalTextureSource.Dynamic:\n                proxy = this._engine.createDynamicTexture(this.baseWidth, this.baseHeight, this.generateMipMaps, this.samplingMode);\n                proxy._swapAndDie(this, false);\n                this._engine.updateDynamicTexture(this, this._engine.getRenderingCanvas(), this.invertY, undefined, undefined, true);\n                // The engine will make sure to update content so no need to flag it as isReady = true\n                break;\n            case InternalTextureSource.Cube:\n                proxy = this._engine.createCubeTexture(this.url, null, this._files, !this.generateMipMaps, function () {\n                    proxy._swapAndDie(_this, false);\n                    _this.isReady = true;\n                }, null, this.format, this._extension, false, 0, 0, null, undefined, this._useSRGBBuffer);\n                return;\n            case InternalTextureSource.CubeRaw:\n                proxy = this._engine.createRawCubeTexture(this._bufferViewArray, this.width, this.format, this.type, this.generateMipMaps, this.invertY, this.samplingMode, this._compression);\n                proxy._swapAndDie(this, false);\n                this.isReady = true;\n                break;\n            case InternalTextureSource.CubeRawRGBD:\n                // This case is being handeled by the environment texture tools and is not a part of the rebuild process.\n                // To use CubeRawRGBD use updateRGBDAsync on the cube texture.\n                return;\n            case InternalTextureSource.CubePrefiltered:\n                proxy = this._engine.createPrefilteredCubeTexture(this.url, null, this._lodGenerationScale, this._lodGenerationOffset, function (proxy) {\n                    if (proxy) {\n                        proxy._swapAndDie(_this, false);\n                    }\n                    _this.isReady = true;\n                }, null, this.format, this._extension);\n                proxy._sphericalPolynomial = this._sphericalPolynomial;\n                return;\n        }\n    };\n    /**\n     * @param target\n     * @param swapAll\n     * @hidden\n     */\n    InternalTexture.prototype._swapAndDie = function (target, swapAll) {\n        // TODO what about refcount on target?\n        var _a;\n        if (swapAll === void 0) { swapAll = true; }\n        (_a = this._hardwareTexture) === null || _a === void 0 ? void 0 : _a.setUsage(target._source, this.generateMipMaps, this.isCube, this.width, this.height);\n        target._hardwareTexture = this._hardwareTexture;\n        if (swapAll) {\n            target._isRGBD = this._isRGBD;\n        }\n        if (this._lodTextureHigh) {\n            if (target._lodTextureHigh) {\n                target._lodTextureHigh.dispose();\n            }\n            target._lodTextureHigh = this._lodTextureHigh;\n        }\n        if (this._lodTextureMid) {\n            if (target._lodTextureMid) {\n                target._lodTextureMid.dispose();\n            }\n            target._lodTextureMid = this._lodTextureMid;\n        }\n        if (this._lodTextureLow) {\n            if (target._lodTextureLow) {\n                target._lodTextureLow.dispose();\n            }\n            target._lodTextureLow = this._lodTextureLow;\n        }\n        if (this._irradianceTexture) {\n            if (target._irradianceTexture) {\n                target._irradianceTexture.dispose();\n            }\n            target._irradianceTexture = this._irradianceTexture;\n        }\n        var cache = this._engine.getLoadedTexturesCache();\n        var index = cache.indexOf(this);\n        if (index !== -1) {\n            cache.splice(index, 1);\n        }\n        index = cache.indexOf(target);\n        if (index === -1) {\n            cache.push(target);\n        }\n    };\n    /**\n     * Dispose the current allocated resources\n     */\n    InternalTexture.prototype.dispose = function () {\n        this._references--;\n        this.onLoadedObservable.clear();\n        this.onErrorObservable.clear();\n        if (this._references === 0) {\n            this._engine._releaseTexture(this);\n            this._hardwareTexture = null;\n        }\n    };\n    /** @hidden */\n    InternalTexture._Counter = 0;\n    return InternalTexture;\n}(TextureSampler));\nexport { InternalTexture };\n//# sourceMappingURL=internalTexture.js.map","import { __extends } from \"tslib\";\nimport { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector.js\";\nimport { Texture } from \"../../Materials/Textures/texture.js\";\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture.js\";\nimport { BlurPostProcess } from \"../../PostProcesses/blurPostProcess.js\";\n\nimport { Plane } from \"../../Maths/math.plane.js\";\n/**\n * Mirror texture can be used to simulate the view from a mirror in a scene.\n * It will dynamically be rendered every frame to adapt to the camera point of view.\n * You can then easily use it as a reflectionTexture on a flat surface.\n * In case the surface is not a plane, please consider relying on reflection probes.\n * @see https://doc.babylonjs.com/how_to/reflect#mirrors\n */\nvar MirrorTexture = /** @class */ (function (_super) {\n    __extends(MirrorTexture, _super);\n    /**\n     * Instantiates a Mirror Texture.\n     * Mirror texture can be used to simulate the view from a mirror in a scene.\n     * It will dynamically be rendered every frame to adapt to the camera point of view.\n     * You can then easily use it as a reflectionTexture on a flat surface.\n     * In case the surface is not a plane, please consider relying on reflection probes.\n     * @see https://doc.babylonjs.com/how_to/reflect#mirrors\n     * @param name\n     * @param size\n     * @param scene\n     * @param generateMipMaps\n     * @param type\n     * @param samplingMode\n     * @param generateDepthBuffer\n     */\n    function MirrorTexture(name, size, scene, generateMipMaps, type, samplingMode, generateDepthBuffer) {\n        if (type === void 0) { type = 0; }\n        if (samplingMode === void 0) { samplingMode = Texture.BILINEAR_SAMPLINGMODE; }\n        if (generateDepthBuffer === void 0) { generateDepthBuffer = true; }\n        var _this = _super.call(this, name, size, scene, generateMipMaps, true, type, false, samplingMode, generateDepthBuffer) || this;\n        /**\n         * Define the reflection plane we want to use. The mirrorPlane is usually set to the constructed reflector.\n         * It is possible to directly set the mirrorPlane by directly using a Plane(a, b, c, d) where a, b and c give the plane normal vector (a, b, c) and d is a scalar displacement from the mirrorPlane to the origin. However in all but the very simplest of situations it is more straight forward to set it to the reflector as stated in the doc.\n         * @see https://doc.babylonjs.com/how_to/reflect#mirrors\n         */\n        _this.mirrorPlane = new Plane(0, 1, 0, 1);\n        _this._transformMatrix = Matrix.Zero();\n        _this._mirrorMatrix = Matrix.Zero();\n        _this._adaptiveBlurKernel = 0;\n        _this._blurKernelX = 0;\n        _this._blurKernelY = 0;\n        _this._blurRatio = 1.0;\n        scene = _this.getScene();\n        if (!scene) {\n            return _this;\n        }\n        _this.ignoreCameraViewport = true;\n        _this._updateGammaSpace();\n        _this._imageProcessingConfigChangeObserver = scene.imageProcessingConfiguration.onUpdateParameters.add(function () {\n            _this._updateGammaSpace();\n        });\n        var engine = scene.getEngine();\n        if (engine.supportsUniformBuffers) {\n            _this._sceneUBO = scene.createSceneUniformBuffer(\"Scene for Mirror Texture (name \\\"\".concat(name, \"\\\")\"));\n        }\n        _this.onBeforeBindObservable.add(function () {\n            var _a;\n            (_a = engine._debugPushGroup) === null || _a === void 0 ? void 0 : _a.call(engine, \"mirror generation for \".concat(name), 1);\n        });\n        _this.onAfterUnbindObservable.add(function () {\n            var _a;\n            (_a = engine._debugPopGroup) === null || _a === void 0 ? void 0 : _a.call(engine, 1);\n        });\n        var saveClipPlane;\n        _this.onBeforeRenderObservable.add(function () {\n            if (_this._sceneUBO) {\n                _this._currentSceneUBO = scene.getSceneUniformBuffer();\n                scene.setSceneUniformBuffer(_this._sceneUBO);\n                scene.getSceneUniformBuffer().unbindEffect();\n            }\n            Matrix.ReflectionToRef(_this.mirrorPlane, _this._mirrorMatrix);\n            _this._mirrorMatrix.multiplyToRef(scene.getViewMatrix(), _this._transformMatrix);\n            scene.setTransformMatrix(_this._transformMatrix, scene.getProjectionMatrix());\n            saveClipPlane = scene.clipPlane;\n            scene.clipPlane = _this.mirrorPlane;\n            scene.getEngine().cullBackFaces = false;\n            scene._mirroredCameraPosition = Vector3.TransformCoordinates(scene.activeCamera.globalPosition, _this._mirrorMatrix);\n        });\n        _this.onAfterRenderObservable.add(function () {\n            if (_this._sceneUBO) {\n                scene.setSceneUniformBuffer(_this._currentSceneUBO);\n            }\n            scene.updateTransformMatrix();\n            scene.getEngine().cullBackFaces = null;\n            scene._mirroredCameraPosition = null;\n            scene.clipPlane = saveClipPlane;\n        });\n        return _this;\n    }\n    Object.defineProperty(MirrorTexture.prototype, \"blurRatio\", {\n        get: function () {\n            return this._blurRatio;\n        },\n        /**\n         * Define the blur ratio used to blur the reflection if needed.\n         */\n        set: function (value) {\n            if (this._blurRatio === value) {\n                return;\n            }\n            this._blurRatio = value;\n            this._preparePostProcesses();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MirrorTexture.prototype, \"adaptiveBlurKernel\", {\n        /**\n         * Define the adaptive blur kernel used to blur the reflection if needed.\n         * This will autocompute the closest best match for the `blurKernel`\n         */\n        set: function (value) {\n            this._adaptiveBlurKernel = value;\n            this._autoComputeBlurKernel();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MirrorTexture.prototype, \"blurKernel\", {\n        /**\n         * Define the blur kernel used to blur the reflection if needed.\n         * Please consider using `adaptiveBlurKernel` as it could find the closest best value for you.\n         */\n        set: function (value) {\n            this.blurKernelX = value;\n            this.blurKernelY = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MirrorTexture.prototype, \"blurKernelX\", {\n        get: function () {\n            return this._blurKernelX;\n        },\n        /**\n         * Define the blur kernel on the X Axis used to blur the reflection if needed.\n         * Please consider using `adaptiveBlurKernel` as it could find the closest best value for you.\n         */\n        set: function (value) {\n            if (this._blurKernelX === value) {\n                return;\n            }\n            this._blurKernelX = value;\n            this._preparePostProcesses();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MirrorTexture.prototype, \"blurKernelY\", {\n        get: function () {\n            return this._blurKernelY;\n        },\n        /**\n         * Define the blur kernel on the Y Axis used to blur the reflection if needed.\n         * Please consider using `adaptiveBlurKernel` as it could find the closest best value for you.\n         */\n        set: function (value) {\n            if (this._blurKernelY === value) {\n                return;\n            }\n            this._blurKernelY = value;\n            this._preparePostProcesses();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MirrorTexture.prototype._autoComputeBlurKernel = function () {\n        var engine = this.getScene().getEngine();\n        var dw = this.getRenderWidth() / engine.getRenderWidth();\n        var dh = this.getRenderHeight() / engine.getRenderHeight();\n        this.blurKernelX = this._adaptiveBlurKernel * dw;\n        this.blurKernelY = this._adaptiveBlurKernel * dh;\n    };\n    MirrorTexture.prototype._onRatioRescale = function () {\n        if (this._sizeRatio) {\n            this.resize(this._initialSizeParameter);\n            if (!this._adaptiveBlurKernel) {\n                this._preparePostProcesses();\n            }\n        }\n        if (this._adaptiveBlurKernel) {\n            this._autoComputeBlurKernel();\n        }\n    };\n    MirrorTexture.prototype._updateGammaSpace = function () {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this.gammaSpace = !scene.imageProcessingConfiguration.isEnabled || !scene.imageProcessingConfiguration.applyByPostProcess;\n    };\n    MirrorTexture.prototype._preparePostProcesses = function () {\n        this.clearPostProcesses(true);\n        if (this._blurKernelX && this._blurKernelY) {\n            var engine = this.getScene().getEngine();\n            var textureType = engine.getCaps().textureFloatRender && engine.getCaps().textureFloatLinearFiltering ? 1 : 2;\n            this._blurX = new BlurPostProcess(\"horizontal blur\", new Vector2(1.0, 0), this._blurKernelX, this._blurRatio, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, textureType);\n            this._blurX.autoClear = false;\n            if (this._blurRatio === 1 && this.samples < 2 && this._texture) {\n                this._blurX.inputTexture = this._renderTarget;\n            }\n            else {\n                this._blurX.alwaysForcePOT = true;\n            }\n            this._blurY = new BlurPostProcess(\"vertical blur\", new Vector2(0, 1.0), this._blurKernelY, this._blurRatio, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, textureType);\n            this._blurY.autoClear = false;\n            this._blurY.alwaysForcePOT = this._blurRatio !== 1;\n            this.addPostProcess(this._blurX);\n            this.addPostProcess(this._blurY);\n        }\n        else {\n            if (this._blurY) {\n                this.removePostProcess(this._blurY);\n                this._blurY.dispose();\n                this._blurY = null;\n            }\n            if (this._blurX) {\n                this.removePostProcess(this._blurX);\n                this._blurX.dispose();\n                this._blurX = null;\n            }\n        }\n    };\n    /**\n     * Clone the mirror texture.\n     * @returns the cloned texture\n     */\n    MirrorTexture.prototype.clone = function () {\n        var scene = this.getScene();\n        if (!scene) {\n            return this;\n        }\n        var textureSize = this.getSize();\n        var newTexture = new MirrorTexture(this.name, textureSize.width, scene, this._renderTargetOptions.generateMipMaps, this._renderTargetOptions.type, this._renderTargetOptions.samplingMode, this._renderTargetOptions.generateDepthBuffer);\n        // Base texture\n        newTexture.hasAlpha = this.hasAlpha;\n        newTexture.level = this.level;\n        // Mirror Texture\n        newTexture.mirrorPlane = this.mirrorPlane.clone();\n        if (this.renderList) {\n            newTexture.renderList = this.renderList.slice(0);\n        }\n        return newTexture;\n    };\n    /**\n     * Serialize the texture to a JSON representation you could use in Parse later on\n     * @returns the serialized JSON representation\n     */\n    MirrorTexture.prototype.serialize = function () {\n        if (!this.name) {\n            return null;\n        }\n        var serializationObject = _super.prototype.serialize.call(this);\n        serializationObject.mirrorPlane = this.mirrorPlane.asArray();\n        return serializationObject;\n    };\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    MirrorTexture.prototype.dispose = function () {\n        var _a;\n        _super.prototype.dispose.call(this);\n        var scene = this.getScene();\n        if (scene) {\n            scene.imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingConfigChangeObserver);\n        }\n        (_a = this._sceneUBO) === null || _a === void 0 ? void 0 : _a.dispose();\n    };\n    return MirrorTexture;\n}(RenderTargetTexture));\nexport { MirrorTexture };\nTexture._CreateMirror = function (name, renderTargetSize, scene, generateMipMaps) {\n    return new MirrorTexture(name, renderTargetSize, scene, generateMipMaps);\n};\n//# sourceMappingURL=mirrorTexture.js.map","import { __extends } from \"tslib\";\nimport { Texture } from \"../../Materials/Textures/texture.js\";\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture.js\";\n\nimport \"../../Engines/Extensions/engine.multiRender.js\";\n/**\n * A multi render target, like a render target provides the ability to render to a texture.\n * Unlike the render target, it can render to several draw buffers in one draw.\n * This is specially interesting in deferred rendering or for any effects requiring more than\n * just one color from a single pass.\n */\nvar MultiRenderTarget = /** @class */ (function (_super) {\n    __extends(MultiRenderTarget, _super);\n    /**\n     * Instantiate a new multi render target texture.\n     * A multi render target, like a render target provides the ability to render to a texture.\n     * Unlike the render target, it can render to several draw buffers in one draw.\n     * This is specially interesting in deferred rendering or for any effects requiring more than\n     * just one color from a single pass.\n     * @param name Define the name of the texture\n     * @param size Define the size of the buffers to render to\n     * @param count Define the number of target we are rendering into\n     * @param scene Define the scene the texture belongs to\n     * @param options Define the options used to create the multi render target\n     * @param textureNames Define the names to set to the textures (if count > 0 - optional)\n     */\n    function MultiRenderTarget(name, size, count, scene, options, textureNames) {\n        var _this = this;\n        var generateMipMaps = options && options.generateMipMaps ? options.generateMipMaps : false;\n        var generateDepthTexture = options && options.generateDepthTexture ? options.generateDepthTexture : false;\n        var depthTextureFormat = options && options.depthTextureFormat ? options.depthTextureFormat : 15;\n        var doNotChangeAspectRatio = !options || options.doNotChangeAspectRatio === undefined ? true : options.doNotChangeAspectRatio;\n        var drawOnlyOnFirstAttachmentByDefault = options && options.drawOnlyOnFirstAttachmentByDefault ? options.drawOnlyOnFirstAttachmentByDefault : false;\n        _this = _super.call(this, name, size, scene, generateMipMaps, doNotChangeAspectRatio, undefined, undefined, undefined, undefined, undefined, undefined, undefined, true) || this;\n        if (!_this.isSupported) {\n            _this.dispose();\n            return _this;\n        }\n        var types = [];\n        var samplingModes = [];\n        var useSRGBBuffers = [];\n        _this._initTypes(count, types, samplingModes, useSRGBBuffers, options);\n        var generateDepthBuffer = !options || options.generateDepthBuffer === undefined ? true : options.generateDepthBuffer;\n        var generateStencilBuffer = !options || options.generateStencilBuffer === undefined ? false : options.generateStencilBuffer;\n        _this._size = size;\n        _this._multiRenderTargetOptions = {\n            samplingModes: samplingModes,\n            generateMipMaps: generateMipMaps,\n            generateDepthBuffer: generateDepthBuffer,\n            generateStencilBuffer: generateStencilBuffer,\n            generateDepthTexture: generateDepthTexture,\n            depthTextureFormat: depthTextureFormat,\n            types: types,\n            textureCount: count,\n            useSRGBBuffers: useSRGBBuffers,\n        };\n        _this._count = count;\n        _this._drawOnlyOnFirstAttachmentByDefault = drawOnlyOnFirstAttachmentByDefault;\n        if (count > 0) {\n            _this._createInternalTextures();\n            _this._createTextures(textureNames);\n        }\n        return _this;\n    }\n    Object.defineProperty(MultiRenderTarget.prototype, \"isSupported\", {\n        /**\n         * Get if draw buffers are currently supported by the used hardware and browser.\n         */\n        get: function () {\n            var _a, _b;\n            return (_b = (_a = this._engine) === null || _a === void 0 ? void 0 : _a.getCaps().drawBuffersExtension) !== null && _b !== void 0 ? _b : false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MultiRenderTarget.prototype, \"textures\", {\n        /**\n         * Get the list of textures generated by the multi render target.\n         */\n        get: function () {\n            return this._textures;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MultiRenderTarget.prototype, \"count\", {\n        /**\n         * Gets the number of textures in this MRT. This number can be different from `_textures.length` in case a depth texture is generated.\n         */\n        get: function () {\n            return this._count;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MultiRenderTarget.prototype, \"depthTexture\", {\n        /**\n         * Get the depth texture generated by the multi render target if options.generateDepthTexture has been set\n         */\n        get: function () {\n            return this._textures[this._textures.length - 1];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MultiRenderTarget.prototype, \"wrapU\", {\n        /**\n         * Set the wrapping mode on U of all the textures we are rendering to.\n         * Can be any of the Texture. (CLAMP_ADDRESSMODE, MIRROR_ADDRESSMODE or WRAP_ADDRESSMODE)\n         */\n        set: function (wrap) {\n            if (this._textures) {\n                for (var i = 0; i < this._textures.length; i++) {\n                    this._textures[i].wrapU = wrap;\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MultiRenderTarget.prototype, \"wrapV\", {\n        /**\n         * Set the wrapping mode on V of all the textures we are rendering to.\n         * Can be any of the Texture. (CLAMP_ADDRESSMODE, MIRROR_ADDRESSMODE or WRAP_ADDRESSMODE)\n         */\n        set: function (wrap) {\n            if (this._textures) {\n                for (var i = 0; i < this._textures.length; i++) {\n                    this._textures[i].wrapV = wrap;\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MultiRenderTarget.prototype._initTypes = function (count, types, samplingModes, useSRGBBuffers, options) {\n        for (var i = 0; i < count; i++) {\n            if (options && options.types && options.types[i] !== undefined) {\n                types.push(options.types[i]);\n            }\n            else {\n                types.push(options && options.defaultType ? options.defaultType : 0);\n            }\n            if (options && options.samplingModes && options.samplingModes[i] !== undefined) {\n                samplingModes.push(options.samplingModes[i]);\n            }\n            else {\n                samplingModes.push(Texture.BILINEAR_SAMPLINGMODE);\n            }\n            if (options && options.useSRGBBuffers && options.useSRGBBuffers[i] !== undefined) {\n                useSRGBBuffers.push(options.useSRGBBuffers[i]);\n            }\n            else {\n                useSRGBBuffers.push(false);\n            }\n        }\n    };\n    /**\n     * @param forceFullRebuild\n     * @param textureNames\n     * @hidden\n     */\n    MultiRenderTarget.prototype._rebuild = function (forceFullRebuild, textureNames) {\n        if (forceFullRebuild === void 0) { forceFullRebuild = false; }\n        if (this._count < 1) {\n            return;\n        }\n        this.releaseInternalTextures();\n        this._createInternalTextures();\n        if (forceFullRebuild) {\n            this._releaseTextures();\n            this._createTextures(textureNames);\n        }\n        var internalTextures = this._renderTarget.textures;\n        for (var i = 0; i < internalTextures.length; i++) {\n            var texture = this._textures[i];\n            texture._texture = internalTextures[i];\n        }\n        if (this.samples !== 1) {\n            this._renderTarget.setSamples(this.samples, !this._drawOnlyOnFirstAttachmentByDefault, true);\n        }\n    };\n    MultiRenderTarget.prototype._createInternalTextures = function () {\n        this._renderTarget = this._getEngine().createMultipleRenderTarget(this._size, this._multiRenderTargetOptions, !this._drawOnlyOnFirstAttachmentByDefault);\n        this._texture = this._renderTarget.texture;\n    };\n    MultiRenderTarget.prototype._releaseTextures = function () {\n        if (this._textures) {\n            for (var i = 0; i < this._textures.length; i++) {\n                this._textures[i]._texture = null; // internal textures are released by a call to releaseInternalTextures()\n                this._textures[i].dispose();\n            }\n        }\n    };\n    MultiRenderTarget.prototype._createTextures = function (textureNames) {\n        var internalTextures = this._renderTarget.textures;\n        this._textures = [];\n        for (var i = 0; i < internalTextures.length; i++) {\n            var texture = new Texture(null, this.getScene());\n            if (textureNames === null || textureNames === void 0 ? void 0 : textureNames[i]) {\n                texture.name = textureNames[i];\n            }\n            texture._texture = internalTextures[i];\n            this._textures.push(texture);\n        }\n    };\n    /**\n     * Replaces an internal texture within the MRT. Useful to share textures between MultiRenderTarget.\n     * @param texture The new texture to set in the MRT\n     * @param index The index of the texture to replace\n     * @param disposePrevious Set to true if the previous internal texture should be disposed\n     */\n    MultiRenderTarget.prototype.setInternalTexture = function (texture, index, disposePrevious) {\n        if (disposePrevious === void 0) { disposePrevious = true; }\n        if (!this.renderTarget) {\n            return;\n        }\n        if (index === 0) {\n            this._texture = texture;\n        }\n        this.renderTarget.setTexture(texture, index, disposePrevious);\n        if (!this.textures[index]) {\n            this.textures[index] = new Texture(null, this.getScene());\n        }\n        this.textures[index]._texture = texture;\n        this._count = this.renderTarget.textures ? this.renderTarget.textures.length : 0;\n        if (this._multiRenderTargetOptions.types) {\n            this._multiRenderTargetOptions.types[index] = texture.type;\n        }\n        if (this._multiRenderTargetOptions.samplingModes) {\n            this._multiRenderTargetOptions.samplingModes[index] = texture.samplingMode;\n        }\n        if (this._multiRenderTargetOptions.useSRGBBuffers) {\n            this._multiRenderTargetOptions.useSRGBBuffers[index] = texture._useSRGBBuffer;\n        }\n    };\n    Object.defineProperty(MultiRenderTarget.prototype, \"samples\", {\n        /**\n         * Define the number of samples used if MSAA is enabled.\n         */\n        get: function () {\n            return this._samples;\n        },\n        set: function (value) {\n            if (this._renderTarget) {\n                this._samples = this._renderTarget.setSamples(value);\n            }\n            else {\n                // In case samples are set with 0 textures created, we must save the desired samples value\n                this._samples = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Resize all the textures in the multi render target.\n     * Be careful as it will recreate all the data in the new texture.\n     * @param size Define the new size\n     */\n    MultiRenderTarget.prototype.resize = function (size) {\n        this._size = size;\n        this._rebuild();\n    };\n    /**\n     * Changes the number of render targets in this MRT\n     * Be careful as it will recreate all the data in the new texture.\n     * @param count new texture count\n     * @param options Specifies texture types and sampling modes for new textures\n     * @param textureNames Specifies the names of the textures (optional)\n     */\n    MultiRenderTarget.prototype.updateCount = function (count, options, textureNames) {\n        this._multiRenderTargetOptions.textureCount = count;\n        this._count = count;\n        var types = [];\n        var samplingModes = [];\n        var useSRGBBuffers = [];\n        this._initTypes(count, types, samplingModes, useSRGBBuffers, options);\n        this._multiRenderTargetOptions.types = types;\n        this._multiRenderTargetOptions.samplingModes = samplingModes;\n        this._multiRenderTargetOptions.useSRGBBuffers = useSRGBBuffers;\n        this._rebuild(true, textureNames);\n    };\n    MultiRenderTarget.prototype._unbindFrameBuffer = function (engine, faceIndex) {\n        var _this = this;\n        if (this._renderTarget) {\n            engine.unBindMultiColorAttachmentFramebuffer(this._renderTarget, this.isCube, function () {\n                _this.onAfterRenderObservable.notifyObservers(faceIndex);\n            });\n        }\n    };\n    /**\n     * Dispose the render targets and their associated resources\n     * @param doNotDisposeInternalTextures\n     */\n    MultiRenderTarget.prototype.dispose = function (doNotDisposeInternalTextures) {\n        if (doNotDisposeInternalTextures === void 0) { doNotDisposeInternalTextures = false; }\n        this._releaseTextures();\n        if (!doNotDisposeInternalTextures) {\n            this.releaseInternalTextures();\n        }\n        else {\n            // Prevent internal texture dispose in super.dispose\n            this._texture = null;\n        }\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Release all the underlying texture used as draw buffers.\n     */\n    MultiRenderTarget.prototype.releaseInternalTextures = function () {\n        var _a, _b;\n        var internalTextures = (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.textures;\n        if (!internalTextures) {\n            return;\n        }\n        for (var i = internalTextures.length - 1; i >= 0; i--) {\n            this._textures[i]._texture = null;\n        }\n        (_b = this._renderTarget) === null || _b === void 0 ? void 0 : _b.dispose();\n        this._renderTarget = null;\n    };\n    return MultiRenderTarget;\n}(RenderTargetTexture));\nexport { MultiRenderTarget };\n//# sourceMappingURL=multiRenderTarget.js.map","import { __extends } from \"tslib\";\nimport { MultiRenderTarget } from \"./multiRenderTarget.js\";\nimport { ImageProcessingPostProcess } from \"../../PostProcesses/imageProcessingPostProcess.js\";\n/**\n * A multi render target designed to render the prepass.\n * Prepass is a scene component used to render information in multiple textures\n * alongside with the scene materials rendering.\n * Note : This is an internal class, and you should NOT need to instanciate this.\n * Only the `PrePassRenderer` should instanciate this class.\n * It is more likely that you need a regular `MultiRenderTarget`\n * @hidden\n */\nvar PrePassRenderTarget = /** @class */ (function (_super) {\n    __extends(PrePassRenderTarget, _super);\n    function PrePassRenderTarget(name, renderTargetTexture, size, count, scene, options) {\n        var _this = _super.call(this, name, size, count, scene, options) || this;\n        /**\n         * @hidden\n         */\n        _this._beforeCompositionPostProcesses = [];\n        /**\n         * @hidden\n         */\n        _this._internalTextureDirty = false;\n        /**\n         * Is this render target enabled for prepass rendering\n         */\n        _this.enabled = false;\n        /**\n         * Render target associated with this prePassRenderTarget\n         * If this is `null`, it means this prePassRenderTarget is associated with the scene\n         */\n        _this.renderTargetTexture = null;\n        _this.renderTargetTexture = renderTargetTexture;\n        return _this;\n    }\n    /**\n     * Creates a composition effect for this RT\n     * @hidden\n     */\n    PrePassRenderTarget.prototype._createCompositionEffect = function () {\n        this.imageProcessingPostProcess = new ImageProcessingPostProcess(\"prePassComposition\", 1, null, undefined, this._engine);\n        this.imageProcessingPostProcess._updateParameters();\n    };\n    /**\n     * Checks that the size of this RT is still adapted to the desired render size.\n     * @hidden\n     */\n    PrePassRenderTarget.prototype._checkSize = function () {\n        var requiredWidth = this._engine.getRenderWidth(true);\n        var requiredHeight = this._engine.getRenderHeight(true);\n        var width = this.getRenderWidth();\n        var height = this.getRenderHeight();\n        if (width !== requiredWidth || height !== requiredHeight) {\n            this.resize({ width: requiredWidth, height: requiredHeight });\n            this._internalTextureDirty = true;\n        }\n    };\n    /**\n     * Changes the number of render targets in this MRT\n     * Be careful as it will recreate all the data in the new texture.\n     * @param count new texture count\n     * @param options Specifies texture types and sampling modes for new textures\n     * @param textureNames Specifies the names of the textures (optional)\n     */\n    PrePassRenderTarget.prototype.updateCount = function (count, options, textureNames) {\n        _super.prototype.updateCount.call(this, count, options, textureNames);\n        this._internalTextureDirty = true;\n    };\n    /**\n     * Resets the post processes chains applied to this RT.\n     * @hidden\n     */\n    PrePassRenderTarget.prototype._resetPostProcessChain = function () {\n        this._beforeCompositionPostProcesses = [];\n    };\n    /**\n     * Diposes this render target\n     */\n    PrePassRenderTarget.prototype.dispose = function () {\n        var scene = this._scene;\n        _super.prototype.dispose.call(this);\n        if (scene && scene.prePassRenderer) {\n            var index = scene.prePassRenderer.renderTargets.indexOf(this);\n            if (index !== -1) {\n                scene.prePassRenderer.renderTargets.splice(index, 1);\n            }\n        }\n        if (this.imageProcessingPostProcess) {\n            this.imageProcessingPostProcess.dispose();\n        }\n        if (this.renderTargetTexture) {\n            this.renderTargetTexture._prePassRenderTarget = null;\n        }\n        if (this._outputPostProcess) {\n            this._outputPostProcess.autoClear = true;\n            this._outputPostProcess.restoreDefaultInputTexture();\n        }\n    };\n    return PrePassRenderTarget;\n}(MultiRenderTarget));\nexport { PrePassRenderTarget };\n//# sourceMappingURL=prePassRenderTarget.js.map","import { __extends } from \"tslib\";\nimport { SerializationHelper } from \"../../Misc/decorators.js\";\nimport { _UpdateRGBDAsync as UpdateRGBDAsyncEnvTools } from \"../../Misc/environmentTextureTools.js\";\nimport { InternalTextureSource } from \"./internalTexture.js\";\nimport { CubeTexture } from \"./cubeTexture.js\";\n\nimport \"../../Engines/Extensions/engine.rawTexture.js\";\n/**\n * Raw cube texture where the raw buffers are passed in\n */\nvar RawCubeTexture = /** @class */ (function (_super) {\n    __extends(RawCubeTexture, _super);\n    /**\n     * Creates a cube texture where the raw buffers are passed in.\n     * @param scene defines the scene the texture is attached to\n     * @param data defines the array of data to use to create each face\n     * @param size defines the size of the textures\n     * @param format defines the format of the data\n     * @param type defines the type of the data (like Engine.TEXTURETYPE_UNSIGNED_INT)\n     * @param generateMipMaps  defines if the engine should generate the mip levels\n     * @param invertY defines if data must be stored with Y axis inverted\n     * @param samplingMode defines the required sampling mode (like Texture.NEAREST_SAMPLINGMODE)\n     * @param compression defines the compression used (null by default)\n     */\n    function RawCubeTexture(scene, data, size, format, type, generateMipMaps, invertY, samplingMode, compression) {\n        if (format === void 0) { format = 5; }\n        if (type === void 0) { type = 0; }\n        if (generateMipMaps === void 0) { generateMipMaps = false; }\n        if (invertY === void 0) { invertY = false; }\n        if (samplingMode === void 0) { samplingMode = 3; }\n        if (compression === void 0) { compression = null; }\n        var _this = _super.call(this, \"\", scene) || this;\n        _this._texture = scene.getEngine().createRawCubeTexture(data, size, format, type, generateMipMaps, invertY, samplingMode, compression);\n        return _this;\n    }\n    /**\n     * Updates the raw cube texture.\n     * @param data defines the data to store\n     * @param format defines the data format\n     * @param type defines the type fo the data (Engine.TEXTURETYPE_UNSIGNED_INT by default)\n     * @param invertY defines if data must be stored with Y axis inverted\n     * @param compression defines the compression used (null by default)\n     */\n    RawCubeTexture.prototype.update = function (data, format, type, invertY, compression) {\n        if (compression === void 0) { compression = null; }\n        this._texture.getEngine().updateRawCubeTexture(this._texture, data, format, type, invertY, compression);\n    };\n    /**\n     * Updates a raw cube texture with RGBD encoded data.\n     * @param data defines the array of data [mipmap][face] to use to create each face\n     * @param sphericalPolynomial defines the spherical polynomial for irradiance\n     * @param lodScale defines the scale applied to environment texture. This manages the range of LOD level used for IBL according to the roughness\n     * @param lodOffset defines the offset applied to environment texture. This manages first LOD level used for IBL according to the roughness\n     * @returns a promise that resolves when the operation is complete\n     */\n    RawCubeTexture.prototype.updateRGBDAsync = function (data, sphericalPolynomial, lodScale, lodOffset) {\n        if (sphericalPolynomial === void 0) { sphericalPolynomial = null; }\n        if (lodScale === void 0) { lodScale = 0.8; }\n        if (lodOffset === void 0) { lodOffset = 0; }\n        return UpdateRGBDAsyncEnvTools(this._texture, data, sphericalPolynomial, lodScale, lodOffset).then(function () { });\n    };\n    /**\n     * Clones the raw cube texture.\n     * @return a new cube texture\n     */\n    RawCubeTexture.prototype.clone = function () {\n        var _this = this;\n        return SerializationHelper.Clone(function () {\n            var scene = _this.getScene();\n            var internalTexture = _this._texture;\n            var texture = new RawCubeTexture(scene, internalTexture._bufferViewArray, internalTexture.width, internalTexture.format, internalTexture.type, internalTexture.generateMipMaps, internalTexture.invertY, internalTexture.samplingMode, internalTexture._compression);\n            if (internalTexture.source === InternalTextureSource.CubeRawRGBD) {\n                texture.updateRGBDAsync(internalTexture._bufferViewArrayArray, internalTexture._sphericalPolynomial, internalTexture._lodGenerationScale, internalTexture._lodGenerationOffset);\n            }\n            return texture;\n        }, this);\n    };\n    return RawCubeTexture;\n}(CubeTexture));\nexport { RawCubeTexture };\n//# sourceMappingURL=rawCubeTexture.js.map","import { __extends } from \"tslib\";\nimport { Texture } from \"./texture.js\";\n\nimport \"../../Engines/Extensions/engine.rawTexture.js\";\n/**\n * Raw texture can help creating a texture directly from an array of data.\n * This can be super useful if you either get the data from an uncompressed source or\n * if you wish to create your texture pixel by pixel.\n */\nvar RawTexture = /** @class */ (function (_super) {\n    __extends(RawTexture, _super);\n    /**\n     * Instantiates a new RawTexture.\n     * Raw texture can help creating a texture directly from an array of data.\n     * This can be super useful if you either get the data from an uncompressed source or\n     * if you wish to create your texture pixel by pixel.\n     * @param data define the array of data to use to create the texture (null to create an empty texture)\n     * @param width define the width of the texture\n     * @param height define the height of the texture\n     * @param format define the format of the data (RGB, RGBA... Engine.TEXTUREFORMAT_xxx)\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\n     * @param generateMipMaps define whether mip maps should be generated or not\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\n     * @param creationFlags specific flags to use when creating the texture (1 for storage textures, for eg)\n     * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\n     */\n    function RawTexture(data, width, height, \n    /**\n     * Define the format of the data (RGB, RGBA... Engine.TEXTUREFORMAT_xxx)\n     */\n    format, sceneOrEngine, generateMipMaps, invertY, samplingMode, type, creationFlags, useSRGBBuffer) {\n        if (generateMipMaps === void 0) { generateMipMaps = true; }\n        if (invertY === void 0) { invertY = false; }\n        if (samplingMode === void 0) { samplingMode = 3; }\n        if (type === void 0) { type = 0; }\n        var _this = _super.call(this, null, sceneOrEngine, !generateMipMaps, invertY, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, creationFlags) || this;\n        _this.format = format;\n        if (!_this._engine) {\n            return _this;\n        }\n        if (!_this._engine._caps.textureFloatLinearFiltering && type === 1) {\n            samplingMode = 1;\n        }\n        if (!_this._engine._caps.textureHalfFloatLinearFiltering && type === 2) {\n            samplingMode = 1;\n        }\n        _this._texture = _this._engine.createRawTexture(data, width, height, format, generateMipMaps, invertY, samplingMode, null, type, creationFlags !== null && creationFlags !== void 0 ? creationFlags : 0, useSRGBBuffer !== null && useSRGBBuffer !== void 0 ? useSRGBBuffer : false);\n        _this.wrapU = Texture.CLAMP_ADDRESSMODE;\n        _this.wrapV = Texture.CLAMP_ADDRESSMODE;\n        return _this;\n    }\n    /**\n     * Updates the texture underlying data.\n     * @param data Define the new data of the texture\n     */\n    RawTexture.prototype.update = function (data) {\n        this._getEngine().updateRawTexture(this._texture, data, this._texture.format, this._texture.invertY, null, this._texture.type, this._texture._useSRGBBuffer);\n    };\n    /**\n     * Creates a luminance texture from some data.\n     * @param data Define the texture data\n     * @param width Define the width of the texture\n     * @param height Define the height of the texture\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\n     * @returns the luminance texture\n     */\n    RawTexture.CreateLuminanceTexture = function (data, width, height, sceneOrEngine, generateMipMaps, invertY, samplingMode) {\n        if (generateMipMaps === void 0) { generateMipMaps = true; }\n        if (invertY === void 0) { invertY = false; }\n        if (samplingMode === void 0) { samplingMode = 3; }\n        return new RawTexture(data, width, height, 1, sceneOrEngine, generateMipMaps, invertY, samplingMode);\n    };\n    /**\n     * Creates a luminance alpha texture from some data.\n     * @param data Define the texture data\n     * @param width Define the width of the texture\n     * @param height Define the height of the texture\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\n     * @returns the luminance alpha texture\n     */\n    RawTexture.CreateLuminanceAlphaTexture = function (data, width, height, sceneOrEngine, generateMipMaps, invertY, samplingMode) {\n        if (generateMipMaps === void 0) { generateMipMaps = true; }\n        if (invertY === void 0) { invertY = false; }\n        if (samplingMode === void 0) { samplingMode = 3; }\n        return new RawTexture(data, width, height, 2, sceneOrEngine, generateMipMaps, invertY, samplingMode);\n    };\n    /**\n     * Creates an alpha texture from some data.\n     * @param data Define the texture data\n     * @param width Define the width of the texture\n     * @param height Define the height of the texture\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\n     * @returns the alpha texture\n     */\n    RawTexture.CreateAlphaTexture = function (data, width, height, sceneOrEngine, generateMipMaps, invertY, samplingMode) {\n        if (generateMipMaps === void 0) { generateMipMaps = true; }\n        if (invertY === void 0) { invertY = false; }\n        if (samplingMode === void 0) { samplingMode = 3; }\n        return new RawTexture(data, width, height, 0, sceneOrEngine, generateMipMaps, invertY, samplingMode);\n    };\n    /**\n     * Creates a RGB texture from some data.\n     * @param data Define the texture data\n     * @param width Define the width of the texture\n     * @param height Define the height of the texture\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\n     * @param creationFlags specific flags to use when creating the texture (1 for storage textures, for eg)\n     * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\n     * @returns the RGB alpha texture\n     */\n    RawTexture.CreateRGBTexture = function (data, width, height, sceneOrEngine, generateMipMaps, invertY, samplingMode, type, creationFlags, useSRGBBuffer) {\n        if (generateMipMaps === void 0) { generateMipMaps = true; }\n        if (invertY === void 0) { invertY = false; }\n        if (samplingMode === void 0) { samplingMode = 3; }\n        if (type === void 0) { type = 0; }\n        if (creationFlags === void 0) { creationFlags = 0; }\n        if (useSRGBBuffer === void 0) { useSRGBBuffer = false; }\n        return new RawTexture(data, width, height, 4, sceneOrEngine, generateMipMaps, invertY, samplingMode, type, creationFlags, useSRGBBuffer);\n    };\n    /**\n     * Creates a RGBA texture from some data.\n     * @param data Define the texture data\n     * @param width Define the width of the texture\n     * @param height Define the height of the texture\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\n     * @param creationFlags specific flags to use when creating the texture (1 for storage textures, for eg)\n     * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\n     * @returns the RGBA texture\n     */\n    RawTexture.CreateRGBATexture = function (data, width, height, sceneOrEngine, generateMipMaps, invertY, samplingMode, type, creationFlags, useSRGBBuffer) {\n        if (generateMipMaps === void 0) { generateMipMaps = true; }\n        if (invertY === void 0) { invertY = false; }\n        if (samplingMode === void 0) { samplingMode = 3; }\n        if (type === void 0) { type = 0; }\n        if (creationFlags === void 0) { creationFlags = 0; }\n        if (useSRGBBuffer === void 0) { useSRGBBuffer = false; }\n        return new RawTexture(data, width, height, 5, sceneOrEngine, generateMipMaps, invertY, samplingMode, type, creationFlags, useSRGBBuffer);\n    };\n    /**\n     * Creates a RGBA storage texture from some data.\n     * @param data Define the texture data\n     * @param width Define the width of the texture\n     * @param height Define the height of the texture\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\n     * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\n     * @returns the RGBA texture\n     */\n    RawTexture.CreateRGBAStorageTexture = function (data, width, height, sceneOrEngine, generateMipMaps, invertY, samplingMode, type, useSRGBBuffer) {\n        if (generateMipMaps === void 0) { generateMipMaps = true; }\n        if (invertY === void 0) { invertY = false; }\n        if (samplingMode === void 0) { samplingMode = 3; }\n        if (type === void 0) { type = 0; }\n        if (useSRGBBuffer === void 0) { useSRGBBuffer = false; }\n        return new RawTexture(data, width, height, 5, sceneOrEngine, generateMipMaps, invertY, samplingMode, type, 1, useSRGBBuffer);\n    };\n    /**\n     * Creates a R texture from some data.\n     * @param data Define the texture data\n     * @param width Define the width of the texture\n     * @param height Define the height of the texture\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\n     * @returns the R texture\n     */\n    RawTexture.CreateRTexture = function (data, width, height, sceneOrEngine, generateMipMaps, invertY, samplingMode, type) {\n        if (generateMipMaps === void 0) { generateMipMaps = true; }\n        if (invertY === void 0) { invertY = false; }\n        if (samplingMode === void 0) { samplingMode = Texture.TRILINEAR_SAMPLINGMODE; }\n        if (type === void 0) { type = 1; }\n        return new RawTexture(data, width, height, 6, sceneOrEngine, generateMipMaps, invertY, samplingMode, type);\n    };\n    /**\n     * Creates a R storage texture from some data.\n     * @param data Define the texture data\n     * @param width Define the width of the texture\n     * @param height Define the height of the texture\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\n     * @returns the R texture\n     */\n    RawTexture.CreateRStorageTexture = function (data, width, height, sceneOrEngine, generateMipMaps, invertY, samplingMode, type) {\n        if (generateMipMaps === void 0) { generateMipMaps = true; }\n        if (invertY === void 0) { invertY = false; }\n        if (samplingMode === void 0) { samplingMode = Texture.TRILINEAR_SAMPLINGMODE; }\n        if (type === void 0) { type = 1; }\n        return new RawTexture(data, width, height, 6, sceneOrEngine, generateMipMaps, invertY, samplingMode, type, 1);\n    };\n    return RawTexture;\n}(Texture));\nexport { RawTexture };\n//# sourceMappingURL=rawTexture.js.map","import { __extends } from \"tslib\";\nimport { Texture } from \"./texture.js\";\n\nimport \"../../Engines/Extensions/engine.rawTexture.js\";\n/**\n * Class used to store 2D array textures containing user data\n */\nvar RawTexture2DArray = /** @class */ (function (_super) {\n    __extends(RawTexture2DArray, _super);\n    /**\n     * Create a new RawTexture2DArray\n     * @param data defines the data of the texture\n     * @param width defines the width of the texture\n     * @param height defines the height of the texture\n     * @param depth defines the number of layers of the texture\n     * @param format defines the texture format to use\n     * @param scene defines the hosting scene\n     * @param generateMipMaps defines a boolean indicating if mip levels should be generated (true by default)\n     * @param invertY defines if texture must be stored with Y axis inverted\n     * @param samplingMode defines the sampling mode to use (Texture.TRILINEAR_SAMPLINGMODE by default)\n     * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_INT, Engine.TEXTURETYPE_FLOAT...)\n     */\n    function RawTexture2DArray(data, width, height, depth, \n    /** Gets or sets the texture format to use */\n    format, scene, generateMipMaps, invertY, samplingMode, textureType) {\n        if (generateMipMaps === void 0) { generateMipMaps = true; }\n        if (invertY === void 0) { invertY = false; }\n        if (samplingMode === void 0) { samplingMode = Texture.TRILINEAR_SAMPLINGMODE; }\n        if (textureType === void 0) { textureType = 0; }\n        var _this = _super.call(this, null, scene, !generateMipMaps, invertY) || this;\n        _this.format = format;\n        _this._texture = scene.getEngine().createRawTexture2DArray(data, width, height, depth, format, generateMipMaps, invertY, samplingMode, null, textureType);\n        _this._depth = depth;\n        _this.is2DArray = true;\n        return _this;\n    }\n    Object.defineProperty(RawTexture2DArray.prototype, \"depth\", {\n        /**\n         * Gets the number of layers of the texture\n         */\n        get: function () {\n            return this._depth;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Update the texture with new data\n     * @param data defines the data to store in the texture\n     */\n    RawTexture2DArray.prototype.update = function (data) {\n        if (!this._texture) {\n            return;\n        }\n        this._getEngine().updateRawTexture2DArray(this._texture, data, this._texture.format, this._texture.invertY, null, this._texture.type);\n    };\n    /**\n     * Creates a RGBA texture from some data.\n     * @param data Define the texture data\n     * @param width Define the width of the texture\n     * @param height Define the height of the texture\n     * @param depth defines the number of layers of the texture\n     * @param scene defines the scene the texture will belong to\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\n     * @returns the RGBA texture\n     */\n    RawTexture2DArray.CreateRGBATexture = function (data, width, height, depth, scene, generateMipMaps, invertY, samplingMode, type) {\n        if (generateMipMaps === void 0) { generateMipMaps = true; }\n        if (invertY === void 0) { invertY = false; }\n        if (samplingMode === void 0) { samplingMode = 3; }\n        if (type === void 0) { type = 0; }\n        return new RawTexture2DArray(data, width, height, depth, 5, scene, generateMipMaps, invertY, samplingMode, type);\n    };\n    return RawTexture2DArray;\n}(Texture));\nexport { RawTexture2DArray };\n//# sourceMappingURL=rawTexture2DArray.js.map","import { __extends } from \"tslib\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { Texture } from \"../../Materials/Textures/texture.js\";\nimport { PostProcessManager } from \"../../PostProcesses/postProcessManager.js\";\nimport { RenderingManager } from \"../../Rendering/renderingManager.js\";\n\nimport \"../../Engines/Extensions/engine.renderTarget.js\";\nimport \"../../Engines/Extensions/engine.renderTargetCube.js\";\nimport { Engine } from \"../../Engines/engine.js\";\n/**\n * This Helps creating a texture that will be created from a camera in your scene.\n * It is basically a dynamic texture that could be used to create special effects for instance.\n * Actually, It is the base of lot of effects in the framework like post process, shadows, effect layers and rendering pipelines...\n */\nvar RenderTargetTexture = /** @class */ (function (_super) {\n    __extends(RenderTargetTexture, _super);\n    /**\n     * Instantiate a render target texture. This is mainly used to render of screen the scene to for instance apply post process\n     * or used a shadow, depth texture...\n     * @param name The friendly name of the texture\n     * @param size The size of the RTT (number if square, or {width: number, height:number} or {ratio:} to define a ratio from the main scene)\n     * @param scene The scene the RTT belongs to. The latest created scene will be used if not precised.\n     * @param generateMipMaps True if mip maps need to be generated after render.\n     * @param doNotChangeAspectRatio True to not change the aspect ratio of the scene in the RTT\n     * @param type The type of the buffer in the RTT (int, half float, float...)\n     * @param isCube True if a cube texture needs to be created\n     * @param samplingMode The sampling mode to be usedwith the render target (Linear, Nearest...)\n     * @param generateDepthBuffer True to generate a depth buffer\n     * @param generateStencilBuffer True to generate a stencil buffer\n     * @param isMulti True if multiple textures need to be created (Draw Buffers)\n     * @param format The internal format of the buffer in the RTT (RED, RG, RGB, RGBA, ALPHA...)\n     * @param delayAllocation if the texture allocation should be delayed (default: false)\n     * @param samples sample count to use when creating the RTT\n     * @param creationFlags specific flags to use when creating the texture (1 for storage textures, for eg)\n     * @param noColorTarget True to indicate that no color target should be created. Useful if you only want to write to the depth buffer, for eg\n     * @param useSRGBBuffer True to create a SRGB texture\n     */\n    function RenderTargetTexture(name, size, scene, generateMipMaps, doNotChangeAspectRatio, type, isCube, samplingMode, generateDepthBuffer, generateStencilBuffer, isMulti, format, delayAllocation, samples, creationFlags, noColorTarget, useSRGBBuffer) {\n        if (doNotChangeAspectRatio === void 0) { doNotChangeAspectRatio = true; }\n        if (type === void 0) { type = 0; }\n        if (isCube === void 0) { isCube = false; }\n        if (samplingMode === void 0) { samplingMode = Texture.TRILINEAR_SAMPLINGMODE; }\n        if (generateDepthBuffer === void 0) { generateDepthBuffer = true; }\n        if (generateStencilBuffer === void 0) { generateStencilBuffer = false; }\n        if (isMulti === void 0) { isMulti = false; }\n        if (format === void 0) { format = 5; }\n        if (delayAllocation === void 0) { delayAllocation = false; }\n        if (noColorTarget === void 0) { noColorTarget = false; }\n        if (useSRGBBuffer === void 0) { useSRGBBuffer = false; }\n        var _this = this;\n        var _a;\n        _this = _super.call(this, null, scene, !generateMipMaps, undefined, samplingMode, undefined, undefined, undefined, undefined, format) || this;\n        /**\n         * Define if particles should be rendered in your texture.\n         */\n        _this.renderParticles = true;\n        /**\n         * Define if sprites should be rendered in your texture.\n         */\n        _this.renderSprites = false;\n        /**\n         * Define if the camera viewport should be respected while rendering the texture or if the render should be done to the entire texture.\n         */\n        _this.ignoreCameraViewport = false;\n        /**\n         * An event triggered when the texture is unbind.\n         */\n        _this.onBeforeBindObservable = new Observable();\n        /**\n         * An event triggered when the texture is unbind.\n         */\n        _this.onAfterUnbindObservable = new Observable();\n        /**\n         * An event triggered before rendering the texture\n         */\n        _this.onBeforeRenderObservable = new Observable();\n        /**\n         * An event triggered after rendering the texture\n         */\n        _this.onAfterRenderObservable = new Observable();\n        /**\n         * An event triggered after the texture clear\n         */\n        _this.onClearObservable = new Observable();\n        /**\n         * An event triggered when the texture is resized.\n         */\n        _this.onResizeObservable = new Observable();\n        /** @hidden */\n        _this._cleared = false;\n        /**\n         * Skip the initial clear of the rtt at the beginning of the frame render loop\n         */\n        _this.skipInitialClear = false;\n        _this._currentRefreshId = -1;\n        _this._refreshRate = 1;\n        _this._samples = 1;\n        _this._canRescale = true;\n        _this._renderTarget = null;\n        /**\n         * Gets or sets the center of the bounding box associated with the texture (when in cube mode)\n         * It must define where the camera used to render the texture is set\n         */\n        _this.boundingBoxPosition = Vector3.Zero();\n        scene = _this.getScene();\n        if (!scene) {\n            return _this;\n        }\n        var engine = _this.getScene().getEngine();\n        _this._coordinatesMode = Texture.PROJECTION_MODE;\n        _this.renderList = new Array();\n        _this.name = name;\n        _this.isRenderTarget = true;\n        _this._initialSizeParameter = size;\n        _this._renderPassIds = [];\n        _this._isCubeData = isCube;\n        _this._processSizeParameter(size);\n        _this.renderPassId = _this._renderPassIds[0];\n        _this._resizeObserver = engine.onResizeObservable.add(function () { });\n        _this._generateMipMaps = generateMipMaps ? true : false;\n        _this._doNotChangeAspectRatio = doNotChangeAspectRatio;\n        // Rendering groups\n        _this._renderingManager = new RenderingManager(scene);\n        _this._renderingManager._useSceneAutoClearSetup = true;\n        if (isMulti) {\n            return _this;\n        }\n        _this._renderTargetOptions = {\n            generateMipMaps: generateMipMaps,\n            type: type,\n            format: (_a = _this._format) !== null && _a !== void 0 ? _a : undefined,\n            samplingMode: _this.samplingMode,\n            generateDepthBuffer: generateDepthBuffer,\n            generateStencilBuffer: generateStencilBuffer,\n            samples: samples,\n            creationFlags: creationFlags,\n            noColorTarget: noColorTarget,\n            useSRGBBuffer: useSRGBBuffer,\n        };\n        if (_this.samplingMode === Texture.NEAREST_SAMPLINGMODE) {\n            _this.wrapU = Texture.CLAMP_ADDRESSMODE;\n            _this.wrapV = Texture.CLAMP_ADDRESSMODE;\n        }\n        if (!delayAllocation) {\n            if (isCube) {\n                _this._renderTarget = scene.getEngine().createRenderTargetCubeTexture(_this.getRenderSize(), _this._renderTargetOptions);\n                _this.coordinatesMode = Texture.INVCUBIC_MODE;\n                _this._textureMatrix = Matrix.Identity();\n            }\n            else {\n                _this._renderTarget = scene.getEngine().createRenderTargetTexture(_this._size, _this._renderTargetOptions);\n            }\n            _this._texture = _this._renderTarget.texture;\n            if (samples !== undefined) {\n                _this.samples = samples;\n            }\n        }\n        return _this;\n    }\n    Object.defineProperty(RenderTargetTexture.prototype, \"renderList\", {\n        /**\n         * Use this list to define the list of mesh you want to render.\n         */\n        get: function () {\n            return this._renderList;\n        },\n        set: function (value) {\n            this._renderList = value;\n            if (this._renderList) {\n                this._hookArray(this._renderList);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    RenderTargetTexture.prototype._hookArray = function (array) {\n        var _this = this;\n        var oldPush = array.push;\n        array.push = function () {\n            var _a;\n            var items = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                items[_i] = arguments[_i];\n            }\n            var wasEmpty = array.length === 0;\n            var result = oldPush.apply(array, items);\n            if (wasEmpty) {\n                (_a = _this.getScene()) === null || _a === void 0 ? void 0 : _a.meshes.forEach(function (mesh) {\n                    mesh._markSubMeshesAsLightDirty();\n                });\n            }\n            return result;\n        };\n        var oldSplice = array.splice;\n        array.splice = function (index, deleteCount) {\n            var _a;\n            var deleted = oldSplice.apply(array, [index, deleteCount]);\n            if (array.length === 0) {\n                (_a = _this.getScene()) === null || _a === void 0 ? void 0 : _a.meshes.forEach(function (mesh) {\n                    mesh._markSubMeshesAsLightDirty();\n                });\n            }\n            return deleted;\n        };\n    };\n    Object.defineProperty(RenderTargetTexture.prototype, \"postProcesses\", {\n        /**\n         * Post-processes for this render target\n         */\n        get: function () {\n            return this._postProcesses;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RenderTargetTexture.prototype, \"_prePassEnabled\", {\n        get: function () {\n            return !!this._prePassRenderTarget && this._prePassRenderTarget.enabled;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RenderTargetTexture.prototype, \"onAfterUnbind\", {\n        /**\n         * Set a after unbind callback in the texture.\n         * This has been kept for backward compatibility and use of onAfterUnbindObservable is recommended.\n         */\n        set: function (callback) {\n            if (this._onAfterUnbindObserver) {\n                this.onAfterUnbindObservable.remove(this._onAfterUnbindObserver);\n            }\n            this._onAfterUnbindObserver = this.onAfterUnbindObservable.add(callback);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RenderTargetTexture.prototype, \"onBeforeRender\", {\n        /**\n         * Set a before render callback in the texture.\n         * This has been kept for backward compatibility and use of onBeforeRenderObservable is recommended.\n         */\n        set: function (callback) {\n            if (this._onBeforeRenderObserver) {\n                this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\n            }\n            this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RenderTargetTexture.prototype, \"onAfterRender\", {\n        /**\n         * Set a after render callback in the texture.\n         * This has been kept for backward compatibility and use of onAfterRenderObservable is recommended.\n         */\n        set: function (callback) {\n            if (this._onAfterRenderObserver) {\n                this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n            }\n            this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RenderTargetTexture.prototype, \"onClear\", {\n        /**\n         * Set a clear callback in the texture.\n         * This has been kept for backward compatibility and use of onClearObservable is recommended.\n         */\n        set: function (callback) {\n            if (this._onClearObserver) {\n                this.onClearObservable.remove(this._onClearObserver);\n            }\n            this._onClearObserver = this.onClearObservable.add(callback);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RenderTargetTexture.prototype, \"renderPassIds\", {\n        /**\n         * Gets the render pass ids used by the render target texture. For a single render target the array length will be 1, for a cube texture it will be 6 and for\n         * a 2D texture array it will return an array of ids the size of the 2D texture array\n         */\n        get: function () {\n            return this._renderPassIds;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RenderTargetTexture.prototype, \"currentRefreshId\", {\n        /**\n         * Gets the current value of the refreshId counter\n         */\n        get: function () {\n            return this._currentRefreshId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Sets a specific material to be used to render a mesh/a list of meshes in this render target texture\n     * @param mesh mesh or array of meshes\n     * @param material material or array of materials to use for this render pass. If undefined is passed, no specific material will be used but the regular material instead (mesh.material). It's possible to provide an array of materials to use a different material for each rendering in the case of a cube texture (6 rendering) and a 2D texture array (as many rendering as the length of the array)\n     */\n    RenderTargetTexture.prototype.setMaterialForRendering = function (mesh, material) {\n        var meshes;\n        if (!Array.isArray(mesh)) {\n            meshes = [mesh];\n        }\n        else {\n            meshes = mesh;\n        }\n        for (var j = 0; j < meshes.length; ++j) {\n            for (var i = 0; i < this._renderPassIds.length; ++i) {\n                meshes[j].setMaterialForRenderPass(this._renderPassIds[i], material !== undefined ? (Array.isArray(material) ? material[i] : material) : undefined);\n            }\n        }\n    };\n    Object.defineProperty(RenderTargetTexture.prototype, \"renderTargetOptions\", {\n        /**\n         * Gets render target creation options that were used.\n         */\n        get: function () {\n            return this._renderTargetOptions;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RenderTargetTexture.prototype, \"renderTarget\", {\n        /**\n         * Gets the render target wrapper associated with this render target\n         */\n        get: function () {\n            return this._renderTarget;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    RenderTargetTexture.prototype._onRatioRescale = function () {\n        if (this._sizeRatio) {\n            this.resize(this._initialSizeParameter);\n        }\n    };\n    Object.defineProperty(RenderTargetTexture.prototype, \"boundingBoxSize\", {\n        get: function () {\n            return this._boundingBoxSize;\n        },\n        /**\n         * Gets or sets the size of the bounding box associated with the texture (when in cube mode)\n         * When defined, the cubemap will switch to local mode\n         * @see https://community.arm.com/graphics/b/blog/posts/reflections-based-on-local-cubemaps-in-unity\n         * @example https://www.babylonjs-playground.com/#RNASML\n         */\n        set: function (value) {\n            if (this._boundingBoxSize && this._boundingBoxSize.equals(value)) {\n                return;\n            }\n            this._boundingBoxSize = value;\n            var scene = this.getScene();\n            if (scene) {\n                scene.markAllMaterialsAsDirty(1);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RenderTargetTexture.prototype, \"depthStencilTexture\", {\n        /**\n         * In case the RTT has been created with a depth texture, get the associated\n         * depth texture.\n         * Otherwise, return null.\n         */\n        get: function () {\n            var _a, _b;\n            return (_b = (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a._depthStencilTexture) !== null && _b !== void 0 ? _b : null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Creates a depth stencil texture.\n     * This is only available in WebGL 2 or with the depth texture extension available.\n     * @param comparisonFunction Specifies the comparison function to set on the texture. If 0 or undefined, the texture is not in comparison mode (default: 0)\n     * @param bilinearFiltering Specifies whether or not bilinear filtering is enable on the texture (default: true)\n     * @param generateStencil Specifies whether or not a stencil should be allocated in the texture (default: false)\n     * @param samples sample count of the depth/stencil texture (default: 1)\n     * @param format format of the depth texture (default: 14)\n     */\n    RenderTargetTexture.prototype.createDepthStencilTexture = function (comparisonFunction, bilinearFiltering, generateStencil, samples, format) {\n        var _a;\n        if (comparisonFunction === void 0) { comparisonFunction = 0; }\n        if (bilinearFiltering === void 0) { bilinearFiltering = true; }\n        if (generateStencil === void 0) { generateStencil = false; }\n        if (samples === void 0) { samples = 1; }\n        if (format === void 0) { format = 14; }\n        (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.createDepthStencilTexture(comparisonFunction, bilinearFiltering, generateStencil, samples, format);\n    };\n    RenderTargetTexture.prototype._releaseRenderPassId = function () {\n        if (this._scene) {\n            var engine = this._scene.getEngine();\n            for (var i = 0; i < this._renderPassIds.length; ++i) {\n                engine.releaseRenderPassId(this._renderPassIds[i]);\n            }\n        }\n        this._renderPassIds = [];\n    };\n    RenderTargetTexture.prototype._createRenderPassId = function () {\n        this._releaseRenderPassId();\n        var engine = this._scene.getEngine(); // scene can't be null in a RenderTargetTexture, see constructor\n        var numPasses = this._isCubeData ? 6 : this.getRenderLayers() || 1;\n        for (var i = 0; i < numPasses; ++i) {\n            this._renderPassIds[i] = engine.createRenderPassId(\"RenderTargetTexture - \".concat(this.name, \"#\").concat(i));\n        }\n    };\n    RenderTargetTexture.prototype._processSizeParameter = function (size) {\n        if (size.ratio) {\n            this._sizeRatio = size.ratio;\n            var engine = this._getEngine();\n            this._size = {\n                width: this._bestReflectionRenderTargetDimension(engine.getRenderWidth(), this._sizeRatio),\n                height: this._bestReflectionRenderTargetDimension(engine.getRenderHeight(), this._sizeRatio),\n            };\n        }\n        else {\n            this._size = size;\n        }\n        this._createRenderPassId();\n    };\n    Object.defineProperty(RenderTargetTexture.prototype, \"samples\", {\n        /**\n         * Define the number of samples to use in case of MSAA.\n         * It defaults to one meaning no MSAA has been enabled.\n         */\n        get: function () {\n            var _a, _b;\n            return (_b = (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.samples) !== null && _b !== void 0 ? _b : this._samples;\n        },\n        set: function (value) {\n            if (this._renderTarget) {\n                this._samples = this._renderTarget.setSamples(value);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Resets the refresh counter of the texture and start bak from scratch.\n     * Could be useful to regenerate the texture if it is setup to render only once.\n     */\n    RenderTargetTexture.prototype.resetRefreshCounter = function () {\n        this._currentRefreshId = -1;\n    };\n    Object.defineProperty(RenderTargetTexture.prototype, \"refreshRate\", {\n        /**\n         * Define the refresh rate of the texture or the rendering frequency.\n         * Use 0 to render just once, 1 to render on every frame, 2 to render every two frames and so on...\n         */\n        get: function () {\n            return this._refreshRate;\n        },\n        set: function (value) {\n            this._refreshRate = value;\n            this.resetRefreshCounter();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Adds a post process to the render target rendering passes.\n     * @param postProcess define the post process to add\n     */\n    RenderTargetTexture.prototype.addPostProcess = function (postProcess) {\n        if (!this._postProcessManager) {\n            var scene = this.getScene();\n            if (!scene) {\n                return;\n            }\n            this._postProcessManager = new PostProcessManager(scene);\n            this._postProcesses = new Array();\n        }\n        this._postProcesses.push(postProcess);\n        this._postProcesses[0].autoClear = false;\n    };\n    /**\n     * Clear all the post processes attached to the render target\n     * @param dispose define if the cleared post processes should also be disposed (false by default)\n     */\n    RenderTargetTexture.prototype.clearPostProcesses = function (dispose) {\n        if (dispose === void 0) { dispose = false; }\n        if (!this._postProcesses) {\n            return;\n        }\n        if (dispose) {\n            for (var _i = 0, _a = this._postProcesses; _i < _a.length; _i++) {\n                var postProcess = _a[_i];\n                postProcess.dispose();\n            }\n        }\n        this._postProcesses = [];\n    };\n    /**\n     * Remove one of the post process from the list of attached post processes to the texture\n     * @param postProcess define the post process to remove from the list\n     */\n    RenderTargetTexture.prototype.removePostProcess = function (postProcess) {\n        if (!this._postProcesses) {\n            return;\n        }\n        var index = this._postProcesses.indexOf(postProcess);\n        if (index === -1) {\n            return;\n        }\n        this._postProcesses.splice(index, 1);\n        if (this._postProcesses.length > 0) {\n            this._postProcesses[0].autoClear = false;\n        }\n    };\n    /** @hidden */\n    RenderTargetTexture.prototype._shouldRender = function () {\n        if (this._currentRefreshId === -1) {\n            // At least render once\n            this._currentRefreshId = 1;\n            return true;\n        }\n        if (this.refreshRate === this._currentRefreshId) {\n            this._currentRefreshId = 1;\n            return true;\n        }\n        this._currentRefreshId++;\n        return false;\n    };\n    /**\n     * Gets the actual render size of the texture.\n     * @returns the width of the render size\n     */\n    RenderTargetTexture.prototype.getRenderSize = function () {\n        return this.getRenderWidth();\n    };\n    /**\n     * Gets the actual render width of the texture.\n     * @returns the width of the render size\n     */\n    RenderTargetTexture.prototype.getRenderWidth = function () {\n        if (this._size.width) {\n            return this._size.width;\n        }\n        return this._size;\n    };\n    /**\n     * Gets the actual render height of the texture.\n     * @returns the height of the render size\n     */\n    RenderTargetTexture.prototype.getRenderHeight = function () {\n        if (this._size.width) {\n            return this._size.height;\n        }\n        return this._size;\n    };\n    /**\n     * Gets the actual number of layers of the texture.\n     * @returns the number of layers\n     */\n    RenderTargetTexture.prototype.getRenderLayers = function () {\n        var layers = this._size.layers;\n        if (layers) {\n            return layers;\n        }\n        return 0;\n    };\n    /**\n     * Don't allow this render target texture to rescale. Mainly used to prevent rescaling by the scene optimizer.\n     */\n    RenderTargetTexture.prototype.disableRescaling = function () {\n        this._canRescale = false;\n    };\n    Object.defineProperty(RenderTargetTexture.prototype, \"canRescale\", {\n        /**\n         * Get if the texture can be rescaled or not.\n         */\n        get: function () {\n            return this._canRescale;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Resize the texture using a ratio.\n     * @param ratio the ratio to apply to the texture size in order to compute the new target size\n     */\n    RenderTargetTexture.prototype.scale = function (ratio) {\n        var newSize = Math.max(1, this.getRenderSize() * ratio);\n        this.resize(newSize);\n    };\n    /**\n     * Get the texture reflection matrix used to rotate/transform the reflection.\n     * @returns the reflection matrix\n     */\n    RenderTargetTexture.prototype.getReflectionTextureMatrix = function () {\n        if (this.isCube) {\n            return this._textureMatrix;\n        }\n        return _super.prototype.getReflectionTextureMatrix.call(this);\n    };\n    /**\n     * Resize the texture to a new desired size.\n     * Be careful as it will recreate all the data in the new texture.\n     * @param size Define the new size. It can be:\n     *   - a number for squared texture,\n     *   - an object containing { width: number, height: number }\n     *   - or an object containing a ratio { ratio: number }\n     */\n    RenderTargetTexture.prototype.resize = function (size) {\n        var _a;\n        var wasCube = this.isCube;\n        (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._renderTarget = null;\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._processSizeParameter(size);\n        if (wasCube) {\n            this._renderTarget = scene.getEngine().createRenderTargetCubeTexture(this.getRenderSize(), this._renderTargetOptions);\n        }\n        else {\n            this._renderTarget = scene.getEngine().createRenderTargetTexture(this._size, this._renderTargetOptions);\n        }\n        this._texture = this._renderTarget.texture;\n        if (this._renderTargetOptions.samples !== undefined) {\n            this.samples = this._renderTargetOptions.samples;\n        }\n        if (this.onResizeObservable.hasObservers()) {\n            this.onResizeObservable.notifyObservers(this);\n        }\n    };\n    /**\n     * Renders all the objects from the render list into the texture.\n     * @param useCameraPostProcess Define if camera post processes should be used during the rendering\n     * @param dumpForDebug Define if the rendering result should be dumped (copied) for debugging purpose\n     */\n    RenderTargetTexture.prototype.render = function (useCameraPostProcess, dumpForDebug) {\n        if (useCameraPostProcess === void 0) { useCameraPostProcess = false; }\n        if (dumpForDebug === void 0) { dumpForDebug = false; }\n        this._render(useCameraPostProcess, dumpForDebug);\n    };\n    /**\n     * This function will check if the render target texture can be rendered (textures are loaded, shaders are compiled)\n     * @return true if all required resources are ready\n     */\n    RenderTargetTexture.prototype.isReadyForRendering = function () {\n        return this._render(false, false, true);\n    };\n    RenderTargetTexture.prototype._render = function (useCameraPostProcess, dumpForDebug, checkReadiness) {\n        var _a;\n        if (useCameraPostProcess === void 0) { useCameraPostProcess = false; }\n        if (dumpForDebug === void 0) { dumpForDebug = false; }\n        if (checkReadiness === void 0) { checkReadiness = false; }\n        var scene = this.getScene();\n        if (!scene) {\n            return checkReadiness;\n        }\n        var engine = scene.getEngine();\n        if (this.useCameraPostProcesses !== undefined) {\n            useCameraPostProcess = this.useCameraPostProcesses;\n        }\n        if (this._waitingRenderList) {\n            this.renderList = [];\n            for (var index = 0; index < this._waitingRenderList.length; index++) {\n                var id = this._waitingRenderList[index];\n                var mesh = scene.getMeshById(id);\n                if (mesh) {\n                    this.renderList.push(mesh);\n                }\n            }\n            this._waitingRenderList = undefined;\n        }\n        // Is predicate defined?\n        if (this.renderListPredicate) {\n            if (this.renderList) {\n                this.renderList.length = 0; // Clear previous renderList\n            }\n            else {\n                this.renderList = [];\n            }\n            var scene_1 = this.getScene();\n            if (!scene_1) {\n                return checkReadiness;\n            }\n            var sceneMeshes = scene_1.meshes;\n            for (var index = 0; index < sceneMeshes.length; index++) {\n                var mesh = sceneMeshes[index];\n                if (this.renderListPredicate(mesh)) {\n                    this.renderList.push(mesh);\n                }\n            }\n        }\n        var currentRenderPassId = engine.currentRenderPassId;\n        this.onBeforeBindObservable.notifyObservers(this);\n        // Set custom projection.\n        // Needs to be before binding to prevent changing the aspect ratio.\n        var camera = (_a = this.activeCamera) !== null && _a !== void 0 ? _a : scene.activeCamera;\n        if (camera) {\n            if (camera !== scene.activeCamera) {\n                scene.setTransformMatrix(camera.getViewMatrix(), camera.getProjectionMatrix(true));\n            }\n            engine.setViewport(camera.viewport, this.getRenderWidth(), this.getRenderHeight());\n        }\n        this._defaultRenderListPrepared = false;\n        var returnValue = checkReadiness;\n        if (!checkReadiness) {\n            if (this.is2DArray) {\n                for (var layer = 0; layer < this.getRenderLayers(); layer++) {\n                    this._renderToTarget(0, useCameraPostProcess, dumpForDebug, layer, camera);\n                    scene.incrementRenderId();\n                    scene.resetCachedMaterial();\n                }\n            }\n            else if (this.isCube) {\n                for (var face = 0; face < 6; face++) {\n                    this._renderToTarget(face, useCameraPostProcess, dumpForDebug, undefined, camera);\n                    scene.incrementRenderId();\n                    scene.resetCachedMaterial();\n                }\n            }\n            else {\n                this._renderToTarget(0, useCameraPostProcess, dumpForDebug, undefined, camera);\n            }\n        }\n        else {\n            if (!scene.getViewMatrix()) {\n                // We probably didn't execute scene.render() yet, so make sure we have a view/projection matrix setup for the scene\n                scene.updateTransformMatrix();\n            }\n            var numLayers = this.is2DArray ? this.getRenderLayers() : this.isCube ? 6 : 1;\n            for (var layer = 0; layer < numLayers && returnValue; layer++) {\n                var currentRenderList = null;\n                var defaultRenderList = this.renderList ? this.renderList : scene.getActiveMeshes().data;\n                var defaultRenderListLength = this.renderList ? this.renderList.length : scene.getActiveMeshes().length;\n                engine.currentRenderPassId = this._renderPassIds[layer];\n                this.onBeforeRenderObservable.notifyObservers(layer);\n                if (this.getCustomRenderList) {\n                    currentRenderList = this.getCustomRenderList(layer, defaultRenderList, defaultRenderListLength);\n                }\n                if (!currentRenderList) {\n                    currentRenderList = defaultRenderList;\n                }\n                if (!this._doNotChangeAspectRatio) {\n                    scene.updateTransformMatrix(true);\n                }\n                for (var i = 0; i < currentRenderList.length && returnValue; ++i) {\n                    var mesh = currentRenderList[i];\n                    if (!mesh.isEnabled() || mesh.isBlocked || !mesh.isVisible || !mesh.subMeshes) {\n                        continue;\n                    }\n                    if (this.customIsReadyFunction) {\n                        if (!this.customIsReadyFunction(mesh, this.refreshRate)) {\n                            returnValue = false;\n                            break;\n                        }\n                    }\n                    else if (!mesh.isReady(true)) {\n                        returnValue = false;\n                        break;\n                    }\n                }\n                this.onAfterRenderObservable.notifyObservers(layer);\n            }\n        }\n        this.onAfterUnbindObservable.notifyObservers(this);\n        engine.currentRenderPassId = currentRenderPassId;\n        if (scene.activeCamera) {\n            // Do not avoid setting uniforms when multiple scenes are active as another camera may have overwrite these\n            if (scene.getEngine().scenes.length > 1 || (this.activeCamera && this.activeCamera !== scene.activeCamera)) {\n                scene.setTransformMatrix(scene.activeCamera.getViewMatrix(), scene.activeCamera.getProjectionMatrix(true));\n            }\n            engine.setViewport(scene.activeCamera.viewport);\n        }\n        scene.resetCachedMaterial();\n        return returnValue;\n    };\n    RenderTargetTexture.prototype._bestReflectionRenderTargetDimension = function (renderDimension, scale) {\n        var minimum = 128;\n        var x = renderDimension * scale;\n        var curved = Engine.NearestPOT(x + (minimum * minimum) / (minimum + x));\n        // Ensure we don't exceed the render dimension (while staying POT)\n        return Math.min(Engine.FloorPOT(renderDimension), curved);\n    };\n    RenderTargetTexture.prototype._prepareRenderingManager = function (currentRenderList, currentRenderListLength, camera, checkLayerMask) {\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this._renderingManager.reset();\n        var sceneRenderId = scene.getRenderId();\n        for (var meshIndex = 0; meshIndex < currentRenderListLength; meshIndex++) {\n            var mesh = currentRenderList[meshIndex];\n            if (mesh && !mesh.isBlocked) {\n                if (this.customIsReadyFunction) {\n                    if (!this.customIsReadyFunction(mesh, this.refreshRate)) {\n                        this.resetRefreshCounter();\n                        continue;\n                    }\n                }\n                else if (!mesh.isReady(this.refreshRate === 0)) {\n                    this.resetRefreshCounter();\n                    continue;\n                }\n                if (!mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate && scene.activeCamera) {\n                    mesh._internalAbstractMeshDataInfo._currentLOD = scene.customLODSelector\n                        ? scene.customLODSelector(mesh, this.activeCamera || scene.activeCamera)\n                        : mesh.getLOD(this.activeCamera || scene.activeCamera);\n                    mesh._internalAbstractMeshDataInfo._currentLODIsUpToDate = true;\n                }\n                if (!mesh._internalAbstractMeshDataInfo._currentLOD) {\n                    continue;\n                }\n                var meshToRender = mesh._internalAbstractMeshDataInfo._currentLOD;\n                meshToRender._preActivateForIntermediateRendering(sceneRenderId);\n                var isMasked = void 0;\n                if (checkLayerMask && camera) {\n                    isMasked = (mesh.layerMask & camera.layerMask) === 0;\n                }\n                else {\n                    isMasked = false;\n                }\n                if (mesh.isEnabled() && mesh.isVisible && mesh.subMeshes && !isMasked) {\n                    if (meshToRender !== mesh) {\n                        meshToRender._activate(sceneRenderId, true);\n                    }\n                    if (mesh._activate(sceneRenderId, true) && mesh.subMeshes.length) {\n                        if (!mesh.isAnInstance) {\n                            meshToRender._internalAbstractMeshDataInfo._onlyForInstancesIntermediate = false;\n                        }\n                        else {\n                            if (mesh._internalAbstractMeshDataInfo._actAsRegularMesh) {\n                                meshToRender = mesh;\n                            }\n                        }\n                        meshToRender._internalAbstractMeshDataInfo._isActiveIntermediate = true;\n                        for (var subIndex = 0; subIndex < meshToRender.subMeshes.length; subIndex++) {\n                            var subMesh = meshToRender.subMeshes[subIndex];\n                            this._renderingManager.dispatch(subMesh, meshToRender);\n                        }\n                    }\n                }\n            }\n        }\n        for (var particleIndex = 0; particleIndex < scene.particleSystems.length; particleIndex++) {\n            var particleSystem = scene.particleSystems[particleIndex];\n            var emitter = particleSystem.emitter;\n            if (!particleSystem.isStarted() || !emitter || !emitter.position || !emitter.isEnabled()) {\n                continue;\n            }\n            if (currentRenderList.indexOf(emitter) >= 0) {\n                this._renderingManager.dispatchParticles(particleSystem);\n            }\n        }\n    };\n    /**\n     * @hidden\n     * @param faceIndex face index to bind to if this is a cubetexture\n     * @param layer defines the index of the texture to bind in the array\n     */\n    RenderTargetTexture.prototype._bindFrameBuffer = function (faceIndex, layer) {\n        if (faceIndex === void 0) { faceIndex = 0; }\n        if (layer === void 0) { layer = 0; }\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        var engine = scene.getEngine();\n        if (this._renderTarget) {\n            engine.bindFramebuffer(this._renderTarget, this.isCube ? faceIndex : undefined, undefined, undefined, this.ignoreCameraViewport, 0, layer);\n        }\n    };\n    RenderTargetTexture.prototype._unbindFrameBuffer = function (engine, faceIndex) {\n        var _this = this;\n        if (!this._renderTarget) {\n            return;\n        }\n        engine.unBindFramebuffer(this._renderTarget, this.isCube, function () {\n            _this.onAfterRenderObservable.notifyObservers(faceIndex);\n        });\n    };\n    /**\n     * @param scene\n     * @param faceIndex\n     * @param layer\n     * @param useCameraPostProcess\n     * @hidden\n     */\n    RenderTargetTexture.prototype._prepareFrame = function (scene, faceIndex, layer, useCameraPostProcess) {\n        if (this._postProcessManager) {\n            if (!this._prePassEnabled) {\n                this._postProcessManager._prepareFrame(this._texture, this._postProcesses);\n            }\n        }\n        else if (!useCameraPostProcess || !scene.postProcessManager._prepareFrame(this._texture)) {\n            this._bindFrameBuffer(faceIndex, layer);\n        }\n    };\n    RenderTargetTexture.prototype._renderToTarget = function (faceIndex, useCameraPostProcess, dumpForDebug, layer, camera) {\n        var _a, _b, _c, _d, _e, _f;\n        if (layer === void 0) { layer = 0; }\n        if (camera === void 0) { camera = null; }\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        var engine = scene.getEngine();\n        (_a = engine._debugPushGroup) === null || _a === void 0 ? void 0 : _a.call(engine, \"render to face #\".concat(faceIndex, \" layer #\").concat(layer), 1);\n        // Bind\n        this._prepareFrame(scene, faceIndex, layer, useCameraPostProcess);\n        if (this.is2DArray) {\n            engine.currentRenderPassId = this._renderPassIds[layer];\n            this.onBeforeRenderObservable.notifyObservers(layer);\n        }\n        else {\n            engine.currentRenderPassId = this._renderPassIds[faceIndex];\n            this.onBeforeRenderObservable.notifyObservers(faceIndex);\n        }\n        var fastPath = engine.snapshotRendering && engine.snapshotRenderingMode === 1;\n        if (!fastPath) {\n            // Get the list of meshes to render\n            var currentRenderList = null;\n            var defaultRenderList = this.renderList ? this.renderList : scene.getActiveMeshes().data;\n            var defaultRenderListLength = this.renderList ? this.renderList.length : scene.getActiveMeshes().length;\n            if (this.getCustomRenderList) {\n                currentRenderList = this.getCustomRenderList(this.is2DArray ? layer : faceIndex, defaultRenderList, defaultRenderListLength);\n            }\n            if (!currentRenderList) {\n                // No custom render list provided, we prepare the rendering for the default list, but check\n                // first if we did not already performed the preparation before so as to avoid re-doing it several times\n                if (!this._defaultRenderListPrepared) {\n                    this._prepareRenderingManager(defaultRenderList, defaultRenderListLength, camera, !this.renderList);\n                    this._defaultRenderListPrepared = true;\n                }\n                currentRenderList = defaultRenderList;\n            }\n            else {\n                // Prepare the rendering for the custom render list provided\n                this._prepareRenderingManager(currentRenderList, currentRenderList.length, camera, false);\n            }\n            // Before clear\n            for (var _i = 0, _g = scene._beforeRenderTargetClearStage; _i < _g.length; _i++) {\n                var step = _g[_i];\n                step.action(this, faceIndex, layer);\n            }\n            // Clear\n            if (this.onClearObservable.hasObservers()) {\n                this.onClearObservable.notifyObservers(engine);\n            }\n            else {\n                if (!this.skipInitialClear) {\n                    engine.clear(this.clearColor || scene.clearColor, true, true, true);\n                }\n            }\n            if (!this._doNotChangeAspectRatio) {\n                scene.updateTransformMatrix(true);\n            }\n            // Before Camera Draw\n            for (var _h = 0, _j = scene._beforeRenderTargetDrawStage; _h < _j.length; _h++) {\n                var step = _j[_h];\n                step.action(this, faceIndex, layer);\n            }\n            // Render\n            this._renderingManager.render(this.customRenderFunction, currentRenderList, this.renderParticles, this.renderSprites);\n            // After Camera Draw\n            for (var _k = 0, _l = scene._afterRenderTargetDrawStage; _k < _l.length; _k++) {\n                var step = _l[_k];\n                step.action(this, faceIndex, layer);\n            }\n            var saveGenerateMipMaps = (_c = (_b = this._texture) === null || _b === void 0 ? void 0 : _b.generateMipMaps) !== null && _c !== void 0 ? _c : false;\n            if (this._texture) {\n                this._texture.generateMipMaps = false; // if left true, the mipmaps will be generated (if this._texture.generateMipMaps = true) when the first post process binds its own RTT: by doing so it will unbind the current RTT,\n                // which will trigger a mipmap generation. We don't want this because it's a wasted work, we will do an unbind of the current RTT at the end of the process (see unbindFrameBuffer) which will\n                // trigger the generation of the final mipmaps\n            }\n            if (this._postProcessManager) {\n                this._postProcessManager._finalizeFrame(false, (_d = this._renderTarget) !== null && _d !== void 0 ? _d : undefined, faceIndex, this._postProcesses, this.ignoreCameraViewport);\n            }\n            else if (useCameraPostProcess) {\n                scene.postProcessManager._finalizeFrame(false, (_e = this._renderTarget) !== null && _e !== void 0 ? _e : undefined, faceIndex);\n            }\n            if (this._texture) {\n                this._texture.generateMipMaps = saveGenerateMipMaps;\n            }\n            if (!this._doNotChangeAspectRatio) {\n                scene.updateTransformMatrix(true);\n            }\n            // Dump ?\n            if (dumpForDebug) {\n                Tools.DumpFramebuffer(this.getRenderWidth(), this.getRenderHeight(), engine);\n            }\n        }\n        else {\n            // Clear\n            if (this.onClearObservable.hasObservers()) {\n                this.onClearObservable.notifyObservers(engine);\n            }\n            else {\n                if (!this.skipInitialClear) {\n                    engine.clear(this.clearColor || scene.clearColor, true, true, true);\n                }\n            }\n        }\n        // Unbind\n        this._unbindFrameBuffer(engine, faceIndex);\n        if (this._texture && this.isCube && faceIndex === 5) {\n            engine.generateMipMapsForCubemap(this._texture);\n        }\n        (_f = engine._debugPopGroup) === null || _f === void 0 ? void 0 : _f.call(engine, 1);\n    };\n    /**\n     * Overrides the default sort function applied in the rendering group to prepare the meshes.\n     * This allowed control for front to back rendering or reversely depending of the special needs.\n     *\n     * @param renderingGroupId The rendering group id corresponding to its index\n     * @param opaqueSortCompareFn The opaque queue comparison function use to sort.\n     * @param alphaTestSortCompareFn The alpha test queue comparison function use to sort.\n     * @param transparentSortCompareFn The transparent queue comparison function use to sort.\n     */\n    RenderTargetTexture.prototype.setRenderingOrder = function (renderingGroupId, opaqueSortCompareFn, alphaTestSortCompareFn, transparentSortCompareFn) {\n        if (opaqueSortCompareFn === void 0) { opaqueSortCompareFn = null; }\n        if (alphaTestSortCompareFn === void 0) { alphaTestSortCompareFn = null; }\n        if (transparentSortCompareFn === void 0) { transparentSortCompareFn = null; }\n        this._renderingManager.setRenderingOrder(renderingGroupId, opaqueSortCompareFn, alphaTestSortCompareFn, transparentSortCompareFn);\n    };\n    /**\n     * Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.\n     *\n     * @param renderingGroupId The rendering group id corresponding to its index\n     * @param autoClearDepthStencil Automatically clears depth and stencil between groups if true.\n     */\n    RenderTargetTexture.prototype.setRenderingAutoClearDepthStencil = function (renderingGroupId, autoClearDepthStencil) {\n        this._renderingManager.setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil);\n        this._renderingManager._useSceneAutoClearSetup = false;\n    };\n    /**\n     * Clones the texture.\n     * @returns the cloned texture\n     */\n    RenderTargetTexture.prototype.clone = function () {\n        var textureSize = this.getSize();\n        var newTexture = new RenderTargetTexture(this.name, textureSize, this.getScene(), this._renderTargetOptions.generateMipMaps, this._doNotChangeAspectRatio, this._renderTargetOptions.type, this.isCube, this._renderTargetOptions.samplingMode, this._renderTargetOptions.generateDepthBuffer, this._renderTargetOptions.generateStencilBuffer, undefined, this._renderTargetOptions.format, undefined, this._renderTargetOptions.samples);\n        // Base texture\n        newTexture.hasAlpha = this.hasAlpha;\n        newTexture.level = this.level;\n        // RenderTarget Texture\n        newTexture.coordinatesMode = this.coordinatesMode;\n        if (this.renderList) {\n            newTexture.renderList = this.renderList.slice(0);\n        }\n        return newTexture;\n    };\n    /**\n     * Serialize the texture to a JSON representation we can easily use in the respective Parse function.\n     * @returns The JSON representation of the texture\n     */\n    RenderTargetTexture.prototype.serialize = function () {\n        if (!this.name) {\n            return null;\n        }\n        var serializationObject = _super.prototype.serialize.call(this);\n        serializationObject.renderTargetSize = this.getRenderSize();\n        serializationObject.renderList = [];\n        if (this.renderList) {\n            for (var index = 0; index < this.renderList.length; index++) {\n                serializationObject.renderList.push(this.renderList[index].id);\n            }\n        }\n        return serializationObject;\n    };\n    /**\n     *  This will remove the attached framebuffer objects. The texture will not be able to be used as render target anymore\n     */\n    RenderTargetTexture.prototype.disposeFramebufferObjects = function () {\n        var _a;\n        (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.dispose(true);\n    };\n    /**\n     * Release and destroy the underlying lower level texture aka internalTexture.\n     */\n    RenderTargetTexture.prototype.releaseInternalTexture = function () {\n        var _a;\n        (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.releaseTextures();\n        this._texture = null;\n    };\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    RenderTargetTexture.prototype.dispose = function () {\n        var _a;\n        this.onResizeObservable.clear();\n        this.onClearObservable.clear();\n        this.onAfterRenderObservable.clear();\n        this.onAfterUnbindObservable.clear();\n        this.onBeforeBindObservable.clear();\n        this.onBeforeRenderObservable.clear();\n        if (this._postProcessManager) {\n            this._postProcessManager.dispose();\n            this._postProcessManager = null;\n        }\n        if (this._prePassRenderTarget) {\n            this._prePassRenderTarget.dispose();\n        }\n        this._releaseRenderPassId();\n        this.clearPostProcesses(true);\n        if (this._resizeObserver) {\n            this.getScene().getEngine().onResizeObservable.remove(this._resizeObserver);\n            this._resizeObserver = null;\n        }\n        this.renderList = null;\n        // Remove from custom render targets\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        var index = scene.customRenderTargets.indexOf(this);\n        if (index >= 0) {\n            scene.customRenderTargets.splice(index, 1);\n        }\n        for (var _i = 0, _b = scene.cameras; _i < _b.length; _i++) {\n            var camera = _b[_i];\n            index = camera.customRenderTargets.indexOf(this);\n            if (index >= 0) {\n                camera.customRenderTargets.splice(index, 1);\n            }\n        }\n        (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._renderTarget = null;\n        this._texture = null;\n        _super.prototype.dispose.call(this);\n    };\n    /** @hidden */\n    RenderTargetTexture.prototype._rebuild = function () {\n        if (this.refreshRate === RenderTargetTexture.REFRESHRATE_RENDER_ONCE) {\n            this.refreshRate = RenderTargetTexture.REFRESHRATE_RENDER_ONCE;\n        }\n        if (this._postProcessManager) {\n            this._postProcessManager._rebuild();\n        }\n    };\n    /**\n     * Clear the info related to rendering groups preventing retention point in material dispose.\n     */\n    RenderTargetTexture.prototype.freeRenderingGroups = function () {\n        if (this._renderingManager) {\n            this._renderingManager.freeRenderingGroups();\n        }\n    };\n    /**\n     * Gets the number of views the corresponding to the texture (eg. a MultiviewRenderTarget will have > 1)\n     * @returns the view count\n     */\n    RenderTargetTexture.prototype.getViewCount = function () {\n        return 1;\n    };\n    /**\n     * The texture will only be rendered once which can be useful to improve performance if everything in your render is static for instance.\n     */\n    RenderTargetTexture.REFRESHRATE_RENDER_ONCE = 0;\n    /**\n     * The texture will only be rendered rendered every frame and is recommended for dynamic contents.\n     */\n    RenderTargetTexture.REFRESHRATE_RENDER_ONEVERYFRAME = 1;\n    /**\n     * The texture will be rendered every 2 frames which could be enough if your dynamic objects are not\n     * the central point of your effect and can save a lot of performances.\n     */\n    RenderTargetTexture.REFRESHRATE_RENDER_ONEVERYTWOFRAMES = 2;\n    return RenderTargetTexture;\n}(Texture));\nexport { RenderTargetTexture };\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nTexture._CreateRenderTargetTexture = function (name, renderTargetSize, scene, generateMipMaps, creationFlags) {\n    return new RenderTargetTexture(name, renderTargetSize, scene, generateMipMaps);\n};\n//# sourceMappingURL=renderTargetTexture.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize, SerializationHelper } from \"../../Misc/decorators.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Matrix, TmpVectors, Vector3 } from \"../../Maths/math.vector.js\";\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture.js\";\n\nimport { GetClass, RegisterClass } from \"../../Misc/typeStore.js\";\nimport { _WarnImport } from \"../../Misc/devTools.js\";\nimport { TimingTools } from \"../../Misc/timingTools.js\";\nimport { InstantiationTools } from \"../../Misc/instantiationTools.js\";\nimport { Plane } from \"../../Maths/math.plane.js\";\nimport { EncodeArrayBufferToBase64 } from \"../../Misc/stringTools.js\";\nimport { GenerateBase64StringFromTexture, GenerateBase64StringFromTextureAsync } from \"../../Misc/copyTools.js\";\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions.js\";\n/**\n * This represents a texture in babylon. It can be easily loaded from a network, base64 or html input.\n * @see https://doc.babylonjs.com/babylon101/materials#texture\n */\nvar Texture = /** @class */ (function (_super) {\n    __extends(Texture, _super);\n    /**\n     * Instantiates a new texture.\n     * This represents a texture in babylon. It can be easily loaded from a network, base64 or html input.\n     * @see https://doc.babylonjs.com/babylon101/materials#texture\n     * @param url defines the url of the picture to load as a texture\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\n     * @param noMipmapOrOptions defines if the texture will require mip maps or not or set of all options to create the texture\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading\n     * @param samplingMode defines the sampling mode we want for the texture while fetching from it (Texture.NEAREST_SAMPLINGMODE...)\n     * @param onLoad defines a callback triggered when the texture has been loaded\n     * @param onError defines a callback triggered when an error occurred during the loading session\n     * @param buffer defines the buffer to load the texture from in case the texture is loaded from a buffer representation\n     * @param deleteBuffer defines if the buffer we are loading the texture from should be deleted after load\n     * @param format defines the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\n     * @param mimeType defines an optional mime type information\n     * @param loaderOptions options to be passed to the loader\n     * @param creationFlags specific flags to use when creating the texture (1 for storage textures, for eg)\n     * @param forcedExtension defines the extension to use to pick the right loader\n     */\n    function Texture(url, sceneOrEngine, noMipmapOrOptions, invertY, samplingMode, onLoad, onError, buffer, deleteBuffer, format, mimeType, loaderOptions, creationFlags, forcedExtension) {\n        if (samplingMode === void 0) { samplingMode = Texture.TRILINEAR_SAMPLINGMODE; }\n        if (onLoad === void 0) { onLoad = null; }\n        if (onError === void 0) { onError = null; }\n        if (buffer === void 0) { buffer = null; }\n        if (deleteBuffer === void 0) { deleteBuffer = false; }\n        var _this = this;\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        _this = _super.call(this, sceneOrEngine) || this;\n        /**\n         * Define the url of the texture.\n         */\n        _this.url = null;\n        /**\n         * Define an offset on the texture to offset the u coordinates of the UVs\n         * @see https://doc.babylonjs.com/how_to/more_materials#offsetting\n         */\n        _this.uOffset = 0;\n        /**\n         * Define an offset on the texture to offset the v coordinates of the UVs\n         * @see https://doc.babylonjs.com/how_to/more_materials#offsetting\n         */\n        _this.vOffset = 0;\n        /**\n         * Define an offset on the texture to scale the u coordinates of the UVs\n         * @see https://doc.babylonjs.com/how_to/more_materials#tiling\n         */\n        _this.uScale = 1.0;\n        /**\n         * Define an offset on the texture to scale the v coordinates of the UVs\n         * @see https://doc.babylonjs.com/how_to/more_materials#tiling\n         */\n        _this.vScale = 1.0;\n        /**\n         * Define an offset on the texture to rotate around the u coordinates of the UVs\n         * The angle is defined in radians.\n         * @see https://doc.babylonjs.com/how_to/more_materials\n         */\n        _this.uAng = 0;\n        /**\n         * Define an offset on the texture to rotate around the v coordinates of the UVs\n         * The angle is defined in radians.\n         * @see https://doc.babylonjs.com/how_to/more_materials\n         */\n        _this.vAng = 0;\n        /**\n         * Define an offset on the texture to rotate around the w coordinates of the UVs (in case of 3d texture)\n         * The angle is defined in radians.\n         * @see https://doc.babylonjs.com/how_to/more_materials\n         */\n        _this.wAng = 0;\n        /**\n         * Defines the center of rotation (U)\n         */\n        _this.uRotationCenter = 0.5;\n        /**\n         * Defines the center of rotation (V)\n         */\n        _this.vRotationCenter = 0.5;\n        /**\n         * Defines the center of rotation (W)\n         */\n        _this.wRotationCenter = 0.5;\n        /**\n         * Sets this property to true to avoid deformations when rotating the texture with non-uniform scaling\n         */\n        _this.homogeneousRotationInUVTransform = false;\n        /**\n         * List of inspectable custom properties (used by the Inspector)\n         * @see https://doc.babylonjs.com/how_to/debug_layer#extensibility\n         */\n        _this.inspectableCustomProperties = null;\n        _this._noMipmap = false;\n        /** @hidden */\n        _this._invertY = false;\n        _this._rowGenerationMatrix = null;\n        _this._cachedTextureMatrix = null;\n        _this._projectionModeMatrix = null;\n        _this._t0 = null;\n        _this._t1 = null;\n        _this._t2 = null;\n        _this._cachedUOffset = -1;\n        _this._cachedVOffset = -1;\n        _this._cachedUScale = 0;\n        _this._cachedVScale = 0;\n        _this._cachedUAng = -1;\n        _this._cachedVAng = -1;\n        _this._cachedWAng = -1;\n        _this._cachedProjectionMatrixId = -1;\n        _this._cachedURotationCenter = -1;\n        _this._cachedVRotationCenter = -1;\n        _this._cachedWRotationCenter = -1;\n        _this._cachedHomogeneousRotationInUVTransform = false;\n        _this._cachedCoordinatesMode = -1;\n        /** @hidden */\n        _this._buffer = null;\n        _this._deleteBuffer = false;\n        _this._format = null;\n        _this._delayedOnLoad = null;\n        _this._delayedOnError = null;\n        /**\n         * Observable triggered once the texture has been loaded.\n         */\n        _this.onLoadObservable = new Observable();\n        _this._isBlocking = true;\n        _this.name = url || \"\";\n        _this.url = url;\n        var noMipmap;\n        var useSRGBBuffer = false;\n        var internalTexture = null;\n        if (typeof noMipmapOrOptions === \"object\" && noMipmapOrOptions !== null) {\n            noMipmap = (_a = noMipmapOrOptions.noMipmap) !== null && _a !== void 0 ? _a : false;\n            invertY = (_b = noMipmapOrOptions.invertY) !== null && _b !== void 0 ? _b : (CompatibilityOptions.UseOpenGLOrientationForUV ? false : true);\n            samplingMode = (_c = noMipmapOrOptions.samplingMode) !== null && _c !== void 0 ? _c : Texture.TRILINEAR_SAMPLINGMODE;\n            onLoad = (_d = noMipmapOrOptions.onLoad) !== null && _d !== void 0 ? _d : null;\n            onError = (_e = noMipmapOrOptions.onError) !== null && _e !== void 0 ? _e : null;\n            buffer = (_f = noMipmapOrOptions.buffer) !== null && _f !== void 0 ? _f : null;\n            deleteBuffer = (_g = noMipmapOrOptions.deleteBuffer) !== null && _g !== void 0 ? _g : false;\n            format = noMipmapOrOptions.format;\n            mimeType = noMipmapOrOptions.mimeType;\n            loaderOptions = noMipmapOrOptions.loaderOptions;\n            creationFlags = noMipmapOrOptions.creationFlags;\n            useSRGBBuffer = (_h = noMipmapOrOptions.useSRGBBuffer) !== null && _h !== void 0 ? _h : false;\n            internalTexture = (_j = noMipmapOrOptions.internalTexture) !== null && _j !== void 0 ? _j : null;\n        }\n        else {\n            noMipmap = !!noMipmapOrOptions;\n        }\n        _this._noMipmap = noMipmap;\n        _this._invertY = invertY === undefined ? (CompatibilityOptions.UseOpenGLOrientationForUV ? false : true) : invertY;\n        _this._initialSamplingMode = samplingMode;\n        _this._buffer = buffer;\n        _this._deleteBuffer = deleteBuffer;\n        _this._mimeType = mimeType;\n        _this._loaderOptions = loaderOptions;\n        _this._creationFlags = creationFlags;\n        _this._useSRGBBuffer = useSRGBBuffer;\n        _this._forcedExtension = forcedExtension;\n        if (format) {\n            _this._format = format;\n        }\n        var scene = _this.getScene();\n        var engine = _this._getEngine();\n        if (!engine) {\n            return _this;\n        }\n        engine.onBeforeTextureInitObservable.notifyObservers(_this);\n        var load = function () {\n            if (_this._texture) {\n                if (_this._texture._invertVScale) {\n                    _this.vScale *= -1;\n                    _this.vOffset += 1;\n                }\n                // Update texture to match internal texture's wrapping\n                if (_this._texture._cachedWrapU !== null) {\n                    _this.wrapU = _this._texture._cachedWrapU;\n                    _this._texture._cachedWrapU = null;\n                }\n                if (_this._texture._cachedWrapV !== null) {\n                    _this.wrapV = _this._texture._cachedWrapV;\n                    _this._texture._cachedWrapV = null;\n                }\n                if (_this._texture._cachedWrapR !== null) {\n                    _this.wrapR = _this._texture._cachedWrapR;\n                    _this._texture._cachedWrapR = null;\n                }\n            }\n            if (_this.onLoadObservable.hasObservers()) {\n                _this.onLoadObservable.notifyObservers(_this);\n            }\n            if (onLoad) {\n                onLoad();\n            }\n            if (!_this.isBlocking && scene) {\n                scene.resetCachedMaterial();\n            }\n        };\n        var errorHandler = function (message, exception) {\n            _this._loadingError = true;\n            _this._errorObject = { message: message, exception: exception };\n            if (onError) {\n                onError(message, exception);\n            }\n            Texture.OnTextureLoadErrorObservable.notifyObservers(_this);\n        };\n        if (!_this.url) {\n            _this._delayedOnLoad = load;\n            _this._delayedOnError = errorHandler;\n            return _this;\n        }\n        _this._texture = internalTexture !== null && internalTexture !== void 0 ? internalTexture : _this._getFromCache(_this.url, noMipmap, samplingMode, _this._invertY, useSRGBBuffer);\n        if (!_this._texture) {\n            if (!scene || !scene.useDelayedTextureLoading) {\n                try {\n                    _this._texture = engine.createTexture(_this.url, noMipmap, _this._invertY, scene, samplingMode, load, errorHandler, _this._buffer, undefined, _this._format, _this._forcedExtension, mimeType, loaderOptions, creationFlags, useSRGBBuffer);\n                }\n                catch (e) {\n                    errorHandler(\"error loading\", e);\n                    throw e;\n                }\n                if (deleteBuffer) {\n                    _this._buffer = null;\n                }\n            }\n            else {\n                _this.delayLoadState = 4;\n                _this._delayedOnLoad = load;\n                _this._delayedOnError = errorHandler;\n            }\n        }\n        else {\n            if (_this._texture.isReady) {\n                TimingTools.SetImmediate(function () { return load(); });\n            }\n            else {\n                var loadObserver_1 = _this._texture.onLoadedObservable.add(load);\n                _this._texture.onErrorObservable.add(function (e) {\n                    var _a;\n                    errorHandler(e.message, e.exception);\n                    (_a = _this._texture) === null || _a === void 0 ? void 0 : _a.onLoadedObservable.remove(loadObserver_1);\n                });\n            }\n        }\n        return _this;\n    }\n    Object.defineProperty(Texture.prototype, \"noMipmap\", {\n        /**\n         * Are mip maps generated for this texture or not.\n         */\n        get: function () {\n            return this._noMipmap;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Texture.prototype, \"mimeType\", {\n        /** Returns the texture mime type if it was defined by a loader (undefined else) */\n        get: function () {\n            return this._mimeType;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Texture.prototype, \"isBlocking\", {\n        get: function () {\n            return this._isBlocking;\n        },\n        /**\n         * Is the texture preventing material to render while loading.\n         * If false, a default texture will be used instead of the loading one during the preparation step.\n         */\n        set: function (value) {\n            this._isBlocking = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Texture.prototype, \"invertY\", {\n        /**\n         * Gets a boolean indicating if the texture needs to be inverted on the y axis during loading\n         */\n        get: function () {\n            return this._invertY;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Update the url (and optional buffer) of this texture if url was null during construction.\n     * @param url the url of the texture\n     * @param buffer the buffer of the texture (defaults to null)\n     * @param onLoad callback called when the texture is loaded  (defaults to null)\n     * @param forcedExtension defines the extension to use to pick the right loader\n     */\n    Texture.prototype.updateURL = function (url, buffer, onLoad, forcedExtension) {\n        if (buffer === void 0) { buffer = null; }\n        if (this.url) {\n            this.releaseInternalTexture();\n            this.getScene().markAllMaterialsAsDirty(1);\n        }\n        if (!this.name || this.name.startsWith(\"data:\")) {\n            this.name = url;\n        }\n        this.url = url;\n        this._buffer = buffer;\n        this._forcedExtension = forcedExtension;\n        this.delayLoadState = 4;\n        if (onLoad) {\n            this._delayedOnLoad = onLoad;\n        }\n        this.delayLoad();\n    };\n    /**\n     * Finish the loading sequence of a texture flagged as delayed load.\n     * @hidden\n     */\n    Texture.prototype.delayLoad = function () {\n        if (this.delayLoadState !== 4) {\n            return;\n        }\n        var scene = this.getScene();\n        if (!scene) {\n            return;\n        }\n        this.delayLoadState = 1;\n        this._texture = this._getFromCache(this.url, this._noMipmap, this.samplingMode, this._invertY, this._useSRGBBuffer);\n        if (!this._texture) {\n            this._texture = scene\n                .getEngine()\n                .createTexture(this.url, this._noMipmap, this._invertY, scene, this.samplingMode, this._delayedOnLoad, this._delayedOnError, this._buffer, null, this._format, this._forcedExtension, this._mimeType, this._loaderOptions, this._creationFlags, this._useSRGBBuffer);\n            if (this._deleteBuffer) {\n                this._buffer = null;\n            }\n        }\n        else {\n            if (this._delayedOnLoad) {\n                if (this._texture.isReady) {\n                    TimingTools.SetImmediate(this._delayedOnLoad);\n                }\n                else {\n                    this._texture.onLoadedObservable.add(this._delayedOnLoad);\n                }\n            }\n        }\n        this._delayedOnLoad = null;\n        this._delayedOnError = null;\n    };\n    Texture.prototype._prepareRowForTextureGeneration = function (x, y, z, t) {\n        x *= this._cachedUScale;\n        y *= this._cachedVScale;\n        x -= this.uRotationCenter * this._cachedUScale;\n        y -= this.vRotationCenter * this._cachedVScale;\n        z -= this.wRotationCenter;\n        Vector3.TransformCoordinatesFromFloatsToRef(x, y, z, this._rowGenerationMatrix, t);\n        t.x += this.uRotationCenter * this._cachedUScale + this._cachedUOffset;\n        t.y += this.vRotationCenter * this._cachedVScale + this._cachedVOffset;\n        t.z += this.wRotationCenter;\n    };\n    /**\n     * Checks if the texture has the same transform matrix than another texture\n     * @param texture texture to check against\n     * @returns true if the transforms are the same, else false\n     */\n    Texture.prototype.checkTransformsAreIdentical = function (texture) {\n        return (texture !== null &&\n            this.uOffset === texture.uOffset &&\n            this.vOffset === texture.vOffset &&\n            this.uScale === texture.uScale &&\n            this.vScale === texture.vScale &&\n            this.uAng === texture.uAng &&\n            this.vAng === texture.vAng &&\n            this.wAng === texture.wAng);\n    };\n    /**\n     * Get the current texture matrix which includes the requested offsetting, tiling and rotation components.\n     * @param uBase\n     * @returns the transform matrix of the texture.\n     */\n    Texture.prototype.getTextureMatrix = function (uBase) {\n        var _this = this;\n        if (uBase === void 0) { uBase = 1; }\n        if (this.uOffset === this._cachedUOffset &&\n            this.vOffset === this._cachedVOffset &&\n            this.uScale * uBase === this._cachedUScale &&\n            this.vScale === this._cachedVScale &&\n            this.uAng === this._cachedUAng &&\n            this.vAng === this._cachedVAng &&\n            this.wAng === this._cachedWAng &&\n            this.uRotationCenter === this._cachedURotationCenter &&\n            this.vRotationCenter === this._cachedVRotationCenter &&\n            this.wRotationCenter === this._cachedWRotationCenter &&\n            this.homogeneousRotationInUVTransform === this._cachedHomogeneousRotationInUVTransform) {\n            return this._cachedTextureMatrix;\n        }\n        this._cachedUOffset = this.uOffset;\n        this._cachedVOffset = this.vOffset;\n        this._cachedUScale = this.uScale * uBase;\n        this._cachedVScale = this.vScale;\n        this._cachedUAng = this.uAng;\n        this._cachedVAng = this.vAng;\n        this._cachedWAng = this.wAng;\n        this._cachedURotationCenter = this.uRotationCenter;\n        this._cachedVRotationCenter = this.vRotationCenter;\n        this._cachedWRotationCenter = this.wRotationCenter;\n        this._cachedHomogeneousRotationInUVTransform = this.homogeneousRotationInUVTransform;\n        if (!this._cachedTextureMatrix || !this._rowGenerationMatrix) {\n            this._cachedTextureMatrix = Matrix.Zero();\n            this._rowGenerationMatrix = new Matrix();\n            this._t0 = Vector3.Zero();\n            this._t1 = Vector3.Zero();\n            this._t2 = Vector3.Zero();\n        }\n        Matrix.RotationYawPitchRollToRef(this.vAng, this.uAng, this.wAng, this._rowGenerationMatrix);\n        if (this.homogeneousRotationInUVTransform) {\n            Matrix.TranslationToRef(-this._cachedURotationCenter, -this._cachedVRotationCenter, -this._cachedWRotationCenter, TmpVectors.Matrix[0]);\n            Matrix.TranslationToRef(this._cachedURotationCenter, this._cachedVRotationCenter, this._cachedWRotationCenter, TmpVectors.Matrix[1]);\n            Matrix.ScalingToRef(this._cachedUScale, this._cachedVScale, 0, TmpVectors.Matrix[2]);\n            Matrix.TranslationToRef(this._cachedUOffset, this._cachedVOffset, 0, TmpVectors.Matrix[3]);\n            TmpVectors.Matrix[0].multiplyToRef(this._rowGenerationMatrix, this._cachedTextureMatrix);\n            this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[1], this._cachedTextureMatrix);\n            this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[2], this._cachedTextureMatrix);\n            this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[3], this._cachedTextureMatrix);\n            // copy the translation row to the 3rd row of the matrix so that we don't need to update the shaders (which expects the translation to be on the 3rd row)\n            this._cachedTextureMatrix.setRowFromFloats(2, this._cachedTextureMatrix.m[12], this._cachedTextureMatrix.m[13], this._cachedTextureMatrix.m[14], 1);\n        }\n        else {\n            this._prepareRowForTextureGeneration(0, 0, 0, this._t0);\n            this._prepareRowForTextureGeneration(1.0, 0, 0, this._t1);\n            this._prepareRowForTextureGeneration(0, 1.0, 0, this._t2);\n            this._t1.subtractInPlace(this._t0);\n            this._t2.subtractInPlace(this._t0);\n            Matrix.FromValuesToRef(this._t1.x, this._t1.y, this._t1.z, 0.0, this._t2.x, this._t2.y, this._t2.z, 0.0, this._t0.x, this._t0.y, this._t0.z, 0.0, 0.0, 0.0, 0.0, 1.0, this._cachedTextureMatrix);\n        }\n        var scene = this.getScene();\n        if (!scene) {\n            return this._cachedTextureMatrix;\n        }\n        // We flag the materials that are using this texture as \"texture dirty\" because depending on the fact that the matrix is the identity or not, some defines\n        // will get different values (see MaterialHelper.PrepareDefinesForMergedUV), meaning we should regenerate the effect accordingly\n        scene.markAllMaterialsAsDirty(1, function (mat) {\n            return mat.hasTexture(_this);\n        });\n        return this._cachedTextureMatrix;\n    };\n    /**\n     * Get the current matrix used to apply reflection. This is useful to rotate an environment texture for instance.\n     * @returns The reflection texture transform\n     */\n    Texture.prototype.getReflectionTextureMatrix = function () {\n        var _this = this;\n        var scene = this.getScene();\n        if (!scene) {\n            return this._cachedTextureMatrix;\n        }\n        if (this.uOffset === this._cachedUOffset &&\n            this.vOffset === this._cachedVOffset &&\n            this.uScale === this._cachedUScale &&\n            this.vScale === this._cachedVScale &&\n            this.coordinatesMode === this._cachedCoordinatesMode) {\n            if (this.coordinatesMode === Texture.PROJECTION_MODE) {\n                if (this._cachedProjectionMatrixId === scene.getProjectionMatrix().updateFlag) {\n                    return this._cachedTextureMatrix;\n                }\n            }\n            else {\n                return this._cachedTextureMatrix;\n            }\n        }\n        if (!this._cachedTextureMatrix) {\n            this._cachedTextureMatrix = Matrix.Zero();\n        }\n        if (!this._projectionModeMatrix) {\n            this._projectionModeMatrix = Matrix.Zero();\n        }\n        var flagMaterialsAsTextureDirty = this._cachedCoordinatesMode !== this.coordinatesMode;\n        this._cachedUOffset = this.uOffset;\n        this._cachedVOffset = this.vOffset;\n        this._cachedUScale = this.uScale;\n        this._cachedVScale = this.vScale;\n        this._cachedCoordinatesMode = this.coordinatesMode;\n        switch (this.coordinatesMode) {\n            case Texture.PLANAR_MODE: {\n                Matrix.IdentityToRef(this._cachedTextureMatrix);\n                this._cachedTextureMatrix[0] = this.uScale;\n                this._cachedTextureMatrix[5] = this.vScale;\n                this._cachedTextureMatrix[12] = this.uOffset;\n                this._cachedTextureMatrix[13] = this.vOffset;\n                break;\n            }\n            case Texture.PROJECTION_MODE: {\n                Matrix.FromValuesToRef(0.5, 0.0, 0.0, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 1.0, 1.0, this._projectionModeMatrix);\n                var projectionMatrix = scene.getProjectionMatrix();\n                this._cachedProjectionMatrixId = projectionMatrix.updateFlag;\n                projectionMatrix.multiplyToRef(this._projectionModeMatrix, this._cachedTextureMatrix);\n                break;\n            }\n            default:\n                Matrix.IdentityToRef(this._cachedTextureMatrix);\n                break;\n        }\n        if (flagMaterialsAsTextureDirty) {\n            // We flag the materials that are using this texture as \"texture dirty\" if the coordinatesMode has changed.\n            // Indeed, this property is used to set the value of some defines used to generate the effect (in material.isReadyForSubMesh), so we must make sure this code will be re-executed and the effect recreated if necessary\n            scene.markAllMaterialsAsDirty(1, function (mat) {\n                return mat.getActiveTextures().indexOf(_this) !== -1;\n            });\n        }\n        return this._cachedTextureMatrix;\n    };\n    /**\n     * Clones the texture.\n     * @returns the cloned texture\n     */\n    Texture.prototype.clone = function () {\n        var _this = this;\n        var options = {\n            noMipmap: this._noMipmap,\n            invertY: this._invertY,\n            samplingMode: this.samplingMode,\n            onLoad: undefined,\n            onError: undefined,\n            buffer: this._texture ? this._texture._buffer : undefined,\n            deleteBuffer: this._deleteBuffer,\n            format: this.textureFormat,\n            mimeType: this.mimeType,\n            loaderOptions: this._loaderOptions,\n            creationFlags: this._creationFlags,\n            useSRGBBuffer: this._useSRGBBuffer,\n        };\n        return SerializationHelper.Clone(function () {\n            return new Texture(_this._texture ? _this._texture.url : null, _this.getScene(), options);\n        }, this);\n    };\n    /**\n     * Serialize the texture to a JSON representation we can easily use in the respective Parse function.\n     * @returns The JSON representation of the texture\n     */\n    Texture.prototype.serialize = function () {\n        var savedName = this.name;\n        if (!Texture.SerializeBuffers) {\n            if (this.name.startsWith(\"data:\")) {\n                this.name = \"\";\n            }\n        }\n        if (this.name.startsWith(\"data:\") && this.url === this.name) {\n            this.url = \"\";\n        }\n        var serializationObject = _super.prototype.serialize.call(this);\n        if (!serializationObject) {\n            return null;\n        }\n        if (Texture.SerializeBuffers || Texture.ForceSerializeBuffers) {\n            if (typeof this._buffer === \"string\" && this._buffer.substr(0, 5) === \"data:\") {\n                serializationObject.base64String = this._buffer;\n                serializationObject.name = serializationObject.name.replace(\"data:\", \"\");\n            }\n            else if (this.url && this.url.startsWith(\"data:\") && this._buffer instanceof Uint8Array) {\n                serializationObject.base64String = \"data:image/png;base64,\" + EncodeArrayBufferToBase64(this._buffer);\n            }\n            else if (Texture.ForceSerializeBuffers || (this.url && this.url.startsWith(\"blob:\")) || this._forceSerialize) {\n                serializationObject.base64String =\n                    !this._engine || this._engine._features.supportSyncTextureRead ? GenerateBase64StringFromTexture(this) : GenerateBase64StringFromTextureAsync(this);\n            }\n        }\n        serializationObject.invertY = this._invertY;\n        serializationObject.samplingMode = this.samplingMode;\n        serializationObject._creationFlags = this._creationFlags;\n        serializationObject._useSRGBBuffer = this._useSRGBBuffer;\n        this.name = savedName;\n        return serializationObject;\n    };\n    /**\n     * Get the current class name of the texture useful for serialization or dynamic coding.\n     * @returns \"Texture\"\n     */\n    Texture.prototype.getClassName = function () {\n        return \"Texture\";\n    };\n    /**\n     * Dispose the texture and release its associated resources.\n     */\n    Texture.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.onLoadObservable.clear();\n        this._delayedOnLoad = null;\n        this._delayedOnError = null;\n    };\n    /**\n     * Parse the JSON representation of a texture in order to recreate the texture in the given scene.\n     * @param parsedTexture Define the JSON representation of the texture\n     * @param scene Define the scene the parsed texture should be instantiated in\n     * @param rootUrl Define the root url of the parsing sequence in the case of relative dependencies\n     * @returns The parsed texture if successful\n     */\n    Texture.Parse = function (parsedTexture, scene, rootUrl) {\n        if (parsedTexture.customType) {\n            var customTexture = InstantiationTools.Instantiate(parsedTexture.customType);\n            // Update Sampling Mode\n            var parsedCustomTexture = customTexture.Parse(parsedTexture, scene, rootUrl);\n            if (parsedTexture.samplingMode && parsedCustomTexture.updateSamplingMode && parsedCustomTexture._samplingMode) {\n                if (parsedCustomTexture._samplingMode !== parsedTexture.samplingMode) {\n                    parsedCustomTexture.updateSamplingMode(parsedTexture.samplingMode);\n                }\n            }\n            return parsedCustomTexture;\n        }\n        if (parsedTexture.isCube && !parsedTexture.isRenderTarget) {\n            return Texture._CubeTextureParser(parsedTexture, scene, rootUrl);\n        }\n        if (!parsedTexture.name && !parsedTexture.isRenderTarget) {\n            return null;\n        }\n        var onLoaded = function () {\n            // Clear cache\n            if (texture && texture._texture) {\n                texture._texture._cachedWrapU = null;\n                texture._texture._cachedWrapV = null;\n                texture._texture._cachedWrapR = null;\n            }\n            // Update Sampling Mode\n            if (parsedTexture.samplingMode) {\n                var sampling = parsedTexture.samplingMode;\n                if (texture && texture.samplingMode !== sampling) {\n                    texture.updateSamplingMode(sampling);\n                }\n            }\n            // Animations\n            if (texture && parsedTexture.animations) {\n                for (var animationIndex = 0; animationIndex < parsedTexture.animations.length; animationIndex++) {\n                    var parsedAnimation = parsedTexture.animations[animationIndex];\n                    var internalClass = GetClass(\"BABYLON.Animation\");\n                    if (internalClass) {\n                        texture.animations.push(internalClass.Parse(parsedAnimation));\n                    }\n                }\n            }\n        };\n        var texture = SerializationHelper.Parse(function () {\n            var _a, _b, _c;\n            var generateMipMaps = true;\n            if (parsedTexture.noMipmap) {\n                generateMipMaps = false;\n            }\n            if (parsedTexture.mirrorPlane) {\n                var mirrorTexture = Texture._CreateMirror(parsedTexture.name, parsedTexture.renderTargetSize, scene, generateMipMaps);\n                mirrorTexture._waitingRenderList = parsedTexture.renderList;\n                mirrorTexture.mirrorPlane = Plane.FromArray(parsedTexture.mirrorPlane);\n                onLoaded();\n                return mirrorTexture;\n            }\n            else if (parsedTexture.isRenderTarget) {\n                var renderTargetTexture = null;\n                if (parsedTexture.isCube) {\n                    // Search for an existing reflection probe (which contains a cube render target texture)\n                    if (scene.reflectionProbes) {\n                        for (var index = 0; index < scene.reflectionProbes.length; index++) {\n                            var probe = scene.reflectionProbes[index];\n                            if (probe.name === parsedTexture.name) {\n                                return probe.cubeTexture;\n                            }\n                        }\n                    }\n                }\n                else {\n                    renderTargetTexture = Texture._CreateRenderTargetTexture(parsedTexture.name, parsedTexture.renderTargetSize, scene, generateMipMaps, (_a = parsedTexture._creationFlags) !== null && _a !== void 0 ? _a : 0);\n                    renderTargetTexture._waitingRenderList = parsedTexture.renderList;\n                }\n                onLoaded();\n                return renderTargetTexture;\n            }\n            else {\n                var texture_1;\n                if (parsedTexture.base64String) {\n                    texture_1 = Texture.CreateFromBase64String(parsedTexture.base64String, parsedTexture.name, scene, !generateMipMaps, parsedTexture.invertY, parsedTexture.samplingMode, onLoaded, (_b = parsedTexture._creationFlags) !== null && _b !== void 0 ? _b : 0, (_c = parsedTexture._useSRGBBuffer) !== null && _c !== void 0 ? _c : false);\n                }\n                else {\n                    var url = void 0;\n                    if (parsedTexture.name && parsedTexture.name.indexOf(\"://\") > 0) {\n                        url = parsedTexture.name;\n                    }\n                    else {\n                        url = rootUrl + parsedTexture.name;\n                    }\n                    if (parsedTexture.url && (parsedTexture.url.startsWith(\"data:\") || Texture.UseSerializedUrlIfAny)) {\n                        url = parsedTexture.url;\n                    }\n                    texture_1 = new Texture(url, scene, !generateMipMaps, parsedTexture.invertY, parsedTexture.samplingMode, onLoaded);\n                }\n                return texture_1;\n            }\n        }, parsedTexture, scene);\n        return texture;\n    };\n    /**\n     * Creates a texture from its base 64 representation.\n     * @param data Define the base64 payload without the data: prefix\n     * @param name Define the name of the texture in the scene useful fo caching purpose for instance\n     * @param scene Define the scene the texture should belong to\n     * @param noMipmapOrOptions defines if the texture will require mip maps or not or set of all options to create the texture\n     * @param invertY define if the texture needs to be inverted on the y axis during loading\n     * @param samplingMode define the sampling mode we want for the texture while fetching from it (Texture.NEAREST_SAMPLINGMODE...)\n     * @param onLoad define a callback triggered when the texture has been loaded\n     * @param onError define a callback triggered when an error occurred during the loading session\n     * @param format define the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\n     * @param creationFlags specific flags to use when creating the texture (1 for storage textures, for eg)\n     * @returns the created texture\n     */\n    Texture.CreateFromBase64String = function (data, name, scene, noMipmapOrOptions, invertY, samplingMode, onLoad, onError, format, creationFlags) {\n        if (samplingMode === void 0) { samplingMode = Texture.TRILINEAR_SAMPLINGMODE; }\n        if (onLoad === void 0) { onLoad = null; }\n        if (onError === void 0) { onError = null; }\n        if (format === void 0) { format = 5; }\n        return new Texture(\"data:\" + name, scene, noMipmapOrOptions, invertY, samplingMode, onLoad, onError, data, false, format, undefined, undefined, creationFlags);\n    };\n    /**\n     * Creates a texture from its data: representation. (data: will be added in case only the payload has been passed in)\n     * @param name Define the name of the texture in the scene useful fo caching purpose for instance\n     * @param buffer define the buffer to load the texture from in case the texture is loaded from a buffer representation\n     * @param scene Define the scene the texture should belong to\n     * @param deleteBuffer define if the buffer we are loading the texture from should be deleted after load\n     * @param noMipmapOrOptions defines if the texture will require mip maps or not or set of all options to create the texture\n     * @param invertY define if the texture needs to be inverted on the y axis during loading\n     * @param samplingMode define the sampling mode we want for the texture while fetching from it (Texture.NEAREST_SAMPLINGMODE...)\n     * @param onLoad define a callback triggered when the texture has been loaded\n     * @param onError define a callback triggered when an error occurred during the loading session\n     * @param format define the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\n     * @param creationFlags specific flags to use when creating the texture (1 for storage textures, for eg)\n     * @returns the created texture\n     */\n    Texture.LoadFromDataString = function (name, buffer, scene, deleteBuffer, noMipmapOrOptions, invertY, samplingMode, onLoad, onError, format, creationFlags) {\n        if (deleteBuffer === void 0) { deleteBuffer = false; }\n        if (invertY === void 0) { invertY = true; }\n        if (samplingMode === void 0) { samplingMode = Texture.TRILINEAR_SAMPLINGMODE; }\n        if (onLoad === void 0) { onLoad = null; }\n        if (onError === void 0) { onError = null; }\n        if (format === void 0) { format = 5; }\n        if (name.substr(0, 5) !== \"data:\") {\n            name = \"data:\" + name;\n        }\n        return new Texture(name, scene, noMipmapOrOptions, invertY, samplingMode, onLoad, onError, buffer, deleteBuffer, format, undefined, undefined, creationFlags);\n    };\n    /**\n     * Gets or sets a general boolean used to indicate that textures containing direct data (buffers) must be saved as part of the serialization process\n     */\n    Texture.SerializeBuffers = true;\n    /**\n     * Gets or sets a general boolean used to indicate that texture buffers must be saved as part of the serialization process.\n     * If no buffer exists, one will be created as base64 string from the internal webgl data.\n     */\n    Texture.ForceSerializeBuffers = false;\n    /**\n     * This observable will notify when any texture had a loading error\n     */\n    Texture.OnTextureLoadErrorObservable = new Observable();\n    /**\n     * @param jsonTexture\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Texture._CubeTextureParser = function (jsonTexture, scene, rootUrl) {\n        throw _WarnImport(\"CubeTexture\");\n    };\n    /**\n     * @param name\n     * @param renderTargetSize\n     * @param scene\n     * @param generateMipMaps\n     * @hidden\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Texture._CreateMirror = function (name, renderTargetSize, scene, generateMipMaps) {\n        throw _WarnImport(\"MirrorTexture\");\n    };\n    /**\n     * @param name\n     * @param renderTargetSize\n     * @param scene\n     * @param generateMipMaps\n     * @param creationFlags\n     * @hidden\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Texture._CreateRenderTargetTexture = function (name, renderTargetSize, scene, generateMipMaps, creationFlags) {\n        throw _WarnImport(\"RenderTargetTexture\");\n    };\n    /** nearest is mag = nearest and min = nearest and mip = linear */\n    Texture.NEAREST_SAMPLINGMODE = 1;\n    /** nearest is mag = nearest and min = nearest and mip = linear */\n    Texture.NEAREST_NEAREST_MIPLINEAR = 8; // nearest is mag = nearest and min = nearest and mip = linear\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\n    Texture.BILINEAR_SAMPLINGMODE = 2;\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\n    Texture.LINEAR_LINEAR_MIPNEAREST = 11; // Bilinear is mag = linear and min = linear and mip = nearest\n    /** Trilinear is mag = linear and min = linear and mip = linear */\n    Texture.TRILINEAR_SAMPLINGMODE = 3;\n    /** Trilinear is mag = linear and min = linear and mip = linear */\n    Texture.LINEAR_LINEAR_MIPLINEAR = 3; // Trilinear is mag = linear and min = linear and mip = linear\n    /** mag = nearest and min = nearest and mip = nearest */\n    Texture.NEAREST_NEAREST_MIPNEAREST = 4;\n    /** mag = nearest and min = linear and mip = nearest */\n    Texture.NEAREST_LINEAR_MIPNEAREST = 5;\n    /** mag = nearest and min = linear and mip = linear */\n    Texture.NEAREST_LINEAR_MIPLINEAR = 6;\n    /** mag = nearest and min = linear and mip = none */\n    Texture.NEAREST_LINEAR = 7;\n    /** mag = nearest and min = nearest and mip = none */\n    Texture.NEAREST_NEAREST = 1;\n    /** mag = linear and min = nearest and mip = nearest */\n    Texture.LINEAR_NEAREST_MIPNEAREST = 9;\n    /** mag = linear and min = nearest and mip = linear */\n    Texture.LINEAR_NEAREST_MIPLINEAR = 10;\n    /** mag = linear and min = linear and mip = none */\n    Texture.LINEAR_LINEAR = 2;\n    /** mag = linear and min = nearest and mip = none */\n    Texture.LINEAR_NEAREST = 12;\n    /** Explicit coordinates mode */\n    Texture.EXPLICIT_MODE = 0;\n    /** Spherical coordinates mode */\n    Texture.SPHERICAL_MODE = 1;\n    /** Planar coordinates mode */\n    Texture.PLANAR_MODE = 2;\n    /** Cubic coordinates mode */\n    Texture.CUBIC_MODE = 3;\n    /** Projection coordinates mode */\n    Texture.PROJECTION_MODE = 4;\n    /** Inverse Cubic coordinates mode */\n    Texture.SKYBOX_MODE = 5;\n    /** Inverse Cubic coordinates mode */\n    Texture.INVCUBIC_MODE = 6;\n    /** Equirectangular coordinates mode */\n    Texture.EQUIRECTANGULAR_MODE = 7;\n    /** Equirectangular Fixed coordinates mode */\n    Texture.FIXED_EQUIRECTANGULAR_MODE = 8;\n    /** Equirectangular Fixed Mirrored coordinates mode */\n    Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE = 9;\n    /** Texture is not repeating outside of 0..1 UVs */\n    Texture.CLAMP_ADDRESSMODE = 0;\n    /** Texture is repeating outside of 0..1 UVs */\n    Texture.WRAP_ADDRESSMODE = 1;\n    /** Texture is repeating and mirrored */\n    Texture.MIRROR_ADDRESSMODE = 2;\n    /**\n     * Gets or sets a boolean which defines if the texture url must be build from the serialized URL instead of just using the name and loading them side by side with the scene file\n     */\n    Texture.UseSerializedUrlIfAny = false;\n    __decorate([\n        serialize()\n    ], Texture.prototype, \"url\", void 0);\n    __decorate([\n        serialize()\n    ], Texture.prototype, \"uOffset\", void 0);\n    __decorate([\n        serialize()\n    ], Texture.prototype, \"vOffset\", void 0);\n    __decorate([\n        serialize()\n    ], Texture.prototype, \"uScale\", void 0);\n    __decorate([\n        serialize()\n    ], Texture.prototype, \"vScale\", void 0);\n    __decorate([\n        serialize()\n    ], Texture.prototype, \"uAng\", void 0);\n    __decorate([\n        serialize()\n    ], Texture.prototype, \"vAng\", void 0);\n    __decorate([\n        serialize()\n    ], Texture.prototype, \"wAng\", void 0);\n    __decorate([\n        serialize()\n    ], Texture.prototype, \"uRotationCenter\", void 0);\n    __decorate([\n        serialize()\n    ], Texture.prototype, \"vRotationCenter\", void 0);\n    __decorate([\n        serialize()\n    ], Texture.prototype, \"wRotationCenter\", void 0);\n    __decorate([\n        serialize()\n    ], Texture.prototype, \"homogeneousRotationInUVTransform\", void 0);\n    __decorate([\n        serialize()\n    ], Texture.prototype, \"isBlocking\", null);\n    return Texture;\n}(BaseTexture));\nexport { Texture };\n// References the dependencies.\nRegisterClass(\"BABYLON.Texture\", Texture);\nSerializationHelper._TextureParser = Texture.Parse;\n//# sourceMappingURL=texture.js.map","\n/**\n * Class used to store a texture sampler data\n */\nvar TextureSampler = /** @class */ (function () {\n    /**\n     * Creates a Sampler instance\n     */\n    function TextureSampler() {\n        /**\n         * Gets the sampling mode of the texture\n         */\n        this.samplingMode = -1;\n        this._useMipMaps = true;\n        /** @hidden */\n        this._cachedWrapU = null;\n        /** @hidden */\n        this._cachedWrapV = null;\n        /** @hidden */\n        this._cachedWrapR = null;\n        /** @hidden */\n        this._cachedAnisotropicFilteringLevel = null;\n        /** @hidden */\n        this._comparisonFunction = 0;\n    }\n    Object.defineProperty(TextureSampler.prototype, \"wrapU\", {\n        /**\n         * | Value | Type               | Description |\n         * | ----- | ------------------ | ----------- |\n         * | 0     | CLAMP_ADDRESSMODE  |             |\n         * | 1     | WRAP_ADDRESSMODE   |             |\n         * | 2     | MIRROR_ADDRESSMODE |             |\n         */\n        get: function () {\n            return this._cachedWrapU;\n        },\n        set: function (value) {\n            this._cachedWrapU = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextureSampler.prototype, \"wrapV\", {\n        /**\n         * | Value | Type               | Description |\n         * | ----- | ------------------ | ----------- |\n         * | 0     | CLAMP_ADDRESSMODE  |             |\n         * | 1     | WRAP_ADDRESSMODE   |             |\n         * | 2     | MIRROR_ADDRESSMODE |             |\n         */\n        get: function () {\n            return this._cachedWrapV;\n        },\n        set: function (value) {\n            this._cachedWrapV = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextureSampler.prototype, \"wrapR\", {\n        /**\n         * | Value | Type               | Description |\n         * | ----- | ------------------ | ----------- |\n         * | 0     | CLAMP_ADDRESSMODE  |             |\n         * | 1     | WRAP_ADDRESSMODE   |             |\n         * | 2     | MIRROR_ADDRESSMODE |             |\n         */\n        get: function () {\n            return this._cachedWrapR;\n        },\n        set: function (value) {\n            this._cachedWrapR = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextureSampler.prototype, \"anisotropicFilteringLevel\", {\n        /**\n         * With compliant hardware and browser (supporting anisotropic filtering)\n         * this defines the level of anisotropic filtering in the texture.\n         * The higher the better but the slower.\n         */\n        get: function () {\n            return this._cachedAnisotropicFilteringLevel;\n        },\n        set: function (value) {\n            this._cachedAnisotropicFilteringLevel = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextureSampler.prototype, \"comparisonFunction\", {\n        /**\n         * Gets or sets the comparison function (513, 514, etc). Set 0 to not use a comparison function\n         */\n        get: function () {\n            return this._comparisonFunction;\n        },\n        set: function (value) {\n            this._comparisonFunction = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextureSampler.prototype, \"useMipMaps\", {\n        /**\n         * Indicates to use the mip maps (if available on the texture).\n         * Thanks to this flag, you can instruct the sampler to not sample the mipmaps even if they exist (and if the sampling mode is set to a value that normally samples the mipmaps!)\n         */\n        get: function () {\n            return this._useMipMaps;\n        },\n        set: function (value) {\n            this._useMipMaps = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Sets all the parameters of the sampler\n     * @param wrapU u address mode (default: TEXTURE_WRAP_ADDRESSMODE)\n     * @param wrapV v address mode (default: TEXTURE_WRAP_ADDRESSMODE)\n     * @param wrapR r address mode (default: TEXTURE_WRAP_ADDRESSMODE)\n     * @param anisotropicFilteringLevel anisotropic level (default: 1)\n     * @param samplingMode sampling mode (default: 2)\n     * @param comparisonFunction comparison function (default: 0 - no comparison function)\n     * @returns the current sampler instance\n     */\n    TextureSampler.prototype.setParameters = function (wrapU, wrapV, wrapR, anisotropicFilteringLevel, samplingMode, comparisonFunction) {\n        if (wrapU === void 0) { wrapU = 1; }\n        if (wrapV === void 0) { wrapV = 1; }\n        if (wrapR === void 0) { wrapR = 1; }\n        if (anisotropicFilteringLevel === void 0) { anisotropicFilteringLevel = 1; }\n        if (samplingMode === void 0) { samplingMode = 2; }\n        if (comparisonFunction === void 0) { comparisonFunction = 0; }\n        this._cachedWrapU = wrapU;\n        this._cachedWrapV = wrapV;\n        this._cachedWrapR = wrapR;\n        this._cachedAnisotropicFilteringLevel = anisotropicFilteringLevel;\n        this.samplingMode = samplingMode;\n        this._comparisonFunction = comparisonFunction;\n        return this;\n    };\n    /**\n     * Compares this sampler with another one\n     * @param other sampler to compare with\n     * @returns true if the samplers have the same parametres, else false\n     */\n    TextureSampler.prototype.compareSampler = function (other) {\n        return (this._cachedWrapU === other._cachedWrapU &&\n            this._cachedWrapV === other._cachedWrapV &&\n            this._cachedWrapR === other._cachedWrapR &&\n            this._cachedAnisotropicFilteringLevel === other._cachedAnisotropicFilteringLevel &&\n            this.samplingMode === other.samplingMode &&\n            this._comparisonFunction === other._comparisonFunction &&\n            this._useMipMaps === other._useMipMaps);\n    };\n    return TextureSampler;\n}());\nexport { TextureSampler };\n//# sourceMappingURL=textureSampler.js.map"],"names":["PBRBaseSimpleMaterial","_super","name","scene","_this","call","this","maxSimultaneousLights","disableLighting","invertNormalMapX","invertNormalMapY","emissiveColor","occlusionStrength","useLightmapAsShadowmap","_useAlphaFromAlbedoTexture","_useAmbientInGrayScale","Object","defineProperty","prototype","get","_twoSidedLighting","set","value","backFaceCulling","_markAllSubMeshesAsTexturesDirty","enumerable","configurable","getClassName","PBRMetallicRoughnessMaterial","_useRoughnessFromMetallicTextureAlpha","_useRoughnessFromMetallicTextureGreen","_useMetallnessFromMetallicTextureBlue","metallic","roughness","clone","getScene","id","clearCoat","copyTo","anisotropy","brdf","sheen","subSurface","serialize","serializationObject","customType","iridescence","Parse","source","rootUrl","material","parse","PBRSpecularGlossinessMaterial","_useMicroSurfaceFromReflectivityMapAlpha","MaterialAnisotropicDefines","apply","arguments","ANISOTROPIC","ANISOTROPIC_TEXTURE","ANISOTROPIC_TEXTUREDIRECTUV","MAINUV1","PBRAnisotropicConfiguration","addToPluginList","_isEnabled","isEnabled","intensity","direction","_texture","texture","_internalMarkAllSubMeshesAsTexturesDirty","_dirtyCallbacks","_enable","isReadyForSubMesh","defines","_areTexturesDirty","texturesEnabled","isReadyOrNotBlocking","prepareDefinesBeforeAttributes","mesh","isVerticesDataPresent","_needUVs","bindForSubMesh","uniformBuffer","isFrozen","_material","useUbo","isSync","updateFloat2","coordinatesIndex","level","updateFloat3","x","y","setTexture","hasTexture","getActiveTextures","activeTextures","push","getAnimatables","animatables","animations","length","dispose","forceDisposeTextures","addFallbacks","fallbacks","currentRank","addFallback","getSamplers","samplers","getUniforms","ubo","size","type","MaterialBRDFDefines","BRDF_V_HEIGHT_CORRELATED","MS_BRDF_ENERGY_CONSERVATION","SPHERICAL_HARMONICS","SPECULAR_GLOSSINESS_ENERGY_CONSERVATION","PBRBRDFConfiguration","_useEnergyConservation","DEFAULT_USE_ENERGY_CONSERVATION","useEnergyConservation","_useSmithVisibilityHeightCorrelated","DEFAULT_USE_SMITH_VISIBILITY_HEIGHT_CORRELATED","useSmithVisibilityHeightCorrelated","_useSphericalHarmonics","DEFAULT_USE_SPHERICAL_HARMONICS","useSphericalHarmonics","_useSpecularGlossinessInputEnergyConservation","DEFAULT_USE_SPECULAR_GLOSSINESS_INPUT_ENERGY_CONSERVATION","useSpecularGlossinessInputEnergyConservation","_internalMarkAllSubMeshesAsMiscDirty","_markAllSubMeshesAsMiscDirty","prepareDefines","onCreatedEffectParameters","effect","subMesh","PBRMaterialDefines","externalProperties","PBR","NUM_SAMPLES","REALTIME_FILTERING","MAINUV2","MAINUV3","MAINUV4","MAINUV5","MAINUV6","UV1","UV2","UV3","UV4","UV5","UV6","ALBEDO","GAMMAALBEDO","ALBEDODIRECTUV","VERTEXCOLOR","BAKED_VERTEX_ANIMATION_TEXTURE","AMBIENT","AMBIENTDIRECTUV","AMBIENTINGRAYSCALE","OPACITY","VERTEXALPHA","OPACITYDIRECTUV","OPACITYRGB","ALPHATEST","DEPTHPREPASS","ALPHABLEND","ALPHAFROMALBEDO","ALPHATESTVALUE","SPECULAROVERALPHA","RADIANCEOVERALPHA","ALPHAFRESNEL","LINEARALPHAFRESNEL","PREMULTIPLYALPHA","EMISSIVE","EMISSIVEDIRECTUV","GAMMAEMISSIVE","REFLECTIVITY","REFLECTIVITY_GAMMA","REFLECTIVITYDIRECTUV","SPECULARTERM","MICROSURFACEFROMREFLECTIVITYMAP","MICROSURFACEAUTOMATIC","LODBASEDMICROSFURACE","MICROSURFACEMAP","MICROSURFACEMAPDIRECTUV","METALLICWORKFLOW","ROUGHNESSSTOREINMETALMAPALPHA","ROUGHNESSSTOREINMETALMAPGREEN","METALLNESSSTOREINMETALMAPBLUE","AOSTOREINMETALMAPRED","METALLIC_REFLECTANCE","METALLIC_REFLECTANCE_GAMMA","METALLIC_REFLECTANCEDIRECTUV","METALLIC_REFLECTANCE_USE_ALPHA_ONLY","REFLECTANCE","REFLECTANCE_GAMMA","REFLECTANCEDIRECTUV","ENVIRONMENTBRDF","ENVIRONMENTBRDF_RGBD","NORMAL","TANGENT","BUMP","BUMPDIRECTUV","OBJECTSPACE_NORMALMAP","PARALLAX","PARALLAXOCCLUSION","NORMALXYSCALE","LIGHTMAP","LIGHTMAPDIRECTUV","USELIGHTMAPASSHADOWMAP","GAMMALIGHTMAP","RGBDLIGHTMAP","REFLECTION","REFLECTIONMAP_3D","REFLECTIONMAP_SPHERICAL","REFLECTIONMAP_PLANAR","REFLECTIONMAP_CUBIC","USE_LOCAL_REFLECTIONMAP_CUBIC","REFLECTIONMAP_PROJECTION","REFLECTIONMAP_SKYBOX","REFLECTIONMAP_EXPLICIT","REFLECTIONMAP_EQUIRECTANGULAR","REFLECTIONMAP_EQUIRECTANGULAR_FIXED","REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED","INVERTCUBICMAP","USESPHERICALFROMREFLECTIONMAP","USEIRRADIANCEMAP","USESPHERICALINVERTEX","REFLECTIONMAP_OPPOSITEZ","LODINREFLECTIONALPHA","GAMMAREFLECTION","RGBDREFLECTION","LINEARSPECULARREFLECTION","RADIANCEOCCLUSION","HORIZONOCCLUSION","INSTANCES","THIN_INSTANCES","INSTANCESCOLOR","PREPASS","PREPASS_IRRADIANCE","PREPASS_IRRADIANCE_INDEX","PREPASS_ALBEDO_SQRT","PREPASS_ALBEDO_SQRT_INDEX","PREPASS_DEPTH","PREPASS_DEPTH_INDEX","PREPASS_NORMAL","PREPASS_NORMAL_INDEX","PREPASS_POSITION","PREPASS_POSITION_INDEX","PREPASS_VELOCITY","PREPASS_VELOCITY_INDEX","PREPASS_REFLECTIVITY","PREPASS_REFLECTIVITY_INDEX","SCENE_MRT_COUNT","NUM_BONE_INFLUENCERS","BonesPerMesh","BONETEXTURE","BONES_VELOCITY_ENABLED","NONUNIFORMSCALING","MORPHTARGETS","MORPHTARGETS_NORMAL","MORPHTARGETS_TANGENT","MORPHTARGETS_UV","NUM_MORPH_INFLUENCERS","MORPHTARGETS_TEXTURE","IMAGEPROCESSING","VIGNETTE","VIGNETTEBLENDMODEMULTIPLY","VIGNETTEBLENDMODEOPAQUE","TONEMAPPING","TONEMAPPING_ACES","CONTRAST","COLORCURVES","COLORGRADING","COLORGRADING3D","SAMPLER3DGREENDEPTH","SAMPLER3DBGRMAP","IMAGEPROCESSINGPOSTPROCESS","SKIPFINALCOLORCLAMP","EXPOSURE","MULTIVIEW","ORDER_INDEPENDENT_TRANSPARENCY","ORDER_INDEPENDENT_TRANSPARENCY_16BITS","USEPHYSICALLIGHTFALLOFF","USEGLTFLIGHTFALLOFF","TWOSIDEDLIGHTING","SHADOWFLOAT","CLIPPLANE","CLIPPLANE2","CLIPPLANE3","CLIPPLANE4","CLIPPLANE5","CLIPPLANE6","POINTSIZE","FOG","LOGARITHMICDEPTH","FORCENORMALFORWARD","SPECULARAA","UNLIT","DEBUGMODE","rebuild","reset","PBRBaseMaterial","_directIntensity","_emissiveIntensity","_environmentIntensity","_specularIntensity","_lightingInfos","_disableBumpMap","_albedoTexture","_ambientTexture","_ambientTextureStrength","_ambientTextureImpactOnAnalyticalLights","DEFAULT_AO_ON_ANALYTICAL_LIGHTS","_opacityTexture","_reflectionTexture","_emissiveTexture","_reflectivityTexture","_metallicTexture","_metallic","_roughness","_metallicF0Factor","_metallicReflectanceColor","_useOnlyMetallicFromMetallicReflectanceTexture","_metallicReflectanceTexture","_reflectanceTexture","_microSurfaceTexture","_bumpTexture","_lightmapTexture","_ambientColor","_albedoColor","_reflectivityColor","_reflectionColor","_emissiveColor","_microSurface","_useLightmapAsShadowmap","_useHorizonOcclusion","_useRadianceOcclusion","_useSpecularOverAlpha","_useAmbientOcclusionFromMetallicTextureRed","_useAutoMicroSurfaceFromReflectivityMap","_lightFalloff","LIGHTFALLOFF_PHYSICAL","_useRadianceOverAlpha","_useObjectSpaceNormalMap","_useParallax","_useParallaxOcclusion","_parallaxScaleBias","_disableLighting","_maxSimultaneousLights","_invertNormalMapX","_invertNormalMapY","_alphaCutOff","_forceAlphaTest","_useAlphaFresnel","_useLinearAlphaFresnel","_environmentBRDFTexture","_forceIrradianceInFragment","_realTimeFiltering","_realTimeFilteringQuality","_forceNormalForward","_enableSpecularAntiAliasing","_imageProcessingObserver","_renderTargets","_globalAmbientColor","_useLogarithmicDepth","_unlit","_debugMode","debugMode","_debugLimit","_debugFactor","_cacheHasRenderTargetTextures","detailMap","_attachImageProcessingConfiguration","getRenderTargetTextures","isRenderTarget","_eventInfo","renderTargets","_callbackPluginEventFillRenderTargetTextures","prePassConfiguration","b","markAsDirty","n","configuration","_imageProcessingConfiguration","onUpdateParameters","remove","imageProcessingConfiguration","add","_markAllSubMeshesAsImageProcessingDirty","disableDepthWrite","getEngine","getCaps","fragmentDepthSupported","_a","_transparencyMode","PBRMATERIAL_OPAQUE","PBRMATERIAL_ALPHATEST","disableAlphaBlending","needAlphaBlending","_disableAlphaBlending","alpha","_shouldUseAlphaFromAlbedoTexture","needAlphaTesting","_hasAlphaChannel","hasAlpha","getAlphaTestTexture","useInstances","_uniformBufferLayoutBuilt","buildUniformLayout","_wasPreviouslyReady","materialDefines","_callbackPluginEventGeneric","defineNames","_isReadyForSubMesh","engine","hasRenderTargetTextures","_callbackPluginEventHasRenderTargetTextures","reflectionTexture","_getReflectionTexture","irradianceTexture","standardDerivatives","isReady","_callbackPluginEventIsReadyForSubMesh","_areImageProcessingDirty","createNormals","previousEffect","lightDisposed","_areLightsDisposed","_prepareEffect","onCompiled","onError","getRenderingMesh","hasThinInstances","_onEffectCreatedObservable","notifyObservers","allowShaderHotSwapping","markAsUnprocessed","resetCachedMaterial","setEffect","_materialContext","_renderId","getRenderId","isMetallicWorkflow","useClipPlane","useThinInstances","_prepareDefines","isDirty","markAsProcessed","fallbackRank","attribs","i","concat","shaderName","uniforms","uniformBuffers","attributes","uniformBuffersNames","customCode","undefined","uniformsNames","csnrOptions","customShaderNameResolve","join","toString","createEffect","indexParameters","maxSimultaneousMorphTargets","processFinalCode","processCodeAfterIncludes","multiTarget","_needNormals","oit","needAlphaBlendingForMesh","useOrderIndependentTransparency","canRenderToMRT","textureLOD","gammaSpace","getAlphaFromRGB","isRGBD","lodLevelInAlpha","linearSpecularLOD","realTimeFiltering","realTimeFilteringQuality","_features","needTypeSuffixInShaderConstants","coordinatesMode","isCube","useRightHandedSystem","invertZ","boundingBoxSize","maxVaryingVectors","identicalTextures","checkTransformsAreIdentical","LIGHTFALLOFF_STANDARD","LIGHTFALLOFF_GLTF","_areMiscDirty","alphaMode","pointsCloud","fogEnabled","_shouldTurnAlphaTestOn","wireframe","_callbackPluginEventPrepareDefinesBeforeAttributes","_callbackPluginEventPrepareDefines","forceCompilation","options","localOptions","clipPlane","onCompileObservable","_uniformBuffer","addUniform","world","_b","_c","_d","_activeEffect","getMeshUniformBuffer","bindToEffect","transferToEffect","_callbackPluginEventHardBindForSubMesh","toNormalMatrix","_normalMatrix","bindOnlyNormalMatrix","mustRebind","_mustRebind","visibility","bindViewProjection","updateFloat4","updateMatrix","getReflectionTextureMatrix","cubeTexture","updateVector3","boundingBoxPosition","width","getSize","polynomials","sphericalPolynomial","preScaledHarmonics","l00","l1_1","l10","l11","l2_2","l2_1","l20","l21","l22","z","xx","zz","yy","xy","yz","zx","lodGenerationScale","lodGenerationOffset","_mirroredCameraPosition","updateFloat","pointSize","updateColor4","ior","_indexOfRefraction","f0","Math","pow","scaleToRef","metallicF90","updateColor3","SS_REFRACTION","_linkRefractionWithTransparency","environmentIntensity","w","updateVector4","ambientColor","multiplyToRef","_lodTextureMid","_lodTextureLow","_lodTextureHigh","depthPeelingRenderer","bind","_callbackPluginEventBindForSubMesh","bindEyePosition","needToAlwaysBindUniformBuffers","_needToBindSceneUbo","lightsEnabled","applyFog","fogMode","receiveShadows","bindView","bakedVertexAnimationManager","_afterBind","update","results","environmentTexture","setPrePassRenderer","isScatteringEnabled","subSurfaceConfiguration","enableSubSurfaceForPrePass","enabled","forceDisposeEffect","_e","_f","_g","_h","_j","_k","_l","_m","environmentBRDFTexture","PBRMATERIAL_ALPHABLEND","PBRMATERIAL_ALPHATESTANDBLEND","MaterialClearCoatDefines","CLEARCOAT","CLEARCOAT_DEFAULTIOR","CLEARCOAT_TEXTURE","CLEARCOAT_TEXTURE_ROUGHNESS","CLEARCOAT_TEXTUREDIRECTUV","CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV","CLEARCOAT_BUMP","CLEARCOAT_BUMPDIRECTUV","CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE","CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL","CLEARCOAT_REMAP_F0","CLEARCOAT_TINT","CLEARCOAT_TINT_TEXTURE","CLEARCOAT_TINT_TEXTUREDIRECTUV","CLEARCOAT_TINT_GAMMATEXTURE","PBRClearCoatConfiguration","_DefaultIndexOfRefraction","indexOfRefraction","_useRoughnessFromMainTexture","useRoughnessFromMainTexture","_textureRoughness","textureRoughness","_remapF0OnInterfaceChange","remapF0OnInterfaceChange","bumpTexture","_isTintEnabled","isTintEnabled","tintColor","tintColorAtDistance","tintThickness","_tintTexture","tintTexture","disableBumpMap","a","eta","r","g","max","MaterialIridescenceDefines","IRIDESCENCE","IRIDESCENCE_TEXTURE","IRIDESCENCE_TEXTUREDIRECTUV","IRIDESCENCE_THICKNESS_TEXTURE","IRIDESCENCE_THICKNESS_TEXTUREDIRECTUV","IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE","PBRIridescenceConfiguration","minimumThickness","_DefaultMinimumThickness","maximumThickness","_DefaultMaximumThickness","_thicknessTexture","thicknessTexture","PBRMaterial","directIntensity","emissiveIntensity","specularIntensity","ambientTextureStrength","ambientTextureImpactOnAnalyticalLights","metallicF0Factor","metallicReflectanceColor","useOnlyMetallicFromMetallicReflectanceTexture","albedoColor","reflectivityColor","reflectionColor","microSurface","useAlphaFromAlbedoTexture","forceAlphaTest","alphaCutOff","useSpecularOverAlpha","useMicroSurfaceFromReflectivityMapAlpha","useRoughnessFromMetallicTextureAlpha","useRoughnessFromMetallicTextureGreen","useMetallnessFromMetallicTextureBlue","useAmbientOcclusionFromMetallicTextureRed","useAmbientInGrayScale","useAutoMicroSurfaceFromReflectivityMap","useRadianceOverAlpha","useObjectSpaceNormalMap","useParallax","useParallaxOcclusion","parallaxScaleBias","forceIrradianceInFragment","twoSidedLighting","useAlphaFresnel","useLinearAlphaFresnel","forceNormalForward","enableSpecularAntiAliasing","useHorizonOcclusion","useRadianceOcclusion","unlit","refractionTexture","isRefractionEnabled","linkRefractionWithTransparency","invertRefractionY","usePhysicalLightFalloff","useGLTFLightFalloff","colorCurvesEnabled","colorGradingEnabled","toneMappingEnabled","exposure","contrast","colorGradingTexture","colorCurves","stencil","MaterialSheenDefines","SHEEN","SHEEN_TEXTURE","SHEEN_GAMMATEXTURE","SHEEN_TEXTURE_ROUGHNESS","SHEEN_TEXTUREDIRECTUV","SHEEN_TEXTURE_ROUGHNESSDIRECTUV","SHEEN_LINKWITHALBEDO","SHEEN_ROUGHNESS","SHEEN_ALBEDOSCALING","SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE","SHEEN_TEXTURE_ROUGHNESS_IDENTICAL","PBRSheenConfiguration","_linkSheenWithAlbedo","linkSheenWithAlbedo","color","_albedoScaling","albedoScaling","MaterialSubSurfaceDefines","SUBSURFACE","SS_REFRACTION_USE_INTENSITY_FROM_TEXTURE","SS_TRANSLUCENCY","SS_TRANSLUCENCY_USE_INTENSITY_FROM_TEXTURE","SS_SCATTERING","SS_THICKNESSANDMASK_TEXTURE","SS_THICKNESSANDMASK_TEXTUREDIRECTUV","SS_HAS_THICKNESS","SS_REFRACTIONINTENSITY_TEXTURE","SS_REFRACTIONINTENSITY_TEXTUREDIRECTUV","SS_TRANSLUCENCYINTENSITY_TEXTURE","SS_TRANSLUCENCYINTENSITY_TEXTUREDIRECTUV","SS_REFRACTIONMAP_3D","SS_REFRACTIONMAP_OPPOSITEZ","SS_LODINREFRACTIONALPHA","SS_GAMMAREFRACTION","SS_RGBDREFRACTION","SS_LINEARSPECULARREFRACTION","SS_LINKREFRACTIONTOTRANSPARENCY","SS_ALBEDOFORREFRACTIONTINT","SS_ALBEDOFORTRANSLUCENCYTINT","SS_USE_LOCAL_REFRACTIONMAP_CUBIC","SS_USE_THICKNESS_AS_DEPTH","SS_MASK_FROM_THICKNESS_TEXTURE","SS_USE_GLTF_TEXTURES","PBRSubSurfaceConfiguration","_isRefractionEnabled","_isTranslucencyEnabled","isTranslucencyEnabled","_isScatteringEnabled","_scatteringDiffusionProfileIndex","refractionIntensity","translucencyIntensity","useAlbedoToTintRefraction","useAlbedoToTintTranslucency","_refractionTexture","_volumeIndexOfRefraction","_invertRefractionY","useThicknessAsDepth","diffusionDistance","_useMaskFromThicknessTexture","useMaskFromThicknessTexture","_refractionIntensityTexture","refractionIntensityTexture","_translucencyIntensityTexture","translucencyIntensityTexture","_useGltfStyleTextures","useGltfStyleTextures","_scene","registerForExtraEvents","_internalMarkScenePrePassDirty","ssDiffusionProfileColors","c","addDiffusionProfile","_markScenePrePassDirty","_getRefractionTexture","refractionIntensityTextureIsThicknessTexture","translucencyIntensityTextureIsThicknessTexture","useOnlyThicknessTexture","hardBindForSubMesh","getWorldMatrix","decompose","thicknessScale","abs","lodBasedMicrosurface","depth","refractionIor","volumeIndexOfRefraction","fillRenderTargetTextures","HDRFiltering","_lodGenerationOffset","_lodGenerationScale","quality","hdrScale","_engine","_createRenderTarget","textureType","textureHalfFloatRender","textureFloatRender","rtWrapper","createRenderTargetCubeTexture","format","createMipMaps","generateMipMaps","generateDepthBuffer","generateStencilBuffer","samplingMode","updateTextureWrappingMode","updateTextureSamplingMode","_prefilterInternal","mipmapsCount","_effectWrapper","outputTexture","_effectRenderer","setViewport","intTexture","getInternalTexture","applyEffectWrapper","directions","setFloat","setFloat2","face","setVector3","lod","bindFramebuffer","draw","restoreStates","restoreDefaultFramebuffer","_releaseTexture","_swapAndDie","_prefiltered","_createEffect","vertexShader","fragmentShader","samplerNames","uniformNames","useShaderStore","prefilter","onFinished","allowTexturePrefiltering","Promise","resolve","executeWhenCompiled","reject","_DDSTextureLoader","supportCascades","canLoad","extension","endsWith","loadCubeData","imgs","createPolynomials","onLoad","info","loadMipmap","maxLevel","Array","isArray","index","data","height","isRGB","isLuminance","mipmapCount","_unpackFlipY","isCompressed","isFourCC","generateMipMapsForCubemap","_setCubeMapTextureParams","onLoadedObservable","clear","isDDS","loadData","callback","_ENVTextureLoader","then","reason","e","_KTXTextureLoader","mimeType","_invertVScale","invertY","ktx","numberOfMipmapLevels","uploadLevels","pixelWidth","pixelHeight","ktx_1","mappedFormat","mapSRGBToLinear","glInternalFormat","_useSRGBBuffer","_getUseSRGBBuffer","_gammaSpace","isInvalid","uploadAsync","error","message","MultiviewRenderTarget","_renderTarget","createMultiviewRenderTargetTexture","getRenderWidth","getRenderHeight","isMultiview","samples","_getEngine","maxSamples","_samples","_bindFrameBuffer","bindMultiviewFramebuffer","getViewCount","ProceduralTexture","fragment","fallbackTexture","autoClear","onGeneratedObservable","onBeforeGenerationObservable","nodeMaterialSource","_textures","_currentRefreshId","_frameId","_refreshRate","_vertexBuffers","_uniforms","_samplers","_floats","_ints","_floatsArrays","_colors3","_colors4","_vectors2","_vectors3","_matrices","_fallbackTextureUsed","_cachedDefines","_contentUpdateId","_rtWrapper","component","_getComponent","_addComponent","proceduralTextures","_fullEngine","_size","_textureType","_generateMipMaps","_drawWrapper","setFragment","_fallbackTexture","_createRtWrapper","vertices","_createIndexBuffer","createRenderTargetTexture","getEffect","_setEffect","getContent","_contentData","buffer","readPixels","indices","_indexBuffer","createIndexBuffer","_rebuild","vb","refreshRate","_getDefines","shaders","_fragment","fragmentElement","vertex","incrementReferences","resetRefreshCounter","_shouldRender","getRenderSize","resize","_checkUniform","uniformName","indexOf","setInt","setFloats","setColor3","setColor4","setVector2","setMatrix","render","useCameraPostProcess","enableEffect","setState","name_1","name_2","name_3","name_4","setArray","name_5","name_6","setFloat4","name_7","name_8","name_9","_debugPushGroup","bindBuffers","clearColor","drawElementsType","unBindFramebuffer","_debugPopGroup","onGenerated","textureSize","newTexture","splice","vertexBuffer","_releaseBuffer","ProceduralTextureSceneComponent","register","_beforeClearStage","registerStep","_beforeClear","proceduralTexturesEnabled","proceduralIndex","proceduralTexture","BaseTexture","sceneOrEngine","metadata","reservedDataStore","_hasAlpha","_getAlphaFromRGB","_coordinatesIndex","_coordinatesMode","wrapR","anisotropicFilteringLevel","DEFAULT_ANISOTROPIC_FILTERING_LEVEL","_isCube","_forceSerialize","onDisposeObservable","_onDisposeObserver","_uid","_parentContainer","_loadingError","_IsScene","uniqueId","getUniqueId","addTexture","markAllMaterialsAsDirty","mat","_wrapU","_wrapV","is3D","is2DArray","gamma","_isRGBD","_linearSpecularLOD","_irradianceTexture","_errorObject","getTextureMatrix","isBlocking","loadingError","scale","ratio","_getFromCache","url","noMipmap","sampling","useSRGBBuffer","correctedUseSRGBBuffer","texturesCache","getLoadedTexturesCache","texturesCacheEntry","faceIndex","flushRenderer","noDataConversion","Number","MAX_VALUE","maxWidth","maxHeight","round","min","_readTexturePixels","_readPixelsSync","_readTexturePixelsSync","stopAnimation","_removePendingData","textures","onTextureRemovedObservable","index_1","WhenAllReady","numRemaining","onLoadObservable","addOnce","_sphericalPolynomial","_sphericalPolynomialPromise","_sphericalPolynomialComputed","CubeTexture","extensions","files","prefiltered","forcedExtension","lodScale","lodOffset","loaderOptions","_lodScale","_lodOffset","_rotationY","_files","_forcedExtension","_extensions","_noMipmap","_format","_textureMatrix","_createPolynomials","_loaderOptions","updateURL","useDelayedTextureLoading","_boundingBoxSize","equals","setReflectionTextureMatrix","CreateFromImages","rootUrlKey","forEach","CreateFromPrefilteredData","oldValue","result","delayLoad","startsWith","lastDot","lastIndexOf","substring","toLowerCase","isEnv","delayLoadState","_delayedOnLoad","_delayedOnError","_loadTexture","updateFlag","isIdentity","oldTexture","onLoadProcessing","errorHandler","exception","createPrefilteredCubeTexture","createCubeTexture","parsedTexture","animationIndex","parsedAnimation","internalClass","newCubeTexture","DynamicTexture","wrapU","wrapV","getContext","_canvas","createDynamicTexture","createCanvas","_context","_recreate","releaseInternalTexture","scaleTo","fillRect","premulAlpha","allowGPUOptimization","updateDynamicTexture","drawText","text","font","fillStyle","textSize","measureText","fontSize","parseInt","replace","fillText","_IsCanvasElement","base64String","toDataURL","_invertY","canvas","EquiRectangularCubeTexture","_onLoad","_onError","Error","_loadImage","loadTextureCallback","document","createElement","image","_width","_height","ctx","drawImage","imageData","getImageData","_buffer","_","createRawCubeTextureFromUrl","textureFloat","_getFloat32ArrayFromArrayBuffer","dataFace","_FacesMapping","dataView","DataView","floatImageData","Float32Array","byteLength","k","getUint8","ExternalTexture","video","useMipMaps","_video","IsExternalTexture","underlyingResource","readyState","HAVE_CURRENT_DATA","HDRCubeTexture","generateHarmonics","prefilterOnLoad","_generateHarmonics","_isBlocking","_prefilterOnLoad","caps","textureFloatLinearFiltering","textureHalfFloat","textureHalfFloatLinearFiltering","previousOnLoad_1","hdrFiltering_1","byteArray","shortArray","j","Uint16Array","Uint8Array","useInGammaSpace","rotationY","ColorGradingTexture","_triggerOnLoad","_load3dlTexture","support3DTextures","createRawTexture3D","createRawTexture","line","tempData","lines","split","pixelIndexW","pixelIndexH","pixelIndexSlice","maxColor","_NoneEmptyLineRegex","test","words","pixelStorageIndex","updateSize","updateRawTexture3D","updateRawTexture","_loadFile","toLocaleLowerCase","HtmlElementTexture","element","_DefaultOptions","_samplingMode","_isVideo","HTMLVideoElement","_createInternalTexture","videoWidth","videoHeight","wasReady","videoElement","updateVideoTexture","canvasElement","_TGATextureLoader","bytes","byteOffset","header","_HDRTextureLoader","uint8array","hdrInfo","pixelsDataRGB32","pixels","pixelsDataRGBA32","_uploadDataToTextureDirectly","_BasisTextureLoader","transcodeConfig","supportedCompressionFormats","etc1","s3tc","pvrtc","etc2","hasMipmap","fileInfo","images","levels","catch","err","rootImage","TexturePackerFrame","offset","TexturePacker","meshes","_o","_p","_q","map","uvsIn","uvsOut","layout","LAYOUT_STRIP","LAYOUT_COLNUM","colnum","updateInputMeshes","disposeSources","_expecting","fillBlanks","customFillColor","frameSize","paddingRatio","_paddingValue","ceil","paddingMode","SUBUV_WRAP","SUBUV_COLOR","paddingColor","sets","frames","_createFrames","dtSize","_calculateSize","dtUnits","divide","doneCount","expecting","meshLength","sKeys","keys","setName","dt","dtx","baseSize","padding","tcs","_loop_1","tempTexture","this_1","tcx","_getFrameOffset","updateDt","iDat","putImageData","_calculateMeshUVFrames","img_1","Image","src","onload","setTransform","cellOffsets","i_1","i_2","toHexString","clearRect","sqrtCount","sqrt","cols","rowCnt","m","pOffset","frame","_updateMeshUV","_updateTextureReferences","uvStep","yStep","xStep","floor","frameID","uvIn","getVerticesData","uvOut","toCount","setVerticesData","force","_dispose","_t","setMeshToFrame","updateMaterial","processAsync","done_1","_loop_2","forceCompilationAsync","doneCheck_1","state_1","channel","download","imageType","setTimeout","pack","oKeys","opt","encodeURIComponent","JSON","stringify","setAttribute","body","appendChild","click","updateFromJSON","parsedData","_options","channels","LAYOUT_POWER2","SUBUV_EXTEND","CustomProceduralTexture","texturePath","_animate","_time","_texturePath","_loadJson","jsonUrl","noConfigFile","ex","Log","configFileUrl","xhr","open","addEventListener","status","responseText","_config","response","updateShaderUniforms","updateTextures","animate","refreshrate","send","getAnimationRatio","sampler2Ds","sample2Dname","textureRelativeUrl","uniform","NoiseProceduralTexture","time","brightness","octaves","persistence","animationSpeedFactor","_updateShaderUniforms","RawTexture3D","RefractionTexture","refractionPlane","onBeforeRenderObservable","onAfterRenderObservable","renderList","slice","mirrorPlane","asArray","InternalTextureSource","InternalTexture","delayAllocation","onErrorObservable","onRebuildCallback","baseWidth","baseHeight","baseDepth","_associatedChannel","_source","Unknown","_bufferView","_bufferViewArray","_bufferViewArrayArray","_extension","_workingCanvas","_workingContext","_cachedCoordinatesMode","_isDisabled","_compression","_hardwareTexture","_maxLodLevel","_references","_uniqueId","_Counter","_createHardwareTexture","updateTextureDimensions","_cachedWrapU","_cachedWrapV","_cachedWrapR","_cachedAnisotropicFilteringLevel","data_1","swapAndSetIsReady","proxyInternalTexture","isAsync","proxy","Temp","Url","createTexture","_originalUrl","Raw","Raw3D","Raw2DArray","createRawTexture2DArray","Dynamic","getRenderingCanvas","Cube","CubeRaw","createRawCubeTexture","CubeRawRGBD","CubePrefiltered","target","swapAll","setUsage","cache","MirrorTexture","_transformMatrix","_mirrorMatrix","_adaptiveBlurKernel","_blurKernelX","_blurKernelY","_blurRatio","ignoreCameraViewport","_updateGammaSpace","_imageProcessingConfigChangeObserver","saveClipPlane","supportsUniformBuffers","_sceneUBO","createSceneUniformBuffer","onBeforeBindObservable","onAfterUnbindObservable","_currentSceneUBO","getSceneUniformBuffer","setSceneUniformBuffer","unbindEffect","getViewMatrix","setTransformMatrix","getProjectionMatrix","cullBackFaces","activeCamera","globalPosition","updateTransformMatrix","_preparePostProcesses","_autoComputeBlurKernel","blurKernelX","blurKernelY","dw","dh","_onRatioRescale","_sizeRatio","_initialSizeParameter","applyByPostProcess","clearPostProcesses","_blurX","inputTexture","alwaysForcePOT","_blurY","addPostProcess","removePostProcess","_renderTargetOptions","renderTargetSize","MultiRenderTarget","count","textureNames","generateDepthTexture","depthTextureFormat","doNotChangeAspectRatio","drawOnlyOnFirstAttachmentByDefault","isSupported","types","samplingModes","useSRGBBuffers","_initTypes","_multiRenderTargetOptions","textureCount","_count","_drawOnlyOnFirstAttachmentByDefault","_createInternalTextures","_createTextures","drawBuffersExtension","wrap","defaultType","forceFullRebuild","releaseInternalTextures","_releaseTextures","internalTextures","setSamples","createMultipleRenderTarget","setInternalTexture","disposePrevious","renderTarget","updateCount","_unbindFrameBuffer","unBindMultiColorAttachmentFramebuffer","doNotDisposeInternalTextures","PrePassRenderTarget","renderTargetTexture","_beforeCompositionPostProcesses","_internalTextureDirty","_createCompositionEffect","imageProcessingPostProcess","_updateParameters","_checkSize","requiredWidth","requiredHeight","_resetPostProcessChain","prePassRenderer","_prePassRenderTarget","_outputPostProcess","restoreDefaultInputTexture","RawCubeTexture","compression","updateRawCubeTexture","updateRGBDAsync","internalTexture","RawTexture","creationFlags","_caps","CreateLuminanceTexture","CreateLuminanceAlphaTexture","CreateAlphaTexture","CreateRGBTexture","CreateRGBATexture","CreateRGBAStorageTexture","CreateRTexture","CreateRStorageTexture","RawTexture2DArray","_depth","updateRawTexture2DArray","RenderTargetTexture","isMulti","noColorTarget","renderParticles","renderSprites","onClearObservable","onResizeObservable","_cleared","skipInitialClear","_canRescale","_renderPassIds","_isCubeData","_processSizeParameter","renderPassId","_resizeObserver","_doNotChangeAspectRatio","_renderingManager","_useSceneAutoClearSetup","_renderList","_hookArray","array","oldPush","items","_i","wasEmpty","_markSubMeshesAsLightDirty","oldSplice","deleteCount","deleted","_postProcesses","_onAfterUnbindObserver","_onBeforeRenderObserver","_onAfterRenderObserver","_onClearObserver","setMaterialForRendering","setMaterialForRenderPass","_depthStencilTexture","createDepthStencilTexture","comparisonFunction","bilinearFiltering","generateStencil","_releaseRenderPassId","releaseRenderPassId","_createRenderPassId","numPasses","getRenderLayers","createRenderPassId","_bestReflectionRenderTargetDimension","postProcess","_postProcessManager","layers","disableRescaling","newSize","wasCube","hasObservers","dumpForDebug","_render","isReadyForRendering","checkReadiness","useCameraPostProcesses","_waitingRenderList","getMeshById","renderListPredicate","scene_1","sceneMeshes","currentRenderPassId","camera","viewport","_defaultRenderListPrepared","returnValue","numLayers","layer","currentRenderList","defaultRenderList","getActiveMeshes","defaultRenderListLength","getCustomRenderList","isBlocked","isVisible","subMeshes","customIsReadyFunction","_renderToTarget","incrementRenderId","scenes","renderDimension","curved","_prepareRenderingManager","currentRenderListLength","checkLayerMask","sceneRenderId","meshIndex","_internalAbstractMeshDataInfo","_currentLODIsUpToDate","_currentLOD","customLODSelector","getLOD","meshToRender","_preActivateForIntermediateRendering","isMasked","layerMask","_activate","isAnInstance","_actAsRegularMesh","_onlyForInstancesIntermediate","_isActiveIntermediate","subIndex","dispatch","particleIndex","particleSystems","particleSystem","emitter","isStarted","position","dispatchParticles","_prepareFrame","_prePassEnabled","postProcessManager","snapshotRendering","snapshotRenderingMode","_beforeRenderTargetClearStage","action","_beforeRenderTargetDrawStage","customRenderFunction","_afterRenderTargetDrawStage","saveGenerateMipMaps","_finalizeFrame","setRenderingOrder","renderingGroupId","opaqueSortCompareFn","alphaTestSortCompareFn","transparentSortCompareFn","setRenderingAutoClearDepthStencil","autoClearDepthStencil","disposeFramebufferObjects","releaseTextures","customRenderTargets","cameras","REFRESHRATE_RENDER_ONCE","freeRenderingGroups","REFRESHRATE_RENDER_ONEVERYFRAME","REFRESHRATE_RENDER_ONEVERYTWOFRAMES","Texture","noMipmapOrOptions","deleteBuffer","TRILINEAR_SAMPLINGMODE","uOffset","vOffset","uScale","vScale","uAng","vAng","wAng","uRotationCenter","vRotationCenter","wRotationCenter","homogeneousRotationInUVTransform","inspectableCustomProperties","_rowGenerationMatrix","_cachedTextureMatrix","_projectionModeMatrix","_t0","_t1","_t2","_cachedUOffset","_cachedVOffset","_cachedUScale","_cachedVScale","_cachedUAng","_cachedVAng","_cachedWAng","_cachedProjectionMatrixId","_cachedURotationCenter","_cachedVRotationCenter","_cachedWRotationCenter","_cachedHomogeneousRotationInUVTransform","_deleteBuffer","_initialSamplingMode","_mimeType","_creationFlags","onBeforeTextureInitObservable","load","OnTextureLoadErrorObservable","loadObserver_1","_prepareRowForTextureGeneration","t","uBase","setRowFromFloats","subtractInPlace","PROJECTION_MODE","flagMaterialsAsTextureDirty","PLANAR_MODE","projectionMatrix","textureFormat","savedName","SerializeBuffers","ForceSerializeBuffers","substr","supportSyncTextureRead","parsedCustomTexture","updateSamplingMode","_CubeTextureParser","onLoaded","texture_1","mirrorTexture","_CreateMirror","reflectionProbes","probe","_CreateRenderTargetTexture","CreateFromBase64String","UseSerializedUrlIfAny","LoadFromDataString","jsonTexture","NEAREST_SAMPLINGMODE","NEAREST_NEAREST_MIPLINEAR","BILINEAR_SAMPLINGMODE","LINEAR_LINEAR_MIPNEAREST","LINEAR_LINEAR_MIPLINEAR","NEAREST_NEAREST_MIPNEAREST","NEAREST_LINEAR_MIPNEAREST","NEAREST_LINEAR_MIPLINEAR","NEAREST_LINEAR","NEAREST_NEAREST","LINEAR_NEAREST_MIPNEAREST","LINEAR_NEAREST_MIPLINEAR","LINEAR_LINEAR","LINEAR_NEAREST","EXPLICIT_MODE","SPHERICAL_MODE","CUBIC_MODE","SKYBOX_MODE","INVCUBIC_MODE","EQUIRECTANGULAR_MODE","FIXED_EQUIRECTANGULAR_MODE","FIXED_EQUIRECTANGULAR_MIRRORED_MODE","CLAMP_ADDRESSMODE","WRAP_ADDRESSMODE","MIRROR_ADDRESSMODE","TextureSampler","_useMipMaps","_comparisonFunction","setParameters","compareSampler","other"],"sourceRoot":""}