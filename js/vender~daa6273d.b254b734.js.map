{"version":3,"file":"js/vender~daa6273d.b254b734.js","mappings":"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","sources":["webpack:///../../../node_modules/@babylonjs/core/Physics/Plugins/cannonJSPlugin.js","webpack:///../../../node_modules/@babylonjs/core/Physics/Plugins/oimoJSPlugin.js","webpack:///../../../node_modules/@babylonjs/core/Physics/physicsEngineComponent.js","webpack:///../../../node_modules/@babylonjs/core/Physics/physicsHelper.js","webpack:///../../../node_modules/@babylonjs/core/Physics/physicsEngine.js","webpack:///../../../node_modules/@babylonjs/core/Physics/physicsImpostor.js","webpack:///../../../node_modules/@babylonjs/core/Physics/physicsJoint.js","webpack:///../../../node_modules/@babylonjs/core/Physics/physicsRaycastResult.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/anaglyphPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/blurPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/fxaaPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/imageProcessingPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/blackAndWhitePostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/postProcessRenderEffect.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/extractHighlightsPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/bloomMergePostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/bloomEffect.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/chromaticAberrationPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/circleOfConfusionPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/colorCorrectionPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/convolutionPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/depthOfFieldBlurPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/depthOfFieldEffect.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/depthOfFieldMergePostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/displayPassPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/filterPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/grainPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/highlightsPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/motionBlurPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/refractionPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/sharpenPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/postProcessRenderPipeline.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/postProcessRenderPipelineManager.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/Pipelines/defaultRenderingPipeline.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/Pipelines/lensRenderingPipeline.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/Pipelines/ssao2RenderingPipeline.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/Pipelines/ssaoRenderingPipeline.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/screenSpaceReflectionPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/RenderPipeline/Pipelines/standardRenderingPipeline.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/tonemapPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/volumetricLightScatteringPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/screenSpaceCurvaturePostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/passPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/postProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/postProcessManager.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/stereoscopicInterlacePostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/subSurfaceScatteringPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/vrDistortionCorrectionPostProcess.js","webpack:///../../../node_modules/@babylonjs/core/PostProcesses/vrMultiviewToSingleviewPostProcess.js"],"sourcesContent":["import { Logger } from \"../../Misc/logger.js\";\nimport { Vector3, Matrix, Quaternion } from \"../../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../../Buffers/buffer.js\";\nimport { PhysicsImpostor } from \"../../Physics/physicsImpostor.js\";\nimport { PhysicsJoint } from \"../../Physics/physicsJoint.js\";\nimport { PhysicsEngine } from \"../../Physics/physicsEngine.js\";\nimport { PhysicsRaycastResult } from \"../physicsRaycastResult.js\";\n/** @hidden */\nvar CannonJSPlugin = /** @class */ (function () {\n    function CannonJSPlugin(_useDeltaForWorldStep, iterations, cannonInjection) {\n        if (_useDeltaForWorldStep === void 0) { _useDeltaForWorldStep = true; }\n        if (iterations === void 0) { iterations = 10; }\n        if (cannonInjection === void 0) { cannonInjection = CANNON; }\n        this._useDeltaForWorldStep = _useDeltaForWorldStep;\n        this.name = \"CannonJSPlugin\";\n        this._physicsMaterials = new Array();\n        this._fixedTimeStep = 1 / 60;\n        this._physicsBodysToRemoveAfterStep = new Array();\n        this._firstFrame = true;\n        this._tmpQuaternion = new Quaternion();\n        this._minus90X = new Quaternion(-0.7071067811865475, 0, 0, 0.7071067811865475);\n        this._plus90X = new Quaternion(0.7071067811865475, 0, 0, 0.7071067811865475);\n        this._tmpPosition = Vector3.Zero();\n        this._tmpDeltaPosition = Vector3.Zero();\n        this._tmpUnityRotation = new Quaternion();\n        this.BJSCANNON = cannonInjection;\n        if (!this.isSupported()) {\n            Logger.Error(\"CannonJS is not available. Please make sure you included the js file.\");\n            return;\n        }\n        this._extendNamespace();\n        this.world = new this.BJSCANNON.World();\n        this.world.broadphase = new this.BJSCANNON.NaiveBroadphase();\n        this.world.solver.iterations = iterations;\n        this._cannonRaycastResult = new this.BJSCANNON.RaycastResult();\n        this._raycastResult = new PhysicsRaycastResult();\n    }\n    CannonJSPlugin.prototype.setGravity = function (gravity) {\n        var vec = gravity;\n        this.world.gravity.set(vec.x, vec.y, vec.z);\n    };\n    CannonJSPlugin.prototype.setTimeStep = function (timeStep) {\n        this._fixedTimeStep = timeStep;\n    };\n    CannonJSPlugin.prototype.getTimeStep = function () {\n        return this._fixedTimeStep;\n    };\n    CannonJSPlugin.prototype.executeStep = function (delta, impostors) {\n        // due to cannon's architecture, the first frame's before-step is skipped.\n        if (this._firstFrame) {\n            this._firstFrame = false;\n            for (var _i = 0, impostors_1 = impostors; _i < impostors_1.length; _i++) {\n                var impostor = impostors_1[_i];\n                if (!(impostor.type == PhysicsImpostor.HeightmapImpostor || impostor.type === PhysicsImpostor.PlaneImpostor)) {\n                    impostor.beforeStep();\n                }\n            }\n        }\n        this.world.step(this._useDeltaForWorldStep ? delta : this._fixedTimeStep);\n        this._removeMarkedPhysicsBodiesFromWorld();\n    };\n    CannonJSPlugin.prototype._removeMarkedPhysicsBodiesFromWorld = function () {\n        var _this = this;\n        if (this._physicsBodysToRemoveAfterStep.length > 0) {\n            this._physicsBodysToRemoveAfterStep.forEach(function (physicsBody) {\n                if (typeof _this.world.removeBody === \"function\") {\n                    _this.world.removeBody(physicsBody);\n                }\n                else {\n                    _this.world.remove(physicsBody);\n                }\n            });\n            this._physicsBodysToRemoveAfterStep = [];\n        }\n    };\n    CannonJSPlugin.prototype.applyImpulse = function (impostor, force, contactPoint) {\n        var worldPoint = new this.BJSCANNON.Vec3(contactPoint.x, contactPoint.y, contactPoint.z);\n        var impulse = new this.BJSCANNON.Vec3(force.x, force.y, force.z);\n        impostor.physicsBody.applyImpulse(impulse, worldPoint);\n    };\n    CannonJSPlugin.prototype.applyForce = function (impostor, force, contactPoint) {\n        var worldPoint = new this.BJSCANNON.Vec3(contactPoint.x, contactPoint.y, contactPoint.z);\n        var impulse = new this.BJSCANNON.Vec3(force.x, force.y, force.z);\n        impostor.physicsBody.applyForce(impulse, worldPoint);\n    };\n    CannonJSPlugin.prototype.generatePhysicsBody = function (impostor) {\n        // When calling forceUpdate generatePhysicsBody is called again, ensure that the updated body does not instantly collide with removed body\n        this._removeMarkedPhysicsBodiesFromWorld();\n        //parent-child relationship. Does this impostor has a parent impostor?\n        if (impostor.parent) {\n            if (impostor.physicsBody) {\n                this.removePhysicsBody(impostor);\n                //TODO is that needed?\n                impostor.forceUpdate();\n            }\n            return;\n        }\n        //should a new body be created for this impostor?\n        if (impostor.isBodyInitRequired()) {\n            var shape = this._createShape(impostor);\n            if (!shape) {\n                Logger.Warn(\"It was not possible to create a physics body for this object.\");\n                return;\n            }\n            //unregister events, if body is being changed\n            var oldBody_1 = impostor.physicsBody;\n            if (oldBody_1) {\n                this.removePhysicsBody(impostor);\n            }\n            //create the body and material\n            var material = this._addMaterial(\"mat-\" + impostor.uniqueId, impostor.getParam(\"friction\"), impostor.getParam(\"restitution\"));\n            var bodyCreationObject = {\n                mass: impostor.getParam(\"mass\"),\n                material: material,\n            };\n            // A simple extend, in case native options were used.\n            var nativeOptions = impostor.getParam(\"nativeOptions\");\n            for (var key in nativeOptions) {\n                if (Object.prototype.hasOwnProperty.call(nativeOptions, key)) {\n                    bodyCreationObject[key] = nativeOptions[key];\n                }\n            }\n            impostor.physicsBody = new this.BJSCANNON.Body(bodyCreationObject);\n            impostor.physicsBody.addEventListener(\"collide\", impostor.onCollide);\n            this.world.addEventListener(\"preStep\", impostor.beforeStep);\n            this.world.addEventListener(\"postStep\", impostor.afterStep);\n            impostor.physicsBody.addShape(shape);\n            if (typeof this.world.addBody === \"function\") {\n                this.world.addBody(impostor.physicsBody);\n            }\n            else {\n                this.world.add(impostor.physicsBody);\n            }\n            //try to keep the body moving in the right direction by taking old properties.\n            //Should be tested!\n            if (oldBody_1) {\n                [\"force\", \"torque\", \"velocity\", \"angularVelocity\"].forEach(function (param) {\n                    var vec = oldBody_1[param];\n                    impostor.physicsBody[param].set(vec.x, vec.y, vec.z);\n                });\n            }\n            this._processChildMeshes(impostor);\n        }\n        //now update the body's transformation\n        this._updatePhysicsBodyTransformation(impostor);\n    };\n    CannonJSPlugin.prototype._processChildMeshes = function (mainImpostor) {\n        var _this = this;\n        var meshChildren = mainImpostor.object.getChildMeshes ? mainImpostor.object.getChildMeshes(true) : [];\n        var mainRotation = mainImpostor.object.rotationQuaternion;\n        if (mainRotation) {\n            mainRotation.conjugateToRef(this._tmpQuaternion);\n        }\n        else {\n            this._tmpQuaternion.set(0, 0, 0, 1);\n        }\n        if (meshChildren.length) {\n            var processMesh_1 = function (mesh) {\n                if (!mesh.rotationQuaternion) {\n                    return;\n                }\n                var childImpostor = mesh.getPhysicsImpostor();\n                if (childImpostor) {\n                    var parent_1 = childImpostor.parent;\n                    if (parent_1 !== mainImpostor && mesh.parent) {\n                        var pPosition = mesh.getAbsolutePosition().subtract(mesh.parent.getAbsolutePosition());\n                        var q = mesh.rotationQuaternion.multiply(_this._tmpQuaternion);\n                        if (childImpostor.physicsBody) {\n                            _this.removePhysicsBody(childImpostor);\n                            childImpostor.physicsBody = null;\n                        }\n                        childImpostor.parent = mainImpostor;\n                        childImpostor.resetUpdateFlags();\n                        mainImpostor.physicsBody.addShape(_this._createShape(childImpostor), new _this.BJSCANNON.Vec3(pPosition.x, pPosition.y, pPosition.z), new _this.BJSCANNON.Quaternion(q.x, q.y, q.z, q.w));\n                        //Add the mass of the children.\n                        mainImpostor.physicsBody.mass += childImpostor.getParam(\"mass\");\n                    }\n                }\n                mesh.getChildMeshes(true)\n                    .filter(function (m) { return !!m.physicsImpostor; })\n                    .forEach(processMesh_1);\n            };\n            meshChildren.filter(function (m) { return !!m.physicsImpostor; }).forEach(processMesh_1);\n        }\n    };\n    CannonJSPlugin.prototype.removePhysicsBody = function (impostor) {\n        impostor.physicsBody.removeEventListener(\"collide\", impostor.onCollide);\n        this.world.removeEventListener(\"preStep\", impostor.beforeStep);\n        this.world.removeEventListener(\"postStep\", impostor.afterStep);\n        // Only remove the physics body after the physics step to avoid disrupting cannon's internal state\n        if (this._physicsBodysToRemoveAfterStep.indexOf(impostor.physicsBody) === -1) {\n            this._physicsBodysToRemoveAfterStep.push(impostor.physicsBody);\n        }\n    };\n    CannonJSPlugin.prototype.generateJoint = function (impostorJoint) {\n        var mainBody = impostorJoint.mainImpostor.physicsBody;\n        var connectedBody = impostorJoint.connectedImpostor.physicsBody;\n        if (!mainBody || !connectedBody) {\n            return;\n        }\n        var constraint;\n        var jointData = impostorJoint.joint.jointData;\n        //TODO - https://github.com/schteppe/this.BJSCANNON.js/blob/gh-pages/demos/collisionFilter.html\n        var constraintData = {\n            pivotA: jointData.mainPivot ? new this.BJSCANNON.Vec3().set(jointData.mainPivot.x, jointData.mainPivot.y, jointData.mainPivot.z) : null,\n            pivotB: jointData.connectedPivot ? new this.BJSCANNON.Vec3().set(jointData.connectedPivot.x, jointData.connectedPivot.y, jointData.connectedPivot.z) : null,\n            axisA: jointData.mainAxis ? new this.BJSCANNON.Vec3().set(jointData.mainAxis.x, jointData.mainAxis.y, jointData.mainAxis.z) : null,\n            axisB: jointData.connectedAxis ? new this.BJSCANNON.Vec3().set(jointData.connectedAxis.x, jointData.connectedAxis.y, jointData.connectedAxis.z) : null,\n            maxForce: jointData.nativeParams.maxForce,\n            collideConnected: !!jointData.collision,\n        };\n        switch (impostorJoint.joint.type) {\n            case PhysicsJoint.HingeJoint:\n            case PhysicsJoint.Hinge2Joint:\n                constraint = new this.BJSCANNON.HingeConstraint(mainBody, connectedBody, constraintData);\n                break;\n            case PhysicsJoint.DistanceJoint:\n                constraint = new this.BJSCANNON.DistanceConstraint(mainBody, connectedBody, jointData.maxDistance || 2);\n                break;\n            case PhysicsJoint.SpringJoint: {\n                var springData = jointData;\n                constraint = new this.BJSCANNON.Spring(mainBody, connectedBody, {\n                    restLength: springData.length,\n                    stiffness: springData.stiffness,\n                    damping: springData.damping,\n                    localAnchorA: constraintData.pivotA,\n                    localAnchorB: constraintData.pivotB,\n                });\n                break;\n            }\n            case PhysicsJoint.LockJoint:\n                constraint = new this.BJSCANNON.LockConstraint(mainBody, connectedBody, constraintData);\n                break;\n            case PhysicsJoint.PointToPointJoint:\n            case PhysicsJoint.BallAndSocketJoint:\n            default:\n                constraint = new this.BJSCANNON.PointToPointConstraint(mainBody, constraintData.pivotA, connectedBody, constraintData.pivotB, constraintData.maxForce);\n                break;\n        }\n        //set the collideConnected flag after the creation, since DistanceJoint ignores it.\n        constraint.collideConnected = !!jointData.collision;\n        impostorJoint.joint.physicsJoint = constraint;\n        //don't add spring as constraint, as it is not one.\n        if (impostorJoint.joint.type !== PhysicsJoint.SpringJoint) {\n            this.world.addConstraint(constraint);\n        }\n        else {\n            impostorJoint.joint.jointData.forceApplicationCallback =\n                impostorJoint.joint.jointData.forceApplicationCallback ||\n                    function () {\n                        constraint.applyForce();\n                    };\n            impostorJoint.mainImpostor.registerAfterPhysicsStep(impostorJoint.joint.jointData.forceApplicationCallback);\n        }\n    };\n    CannonJSPlugin.prototype.removeJoint = function (impostorJoint) {\n        if (impostorJoint.joint.type !== PhysicsJoint.SpringJoint) {\n            this.world.removeConstraint(impostorJoint.joint.physicsJoint);\n        }\n        else {\n            impostorJoint.mainImpostor.unregisterAfterPhysicsStep(impostorJoint.joint.jointData.forceApplicationCallback);\n        }\n    };\n    CannonJSPlugin.prototype._addMaterial = function (name, friction, restitution) {\n        var index;\n        var mat;\n        for (index = 0; index < this._physicsMaterials.length; index++) {\n            mat = this._physicsMaterials[index];\n            if (mat.friction === friction && mat.restitution === restitution) {\n                return mat;\n            }\n        }\n        var currentMat = new this.BJSCANNON.Material(name);\n        currentMat.friction = friction;\n        currentMat.restitution = restitution;\n        this._physicsMaterials.push(currentMat);\n        return currentMat;\n    };\n    CannonJSPlugin.prototype._checkWithEpsilon = function (value) {\n        return value < PhysicsEngine.Epsilon ? PhysicsEngine.Epsilon : value;\n    };\n    CannonJSPlugin.prototype._createShape = function (impostor) {\n        var object = impostor.object;\n        var returnValue;\n        var extendSize = impostor.getObjectExtendSize();\n        switch (impostor.type) {\n            case PhysicsImpostor.SphereImpostor: {\n                var radiusX = extendSize.x;\n                var radiusY = extendSize.y;\n                var radiusZ = extendSize.z;\n                returnValue = new this.BJSCANNON.Sphere(Math.max(this._checkWithEpsilon(radiusX), this._checkWithEpsilon(radiusY), this._checkWithEpsilon(radiusZ)) / 2);\n                break;\n            }\n            //TMP also for cylinder - TODO Cannon supports cylinder natively.\n            case PhysicsImpostor.CylinderImpostor: {\n                var nativeParams = impostor.getParam(\"nativeOptions\");\n                if (!nativeParams) {\n                    nativeParams = {};\n                }\n                var radiusTop = nativeParams.radiusTop !== undefined ? nativeParams.radiusTop : this._checkWithEpsilon(extendSize.x) / 2;\n                var radiusBottom = nativeParams.radiusBottom !== undefined ? nativeParams.radiusBottom : this._checkWithEpsilon(extendSize.x) / 2;\n                var height = nativeParams.height !== undefined ? nativeParams.height : this._checkWithEpsilon(extendSize.y);\n                var numSegments = nativeParams.numSegments !== undefined ? nativeParams.numSegments : 16;\n                returnValue = new this.BJSCANNON.Cylinder(radiusTop, radiusBottom, height, numSegments);\n                // Rotate 90 degrees as this shape is horizontal in cannon\n                var quat = new this.BJSCANNON.Quaternion();\n                quat.setFromAxisAngle(new this.BJSCANNON.Vec3(1, 0, 0), -Math.PI / 2);\n                var translation = new this.BJSCANNON.Vec3(0, 0, 0);\n                returnValue.transformAllPoints(translation, quat);\n                break;\n            }\n            case PhysicsImpostor.BoxImpostor: {\n                var box = extendSize.scale(0.5);\n                returnValue = new this.BJSCANNON.Box(new this.BJSCANNON.Vec3(this._checkWithEpsilon(box.x), this._checkWithEpsilon(box.y), this._checkWithEpsilon(box.z)));\n                break;\n            }\n            case PhysicsImpostor.PlaneImpostor:\n                Logger.Warn(\"Attention, PlaneImposter might not behave as you expect. Consider using BoxImposter instead\");\n                returnValue = new this.BJSCANNON.Plane();\n                break;\n            case PhysicsImpostor.MeshImpostor: {\n                // should transform the vertex data to world coordinates!!\n                var rawVerts = object.getVerticesData ? object.getVerticesData(VertexBuffer.PositionKind) : [];\n                var rawFaces = object.getIndices ? object.getIndices() : [];\n                if (!rawVerts) {\n                    Logger.Warn(\"Tried to create a MeshImpostor for an object without vertices. This will fail.\");\n                    return;\n                }\n                // get only scale! so the object could transform correctly.\n                var oldPosition = object.position.clone();\n                var oldRotation = object.rotation && object.rotation.clone();\n                var oldQuaternion = object.rotationQuaternion && object.rotationQuaternion.clone();\n                object.position.copyFromFloats(0, 0, 0);\n                object.rotation && object.rotation.copyFromFloats(0, 0, 0);\n                object.rotationQuaternion && object.rotationQuaternion.copyFrom(impostor.getParentsRotation());\n                object.rotationQuaternion && object.parent && object.rotationQuaternion.conjugateInPlace();\n                var transform = object.computeWorldMatrix(true);\n                // convert rawVerts to object space\n                var temp = new Array();\n                var index = void 0;\n                for (index = 0; index < rawVerts.length; index += 3) {\n                    Vector3.TransformCoordinates(Vector3.FromArray(rawVerts, index), transform).toArray(temp, index);\n                }\n                Logger.Warn(\"MeshImpostor only collides against spheres.\");\n                returnValue = new this.BJSCANNON.Trimesh(temp, rawFaces);\n                //now set back the transformation!\n                object.position.copyFrom(oldPosition);\n                oldRotation && object.rotation && object.rotation.copyFrom(oldRotation);\n                oldQuaternion && object.rotationQuaternion && object.rotationQuaternion.copyFrom(oldQuaternion);\n                break;\n            }\n            case PhysicsImpostor.HeightmapImpostor: {\n                var oldPosition2 = object.position.clone();\n                var oldRotation2 = object.rotation && object.rotation.clone();\n                var oldQuaternion2 = object.rotationQuaternion && object.rotationQuaternion.clone();\n                object.position.copyFromFloats(0, 0, 0);\n                object.rotation && object.rotation.copyFromFloats(0, 0, 0);\n                object.rotationQuaternion && object.rotationQuaternion.copyFrom(impostor.getParentsRotation());\n                object.rotationQuaternion && object.parent && object.rotationQuaternion.conjugateInPlace();\n                object.rotationQuaternion && object.rotationQuaternion.multiplyInPlace(this._minus90X);\n                returnValue = this._createHeightmap(object);\n                object.position.copyFrom(oldPosition2);\n                oldRotation2 && object.rotation && object.rotation.copyFrom(oldRotation2);\n                oldQuaternion2 && object.rotationQuaternion && object.rotationQuaternion.copyFrom(oldQuaternion2);\n                object.computeWorldMatrix(true);\n                break;\n            }\n            case PhysicsImpostor.ParticleImpostor:\n                returnValue = new this.BJSCANNON.Particle();\n                break;\n            case PhysicsImpostor.NoImpostor:\n                returnValue = new this.BJSCANNON.Box(new this.BJSCANNON.Vec3(0, 0, 0));\n                break;\n        }\n        return returnValue;\n    };\n    CannonJSPlugin.prototype._createHeightmap = function (object, pointDepth) {\n        var pos = object.getVerticesData(VertexBuffer.PositionKind);\n        var transform = object.computeWorldMatrix(true);\n        // convert rawVerts to object space\n        var temp = new Array();\n        var index;\n        for (index = 0; index < pos.length; index += 3) {\n            Vector3.TransformCoordinates(Vector3.FromArray(pos, index), transform).toArray(temp, index);\n        }\n        pos = temp;\n        var matrix = new Array();\n        //For now pointDepth will not be used and will be automatically calculated.\n        //Future reference - try and find the best place to add a reference to the pointDepth variable.\n        var arraySize = pointDepth || ~~(Math.sqrt(pos.length / 3) - 1);\n        var boundingInfo = object.getBoundingInfo();\n        var dim = Math.min(boundingInfo.boundingBox.extendSizeWorld.x, boundingInfo.boundingBox.extendSizeWorld.y);\n        var minY = boundingInfo.boundingBox.extendSizeWorld.z;\n        var elementSize = (dim * 2) / arraySize;\n        for (var i = 0; i < pos.length; i = i + 3) {\n            var x = Math.round(pos[i + 0] / elementSize + arraySize / 2);\n            var z = Math.round((pos[i + 1] / elementSize - arraySize / 2) * -1);\n            var y = -pos[i + 2] + minY;\n            if (!matrix[x]) {\n                matrix[x] = [];\n            }\n            if (!matrix[x][z]) {\n                matrix[x][z] = y;\n            }\n            matrix[x][z] = Math.max(y, matrix[x][z]);\n        }\n        for (var x = 0; x <= arraySize; ++x) {\n            if (!matrix[x]) {\n                var loc = 1;\n                while (!matrix[(x + loc) % arraySize]) {\n                    loc++;\n                }\n                matrix[x] = matrix[(x + loc) % arraySize].slice();\n                //console.log(\"missing x\", x);\n            }\n            for (var z = 0; z <= arraySize; ++z) {\n                if (!matrix[x][z]) {\n                    var loc = 1;\n                    var newValue = void 0;\n                    while (newValue === undefined) {\n                        newValue = matrix[x][(z + loc++) % arraySize];\n                    }\n                    matrix[x][z] = newValue;\n                }\n            }\n        }\n        var shape = new this.BJSCANNON.Heightfield(matrix, {\n            elementSize: elementSize,\n        });\n        //For future reference, needed for body transformation\n        shape.minY = minY;\n        return shape;\n    };\n    CannonJSPlugin.prototype._updatePhysicsBodyTransformation = function (impostor) {\n        var object = impostor.object;\n        //make sure it is updated...\n        object.computeWorldMatrix && object.computeWorldMatrix(true);\n        // The delta between the mesh position and the mesh bounding box center\n        if (!object.getBoundingInfo()) {\n            return;\n        }\n        var center = impostor.getObjectCenter();\n        //m.getAbsolutePosition().subtract(m.getBoundingInfo().boundingBox.centerWorld)\n        this._tmpDeltaPosition.copyFrom(object.getAbsolutePivotPoint().subtract(center));\n        this._tmpDeltaPosition.divideInPlace(impostor.object.scaling);\n        this._tmpPosition.copyFrom(center);\n        var quaternion = object.rotationQuaternion;\n        if (!quaternion) {\n            return;\n        }\n        //is shape is a plane or a heightmap, it must be rotated 90 degs in the X axis.\n        //ideally these would be rotated at time of creation like cylinder but they dont extend ConvexPolyhedron\n        if (impostor.type === PhysicsImpostor.PlaneImpostor || impostor.type === PhysicsImpostor.HeightmapImpostor) {\n            //-90 DEG in X, precalculated\n            quaternion = quaternion.multiply(this._minus90X);\n            //Invert! (Precalculated, 90 deg in X)\n            //No need to clone. this will never change.\n            impostor.setDeltaRotation(this._plus90X);\n        }\n        //If it is a heightfield, if should be centered.\n        if (impostor.type === PhysicsImpostor.HeightmapImpostor) {\n            var mesh = object;\n            var boundingInfo = mesh.getBoundingInfo();\n            //calculate the correct body position:\n            var rotationQuaternion = mesh.rotationQuaternion;\n            mesh.rotationQuaternion = this._tmpUnityRotation;\n            mesh.computeWorldMatrix(true);\n            //get original center with no rotation\n            var c = center.clone();\n            var oldPivot = mesh.getPivotMatrix();\n            if (oldPivot) {\n                // create a copy the pivot Matrix as it is modified in place\n                oldPivot = oldPivot.clone();\n            }\n            else {\n                oldPivot = Matrix.Identity();\n            }\n            //calculate the new center using a pivot (since this.BJSCANNON.js doesn't center height maps)\n            var p = Matrix.Translation(boundingInfo.boundingBox.extendSizeWorld.x, 0, -boundingInfo.boundingBox.extendSizeWorld.z);\n            mesh.setPreTransformMatrix(p);\n            mesh.computeWorldMatrix(true);\n            // force bounding box recomputation\n            boundingInfo = mesh.getBoundingInfo();\n            //calculate the translation\n            var translation = boundingInfo.boundingBox.centerWorld.subtract(center).subtract(mesh.position).negate();\n            this._tmpPosition.copyFromFloats(translation.x, translation.y - boundingInfo.boundingBox.extendSizeWorld.y, translation.z);\n            //add it inverted to the delta\n            this._tmpDeltaPosition.copyFrom(boundingInfo.boundingBox.centerWorld.subtract(c));\n            this._tmpDeltaPosition.y += boundingInfo.boundingBox.extendSizeWorld.y;\n            //rotation is back\n            mesh.rotationQuaternion = rotationQuaternion;\n            mesh.setPreTransformMatrix(oldPivot);\n            mesh.computeWorldMatrix(true);\n        }\n        else if (impostor.type === PhysicsImpostor.MeshImpostor) {\n            this._tmpDeltaPosition.copyFromFloats(0, 0, 0);\n        }\n        impostor.setDeltaPosition(this._tmpDeltaPosition);\n        //Now update the impostor object\n        impostor.physicsBody.position.set(this._tmpPosition.x, this._tmpPosition.y, this._tmpPosition.z);\n        impostor.physicsBody.quaternion.set(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n    };\n    CannonJSPlugin.prototype.setTransformationFromPhysicsBody = function (impostor) {\n        impostor.object.position.set(impostor.physicsBody.position.x, impostor.physicsBody.position.y, impostor.physicsBody.position.z);\n        if (impostor.object.rotationQuaternion) {\n            var q = impostor.physicsBody.quaternion;\n            impostor.object.rotationQuaternion.set(q.x, q.y, q.z, q.w);\n        }\n    };\n    CannonJSPlugin.prototype.setPhysicsBodyTransformation = function (impostor, newPosition, newRotation) {\n        impostor.physicsBody.position.set(newPosition.x, newPosition.y, newPosition.z);\n        impostor.physicsBody.quaternion.set(newRotation.x, newRotation.y, newRotation.z, newRotation.w);\n    };\n    CannonJSPlugin.prototype.isSupported = function () {\n        return this.BJSCANNON !== undefined;\n    };\n    CannonJSPlugin.prototype.setLinearVelocity = function (impostor, velocity) {\n        impostor.physicsBody.velocity.set(velocity.x, velocity.y, velocity.z);\n    };\n    CannonJSPlugin.prototype.setAngularVelocity = function (impostor, velocity) {\n        impostor.physicsBody.angularVelocity.set(velocity.x, velocity.y, velocity.z);\n    };\n    CannonJSPlugin.prototype.getLinearVelocity = function (impostor) {\n        var v = impostor.physicsBody.velocity;\n        if (!v) {\n            return null;\n        }\n        return new Vector3(v.x, v.y, v.z);\n    };\n    CannonJSPlugin.prototype.getAngularVelocity = function (impostor) {\n        var v = impostor.physicsBody.angularVelocity;\n        if (!v) {\n            return null;\n        }\n        return new Vector3(v.x, v.y, v.z);\n    };\n    CannonJSPlugin.prototype.setBodyMass = function (impostor, mass) {\n        impostor.physicsBody.mass = mass;\n        impostor.physicsBody.updateMassProperties();\n    };\n    CannonJSPlugin.prototype.getBodyMass = function (impostor) {\n        return impostor.physicsBody.mass;\n    };\n    CannonJSPlugin.prototype.getBodyFriction = function (impostor) {\n        return impostor.physicsBody.material.friction;\n    };\n    CannonJSPlugin.prototype.setBodyFriction = function (impostor, friction) {\n        impostor.physicsBody.material.friction = friction;\n    };\n    CannonJSPlugin.prototype.getBodyRestitution = function (impostor) {\n        return impostor.physicsBody.material.restitution;\n    };\n    CannonJSPlugin.prototype.setBodyRestitution = function (impostor, restitution) {\n        impostor.physicsBody.material.restitution = restitution;\n    };\n    CannonJSPlugin.prototype.sleepBody = function (impostor) {\n        impostor.physicsBody.sleep();\n    };\n    CannonJSPlugin.prototype.wakeUpBody = function (impostor) {\n        impostor.physicsBody.wakeUp();\n    };\n    CannonJSPlugin.prototype.updateDistanceJoint = function (joint, maxDistance) {\n        joint.physicsJoint.distance = maxDistance;\n    };\n    CannonJSPlugin.prototype.setMotor = function (joint, speed, maxForce, motorIndex) {\n        if (!motorIndex) {\n            joint.physicsJoint.enableMotor();\n            joint.physicsJoint.setMotorSpeed(speed);\n            if (maxForce) {\n                this.setLimit(joint, maxForce);\n            }\n        }\n    };\n    CannonJSPlugin.prototype.setLimit = function (joint, upperLimit, lowerLimit) {\n        joint.physicsJoint.motorEquation.maxForce = upperLimit;\n        joint.physicsJoint.motorEquation.minForce = lowerLimit === void 0 ? -upperLimit : lowerLimit;\n    };\n    CannonJSPlugin.prototype.syncMeshWithImpostor = function (mesh, impostor) {\n        var body = impostor.physicsBody;\n        mesh.position.x = body.position.x;\n        mesh.position.y = body.position.y;\n        mesh.position.z = body.position.z;\n        if (mesh.rotationQuaternion) {\n            mesh.rotationQuaternion.x = body.quaternion.x;\n            mesh.rotationQuaternion.y = body.quaternion.y;\n            mesh.rotationQuaternion.z = body.quaternion.z;\n            mesh.rotationQuaternion.w = body.quaternion.w;\n        }\n    };\n    CannonJSPlugin.prototype.getRadius = function (impostor) {\n        var shape = impostor.physicsBody.shapes[0];\n        return shape.boundingSphereRadius;\n    };\n    CannonJSPlugin.prototype.getBoxSizeToRef = function (impostor, result) {\n        var shape = impostor.physicsBody.shapes[0];\n        result.x = shape.halfExtents.x * 2;\n        result.y = shape.halfExtents.y * 2;\n        result.z = shape.halfExtents.z * 2;\n    };\n    CannonJSPlugin.prototype.dispose = function () { };\n    CannonJSPlugin.prototype._extendNamespace = function () {\n        //this will force cannon to execute at least one step when using interpolation\n        var step_tmp1 = new this.BJSCANNON.Vec3();\n        var engine = this.BJSCANNON;\n        this.BJSCANNON.World.prototype.step = function (dt, timeSinceLastCalled, maxSubSteps) {\n            maxSubSteps = maxSubSteps || 10;\n            timeSinceLastCalled = timeSinceLastCalled || 0;\n            if (timeSinceLastCalled === 0) {\n                this.internalStep(dt);\n                this.time += dt;\n            }\n            else {\n                var internalSteps = Math.floor((this.time + timeSinceLastCalled) / dt) - Math.floor(this.time / dt);\n                internalSteps = Math.min(internalSteps, maxSubSteps) || 1;\n                var t0 = performance.now();\n                for (var i = 0; i !== internalSteps; i++) {\n                    this.internalStep(dt);\n                    if (performance.now() - t0 > dt * 1000) {\n                        break;\n                    }\n                }\n                this.time += timeSinceLastCalled;\n                var h = this.time % dt;\n                var h_div_dt = h / dt;\n                var interpvelo = step_tmp1;\n                var bodies = this.bodies;\n                for (var j = 0; j !== bodies.length; j++) {\n                    var b = bodies[j];\n                    if (b.type !== engine.Body.STATIC && b.sleepState !== engine.Body.SLEEPING) {\n                        b.position.vsub(b.previousPosition, interpvelo);\n                        interpvelo.scale(h_div_dt, interpvelo);\n                        b.position.vadd(interpvelo, b.interpolatedPosition);\n                    }\n                    else {\n                        b.interpolatedPosition.set(b.position.x, b.position.y, b.position.z);\n                        b.interpolatedQuaternion.set(b.quaternion.x, b.quaternion.y, b.quaternion.z, b.quaternion.w);\n                    }\n                }\n            }\n        };\n    };\n    /**\n     * Does a raycast in the physics world\n     * @param from when should the ray start?\n     * @param to when should the ray end?\n     * @returns PhysicsRaycastResult\n     */\n    CannonJSPlugin.prototype.raycast = function (from, to) {\n        this._cannonRaycastResult.reset();\n        this.world.raycastClosest(from, to, {}, this._cannonRaycastResult);\n        this._raycastResult.reset(from, to);\n        if (this._cannonRaycastResult.hasHit) {\n            // TODO: do we also want to get the body it hit?\n            this._raycastResult.setHitData({\n                x: this._cannonRaycastResult.hitNormalWorld.x,\n                y: this._cannonRaycastResult.hitNormalWorld.y,\n                z: this._cannonRaycastResult.hitNormalWorld.z,\n            }, {\n                x: this._cannonRaycastResult.hitPointWorld.x,\n                y: this._cannonRaycastResult.hitPointWorld.y,\n                z: this._cannonRaycastResult.hitPointWorld.z,\n            });\n            this._raycastResult.setHitDistance(this._cannonRaycastResult.distance);\n        }\n        return this._raycastResult;\n    };\n    return CannonJSPlugin;\n}());\nexport { CannonJSPlugin };\nPhysicsEngine.DefaultPluginFactory = function () {\n    return new CannonJSPlugin();\n};\n//# sourceMappingURL=cannonJSPlugin.js.map","import { PhysicsImpostor } from \"../../Physics/physicsImpostor.js\";\nimport { PhysicsJoint } from \"../../Physics/physicsJoint.js\";\nimport { PhysicsEngine } from \"../../Physics/physicsEngine.js\";\nimport { Vector3, Quaternion } from \"../../Maths/math.vector.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { PhysicsRaycastResult } from \"../physicsRaycastResult.js\";\n/** @hidden */\nvar OimoJSPlugin = /** @class */ (function () {\n    function OimoJSPlugin(_useDeltaForWorldStep, iterations, oimoInjection) {\n        if (_useDeltaForWorldStep === void 0) { _useDeltaForWorldStep = true; }\n        if (oimoInjection === void 0) { oimoInjection = OIMO; }\n        this._useDeltaForWorldStep = _useDeltaForWorldStep;\n        this.name = \"OimoJSPlugin\";\n        this._fixedTimeStep = 1 / 60;\n        this._tmpImpostorsArray = [];\n        this._tmpPositionVector = Vector3.Zero();\n        this.BJSOIMO = oimoInjection;\n        this.world = new this.BJSOIMO.World({\n            iterations: iterations,\n        });\n        this.world.clear();\n        this._raycastResult = new PhysicsRaycastResult();\n    }\n    OimoJSPlugin.prototype.setGravity = function (gravity) {\n        this.world.gravity.set(gravity.x, gravity.y, gravity.z);\n    };\n    OimoJSPlugin.prototype.setTimeStep = function (timeStep) {\n        this.world.timeStep = timeStep;\n    };\n    OimoJSPlugin.prototype.getTimeStep = function () {\n        return this.world.timeStep;\n    };\n    OimoJSPlugin.prototype.executeStep = function (delta, impostors) {\n        var _this = this;\n        impostors.forEach(function (impostor) {\n            impostor.beforeStep();\n        });\n        this.world.timeStep = this._useDeltaForWorldStep ? delta : this._fixedTimeStep;\n        this.world.step();\n        impostors.forEach(function (impostor) {\n            impostor.afterStep();\n            //update the ordered impostors array\n            _this._tmpImpostorsArray[impostor.uniqueId] = impostor;\n        });\n        //check for collisions\n        var contact = this.world.contacts;\n        while (contact !== null) {\n            if (contact.touching && !contact.body1.sleeping && !contact.body2.sleeping) {\n                contact = contact.next;\n                continue;\n            }\n            //is this body colliding with any other? get the impostor\n            var mainImpostor = this._tmpImpostorsArray[+contact.body1.name];\n            var collidingImpostor = this._tmpImpostorsArray[+contact.body2.name];\n            if (!mainImpostor || !collidingImpostor) {\n                contact = contact.next;\n                continue;\n            }\n            mainImpostor.onCollide({ body: collidingImpostor.physicsBody, point: null });\n            collidingImpostor.onCollide({ body: mainImpostor.physicsBody, point: null });\n            contact = contact.next;\n        }\n    };\n    OimoJSPlugin.prototype.applyImpulse = function (impostor, force, contactPoint) {\n        var mass = impostor.physicsBody.mass;\n        impostor.physicsBody.applyImpulse(contactPoint.scale(this.world.invScale), force.scale(this.world.invScale * mass));\n    };\n    OimoJSPlugin.prototype.applyForce = function (impostor, force, contactPoint) {\n        Logger.Warn(\"Oimo doesn't support applying force. Using impule instead.\");\n        this.applyImpulse(impostor, force, contactPoint);\n    };\n    OimoJSPlugin.prototype.generatePhysicsBody = function (impostor) {\n        var _this = this;\n        //parent-child relationship. Does this impostor has a parent impostor?\n        if (impostor.parent) {\n            if (impostor.physicsBody) {\n                this.removePhysicsBody(impostor);\n                //TODO is that needed?\n                impostor.forceUpdate();\n            }\n            return;\n        }\n        if (impostor.isBodyInitRequired()) {\n            var bodyConfig_1 = {\n                name: impostor.uniqueId,\n                //Oimo must have mass, also for static objects.\n                config: [impostor.getParam(\"mass\") || 0.001, impostor.getParam(\"friction\"), impostor.getParam(\"restitution\")],\n                size: [],\n                type: [],\n                pos: [],\n                posShape: [],\n                rot: [],\n                rotShape: [],\n                move: impostor.getParam(\"mass\") !== 0,\n                density: impostor.getParam(\"mass\"),\n                friction: impostor.getParam(\"friction\"),\n                restitution: impostor.getParam(\"restitution\"),\n                //Supporting older versions of Oimo\n                world: this.world,\n            };\n            var impostors_1 = [impostor];\n            var addToArray = function (parent) {\n                if (!parent.getChildMeshes) {\n                    return;\n                }\n                parent.getChildMeshes().forEach(function (m) {\n                    if (m.physicsImpostor) {\n                        impostors_1.push(m.physicsImpostor);\n                        //m.physicsImpostor._init();\n                    }\n                });\n            };\n            addToArray(impostor.object);\n            var checkWithEpsilon_1 = function (value) {\n                return Math.max(value, PhysicsEngine.Epsilon);\n            };\n            var globalQuaternion_1 = new Quaternion();\n            impostors_1.forEach(function (i) {\n                if (!i.object.rotationQuaternion) {\n                    return;\n                }\n                //get the correct bounding box\n                var oldQuaternion = i.object.rotationQuaternion;\n                globalQuaternion_1.copyFrom(oldQuaternion);\n                i.object.rotationQuaternion.set(0, 0, 0, 1);\n                i.object.computeWorldMatrix(true);\n                var rot = globalQuaternion_1.toEulerAngles();\n                var extendSize = i.getObjectExtendSize();\n                // eslint-disable-next-line no-loss-of-precision\n                var radToDeg = 57.295779513082320876;\n                if (i === impostor) {\n                    var center = impostor.getObjectCenter();\n                    impostor.object.getAbsolutePivotPoint().subtractToRef(center, _this._tmpPositionVector);\n                    _this._tmpPositionVector.divideInPlace(impostor.object.scaling);\n                    //Can also use Array.prototype.push.apply\n                    bodyConfig_1.pos.push(center.x);\n                    bodyConfig_1.pos.push(center.y);\n                    bodyConfig_1.pos.push(center.z);\n                    bodyConfig_1.posShape.push(0, 0, 0);\n                    bodyConfig_1.rotShape.push(0, 0, 0);\n                }\n                else {\n                    var localPosition = i.object.position.clone();\n                    bodyConfig_1.posShape.push(localPosition.x);\n                    bodyConfig_1.posShape.push(localPosition.y);\n                    bodyConfig_1.posShape.push(localPosition.z);\n                    // bodyConfig.pos.push(0, 0, 0);\n                    bodyConfig_1.rotShape.push(rot.x * radToDeg, rot.y * radToDeg, rot.z * radToDeg);\n                }\n                i.object.rotationQuaternion.copyFrom(globalQuaternion_1);\n                // register mesh\n                switch (i.type) {\n                    case PhysicsImpostor.ParticleImpostor:\n                        Logger.Warn(\"No Particle support in OIMO.js. using SphereImpostor instead\");\n                    // eslint-disable-next-line no-fallthrough\n                    case PhysicsImpostor.SphereImpostor: {\n                        var radiusX = extendSize.x;\n                        var radiusY = extendSize.y;\n                        var radiusZ = extendSize.z;\n                        var size = Math.max(checkWithEpsilon_1(radiusX), checkWithEpsilon_1(radiusY), checkWithEpsilon_1(radiusZ)) / 2;\n                        bodyConfig_1.type.push(\"sphere\");\n                        //due to the way oimo works with compounds, add 3 times\n                        bodyConfig_1.size.push(size);\n                        bodyConfig_1.size.push(size);\n                        bodyConfig_1.size.push(size);\n                        break;\n                    }\n                    case PhysicsImpostor.CylinderImpostor: {\n                        var sizeX = checkWithEpsilon_1(extendSize.x) / 2;\n                        var sizeY = checkWithEpsilon_1(extendSize.y);\n                        bodyConfig_1.type.push(\"cylinder\");\n                        bodyConfig_1.size.push(sizeX);\n                        bodyConfig_1.size.push(sizeY);\n                        //due to the way oimo works with compounds, add one more value.\n                        bodyConfig_1.size.push(sizeY);\n                        break;\n                    }\n                    case PhysicsImpostor.PlaneImpostor:\n                    case PhysicsImpostor.BoxImpostor:\n                    default: {\n                        var sizeX = checkWithEpsilon_1(extendSize.x);\n                        var sizeY = checkWithEpsilon_1(extendSize.y);\n                        var sizeZ = checkWithEpsilon_1(extendSize.z);\n                        bodyConfig_1.type.push(\"box\");\n                        //if (i === impostor) {\n                        bodyConfig_1.size.push(sizeX);\n                        bodyConfig_1.size.push(sizeY);\n                        bodyConfig_1.size.push(sizeZ);\n                        //} else {\n                        //    bodyConfig.size.push(0,0,0);\n                        //}\n                        break;\n                    }\n                }\n                //actually not needed, but hey...\n                i.object.rotationQuaternion = oldQuaternion;\n            });\n            impostor.physicsBody = this.world.add(bodyConfig_1);\n            // set the quaternion, ignoring the previously defined (euler) rotation\n            impostor.physicsBody.resetQuaternion(globalQuaternion_1);\n            // update with delta 0, so the body will receive the new rotation.\n            impostor.physicsBody.updatePosition(0);\n        }\n        else {\n            this._tmpPositionVector.copyFromFloats(0, 0, 0);\n        }\n        impostor.setDeltaPosition(this._tmpPositionVector);\n        //this._tmpPositionVector.addInPlace(impostor.mesh.getBoundingInfo().boundingBox.center);\n        //this.setPhysicsBodyTransformation(impostor, this._tmpPositionVector, impostor.mesh.rotationQuaternion);\n    };\n    OimoJSPlugin.prototype.removePhysicsBody = function (impostor) {\n        //impostor.physicsBody.dispose();\n        //Same as : (older oimo versions)\n        this.world.removeRigidBody(impostor.physicsBody);\n    };\n    OimoJSPlugin.prototype.generateJoint = function (impostorJoint) {\n        var mainBody = impostorJoint.mainImpostor.physicsBody;\n        var connectedBody = impostorJoint.connectedImpostor.physicsBody;\n        if (!mainBody || !connectedBody) {\n            return;\n        }\n        var jointData = impostorJoint.joint.jointData;\n        var options = jointData.nativeParams || {};\n        var type;\n        var nativeJointData = {\n            body1: mainBody,\n            body2: connectedBody,\n            axe1: options.axe1 || (jointData.mainAxis ? jointData.mainAxis.asArray() : null),\n            axe2: options.axe2 || (jointData.connectedAxis ? jointData.connectedAxis.asArray() : null),\n            pos1: options.pos1 || (jointData.mainPivot ? jointData.mainPivot.asArray() : null),\n            pos2: options.pos2 || (jointData.connectedPivot ? jointData.connectedPivot.asArray() : null),\n            min: options.min,\n            max: options.max,\n            collision: options.collision || jointData.collision,\n            spring: options.spring,\n            //supporting older version of Oimo\n            world: this.world,\n        };\n        switch (impostorJoint.joint.type) {\n            case PhysicsJoint.BallAndSocketJoint:\n                type = \"jointBall\";\n                break;\n            case PhysicsJoint.SpringJoint: {\n                Logger.Warn(\"OIMO.js doesn't support Spring Constraint. Simulating using DistanceJoint instead\");\n                var springData = jointData;\n                nativeJointData.min = springData.length || nativeJointData.min;\n                //Max should also be set, just make sure it is at least min\n                nativeJointData.max = Math.max(nativeJointData.min, nativeJointData.max);\n            }\n            // eslint-disable-next-line no-fallthrough\n            case PhysicsJoint.DistanceJoint:\n                type = \"jointDistance\";\n                nativeJointData.max = jointData.maxDistance;\n                break;\n            case PhysicsJoint.PrismaticJoint:\n                type = \"jointPrisme\";\n                break;\n            case PhysicsJoint.SliderJoint:\n                type = \"jointSlide\";\n                break;\n            case PhysicsJoint.WheelJoint:\n                type = \"jointWheel\";\n                break;\n            case PhysicsJoint.HingeJoint:\n            default:\n                type = \"jointHinge\";\n                break;\n        }\n        nativeJointData.type = type;\n        impostorJoint.joint.physicsJoint = this.world.add(nativeJointData);\n    };\n    OimoJSPlugin.prototype.removeJoint = function (impostorJoint) {\n        //Bug in Oimo prevents us from disposing a joint in the playground\n        //joint.joint.physicsJoint.dispose();\n        //So we will bruteforce it!\n        try {\n            this.world.removeJoint(impostorJoint.joint.physicsJoint);\n        }\n        catch (e) {\n            Logger.Warn(e);\n        }\n    };\n    OimoJSPlugin.prototype.isSupported = function () {\n        return this.BJSOIMO !== undefined;\n    };\n    OimoJSPlugin.prototype.setTransformationFromPhysicsBody = function (impostor) {\n        if (!impostor.physicsBody.sleeping) {\n            if (impostor.physicsBody.shapes.next) {\n                var parent_1 = impostor.physicsBody.shapes;\n                while (parent_1.next) {\n                    parent_1 = parent_1.next;\n                }\n                impostor.object.position.set(parent_1.position.x, parent_1.position.y, parent_1.position.z);\n            }\n            else {\n                var pos = impostor.physicsBody.getPosition();\n                impostor.object.position.set(pos.x, pos.y, pos.z);\n            }\n            //}\n            if (impostor.object.rotationQuaternion) {\n                var quat = impostor.physicsBody.getQuaternion();\n                impostor.object.rotationQuaternion.set(quat.x, quat.y, quat.z, quat.w);\n            }\n        }\n    };\n    OimoJSPlugin.prototype.setPhysicsBodyTransformation = function (impostor, newPosition, newRotation) {\n        var body = impostor.physicsBody;\n        // disable bidirectional for compound meshes\n        if (impostor.physicsBody.shapes.next) {\n            return;\n        }\n        body.position.set(newPosition.x, newPosition.y, newPosition.z);\n        body.orientation.set(newRotation.x, newRotation.y, newRotation.z, newRotation.w);\n        body.syncShapes();\n        body.awake();\n    };\n    /*private _getLastShape(body: any): any {\n        var lastShape = body.shapes;\n        while (lastShape.next) {\n            lastShape = lastShape.next;\n        }\n        return lastShape;\n    }*/\n    OimoJSPlugin.prototype.setLinearVelocity = function (impostor, velocity) {\n        impostor.physicsBody.linearVelocity.set(velocity.x, velocity.y, velocity.z);\n    };\n    OimoJSPlugin.prototype.setAngularVelocity = function (impostor, velocity) {\n        impostor.physicsBody.angularVelocity.set(velocity.x, velocity.y, velocity.z);\n    };\n    OimoJSPlugin.prototype.getLinearVelocity = function (impostor) {\n        var v = impostor.physicsBody.linearVelocity;\n        if (!v) {\n            return null;\n        }\n        return new Vector3(v.x, v.y, v.z);\n    };\n    OimoJSPlugin.prototype.getAngularVelocity = function (impostor) {\n        var v = impostor.physicsBody.angularVelocity;\n        if (!v) {\n            return null;\n        }\n        return new Vector3(v.x, v.y, v.z);\n    };\n    OimoJSPlugin.prototype.setBodyMass = function (impostor, mass) {\n        var staticBody = mass === 0;\n        //this will actually set the body's density and not its mass.\n        //But this is how oimo treats the mass variable.\n        impostor.physicsBody.shapes.density = staticBody ? 1 : mass;\n        impostor.physicsBody.setupMass(staticBody ? 0x2 : 0x1);\n    };\n    OimoJSPlugin.prototype.getBodyMass = function (impostor) {\n        return impostor.physicsBody.shapes.density;\n    };\n    OimoJSPlugin.prototype.getBodyFriction = function (impostor) {\n        return impostor.physicsBody.shapes.friction;\n    };\n    OimoJSPlugin.prototype.setBodyFriction = function (impostor, friction) {\n        impostor.physicsBody.shapes.friction = friction;\n    };\n    OimoJSPlugin.prototype.getBodyRestitution = function (impostor) {\n        return impostor.physicsBody.shapes.restitution;\n    };\n    OimoJSPlugin.prototype.setBodyRestitution = function (impostor, restitution) {\n        impostor.physicsBody.shapes.restitution = restitution;\n    };\n    OimoJSPlugin.prototype.sleepBody = function (impostor) {\n        impostor.physicsBody.sleep();\n    };\n    OimoJSPlugin.prototype.wakeUpBody = function (impostor) {\n        impostor.physicsBody.awake();\n    };\n    OimoJSPlugin.prototype.updateDistanceJoint = function (joint, maxDistance, minDistance) {\n        joint.physicsJoint.limitMotor.upperLimit = maxDistance;\n        if (minDistance !== void 0) {\n            joint.physicsJoint.limitMotor.lowerLimit = minDistance;\n        }\n    };\n    OimoJSPlugin.prototype.setMotor = function (joint, speed, force, motorIndex) {\n        if (force !== undefined) {\n            Logger.Warn(\"OimoJS plugin currently has unexpected behavior when using setMotor with force parameter\");\n        }\n        else {\n            force = 1e6;\n        }\n        speed *= -1;\n        //TODO separate rotational and transational motors.\n        var motor = motorIndex\n            ? joint.physicsJoint.rotationalLimitMotor2\n            : joint.physicsJoint.rotationalLimitMotor1 || joint.physicsJoint.rotationalLimitMotor || joint.physicsJoint.limitMotor;\n        if (motor) {\n            motor.setMotor(speed, force);\n        }\n    };\n    OimoJSPlugin.prototype.setLimit = function (joint, upperLimit, lowerLimit, motorIndex) {\n        //TODO separate rotational and transational motors.\n        var motor = motorIndex\n            ? joint.physicsJoint.rotationalLimitMotor2\n            : joint.physicsJoint.rotationalLimitMotor1 || joint.physicsJoint.rotationalLimitMotor || joint.physicsJoint.limitMotor;\n        if (motor) {\n            motor.setLimit(upperLimit, lowerLimit === void 0 ? -upperLimit : lowerLimit);\n        }\n    };\n    OimoJSPlugin.prototype.syncMeshWithImpostor = function (mesh, impostor) {\n        var body = impostor.physicsBody;\n        mesh.position.x = body.position.x;\n        mesh.position.y = body.position.y;\n        mesh.position.z = body.position.z;\n        if (mesh.rotationQuaternion) {\n            mesh.rotationQuaternion.x = body.orientation.x;\n            mesh.rotationQuaternion.y = body.orientation.y;\n            mesh.rotationQuaternion.z = body.orientation.z;\n            mesh.rotationQuaternion.w = body.orientation.w;\n        }\n    };\n    OimoJSPlugin.prototype.getRadius = function (impostor) {\n        return impostor.physicsBody.shapes.radius;\n    };\n    OimoJSPlugin.prototype.getBoxSizeToRef = function (impostor, result) {\n        var shape = impostor.physicsBody.shapes;\n        result.x = shape.halfWidth * 2;\n        result.y = shape.halfHeight * 2;\n        result.z = shape.halfDepth * 2;\n    };\n    OimoJSPlugin.prototype.dispose = function () {\n        this.world.clear();\n    };\n    /**\n     * Does a raycast in the physics world\n     * @param from when should the ray start?\n     * @param to when should the ray end?\n     * @returns PhysicsRaycastResult\n     */\n    OimoJSPlugin.prototype.raycast = function (from, to) {\n        Logger.Warn(\"raycast is not currently supported by the Oimo physics plugin\");\n        this._raycastResult.reset(from, to);\n        return this._raycastResult;\n    };\n    return OimoJSPlugin;\n}());\nexport { OimoJSPlugin };\n//# sourceMappingURL=oimoJSPlugin.js.map","import { Logger } from \"../Misc/logger.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { Scene } from \"../scene.js\";\nimport { PhysicsEngine } from \"./physicsEngine.js\";\nimport { PhysicsJoint } from \"./physicsJoint.js\";\n/**\n * Gets the current physics engine\n * @returns a IPhysicsEngine or null if none attached\n */\nScene.prototype.getPhysicsEngine = function () {\n    return this._physicsEngine;\n};\n/**\n * Enables physics to the current scene\n * @param gravity defines the scene's gravity for the physics engine\n * @param plugin defines the physics engine to be used. defaults to CannonJS.\n * @return a boolean indicating if the physics engine was initialized\n */\nScene.prototype.enablePhysics = function (gravity, plugin) {\n    if (gravity === void 0) { gravity = null; }\n    if (this._physicsEngine) {\n        return true;\n    }\n    // Register the component to the scene\n    var component = this._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE);\n    if (!component) {\n        component = new PhysicsEngineSceneComponent(this);\n        this._addComponent(component);\n    }\n    try {\n        this._physicsEngine = new PhysicsEngine(gravity, plugin);\n        this._physicsTimeAccumulator = 0;\n        return true;\n    }\n    catch (e) {\n        Logger.Error(e.message);\n        return false;\n    }\n};\n/**\n * Disables and disposes the physics engine associated with the scene\n */\nScene.prototype.disablePhysicsEngine = function () {\n    if (!this._physicsEngine) {\n        return;\n    }\n    this._physicsEngine.dispose();\n    this._physicsEngine = null;\n};\n/**\n * Gets a boolean indicating if there is an active physics engine\n * @returns a boolean indicating if there is an active physics engine\n */\nScene.prototype.isPhysicsEnabled = function () {\n    return this._physicsEngine !== undefined;\n};\n/**\n * Deletes a physics compound impostor\n * @param compound defines the compound to delete\n */\nScene.prototype.deleteCompoundImpostor = function (compound) {\n    var mesh = compound.parts[0].mesh;\n    if (mesh.physicsImpostor) {\n        mesh.physicsImpostor.dispose( /*true*/);\n        mesh.physicsImpostor = null;\n    }\n};\n/**\n * @param step\n * @hidden\n */\nScene.prototype._advancePhysicsEngineStep = function (step) {\n    if (this._physicsEngine) {\n        var subTime = this._physicsEngine.getSubTimeStep();\n        if (subTime > 0) {\n            this._physicsTimeAccumulator += step;\n            while (this._physicsTimeAccumulator > subTime) {\n                this.onBeforePhysicsObservable.notifyObservers(this);\n                this._physicsEngine._step(subTime / 1000);\n                this.onAfterPhysicsObservable.notifyObservers(this);\n                this._physicsTimeAccumulator -= subTime;\n            }\n        }\n        else {\n            this.onBeforePhysicsObservable.notifyObservers(this);\n            this._physicsEngine._step(step / 1000);\n            this.onAfterPhysicsObservable.notifyObservers(this);\n        }\n    }\n};\nObject.defineProperty(AbstractMesh.prototype, \"physicsImpostor\", {\n    get: function () {\n        return this._physicsImpostor;\n    },\n    set: function (value) {\n        var _this = this;\n        if (this._physicsImpostor === value) {\n            return;\n        }\n        if (this._disposePhysicsObserver) {\n            this.onDisposeObservable.remove(this._disposePhysicsObserver);\n        }\n        this._physicsImpostor = value;\n        if (value) {\n            this._disposePhysicsObserver = this.onDisposeObservable.add(function () {\n                // Physics\n                if (_this.physicsImpostor) {\n                    _this.physicsImpostor.dispose( /*!doNotRecurse*/);\n                    _this.physicsImpostor = null;\n                }\n            });\n        }\n    },\n    enumerable: true,\n    configurable: true,\n});\n/**\n * Gets the current physics impostor\n * @see https://doc.babylonjs.com/features/physics_engine\n * @returns a physics impostor or null\n */\nAbstractMesh.prototype.getPhysicsImpostor = function () {\n    return this.physicsImpostor;\n};\n/**\n * Apply a physic impulse to the mesh\n * @param force defines the force to apply\n * @param contactPoint defines where to apply the force\n * @returns the current mesh\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\n */\nAbstractMesh.prototype.applyImpulse = function (force, contactPoint) {\n    if (!this.physicsImpostor) {\n        return this;\n    }\n    this.physicsImpostor.applyImpulse(force, contactPoint);\n    return this;\n};\n/**\n * Creates a physic joint between two meshes\n * @param otherMesh defines the other mesh to use\n * @param pivot1 defines the pivot to use on this mesh\n * @param pivot2 defines the pivot to use on the other mesh\n * @param options defines additional options (can be plugin dependent)\n * @returns the current mesh\n * @see https://www.babylonjs-playground.com/#0BS5U0#0\n */\nAbstractMesh.prototype.setPhysicsLinkWith = function (otherMesh, pivot1, pivot2, options) {\n    if (!this.physicsImpostor || !otherMesh.physicsImpostor) {\n        return this;\n    }\n    this.physicsImpostor.createJoint(otherMesh.physicsImpostor, PhysicsJoint.HingeJoint, {\n        mainPivot: pivot1,\n        connectedPivot: pivot2,\n        nativeParams: options,\n    });\n    return this;\n};\n/**\n * Defines the physics engine scene component responsible to manage a physics engine\n */\nvar PhysicsEngineSceneComponent = /** @class */ (function () {\n    /**\n     * Creates a new instance of the component for the given scene\n     * @param scene Defines the scene to register the component in\n     */\n    function PhysicsEngineSceneComponent(scene) {\n        var _this = this;\n        /**\n         * The component name helpful to identify the component in the list of scene components.\n         */\n        this.name = SceneComponentConstants.NAME_PHYSICSENGINE;\n        this.scene = scene;\n        this.scene.onBeforePhysicsObservable = new Observable();\n        this.scene.onAfterPhysicsObservable = new Observable();\n        // Replace the function used to get the deterministic frame time\n        this.scene.getDeterministicFrameTime = function () {\n            if (_this.scene._physicsEngine) {\n                return _this.scene._physicsEngine.getTimeStep() * 1000;\n            }\n            return 1000.0 / 60.0;\n        };\n    }\n    /**\n     * Registers the component in a given scene\n     */\n    PhysicsEngineSceneComponent.prototype.register = function () { };\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    PhysicsEngineSceneComponent.prototype.rebuild = function () {\n        // Nothing to do for this component\n    };\n    /**\n     * Disposes the component and the associated resources\n     */\n    PhysicsEngineSceneComponent.prototype.dispose = function () {\n        this.scene.onBeforePhysicsObservable.clear();\n        this.scene.onAfterPhysicsObservable.clear();\n        if (this.scene._physicsEngine) {\n            this.scene.disablePhysicsEngine();\n        }\n    };\n    return PhysicsEngineSceneComponent;\n}());\nexport { PhysicsEngineSceneComponent };\n//# sourceMappingURL=physicsEngineComponent.js.map","import { __assign } from \"tslib\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { CreateSphere } from \"../Meshes/Builders/sphereBuilder.js\";\nimport { CreateCylinder } from \"../Meshes/Builders/cylinderBuilder.js\";\nimport { Ray } from \"../Culling/ray.js\";\n/**\n * A helper for physics simulations\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\n */\nvar PhysicsHelper = /** @class */ (function () {\n    /**\n     * Initializes the Physics helper\n     * @param scene Babylon.js scene\n     */\n    function PhysicsHelper(scene) {\n        this._scene = scene;\n        this._physicsEngine = this._scene.getPhysicsEngine();\n        if (!this._physicsEngine) {\n            Logger.Warn(\"Physics engine not enabled. Please enable the physics before you can use the methods.\");\n            return;\n        }\n    }\n    /**\n     * Applies a radial explosion impulse\n     * @param origin the origin of the explosion\n     * @param radiusOrEventOptions the radius or the options of radial explosion\n     * @param strength the explosion strength\n     * @param falloff possible options: Constant & Linear. Defaults to Constant\n     * @returns A physics radial explosion event, or null\n     */\n    PhysicsHelper.prototype.applyRadialExplosionImpulse = function (origin, radiusOrEventOptions, strength, falloff) {\n        if (!this._physicsEngine) {\n            Logger.Warn(\"Physics engine not enabled. Please enable the physics before you call this method.\");\n            return null;\n        }\n        var impostors = this._physicsEngine.getImpostors();\n        if (impostors.length === 0) {\n            return null;\n        }\n        if (typeof radiusOrEventOptions === \"number\") {\n            radiusOrEventOptions = new PhysicsRadialExplosionEventOptions();\n            radiusOrEventOptions.radius = radiusOrEventOptions;\n            radiusOrEventOptions.strength = strength || radiusOrEventOptions.strength;\n            radiusOrEventOptions.falloff = falloff || radiusOrEventOptions.falloff;\n        }\n        var event = new PhysicsRadialExplosionEvent(this._scene, radiusOrEventOptions);\n        var affectedImpostorsWithData = Array();\n        impostors.forEach(function (impostor) {\n            var impostorHitData = event.getImpostorHitData(impostor, origin);\n            if (!impostorHitData) {\n                return;\n            }\n            impostor.applyImpulse(impostorHitData.force, impostorHitData.contactPoint);\n            affectedImpostorsWithData.push({\n                impostor: impostor,\n                hitData: impostorHitData,\n            });\n        });\n        event.triggerAffectedImpostorsCallback(affectedImpostorsWithData);\n        event.dispose(false);\n        return event;\n    };\n    /**\n     * Applies a radial explosion force\n     * @param origin the origin of the explosion\n     * @param radiusOrEventOptions the radius or the options of radial explosion\n     * @param strength the explosion strength\n     * @param falloff possible options: Constant & Linear. Defaults to Constant\n     * @returns A physics radial explosion event, or null\n     */\n    PhysicsHelper.prototype.applyRadialExplosionForce = function (origin, radiusOrEventOptions, strength, falloff) {\n        if (!this._physicsEngine) {\n            Logger.Warn(\"Physics engine not enabled. Please enable the physics before you call the PhysicsHelper.\");\n            return null;\n        }\n        var impostors = this._physicsEngine.getImpostors();\n        if (impostors.length === 0) {\n            return null;\n        }\n        if (typeof radiusOrEventOptions === \"number\") {\n            radiusOrEventOptions = new PhysicsRadialExplosionEventOptions();\n            radiusOrEventOptions.radius = radiusOrEventOptions;\n            radiusOrEventOptions.strength = strength || radiusOrEventOptions.strength;\n            radiusOrEventOptions.falloff = falloff || radiusOrEventOptions.falloff;\n        }\n        var event = new PhysicsRadialExplosionEvent(this._scene, radiusOrEventOptions);\n        var affectedImpostorsWithData = Array();\n        impostors.forEach(function (impostor) {\n            var impostorHitData = event.getImpostorHitData(impostor, origin);\n            if (!impostorHitData) {\n                return;\n            }\n            impostor.applyForce(impostorHitData.force, impostorHitData.contactPoint);\n            affectedImpostorsWithData.push({\n                impostor: impostor,\n                hitData: impostorHitData,\n            });\n        });\n        event.triggerAffectedImpostorsCallback(affectedImpostorsWithData);\n        event.dispose(false);\n        return event;\n    };\n    /**\n     * Creates a gravitational field\n     * @param origin the origin of the explosion\n     * @param radiusOrEventOptions the radius or the options of radial explosion\n     * @param strength the explosion strength\n     * @param falloff possible options: Constant & Linear. Defaults to Constant\n     * @returns A physics gravitational field event, or null\n     */\n    PhysicsHelper.prototype.gravitationalField = function (origin, radiusOrEventOptions, strength, falloff) {\n        if (!this._physicsEngine) {\n            Logger.Warn(\"Physics engine not enabled. Please enable the physics before you call the PhysicsHelper.\");\n            return null;\n        }\n        var impostors = this._physicsEngine.getImpostors();\n        if (impostors.length === 0) {\n            return null;\n        }\n        if (typeof radiusOrEventOptions === \"number\") {\n            radiusOrEventOptions = new PhysicsRadialExplosionEventOptions();\n            radiusOrEventOptions.radius = radiusOrEventOptions;\n            radiusOrEventOptions.strength = strength || radiusOrEventOptions.strength;\n            radiusOrEventOptions.falloff = falloff || radiusOrEventOptions.falloff;\n        }\n        var event = new PhysicsGravitationalFieldEvent(this, this._scene, origin, radiusOrEventOptions);\n        event.dispose(false);\n        return event;\n    };\n    /**\n     * Creates a physics updraft event\n     * @param origin the origin of the updraft\n     * @param radiusOrEventOptions the radius or the options of the updraft\n     * @param strength the strength of the updraft\n     * @param height the height of the updraft\n     * @param updraftMode possible options: Center & Perpendicular. Defaults to Center\n     * @returns A physics updraft event, or null\n     */\n    PhysicsHelper.prototype.updraft = function (origin, radiusOrEventOptions, strength, height, updraftMode) {\n        if (!this._physicsEngine) {\n            Logger.Warn(\"Physics engine not enabled. Please enable the physics before you call the PhysicsHelper.\");\n            return null;\n        }\n        if (this._physicsEngine.getImpostors().length === 0) {\n            return null;\n        }\n        if (typeof radiusOrEventOptions === \"number\") {\n            radiusOrEventOptions = new PhysicsUpdraftEventOptions();\n            radiusOrEventOptions.radius = radiusOrEventOptions;\n            radiusOrEventOptions.strength = strength || radiusOrEventOptions.strength;\n            radiusOrEventOptions.height = height || radiusOrEventOptions.height;\n            radiusOrEventOptions.updraftMode = updraftMode || radiusOrEventOptions.updraftMode;\n        }\n        var event = new PhysicsUpdraftEvent(this._scene, origin, radiusOrEventOptions);\n        event.dispose(false);\n        return event;\n    };\n    /**\n     * Creates a physics vortex event\n     * @param origin the of the vortex\n     * @param radiusOrEventOptions the radius or the options of the vortex\n     * @param strength the strength of the vortex\n     * @param height   the height of the vortex\n     * @returns a Physics vortex event, or null\n     * A physics vortex event or null\n     */\n    PhysicsHelper.prototype.vortex = function (origin, radiusOrEventOptions, strength, height) {\n        if (!this._physicsEngine) {\n            Logger.Warn(\"Physics engine not enabled. Please enable the physics before you call the PhysicsHelper.\");\n            return null;\n        }\n        if (this._physicsEngine.getImpostors().length === 0) {\n            return null;\n        }\n        if (typeof radiusOrEventOptions === \"number\") {\n            radiusOrEventOptions = new PhysicsVortexEventOptions();\n            radiusOrEventOptions.radius = radiusOrEventOptions;\n            radiusOrEventOptions.strength = strength || radiusOrEventOptions.strength;\n            radiusOrEventOptions.height = height || radiusOrEventOptions.height;\n        }\n        var event = new PhysicsVortexEvent(this._scene, origin, radiusOrEventOptions);\n        event.dispose(false);\n        return event;\n    };\n    return PhysicsHelper;\n}());\nexport { PhysicsHelper };\n/**\n * Represents a physics radial explosion event\n */\nvar PhysicsRadialExplosionEvent = /** @class */ (function () {\n    /**\n     * Initializes a radial explosion event\n     * @param _scene BabylonJS scene\n     * @param _options The options for the vortex event\n     */\n    function PhysicsRadialExplosionEvent(_scene, _options) {\n        this._scene = _scene;\n        this._options = _options;\n        this._dataFetched = false; // check if the data has been fetched. If not, do cleanup\n        this._options = __assign(__assign({}, new PhysicsRadialExplosionEventOptions()), this._options);\n    }\n    /**\n     * Returns the data related to the radial explosion event (sphere).\n     * @returns The radial explosion event data\n     */\n    PhysicsRadialExplosionEvent.prototype.getData = function () {\n        this._dataFetched = true;\n        return {\n            sphere: this._sphere,\n        };\n    };\n    /**\n     * Returns the force and contact point of the impostor or false, if the impostor is not affected by the force/impulse.\n     * @param impostor A physics imposter\n     * @param origin the origin of the explosion\n     * @returns {Nullable<PhysicsHitData>} A physics force and contact point, or null\n     */\n    PhysicsRadialExplosionEvent.prototype.getImpostorHitData = function (impostor, origin) {\n        if (impostor.mass === 0) {\n            return null;\n        }\n        if (!this._intersectsWithSphere(impostor, origin, this._options.radius)) {\n            return null;\n        }\n        if (impostor.object.getClassName() !== \"Mesh\" && impostor.object.getClassName() !== \"InstancedMesh\") {\n            return null;\n        }\n        var impostorObjectCenter = impostor.getObjectCenter();\n        var direction = impostorObjectCenter.subtract(origin);\n        var ray = new Ray(origin, direction, this._options.radius);\n        var hit = ray.intersectsMesh(impostor.object);\n        var contactPoint = hit.pickedPoint;\n        if (!contactPoint) {\n            return null;\n        }\n        var distanceFromOrigin = Vector3.Distance(origin, contactPoint);\n        if (distanceFromOrigin > this._options.radius) {\n            return null;\n        }\n        var multiplier = this._options.falloff === PhysicsRadialImpulseFalloff.Constant ? this._options.strength : this._options.strength * (1 - distanceFromOrigin / this._options.radius);\n        var force = direction.multiplyByFloats(multiplier, multiplier, multiplier);\n        return { force: force, contactPoint: contactPoint, distanceFromOrigin: distanceFromOrigin };\n    };\n    /**\n     * Triggers affected impostors callbacks\n     * @param affectedImpostorsWithData defines the list of affected impostors (including associated data)\n     */\n    PhysicsRadialExplosionEvent.prototype.triggerAffectedImpostorsCallback = function (affectedImpostorsWithData) {\n        if (this._options.affectedImpostorsCallback) {\n            this._options.affectedImpostorsCallback(affectedImpostorsWithData);\n        }\n    };\n    /**\n     * Disposes the sphere.\n     * @param force Specifies if the sphere should be disposed by force\n     */\n    PhysicsRadialExplosionEvent.prototype.dispose = function (force) {\n        var _this = this;\n        if (force === void 0) { force = true; }\n        if (force) {\n            this._sphere.dispose();\n        }\n        else {\n            setTimeout(function () {\n                if (!_this._dataFetched) {\n                    _this._sphere.dispose();\n                }\n            }, 0);\n        }\n    };\n    /*** Helpers ***/\n    PhysicsRadialExplosionEvent.prototype._prepareSphere = function () {\n        if (!this._sphere) {\n            this._sphere = CreateSphere(\"radialExplosionEventSphere\", this._options.sphere, this._scene);\n            this._sphere.isVisible = false;\n        }\n    };\n    PhysicsRadialExplosionEvent.prototype._intersectsWithSphere = function (impostor, origin, radius) {\n        var impostorObject = impostor.object;\n        this._prepareSphere();\n        this._sphere.position = origin;\n        this._sphere.scaling = new Vector3(radius * 2, radius * 2, radius * 2);\n        this._sphere._updateBoundingInfo();\n        this._sphere.computeWorldMatrix(true);\n        return this._sphere.intersectsMesh(impostorObject, true);\n    };\n    return PhysicsRadialExplosionEvent;\n}());\n/**\n * Represents a gravitational field event\n */\nvar PhysicsGravitationalFieldEvent = /** @class */ (function () {\n    /**\n     * Initializes the physics gravitational field event\n     * @param _physicsHelper A physics helper\n     * @param _scene BabylonJS scene\n     * @param _origin The origin position of the gravitational field event\n     * @param _options The options for the vortex event\n     */\n    function PhysicsGravitationalFieldEvent(_physicsHelper, _scene, _origin, _options) {\n        this._physicsHelper = _physicsHelper;\n        this._scene = _scene;\n        this._origin = _origin;\n        this._options = _options;\n        this._dataFetched = false; // check if the has been fetched the data. If not, do cleanup\n        this._options = __assign(__assign({}, new PhysicsRadialExplosionEventOptions()), this._options);\n        this._tickCallback = this._tick.bind(this);\n        this._options.strength = this._options.strength * -1;\n    }\n    /**\n     * Returns the data related to the gravitational field event (sphere).\n     * @returns A gravitational field event\n     */\n    PhysicsGravitationalFieldEvent.prototype.getData = function () {\n        this._dataFetched = true;\n        return {\n            sphere: this._sphere,\n        };\n    };\n    /**\n     * Enables the gravitational field.\n     */\n    PhysicsGravitationalFieldEvent.prototype.enable = function () {\n        this._tickCallback.call(this);\n        this._scene.registerBeforeRender(this._tickCallback);\n    };\n    /**\n     * Disables the gravitational field.\n     */\n    PhysicsGravitationalFieldEvent.prototype.disable = function () {\n        this._scene.unregisterBeforeRender(this._tickCallback);\n    };\n    /**\n     * Disposes the sphere.\n     * @param force The force to dispose from the gravitational field event\n     */\n    PhysicsGravitationalFieldEvent.prototype.dispose = function (force) {\n        var _this = this;\n        if (force === void 0) { force = true; }\n        if (force) {\n            this._sphere.dispose();\n        }\n        else {\n            setTimeout(function () {\n                if (!_this._dataFetched) {\n                    _this._sphere.dispose();\n                }\n            }, 0);\n        }\n    };\n    PhysicsGravitationalFieldEvent.prototype._tick = function () {\n        // Since the params won't change, we fetch the event only once\n        if (this._sphere) {\n            this._physicsHelper.applyRadialExplosionForce(this._origin, this._options);\n        }\n        else {\n            var radialExplosionEvent = this._physicsHelper.applyRadialExplosionForce(this._origin, this._options);\n            if (radialExplosionEvent) {\n                this._sphere = radialExplosionEvent.getData().sphere.clone(\"radialExplosionEventSphereClone\");\n            }\n        }\n    };\n    return PhysicsGravitationalFieldEvent;\n}());\n/**\n * Represents a physics updraft event\n */\nvar PhysicsUpdraftEvent = /** @class */ (function () {\n    /**\n     * Initializes the physics updraft event\n     * @param _scene BabylonJS scene\n     * @param _origin The origin position of the updraft\n     * @param _options The options for the updraft event\n     */\n    function PhysicsUpdraftEvent(_scene, _origin, _options) {\n        this._scene = _scene;\n        this._origin = _origin;\n        this._options = _options;\n        this._originTop = Vector3.Zero(); // the most upper part of the cylinder\n        this._originDirection = Vector3.Zero(); // used if the updraftMode is perpendicular\n        this._cylinderPosition = Vector3.Zero(); // to keep the cylinders position, because normally the origin is in the center and not on the bottom\n        this._dataFetched = false; // check if the has been fetched the data. If not, do cleanup\n        this._physicsEngine = this._scene.getPhysicsEngine();\n        this._options = __assign(__assign({}, new PhysicsUpdraftEventOptions()), this._options);\n        this._origin.addToRef(new Vector3(0, this._options.height / 2, 0), this._cylinderPosition);\n        this._origin.addToRef(new Vector3(0, this._options.height, 0), this._originTop);\n        if (this._options.updraftMode === PhysicsUpdraftMode.Perpendicular) {\n            this._originDirection = this._origin.subtract(this._originTop).normalize();\n        }\n        this._tickCallback = this._tick.bind(this);\n        this._prepareCylinder();\n    }\n    /**\n     * Returns the data related to the updraft event (cylinder).\n     * @returns A physics updraft event\n     */\n    PhysicsUpdraftEvent.prototype.getData = function () {\n        this._dataFetched = true;\n        return {\n            cylinder: this._cylinder,\n        };\n    };\n    /**\n     * Enables the updraft.\n     */\n    PhysicsUpdraftEvent.prototype.enable = function () {\n        this._tickCallback.call(this);\n        this._scene.registerBeforeRender(this._tickCallback);\n    };\n    /**\n     * Disables the updraft.\n     */\n    PhysicsUpdraftEvent.prototype.disable = function () {\n        this._scene.unregisterBeforeRender(this._tickCallback);\n    };\n    /**\n     * Disposes the cylinder.\n     * @param force Specifies if the updraft should be disposed by force\n     */\n    PhysicsUpdraftEvent.prototype.dispose = function (force) {\n        var _this = this;\n        if (force === void 0) { force = true; }\n        if (!this._cylinder) {\n            return;\n        }\n        if (force) {\n            this._cylinder.dispose();\n        }\n        else {\n            setTimeout(function () {\n                if (!_this._dataFetched) {\n                    _this._cylinder.dispose();\n                }\n            }, 0);\n        }\n    };\n    PhysicsUpdraftEvent.prototype._getImpostorHitData = function (impostor) {\n        if (impostor.mass === 0) {\n            return null;\n        }\n        if (!this._intersectsWithCylinder(impostor)) {\n            return null;\n        }\n        var impostorObjectCenter = impostor.getObjectCenter();\n        var direction;\n        if (this._options.updraftMode === PhysicsUpdraftMode.Perpendicular) {\n            direction = this._originDirection;\n        }\n        else {\n            direction = impostorObjectCenter.subtract(this._originTop);\n        }\n        var distanceFromOrigin = Vector3.Distance(this._origin, impostorObjectCenter);\n        var multiplier = this._options.strength * -1;\n        var force = direction.multiplyByFloats(multiplier, multiplier, multiplier);\n        return { force: force, contactPoint: impostorObjectCenter, distanceFromOrigin: distanceFromOrigin };\n    };\n    PhysicsUpdraftEvent.prototype._tick = function () {\n        var _this = this;\n        this._physicsEngine.getImpostors().forEach(function (impostor) {\n            var impostorHitData = _this._getImpostorHitData(impostor);\n            if (!impostorHitData) {\n                return;\n            }\n            impostor.applyForce(impostorHitData.force, impostorHitData.contactPoint);\n        });\n    };\n    /*** Helpers ***/\n    PhysicsUpdraftEvent.prototype._prepareCylinder = function () {\n        if (!this._cylinder) {\n            this._cylinder = CreateCylinder(\"updraftEventCylinder\", {\n                height: this._options.height,\n                diameter: this._options.radius * 2,\n            }, this._scene);\n            this._cylinder.isVisible = false;\n        }\n    };\n    PhysicsUpdraftEvent.prototype._intersectsWithCylinder = function (impostor) {\n        var impostorObject = impostor.object;\n        this._cylinder.position = this._cylinderPosition;\n        return this._cylinder.intersectsMesh(impostorObject, true);\n    };\n    return PhysicsUpdraftEvent;\n}());\n/**\n * Represents a physics vortex event\n */\nvar PhysicsVortexEvent = /** @class */ (function () {\n    /**\n     * Initializes the physics vortex event\n     * @param _scene The BabylonJS scene\n     * @param _origin The origin position of the vortex\n     * @param _options The options for the vortex event\n     */\n    function PhysicsVortexEvent(_scene, _origin, _options) {\n        this._scene = _scene;\n        this._origin = _origin;\n        this._options = _options;\n        this._originTop = Vector3.Zero(); // the most upper part of the cylinder\n        this._cylinderPosition = Vector3.Zero(); // to keep the cylinders position, because normally the origin is in the center and not on the bottom\n        this._dataFetched = false; // check if the has been fetched the data. If not, do cleanup\n        this._physicsEngine = this._scene.getPhysicsEngine();\n        this._options = __assign(__assign({}, new PhysicsVortexEventOptions()), this._options);\n        this._origin.addToRef(new Vector3(0, this._options.height / 2, 0), this._cylinderPosition);\n        this._origin.addToRef(new Vector3(0, this._options.height, 0), this._originTop);\n        this._tickCallback = this._tick.bind(this);\n        this._prepareCylinder();\n    }\n    /**\n     * Returns the data related to the vortex event (cylinder).\n     * @returns The physics vortex event data\n     */\n    PhysicsVortexEvent.prototype.getData = function () {\n        this._dataFetched = true;\n        return {\n            cylinder: this._cylinder,\n        };\n    };\n    /**\n     * Enables the vortex.\n     */\n    PhysicsVortexEvent.prototype.enable = function () {\n        this._tickCallback.call(this);\n        this._scene.registerBeforeRender(this._tickCallback);\n    };\n    /**\n     * Disables the cortex.\n     */\n    PhysicsVortexEvent.prototype.disable = function () {\n        this._scene.unregisterBeforeRender(this._tickCallback);\n    };\n    /**\n     * Disposes the sphere.\n     * @param force\n     */\n    PhysicsVortexEvent.prototype.dispose = function (force) {\n        var _this = this;\n        if (force === void 0) { force = true; }\n        if (force) {\n            this._cylinder.dispose();\n        }\n        else {\n            setTimeout(function () {\n                if (!_this._dataFetched) {\n                    _this._cylinder.dispose();\n                }\n            }, 0);\n        }\n    };\n    PhysicsVortexEvent.prototype._getImpostorHitData = function (impostor) {\n        if (impostor.mass === 0) {\n            return null;\n        }\n        if (!this._intersectsWithCylinder(impostor)) {\n            return null;\n        }\n        if (impostor.object.getClassName() !== \"Mesh\" && impostor.object.getClassName() !== \"InstancedMesh\") {\n            return null;\n        }\n        var impostorObjectCenter = impostor.getObjectCenter();\n        var originOnPlane = new Vector3(this._origin.x, impostorObjectCenter.y, this._origin.z); // the distance to the origin as if both objects were on a plane (Y-axis)\n        var originToImpostorDirection = impostorObjectCenter.subtract(originOnPlane);\n        var ray = new Ray(originOnPlane, originToImpostorDirection, this._options.radius);\n        var hit = ray.intersectsMesh(impostor.object);\n        var contactPoint = hit.pickedPoint;\n        if (!contactPoint) {\n            return null;\n        }\n        var absoluteDistanceFromOrigin = hit.distance / this._options.radius;\n        var directionToOrigin = contactPoint.normalize();\n        if (absoluteDistanceFromOrigin > this._options.centripetalForceThreshold) {\n            directionToOrigin = directionToOrigin.negate();\n        }\n        var forceX;\n        var forceY;\n        var forceZ;\n        if (absoluteDistanceFromOrigin > this._options.centripetalForceThreshold) {\n            forceX = directionToOrigin.x * this._options.centripetalForceMultiplier;\n            forceY = directionToOrigin.y * this._options.updraftForceMultiplier;\n            forceZ = directionToOrigin.z * this._options.centripetalForceMultiplier;\n        }\n        else {\n            var perpendicularDirection = Vector3.Cross(originOnPlane, impostorObjectCenter).normalize();\n            forceX = (perpendicularDirection.x + directionToOrigin.x) * this._options.centrifugalForceMultiplier;\n            forceY = this._originTop.y * this._options.updraftForceMultiplier;\n            forceZ = (perpendicularDirection.z + directionToOrigin.z) * this._options.centrifugalForceMultiplier;\n        }\n        var force = new Vector3(forceX, forceY, forceZ);\n        force = force.multiplyByFloats(this._options.strength, this._options.strength, this._options.strength);\n        return { force: force, contactPoint: impostorObjectCenter, distanceFromOrigin: absoluteDistanceFromOrigin };\n    };\n    PhysicsVortexEvent.prototype._tick = function () {\n        var _this = this;\n        this._physicsEngine.getImpostors().forEach(function (impostor) {\n            var impostorHitData = _this._getImpostorHitData(impostor);\n            if (!impostorHitData) {\n                return;\n            }\n            impostor.applyForce(impostorHitData.force, impostorHitData.contactPoint);\n        });\n    };\n    /*** Helpers ***/\n    PhysicsVortexEvent.prototype._prepareCylinder = function () {\n        if (!this._cylinder) {\n            this._cylinder = CreateCylinder(\"vortexEventCylinder\", {\n                height: this._options.height,\n                diameter: this._options.radius * 2,\n            }, this._scene);\n            this._cylinder.isVisible = false;\n        }\n    };\n    PhysicsVortexEvent.prototype._intersectsWithCylinder = function (impostor) {\n        var impostorObject = impostor.object;\n        this._cylinder.position = this._cylinderPosition;\n        return this._cylinder.intersectsMesh(impostorObject, true);\n    };\n    return PhysicsVortexEvent;\n}());\n/**\n * Options fot the radial explosion event\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\n */\nvar PhysicsRadialExplosionEventOptions = /** @class */ (function () {\n    function PhysicsRadialExplosionEventOptions() {\n        /**\n         * The radius of the sphere for the radial explosion.\n         */\n        this.radius = 5;\n        /**\n         * The strength of the explosion.\n         */\n        this.strength = 10;\n        /**\n         * The strength of the force in correspondence to the distance of the affected object\n         */\n        this.falloff = PhysicsRadialImpulseFalloff.Constant;\n        /**\n         * Sphere options for the radial explosion.\n         */\n        this.sphere = { segments: 32, diameter: 1 };\n    }\n    return PhysicsRadialExplosionEventOptions;\n}());\nexport { PhysicsRadialExplosionEventOptions };\n/**\n * Options fot the updraft event\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\n */\nvar PhysicsUpdraftEventOptions = /** @class */ (function () {\n    function PhysicsUpdraftEventOptions() {\n        /**\n         * The radius of the cylinder for the vortex\n         */\n        this.radius = 5;\n        /**\n         * The strength of the updraft.\n         */\n        this.strength = 10;\n        /**\n         * The height of the cylinder for the updraft.\n         */\n        this.height = 10;\n        /**\n         * The mode for the the updraft.\n         */\n        this.updraftMode = PhysicsUpdraftMode.Center;\n    }\n    return PhysicsUpdraftEventOptions;\n}());\nexport { PhysicsUpdraftEventOptions };\n/**\n * Options fot the vortex event\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\n */\nvar PhysicsVortexEventOptions = /** @class */ (function () {\n    function PhysicsVortexEventOptions() {\n        /**\n         * The radius of the cylinder for the vortex\n         */\n        this.radius = 5;\n        /**\n         * The strength of the vortex.\n         */\n        this.strength = 10;\n        /**\n         * The height of the cylinder for the vortex.\n         */\n        this.height = 10;\n        /**\n         * At which distance, relative to the radius the centripetal forces should kick in? Range: 0-1\n         */\n        this.centripetalForceThreshold = 0.7;\n        /**\n         * This multiplier determines with how much force the objects will be pushed sideways/around the vortex, when below the threshold.\n         */\n        this.centripetalForceMultiplier = 5;\n        /**\n         * This multiplier determines with how much force the objects will be pushed sideways/around the vortex, when above the threshold.\n         */\n        this.centrifugalForceMultiplier = 0.5;\n        /**\n         * This multiplier determines with how much force the objects will be pushed upwards, when in the vortex.\n         */\n        this.updraftForceMultiplier = 0.02;\n    }\n    return PhysicsVortexEventOptions;\n}());\nexport { PhysicsVortexEventOptions };\n/**\n * The strength of the force in correspondence to the distance of the affected object\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\n */\nexport var PhysicsRadialImpulseFalloff;\n(function (PhysicsRadialImpulseFalloff) {\n    /** Defines that impulse is constant in strength across it's whole radius */\n    PhysicsRadialImpulseFalloff[PhysicsRadialImpulseFalloff[\"Constant\"] = 0] = \"Constant\";\n    /** Defines that impulse gets weaker if it's further from the origin */\n    PhysicsRadialImpulseFalloff[PhysicsRadialImpulseFalloff[\"Linear\"] = 1] = \"Linear\";\n})(PhysicsRadialImpulseFalloff || (PhysicsRadialImpulseFalloff = {}));\n/**\n * The strength of the force in correspondence to the distance of the affected object\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine#further-functionality-of-the-impostor-class\n */\nexport var PhysicsUpdraftMode;\n(function (PhysicsUpdraftMode) {\n    /** Defines that the upstream forces will pull towards the top center of the cylinder */\n    PhysicsUpdraftMode[PhysicsUpdraftMode[\"Center\"] = 0] = \"Center\";\n    /** Defines that once a impostor is inside the cylinder, it will shoot out perpendicular from the ground of the cylinder */\n    PhysicsUpdraftMode[PhysicsUpdraftMode[\"Perpendicular\"] = 1] = \"Perpendicular\";\n})(PhysicsUpdraftMode || (PhysicsUpdraftMode = {}));\n//# sourceMappingURL=physicsHelper.js.map","import { Vector3 } from \"../Maths/math.vector.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\n/**\n * Class used to control physics engine\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\n */\nvar PhysicsEngine = /** @class */ (function () {\n    /**\n     * Creates a new Physics Engine\n     * @param gravity defines the gravity vector used by the simulation\n     * @param _physicsPlugin defines the plugin to use (CannonJS by default)\n     */\n    function PhysicsEngine(gravity, _physicsPlugin) {\n        if (_physicsPlugin === void 0) { _physicsPlugin = PhysicsEngine.DefaultPluginFactory(); }\n        this._physicsPlugin = _physicsPlugin;\n        this._impostors = [];\n        this._joints = [];\n        this._subTimeStep = 0;\n        this._uniqueIdCounter = 0;\n        if (!this._physicsPlugin.isSupported()) {\n            throw new Error(\"Physics Engine \" + this._physicsPlugin.name + \" cannot be found. \" + \"Please make sure it is included.\");\n        }\n        gravity = gravity || new Vector3(0, -9.807, 0);\n        this.setGravity(gravity);\n        this.setTimeStep();\n    }\n    /**\n     * Factory used to create the default physics plugin.\n     * @returns The default physics plugin\n     */\n    PhysicsEngine.DefaultPluginFactory = function () {\n        throw _WarnImport(\"CannonJSPlugin\");\n    };\n    /**\n     * Sets the gravity vector used by the simulation\n     * @param gravity defines the gravity vector to use\n     */\n    PhysicsEngine.prototype.setGravity = function (gravity) {\n        this.gravity = gravity;\n        this._physicsPlugin.setGravity(this.gravity);\n    };\n    /**\n     * Set the time step of the physics engine.\n     * Default is 1/60.\n     * To slow it down, enter 1/600 for example.\n     * To speed it up, 1/30\n     * @param newTimeStep defines the new timestep to apply to this world.\n     */\n    PhysicsEngine.prototype.setTimeStep = function (newTimeStep) {\n        if (newTimeStep === void 0) { newTimeStep = 1 / 60; }\n        this._physicsPlugin.setTimeStep(newTimeStep);\n    };\n    /**\n     * Get the time step of the physics engine.\n     * @returns the current time step\n     */\n    PhysicsEngine.prototype.getTimeStep = function () {\n        return this._physicsPlugin.getTimeStep();\n    };\n    /**\n     * Set the sub time step of the physics engine.\n     * Default is 0 meaning there is no sub steps\n     * To increase physics resolution precision, set a small value (like 1 ms)\n     * @param subTimeStep defines the new sub timestep used for physics resolution.\n     */\n    PhysicsEngine.prototype.setSubTimeStep = function (subTimeStep) {\n        if (subTimeStep === void 0) { subTimeStep = 0; }\n        this._subTimeStep = subTimeStep;\n    };\n    /**\n     * Get the sub time step of the physics engine.\n     * @returns the current sub time step\n     */\n    PhysicsEngine.prototype.getSubTimeStep = function () {\n        return this._subTimeStep;\n    };\n    /**\n     * Release all resources\n     */\n    PhysicsEngine.prototype.dispose = function () {\n        this._impostors.forEach(function (impostor) {\n            impostor.dispose();\n        });\n        this._physicsPlugin.dispose();\n    };\n    /**\n     * Gets the name of the current physics plugin\n     * @returns the name of the plugin\n     */\n    PhysicsEngine.prototype.getPhysicsPluginName = function () {\n        return this._physicsPlugin.name;\n    };\n    /**\n     * Adding a new impostor for the impostor tracking.\n     * This will be done by the impostor itself.\n     * @param impostor the impostor to add\n     */\n    PhysicsEngine.prototype.addImpostor = function (impostor) {\n        this._impostors.push(impostor);\n        impostor.uniqueId = this._uniqueIdCounter++;\n        //if no parent, generate the body\n        if (!impostor.parent) {\n            this._physicsPlugin.generatePhysicsBody(impostor);\n        }\n    };\n    /**\n     * Remove an impostor from the engine.\n     * This impostor and its mesh will not longer be updated by the physics engine.\n     * @param impostor the impostor to remove\n     */\n    PhysicsEngine.prototype.removeImpostor = function (impostor) {\n        var index = this._impostors.indexOf(impostor);\n        if (index > -1) {\n            var removed = this._impostors.splice(index, 1);\n            //Is it needed?\n            if (removed.length) {\n                this.getPhysicsPlugin().removePhysicsBody(impostor);\n            }\n        }\n    };\n    /**\n     * Add a joint to the physics engine\n     * @param mainImpostor defines the main impostor to which the joint is added.\n     * @param connectedImpostor defines the impostor that is connected to the main impostor using this joint\n     * @param joint defines the joint that will connect both impostors.\n     */\n    PhysicsEngine.prototype.addJoint = function (mainImpostor, connectedImpostor, joint) {\n        var impostorJoint = {\n            mainImpostor: mainImpostor,\n            connectedImpostor: connectedImpostor,\n            joint: joint,\n        };\n        joint.physicsPlugin = this._physicsPlugin;\n        this._joints.push(impostorJoint);\n        this._physicsPlugin.generateJoint(impostorJoint);\n    };\n    /**\n     * Removes a joint from the simulation\n     * @param mainImpostor defines the impostor used with the joint\n     * @param connectedImpostor defines the other impostor connected to the main one by the joint\n     * @param joint defines the joint to remove\n     */\n    PhysicsEngine.prototype.removeJoint = function (mainImpostor, connectedImpostor, joint) {\n        var matchingJoints = this._joints.filter(function (impostorJoint) {\n            return impostorJoint.connectedImpostor === connectedImpostor && impostorJoint.joint === joint && impostorJoint.mainImpostor === mainImpostor;\n        });\n        if (matchingJoints.length) {\n            this._physicsPlugin.removeJoint(matchingJoints[0]);\n            //TODO remove it from the list as well\n        }\n    };\n    /**\n     * Called by the scene. No need to call it.\n     * @param delta defines the timespan between frames\n     */\n    PhysicsEngine.prototype._step = function (delta) {\n        var _this = this;\n        //check if any mesh has no body / requires an update\n        this._impostors.forEach(function (impostor) {\n            if (impostor.isBodyInitRequired()) {\n                _this._physicsPlugin.generatePhysicsBody(impostor);\n            }\n        });\n        if (delta > 0.1) {\n            delta = 0.1;\n        }\n        else if (delta <= 0) {\n            delta = 1.0 / 60.0;\n        }\n        this._physicsPlugin.executeStep(delta, this._impostors);\n    };\n    /**\n     * Gets the current plugin used to run the simulation\n     * @returns current plugin\n     */\n    PhysicsEngine.prototype.getPhysicsPlugin = function () {\n        return this._physicsPlugin;\n    };\n    /**\n     * Gets the list of physic impostors\n     * @returns an array of PhysicsImpostor\n     */\n    PhysicsEngine.prototype.getImpostors = function () {\n        return this._impostors;\n    };\n    /**\n     * Gets the impostor for a physics enabled object\n     * @param object defines the object impersonated by the impostor\n     * @returns the PhysicsImpostor or null if not found\n     */\n    PhysicsEngine.prototype.getImpostorForPhysicsObject = function (object) {\n        for (var i = 0; i < this._impostors.length; ++i) {\n            if (this._impostors[i].object === object) {\n                return this._impostors[i];\n            }\n        }\n        return null;\n    };\n    /**\n     * Gets the impostor for a physics body object\n     * @param body defines physics body used by the impostor\n     * @returns the PhysicsImpostor or null if not found\n     */\n    PhysicsEngine.prototype.getImpostorWithPhysicsBody = function (body) {\n        for (var i = 0; i < this._impostors.length; ++i) {\n            if (this._impostors[i].physicsBody === body) {\n                return this._impostors[i];\n            }\n        }\n        return null;\n    };\n    /**\n     * Does a raycast in the physics world\n     * @param from when should the ray start?\n     * @param to when should the ray end?\n     * @returns PhysicsRaycastResult\n     */\n    PhysicsEngine.prototype.raycast = function (from, to) {\n        return this._physicsPlugin.raycast(from, to);\n    };\n    /**\n     * Global value used to control the smallest number supported by the simulation\n     */\n    PhysicsEngine.Epsilon = 0.001;\n    return PhysicsEngine;\n}());\nexport { PhysicsEngine };\n//# sourceMappingURL=physicsEngine.js.map","import { Logger } from \"../Misc/logger.js\";\nimport { ArrayTools } from \"../Misc/arrayTools.js\";\nimport { Vector3, Quaternion } from \"../Maths/math.vector.js\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { PhysicsJoint } from \"./physicsJoint.js\";\nimport { Space } from \"../Maths/math.axis.js\";\nMesh._PhysicsImpostorParser = function (scene, physicObject, jsonObject) {\n    return new PhysicsImpostor(physicObject, jsonObject.physicsImpostor, {\n        mass: jsonObject.physicsMass,\n        friction: jsonObject.physicsFriction,\n        restitution: jsonObject.physicsRestitution,\n    }, scene);\n};\n/**\n * Represents a physics imposter\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\n */\nvar PhysicsImpostor = /** @class */ (function () {\n    /**\n     * Initializes the physics imposter\n     * @param object The physics-enabled object used as the physics imposter\n     * @param type The type of the physics imposter. Types are available as static members of this class.\n     * @param _options The options for the physics imposter\n     * @param _scene The Babylon scene\n     */\n    function PhysicsImpostor(\n    /**\n     * The physics-enabled object used as the physics imposter\n     */\n    object, \n    /**\n     * The type of the physics imposter\n     */\n    type, _options, _scene) {\n        if (_options === void 0) { _options = { mass: 0 }; }\n        var _this = this;\n        this.object = object;\n        this.type = type;\n        this._options = _options;\n        this._scene = _scene;\n        /** @hidden */\n        this._pluginData = {};\n        this._bodyUpdateRequired = false;\n        this._onBeforePhysicsStepCallbacks = new Array();\n        this._onAfterPhysicsStepCallbacks = new Array();\n        /** @hidden */\n        this._onPhysicsCollideCallbacks = [];\n        this._deltaPosition = Vector3.Zero();\n        this._isDisposed = false;\n        /**\n         * @hidden\n         */\n        this.soft = false;\n        /**\n         * @hidden\n         */\n        this.segments = 0;\n        //temp variables for parent rotation calculations\n        //private _mats: Array<Matrix> = [new Matrix(), new Matrix()];\n        this._tmpQuat = new Quaternion();\n        this._tmpQuat2 = new Quaternion();\n        /**\n         * this function is executed by the physics engine.\n         */\n        this.beforeStep = function () {\n            if (!_this._physicsEngine) {\n                return;\n            }\n            _this.object.translate(_this._deltaPosition, -1);\n            _this._deltaRotationConjugated &&\n                _this.object.rotationQuaternion &&\n                _this.object.rotationQuaternion.multiplyToRef(_this._deltaRotationConjugated, _this.object.rotationQuaternion);\n            _this.object.computeWorldMatrix(false);\n            if (_this.object.parent && _this.object.rotationQuaternion) {\n                _this.getParentsRotation();\n                _this._tmpQuat.multiplyToRef(_this.object.rotationQuaternion, _this._tmpQuat);\n            }\n            else {\n                _this._tmpQuat.copyFrom(_this.object.rotationQuaternion || new Quaternion());\n            }\n            if (!_this._options.disableBidirectionalTransformation) {\n                _this.object.rotationQuaternion &&\n                    _this._physicsEngine.getPhysicsPlugin().setPhysicsBodyTransformation(_this, /*bInfo.boundingBox.centerWorld*/ _this.object.getAbsolutePosition(), _this._tmpQuat);\n            }\n            _this._onBeforePhysicsStepCallbacks.forEach(function (func) {\n                func(_this);\n            });\n        };\n        /**\n         * this function is executed by the physics engine\n         */\n        this.afterStep = function () {\n            if (!_this._physicsEngine) {\n                return;\n            }\n            _this._onAfterPhysicsStepCallbacks.forEach(function (func) {\n                func(_this);\n            });\n            _this._physicsEngine.getPhysicsPlugin().setTransformationFromPhysicsBody(_this);\n            // object has now its world rotation. needs to be converted to local.\n            if (_this.object.parent && _this.object.rotationQuaternion) {\n                _this.getParentsRotation();\n                _this._tmpQuat.conjugateInPlace();\n                _this._tmpQuat.multiplyToRef(_this.object.rotationQuaternion, _this.object.rotationQuaternion);\n            }\n            // take the position set and make it the absolute position of this object.\n            _this.object.setAbsolutePosition(_this.object.position);\n            _this._deltaRotation && _this.object.rotationQuaternion && _this.object.rotationQuaternion.multiplyToRef(_this._deltaRotation, _this.object.rotationQuaternion);\n            _this.object.translate(_this._deltaPosition, 1);\n        };\n        /**\n         * Legacy collision detection event support\n         */\n        this.onCollideEvent = null;\n        /**\n         * event and body object due to cannon's event-based architecture.\n         * @param e\n         * @param e.body\n         * @param e.point\n         */\n        this.onCollide = function (e) {\n            if (!_this._onPhysicsCollideCallbacks.length && !_this.onCollideEvent) {\n                return;\n            }\n            if (!_this._physicsEngine) {\n                return;\n            }\n            var otherImpostor = _this._physicsEngine.getImpostorWithPhysicsBody(e.body);\n            if (otherImpostor) {\n                // Legacy collision detection event support\n                if (_this.onCollideEvent) {\n                    _this.onCollideEvent(_this, otherImpostor);\n                }\n                _this._onPhysicsCollideCallbacks\n                    .filter(function (obj) {\n                    return obj.otherImpostors.indexOf(otherImpostor) !== -1;\n                })\n                    .forEach(function (obj) {\n                    obj.callback(_this, otherImpostor, e.point);\n                });\n            }\n        };\n        //sanity check!\n        if (!this.object) {\n            Logger.Error(\"No object was provided. A physics object is obligatory\");\n            return;\n        }\n        if (this.object.parent && _options.mass !== 0) {\n            Logger.Warn(\"A physics impostor has been created for an object which has a parent. Babylon physics currently works in local space so unexpected issues may occur.\");\n        }\n        // Legacy support for old syntax.\n        if (!this._scene && object.getScene) {\n            this._scene = object.getScene();\n        }\n        if (!this._scene) {\n            return;\n        }\n        if (this.type > 100) {\n            this.soft = true;\n        }\n        this._physicsEngine = this._scene.getPhysicsEngine();\n        if (!this._physicsEngine) {\n            Logger.Error(\"Physics not enabled. Please use scene.enablePhysics(...) before creating impostors.\");\n        }\n        else {\n            //set the object's quaternion, if not set\n            if (!this.object.rotationQuaternion) {\n                if (this.object.rotation) {\n                    this.object.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.object.rotation.y, this.object.rotation.x, this.object.rotation.z);\n                }\n                else {\n                    this.object.rotationQuaternion = new Quaternion();\n                }\n            }\n            //default options params\n            this._options.mass = _options.mass === void 0 ? 0 : _options.mass;\n            this._options.friction = _options.friction === void 0 ? 0.2 : _options.friction;\n            this._options.restitution = _options.restitution === void 0 ? 0.2 : _options.restitution;\n            if (this.soft) {\n                //softbody mass must be above 0;\n                this._options.mass = this._options.mass > 0 ? this._options.mass : 1;\n                this._options.pressure = _options.pressure === void 0 ? 200 : _options.pressure;\n                this._options.stiffness = _options.stiffness === void 0 ? 1 : _options.stiffness;\n                this._options.velocityIterations = _options.velocityIterations === void 0 ? 20 : _options.velocityIterations;\n                this._options.positionIterations = _options.positionIterations === void 0 ? 20 : _options.positionIterations;\n                this._options.fixedPoints = _options.fixedPoints === void 0 ? 0 : _options.fixedPoints;\n                this._options.margin = _options.margin === void 0 ? 0 : _options.margin;\n                this._options.damping = _options.damping === void 0 ? 0 : _options.damping;\n                this._options.path = _options.path === void 0 ? null : _options.path;\n                this._options.shape = _options.shape === void 0 ? null : _options.shape;\n            }\n            this._joints = [];\n            //If the mesh has a parent, don't initialize the physicsBody. Instead wait for the parent to do that.\n            if (!this.object.parent || this._options.ignoreParent) {\n                this._init();\n            }\n            else if (this.object.parent.physicsImpostor) {\n                Logger.Warn(\"You must affect impostors to children before affecting impostor to parent.\");\n            }\n        }\n    }\n    Object.defineProperty(PhysicsImpostor.prototype, \"isDisposed\", {\n        /**\n         * Specifies if the physics imposter is disposed\n         */\n        get: function () {\n            return this._isDisposed;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PhysicsImpostor.prototype, \"mass\", {\n        /**\n         * Gets the mass of the physics imposter\n         */\n        get: function () {\n            return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyMass(this) : 0;\n        },\n        set: function (value) {\n            this.setMass(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PhysicsImpostor.prototype, \"friction\", {\n        /**\n         * Gets the coefficient of friction\n         */\n        get: function () {\n            return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyFriction(this) : 0;\n        },\n        /**\n         * Sets the coefficient of friction\n         */\n        set: function (value) {\n            if (!this._physicsEngine) {\n                return;\n            }\n            this._physicsEngine.getPhysicsPlugin().setBodyFriction(this, value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PhysicsImpostor.prototype, \"restitution\", {\n        /**\n         * Gets the coefficient of restitution\n         */\n        get: function () {\n            return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyRestitution(this) : 0;\n        },\n        /**\n         * Sets the coefficient of restitution\n         */\n        set: function (value) {\n            if (!this._physicsEngine) {\n                return;\n            }\n            this._physicsEngine.getPhysicsPlugin().setBodyRestitution(this, value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PhysicsImpostor.prototype, \"pressure\", {\n        /**\n         * Gets the pressure of a soft body; only supported by the AmmoJSPlugin\n         */\n        get: function () {\n            if (!this._physicsEngine) {\n                return 0;\n            }\n            var plugin = this._physicsEngine.getPhysicsPlugin();\n            if (!plugin.setBodyPressure) {\n                return 0;\n            }\n            return plugin.getBodyPressure(this);\n        },\n        /**\n         * Sets the pressure of a soft body; only supported by the AmmoJSPlugin\n         */\n        set: function (value) {\n            if (!this._physicsEngine) {\n                return;\n            }\n            var plugin = this._physicsEngine.getPhysicsPlugin();\n            if (!plugin.setBodyPressure) {\n                return;\n            }\n            plugin.setBodyPressure(this, value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PhysicsImpostor.prototype, \"stiffness\", {\n        /**\n         * Gets the stiffness of a soft body; only supported by the AmmoJSPlugin\n         */\n        get: function () {\n            if (!this._physicsEngine) {\n                return 0;\n            }\n            var plugin = this._physicsEngine.getPhysicsPlugin();\n            if (!plugin.getBodyStiffness) {\n                return 0;\n            }\n            return plugin.getBodyStiffness(this);\n        },\n        /**\n         * Sets the stiffness of a soft body; only supported by the AmmoJSPlugin\n         */\n        set: function (value) {\n            if (!this._physicsEngine) {\n                return;\n            }\n            var plugin = this._physicsEngine.getPhysicsPlugin();\n            if (!plugin.setBodyStiffness) {\n                return;\n            }\n            plugin.setBodyStiffness(this, value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PhysicsImpostor.prototype, \"velocityIterations\", {\n        /**\n         * Gets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\n         */\n        get: function () {\n            if (!this._physicsEngine) {\n                return 0;\n            }\n            var plugin = this._physicsEngine.getPhysicsPlugin();\n            if (!plugin.getBodyVelocityIterations) {\n                return 0;\n            }\n            return plugin.getBodyVelocityIterations(this);\n        },\n        /**\n         * Sets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\n         */\n        set: function (value) {\n            if (!this._physicsEngine) {\n                return;\n            }\n            var plugin = this._physicsEngine.getPhysicsPlugin();\n            if (!plugin.setBodyVelocityIterations) {\n                return;\n            }\n            plugin.setBodyVelocityIterations(this, value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PhysicsImpostor.prototype, \"positionIterations\", {\n        /**\n         * Gets the positionIterations of a soft body; only supported by the AmmoJSPlugin\n         */\n        get: function () {\n            if (!this._physicsEngine) {\n                return 0;\n            }\n            var plugin = this._physicsEngine.getPhysicsPlugin();\n            if (!plugin.getBodyPositionIterations) {\n                return 0;\n            }\n            return plugin.getBodyPositionIterations(this);\n        },\n        /**\n         * Sets the positionIterations of a soft body; only supported by the AmmoJSPlugin\n         */\n        set: function (value) {\n            if (!this._physicsEngine) {\n                return;\n            }\n            var plugin = this._physicsEngine.getPhysicsPlugin();\n            if (!plugin.setBodyPositionIterations) {\n                return;\n            }\n            plugin.setBodyPositionIterations(this, value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * This function will completely initialize this impostor.\n     * It will create a new body - but only if this mesh has no parent.\n     * If it has, this impostor will not be used other than to define the impostor\n     * of the child mesh.\n     * @hidden\n     */\n    PhysicsImpostor.prototype._init = function () {\n        if (!this._physicsEngine) {\n            return;\n        }\n        this._physicsEngine.removeImpostor(this);\n        this.physicsBody = null;\n        this._parent = this._parent || this._getPhysicsParent();\n        if (!this._isDisposed && (!this.parent || this._options.ignoreParent)) {\n            this._physicsEngine.addImpostor(this);\n        }\n    };\n    PhysicsImpostor.prototype._getPhysicsParent = function () {\n        if (this.object.parent instanceof AbstractMesh) {\n            var parentMesh = this.object.parent;\n            return parentMesh.physicsImpostor;\n        }\n        return null;\n    };\n    /**\n     * Should a new body be generated.\n     * @returns boolean specifying if body initialization is required\n     */\n    PhysicsImpostor.prototype.isBodyInitRequired = function () {\n        return this._bodyUpdateRequired || (!this._physicsBody && (!this._parent || !!this._options.ignoreParent));\n    };\n    /**\n     * Sets the updated scaling\n     */\n    PhysicsImpostor.prototype.setScalingUpdated = function () {\n        this.forceUpdate();\n    };\n    /**\n     * Force a regeneration of this or the parent's impostor's body.\n     * Use under cautious - This will remove all joints already implemented.\n     */\n    PhysicsImpostor.prototype.forceUpdate = function () {\n        this._init();\n        if (this.parent && !this._options.ignoreParent) {\n            this.parent.forceUpdate();\n        }\n    };\n    Object.defineProperty(PhysicsImpostor.prototype, \"physicsBody\", {\n        /*public get mesh(): AbstractMesh {\n            return this._mesh;\n        }*/\n        /**\n         * Gets the body that holds this impostor. Either its own, or its parent.\n         */\n        get: function () {\n            return this._parent && !this._options.ignoreParent ? this._parent.physicsBody : this._physicsBody;\n        },\n        /**\n         * Set the physics body. Used mainly by the physics engine/plugin\n         */\n        set: function (physicsBody) {\n            if (this._physicsBody && this._physicsEngine) {\n                this._physicsEngine.getPhysicsPlugin().removePhysicsBody(this);\n            }\n            this._physicsBody = physicsBody;\n            this.resetUpdateFlags();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PhysicsImpostor.prototype, \"parent\", {\n        /**\n         * Get the parent of the physics imposter\n         * @returns Physics imposter or null\n         */\n        get: function () {\n            return !this._options.ignoreParent && this._parent ? this._parent : null;\n        },\n        /**\n         * Sets the parent of the physics imposter\n         */\n        set: function (value) {\n            this._parent = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Resets the update flags\n     */\n    PhysicsImpostor.prototype.resetUpdateFlags = function () {\n        this._bodyUpdateRequired = false;\n    };\n    /**\n     * Gets the object extend size\n     * @returns the object extend size\n     */\n    PhysicsImpostor.prototype.getObjectExtendSize = function () {\n        if (this.object.getBoundingInfo) {\n            var q = this.object.rotationQuaternion;\n            var scaling = this.object.scaling.clone();\n            //reset rotation\n            this.object.rotationQuaternion = PhysicsImpostor.IDENTITY_QUATERNION;\n            //calculate the world matrix with no rotation\n            var worldMatrix = this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\n            if (worldMatrix) {\n                worldMatrix.decompose(scaling, undefined, undefined);\n            }\n            var boundingInfo = this.object.getBoundingInfo();\n            // get the global scaling of the object\n            var size = boundingInfo.boundingBox.extendSize.scale(2).multiplyInPlace(scaling);\n            size.x = Math.abs(size.x);\n            size.y = Math.abs(size.y);\n            size.z = Math.abs(size.z);\n            //bring back the rotation\n            this.object.rotationQuaternion = q;\n            //calculate the world matrix with the new rotation\n            this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\n            return size;\n        }\n        else {\n            return PhysicsImpostor.DEFAULT_OBJECT_SIZE;\n        }\n    };\n    /**\n     * Gets the object center\n     * @returns The object center\n     */\n    PhysicsImpostor.prototype.getObjectCenter = function () {\n        if (this.object.getBoundingInfo) {\n            var boundingInfo = this.object.getBoundingInfo();\n            return boundingInfo.boundingBox.centerWorld;\n        }\n        else {\n            return this.object.position;\n        }\n    };\n    /**\n     * Get a specific parameter from the options parameters\n     * @param paramName The object parameter name\n     * @returns The object parameter\n     */\n    PhysicsImpostor.prototype.getParam = function (paramName) {\n        return this._options[paramName];\n    };\n    /**\n     * Sets a specific parameter in the options given to the physics plugin\n     * @param paramName The parameter name\n     * @param value The value of the parameter\n     */\n    PhysicsImpostor.prototype.setParam = function (paramName, value) {\n        this._options[paramName] = value;\n        this._bodyUpdateRequired = true;\n    };\n    /**\n     * Specifically change the body's mass option. Won't recreate the physics body object\n     * @param mass The mass of the physics imposter\n     */\n    PhysicsImpostor.prototype.setMass = function (mass) {\n        if (this.getParam(\"mass\") !== mass) {\n            this.setParam(\"mass\", mass);\n        }\n        if (this._physicsEngine) {\n            this._physicsEngine.getPhysicsPlugin().setBodyMass(this, mass);\n        }\n    };\n    /**\n     * Gets the linear velocity\n     * @returns  linear velocity or null\n     */\n    PhysicsImpostor.prototype.getLinearVelocity = function () {\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getLinearVelocity(this) : Vector3.Zero();\n    };\n    /**\n     * Sets the linear velocity\n     * @param velocity  linear velocity or null\n     */\n    PhysicsImpostor.prototype.setLinearVelocity = function (velocity) {\n        if (this._physicsEngine) {\n            this._physicsEngine.getPhysicsPlugin().setLinearVelocity(this, velocity);\n        }\n    };\n    /**\n     * Gets the angular velocity\n     * @returns angular velocity or null\n     */\n    PhysicsImpostor.prototype.getAngularVelocity = function () {\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getAngularVelocity(this) : Vector3.Zero();\n    };\n    /**\n     * Sets the angular velocity\n     * @param velocity The velocity or null\n     */\n    PhysicsImpostor.prototype.setAngularVelocity = function (velocity) {\n        if (this._physicsEngine) {\n            this._physicsEngine.getPhysicsPlugin().setAngularVelocity(this, velocity);\n        }\n    };\n    /**\n     * Execute a function with the physics plugin native code\n     * Provide a function the will have two variables - the world object and the physics body object\n     * @param func The function to execute with the physics plugin native code\n     */\n    PhysicsImpostor.prototype.executeNativeFunction = function (func) {\n        if (this._physicsEngine) {\n            func(this._physicsEngine.getPhysicsPlugin().world, this.physicsBody);\n        }\n    };\n    /**\n     * Register a function that will be executed before the physics world is stepping forward\n     * @param func The function to execute before the physics world is stepped forward\n     */\n    PhysicsImpostor.prototype.registerBeforePhysicsStep = function (func) {\n        this._onBeforePhysicsStepCallbacks.push(func);\n    };\n    /**\n     * Unregister a function that will be executed before the physics world is stepping forward\n     * @param func The function to execute before the physics world is stepped forward\n     */\n    PhysicsImpostor.prototype.unregisterBeforePhysicsStep = function (func) {\n        var index = this._onBeforePhysicsStepCallbacks.indexOf(func);\n        if (index > -1) {\n            this._onBeforePhysicsStepCallbacks.splice(index, 1);\n        }\n        else {\n            Logger.Warn(\"Function to remove was not found\");\n        }\n    };\n    /**\n     * Register a function that will be executed after the physics step\n     * @param func The function to execute after physics step\n     */\n    PhysicsImpostor.prototype.registerAfterPhysicsStep = function (func) {\n        this._onAfterPhysicsStepCallbacks.push(func);\n    };\n    /**\n     * Unregisters a function that will be executed after the physics step\n     * @param func The function to execute after physics step\n     */\n    PhysicsImpostor.prototype.unregisterAfterPhysicsStep = function (func) {\n        var index = this._onAfterPhysicsStepCallbacks.indexOf(func);\n        if (index > -1) {\n            this._onAfterPhysicsStepCallbacks.splice(index, 1);\n        }\n        else {\n            Logger.Warn(\"Function to remove was not found\");\n        }\n    };\n    /**\n     * register a function that will be executed when this impostor collides against a different body\n     * @param collideAgainst Physics imposter, or array of physics imposters to collide against\n     * @param func Callback that is executed on collision\n     */\n    PhysicsImpostor.prototype.registerOnPhysicsCollide = function (collideAgainst, func) {\n        var collidedAgainstList = collideAgainst instanceof Array ? collideAgainst : [collideAgainst];\n        this._onPhysicsCollideCallbacks.push({ callback: func, otherImpostors: collidedAgainstList });\n    };\n    /**\n     * Unregisters the physics imposter on contact\n     * @param collideAgainst The physics object to collide against\n     * @param func Callback to execute on collision\n     */\n    PhysicsImpostor.prototype.unregisterOnPhysicsCollide = function (collideAgainst, func) {\n        var collidedAgainstList = collideAgainst instanceof Array ? collideAgainst : [collideAgainst];\n        var index = -1;\n        var found = this._onPhysicsCollideCallbacks.some(function (cbDef, idx) {\n            if (cbDef.callback === func && cbDef.otherImpostors.length === collidedAgainstList.length) {\n                // chcek the arrays match\n                var sameList = cbDef.otherImpostors.every(function (impostor) {\n                    return collidedAgainstList.indexOf(impostor) > -1;\n                });\n                if (sameList) {\n                    index = idx;\n                }\n                return sameList;\n            }\n            return false;\n        });\n        if (found) {\n            this._onPhysicsCollideCallbacks.splice(index, 1);\n        }\n        else {\n            Logger.Warn(\"Function to remove was not found\");\n        }\n    };\n    /**\n     * Get the parent rotation\n     * @returns The parent rotation\n     */\n    PhysicsImpostor.prototype.getParentsRotation = function () {\n        var parent = this.object.parent;\n        this._tmpQuat.copyFromFloats(0, 0, 0, 1);\n        while (parent) {\n            if (parent.rotationQuaternion) {\n                this._tmpQuat2.copyFrom(parent.rotationQuaternion);\n            }\n            else {\n                Quaternion.RotationYawPitchRollToRef(parent.rotation.y, parent.rotation.x, parent.rotation.z, this._tmpQuat2);\n            }\n            this._tmpQuat.multiplyToRef(this._tmpQuat2, this._tmpQuat);\n            parent = parent.parent;\n        }\n        return this._tmpQuat;\n    };\n    /**\n     * Apply a force\n     * @param force The force to apply\n     * @param contactPoint The contact point for the force\n     * @returns The physics imposter\n     */\n    PhysicsImpostor.prototype.applyForce = function (force, contactPoint) {\n        if (this._physicsEngine) {\n            this._physicsEngine.getPhysicsPlugin().applyForce(this, force, contactPoint);\n        }\n        return this;\n    };\n    /**\n     * Apply an impulse\n     * @param force The impulse force\n     * @param contactPoint The contact point for the impulse force\n     * @returns The physics imposter\n     */\n    PhysicsImpostor.prototype.applyImpulse = function (force, contactPoint) {\n        if (this._physicsEngine) {\n            this._physicsEngine.getPhysicsPlugin().applyImpulse(this, force, contactPoint);\n        }\n        return this;\n    };\n    /**\n     * A help function to create a joint\n     * @param otherImpostor A physics imposter used to create a joint\n     * @param jointType The type of joint\n     * @param jointData The data for the joint\n     * @returns The physics imposter\n     */\n    PhysicsImpostor.prototype.createJoint = function (otherImpostor, jointType, jointData) {\n        var joint = new PhysicsJoint(jointType, jointData);\n        this.addJoint(otherImpostor, joint);\n        return this;\n    };\n    /**\n     * Add a joint to this impostor with a different impostor\n     * @param otherImpostor A physics imposter used to add a joint\n     * @param joint The joint to add\n     * @returns The physics imposter\n     */\n    PhysicsImpostor.prototype.addJoint = function (otherImpostor, joint) {\n        this._joints.push({\n            otherImpostor: otherImpostor,\n            joint: joint,\n        });\n        if (this._physicsEngine) {\n            this._physicsEngine.addJoint(this, otherImpostor, joint);\n        }\n        return this;\n    };\n    /**\n     * Add an anchor to a cloth impostor\n     * @param otherImpostor rigid impostor to anchor to\n     * @param width ratio across width from 0 to 1\n     * @param height ratio up height from 0 to 1\n     * @param influence the elasticity between cloth impostor and anchor from 0, very stretchy to 1, little stretch\n     * @param noCollisionBetweenLinkedBodies when true collisions between cloth impostor and anchor are ignored; default false\n     * @returns impostor the soft imposter\n     */\n    PhysicsImpostor.prototype.addAnchor = function (otherImpostor, width, height, influence, noCollisionBetweenLinkedBodies) {\n        if (!this._physicsEngine) {\n            return this;\n        }\n        var plugin = this._physicsEngine.getPhysicsPlugin();\n        if (!plugin.appendAnchor) {\n            return this;\n        }\n        if (this._physicsEngine) {\n            plugin.appendAnchor(this, otherImpostor, width, height, influence, noCollisionBetweenLinkedBodies);\n        }\n        return this;\n    };\n    /**\n     * Add a hook to a rope impostor\n     * @param otherImpostor rigid impostor to anchor to\n     * @param length ratio across rope from 0 to 1\n     * @param influence the elasticity between rope impostor and anchor from 0, very stretchy to 1, little stretch\n     * @param noCollisionBetweenLinkedBodies when true collisions between soft impostor and anchor are ignored; default false\n     * @returns impostor the rope imposter\n     */\n    PhysicsImpostor.prototype.addHook = function (otherImpostor, length, influence, noCollisionBetweenLinkedBodies) {\n        if (!this._physicsEngine) {\n            return this;\n        }\n        var plugin = this._physicsEngine.getPhysicsPlugin();\n        if (!plugin.appendAnchor) {\n            return this;\n        }\n        if (this._physicsEngine) {\n            plugin.appendHook(this, otherImpostor, length, influence, noCollisionBetweenLinkedBodies);\n        }\n        return this;\n    };\n    /**\n     * Will keep this body still, in a sleep mode.\n     * @returns the physics imposter\n     */\n    PhysicsImpostor.prototype.sleep = function () {\n        if (this._physicsEngine) {\n            this._physicsEngine.getPhysicsPlugin().sleepBody(this);\n        }\n        return this;\n    };\n    /**\n     * Wake the body up.\n     * @returns The physics imposter\n     */\n    PhysicsImpostor.prototype.wakeUp = function () {\n        if (this._physicsEngine) {\n            this._physicsEngine.getPhysicsPlugin().wakeUpBody(this);\n        }\n        return this;\n    };\n    /**\n     * Clones the physics imposter\n     * @param newObject The physics imposter clones to this physics-enabled object\n     * @returns A nullable physics imposter\n     */\n    PhysicsImpostor.prototype.clone = function (newObject) {\n        if (!newObject) {\n            return null;\n        }\n        return new PhysicsImpostor(newObject, this.type, this._options, this._scene);\n    };\n    /**\n     * Disposes the physics imposter\n     */\n    PhysicsImpostor.prototype.dispose = function ( /*disposeChildren: boolean = true*/) {\n        var _this = this;\n        //no dispose if no physics engine is available.\n        if (!this._physicsEngine) {\n            return;\n        }\n        this._joints.forEach(function (j) {\n            if (_this._physicsEngine) {\n                _this._physicsEngine.removeJoint(_this, j.otherImpostor, j.joint);\n            }\n        });\n        //dispose the physics body\n        this._physicsEngine.removeImpostor(this);\n        if (this.parent) {\n            this.parent.forceUpdate();\n        }\n        else {\n            /*this._object.getChildMeshes().forEach(function(mesh) {\n                if (mesh.physicsImpostor) {\n                    if (disposeChildren) {\n                        mesh.physicsImpostor.dispose();\n                        mesh.physicsImpostor = null;\n                    }\n                }\n            })*/\n        }\n        this._isDisposed = true;\n    };\n    /**\n     * Sets the delta position\n     * @param position The delta position amount\n     */\n    PhysicsImpostor.prototype.setDeltaPosition = function (position) {\n        this._deltaPosition.copyFrom(position);\n    };\n    /**\n     * Sets the delta rotation\n     * @param rotation The delta rotation amount\n     */\n    PhysicsImpostor.prototype.setDeltaRotation = function (rotation) {\n        if (!this._deltaRotation) {\n            this._deltaRotation = new Quaternion();\n        }\n        this._deltaRotation.copyFrom(rotation);\n        this._deltaRotationConjugated = this._deltaRotation.conjugate();\n    };\n    /**\n     * Gets the box size of the physics imposter and stores the result in the input parameter\n     * @param result Stores the box size\n     * @returns The physics imposter\n     */\n    PhysicsImpostor.prototype.getBoxSizeToRef = function (result) {\n        if (this._physicsEngine) {\n            this._physicsEngine.getPhysicsPlugin().getBoxSizeToRef(this, result);\n        }\n        return this;\n    };\n    /**\n     * Gets the radius of the physics imposter\n     * @returns Radius of the physics imposter\n     */\n    PhysicsImpostor.prototype.getRadius = function () {\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getRadius(this) : 0;\n    };\n    /**\n     * Sync a bone with this impostor\n     * @param bone The bone to sync to the impostor.\n     * @param boneMesh The mesh that the bone is influencing.\n     * @param jointPivot The pivot of the joint / bone in local space.\n     * @param distToJoint Optional distance from the impostor to the joint.\n     * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\n     */\n    PhysicsImpostor.prototype.syncBoneWithImpostor = function (bone, boneMesh, jointPivot, distToJoint, adjustRotation) {\n        var tempVec = PhysicsImpostor._TmpVecs[0];\n        var mesh = this.object;\n        if (mesh.rotationQuaternion) {\n            if (adjustRotation) {\n                var tempQuat = PhysicsImpostor._TmpQuat;\n                mesh.rotationQuaternion.multiplyToRef(adjustRotation, tempQuat);\n                bone.setRotationQuaternion(tempQuat, Space.WORLD, boneMesh);\n            }\n            else {\n                bone.setRotationQuaternion(mesh.rotationQuaternion, Space.WORLD, boneMesh);\n            }\n        }\n        tempVec.x = 0;\n        tempVec.y = 0;\n        tempVec.z = 0;\n        if (jointPivot) {\n            tempVec.x = jointPivot.x;\n            tempVec.y = jointPivot.y;\n            tempVec.z = jointPivot.z;\n            bone.getDirectionToRef(tempVec, boneMesh, tempVec);\n            if (distToJoint === undefined || distToJoint === null) {\n                distToJoint = jointPivot.length();\n            }\n            tempVec.x *= distToJoint;\n            tempVec.y *= distToJoint;\n            tempVec.z *= distToJoint;\n        }\n        if (bone.getParent()) {\n            tempVec.addInPlace(mesh.getAbsolutePosition());\n            bone.setAbsolutePosition(tempVec, boneMesh);\n        }\n        else {\n            boneMesh.setAbsolutePosition(mesh.getAbsolutePosition());\n            boneMesh.position.x -= tempVec.x;\n            boneMesh.position.y -= tempVec.y;\n            boneMesh.position.z -= tempVec.z;\n        }\n    };\n    /**\n     * Sync impostor to a bone\n     * @param bone The bone that the impostor will be synced to.\n     * @param boneMesh The mesh that the bone is influencing.\n     * @param jointPivot The pivot of the joint / bone in local space.\n     * @param distToJoint Optional distance from the impostor to the joint.\n     * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\n     * @param boneAxis Optional vector3 axis the bone is aligned with\n     */\n    PhysicsImpostor.prototype.syncImpostorWithBone = function (bone, boneMesh, jointPivot, distToJoint, adjustRotation, boneAxis) {\n        var mesh = this.object;\n        if (mesh.rotationQuaternion) {\n            if (adjustRotation) {\n                var tempQuat = PhysicsImpostor._TmpQuat;\n                bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, tempQuat);\n                tempQuat.multiplyToRef(adjustRotation, mesh.rotationQuaternion);\n            }\n            else {\n                bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, mesh.rotationQuaternion);\n            }\n        }\n        var pos = PhysicsImpostor._TmpVecs[0];\n        var boneDir = PhysicsImpostor._TmpVecs[1];\n        if (!boneAxis) {\n            boneAxis = PhysicsImpostor._TmpVecs[2];\n            boneAxis.x = 0;\n            boneAxis.y = 1;\n            boneAxis.z = 0;\n        }\n        bone.getDirectionToRef(boneAxis, boneMesh, boneDir);\n        bone.getAbsolutePositionToRef(boneMesh, pos);\n        if ((distToJoint === undefined || distToJoint === null) && jointPivot) {\n            distToJoint = jointPivot.length();\n        }\n        if (distToJoint !== undefined && distToJoint !== null) {\n            pos.x += boneDir.x * distToJoint;\n            pos.y += boneDir.y * distToJoint;\n            pos.z += boneDir.z * distToJoint;\n        }\n        mesh.setAbsolutePosition(pos);\n    };\n    /**\n     * The default object size of the imposter\n     */\n    PhysicsImpostor.DEFAULT_OBJECT_SIZE = new Vector3(1, 1, 1);\n    /**\n     * The identity quaternion of the imposter\n     */\n    PhysicsImpostor.IDENTITY_QUATERNION = Quaternion.Identity();\n    PhysicsImpostor._TmpVecs = ArrayTools.BuildArray(3, Vector3.Zero);\n    PhysicsImpostor._TmpQuat = Quaternion.Identity();\n    //Impostor types\n    /**\n     * No-Imposter type\n     */\n    PhysicsImpostor.NoImpostor = 0;\n    /**\n     * Sphere-Imposter type\n     */\n    PhysicsImpostor.SphereImpostor = 1;\n    /**\n     * Box-Imposter type\n     */\n    PhysicsImpostor.BoxImpostor = 2;\n    /**\n     * Plane-Imposter type\n     */\n    PhysicsImpostor.PlaneImpostor = 3;\n    /**\n     * Mesh-imposter type (Only available to objects with vertices data)\n     */\n    PhysicsImpostor.MeshImpostor = 4;\n    /**\n     * Capsule-Impostor type (Ammo.js plugin only)\n     */\n    PhysicsImpostor.CapsuleImpostor = 6;\n    /**\n     * Cylinder-Imposter type\n     */\n    PhysicsImpostor.CylinderImpostor = 7;\n    /**\n     * Particle-Imposter type\n     */\n    PhysicsImpostor.ParticleImpostor = 8;\n    /**\n     * Heightmap-Imposter type\n     */\n    PhysicsImpostor.HeightmapImpostor = 9;\n    /**\n     * ConvexHull-Impostor type (Ammo.js plugin only)\n     */\n    PhysicsImpostor.ConvexHullImpostor = 10;\n    /**\n     * Custom-Imposter type (Ammo.js plugin only)\n     */\n    PhysicsImpostor.CustomImpostor = 100;\n    /**\n     * Rope-Imposter type\n     */\n    PhysicsImpostor.RopeImpostor = 101;\n    /**\n     * Cloth-Imposter type\n     */\n    PhysicsImpostor.ClothImpostor = 102;\n    /**\n     * Softbody-Imposter type\n     */\n    PhysicsImpostor.SoftbodyImpostor = 103;\n    return PhysicsImpostor;\n}());\nexport { PhysicsImpostor };\n//# sourceMappingURL=physicsImpostor.js.map","import { __extends } from \"tslib\";\n/**\n * This is a holder class for the physics joint created by the physics plugin\n * It holds a set of functions to control the underlying joint\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\n */\nvar PhysicsJoint = /** @class */ (function () {\n    /**\n     * Initializes the physics joint\n     * @param type The type of the physics joint\n     * @param jointData The data for the physics joint\n     */\n    function PhysicsJoint(\n    /**\n     * The type of the physics joint\n     */\n    type, \n    /**\n     * The data for the physics joint\n     */\n    jointData) {\n        this.type = type;\n        this.jointData = jointData;\n        jointData.nativeParams = jointData.nativeParams || {};\n    }\n    Object.defineProperty(PhysicsJoint.prototype, \"physicsJoint\", {\n        /**\n         * Gets the physics joint\n         */\n        get: function () {\n            return this._physicsJoint;\n        },\n        /**\n         * Sets the physics joint\n         */\n        set: function (newJoint) {\n            if (this._physicsJoint) {\n                //remove from the world\n            }\n            this._physicsJoint = newJoint;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PhysicsJoint.prototype, \"physicsPlugin\", {\n        /**\n         * Sets the physics plugin\n         */\n        set: function (physicsPlugin) {\n            this._physicsPlugin = physicsPlugin;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Execute a function that is physics-plugin specific.\n     * @param {Function} func the function that will be executed.\n     *                        It accepts two parameters: the physics world and the physics joint\n     */\n    PhysicsJoint.prototype.executeNativeFunction = function (func) {\n        func(this._physicsPlugin.world, this._physicsJoint);\n    };\n    //TODO check if the native joints are the same\n    //Joint Types\n    /**\n     * Distance-Joint type\n     */\n    PhysicsJoint.DistanceJoint = 0;\n    /**\n     * Hinge-Joint type\n     */\n    PhysicsJoint.HingeJoint = 1;\n    /**\n     * Ball-and-Socket joint type\n     */\n    PhysicsJoint.BallAndSocketJoint = 2;\n    /**\n     * Wheel-Joint type\n     */\n    PhysicsJoint.WheelJoint = 3;\n    /**\n     * Slider-Joint type\n     */\n    PhysicsJoint.SliderJoint = 4;\n    //OIMO\n    /**\n     * Prismatic-Joint type\n     */\n    PhysicsJoint.PrismaticJoint = 5;\n    //\n    /**\n     * Universal-Joint type\n     * ENERGY FTW! (compare with this - @see http://ode-wiki.org/wiki/index.php?title=Manual:_Joint_Types_and_Functions)\n     */\n    PhysicsJoint.UniversalJoint = 6;\n    /**\n     * Hinge-Joint 2 type\n     */\n    PhysicsJoint.Hinge2Joint = PhysicsJoint.WheelJoint;\n    //Cannon\n    /**\n     * Point to Point Joint type.  Similar to a Ball-Joint.  Different in parameters\n     */\n    PhysicsJoint.PointToPointJoint = 8;\n    //Cannon only at the moment\n    /**\n     * Spring-Joint type\n     */\n    PhysicsJoint.SpringJoint = 9;\n    /**\n     * Lock-Joint type\n     */\n    PhysicsJoint.LockJoint = 10;\n    return PhysicsJoint;\n}());\nexport { PhysicsJoint };\n/**\n * A class representing a physics distance joint\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\n */\nvar DistanceJoint = /** @class */ (function (_super) {\n    __extends(DistanceJoint, _super);\n    /**\n     *\n     * @param jointData The data for the Distance-Joint\n     */\n    function DistanceJoint(jointData) {\n        return _super.call(this, PhysicsJoint.DistanceJoint, jointData) || this;\n    }\n    /**\n     * Update the predefined distance.\n     * @param maxDistance The maximum preferred distance\n     * @param minDistance The minimum preferred distance\n     */\n    DistanceJoint.prototype.updateDistance = function (maxDistance, minDistance) {\n        this._physicsPlugin.updateDistanceJoint(this, maxDistance, minDistance);\n    };\n    return DistanceJoint;\n}(PhysicsJoint));\nexport { DistanceJoint };\n/**\n * Represents a Motor-Enabled Joint\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\n */\nvar MotorEnabledJoint = /** @class */ (function (_super) {\n    __extends(MotorEnabledJoint, _super);\n    /**\n     * Initializes the Motor-Enabled Joint\n     * @param type The type of the joint\n     * @param jointData The physical joint data for the joint\n     */\n    function MotorEnabledJoint(type, jointData) {\n        return _super.call(this, type, jointData) || this;\n    }\n    /**\n     * Set the motor values.\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\n     * @param force the force to apply\n     * @param maxForce max force for this motor.\n     */\n    MotorEnabledJoint.prototype.setMotor = function (force, maxForce) {\n        this._physicsPlugin.setMotor(this, force || 0, maxForce);\n    };\n    /**\n     * Set the motor's limits.\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\n     * @param upperLimit The upper limit of the motor\n     * @param lowerLimit The lower limit of the motor\n     */\n    MotorEnabledJoint.prototype.setLimit = function (upperLimit, lowerLimit) {\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\n    };\n    return MotorEnabledJoint;\n}(PhysicsJoint));\nexport { MotorEnabledJoint };\n/**\n * This class represents a single physics Hinge-Joint\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\n */\nvar HingeJoint = /** @class */ (function (_super) {\n    __extends(HingeJoint, _super);\n    /**\n     * Initializes the Hinge-Joint\n     * @param jointData The joint data for the Hinge-Joint\n     */\n    function HingeJoint(jointData) {\n        return _super.call(this, PhysicsJoint.HingeJoint, jointData) || this;\n    }\n    /**\n     * Set the motor values.\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\n     * @param {number} force the force to apply\n     * @param {number} maxForce max force for this motor.\n     */\n    HingeJoint.prototype.setMotor = function (force, maxForce) {\n        this._physicsPlugin.setMotor(this, force || 0, maxForce);\n    };\n    /**\n     * Set the motor's limits.\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\n     * @param upperLimit The upper limit of the motor\n     * @param lowerLimit The lower limit of the motor\n     */\n    HingeJoint.prototype.setLimit = function (upperLimit, lowerLimit) {\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\n    };\n    return HingeJoint;\n}(MotorEnabledJoint));\nexport { HingeJoint };\n/**\n * This class represents a dual hinge physics joint (same as wheel joint)\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\n */\nvar Hinge2Joint = /** @class */ (function (_super) {\n    __extends(Hinge2Joint, _super);\n    /**\n     * Initializes the Hinge2-Joint\n     * @param jointData The joint data for the Hinge2-Joint\n     */\n    function Hinge2Joint(jointData) {\n        return _super.call(this, PhysicsJoint.Hinge2Joint, jointData) || this;\n    }\n    /**\n     * Set the motor values.\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\n     * @param targetSpeed the speed the motor is to reach\n     * @param maxForce max force for this motor.\n     * @param motorIndex motor's index, 0 or 1.\n     */\n    Hinge2Joint.prototype.setMotor = function (targetSpeed, maxForce, motorIndex) {\n        if (motorIndex === void 0) { motorIndex = 0; }\n        this._physicsPlugin.setMotor(this, targetSpeed || 0, maxForce, motorIndex);\n    };\n    /**\n     * Set the motor limits.\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\n     * @param upperLimit the upper limit\n     * @param lowerLimit lower limit\n     * @param motorIndex the motor's index, 0 or 1.\n     */\n    Hinge2Joint.prototype.setLimit = function (upperLimit, lowerLimit, motorIndex) {\n        if (motorIndex === void 0) { motorIndex = 0; }\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit, motorIndex);\n    };\n    return Hinge2Joint;\n}(MotorEnabledJoint));\nexport { Hinge2Joint };\n//# sourceMappingURL=physicsJoint.js.map","import { Vector3 } from \"../Maths/math.vector.js\";\n/**\n * Holds the data for the raycast result\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\n */\nvar PhysicsRaycastResult = /** @class */ (function () {\n    function PhysicsRaycastResult() {\n        this._hasHit = false;\n        this._hitDistance = 0;\n        this._hitNormalWorld = Vector3.Zero();\n        this._hitPointWorld = Vector3.Zero();\n        this._rayFromWorld = Vector3.Zero();\n        this._rayToWorld = Vector3.Zero();\n    }\n    Object.defineProperty(PhysicsRaycastResult.prototype, \"hasHit\", {\n        /**\n         * Gets if there was a hit\n         */\n        get: function () {\n            return this._hasHit;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PhysicsRaycastResult.prototype, \"hitDistance\", {\n        /**\n         * Gets the distance from the hit\n         */\n        get: function () {\n            return this._hitDistance;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PhysicsRaycastResult.prototype, \"hitNormalWorld\", {\n        /**\n         * Gets the hit normal/direction in the world\n         */\n        get: function () {\n            return this._hitNormalWorld;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PhysicsRaycastResult.prototype, \"hitPointWorld\", {\n        /**\n         * Gets the hit point in the world\n         */\n        get: function () {\n            return this._hitPointWorld;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PhysicsRaycastResult.prototype, \"rayFromWorld\", {\n        /**\n         * Gets the ray \"start point\" of the ray in the world\n         */\n        get: function () {\n            return this._rayFromWorld;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PhysicsRaycastResult.prototype, \"rayToWorld\", {\n        /**\n         * Gets the ray \"end point\" of the ray in the world\n         */\n        get: function () {\n            return this._rayToWorld;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Sets the hit data (normal & point in world space)\n     * @param hitNormalWorld defines the normal in world space\n     * @param hitPointWorld defines the point in world space\n     */\n    PhysicsRaycastResult.prototype.setHitData = function (hitNormalWorld, hitPointWorld) {\n        this._hasHit = true;\n        this._hitNormalWorld = new Vector3(hitNormalWorld.x, hitNormalWorld.y, hitNormalWorld.z);\n        this._hitPointWorld = new Vector3(hitPointWorld.x, hitPointWorld.y, hitPointWorld.z);\n    };\n    /**\n     * Sets the distance from the start point to the hit point\n     * @param distance\n     */\n    PhysicsRaycastResult.prototype.setHitDistance = function (distance) {\n        this._hitDistance = distance;\n    };\n    /**\n     * Calculates the distance manually\n     */\n    PhysicsRaycastResult.prototype.calculateHitDistance = function () {\n        this._hitDistance = Vector3.Distance(this._rayFromWorld, this._hitPointWorld);\n    };\n    /**\n     * Resets all the values to default\n     * @param from The from point on world space\n     * @param to The to point on world space\n     */\n    PhysicsRaycastResult.prototype.reset = function (from, to) {\n        if (from === void 0) { from = Vector3.Zero(); }\n        if (to === void 0) { to = Vector3.Zero(); }\n        this._rayFromWorld = from;\n        this._rayToWorld = to;\n        this._hasHit = false;\n        this._hitDistance = 0;\n        this._hitNormalWorld = Vector3.Zero();\n        this._hitPointWorld = Vector3.Zero();\n    };\n    return PhysicsRaycastResult;\n}());\nexport { PhysicsRaycastResult };\n//# sourceMappingURL=physicsRaycastResult.js.map","import { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/anaglyph.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * Postprocess used to generate anaglyphic rendering\n */\nvar AnaglyphPostProcess = /** @class */ (function (_super) {\n    __extends(AnaglyphPostProcess, _super);\n    /**\n     * Creates a new AnaglyphPostProcess\n     * @param name defines postprocess name\n     * @param options defines creation options or target ratio scale\n     * @param rigCameras defines cameras using this postprocess\n     * @param samplingMode defines required sampling mode (BABYLON.Texture.NEAREST_SAMPLINGMODE by default)\n     * @param engine defines hosting engine\n     * @param reusable defines if the postprocess will be reused multiple times per frame\n     */\n    function AnaglyphPostProcess(name, options, rigCameras, samplingMode, engine, reusable) {\n        var _this = _super.call(this, name, \"anaglyph\", null, [\"leftSampler\"], options, rigCameras[1], samplingMode, engine, reusable) || this;\n        _this._passedProcess = rigCameras[0]._rigPostProcess;\n        _this.onApplyObservable.add(function (effect) {\n            effect.setTextureFromPostProcess(\"leftSampler\", _this._passedProcess);\n        });\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"AnaglyphPostProcess\" string\n     */\n    AnaglyphPostProcess.prototype.getClassName = function () {\n        return \"AnaglyphPostProcess\";\n    };\n    return AnaglyphPostProcess;\n}(PostProcess));\nexport { AnaglyphPostProcess };\nRegisterClass(\"BABYLON.AnaglyphPostProcess\", AnaglyphPostProcess);\n//# sourceMappingURL=anaglyphPostProcess.js.map","import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\n\nimport \"../Shaders/kernelBlur.fragment.js\";\nimport \"../Shaders/kernelBlur.vertex.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, serializeAsVector2, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The Blur Post Process which blurs an image based on a kernel and direction.\n * Can be used twice in x and y directions to perform a gaussian blur in two passes.\n */\nvar BlurPostProcess = /** @class */ (function (_super) {\n    __extends(BlurPostProcess, _super);\n    /**\n     * Creates a new instance BlurPostProcess\n     * @param name The name of the effect.\n     * @param direction The direction in which to blur the image.\n     * @param kernel The size of the kernel to be used when computing the blur. eg. Size of 3 will blur the center pixel by 2 pixels surrounding it.\n     * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param defines\n     * @param _blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    function BlurPostProcess(name, direction, kernel, options, camera, samplingMode, engine, reusable, textureType, defines, _blockCompilation) {\n        if (samplingMode === void 0) { samplingMode = Texture.BILINEAR_SAMPLINGMODE; }\n        if (textureType === void 0) { textureType = 0; }\n        if (defines === void 0) { defines = \"\"; }\n        if (_blockCompilation === void 0) { _blockCompilation = false; }\n        var _this = _super.call(this, name, \"kernelBlur\", [\"delta\", \"direction\", \"cameraMinMaxZ\"], [\"circleOfConfusionSampler\"], options, camera, samplingMode, engine, reusable, null, textureType, \"kernelBlur\", { varyingCount: 0, depCount: 0 }, true) || this;\n        _this._blockCompilation = _blockCompilation;\n        _this._packedFloat = false;\n        _this._staticDefines = \"\";\n        _this._staticDefines = defines;\n        _this.direction = direction;\n        _this.onApplyObservable.add(function (effect) {\n            if (_this._outputTexture) {\n                effect.setFloat2(\"delta\", (1 / _this._outputTexture.width) * _this.direction.x, (1 / _this._outputTexture.height) * _this.direction.y);\n            }\n            else {\n                effect.setFloat2(\"delta\", (1 / _this.width) * _this.direction.x, (1 / _this.height) * _this.direction.y);\n            }\n        });\n        _this.kernel = kernel;\n        return _this;\n    }\n    Object.defineProperty(BlurPostProcess.prototype, \"kernel\", {\n        /**\n         * Gets the length in pixels of the blur sample region\n         */\n        get: function () {\n            return this._idealKernel;\n        },\n        /**\n         * Sets the length in pixels of the blur sample region\n         */\n        set: function (v) {\n            if (this._idealKernel === v) {\n                return;\n            }\n            v = Math.max(v, 1);\n            this._idealKernel = v;\n            this._kernel = this._nearestBestKernel(v);\n            if (!this._blockCompilation) {\n                this._updateParameters();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BlurPostProcess.prototype, \"packedFloat\", {\n        /**\n         * Gets whether or not the blur is unpacking/repacking floats\n         */\n        get: function () {\n            return this._packedFloat;\n        },\n        /**\n         * Sets whether or not the blur needs to unpack/repack floats\n         */\n        set: function (v) {\n            if (this._packedFloat === v) {\n                return;\n            }\n            this._packedFloat = v;\n            if (!this._blockCompilation) {\n                this._updateParameters();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"BlurPostProcess\" string\n     */\n    BlurPostProcess.prototype.getClassName = function () {\n        return \"BlurPostProcess\";\n    };\n    /**\n     * Updates the effect with the current post process compile time values and recompiles the shader.\n     * @param defines Define statements that should be added at the beginning of the shader. (default: null)\n     * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\n     * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\n     * @param onCompiled Called when the shader has been compiled.\n     * @param onError Called if there is an error when compiling a shader.\n     */\n    BlurPostProcess.prototype.updateEffect = function (defines, uniforms, samplers, indexParameters, onCompiled, onError) {\n        if (defines === void 0) { defines = null; }\n        if (uniforms === void 0) { uniforms = null; }\n        if (samplers === void 0) { samplers = null; }\n        this._updateParameters(onCompiled, onError);\n    };\n    BlurPostProcess.prototype._updateParameters = function (onCompiled, onError) {\n        // Generate sampling offsets and weights\n        var N = this._kernel;\n        var centerIndex = (N - 1) / 2;\n        // Generate Gaussian sampling weights over kernel\n        var offsets = [];\n        var weights = [];\n        var totalWeight = 0;\n        for (var i = 0; i < N; i++) {\n            var u = i / (N - 1);\n            var w = this._gaussianWeight(u * 2.0 - 1);\n            offsets[i] = i - centerIndex;\n            weights[i] = w;\n            totalWeight += w;\n        }\n        // Normalize weights\n        for (var i = 0; i < weights.length; i++) {\n            weights[i] /= totalWeight;\n        }\n        // Optimize: combine samples to take advantage of hardware linear sampling\n        // Walk from left to center, combining pairs (symmetrically)\n        var linearSamplingWeights = [];\n        var linearSamplingOffsets = [];\n        var linearSamplingMap = [];\n        for (var i = 0; i <= centerIndex; i += 2) {\n            var j = Math.min(i + 1, Math.floor(centerIndex));\n            var singleCenterSample = i === j;\n            if (singleCenterSample) {\n                linearSamplingMap.push({ o: offsets[i], w: weights[i] });\n            }\n            else {\n                var sharedCell = j === centerIndex;\n                var weightLinear = weights[i] + weights[j] * (sharedCell ? 0.5 : 1);\n                var offsetLinear = offsets[i] + 1 / (1 + weights[i] / weights[j]);\n                if (offsetLinear === 0) {\n                    linearSamplingMap.push({ o: offsets[i], w: weights[i] });\n                    linearSamplingMap.push({ o: offsets[i + 1], w: weights[i + 1] });\n                }\n                else {\n                    linearSamplingMap.push({ o: offsetLinear, w: weightLinear });\n                    linearSamplingMap.push({ o: -offsetLinear, w: weightLinear });\n                }\n            }\n        }\n        for (var i = 0; i < linearSamplingMap.length; i++) {\n            linearSamplingOffsets[i] = linearSamplingMap[i].o;\n            linearSamplingWeights[i] = linearSamplingMap[i].w;\n        }\n        // Replace with optimized\n        offsets = linearSamplingOffsets;\n        weights = linearSamplingWeights;\n        // Generate shaders\n        var maxVaryingRows = this.getEngine().getCaps().maxVaryingVectors;\n        var freeVaryingVec2 = Math.max(maxVaryingRows, 0) - 1; // Because of sampleCenter\n        var varyingCount = Math.min(offsets.length, freeVaryingVec2);\n        var defines = \"\";\n        defines += this._staticDefines;\n        // The DOF fragment should ignore the center pixel when looping as it is handled manually in the fragment shader.\n        if (this._staticDefines.indexOf(\"DOF\") != -1) {\n            defines += \"#define CENTER_WEIGHT \".concat(this._glslFloat(weights[varyingCount - 1]), \"\\r\\n\");\n            varyingCount--;\n        }\n        for (var i = 0; i < varyingCount; i++) {\n            defines += \"#define KERNEL_OFFSET\".concat(i, \" \").concat(this._glslFloat(offsets[i]), \"\\r\\n\");\n            defines += \"#define KERNEL_WEIGHT\".concat(i, \" \").concat(this._glslFloat(weights[i]), \"\\r\\n\");\n        }\n        var depCount = 0;\n        for (var i = freeVaryingVec2; i < offsets.length; i++) {\n            defines += \"#define KERNEL_DEP_OFFSET\".concat(depCount, \" \").concat(this._glslFloat(offsets[i]), \"\\r\\n\");\n            defines += \"#define KERNEL_DEP_WEIGHT\".concat(depCount, \" \").concat(this._glslFloat(weights[i]), \"\\r\\n\");\n            depCount++;\n        }\n        if (this.packedFloat) {\n            defines += \"#define PACKEDFLOAT 1\";\n        }\n        this._blockCompilation = false;\n        _super.prototype.updateEffect.call(this, defines, null, null, {\n            varyingCount: varyingCount,\n            depCount: depCount,\n        }, onCompiled, onError);\n    };\n    /**\n     * Best kernels are odd numbers that when divided by 2, their integer part is even, so 5, 9 or 13.\n     * Other odd kernels optimize correctly but require proportionally more samples, even kernels are\n     * possible but will produce minor visual artifacts. Since each new kernel requires a new shader we\n     * want to minimize kernel changes, having gaps between physical kernels is helpful in that regard.\n     * The gaps between physical kernels are compensated for in the weighting of the samples\n     * @param idealKernel Ideal blur kernel.\n     * @return Nearest best kernel.\n     */\n    BlurPostProcess.prototype._nearestBestKernel = function (idealKernel) {\n        var v = Math.round(idealKernel);\n        for (var _i = 0, _a = [v, v - 1, v + 1, v - 2, v + 2]; _i < _a.length; _i++) {\n            var k = _a[_i];\n            if (k % 2 !== 0 && Math.floor(k / 2) % 2 === 0 && k > 0) {\n                return Math.max(k, 3);\n            }\n        }\n        return Math.max(v, 3);\n    };\n    /**\n     * Calculates the value of a Gaussian distribution with sigma 3 at a given point.\n     * @param x The point on the Gaussian distribution to sample.\n     * @return the value of the Gaussian function at x.\n     */\n    BlurPostProcess.prototype._gaussianWeight = function (x) {\n        //reference: Engines/ImageProcessingBlur.cpp #dcc760\n        // We are evaluating the Gaussian (normal) distribution over a kernel parameter space of [-1,1],\n        // so we truncate at three standard deviations by setting stddev (sigma) to 1/3.\n        // The choice of 3-sigma truncation is common but arbitrary, and means that the signal is\n        // truncated at around 1.3% of peak strength.\n        //the distribution is scaled to account for the difference between the actual kernel size and the requested kernel size\n        var sigma = 1 / 3;\n        var denominator = Math.sqrt(2.0 * Math.PI) * sigma;\n        var exponent = -((x * x) / (2.0 * sigma * sigma));\n        var weight = (1.0 / denominator) * Math.exp(exponent);\n        return weight;\n    };\n    /**\n     * Generates a string that can be used as a floating point number in GLSL.\n     * @param x Value to print.\n     * @param decimalFigures Number of decimal places to print the number to (excluding trailing 0s).\n     * @return GLSL float string.\n     */\n    BlurPostProcess.prototype._glslFloat = function (x, decimalFigures) {\n        if (decimalFigures === void 0) { decimalFigures = 8; }\n        return x.toFixed(decimalFigures).replace(/0+$/, \"\");\n    };\n    /**\n     * @param parsedPostProcess\n     * @param targetCamera\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    BlurPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(function () {\n            return new BlurPostProcess(parsedPostProcess.name, parsedPostProcess.direction, parsedPostProcess.kernel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType, undefined, false);\n        }, parsedPostProcess, scene, rootUrl);\n    };\n    __decorate([\n        serialize(\"kernel\")\n    ], BlurPostProcess.prototype, \"_kernel\", void 0);\n    __decorate([\n        serialize(\"packedFloat\")\n    ], BlurPostProcess.prototype, \"_packedFloat\", void 0);\n    __decorate([\n        serializeAsVector2()\n    ], BlurPostProcess.prototype, \"direction\", void 0);\n    return BlurPostProcess;\n}(PostProcess));\nexport { BlurPostProcess };\nRegisterClass(\"BABYLON.BlurPostProcess\", BlurPostProcess);\n//# sourceMappingURL=blurPostProcess.js.map","import { __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/fxaa.fragment.js\";\nimport \"../Shaders/fxaa.vertex.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * Fxaa post process\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#fxaa\n */\nvar FxaaPostProcess = /** @class */ (function (_super) {\n    __extends(FxaaPostProcess, _super);\n    function FxaaPostProcess(name, options, camera, samplingMode, engine, reusable, textureType) {\n        if (camera === void 0) { camera = null; }\n        if (textureType === void 0) { textureType = 0; }\n        var _this = _super.call(this, name, \"fxaa\", [\"texelSize\"], null, options, camera, samplingMode || Texture.BILINEAR_SAMPLINGMODE, engine, reusable, null, textureType, \"fxaa\", undefined, true) || this;\n        var defines = _this._getDefines();\n        _this.updateEffect(defines);\n        _this.onApplyObservable.add(function (effect) {\n            var texelSize = _this.texelSize;\n            effect.setFloat2(\"texelSize\", texelSize.x, texelSize.y);\n        });\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"FxaaPostProcess\" string\n     */\n    FxaaPostProcess.prototype.getClassName = function () {\n        return \"FxaaPostProcess\";\n    };\n    FxaaPostProcess.prototype._getDefines = function () {\n        var engine = this.getEngine();\n        if (!engine) {\n            return null;\n        }\n        var glInfo = engine.getGlInfo();\n        if (glInfo && glInfo.renderer && glInfo.renderer.toLowerCase().indexOf(\"mali\") > -1) {\n            return \"#define MALI 1\\n\";\n        }\n        return null;\n    };\n    /**\n     * @param parsedPostProcess\n     * @param targetCamera\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    FxaaPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(function () {\n            return new FxaaPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    };\n    return FxaaPostProcess;\n}(PostProcess));\nexport { FxaaPostProcess };\nRegisterClass(\"BABYLON.FxaaPostProcess\", FxaaPostProcess);\n//# sourceMappingURL=fxaaPostProcess.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize } from \"../Misc/decorators.js\";\nimport { ImageProcessingConfiguration } from \"../Materials/imageProcessingConfiguration.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n\nimport \"../Shaders/imageProcessing.fragment.js\";\nimport \"../Shaders/postprocess.vertex.js\";\n/**\n * ImageProcessingPostProcess\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#imageprocessing\n */\nvar ImageProcessingPostProcess = /** @class */ (function (_super) {\n    __extends(ImageProcessingPostProcess, _super);\n    function ImageProcessingPostProcess(name, options, camera, samplingMode, engine, reusable, textureType, imageProcessingConfiguration) {\n        if (camera === void 0) { camera = null; }\n        if (textureType === void 0) { textureType = 0; }\n        var _this = _super.call(this, name, \"imageProcessing\", [], [], options, camera, samplingMode, engine, reusable, null, textureType, \"postprocess\", null, true) || this;\n        _this._fromLinearSpace = true;\n        /**\n         * Defines cache preventing GC.\n         */\n        _this._defines = {\n            IMAGEPROCESSING: false,\n            VIGNETTE: false,\n            VIGNETTEBLENDMODEMULTIPLY: false,\n            VIGNETTEBLENDMODEOPAQUE: false,\n            TONEMAPPING: false,\n            TONEMAPPING_ACES: false,\n            CONTRAST: false,\n            COLORCURVES: false,\n            COLORGRADING: false,\n            COLORGRADING3D: false,\n            FROMLINEARSPACE: false,\n            SAMPLER3DGREENDEPTH: false,\n            SAMPLER3DBGRMAP: false,\n            IMAGEPROCESSINGPOSTPROCESS: false,\n            EXPOSURE: false,\n            SKIPFINALCOLORCLAMP: false,\n        };\n        // Setup the configuration as forced by the constructor. This would then not force the\n        // scene materials output in linear space and let untouched the default forward pass.\n        if (imageProcessingConfiguration) {\n            imageProcessingConfiguration.applyByPostProcess = true;\n            _this._attachImageProcessingConfiguration(imageProcessingConfiguration, true);\n            // This will cause the shader to be compiled\n            _this._updateParameters();\n        }\n        // Setup the default processing configuration to the scene.\n        else {\n            _this._attachImageProcessingConfiguration(null, true);\n            _this.imageProcessingConfiguration.applyByPostProcess = true;\n        }\n        _this.onApply = function (effect) {\n            _this.imageProcessingConfiguration.bind(effect, _this.aspectRatio);\n        };\n        return _this;\n    }\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"imageProcessingConfiguration\", {\n        /**\n         * Gets the image processing configuration used either in this material.\n         */\n        get: function () {\n            return this._imageProcessingConfiguration;\n        },\n        /**\n         * Sets the Default image processing configuration used either in the this material.\n         *\n         * If sets to null, the scene one is in use.\n         */\n        set: function (value) {\n            // We are almost sure it is applied by post process as\n            // We are in the post process :-)\n            value.applyByPostProcess = true;\n            this._attachImageProcessingConfiguration(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Attaches a new image processing configuration to the PBR Material.\n     * @param configuration\n     * @param doNotBuild\n     */\n    ImageProcessingPostProcess.prototype._attachImageProcessingConfiguration = function (configuration, doNotBuild) {\n        var _this = this;\n        if (doNotBuild === void 0) { doNotBuild = false; }\n        if (configuration === this._imageProcessingConfiguration) {\n            return;\n        }\n        // Detaches observer.\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        // Pick the scene configuration if needed.\n        if (!configuration) {\n            var scene = null;\n            var engine = this.getEngine();\n            var camera = this.getCamera();\n            if (camera) {\n                scene = camera.getScene();\n            }\n            else if (engine && engine.scenes) {\n                var scenes = engine.scenes;\n                scene = scenes[scenes.length - 1];\n            }\n            else {\n                scene = EngineStore.LastCreatedScene;\n            }\n            if (scene) {\n                this._imageProcessingConfiguration = scene.imageProcessingConfiguration;\n            }\n            else {\n                this._imageProcessingConfiguration = new ImageProcessingConfiguration();\n            }\n        }\n        else {\n            this._imageProcessingConfiguration = configuration;\n        }\n        // Attaches observer.\n        if (this._imageProcessingConfiguration) {\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(function () {\n                _this._updateParameters();\n            });\n        }\n        // Ensure the effect will be rebuilt.\n        if (!doNotBuild) {\n            this._updateParameters();\n        }\n    };\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"isSupported\", {\n        /**\n         * If the post process is supported.\n         */\n        get: function () {\n            var effect = this.getEffect();\n            return !effect || effect.isSupported;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"colorCurves\", {\n        /**\n         * Gets Color curves setup used in the effect if colorCurvesEnabled is set to true .\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.colorCurves;\n        },\n        /**\n         * Sets Color curves setup used in the effect if colorCurvesEnabled is set to true .\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.colorCurves = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"colorCurvesEnabled\", {\n        /**\n         * Gets whether the color curves effect is enabled.\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.colorCurvesEnabled;\n        },\n        /**\n         * Sets whether the color curves effect is enabled.\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.colorCurvesEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"colorGradingTexture\", {\n        /**\n         * Gets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.colorGradingTexture;\n        },\n        /**\n         * Sets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.colorGradingTexture = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"colorGradingEnabled\", {\n        /**\n         * Gets whether the color grading effect is enabled.\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.colorGradingEnabled;\n        },\n        /**\n         * Gets whether the color grading effect is enabled.\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.colorGradingEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"exposure\", {\n        /**\n         * Gets exposure used in the effect.\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.exposure;\n        },\n        /**\n         * Sets exposure used in the effect.\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.exposure = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"toneMappingEnabled\", {\n        /**\n         * Gets whether tonemapping is enabled or not.\n         */\n        get: function () {\n            return this._imageProcessingConfiguration.toneMappingEnabled;\n        },\n        /**\n         * Sets whether tonemapping is enabled or not\n         */\n        set: function (value) {\n            this._imageProcessingConfiguration.toneMappingEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"toneMappingType\", {\n        /**\n         * Gets the type of tone mapping effect.\n         */\n        get: function () {\n            return this._imageProcessingConfiguration.toneMappingType;\n        },\n        /**\n         * Sets the type of tone mapping effect.\n         */\n        set: function (value) {\n            this._imageProcessingConfiguration.toneMappingType = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"contrast\", {\n        /**\n         * Gets contrast used in the effect.\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.contrast;\n        },\n        /**\n         * Sets contrast used in the effect.\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.contrast = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteStretch\", {\n        /**\n         * Gets Vignette stretch size.\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.vignetteStretch;\n        },\n        /**\n         * Sets Vignette stretch size.\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.vignetteStretch = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteCentreX\", {\n        /**\n         * Gets Vignette centre X Offset.\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.vignetteCentreX;\n        },\n        /**\n         * Sets Vignette centre X Offset.\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.vignetteCentreX = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteCentreY\", {\n        /**\n         * Gets Vignette centre Y Offset.\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.vignetteCentreY;\n        },\n        /**\n         * Sets Vignette centre Y Offset.\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.vignetteCentreY = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteWeight\", {\n        /**\n         * Gets Vignette weight or intensity of the vignette effect.\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.vignetteWeight;\n        },\n        /**\n         * Sets Vignette weight or intensity of the vignette effect.\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.vignetteWeight = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteColor\", {\n        /**\n         * Gets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\n         * if vignetteEnabled is set to true.\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.vignetteColor;\n        },\n        /**\n         * Sets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\n         * if vignetteEnabled is set to true.\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.vignetteColor = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteCameraFov\", {\n        /**\n         * Gets Camera field of view used by the Vignette effect.\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.vignetteCameraFov;\n        },\n        /**\n         * Sets Camera field of view used by the Vignette effect.\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.vignetteCameraFov = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteBlendMode\", {\n        /**\n         * Gets the vignette blend mode allowing different kind of effect.\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.vignetteBlendMode;\n        },\n        /**\n         * Sets the vignette blend mode allowing different kind of effect.\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.vignetteBlendMode = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteEnabled\", {\n        /**\n         * Gets whether the vignette effect is enabled.\n         */\n        get: function () {\n            return this.imageProcessingConfiguration.vignetteEnabled;\n        },\n        /**\n         * Sets whether the vignette effect is enabled.\n         */\n        set: function (value) {\n            this.imageProcessingConfiguration.vignetteEnabled = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ImageProcessingPostProcess.prototype, \"fromLinearSpace\", {\n        /**\n         * Gets whether the input of the processing is in Gamma or Linear Space.\n         */\n        get: function () {\n            return this._fromLinearSpace;\n        },\n        /**\n         * Sets whether the input of the processing is in Gamma or Linear Space.\n         */\n        set: function (value) {\n            if (this._fromLinearSpace === value) {\n                return;\n            }\n            this._fromLinearSpace = value;\n            this._updateParameters();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     *  \"ImageProcessingPostProcess\"\n     * @returns \"ImageProcessingPostProcess\"\n     */\n    ImageProcessingPostProcess.prototype.getClassName = function () {\n        return \"ImageProcessingPostProcess\";\n    };\n    /**\n     * @hidden\n     */\n    ImageProcessingPostProcess.prototype._updateParameters = function () {\n        this._defines.FROMLINEARSPACE = this._fromLinearSpace;\n        this.imageProcessingConfiguration.prepareDefines(this._defines, true);\n        var defines = \"\";\n        for (var define in this._defines) {\n            if (this._defines[define]) {\n                defines += \"#define \".concat(define, \";\\r\\n\");\n            }\n        }\n        var samplers = [\"textureSampler\"];\n        var uniforms = [\"scale\"];\n        if (ImageProcessingConfiguration) {\n            ImageProcessingConfiguration.PrepareSamplers(samplers, this._defines);\n            ImageProcessingConfiguration.PrepareUniforms(uniforms, this._defines);\n        }\n        this.updateEffect(defines, uniforms, samplers);\n    };\n    ImageProcessingPostProcess.prototype.dispose = function (camera) {\n        _super.prototype.dispose.call(this, camera);\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n        }\n        if (this._imageProcessingConfiguration) {\n            this.imageProcessingConfiguration.applyByPostProcess = false;\n        }\n    };\n    __decorate([\n        serialize()\n    ], ImageProcessingPostProcess.prototype, \"_fromLinearSpace\", void 0);\n    return ImageProcessingPostProcess;\n}(PostProcess));\nexport { ImageProcessingPostProcess };\n//# sourceMappingURL=imageProcessingPostProcess.js.map","import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/blackAndWhite.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * Post process used to render in black and white\n */\nvar BlackAndWhitePostProcess = /** @class */ (function (_super) {\n    __extends(BlackAndWhitePostProcess, _super);\n    /**\n     * Creates a black and white post process\n     * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#black-and-white\n     * @param name The name of the effect.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     */\n    function BlackAndWhitePostProcess(name, options, camera, samplingMode, engine, reusable) {\n        var _this = _super.call(this, name, \"blackAndWhite\", [\"degree\"], null, options, camera, samplingMode, engine, reusable) || this;\n        /**\n         * Linear about to convert he result to black and white (default: 1)\n         */\n        _this.degree = 1;\n        _this.onApplyObservable.add(function (effect) {\n            effect.setFloat(\"degree\", _this.degree);\n        });\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"BlackAndWhitePostProcess\" string\n     */\n    BlackAndWhitePostProcess.prototype.getClassName = function () {\n        return \"BlackAndWhitePostProcess\";\n    };\n    /**\n     * @param parsedPostProcess\n     * @param targetCamera\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    BlackAndWhitePostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(function () {\n            return new BlackAndWhitePostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    };\n    __decorate([\n        serialize()\n    ], BlackAndWhitePostProcess.prototype, \"degree\", void 0);\n    return BlackAndWhitePostProcess;\n}(PostProcess));\nexport { BlackAndWhitePostProcess };\nRegisterClass(\"BABYLON.BlackAndWhitePostProcess\", BlackAndWhitePostProcess);\n//# sourceMappingURL=blackAndWhitePostProcess.js.map","import { Tools } from \"../../Misc/tools.js\";\n/**\n * This represents a set of one or more post processes in Babylon.\n * A post process can be used to apply a shader to a texture after it is rendered.\n * @example https://doc.babylonjs.com/how_to/how_to_use_postprocessrenderpipeline\n */\nvar PostProcessRenderEffect = /** @class */ (function () {\n    /**\n     * Instantiates a post process render effect.\n     * A post process can be used to apply a shader to a texture after it is rendered.\n     * @param engine The engine the effect is tied to\n     * @param name The name of the effect\n     * @param getPostProcesses A function that returns a set of post processes which the effect will run in order to be run.\n     * @param singleInstance False if this post process can be run on multiple cameras. (default: true)\n     */\n    function PostProcessRenderEffect(engine, name, getPostProcesses, singleInstance) {\n        this._name = name;\n        this._singleInstance = singleInstance || true;\n        this._getPostProcesses = getPostProcesses;\n        this._cameras = {};\n        this._indicesForCamera = {};\n        this._postProcesses = {};\n    }\n    Object.defineProperty(PostProcessRenderEffect.prototype, \"isSupported\", {\n        /**\n         * Checks if all the post processes in the effect are supported.\n         */\n        get: function () {\n            for (var index in this._postProcesses) {\n                if (Object.prototype.hasOwnProperty.call(this._postProcesses, index)) {\n                    var pps = this._postProcesses[index];\n                    for (var ppIndex = 0; ppIndex < pps.length; ppIndex++) {\n                        if (!pps[ppIndex].isSupported) {\n                            return false;\n                        }\n                    }\n                }\n            }\n            return true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Updates the current state of the effect\n     * @hidden\n     */\n    PostProcessRenderEffect.prototype._update = function () { };\n    /**\n     * Attaches the effect on cameras\n     * @param cameras The camera to attach to.\n     * @hidden\n     */\n    PostProcessRenderEffect.prototype._attachCameras = function (cameras) {\n        var _this = this;\n        var cameraKey;\n        var cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        var _loop_1 = function (i) {\n            var camera = cams[i];\n            if (!camera) {\n                return \"continue\";\n            }\n            var cameraName = camera.name;\n            if (this_1._singleInstance) {\n                cameraKey = 0;\n            }\n            else {\n                cameraKey = cameraName;\n            }\n            if (!this_1._postProcesses[cameraKey]) {\n                var postProcess = this_1._getPostProcesses();\n                if (postProcess) {\n                    this_1._postProcesses[cameraKey] = Array.isArray(postProcess) ? postProcess : [postProcess];\n                }\n            }\n            if (!this_1._indicesForCamera[cameraName]) {\n                this_1._indicesForCamera[cameraName] = [];\n            }\n            this_1._postProcesses[cameraKey].forEach(function (postProcess) {\n                var index = camera.attachPostProcess(postProcess);\n                _this._indicesForCamera[cameraName].push(index);\n            });\n            if (!this_1._cameras[cameraName]) {\n                this_1._cameras[cameraName] = camera;\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < cams.length; i++) {\n            _loop_1(i);\n        }\n    };\n    /**\n     * Detaches the effect on cameras\n     * @param cameras The camera to detach from.\n     * @hidden\n     */\n    PostProcessRenderEffect.prototype._detachCameras = function (cameras) {\n        var cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        var _loop_2 = function (i) {\n            var camera = cams[i];\n            var cameraName = camera.name;\n            var postProcesses = this_2._postProcesses[this_2._singleInstance ? 0 : cameraName];\n            if (postProcesses) {\n                postProcesses.forEach(function (postProcess) {\n                    camera.detachPostProcess(postProcess);\n                });\n            }\n            if (this_2._cameras[cameraName]) {\n                this_2._cameras[cameraName] = null;\n            }\n        };\n        var this_2 = this;\n        for (var i = 0; i < cams.length; i++) {\n            _loop_2(i);\n        }\n    };\n    /**\n     * Enables the effect on given cameras\n     * @param cameras The camera to enable.\n     * @hidden\n     */\n    PostProcessRenderEffect.prototype._enable = function (cameras) {\n        var _this = this;\n        var cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        var _loop_3 = function (i) {\n            var camera = cams[i];\n            var cameraName = camera.name;\n            var _loop_4 = function (j) {\n                if (camera._postProcesses[this_3._indicesForCamera[cameraName][j]] === undefined || camera._postProcesses[this_3._indicesForCamera[cameraName][j]] === null) {\n                    this_3._postProcesses[this_3._singleInstance ? 0 : cameraName].forEach(function (postProcess) {\n                        cams[i].attachPostProcess(postProcess, _this._indicesForCamera[cameraName][j]);\n                    });\n                }\n            };\n            for (var j = 0; j < this_3._indicesForCamera[cameraName].length; j++) {\n                _loop_4(j);\n            }\n        };\n        var this_3 = this;\n        for (var i = 0; i < cams.length; i++) {\n            _loop_3(i);\n        }\n    };\n    /**\n     * Disables the effect on the given cameras\n     * @param cameras The camera to disable.\n     * @hidden\n     */\n    PostProcessRenderEffect.prototype._disable = function (cameras) {\n        var cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        var _loop_5 = function (i) {\n            var camera = cams[i];\n            var cameraName = camera.name;\n            this_4._postProcesses[this_4._singleInstance ? 0 : cameraName].forEach(function (postProcess) {\n                camera.detachPostProcess(postProcess);\n            });\n        };\n        var this_4 = this;\n        for (var i = 0; i < cams.length; i++) {\n            _loop_5(i);\n        }\n    };\n    /**\n     * Gets a list of the post processes contained in the effect.\n     * @param camera The camera to get the post processes on.\n     * @returns The list of the post processes in the effect.\n     */\n    PostProcessRenderEffect.prototype.getPostProcesses = function (camera) {\n        if (this._singleInstance) {\n            return this._postProcesses[0];\n        }\n        else {\n            if (!camera) {\n                return null;\n            }\n            return this._postProcesses[camera.name];\n        }\n    };\n    return PostProcessRenderEffect;\n}());\nexport { PostProcessRenderEffect };\n//# sourceMappingURL=postProcessRenderEffect.js.map","import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { ToGammaSpace } from \"../Maths/math.constants.js\";\n\nimport \"../Shaders/extractHighlights.fragment.js\";\nimport { serialize } from \"../Misc/decorators.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * The extract highlights post process sets all pixels to black except pixels above the specified luminance threshold. Used as the first step for a bloom effect.\n */\nvar ExtractHighlightsPostProcess = /** @class */ (function (_super) {\n    __extends(ExtractHighlightsPostProcess, _super);\n    function ExtractHighlightsPostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n        if (textureType === void 0) { textureType = 0; }\n        if (blockCompilation === void 0) { blockCompilation = false; }\n        var _this = _super.call(this, name, \"extractHighlights\", [\"threshold\", \"exposure\"], null, options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation) || this;\n        /**\n         * The luminance threshold, pixels below this value will be set to black.\n         */\n        _this.threshold = 0.9;\n        /** @hidden */\n        _this._exposure = 1;\n        /**\n         * Post process which has the input texture to be used when performing highlight extraction\n         * @hidden\n         */\n        _this._inputPostProcess = null;\n        _this.onApplyObservable.add(function (effect) {\n            _this.externalTextureSamplerBinding = !!_this._inputPostProcess;\n            if (_this._inputPostProcess) {\n                effect.setTextureFromPostProcess(\"textureSampler\", _this._inputPostProcess);\n            }\n            effect.setFloat(\"threshold\", Math.pow(_this.threshold, ToGammaSpace));\n            effect.setFloat(\"exposure\", _this._exposure);\n        });\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"ExtractHighlightsPostProcess\" string\n     */\n    ExtractHighlightsPostProcess.prototype.getClassName = function () {\n        return \"ExtractHighlightsPostProcess\";\n    };\n    __decorate([\n        serialize()\n    ], ExtractHighlightsPostProcess.prototype, \"threshold\", void 0);\n    return ExtractHighlightsPostProcess;\n}(PostProcess));\nexport { ExtractHighlightsPostProcess };\nRegisterClass(\"BABYLON.ExtractHighlightsPostProcess\", ExtractHighlightsPostProcess);\n//# sourceMappingURL=extractHighlightsPostProcess.js.map","import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/bloomMerge.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize } from \"../Misc/decorators.js\";\n/**\n * The BloomMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\n */\nvar BloomMergePostProcess = /** @class */ (function (_super) {\n    __extends(BloomMergePostProcess, _super);\n    /**\n     * Creates a new instance of @see BloomMergePostProcess\n     * @param name The name of the effect.\n     * @param originalFromInput Post process which's input will be used for the merge.\n     * @param blurred Blurred highlights post process which's output will be used.\n     * @param weight Weight of the bloom to be added to the original input.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    function BloomMergePostProcess(name, originalFromInput, blurred, \n    /** Weight of the bloom to be added to the original input. */\n    weight, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n        if (textureType === void 0) { textureType = 0; }\n        if (blockCompilation === void 0) { blockCompilation = false; }\n        var _this = _super.call(this, name, \"bloomMerge\", [\"bloomWeight\"], [\"bloomBlur\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, true) || this;\n        /** Weight of the bloom to be added to the original input. */\n        _this.weight = 1;\n        _this.weight = weight;\n        _this.externalTextureSamplerBinding = true;\n        _this.onApplyObservable.add(function (effect) {\n            effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\n            effect.setTextureFromPostProcessOutput(\"bloomBlur\", blurred);\n            effect.setFloat(\"bloomWeight\", _this.weight);\n        });\n        if (!blockCompilation) {\n            _this.updateEffect();\n        }\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"BloomMergePostProcess\" string\n     */\n    BloomMergePostProcess.prototype.getClassName = function () {\n        return \"BloomMergePostProcess\";\n    };\n    __decorate([\n        serialize()\n    ], BloomMergePostProcess.prototype, \"weight\", void 0);\n    return BloomMergePostProcess;\n}(PostProcess));\nexport { BloomMergePostProcess };\nRegisterClass(\"BABYLON.BloomMergePostProcess\", BloomMergePostProcess);\n//# sourceMappingURL=bloomMergePostProcess.js.map","import { __extends } from \"tslib\";\nimport { PostProcessRenderEffect } from \"../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { ExtractHighlightsPostProcess } from \"./extractHighlightsPostProcess.js\";\nimport { BlurPostProcess } from \"./blurPostProcess.js\";\nimport { BloomMergePostProcess } from \"./bloomMergePostProcess.js\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\n/**\n * The bloom effect spreads bright areas of an image to simulate artifacts seen in cameras\n */\nvar BloomEffect = /** @class */ (function (_super) {\n    __extends(BloomEffect, _super);\n    /**\n     * Creates a new instance of @see BloomEffect\n     * @param scene The scene the effect belongs to.\n     * @param _bloomScale The ratio of the blur texture to the input texture that should be used to compute the bloom.\n     * @param bloomWeight The the strength of bloom.\n     * @param bloomKernel The size of the kernel to be used when applying the blur.\n     * @param pipelineTextureType The type of texture to be used when performing the post processing.\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    function BloomEffect(scene, _bloomScale, bloomWeight, bloomKernel, pipelineTextureType, blockCompilation) {\n        if (pipelineTextureType === void 0) { pipelineTextureType = 0; }\n        if (blockCompilation === void 0) { blockCompilation = false; }\n        var _this = _super.call(this, scene.getEngine(), \"bloom\", function () {\n            return _this._effects;\n        }, true) || this;\n        _this._bloomScale = _bloomScale;\n        /**\n         * @hidden Internal\n         */\n        _this._effects = [];\n        _this._downscale = new ExtractHighlightsPostProcess(\"highlights\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, pipelineTextureType, blockCompilation);\n        _this._blurX = new BlurPostProcess(\"horizontal blur\", new Vector2(1.0, 0), 10.0, _bloomScale, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, pipelineTextureType, undefined, blockCompilation);\n        _this._blurX.alwaysForcePOT = true;\n        _this._blurX.autoClear = false;\n        _this._blurY = new BlurPostProcess(\"vertical blur\", new Vector2(0, 1.0), 10.0, _bloomScale, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, pipelineTextureType, undefined, blockCompilation);\n        _this._blurY.alwaysForcePOT = true;\n        _this._blurY.autoClear = false;\n        _this.kernel = bloomKernel;\n        _this._effects = [_this._downscale, _this._blurX, _this._blurY];\n        _this._merge = new BloomMergePostProcess(\"bloomMerge\", _this._downscale, _this._blurY, bloomWeight, _bloomScale, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, pipelineTextureType, blockCompilation);\n        _this._merge.autoClear = false;\n        _this._effects.push(_this._merge);\n        return _this;\n    }\n    Object.defineProperty(BloomEffect.prototype, \"threshold\", {\n        /**\n         * The luminance threshold to find bright areas of the image to bloom.\n         */\n        get: function () {\n            return this._downscale.threshold;\n        },\n        set: function (value) {\n            this._downscale.threshold = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BloomEffect.prototype, \"weight\", {\n        /**\n         * The strength of the bloom.\n         */\n        get: function () {\n            return this._merge.weight;\n        },\n        set: function (value) {\n            this._merge.weight = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BloomEffect.prototype, \"kernel\", {\n        /**\n         * Specifies the size of the bloom blur kernel, relative to the final output size\n         */\n        get: function () {\n            return this._blurX.kernel / this._bloomScale;\n        },\n        set: function (value) {\n            this._blurX.kernel = value * this._bloomScale;\n            this._blurY.kernel = value * this._bloomScale;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Disposes each of the internal effects for a given camera.\n     * @param camera The camera to dispose the effect on.\n     */\n    BloomEffect.prototype.disposeEffects = function (camera) {\n        for (var effectIndex = 0; effectIndex < this._effects.length; effectIndex++) {\n            this._effects[effectIndex].dispose(camera);\n        }\n    };\n    /**\n     * @hidden Internal\n     */\n    BloomEffect.prototype._updateEffects = function () {\n        for (var effectIndex = 0; effectIndex < this._effects.length; effectIndex++) {\n            this._effects[effectIndex].updateEffect();\n        }\n    };\n    /**\n     * Internal\n     * @returns if all the contained post processes are ready.\n     * @hidden\n     */\n    BloomEffect.prototype._isReady = function () {\n        for (var effectIndex = 0; effectIndex < this._effects.length; effectIndex++) {\n            if (!this._effects[effectIndex].isReady()) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return BloomEffect;\n}(PostProcessRenderEffect));\nexport { BloomEffect };\n//# sourceMappingURL=bloomEffect.js.map","import { __decorate, __extends } from \"tslib\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/chromaticAberration.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The ChromaticAberrationPostProcess separates the rgb channels in an image to produce chromatic distortion around the edges of the screen\n */\nvar ChromaticAberrationPostProcess = /** @class */ (function (_super) {\n    __extends(ChromaticAberrationPostProcess, _super);\n    /**\n     * Creates a new instance ChromaticAberrationPostProcess\n     * @param name The name of the effect.\n     * @param screenWidth The width of the screen to apply the effect on.\n     * @param screenHeight The height of the screen to apply the effect on.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    function ChromaticAberrationPostProcess(name, screenWidth, screenHeight, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n        if (textureType === void 0) { textureType = 0; }\n        if (blockCompilation === void 0) { blockCompilation = false; }\n        var _this = _super.call(this, name, \"chromaticAberration\", [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation) || this;\n        /**\n         * The amount of separation of rgb channels (default: 30)\n         */\n        _this.aberrationAmount = 30;\n        /**\n         * The amount the effect will increase for pixels closer to the edge of the screen. (default: 0)\n         */\n        _this.radialIntensity = 0;\n        /**\n         * The normalized direction in which the rgb channels should be separated. If set to 0,0 radial direction will be used. (default: Vector2(0.707,0.707))\n         */\n        _this.direction = new Vector2(0.707, 0.707);\n        /**\n         * The center position where the radialIntensity should be around. [0.5,0.5 is center of screen, 1,1 is top right corner] (default: Vector2(0.5 ,0.5))\n         */\n        _this.centerPosition = new Vector2(0.5, 0.5);\n        _this.screenWidth = screenWidth;\n        _this.screenHeight = screenHeight;\n        _this.onApplyObservable.add(function (effect) {\n            effect.setFloat(\"chromatic_aberration\", _this.aberrationAmount);\n            effect.setFloat(\"screen_width\", screenWidth);\n            effect.setFloat(\"screen_height\", screenHeight);\n            effect.setFloat(\"radialIntensity\", _this.radialIntensity);\n            effect.setFloat2(\"direction\", _this.direction.x, _this.direction.y);\n            effect.setFloat2(\"centerPosition\", _this.centerPosition.x, _this.centerPosition.y);\n        });\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"ChromaticAberrationPostProcess\" string\n     */\n    ChromaticAberrationPostProcess.prototype.getClassName = function () {\n        return \"ChromaticAberrationPostProcess\";\n    };\n    /**\n     * @param parsedPostProcess\n     * @param targetCamera\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    ChromaticAberrationPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(function () {\n            return new ChromaticAberrationPostProcess(parsedPostProcess.name, parsedPostProcess.screenWidth, parsedPostProcess.screenHeight, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType, false);\n        }, parsedPostProcess, scene, rootUrl);\n    };\n    __decorate([\n        serialize()\n    ], ChromaticAberrationPostProcess.prototype, \"aberrationAmount\", void 0);\n    __decorate([\n        serialize()\n    ], ChromaticAberrationPostProcess.prototype, \"radialIntensity\", void 0);\n    __decorate([\n        serialize()\n    ], ChromaticAberrationPostProcess.prototype, \"direction\", void 0);\n    __decorate([\n        serialize()\n    ], ChromaticAberrationPostProcess.prototype, \"centerPosition\", void 0);\n    __decorate([\n        serialize()\n    ], ChromaticAberrationPostProcess.prototype, \"screenWidth\", void 0);\n    __decorate([\n        serialize()\n    ], ChromaticAberrationPostProcess.prototype, \"screenHeight\", void 0);\n    return ChromaticAberrationPostProcess;\n}(PostProcess));\nexport { ChromaticAberrationPostProcess };\nRegisterClass(\"BABYLON.ChromaticAberrationPostProcess\", ChromaticAberrationPostProcess);\n//# sourceMappingURL=chromaticAberrationPostProcess.js.map","import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { Logger } from \"../Misc/logger.js\";\n\nimport \"../Shaders/circleOfConfusion.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize } from \"../Misc/decorators.js\";\n/**\n * The CircleOfConfusionPostProcess computes the circle of confusion value for each pixel given required lens parameters. See https://en.wikipedia.org/wiki/Circle_of_confusion\n */\nvar CircleOfConfusionPostProcess = /** @class */ (function (_super) {\n    __extends(CircleOfConfusionPostProcess, _super);\n    /**\n     * Creates a new instance CircleOfConfusionPostProcess\n     * @param name The name of the effect.\n     * @param depthTexture The depth texture of the scene to compute the circle of confusion. This must be set in order for this to function but may be set after initialization if needed.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    function CircleOfConfusionPostProcess(name, depthTexture, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n        if (textureType === void 0) { textureType = 0; }\n        if (blockCompilation === void 0) { blockCompilation = false; }\n        var _this = _super.call(this, name, \"circleOfConfusion\", [\"cameraMinMaxZ\", \"focusDistance\", \"cocPrecalculation\"], [\"depthSampler\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation) || this;\n        /**\n         * Max lens size in scene units/1000 (eg. millimeter). Standard cameras are 50mm. (default: 50) The diameter of the resulting aperture can be computed by lensSize/fStop.\n         */\n        _this.lensSize = 50;\n        /**\n         * F-Stop of the effect's camera. The diameter of the resulting aperture can be computed by lensSize/fStop. (default: 1.4)\n         */\n        _this.fStop = 1.4;\n        /**\n         * Distance away from the camera to focus on in scene units/1000 (eg. millimeter). (default: 2000)\n         */\n        _this.focusDistance = 2000;\n        /**\n         * Focal length of the effect's camera in scene units/1000 (eg. millimeter). (default: 50)\n         */\n        _this.focalLength = 50;\n        _this._depthTexture = null;\n        _this._depthTexture = depthTexture;\n        _this.onApplyObservable.add(function (effect) {\n            if (!_this._depthTexture) {\n                Logger.Warn(\"No depth texture set on CircleOfConfusionPostProcess\");\n                return;\n            }\n            effect.setTexture(\"depthSampler\", _this._depthTexture);\n            // Circle of confusion calculation, See https://developer.nvidia.com/gpugems/GPUGems/gpugems_ch23.html\n            var aperture = _this.lensSize / _this.fStop;\n            var cocPrecalculation = (aperture * _this.focalLength) / (_this.focusDistance - _this.focalLength); // * ((this.focusDistance - pixelDistance)/pixelDistance) [This part is done in shader]\n            effect.setFloat(\"focusDistance\", _this.focusDistance);\n            effect.setFloat(\"cocPrecalculation\", cocPrecalculation);\n            effect.setFloat2(\"cameraMinMaxZ\", _this._depthTexture.activeCamera.minZ, _this._depthTexture.activeCamera.maxZ);\n        });\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"CircleOfConfusionPostProcess\" string\n     */\n    CircleOfConfusionPostProcess.prototype.getClassName = function () {\n        return \"CircleOfConfusionPostProcess\";\n    };\n    Object.defineProperty(CircleOfConfusionPostProcess.prototype, \"depthTexture\", {\n        /**\n         * Depth texture to be used to compute the circle of confusion. This must be set here or in the constructor in order for the post process to function.\n         */\n        set: function (value) {\n            this._depthTexture = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    __decorate([\n        serialize()\n    ], CircleOfConfusionPostProcess.prototype, \"lensSize\", void 0);\n    __decorate([\n        serialize()\n    ], CircleOfConfusionPostProcess.prototype, \"fStop\", void 0);\n    __decorate([\n        serialize()\n    ], CircleOfConfusionPostProcess.prototype, \"focusDistance\", void 0);\n    __decorate([\n        serialize()\n    ], CircleOfConfusionPostProcess.prototype, \"focalLength\", void 0);\n    return CircleOfConfusionPostProcess;\n}(PostProcess));\nexport { CircleOfConfusionPostProcess };\nRegisterClass(\"BABYLON.CircleOfConfusionPostProcess\", CircleOfConfusionPostProcess);\n//# sourceMappingURL=circleOfConfusionPostProcess.js.map","import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport \"../Shaders/colorCorrection.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\n/**\n *\n * This post-process allows the modification of rendered colors by using\n * a 'look-up table' (LUT). This effect is also called Color Grading.\n *\n * The object needs to be provided an url to a texture containing the color\n * look-up table: the texture must be 256 pixels wide and 16 pixels high.\n * Use an image editing software to tweak the LUT to match your needs.\n *\n * For an example of a color LUT, see here:\n * @see http://udn.epicgames.com/Three/rsrc/Three/ColorGrading/RGBTable16x1.png\n * For explanations on color grading, see here:\n * @see http://udn.epicgames.com/Three/ColorGrading.html\n *\n */\nvar ColorCorrectionPostProcess = /** @class */ (function (_super) {\n    __extends(ColorCorrectionPostProcess, _super);\n    function ColorCorrectionPostProcess(name, colorTableUrl, options, camera, samplingMode, engine, reusable) {\n        var _this = _super.call(this, name, \"colorCorrection\", null, [\"colorTable\"], options, camera, samplingMode, engine, reusable) || this;\n        _this._colorTableTexture = new Texture(colorTableUrl, camera.getScene(), true, false, Texture.TRILINEAR_SAMPLINGMODE);\n        _this._colorTableTexture.anisotropicFilteringLevel = 1;\n        _this._colorTableTexture.wrapU = Texture.CLAMP_ADDRESSMODE;\n        _this._colorTableTexture.wrapV = Texture.CLAMP_ADDRESSMODE;\n        _this.colorTableUrl = colorTableUrl;\n        _this.onApply = function (effect) {\n            effect.setTexture(\"colorTable\", _this._colorTableTexture);\n        };\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"ColorCorrectionPostProcess\" string\n     */\n    ColorCorrectionPostProcess.prototype.getClassName = function () {\n        return \"ColorCorrectionPostProcess\";\n    };\n    /**\n     * @param parsedPostProcess\n     * @param targetCamera\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    ColorCorrectionPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(function () {\n            return new ColorCorrectionPostProcess(parsedPostProcess.name, parsedPostProcess.colorTableUrl, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    };\n    __decorate([\n        serialize()\n    ], ColorCorrectionPostProcess.prototype, \"colorTableUrl\", void 0);\n    return ColorCorrectionPostProcess;\n}(PostProcess));\nexport { ColorCorrectionPostProcess };\nRegisterClass(\"BABYLON.ColorCorrectionPostProcess\", ColorCorrectionPostProcess);\n//# sourceMappingURL=colorCorrectionPostProcess.js.map","import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/convolution.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The ConvolutionPostProcess applies a 3x3 kernel to every pixel of the\n * input texture to perform effects such as edge detection or sharpening\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nvar ConvolutionPostProcess = /** @class */ (function (_super) {\n    __extends(ConvolutionPostProcess, _super);\n    /**\n     * Creates a new instance ConvolutionPostProcess\n     * @param name The name of the effect.\n     * @param kernel Array of 9 values corresponding to the 3x3 kernel to be applied\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     */\n    function ConvolutionPostProcess(name, kernel, options, camera, samplingMode, engine, reusable, textureType) {\n        if (textureType === void 0) { textureType = 0; }\n        var _this = _super.call(this, name, \"convolution\", [\"kernel\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType) || this;\n        _this.kernel = kernel;\n        _this.onApply = function (effect) {\n            effect.setFloat2(\"screenSize\", _this.width, _this.height);\n            effect.setArray(\"kernel\", _this.kernel);\n        };\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"ConvolutionPostProcess\" string\n     */\n    ConvolutionPostProcess.prototype.getClassName = function () {\n        return \"ConvolutionPostProcess\";\n    };\n    /**\n     * @param parsedPostProcess\n     * @param targetCamera\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    ConvolutionPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(function () {\n            return new ConvolutionPostProcess(parsedPostProcess.name, parsedPostProcess.kernel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType);\n        }, parsedPostProcess, scene, rootUrl);\n    };\n    // Statics\n    /**\n     * Edge detection 0 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n     */\n    ConvolutionPostProcess.EdgeDetect0Kernel = [1, 0, -1, 0, 0, 0, -1, 0, 1];\n    /**\n     * Edge detection 1 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n     */\n    ConvolutionPostProcess.EdgeDetect1Kernel = [0, 1, 0, 1, -4, 1, 0, 1, 0];\n    /**\n     * Edge detection 2 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n     */\n    ConvolutionPostProcess.EdgeDetect2Kernel = [-1, -1, -1, -1, 8, -1, -1, -1, -1];\n    /**\n     * Kernel to sharpen an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n     */\n    ConvolutionPostProcess.SharpenKernel = [0, -1, 0, -1, 5, -1, 0, -1, 0];\n    /**\n     * Kernel to emboss an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n     */\n    ConvolutionPostProcess.EmbossKernel = [-2, -1, 0, -1, 1, 1, 0, 1, 2];\n    /**\n     * Kernel to blur an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n     */\n    ConvolutionPostProcess.GaussianKernel = [0, 1, 0, 1, 1, 1, 0, 1, 0];\n    __decorate([\n        serialize()\n    ], ConvolutionPostProcess.prototype, \"kernel\", void 0);\n    return ConvolutionPostProcess;\n}(PostProcess));\nexport { ConvolutionPostProcess };\nRegisterClass(\"BABYLON.ConvolutionPostProcess\", ConvolutionPostProcess);\n//# sourceMappingURL=convolutionPostProcess.js.map","import { __decorate, __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { BlurPostProcess } from \"./blurPostProcess.js\";\n\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize } from \"../Misc/decorators.js\";\n/**\n * The DepthOfFieldBlurPostProcess applied a blur in a give direction.\n * This blur differs from the standard BlurPostProcess as it attempts to avoid blurring pixels\n * based on samples that have a large difference in distance than the center pixel.\n * See section 2.6.2 http://fileadmin.cs.lth.se/cs/education/edan35/lectures/12dof.pdf\n */\nvar DepthOfFieldBlurPostProcess = /** @class */ (function (_super) {\n    __extends(DepthOfFieldBlurPostProcess, _super);\n    /**\n     * Creates a new instance DepthOfFieldBlurPostProcess\n     * @param name The name of the effect.\n     * @param scene The scene the effect belongs to.\n     * @param direction The direction the blur should be applied.\n     * @param kernel The size of the kernel used to blur.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param circleOfConfusion The circle of confusion + depth map to be used to avoid blurring across edges\n     * @param imageToBlur The image to apply the blur to (default: Current rendered frame)\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    function DepthOfFieldBlurPostProcess(name, scene, direction, kernel, options, camera, circleOfConfusion, imageToBlur, samplingMode, engine, reusable, textureType, blockCompilation) {\n        if (imageToBlur === void 0) { imageToBlur = null; }\n        if (samplingMode === void 0) { samplingMode = Texture.BILINEAR_SAMPLINGMODE; }\n        if (textureType === void 0) { textureType = 0; }\n        if (blockCompilation === void 0) { blockCompilation = false; }\n        var _this = _super.call(this, name, direction, kernel, options, camera, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        (samplingMode = 2), engine, reusable, textureType, \"#define DOF 1\\r\\n\", blockCompilation) || this;\n        _this.direction = direction;\n        _this.externalTextureSamplerBinding = !!imageToBlur;\n        _this.onApplyObservable.add(function (effect) {\n            if (imageToBlur != null) {\n                effect.setTextureFromPostProcess(\"textureSampler\", imageToBlur);\n            }\n            effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\n            if (scene.activeCamera) {\n                effect.setFloat2(\"cameraMinMaxZ\", scene.activeCamera.minZ, scene.activeCamera.maxZ);\n            }\n        });\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"DepthOfFieldBlurPostProcess\" string\n     */\n    DepthOfFieldBlurPostProcess.prototype.getClassName = function () {\n        return \"DepthOfFieldBlurPostProcess\";\n    };\n    __decorate([\n        serialize()\n    ], DepthOfFieldBlurPostProcess.prototype, \"direction\", void 0);\n    return DepthOfFieldBlurPostProcess;\n}(BlurPostProcess));\nexport { DepthOfFieldBlurPostProcess };\nRegisterClass(\"BABYLON.DepthOfFieldBlurPostProcess\", DepthOfFieldBlurPostProcess);\n//# sourceMappingURL=depthOfFieldBlurPostProcess.js.map","import { __extends } from \"tslib\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcessRenderEffect } from \"../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { CircleOfConfusionPostProcess } from \"./circleOfConfusionPostProcess.js\";\nimport { DepthOfFieldBlurPostProcess } from \"./depthOfFieldBlurPostProcess.js\";\nimport { DepthOfFieldMergePostProcess } from \"./depthOfFieldMergePostProcess.js\";\n/**\n * Specifies the level of max blur that should be applied when using the depth of field effect\n */\nexport var DepthOfFieldEffectBlurLevel;\n(function (DepthOfFieldEffectBlurLevel) {\n    /**\n     * Subtle blur\n     */\n    DepthOfFieldEffectBlurLevel[DepthOfFieldEffectBlurLevel[\"Low\"] = 0] = \"Low\";\n    /**\n     * Medium blur\n     */\n    DepthOfFieldEffectBlurLevel[DepthOfFieldEffectBlurLevel[\"Medium\"] = 1] = \"Medium\";\n    /**\n     * Large blur\n     */\n    DepthOfFieldEffectBlurLevel[DepthOfFieldEffectBlurLevel[\"High\"] = 2] = \"High\";\n})(DepthOfFieldEffectBlurLevel || (DepthOfFieldEffectBlurLevel = {}));\n/**\n * The depth of field effect applies a blur to objects that are closer or further from where the camera is focusing.\n */\nvar DepthOfFieldEffect = /** @class */ (function (_super) {\n    __extends(DepthOfFieldEffect, _super);\n    /**\n     * Creates a new instance DepthOfFieldEffect\n     * @param scene The scene the effect belongs to.\n     * @param depthTexture The depth texture of the scene to compute the circle of confusion.This must be set in order for this to function but may be set after initialization if needed.\n     * @param blurLevel\n     * @param pipelineTextureType The type of texture to be used when performing the post processing.\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    function DepthOfFieldEffect(scene, depthTexture, blurLevel, pipelineTextureType, blockCompilation) {\n        if (blurLevel === void 0) { blurLevel = DepthOfFieldEffectBlurLevel.Low; }\n        if (pipelineTextureType === void 0) { pipelineTextureType = 0; }\n        if (blockCompilation === void 0) { blockCompilation = false; }\n        var _this = _super.call(this, scene.getEngine(), \"depth of field\", function () {\n            return _this._effects;\n        }, true) || this;\n        /**\n         * @hidden Internal post processes in depth of field effect\n         */\n        _this._effects = [];\n        // Circle of confusion value for each pixel is used to determine how much to blur that pixel\n        _this._circleOfConfusion = new CircleOfConfusionPostProcess(\"circleOfConfusion\", depthTexture, 1, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, pipelineTextureType, blockCompilation);\n        // Create a pyramid of blurred images (eg. fullSize 1/4 blur, half size 1/2 blur, quarter size 3/4 blur, eith size 4/4 blur)\n        // Blur the image but do not blur on sharp far to near distance changes to avoid bleeding artifacts\n        // See section 2.6.2 http://fileadmin.cs.lth.se/cs/education/edan35/lectures/12dof.pdf\n        _this._depthOfFieldBlurY = [];\n        _this._depthOfFieldBlurX = [];\n        var blurCount = 1;\n        var kernelSize = 15;\n        switch (blurLevel) {\n            case DepthOfFieldEffectBlurLevel.High: {\n                blurCount = 3;\n                kernelSize = 51;\n                break;\n            }\n            case DepthOfFieldEffectBlurLevel.Medium: {\n                blurCount = 2;\n                kernelSize = 31;\n                break;\n            }\n            default: {\n                kernelSize = 15;\n                blurCount = 1;\n                break;\n            }\n        }\n        var adjustedKernelSize = kernelSize / Math.pow(2, blurCount - 1);\n        var ratio = 1.0;\n        for (var i = 0; i < blurCount; i++) {\n            var blurY = new DepthOfFieldBlurPostProcess(\"vertical blur\", scene, new Vector2(0, 1.0), adjustedKernelSize, ratio, null, _this._circleOfConfusion, i == 0 ? _this._circleOfConfusion : null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, pipelineTextureType, blockCompilation);\n            blurY.autoClear = false;\n            ratio = 0.75 / Math.pow(2, i);\n            var blurX = new DepthOfFieldBlurPostProcess(\"horizontal blur\", scene, new Vector2(1.0, 0), adjustedKernelSize, ratio, null, _this._circleOfConfusion, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, pipelineTextureType, blockCompilation);\n            blurX.autoClear = false;\n            _this._depthOfFieldBlurY.push(blurY);\n            _this._depthOfFieldBlurX.push(blurX);\n        }\n        // Set all post processes on the effect.\n        _this._effects = [_this._circleOfConfusion];\n        for (var i = 0; i < _this._depthOfFieldBlurX.length; i++) {\n            _this._effects.push(_this._depthOfFieldBlurY[i]);\n            _this._effects.push(_this._depthOfFieldBlurX[i]);\n        }\n        // Merge blurred images with original image based on circleOfConfusion\n        _this._dofMerge = new DepthOfFieldMergePostProcess(\"dofMerge\", _this._circleOfConfusion, _this._circleOfConfusion, _this._depthOfFieldBlurX, ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, pipelineTextureType, blockCompilation);\n        _this._dofMerge.autoClear = false;\n        _this._effects.push(_this._dofMerge);\n        return _this;\n    }\n    Object.defineProperty(DepthOfFieldEffect.prototype, \"focalLength\", {\n        get: function () {\n            return this._circleOfConfusion.focalLength;\n        },\n        /**\n         * The focal the length of the camera used in the effect in scene units/1000 (eg. millimeter)\n         */\n        set: function (value) {\n            this._circleOfConfusion.focalLength = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DepthOfFieldEffect.prototype, \"fStop\", {\n        get: function () {\n            return this._circleOfConfusion.fStop;\n        },\n        /**\n         * F-Stop of the effect's camera. The diameter of the resulting aperture can be computed by lensSize/fStop. (default: 1.4)\n         */\n        set: function (value) {\n            this._circleOfConfusion.fStop = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DepthOfFieldEffect.prototype, \"focusDistance\", {\n        get: function () {\n            return this._circleOfConfusion.focusDistance;\n        },\n        /**\n         * Distance away from the camera to focus on in scene units/1000 (eg. millimeter). (default: 2000)\n         */\n        set: function (value) {\n            this._circleOfConfusion.focusDistance = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DepthOfFieldEffect.prototype, \"lensSize\", {\n        get: function () {\n            return this._circleOfConfusion.lensSize;\n        },\n        /**\n         * Max lens size in scene units/1000 (eg. millimeter). Standard cameras are 50mm. (default: 50) The diameter of the resulting aperture can be computed by lensSize/fStop.\n         */\n        set: function (value) {\n            this._circleOfConfusion.lensSize = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get the current class name of the current effect\n     * @returns \"DepthOfFieldEffect\"\n     */\n    DepthOfFieldEffect.prototype.getClassName = function () {\n        return \"DepthOfFieldEffect\";\n    };\n    Object.defineProperty(DepthOfFieldEffect.prototype, \"depthTexture\", {\n        /**\n         * Depth texture to be used to compute the circle of confusion. This must be set here or in the constructor in order for the post process to function.\n         */\n        set: function (value) {\n            this._circleOfConfusion.depthTexture = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Disposes each of the internal effects for a given camera.\n     * @param camera The camera to dispose the effect on.\n     */\n    DepthOfFieldEffect.prototype.disposeEffects = function (camera) {\n        for (var effectIndex = 0; effectIndex < this._effects.length; effectIndex++) {\n            this._effects[effectIndex].dispose(camera);\n        }\n    };\n    /**\n     * @hidden Internal\n     */\n    DepthOfFieldEffect.prototype._updateEffects = function () {\n        for (var effectIndex = 0; effectIndex < this._effects.length; effectIndex++) {\n            this._effects[effectIndex].updateEffect();\n        }\n    };\n    /**\n     * Internal\n     * @returns if all the contained post processes are ready.\n     * @hidden\n     */\n    DepthOfFieldEffect.prototype._isReady = function () {\n        for (var effectIndex = 0; effectIndex < this._effects.length; effectIndex++) {\n            if (!this._effects[effectIndex].isReady()) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return DepthOfFieldEffect;\n}(PostProcessRenderEffect));\nexport { DepthOfFieldEffect };\n//# sourceMappingURL=depthOfFieldEffect.js.map","import { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/depthOfFieldMerge.fragment.js\";\n/**\n * Options to be set when merging outputs from the default pipeline.\n */\nvar DepthOfFieldMergePostProcessOptions = /** @class */ (function () {\n    function DepthOfFieldMergePostProcessOptions() {\n    }\n    return DepthOfFieldMergePostProcessOptions;\n}());\nexport { DepthOfFieldMergePostProcessOptions };\n/**\n * The DepthOfFieldMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\n */\nvar DepthOfFieldMergePostProcess = /** @class */ (function (_super) {\n    __extends(DepthOfFieldMergePostProcess, _super);\n    /**\n     * Creates a new instance of DepthOfFieldMergePostProcess\n     * @param name The name of the effect.\n     * @param originalFromInput Post process which's input will be used for the merge.\n     * @param circleOfConfusion Circle of confusion post process which's output will be used to blur each pixel.\n     * @param _blurSteps Blur post processes from low to high which will be mixed with the original image.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    function DepthOfFieldMergePostProcess(name, originalFromInput, circleOfConfusion, _blurSteps, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n        if (textureType === void 0) { textureType = 0; }\n        if (blockCompilation === void 0) { blockCompilation = false; }\n        var _this = _super.call(this, name, \"depthOfFieldMerge\", [], [\"circleOfConfusionSampler\", \"blurStep0\", \"blurStep1\", \"blurStep2\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, true) || this;\n        _this._blurSteps = _blurSteps;\n        _this.externalTextureSamplerBinding = true;\n        _this.onApplyObservable.add(function (effect) {\n            effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\n            effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\n            _blurSteps.forEach(function (step, index) {\n                effect.setTextureFromPostProcessOutput(\"blurStep\" + (_blurSteps.length - index - 1), step);\n            });\n        });\n        if (!blockCompilation) {\n            _this.updateEffect();\n        }\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"DepthOfFieldMergePostProcess\" string\n     */\n    DepthOfFieldMergePostProcess.prototype.getClassName = function () {\n        return \"DepthOfFieldMergePostProcess\";\n    };\n    /**\n     * Updates the effect with the current post process compile time values and recompiles the shader.\n     * @param defines Define statements that should be added at the beginning of the shader. (default: null)\n     * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\n     * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\n     * @param onCompiled Called when the shader has been compiled.\n     * @param onError Called if there is an error when compiling a shader.\n     */\n    DepthOfFieldMergePostProcess.prototype.updateEffect = function (defines, uniforms, samplers, indexParameters, onCompiled, onError) {\n        if (defines === void 0) { defines = null; }\n        if (uniforms === void 0) { uniforms = null; }\n        if (samplers === void 0) { samplers = null; }\n        if (!defines) {\n            defines = \"\";\n            defines += \"#define BLUR_LEVEL \" + (this._blurSteps.length - 1) + \"\\n\";\n        }\n        _super.prototype.updateEffect.call(this, defines, uniforms, samplers, indexParameters, onCompiled, onError);\n    };\n    return DepthOfFieldMergePostProcess;\n}(PostProcess));\nexport { DepthOfFieldMergePostProcess };\n//# sourceMappingURL=depthOfFieldMergePostProcess.js.map","import { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/displayPass.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * DisplayPassPostProcess which produces an output the same as it's input\n */\nvar DisplayPassPostProcess = /** @class */ (function (_super) {\n    __extends(DisplayPassPostProcess, _super);\n    /**\n     * Creates the DisplayPassPostProcess\n     * @param name The name of the effect.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     */\n    function DisplayPassPostProcess(name, options, camera, samplingMode, engine, reusable) {\n        return _super.call(this, name, \"displayPass\", [\"passSampler\"], [\"passSampler\"], options, camera, samplingMode, engine, reusable) || this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"DisplayPassPostProcess\" string\n     */\n    DisplayPassPostProcess.prototype.getClassName = function () {\n        return \"DisplayPassPostProcess\";\n    };\n    /**\n     * @param parsedPostProcess\n     * @param targetCamera\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    DisplayPassPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(function () {\n            return new DisplayPassPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    };\n    return DisplayPassPostProcess;\n}(PostProcess));\nexport { DisplayPassPostProcess };\nRegisterClass(\"BABYLON.DisplayPassPostProcess\", DisplayPassPostProcess);\n//# sourceMappingURL=displayPassPostProcess.js.map","import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/filter.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serializeAsMatrix, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * Applies a kernel filter to the image\n */\nvar FilterPostProcess = /** @class */ (function (_super) {\n    __extends(FilterPostProcess, _super);\n    /**\n     *\n     * @param name The name of the effect.\n     * @param kernelMatrix The matrix to be applied to the image\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     */\n    function FilterPostProcess(name, kernelMatrix, options, camera, samplingMode, engine, reusable) {\n        var _this = _super.call(this, name, \"filter\", [\"kernelMatrix\"], null, options, camera, samplingMode, engine, reusable) || this;\n        _this.kernelMatrix = kernelMatrix;\n        _this.onApply = function (effect) {\n            effect.setMatrix(\"kernelMatrix\", _this.kernelMatrix);\n        };\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"FilterPostProcess\" string\n     */\n    FilterPostProcess.prototype.getClassName = function () {\n        return \"FilterPostProcess\";\n    };\n    /**\n     * @param parsedPostProcess\n     * @param targetCamera\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    FilterPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(function () {\n            return new FilterPostProcess(parsedPostProcess.name, parsedPostProcess.kernelMatrix, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    };\n    __decorate([\n        serializeAsMatrix()\n    ], FilterPostProcess.prototype, \"kernelMatrix\", void 0);\n    return FilterPostProcess;\n}(PostProcess));\nexport { FilterPostProcess };\nRegisterClass(\"BABYLON.FilterPostProcess\", FilterPostProcess);\n//# sourceMappingURL=filterPostProcess.js.map","import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/grain.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The GrainPostProcess adds noise to the image at mid luminance levels\n */\nvar GrainPostProcess = /** @class */ (function (_super) {\n    __extends(GrainPostProcess, _super);\n    /**\n     * Creates a new instance of @see GrainPostProcess\n     * @param name The name of the effect.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    function GrainPostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n        if (textureType === void 0) { textureType = 0; }\n        if (blockCompilation === void 0) { blockCompilation = false; }\n        var _this = _super.call(this, name, \"grain\", [\"intensity\", \"animatedSeed\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation) || this;\n        /**\n         * The intensity of the grain added (default: 30)\n         */\n        _this.intensity = 30;\n        /**\n         * If the grain should be randomized on every frame\n         */\n        _this.animated = false;\n        _this.onApplyObservable.add(function (effect) {\n            effect.setFloat(\"intensity\", _this.intensity);\n            effect.setFloat(\"animatedSeed\", _this.animated ? Math.random() + 1 : 1);\n        });\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"GrainPostProcess\" string\n     */\n    GrainPostProcess.prototype.getClassName = function () {\n        return \"GrainPostProcess\";\n    };\n    /**\n     * @param parsedPostProcess\n     * @param targetCamera\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    GrainPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(function () {\n            return new GrainPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    };\n    __decorate([\n        serialize()\n    ], GrainPostProcess.prototype, \"intensity\", void 0);\n    __decorate([\n        serialize()\n    ], GrainPostProcess.prototype, \"animated\", void 0);\n    return GrainPostProcess;\n}(PostProcess));\nexport { GrainPostProcess };\nRegisterClass(\"BABYLON.GrainPostProcess\", GrainPostProcess);\n//# sourceMappingURL=grainPostProcess.js.map","import { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/highlights.fragment.js\";\n/**\n * Extracts highlights from the image\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses\n */\nvar HighlightsPostProcess = /** @class */ (function (_super) {\n    __extends(HighlightsPostProcess, _super);\n    /**\n     * Extracts highlights from the image\n     * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses\n     * @param name The name of the effect.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of texture for the post process (default: Engine.TEXTURETYPE_UNSIGNED_INT)\n     */\n    function HighlightsPostProcess(name, options, camera, samplingMode, engine, reusable, textureType) {\n        if (textureType === void 0) { textureType = 0; }\n        return _super.call(this, name, \"highlights\", null, null, options, camera, samplingMode, engine, reusable, null, textureType) || this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"HighlightsPostProcess\" string\n     */\n    HighlightsPostProcess.prototype.getClassName = function () {\n        return \"HighlightsPostProcess\";\n    };\n    return HighlightsPostProcess;\n}(PostProcess));\nexport { HighlightsPostProcess };\n//# sourceMappingURL=highlightsPostProcess.js.map","import { __decorate, __extends } from \"tslib\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { Matrix, Vector2 } from \"../Maths/math.vector.js\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport { GeometryBufferRenderer } from \"../Rendering/geometryBufferRenderer.js\";\nimport { MotionBlurConfiguration } from \"../Rendering/motionBlurConfiguration.js\";\nimport \"../Animations/animatable.js\";\nimport \"../Rendering/geometryBufferRendererSceneComponent.js\";\nimport \"../Shaders/motionBlur.fragment.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * The Motion Blur Post Process which blurs an image based on the objects velocity in scene.\n * Velocity can be affected by each object's rotation, position and scale depending on the transformation speed.\n * As an example, all you have to do is to create the post-process:\n *  var mb = new BABYLON.MotionBlurPostProcess(\n *      'mb', // The name of the effect.\n *      scene, // The scene containing the objects to blur according to their velocity.\n *      1.0, // The required width/height ratio to downsize to before computing the render pass.\n *      camera // The camera to apply the render pass to.\n * );\n * Then, all objects moving, rotating and/or scaling will be blurred depending on the transformation speed.\n */\nvar MotionBlurPostProcess = /** @class */ (function (_super) {\n    __extends(MotionBlurPostProcess, _super);\n    /**\n     * Creates a new instance MotionBlurPostProcess\n     * @param name The name of the effect.\n     * @param scene The scene containing the objects to blur according to their velocity.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: true)\n     * @param forceGeometryBuffer If this post process should use geometry buffer instead of prepass (default: false)\n     */\n    function MotionBlurPostProcess(name, scene, options, camera, samplingMode, engine, reusable, textureType, blockCompilation, forceGeometryBuffer) {\n        if (textureType === void 0) { textureType = 0; }\n        if (blockCompilation === void 0) { blockCompilation = false; }\n        if (forceGeometryBuffer === void 0) { forceGeometryBuffer = false; }\n        var _this = _super.call(this, name, \"motionBlur\", [\"motionStrength\", \"motionScale\", \"screenSize\", \"inverseViewProjection\", \"prevViewProjection\"], [\"velocitySampler\"], options, camera, samplingMode, engine, reusable, \"#define GEOMETRY_SUPPORTED\\n#define SAMPLES 64.0\\n#define OBJECT_BASED\", textureType, undefined, null, blockCompilation) || this;\n        /**\n         * Defines how much the image is blurred by the movement. Default value is equal to 1\n         */\n        _this.motionStrength = 1;\n        _this._motionBlurSamples = 32;\n        _this._isObjectBased = true;\n        _this._forceGeometryBuffer = false;\n        _this._invViewProjection = null;\n        _this._previousViewProjection = null;\n        _this._forceGeometryBuffer = forceGeometryBuffer;\n        // Set up assets\n        if (_this._forceGeometryBuffer) {\n            scene.enableGeometryBufferRenderer();\n            if (_this._geometryBufferRenderer) {\n                _this._geometryBufferRenderer.enableVelocity = true;\n            }\n        }\n        else {\n            scene.enablePrePassRenderer();\n            if (_this._prePassRenderer) {\n                _this._prePassRenderer.markAsDirty();\n                _this._prePassEffectConfiguration = new MotionBlurConfiguration();\n            }\n        }\n        _this._applyMode();\n        return _this;\n    }\n    Object.defineProperty(MotionBlurPostProcess.prototype, \"motionBlurSamples\", {\n        /**\n         * Gets the number of iterations are used for motion blur quality. Default value is equal to 32\n         */\n        get: function () {\n            return this._motionBlurSamples;\n        },\n        /**\n         * Sets the number of iterations to be used for motion blur quality\n         */\n        set: function (samples) {\n            this._motionBlurSamples = samples;\n            this._updateEffect();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MotionBlurPostProcess.prototype, \"isObjectBased\", {\n        /**\n         * Gets whether or not the motion blur post-process is in object based mode.\n         */\n        get: function () {\n            return this._isObjectBased;\n        },\n        /**\n         * Sets whether or not the motion blur post-process is in object based mode.\n         */\n        set: function (value) {\n            if (this._isObjectBased === value) {\n                return;\n            }\n            this._isObjectBased = value;\n            this._applyMode();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MotionBlurPostProcess.prototype, \"_geometryBufferRenderer\", {\n        get: function () {\n            if (!this._forceGeometryBuffer) {\n                return null;\n            }\n            return this._scene.geometryBufferRenderer;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MotionBlurPostProcess.prototype, \"_prePassRenderer\", {\n        get: function () {\n            if (this._forceGeometryBuffer) {\n                return null;\n            }\n            return this._scene.prePassRenderer;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"MotionBlurPostProcess\" string\n     */\n    MotionBlurPostProcess.prototype.getClassName = function () {\n        return \"MotionBlurPostProcess\";\n    };\n    /**\n     * Excludes the given skinned mesh from computing bones velocities.\n     * Computing bones velocities can have a cost and that cost. The cost can be saved by calling this function and by passing the skinned mesh reference to ignore.\n     * @param skinnedMesh The mesh containing the skeleton to ignore when computing the velocity map.\n     */\n    MotionBlurPostProcess.prototype.excludeSkinnedMesh = function (skinnedMesh) {\n        if (skinnedMesh.skeleton) {\n            var list = void 0;\n            if (this._geometryBufferRenderer) {\n                list = this._geometryBufferRenderer.excludedSkinnedMeshesFromVelocity;\n            }\n            else if (this._prePassRenderer) {\n                list = this._prePassRenderer.excludedSkinnedMesh;\n            }\n            else {\n                return;\n            }\n            list.push(skinnedMesh);\n        }\n    };\n    /**\n     * Removes the given skinned mesh from the excluded meshes to integrate bones velocities while rendering the velocity map.\n     * @param skinnedMesh The mesh containing the skeleton that has been ignored previously.\n     * @see excludeSkinnedMesh to exclude a skinned mesh from bones velocity computation.\n     */\n    MotionBlurPostProcess.prototype.removeExcludedSkinnedMesh = function (skinnedMesh) {\n        if (skinnedMesh.skeleton) {\n            var list = void 0;\n            if (this._geometryBufferRenderer) {\n                list = this._geometryBufferRenderer.excludedSkinnedMeshesFromVelocity;\n            }\n            else if (this._prePassRenderer) {\n                list = this._prePassRenderer.excludedSkinnedMesh;\n            }\n            else {\n                return;\n            }\n            var index = list.indexOf(skinnedMesh);\n            if (index !== -1) {\n                list.splice(index, 1);\n            }\n        }\n    };\n    /**\n     * Disposes the post process.\n     * @param camera The camera to dispose the post process on.\n     */\n    MotionBlurPostProcess.prototype.dispose = function (camera) {\n        if (this._geometryBufferRenderer) {\n            // Clear previous transformation matrices dictionary used to compute objects velocities\n            this._geometryBufferRenderer._previousTransformationMatrices = {};\n            this._geometryBufferRenderer._previousBonesTransformationMatrices = {};\n            this._geometryBufferRenderer.excludedSkinnedMeshesFromVelocity = [];\n        }\n        _super.prototype.dispose.call(this, camera);\n    };\n    /**\n     * Called on the mode changed (object based or screen based).\n     */\n    MotionBlurPostProcess.prototype._applyMode = function () {\n        var _this = this;\n        if (!this._geometryBufferRenderer && !this._prePassRenderer) {\n            // We can't get a velocity or depth texture. So, work as a passthrough.\n            Logger.Warn(\"Multiple Render Target support needed to compute object based motion blur\");\n            return this.updateEffect();\n        }\n        this._updateEffect();\n        this._invViewProjection = null;\n        this._previousViewProjection = null;\n        if (this.isObjectBased) {\n            if (this._prePassRenderer && this._prePassEffectConfiguration) {\n                this._prePassEffectConfiguration.texturesRequired[0] = 2;\n            }\n            this.onApply = function (effect) { return _this._onApplyObjectBased(effect); };\n        }\n        else {\n            this._invViewProjection = Matrix.Identity();\n            this._previousViewProjection = Matrix.Identity();\n            if (this._prePassRenderer && this._prePassEffectConfiguration) {\n                this._prePassEffectConfiguration.texturesRequired[0] = 5;\n            }\n            this.onApply = function (effect) { return _this._onApplyScreenBased(effect); };\n        }\n    };\n    /**\n     * Called on the effect is applied when the motion blur post-process is in object based mode.\n     * @param effect\n     */\n    MotionBlurPostProcess.prototype._onApplyObjectBased = function (effect) {\n        effect.setVector2(\"screenSize\", new Vector2(this.width, this.height));\n        effect.setFloat(\"motionScale\", this._scene.getAnimationRatio());\n        effect.setFloat(\"motionStrength\", this.motionStrength);\n        if (this._geometryBufferRenderer) {\n            var velocityIndex = this._geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE);\n            effect.setTexture(\"velocitySampler\", this._geometryBufferRenderer.getGBuffer().textures[velocityIndex]);\n        }\n        else if (this._prePassRenderer) {\n            var velocityIndex = this._prePassRenderer.getIndex(2);\n            effect.setTexture(\"velocitySampler\", this._prePassRenderer.getRenderTarget().textures[velocityIndex]);\n        }\n    };\n    /**\n     * Called on the effect is applied when the motion blur post-process is in screen based mode.\n     * @param effect\n     */\n    MotionBlurPostProcess.prototype._onApplyScreenBased = function (effect) {\n        var viewProjection = this._scene.getProjectionMatrix().multiply(this._scene.getViewMatrix());\n        viewProjection.invertToRef(this._invViewProjection);\n        effect.setMatrix(\"inverseViewProjection\", this._invViewProjection);\n        effect.setMatrix(\"prevViewProjection\", this._previousViewProjection);\n        this._previousViewProjection = viewProjection;\n        effect.setVector2(\"screenSize\", new Vector2(this.width, this.height));\n        effect.setFloat(\"motionScale\", this._scene.getAnimationRatio());\n        effect.setFloat(\"motionStrength\", this.motionStrength);\n        if (this._geometryBufferRenderer) {\n            var depthIndex = this._geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.DEPTH_TEXTURE_TYPE);\n            effect.setTexture(\"depthSampler\", this._geometryBufferRenderer.getGBuffer().textures[depthIndex]);\n        }\n        else if (this._prePassRenderer) {\n            var depthIndex = this._prePassRenderer.getIndex(5);\n            effect.setTexture(\"depthSampler\", this._prePassRenderer.getRenderTarget().textures[depthIndex]);\n        }\n    };\n    /**\n     * Called on the effect must be updated (changed mode, samples count, etc.).\n     */\n    MotionBlurPostProcess.prototype._updateEffect = function () {\n        if (this._geometryBufferRenderer || this._prePassRenderer) {\n            var defines = [\n                \"#define GEOMETRY_SUPPORTED\",\n                \"#define SAMPLES \" + this._motionBlurSamples.toFixed(1),\n                this._isObjectBased ? \"#define OBJECT_BASED\" : \"#define SCREEN_BASED\",\n            ];\n            this.updateEffect(defines.join(\"\\n\"));\n        }\n    };\n    /**\n     * @param parsedPostProcess\n     * @param targetCamera\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    MotionBlurPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(function () {\n            return new MotionBlurPostProcess(parsedPostProcess.name, scene, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType, false);\n        }, parsedPostProcess, scene, rootUrl);\n    };\n    __decorate([\n        serialize()\n    ], MotionBlurPostProcess.prototype, \"motionStrength\", void 0);\n    __decorate([\n        serialize()\n    ], MotionBlurPostProcess.prototype, \"motionBlurSamples\", null);\n    __decorate([\n        serialize()\n    ], MotionBlurPostProcess.prototype, \"isObjectBased\", null);\n    return MotionBlurPostProcess;\n}(PostProcess));\nexport { MotionBlurPostProcess };\nRegisterClass(\"BABYLON.MotionBlurPostProcess\", MotionBlurPostProcess);\n//# sourceMappingURL=motionBlurPostProcess.js.map","import { __decorate, __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/refraction.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\n/**\n * Post process which applies a refraction texture\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#refraction\n */\nvar RefractionPostProcess = /** @class */ (function (_super) {\n    __extends(RefractionPostProcess, _super);\n    /**\n     * Initializes the RefractionPostProcess\n     * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#refraction\n     * @param name The name of the effect.\n     * @param refractionTextureUrl Url of the refraction texture to use\n     * @param color the base color of the refraction (used to taint the rendering)\n     * @param depth simulated refraction depth\n     * @param colorLevel the coefficient of the base color (0 to remove base color tainting)\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     */\n    function RefractionPostProcess(name, refractionTextureUrl, color, depth, colorLevel, options, camera, samplingMode, engine, reusable) {\n        var _this = _super.call(this, name, \"refraction\", [\"baseColor\", \"depth\", \"colorLevel\"], [\"refractionSampler\"], options, camera, samplingMode, engine, reusable) || this;\n        _this._ownRefractionTexture = true;\n        _this.color = color;\n        _this.depth = depth;\n        _this.colorLevel = colorLevel;\n        _this.refractionTextureUrl = refractionTextureUrl;\n        _this.onActivateObservable.add(function (cam) {\n            _this._refTexture = _this._refTexture || new Texture(refractionTextureUrl, cam.getScene());\n        });\n        _this.onApplyObservable.add(function (effect) {\n            effect.setColor3(\"baseColor\", _this.color);\n            effect.setFloat(\"depth\", _this.depth);\n            effect.setFloat(\"colorLevel\", _this.colorLevel);\n            effect.setTexture(\"refractionSampler\", _this._refTexture);\n        });\n        return _this;\n    }\n    Object.defineProperty(RefractionPostProcess.prototype, \"refractionTexture\", {\n        /**\n         * Gets or sets the refraction texture\n         * Please note that you are responsible for disposing the texture if you set it manually\n         */\n        get: function () {\n            return this._refTexture;\n        },\n        set: function (value) {\n            if (this._refTexture && this._ownRefractionTexture) {\n                this._refTexture.dispose();\n            }\n            this._refTexture = value;\n            this._ownRefractionTexture = false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"RefractionPostProcess\" string\n     */\n    RefractionPostProcess.prototype.getClassName = function () {\n        return \"RefractionPostProcess\";\n    };\n    // Methods\n    /**\n     * Disposes of the post process\n     * @param camera Camera to dispose post process on\n     */\n    RefractionPostProcess.prototype.dispose = function (camera) {\n        if (this._refTexture && this._ownRefractionTexture) {\n            this._refTexture.dispose();\n            this._refTexture = null;\n        }\n        _super.prototype.dispose.call(this, camera);\n    };\n    /**\n     * @param parsedPostProcess\n     * @param targetCamera\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    RefractionPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(function () {\n            return new RefractionPostProcess(parsedPostProcess.name, parsedPostProcess.refractionTextureUrl, parsedPostProcess.color, parsedPostProcess.depth, parsedPostProcess.colorLevel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    };\n    __decorate([\n        serialize()\n    ], RefractionPostProcess.prototype, \"color\", void 0);\n    __decorate([\n        serialize()\n    ], RefractionPostProcess.prototype, \"depth\", void 0);\n    __decorate([\n        serialize()\n    ], RefractionPostProcess.prototype, \"colorLevel\", void 0);\n    __decorate([\n        serialize()\n    ], RefractionPostProcess.prototype, \"refractionTextureUrl\", void 0);\n    return RefractionPostProcess;\n}(PostProcess));\nexport { RefractionPostProcess };\nRegisterClass(\"BABYLON.RefractionPostProcess\", RefractionPostProcess);\n//# sourceMappingURL=refractionPostProcess.js.map","import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/sharpen.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The SharpenPostProcess applies a sharpen kernel to every pixel\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\nvar SharpenPostProcess = /** @class */ (function (_super) {\n    __extends(SharpenPostProcess, _super);\n    /**\n     * Creates a new instance ConvolutionPostProcess\n     * @param name The name of the effect.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    function SharpenPostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n        if (textureType === void 0) { textureType = 0; }\n        if (blockCompilation === void 0) { blockCompilation = false; }\n        var _this = _super.call(this, name, \"sharpen\", [\"sharpnessAmounts\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation) || this;\n        /**\n         * How much of the original color should be applied. Setting this to 0 will display edge detection. (default: 1)\n         */\n        _this.colorAmount = 1.0;\n        /**\n         * How much sharpness should be applied (default: 0.3)\n         */\n        _this.edgeAmount = 0.3;\n        _this.onApply = function (effect) {\n            effect.setFloat2(\"screenSize\", _this.width, _this.height);\n            effect.setFloat2(\"sharpnessAmounts\", _this.edgeAmount, _this.colorAmount);\n        };\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"SharpenPostProcess\" string\n     */\n    SharpenPostProcess.prototype.getClassName = function () {\n        return \"SharpenPostProcess\";\n    };\n    /**\n     * @param parsedPostProcess\n     * @param targetCamera\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    SharpenPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(function () {\n            return new SharpenPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.textureType, parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    };\n    __decorate([\n        serialize()\n    ], SharpenPostProcess.prototype, \"colorAmount\", void 0);\n    __decorate([\n        serialize()\n    ], SharpenPostProcess.prototype, \"edgeAmount\", void 0);\n    return SharpenPostProcess;\n}(PostProcess));\nexport { SharpenPostProcess };\nRegisterClass(\"BABYLON.SharpenPostProcess\", SharpenPostProcess);\n//# sourceMappingURL=sharpenPostProcess.js.map","import { __decorate } from \"tslib\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { serialize } from \"../../Misc/decorators.js\";\n/**\n * PostProcessRenderPipeline\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocessrenderpipeline\n */\nvar PostProcessRenderPipeline = /** @class */ (function () {\n    /**\n     * Initializes a PostProcessRenderPipeline\n     * @param _engine engine to add the pipeline to\n     * @param name name of the pipeline\n     */\n    function PostProcessRenderPipeline(_engine, name) {\n        this._engine = _engine;\n        this._name = name;\n        this._renderEffects = {};\n        this._renderEffectsForIsolatedPass = new Array();\n        this._cameras = [];\n    }\n    Object.defineProperty(PostProcessRenderPipeline.prototype, \"name\", {\n        /**\n         * Gets pipeline name\n         */\n        get: function () {\n            return this._name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PostProcessRenderPipeline.prototype, \"cameras\", {\n        /** Gets the list of attached cameras */\n        get: function () {\n            return this._cameras;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the class name\n     * @returns \"PostProcessRenderPipeline\"\n     */\n    PostProcessRenderPipeline.prototype.getClassName = function () {\n        return \"PostProcessRenderPipeline\";\n    };\n    Object.defineProperty(PostProcessRenderPipeline.prototype, \"isSupported\", {\n        /**\n         * If all the render effects in the pipeline are supported\n         */\n        get: function () {\n            for (var renderEffectName in this._renderEffects) {\n                if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\n                    if (!this._renderEffects[renderEffectName].isSupported) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Adds an effect to the pipeline\n     * @param renderEffect the effect to add\n     */\n    PostProcessRenderPipeline.prototype.addEffect = function (renderEffect) {\n        this._renderEffects[renderEffect._name] = renderEffect;\n    };\n    // private\n    /** @hidden */\n    PostProcessRenderPipeline.prototype._rebuild = function () { };\n    /**\n     * @param renderEffectName\n     * @param cameras\n     * @hidden\n     */\n    PostProcessRenderPipeline.prototype._enableEffect = function (renderEffectName, cameras) {\n        var renderEffects = this._renderEffects[renderEffectName];\n        if (!renderEffects) {\n            return;\n        }\n        renderEffects._enable(Tools.MakeArray(cameras || this._cameras));\n    };\n    /**\n     * @param renderEffectName\n     * @param cameras\n     * @hidden\n     */\n    PostProcessRenderPipeline.prototype._disableEffect = function (renderEffectName, cameras) {\n        var renderEffects = this._renderEffects[renderEffectName];\n        if (!renderEffects) {\n            return;\n        }\n        renderEffects._disable(Tools.MakeArray(cameras || this._cameras));\n    };\n    /**\n     * @param cameras\n     * @param unique\n     * @hidden\n     */\n    PostProcessRenderPipeline.prototype._attachCameras = function (cameras, unique) {\n        var cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        var indicesToDelete = [];\n        var i;\n        for (i = 0; i < cams.length; i++) {\n            var camera = cams[i];\n            if (!camera) {\n                continue;\n            }\n            var cameraName = camera.name;\n            if (this._cameras.indexOf(camera) === -1) {\n                this._cameras[cameraName] = camera;\n            }\n            else if (unique) {\n                indicesToDelete.push(i);\n            }\n        }\n        for (i = 0; i < indicesToDelete.length; i++) {\n            cams.splice(indicesToDelete[i], 1);\n        }\n        for (var renderEffectName in this._renderEffects) {\n            if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\n                this._renderEffects[renderEffectName]._attachCameras(cams);\n            }\n        }\n    };\n    /**\n     * @param cameras\n     * @hidden\n     */\n    PostProcessRenderPipeline.prototype._detachCameras = function (cameras) {\n        var cams = Tools.MakeArray(cameras || this._cameras);\n        if (!cams) {\n            return;\n        }\n        for (var renderEffectName in this._renderEffects) {\n            if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\n                this._renderEffects[renderEffectName]._detachCameras(cams);\n            }\n        }\n        for (var i = 0; i < cams.length; i++) {\n            this._cameras.splice(this._cameras.indexOf(cams[i]), 1);\n        }\n    };\n    /** @hidden */\n    PostProcessRenderPipeline.prototype._update = function () {\n        for (var renderEffectName in this._renderEffects) {\n            if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\n                this._renderEffects[renderEffectName]._update();\n            }\n        }\n        for (var i = 0; i < this._cameras.length; i++) {\n            if (!this._cameras[i]) {\n                continue;\n            }\n            var cameraName = this._cameras[i].name;\n            if (this._renderEffectsForIsolatedPass[cameraName]) {\n                this._renderEffectsForIsolatedPass[cameraName]._update();\n            }\n        }\n    };\n    /** @hidden */\n    PostProcessRenderPipeline.prototype._reset = function () {\n        this._renderEffects = {};\n        this._renderEffectsForIsolatedPass = new Array();\n    };\n    PostProcessRenderPipeline.prototype._enableMSAAOnFirstPostProcess = function (sampleCount) {\n        if (!this._engine._features.supportMSAA) {\n            return false;\n        }\n        // Set samples of the very first post process to 4 to enable native anti-aliasing in browsers that support webGL 2.0 (See: https://github.com/BabylonJS/Babylon.js/issues/3754)\n        var effectKeys = Object.keys(this._renderEffects);\n        if (effectKeys.length > 0) {\n            var postProcesses = this._renderEffects[effectKeys[0]].getPostProcesses();\n            if (postProcesses) {\n                postProcesses[0].samples = sampleCount;\n            }\n        }\n        return true;\n    };\n    /**\n     * Sets the required values to the prepass renderer.\n     * @param prePassRenderer defines the prepass renderer to setup.\n     * @returns true if the pre pass is needed.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    PostProcessRenderPipeline.prototype.setPrePassRenderer = function (prePassRenderer) {\n        // Do Nothing by default\n        return false;\n    };\n    /**\n     * Disposes of the pipeline\n     */\n    PostProcessRenderPipeline.prototype.dispose = function () {\n        // Must be implemented by children\n    };\n    __decorate([\n        serialize()\n    ], PostProcessRenderPipeline.prototype, \"_name\", void 0);\n    return PostProcessRenderPipeline;\n}());\nexport { PostProcessRenderPipeline };\n//# sourceMappingURL=postProcessRenderPipeline.js.map","/**\n * PostProcessRenderPipelineManager class\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocessrenderpipeline\n */\nvar PostProcessRenderPipelineManager = /** @class */ (function () {\n    /**\n     * Initializes a PostProcessRenderPipelineManager\n     * @see https://doc.babylonjs.com/how_to/how_to_use_postprocessrenderpipeline\n     */\n    function PostProcessRenderPipelineManager() {\n        this._renderPipelines = {};\n    }\n    Object.defineProperty(PostProcessRenderPipelineManager.prototype, \"supportedPipelines\", {\n        /**\n         * Gets the list of supported render pipelines\n         */\n        get: function () {\n            var result = [];\n            for (var renderPipelineName in this._renderPipelines) {\n                if (Object.prototype.hasOwnProperty.call(this._renderPipelines, renderPipelineName)) {\n                    var pipeline = this._renderPipelines[renderPipelineName];\n                    if (pipeline.isSupported) {\n                        result.push(pipeline);\n                    }\n                }\n            }\n            return result;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Adds a pipeline to the manager\n     * @param renderPipeline The pipeline to add\n     */\n    PostProcessRenderPipelineManager.prototype.addPipeline = function (renderPipeline) {\n        this._renderPipelines[renderPipeline._name] = renderPipeline;\n    };\n    /**\n     * Attaches a camera to the pipeline\n     * @param renderPipelineName The name of the pipeline to attach to\n     * @param cameras the camera to attach\n     * @param unique if the camera can be attached multiple times to the pipeline\n     */\n    PostProcessRenderPipelineManager.prototype.attachCamerasToRenderPipeline = function (renderPipelineName, cameras, unique) {\n        if (unique === void 0) { unique = false; }\n        var renderPipeline = this._renderPipelines[renderPipelineName];\n        if (!renderPipeline) {\n            return;\n        }\n        renderPipeline._attachCameras(cameras, unique);\n    };\n    /**\n     * Detaches a camera from the pipeline\n     * @param renderPipelineName The name of the pipeline to detach from\n     * @param cameras the camera to detach\n     */\n    PostProcessRenderPipelineManager.prototype.detachCamerasFromRenderPipeline = function (renderPipelineName, cameras) {\n        var renderPipeline = this._renderPipelines[renderPipelineName];\n        if (!renderPipeline) {\n            return;\n        }\n        renderPipeline._detachCameras(cameras);\n    };\n    /**\n     * Enables an effect by name on a pipeline\n     * @param renderPipelineName the name of the pipeline to enable the effect in\n     * @param renderEffectName the name of the effect to enable\n     * @param cameras the cameras that the effect should be enabled on\n     */\n    PostProcessRenderPipelineManager.prototype.enableEffectInPipeline = function (renderPipelineName, renderEffectName, cameras) {\n        var renderPipeline = this._renderPipelines[renderPipelineName];\n        if (!renderPipeline) {\n            return;\n        }\n        renderPipeline._enableEffect(renderEffectName, cameras);\n    };\n    /**\n     * Disables an effect by name on a pipeline\n     * @param renderPipelineName the name of the pipeline to disable the effect in\n     * @param renderEffectName the name of the effect to disable\n     * @param cameras the cameras that the effect should be disabled on\n     */\n    PostProcessRenderPipelineManager.prototype.disableEffectInPipeline = function (renderPipelineName, renderEffectName, cameras) {\n        var renderPipeline = this._renderPipelines[renderPipelineName];\n        if (!renderPipeline) {\n            return;\n        }\n        renderPipeline._disableEffect(renderEffectName, cameras);\n    };\n    /**\n     * Updates the state of all contained render pipelines and disposes of any non supported pipelines\n     */\n    PostProcessRenderPipelineManager.prototype.update = function () {\n        for (var renderPipelineName in this._renderPipelines) {\n            if (Object.prototype.hasOwnProperty.call(this._renderPipelines, renderPipelineName)) {\n                var pipeline = this._renderPipelines[renderPipelineName];\n                if (!pipeline.isSupported) {\n                    pipeline.dispose();\n                    delete this._renderPipelines[renderPipelineName];\n                }\n                else {\n                    pipeline._update();\n                }\n            }\n        }\n    };\n    /** @hidden */\n    PostProcessRenderPipelineManager.prototype._rebuild = function () {\n        for (var renderPipelineName in this._renderPipelines) {\n            if (Object.prototype.hasOwnProperty.call(this._renderPipelines, renderPipelineName)) {\n                var pipeline = this._renderPipelines[renderPipelineName];\n                pipeline._rebuild();\n            }\n        }\n    };\n    /**\n     * Disposes of the manager and pipelines\n     */\n    PostProcessRenderPipelineManager.prototype.dispose = function () {\n        for (var renderPipelineName in this._renderPipelines) {\n            if (Object.prototype.hasOwnProperty.call(this._renderPipelines, renderPipelineName)) {\n                var pipeline = this._renderPipelines[renderPipelineName];\n                pipeline.dispose();\n            }\n        }\n    };\n    return PostProcessRenderPipelineManager;\n}());\nexport { PostProcessRenderPipelineManager };\n//# sourceMappingURL=postProcessRenderPipelineManager.js.map","import { SceneComponentConstants } from \"../../sceneComponent.js\";\nimport { PostProcessRenderPipelineManager } from \"./postProcessRenderPipelineManager.js\";\nimport { Scene } from \"../../scene.js\";\nObject.defineProperty(Scene.prototype, \"postProcessRenderPipelineManager\", {\n    get: function () {\n        if (!this._postProcessRenderPipelineManager) {\n            // Register the G Buffer component to the scene.\n            var component = this._getComponent(SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER);\n            if (!component) {\n                component = new PostProcessRenderPipelineManagerSceneComponent(this);\n                this._addComponent(component);\n            }\n            this._postProcessRenderPipelineManager = new PostProcessRenderPipelineManager();\n        }\n        return this._postProcessRenderPipelineManager;\n    },\n    enumerable: true,\n    configurable: true,\n});\n/**\n * Defines the Render Pipeline scene component responsible to rendering pipelines\n */\nvar PostProcessRenderPipelineManagerSceneComponent = /** @class */ (function () {\n    /**\n     * Creates a new instance of the component for the given scene\n     * @param scene Defines the scene to register the component in\n     */\n    function PostProcessRenderPipelineManagerSceneComponent(scene) {\n        /**\n         * The component name helpful to identify the component in the list of scene components.\n         */\n        this.name = SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER;\n        this.scene = scene;\n    }\n    /**\n     * Registers the component in a given scene\n     */\n    PostProcessRenderPipelineManagerSceneComponent.prototype.register = function () {\n        this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER, this, this._gatherRenderTargets);\n    };\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    PostProcessRenderPipelineManagerSceneComponent.prototype.rebuild = function () {\n        if (this.scene._postProcessRenderPipelineManager) {\n            this.scene._postProcessRenderPipelineManager._rebuild();\n        }\n    };\n    /**\n     * Disposes the component and the associated resources\n     */\n    PostProcessRenderPipelineManagerSceneComponent.prototype.dispose = function () {\n        if (this.scene._postProcessRenderPipelineManager) {\n            this.scene._postProcessRenderPipelineManager.dispose();\n        }\n    };\n    PostProcessRenderPipelineManagerSceneComponent.prototype._gatherRenderTargets = function () {\n        if (this.scene._postProcessRenderPipelineManager) {\n            this.scene._postProcessRenderPipelineManager.update();\n        }\n    };\n    return PostProcessRenderPipelineManagerSceneComponent;\n}());\nexport { PostProcessRenderPipelineManagerSceneComponent };\n//# sourceMappingURL=postProcessRenderPipelineManagerSceneComponent.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize, SerializationHelper } from \"../../../Misc/decorators.js\";\nimport { Observable } from \"../../../Misc/observable.js\";\nimport { Logger } from \"../../../Misc/logger.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\n\nimport { GlowLayer } from \"../../../Layers/glowLayer.js\";\nimport { SharpenPostProcess } from \"../../../PostProcesses/sharpenPostProcess.js\";\nimport { ImageProcessingPostProcess } from \"../../../PostProcesses/imageProcessingPostProcess.js\";\nimport { ChromaticAberrationPostProcess } from \"../../../PostProcesses/chromaticAberrationPostProcess.js\";\nimport { GrainPostProcess } from \"../../../PostProcesses/grainPostProcess.js\";\nimport { FxaaPostProcess } from \"../../../PostProcesses/fxaaPostProcess.js\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { DepthOfFieldEffect, DepthOfFieldEffectBlurLevel } from \"../../../PostProcesses/depthOfFieldEffect.js\";\nimport { BloomEffect } from \"../../../PostProcesses/bloomEffect.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { EngineStore } from \"../../../Engines/engineStore.js\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js\";\n/**\n * The default rendering pipeline can be added to a scene to apply common post processing effects such as anti-aliasing or depth of field.\n * See https://doc.babylonjs.com/how_to/using_default_rendering_pipeline\n */\nvar DefaultRenderingPipeline = /** @class */ (function (_super) {\n    __extends(DefaultRenderingPipeline, _super);\n    /**\n     * @constructor\n     * @param name - The rendering pipeline name (default: \"\")\n     * @param hdr - If high dynamic range textures should be used (default: true)\n     * @param scene - The scene linked to this pipeline (default: the last created scene)\n     * @param cameras - The array of cameras that the rendering pipeline will be attached to (default: scene.cameras)\n     * @param automaticBuild - if false, you will have to manually call prepare() to update the pipeline (default: true)\n     */\n    function DefaultRenderingPipeline(name, hdr, scene, cameras, automaticBuild) {\n        if (name === void 0) { name = \"\"; }\n        if (hdr === void 0) { hdr = true; }\n        if (scene === void 0) { scene = EngineStore.LastCreatedScene; }\n        if (automaticBuild === void 0) { automaticBuild = true; }\n        var _this = _super.call(this, scene.getEngine(), name) || this;\n        _this._camerasToBeAttached = [];\n        /**\n         * ID of the sharpen post process,\n         */\n        _this.SharpenPostProcessId = \"SharpenPostProcessEffect\";\n        /**\n         * @ignore\n         * ID of the image processing post process;\n         */\n        _this.ImageProcessingPostProcessId = \"ImageProcessingPostProcessEffect\";\n        /**\n         * @ignore\n         * ID of the Fast Approximate Anti-Aliasing post process;\n         */\n        _this.FxaaPostProcessId = \"FxaaPostProcessEffect\";\n        /**\n         * ID of the chromatic aberration post process,\n         */\n        _this.ChromaticAberrationPostProcessId = \"ChromaticAberrationPostProcessEffect\";\n        /**\n         * ID of the grain post process\n         */\n        _this.GrainPostProcessId = \"GrainPostProcessEffect\";\n        /**\n         * Glow post process which adds a glow to emissive areas of the image\n         */\n        _this._glowLayer = null;\n        /**\n         * Animations which can be used to tweak settings over a period of time\n         */\n        _this.animations = [];\n        _this._imageProcessingConfigurationObserver = null;\n        // Values\n        _this._sharpenEnabled = false;\n        _this._bloomEnabled = false;\n        _this._depthOfFieldEnabled = false;\n        _this._depthOfFieldBlurLevel = DepthOfFieldEffectBlurLevel.Low;\n        _this._fxaaEnabled = false;\n        _this._imageProcessingEnabled = true;\n        _this._bloomScale = 0.5;\n        _this._chromaticAberrationEnabled = false;\n        _this._grainEnabled = false;\n        _this._buildAllowed = true;\n        /**\n         * This is triggered each time the pipeline has been built.\n         */\n        _this.onBuildObservable = new Observable();\n        _this._resizeObserver = null;\n        _this._hardwareScaleLevel = 1.0;\n        _this._bloomKernel = 64;\n        /**\n         * Specifies the weight of the bloom in the final rendering\n         */\n        _this._bloomWeight = 0.15;\n        /**\n         * Specifies the luma threshold for the area that will be blurred by the bloom\n         */\n        _this._bloomThreshold = 0.9;\n        _this._samples = 1;\n        _this._hasCleared = false;\n        _this._prevPostProcess = null;\n        _this._prevPrevPostProcess = null;\n        _this._depthOfFieldSceneObserver = null;\n        _this._cameras = cameras || scene.cameras;\n        _this._cameras = _this._cameras.slice();\n        _this._camerasToBeAttached = _this._cameras.slice();\n        _this._buildAllowed = automaticBuild;\n        // Initialize\n        _this._scene = scene;\n        var caps = _this._scene.getEngine().getCaps();\n        _this._hdr = hdr && (caps.textureHalfFloatRender || caps.textureFloatRender);\n        // Misc\n        if (_this._hdr) {\n            if (caps.textureHalfFloatRender) {\n                _this._defaultPipelineTextureType = 2;\n            }\n            else if (caps.textureFloatRender) {\n                _this._defaultPipelineTextureType = 1;\n            }\n        }\n        else {\n            _this._defaultPipelineTextureType = 0;\n        }\n        // Attach\n        scene.postProcessRenderPipelineManager.addPipeline(_this);\n        var engine = _this._scene.getEngine();\n        // Create post processes before hand so they can be modified before enabled.\n        // Block compilation flag is set to true to avoid compilation prior to use, these will be updated on first use in build pipeline.\n        _this.sharpen = new SharpenPostProcess(\"sharpen\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, _this._defaultPipelineTextureType, true);\n        _this._sharpenEffect = new PostProcessRenderEffect(engine, _this.SharpenPostProcessId, function () {\n            return _this.sharpen;\n        }, true);\n        _this.depthOfField = new DepthOfFieldEffect(_this._scene, null, _this._depthOfFieldBlurLevel, _this._defaultPipelineTextureType, true);\n        _this.bloom = new BloomEffect(_this._scene, _this._bloomScale, _this._bloomWeight, _this.bloomKernel, _this._defaultPipelineTextureType, true);\n        _this.chromaticAberration = new ChromaticAberrationPostProcess(\"ChromaticAberration\", engine.getRenderWidth(), engine.getRenderHeight(), 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, _this._defaultPipelineTextureType, true);\n        _this._chromaticAberrationEffect = new PostProcessRenderEffect(engine, _this.ChromaticAberrationPostProcessId, function () {\n            return _this.chromaticAberration;\n        }, true);\n        _this.grain = new GrainPostProcess(\"Grain\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, _this._defaultPipelineTextureType, true);\n        _this._grainEffect = new PostProcessRenderEffect(engine, _this.GrainPostProcessId, function () {\n            return _this.grain;\n        }, true);\n        _this._resizeObserver = engine.onResizeObservable.add(function () {\n            _this._hardwareScaleLevel = engine.getHardwareScalingLevel();\n            _this.bloomKernel = _this._bloomKernel;\n        });\n        _this._imageProcessingConfigurationObserver = _this._scene.imageProcessingConfiguration.onUpdateParameters.add(function () {\n            _this.bloom._downscale._exposure = _this._scene.imageProcessingConfiguration.exposure;\n            if (_this.imageProcessingEnabled !== _this._scene.imageProcessingConfiguration.isEnabled) {\n                _this._imageProcessingEnabled = _this._scene.imageProcessingConfiguration.isEnabled;\n                _this._buildPipeline();\n            }\n        });\n        _this._buildPipeline();\n        return _this;\n    }\n    Object.defineProperty(DefaultRenderingPipeline.prototype, \"scene\", {\n        /**\n         * Gets active scene\n         */\n        get: function () {\n            return this._scene;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultRenderingPipeline.prototype, \"sharpenEnabled\", {\n        get: function () {\n            return this._sharpenEnabled;\n        },\n        /**\n         * Enable or disable the sharpen process from the pipeline\n         */\n        set: function (enabled) {\n            if (this._sharpenEnabled === enabled) {\n                return;\n            }\n            this._sharpenEnabled = enabled;\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultRenderingPipeline.prototype, \"bloomKernel\", {\n        /**\n         * Specifies the size of the bloom blur kernel, relative to the final output size\n         */\n        get: function () {\n            return this._bloomKernel;\n        },\n        set: function (value) {\n            this._bloomKernel = value;\n            this.bloom.kernel = value / this._hardwareScaleLevel;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultRenderingPipeline.prototype, \"bloomWeight\", {\n        get: function () {\n            return this._bloomWeight;\n        },\n        /**\n         * The strength of the bloom.\n         */\n        set: function (value) {\n            if (this._bloomWeight === value) {\n                return;\n            }\n            this.bloom.weight = value;\n            this._bloomWeight = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultRenderingPipeline.prototype, \"bloomThreshold\", {\n        get: function () {\n            return this._bloomThreshold;\n        },\n        /**\n         * The luminance threshold to find bright areas of the image to bloom.\n         */\n        set: function (value) {\n            if (this._bloomThreshold === value) {\n                return;\n            }\n            this.bloom.threshold = value;\n            this._bloomThreshold = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultRenderingPipeline.prototype, \"bloomScale\", {\n        get: function () {\n            return this._bloomScale;\n        },\n        /**\n         * The scale of the bloom, lower value will provide better performance.\n         */\n        set: function (value) {\n            if (this._bloomScale === value) {\n                return;\n            }\n            this._bloomScale = value;\n            // recreate bloom and dispose old as this setting is not dynamic\n            this._rebuildBloom();\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultRenderingPipeline.prototype, \"bloomEnabled\", {\n        get: function () {\n            return this._bloomEnabled;\n        },\n        /**\n         * Enable or disable the bloom from the pipeline\n         */\n        set: function (enabled) {\n            if (this._bloomEnabled === enabled) {\n                return;\n            }\n            this._bloomEnabled = enabled;\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    DefaultRenderingPipeline.prototype._rebuildBloom = function () {\n        // recreate bloom and dispose old as this setting is not dynamic\n        var oldBloom = this.bloom;\n        this.bloom = new BloomEffect(this._scene, this.bloomScale, this._bloomWeight, this.bloomKernel, this._defaultPipelineTextureType, false);\n        this.bloom.threshold = oldBloom.threshold;\n        for (var i = 0; i < this._cameras.length; i++) {\n            oldBloom.disposeEffects(this._cameras[i]);\n        }\n    };\n    Object.defineProperty(DefaultRenderingPipeline.prototype, \"depthOfFieldEnabled\", {\n        /**\n         * If the depth of field is enabled.\n         */\n        get: function () {\n            return this._depthOfFieldEnabled;\n        },\n        set: function (enabled) {\n            if (this._depthOfFieldEnabled === enabled) {\n                return;\n            }\n            this._depthOfFieldEnabled = enabled;\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultRenderingPipeline.prototype, \"depthOfFieldBlurLevel\", {\n        /**\n         * Blur level of the depth of field effect. (Higher blur will effect performance)\n         */\n        get: function () {\n            return this._depthOfFieldBlurLevel;\n        },\n        set: function (value) {\n            if (this._depthOfFieldBlurLevel === value) {\n                return;\n            }\n            this._depthOfFieldBlurLevel = value;\n            // recreate dof and dispose old as this setting is not dynamic\n            var oldDof = this.depthOfField;\n            this.depthOfField = new DepthOfFieldEffect(this._scene, null, this._depthOfFieldBlurLevel, this._defaultPipelineTextureType, false);\n            this.depthOfField.focalLength = oldDof.focalLength;\n            this.depthOfField.focusDistance = oldDof.focusDistance;\n            this.depthOfField.fStop = oldDof.fStop;\n            this.depthOfField.lensSize = oldDof.lensSize;\n            for (var i = 0; i < this._cameras.length; i++) {\n                oldDof.disposeEffects(this._cameras[i]);\n            }\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultRenderingPipeline.prototype, \"fxaaEnabled\", {\n        get: function () {\n            return this._fxaaEnabled;\n        },\n        /**\n         * If the anti aliasing is enabled.\n         */\n        set: function (enabled) {\n            if (this._fxaaEnabled === enabled) {\n                return;\n            }\n            this._fxaaEnabled = enabled;\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultRenderingPipeline.prototype, \"samples\", {\n        get: function () {\n            return this._samples;\n        },\n        /**\n         * MSAA sample count, setting this to 4 will provide 4x anti aliasing. (default: 1)\n         */\n        set: function (sampleCount) {\n            if (this._samples === sampleCount) {\n                return;\n            }\n            this._samples = sampleCount;\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultRenderingPipeline.prototype, \"imageProcessingEnabled\", {\n        get: function () {\n            return this._imageProcessingEnabled;\n        },\n        /**\n         * If image processing is enabled.\n         */\n        set: function (enabled) {\n            if (this._imageProcessingEnabled === enabled) {\n                return;\n            }\n            this._scene.imageProcessingConfiguration.isEnabled = enabled;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultRenderingPipeline.prototype, \"glowLayerEnabled\", {\n        get: function () {\n            return this._glowLayer != null;\n        },\n        /**\n         * If glow layer is enabled. (Adds a glow effect to emmissive materials)\n         */\n        set: function (enabled) {\n            if (enabled && !this._glowLayer) {\n                this._glowLayer = new GlowLayer(\"\", this._scene);\n            }\n            else if (!enabled && this._glowLayer) {\n                this._glowLayer.dispose();\n                this._glowLayer = null;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultRenderingPipeline.prototype, \"glowLayer\", {\n        /**\n         * Gets the glow layer (or null if not defined)\n         */\n        get: function () {\n            return this._glowLayer;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultRenderingPipeline.prototype, \"chromaticAberrationEnabled\", {\n        get: function () {\n            return this._chromaticAberrationEnabled;\n        },\n        /**\n         * Enable or disable the chromaticAberration process from the pipeline\n         */\n        set: function (enabled) {\n            if (this._chromaticAberrationEnabled === enabled) {\n                return;\n            }\n            this._chromaticAberrationEnabled = enabled;\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultRenderingPipeline.prototype, \"grainEnabled\", {\n        get: function () {\n            return this._grainEnabled;\n        },\n        /**\n         * Enable or disable the grain process from the pipeline\n         */\n        set: function (enabled) {\n            if (this._grainEnabled === enabled) {\n                return;\n            }\n            this._grainEnabled = enabled;\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get the class name\n     * @returns \"DefaultRenderingPipeline\"\n     */\n    DefaultRenderingPipeline.prototype.getClassName = function () {\n        return \"DefaultRenderingPipeline\";\n    };\n    /**\n     * Force the compilation of the entire pipeline.\n     */\n    DefaultRenderingPipeline.prototype.prepare = function () {\n        var previousState = this._buildAllowed;\n        this._buildAllowed = true;\n        this._buildPipeline();\n        this._buildAllowed = previousState;\n    };\n    DefaultRenderingPipeline.prototype._setAutoClearAndTextureSharing = function (postProcess, skipTextureSharing) {\n        if (skipTextureSharing === void 0) { skipTextureSharing = false; }\n        if (this._hasCleared) {\n            postProcess.autoClear = false;\n        }\n        else {\n            postProcess.autoClear = true;\n            this._scene.autoClear = false;\n            this._hasCleared = true;\n        }\n        if (!skipTextureSharing) {\n            if (this._prevPrevPostProcess) {\n                postProcess.shareOutputWith(this._prevPrevPostProcess);\n            }\n            else {\n                postProcess.useOwnOutput();\n            }\n            if (this._prevPostProcess) {\n                this._prevPrevPostProcess = this._prevPostProcess;\n            }\n            this._prevPostProcess = postProcess;\n        }\n    };\n    DefaultRenderingPipeline.prototype._buildPipeline = function () {\n        var _this = this;\n        if (!this._buildAllowed) {\n            return;\n        }\n        this._scene.autoClear = true;\n        var engine = this._scene.getEngine();\n        this._disposePostProcesses();\n        if (this._cameras !== null) {\n            this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\n            // get back cameras to be used to reattach pipeline\n            this._cameras = this._camerasToBeAttached.slice();\n        }\n        this._reset();\n        this._prevPostProcess = null;\n        this._prevPrevPostProcess = null;\n        this._hasCleared = false;\n        if (this.depthOfFieldEnabled) {\n            // Multi camera suport\n            if (this._cameras.length > 1) {\n                for (var _i = 0, _a = this._cameras; _i < _a.length; _i++) {\n                    var camera = _a[_i];\n                    var depthRenderer = this._scene.enableDepthRenderer(camera);\n                    depthRenderer.useOnlyInActiveCamera = true;\n                }\n                this._depthOfFieldSceneObserver = this._scene.onAfterRenderTargetsRenderObservable.add(function (scene) {\n                    if (_this._cameras.indexOf(scene.activeCamera) > -1) {\n                        _this.depthOfField.depthTexture = scene.enableDepthRenderer(scene.activeCamera).getDepthMap();\n                    }\n                });\n            }\n            else {\n                this._scene.onAfterRenderTargetsRenderObservable.remove(this._depthOfFieldSceneObserver);\n                var depthRenderer = this._scene.enableDepthRenderer(this._cameras[0]);\n                this.depthOfField.depthTexture = depthRenderer.getDepthMap();\n            }\n            if (!this.depthOfField._isReady()) {\n                this.depthOfField._updateEffects();\n            }\n            this.addEffect(this.depthOfField);\n            this._setAutoClearAndTextureSharing(this.depthOfField._effects[0], true);\n        }\n        else {\n            this._scene.onAfterRenderTargetsRenderObservable.remove(this._depthOfFieldSceneObserver);\n        }\n        if (this.bloomEnabled) {\n            if (!this.bloom._isReady()) {\n                this.bloom._updateEffects();\n            }\n            this.addEffect(this.bloom);\n            this._setAutoClearAndTextureSharing(this.bloom._effects[0], true);\n        }\n        if (this._imageProcessingEnabled) {\n            this.imageProcessing = new ImageProcessingPostProcess(\"imageProcessing\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._defaultPipelineTextureType, this.scene.imageProcessingConfiguration);\n            if (this._hdr) {\n                this.addEffect(new PostProcessRenderEffect(engine, this.ImageProcessingPostProcessId, function () {\n                    return _this.imageProcessing;\n                }, true));\n                this._setAutoClearAndTextureSharing(this.imageProcessing);\n            }\n            else {\n                this._scene.imageProcessingConfiguration.applyByPostProcess = false;\n            }\n            if (!this.cameras || this.cameras.length === 0) {\n                this._scene.imageProcessingConfiguration.applyByPostProcess = false;\n            }\n            if (!this.imageProcessing.getEffect()) {\n                this.imageProcessing._updateParameters();\n            }\n        }\n        if (this.sharpenEnabled) {\n            if (!this.sharpen.isReady()) {\n                this.sharpen.updateEffect();\n            }\n            this.addEffect(this._sharpenEffect);\n            this._setAutoClearAndTextureSharing(this.sharpen);\n        }\n        if (this.grainEnabled) {\n            if (!this.grain.isReady()) {\n                this.grain.updateEffect();\n            }\n            this.addEffect(this._grainEffect);\n            this._setAutoClearAndTextureSharing(this.grain);\n        }\n        if (this.chromaticAberrationEnabled) {\n            if (!this.chromaticAberration.isReady()) {\n                this.chromaticAberration.updateEffect();\n            }\n            this.addEffect(this._chromaticAberrationEffect);\n            this._setAutoClearAndTextureSharing(this.chromaticAberration);\n        }\n        if (this.fxaaEnabled) {\n            this.fxaa = new FxaaPostProcess(\"fxaa\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._defaultPipelineTextureType);\n            this.addEffect(new PostProcessRenderEffect(engine, this.FxaaPostProcessId, function () {\n                return _this.fxaa;\n            }, true));\n            this._setAutoClearAndTextureSharing(this.fxaa, true);\n        }\n        if (this._cameras !== null) {\n            this._scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(this._name, this._cameras);\n        }\n        // In multicamera mode, the scene needs to autoclear in between cameras.\n        if (this._scene.activeCameras && this._scene.activeCameras.length > 1) {\n            this._scene.autoClear = true;\n        }\n        if (!this._enableMSAAOnFirstPostProcess(this.samples) && this.samples > 1) {\n            Logger.Warn(\"MSAA failed to enable, MSAA is only supported in browsers that support webGL >= 2.0\");\n        }\n        this.onBuildObservable.notifyObservers(this);\n    };\n    DefaultRenderingPipeline.prototype._disposePostProcesses = function (disposeNonRecreated) {\n        if (disposeNonRecreated === void 0) { disposeNonRecreated = false; }\n        for (var i = 0; i < this._cameras.length; i++) {\n            var camera = this._cameras[i];\n            if (this.imageProcessing) {\n                this.imageProcessing.dispose(camera);\n            }\n            if (this.fxaa) {\n                this.fxaa.dispose(camera);\n            }\n            // These are created in the constructor and should not be disposed on every pipeline change\n            if (disposeNonRecreated) {\n                if (this.sharpen) {\n                    this.sharpen.dispose(camera);\n                }\n                if (this.depthOfField) {\n                    this._scene.onAfterRenderTargetsRenderObservable.remove(this._depthOfFieldSceneObserver);\n                    this.depthOfField.disposeEffects(camera);\n                }\n                if (this.bloom) {\n                    this.bloom.disposeEffects(camera);\n                }\n                if (this.chromaticAberration) {\n                    this.chromaticAberration.dispose(camera);\n                }\n                if (this.grain) {\n                    this.grain.dispose(camera);\n                }\n                if (this._glowLayer) {\n                    this._glowLayer.dispose();\n                }\n            }\n        }\n        this.imageProcessing = null;\n        this.fxaa = null;\n        if (disposeNonRecreated) {\n            this.sharpen = null;\n            this._sharpenEffect = null;\n            this.depthOfField = null;\n            this.bloom = null;\n            this.chromaticAberration = null;\n            this._chromaticAberrationEffect = null;\n            this.grain = null;\n            this._grainEffect = null;\n            this._glowLayer = null;\n        }\n    };\n    /**\n     * Adds a camera to the pipeline\n     * @param camera the camera to be added\n     */\n    DefaultRenderingPipeline.prototype.addCamera = function (camera) {\n        this._camerasToBeAttached.push(camera);\n        this._buildPipeline();\n    };\n    /**\n     * Removes a camera from the pipeline\n     * @param camera the camera to remove\n     */\n    DefaultRenderingPipeline.prototype.removeCamera = function (camera) {\n        var index = this._camerasToBeAttached.indexOf(camera);\n        this._camerasToBeAttached.splice(index, 1);\n        this._buildPipeline();\n    };\n    /**\n     * Dispose of the pipeline and stop all post processes\n     */\n    DefaultRenderingPipeline.prototype.dispose = function () {\n        this.onBuildObservable.clear();\n        this._disposePostProcesses(true);\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\n        this._scene.autoClear = true;\n        if (this._resizeObserver) {\n            this._scene.getEngine().onResizeObservable.remove(this._resizeObserver);\n            this._resizeObserver = null;\n        }\n        this._scene.imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingConfigurationObserver);\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Serialize the rendering pipeline (Used when exporting)\n     * @returns the serialized object\n     */\n    DefaultRenderingPipeline.prototype.serialize = function () {\n        var serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"DefaultRenderingPipeline\";\n        return serializationObject;\n    };\n    /**\n     * Parse the serialized pipeline\n     * @param source Source pipeline.\n     * @param scene The scene to load the pipeline to.\n     * @param rootUrl The URL of the serialized pipeline.\n     * @returns An instantiated pipeline from the serialized object.\n     */\n    DefaultRenderingPipeline.Parse = function (source, scene, rootUrl) {\n        return SerializationHelper.Parse(function () { return new DefaultRenderingPipeline(source._name, source._name._hdr, scene); }, source, scene, rootUrl);\n    };\n    __decorate([\n        serialize()\n    ], DefaultRenderingPipeline.prototype, \"sharpenEnabled\", null);\n    __decorate([\n        serialize()\n    ], DefaultRenderingPipeline.prototype, \"bloomKernel\", null);\n    __decorate([\n        serialize()\n    ], DefaultRenderingPipeline.prototype, \"_bloomWeight\", void 0);\n    __decorate([\n        serialize()\n    ], DefaultRenderingPipeline.prototype, \"_bloomThreshold\", void 0);\n    __decorate([\n        serialize()\n    ], DefaultRenderingPipeline.prototype, \"_hdr\", void 0);\n    __decorate([\n        serialize()\n    ], DefaultRenderingPipeline.prototype, \"bloomWeight\", null);\n    __decorate([\n        serialize()\n    ], DefaultRenderingPipeline.prototype, \"bloomThreshold\", null);\n    __decorate([\n        serialize()\n    ], DefaultRenderingPipeline.prototype, \"bloomScale\", null);\n    __decorate([\n        serialize()\n    ], DefaultRenderingPipeline.prototype, \"bloomEnabled\", null);\n    __decorate([\n        serialize()\n    ], DefaultRenderingPipeline.prototype, \"depthOfFieldEnabled\", null);\n    __decorate([\n        serialize()\n    ], DefaultRenderingPipeline.prototype, \"depthOfFieldBlurLevel\", null);\n    __decorate([\n        serialize()\n    ], DefaultRenderingPipeline.prototype, \"fxaaEnabled\", null);\n    __decorate([\n        serialize()\n    ], DefaultRenderingPipeline.prototype, \"samples\", null);\n    __decorate([\n        serialize()\n    ], DefaultRenderingPipeline.prototype, \"imageProcessingEnabled\", null);\n    __decorate([\n        serialize()\n    ], DefaultRenderingPipeline.prototype, \"glowLayerEnabled\", null);\n    __decorate([\n        serialize()\n    ], DefaultRenderingPipeline.prototype, \"chromaticAberrationEnabled\", null);\n    __decorate([\n        serialize()\n    ], DefaultRenderingPipeline.prototype, \"grainEnabled\", null);\n    return DefaultRenderingPipeline;\n}(PostProcessRenderPipeline));\nexport { DefaultRenderingPipeline };\nRegisterClass(\"BABYLON.DefaultRenderingPipeline\", DefaultRenderingPipeline);\n//# sourceMappingURL=defaultRenderingPipeline.js.map","import { __extends } from \"tslib\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture.js\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess.js\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js\";\nimport \"../../../Shaders/chromaticAberration.fragment.js\";\nimport \"../../../Shaders/lensHighlights.fragment.js\";\nimport \"../../../Shaders/depthOfField.fragment.js\";\n/**\n * BABYLON.JS Chromatic Aberration GLSL Shader\n * Author: Olivier Guyot\n * Separates very slightly R, G and B colors on the edges of the screen\n * Inspired by Francois Tarlier & Martins Upitis\n */\nvar LensRenderingPipeline = /** @class */ (function (_super) {\n    __extends(LensRenderingPipeline, _super);\n    /**\n     * @constructor\n     *\n     * Effect parameters are as follow:\n     * {\n     *      chromatic_aberration: number;       // from 0 to x (1 for realism)\n     *      edge_blur: number;                  // from 0 to x (1 for realism)\n     *      distortion: number;                 // from 0 to x (1 for realism), note that this will effect the pointer position precision\n     *      grain_amount: number;               // from 0 to 1\n     *      grain_texture: BABYLON.Texture;     // texture to use for grain effect; if unset, use random B&W noise\n     *      dof_focus_distance: number;         // depth-of-field: focus distance; unset to disable (disabled by default)\n     *      dof_aperture: number;               // depth-of-field: focus blur bias (default: 1)\n     *      dof_darken: number;                 // depth-of-field: darken that which is out of focus (from 0 to 1, disabled by default)\n     *      dof_pentagon: boolean;              // depth-of-field: makes a pentagon-like \"bokeh\" effect\n     *      dof_gain: number;                   // depth-of-field: highlights gain; unset to disable (disabled by default)\n     *      dof_threshold: number;              // depth-of-field: highlights threshold (default: 1)\n     *      blur_noise: boolean;                // add a little bit of noise to the blur (default: true)\n     * }\n     * Note: if an effect parameter is unset, effect is disabled\n     *\n     * @param name The rendering pipeline name\n     * @param parameters - An object containing all parameters (see above)\n     * @param scene The scene linked to this pipeline\n     * @param ratio The size of the postprocesses (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)\n     * @param cameras The array of cameras that the rendering pipeline will be attached to\n     */\n    function LensRenderingPipeline(name, parameters, scene, ratio, cameras) {\n        if (ratio === void 0) { ratio = 1.0; }\n        var _this = _super.call(this, scene.getEngine(), name) || this;\n        // Lens effects can be of the following:\n        // - chromatic aberration (slight shift of RGB colors)\n        // - blur on the edge of the lens\n        // - lens distortion\n        // - depth-of-field blur & highlights enhancing\n        // - depth-of-field 'bokeh' effect (shapes appearing in blurred areas)\n        // - grain effect (noise or custom texture)\n        // Two additional texture samplers are needed:\n        // - depth map (for depth-of-field)\n        // - grain texture\n        /**\n         * @ignore\n         * The chromatic aberration PostProcess id in the pipeline\n         */\n        _this.LensChromaticAberrationEffect = \"LensChromaticAberrationEffect\";\n        /**\n         * @ignore\n         * The highlights enhancing PostProcess id in the pipeline\n         */\n        _this.HighlightsEnhancingEffect = \"HighlightsEnhancingEffect\";\n        /**\n         * @ignore\n         * The depth-of-field PostProcess id in the pipeline\n         */\n        _this.LensDepthOfFieldEffect = \"LensDepthOfFieldEffect\";\n        _this._pentagonBokehIsEnabled = false;\n        _this._scene = scene;\n        // Fetch texture samplers\n        _this._depthTexture = scene.enableDepthRenderer().getDepthMap(); // Force depth renderer \"on\"\n        if (parameters.grain_texture) {\n            _this._grainTexture = parameters.grain_texture;\n        }\n        else {\n            _this._createGrainTexture();\n        }\n        // save parameters\n        _this._edgeBlur = parameters.edge_blur ? parameters.edge_blur : 0;\n        _this._grainAmount = parameters.grain_amount ? parameters.grain_amount : 0;\n        _this._chromaticAberration = parameters.chromatic_aberration ? parameters.chromatic_aberration : 0;\n        _this._distortion = parameters.distortion ? parameters.distortion : 0;\n        _this._highlightsGain = parameters.dof_gain !== undefined ? parameters.dof_gain : -1;\n        _this._highlightsThreshold = parameters.dof_threshold ? parameters.dof_threshold : 1;\n        _this._dofDistance = parameters.dof_focus_distance !== undefined ? parameters.dof_focus_distance : -1;\n        _this._dofAperture = parameters.dof_aperture ? parameters.dof_aperture : 1;\n        _this._dofDarken = parameters.dof_darken ? parameters.dof_darken : 0;\n        _this._dofPentagon = parameters.dof_pentagon !== undefined ? parameters.dof_pentagon : true;\n        _this._blurNoise = parameters.blur_noise !== undefined ? parameters.blur_noise : true;\n        // Create effects\n        _this._createChromaticAberrationPostProcess(ratio);\n        _this._createHighlightsPostProcess(ratio);\n        _this._createDepthOfFieldPostProcess(ratio / 4);\n        // Set up pipeline\n        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.LensChromaticAberrationEffect, function () {\n            return _this._chromaticAberrationPostProcess;\n        }, true));\n        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.HighlightsEnhancingEffect, function () {\n            return _this._highlightsPostProcess;\n        }, true));\n        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.LensDepthOfFieldEffect, function () {\n            return _this._depthOfFieldPostProcess;\n        }, true));\n        if (_this._highlightsGain === -1) {\n            _this._disableEffect(_this.HighlightsEnhancingEffect, null);\n        }\n        // Finish\n        scene.postProcessRenderPipelineManager.addPipeline(_this);\n        if (cameras) {\n            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n        }\n        return _this;\n    }\n    /**\n     * Get the class name\n     * @returns \"LensRenderingPipeline\"\n     */\n    LensRenderingPipeline.prototype.getClassName = function () {\n        return \"LensRenderingPipeline\";\n    };\n    Object.defineProperty(LensRenderingPipeline.prototype, \"scene\", {\n        // Properties\n        /**\n         * Gets associated scene\n         */\n        get: function () {\n            return this._scene;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LensRenderingPipeline.prototype, \"edgeBlur\", {\n        /**\n         * Gets or sets the edge blur\n         */\n        get: function () {\n            return this._edgeBlur;\n        },\n        set: function (value) {\n            this.setEdgeBlur(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LensRenderingPipeline.prototype, \"grainAmount\", {\n        /**\n         * Gets or sets the grain amount\n         */\n        get: function () {\n            return this._grainAmount;\n        },\n        set: function (value) {\n            this.setGrainAmount(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LensRenderingPipeline.prototype, \"chromaticAberration\", {\n        /**\n         * Gets or sets the chromatic aberration amount\n         */\n        get: function () {\n            return this._chromaticAberration;\n        },\n        set: function (value) {\n            this.setChromaticAberration(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LensRenderingPipeline.prototype, \"dofAperture\", {\n        /**\n         * Gets or sets the depth of field aperture\n         */\n        get: function () {\n            return this._dofAperture;\n        },\n        set: function (value) {\n            this.setAperture(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LensRenderingPipeline.prototype, \"edgeDistortion\", {\n        /**\n         * Gets or sets the edge distortion\n         */\n        get: function () {\n            return this._distortion;\n        },\n        set: function (value) {\n            this.setEdgeDistortion(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LensRenderingPipeline.prototype, \"dofDistortion\", {\n        /**\n         * Gets or sets the depth of field distortion\n         */\n        get: function () {\n            return this._dofDistance;\n        },\n        set: function (value) {\n            this.setFocusDistance(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LensRenderingPipeline.prototype, \"darkenOutOfFocus\", {\n        /**\n         * Gets or sets the darken out of focus amount\n         */\n        get: function () {\n            return this._dofDarken;\n        },\n        set: function (value) {\n            this.setDarkenOutOfFocus(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LensRenderingPipeline.prototype, \"blurNoise\", {\n        /**\n         * Gets or sets a boolean indicating if blur noise is enabled\n         */\n        get: function () {\n            return this._blurNoise;\n        },\n        set: function (value) {\n            this._blurNoise = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LensRenderingPipeline.prototype, \"pentagonBokeh\", {\n        /**\n         * Gets or sets a boolean indicating if pentagon bokeh is enabled\n         */\n        get: function () {\n            return this._pentagonBokehIsEnabled;\n        },\n        set: function (value) {\n            if (value) {\n                this.enablePentagonBokeh();\n            }\n            else {\n                this.disablePentagonBokeh();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LensRenderingPipeline.prototype, \"highlightsGain\", {\n        /**\n         * Gets or sets the highlight grain amount\n         */\n        get: function () {\n            return this._highlightsGain;\n        },\n        set: function (value) {\n            this.setHighlightsGain(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LensRenderingPipeline.prototype, \"highlightsThreshold\", {\n        /**\n         * Gets or sets the highlight threshold\n         */\n        get: function () {\n            return this._highlightsThreshold;\n        },\n        set: function (value) {\n            this.setHighlightsThreshold(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // public methods (self explanatory)\n    /**\n     * Sets the amount of blur at the edges\n     * @param amount blur amount\n     */\n    LensRenderingPipeline.prototype.setEdgeBlur = function (amount) {\n        this._edgeBlur = amount;\n    };\n    /**\n     * Sets edge blur to 0\n     */\n    LensRenderingPipeline.prototype.disableEdgeBlur = function () {\n        this._edgeBlur = 0;\n    };\n    /**\n     * Sets the amount of grain\n     * @param amount Amount of grain\n     */\n    LensRenderingPipeline.prototype.setGrainAmount = function (amount) {\n        this._grainAmount = amount;\n    };\n    /**\n     * Set grain amount to 0\n     */\n    LensRenderingPipeline.prototype.disableGrain = function () {\n        this._grainAmount = 0;\n    };\n    /**\n     * Sets the chromatic aberration amount\n     * @param amount amount of chromatic aberration\n     */\n    LensRenderingPipeline.prototype.setChromaticAberration = function (amount) {\n        this._chromaticAberration = amount;\n    };\n    /**\n     * Sets chromatic aberration amount to 0\n     */\n    LensRenderingPipeline.prototype.disableChromaticAberration = function () {\n        this._chromaticAberration = 0;\n    };\n    /**\n     * Sets the EdgeDistortion amount\n     * @param amount amount of EdgeDistortion\n     */\n    LensRenderingPipeline.prototype.setEdgeDistortion = function (amount) {\n        this._distortion = amount;\n    };\n    /**\n     * Sets edge distortion to 0\n     */\n    LensRenderingPipeline.prototype.disableEdgeDistortion = function () {\n        this._distortion = 0;\n    };\n    /**\n     * Sets the FocusDistance amount\n     * @param amount amount of FocusDistance\n     */\n    LensRenderingPipeline.prototype.setFocusDistance = function (amount) {\n        this._dofDistance = amount;\n    };\n    /**\n     * Disables depth of field\n     */\n    LensRenderingPipeline.prototype.disableDepthOfField = function () {\n        this._dofDistance = -1;\n    };\n    /**\n     * Sets the Aperture amount\n     * @param amount amount of Aperture\n     */\n    LensRenderingPipeline.prototype.setAperture = function (amount) {\n        this._dofAperture = amount;\n    };\n    /**\n     * Sets the DarkenOutOfFocus amount\n     * @param amount amount of DarkenOutOfFocus\n     */\n    LensRenderingPipeline.prototype.setDarkenOutOfFocus = function (amount) {\n        this._dofDarken = amount;\n    };\n    /**\n     * Creates a pentagon bokeh effect\n     */\n    LensRenderingPipeline.prototype.enablePentagonBokeh = function () {\n        this._highlightsPostProcess.updateEffect(\"#define PENTAGON\\n\");\n        this._pentagonBokehIsEnabled = true;\n    };\n    /**\n     * Disables the pentagon bokeh effect\n     */\n    LensRenderingPipeline.prototype.disablePentagonBokeh = function () {\n        this._pentagonBokehIsEnabled = false;\n        this._highlightsPostProcess.updateEffect();\n    };\n    /**\n     * Enables noise blur\n     */\n    LensRenderingPipeline.prototype.enableNoiseBlur = function () {\n        this._blurNoise = true;\n    };\n    /**\n     * Disables noise blur\n     */\n    LensRenderingPipeline.prototype.disableNoiseBlur = function () {\n        this._blurNoise = false;\n    };\n    /**\n     * Sets the HighlightsGain amount\n     * @param amount amount of HighlightsGain\n     */\n    LensRenderingPipeline.prototype.setHighlightsGain = function (amount) {\n        this._highlightsGain = amount;\n    };\n    /**\n     * Sets the HighlightsThreshold amount\n     * @param amount amount of HighlightsThreshold\n     */\n    LensRenderingPipeline.prototype.setHighlightsThreshold = function (amount) {\n        if (this._highlightsGain === -1) {\n            this._highlightsGain = 1.0;\n        }\n        this._highlightsThreshold = amount;\n    };\n    /**\n     * Disables highlights\n     */\n    LensRenderingPipeline.prototype.disableHighlights = function () {\n        this._highlightsGain = -1;\n    };\n    /**\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\n     * @param disableDepthRender If the scene's depth rendering should be disabled (default: false)\n     */\n    LensRenderingPipeline.prototype.dispose = function (disableDepthRender) {\n        if (disableDepthRender === void 0) { disableDepthRender = false; }\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n        this._chromaticAberrationPostProcess = null;\n        this._highlightsPostProcess = null;\n        this._depthOfFieldPostProcess = null;\n        this._grainTexture.dispose();\n        if (disableDepthRender) {\n            this._scene.disableDepthRenderer();\n        }\n    };\n    // colors shifting and distortion\n    LensRenderingPipeline.prototype._createChromaticAberrationPostProcess = function (ratio) {\n        var _this = this;\n        this._chromaticAberrationPostProcess = new PostProcess(\"LensChromaticAberration\", \"chromaticAberration\", [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"], // uniforms\n        [], // samplers\n        ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n        this._chromaticAberrationPostProcess.onApply = function (effect) {\n            effect.setFloat(\"chromatic_aberration\", _this._chromaticAberration);\n            effect.setFloat(\"screen_width\", _this._scene.getEngine().getRenderWidth());\n            effect.setFloat(\"screen_height\", _this._scene.getEngine().getRenderHeight());\n            effect.setFloat(\"radialIntensity\", 1);\n            effect.setFloat2(\"direction\", 17, 17);\n            effect.setFloat2(\"centerPosition\", 0.5, 0.5);\n        };\n    };\n    // highlights enhancing\n    LensRenderingPipeline.prototype._createHighlightsPostProcess = function (ratio) {\n        var _this = this;\n        this._highlightsPostProcess = new PostProcess(\"LensHighlights\", \"lensHighlights\", [\"gain\", \"threshold\", \"screen_width\", \"screen_height\"], // uniforms\n        [], // samplers\n        ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, this._dofPentagon ? \"#define PENTAGON\\n\" : \"\");\n        this._highlightsPostProcess.externalTextureSamplerBinding = true;\n        this._highlightsPostProcess.onApply = function (effect) {\n            effect.setFloat(\"gain\", _this._highlightsGain);\n            effect.setFloat(\"threshold\", _this._highlightsThreshold);\n            effect.setTextureFromPostProcess(\"textureSampler\", _this._chromaticAberrationPostProcess);\n            effect.setFloat(\"screen_width\", _this._scene.getEngine().getRenderWidth());\n            effect.setFloat(\"screen_height\", _this._scene.getEngine().getRenderHeight());\n        };\n    };\n    // colors shifting and distortion\n    LensRenderingPipeline.prototype._createDepthOfFieldPostProcess = function (ratio) {\n        var _this = this;\n        this._depthOfFieldPostProcess = new PostProcess(\"LensDepthOfField\", \"depthOfField\", [\n            \"grain_amount\",\n            \"blur_noise\",\n            \"screen_width\",\n            \"screen_height\",\n            \"distortion\",\n            \"dof_enabled\",\n            \"screen_distance\",\n            \"aperture\",\n            \"darken\",\n            \"edge_blur\",\n            \"highlights\",\n            \"near\",\n            \"far\",\n        ], [\"depthSampler\", \"grainSampler\", \"highlightsSampler\"], ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n        this._depthOfFieldPostProcess.externalTextureSamplerBinding = true;\n        this._depthOfFieldPostProcess.onApply = function (effect) {\n            effect.setTexture(\"depthSampler\", _this._depthTexture);\n            effect.setTexture(\"grainSampler\", _this._grainTexture);\n            effect.setTextureFromPostProcess(\"textureSampler\", _this._highlightsPostProcess);\n            effect.setTextureFromPostProcess(\"highlightsSampler\", _this._depthOfFieldPostProcess);\n            effect.setFloat(\"grain_amount\", _this._grainAmount);\n            effect.setBool(\"blur_noise\", _this._blurNoise);\n            effect.setFloat(\"screen_width\", _this._scene.getEngine().getRenderWidth());\n            effect.setFloat(\"screen_height\", _this._scene.getEngine().getRenderHeight());\n            effect.setFloat(\"distortion\", _this._distortion);\n            effect.setBool(\"dof_enabled\", _this._dofDistance !== -1);\n            effect.setFloat(\"screen_distance\", 1.0 / (0.1 - 1.0 / _this._dofDistance));\n            effect.setFloat(\"aperture\", _this._dofAperture);\n            effect.setFloat(\"darken\", _this._dofDarken);\n            effect.setFloat(\"edge_blur\", _this._edgeBlur);\n            effect.setBool(\"highlights\", _this._highlightsGain !== -1);\n            if (_this._scene.activeCamera) {\n                effect.setFloat(\"near\", _this._scene.activeCamera.minZ);\n                effect.setFloat(\"far\", _this._scene.activeCamera.maxZ);\n            }\n        };\n    };\n    // creates a black and white random noise texture, 512x512\n    LensRenderingPipeline.prototype._createGrainTexture = function () {\n        var size = 512;\n        this._grainTexture = new DynamicTexture(\"LensNoiseTexture\", size, this._scene, false, Texture.BILINEAR_SAMPLINGMODE);\n        this._grainTexture.wrapU = Texture.WRAP_ADDRESSMODE;\n        this._grainTexture.wrapV = Texture.WRAP_ADDRESSMODE;\n        var context = this._grainTexture.getContext();\n        var rand = function (min, max) {\n            return Math.random() * (max - min) + min;\n        };\n        var value;\n        for (var x = 0; x < size; x++) {\n            for (var y = 0; y < size; y++) {\n                value = Math.floor(rand(0.42, 0.58) * 255);\n                context.fillStyle = \"rgb(\" + value + \", \" + value + \", \" + value + \")\";\n                context.fillRect(x, y, 1, 1);\n            }\n        }\n        this._grainTexture.update(false);\n    };\n    return LensRenderingPipeline;\n}(PostProcessRenderPipeline));\nexport { LensRenderingPipeline };\n//# sourceMappingURL=lensRenderingPipeline.js.map","import { __decorate, __extends } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Logger } from \"../../../Misc/logger.js\";\nimport { serialize, SerializationHelper } from \"../../../Misc/decorators.js\";\nimport { Vector3, TmpVectors } from \"../../../Maths/math.vector.js\";\nimport { Camera } from \"../../../Cameras/camera.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture.js\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess.js\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { EngineStore } from \"../../../Engines/engineStore.js\";\nimport { SSAO2Configuration } from \"../../../Rendering/ssao2Configuration.js\";\n\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js\";\nimport \"../../../Shaders/ssao2.fragment.js\";\nimport \"../../../Shaders/ssaoCombine.fragment.js\";\n/**\n * Render pipeline to produce ssao effect\n */\nvar SSAO2RenderingPipeline = /** @class */ (function (_super) {\n    __extends(SSAO2RenderingPipeline, _super);\n    /**\n     * @constructor\n     * @param name The rendering pipeline name\n     * @param scene The scene linked to this pipeline\n     * @param ratio The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, blurRatio: 1.0 }\n     * @param cameras The array of cameras that the rendering pipeline will be attached to\n     * @param forceGeometryBuffer Set to true if you want to use the legacy geometry buffer renderer\n     * @param textureType The texture type used by the different post processes created by SSAO (default: 0)\n     */\n    function SSAO2RenderingPipeline(name, scene, ratio, cameras, forceGeometryBuffer, textureType) {\n        if (forceGeometryBuffer === void 0) { forceGeometryBuffer = false; }\n        if (textureType === void 0) { textureType = 0; }\n        var _this = _super.call(this, scene.getEngine(), name) || this;\n        // Members\n        /**\n         * @ignore\n         * The PassPostProcess id in the pipeline that contains the original scene color\n         */\n        _this.SSAOOriginalSceneColorEffect = \"SSAOOriginalSceneColorEffect\";\n        /**\n         * @ignore\n         * The SSAO PostProcess id in the pipeline\n         */\n        _this.SSAORenderEffect = \"SSAORenderEffect\";\n        /**\n         * @ignore\n         * The horizontal blur PostProcess id in the pipeline\n         */\n        _this.SSAOBlurHRenderEffect = \"SSAOBlurHRenderEffect\";\n        /**\n         * @ignore\n         * The vertical blur PostProcess id in the pipeline\n         */\n        _this.SSAOBlurVRenderEffect = \"SSAOBlurVRenderEffect\";\n        /**\n         * @ignore\n         * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\n         */\n        _this.SSAOCombineRenderEffect = \"SSAOCombineRenderEffect\";\n        /**\n         * The output strength of the SSAO post-process. Default value is 1.0.\n         */\n        _this.totalStrength = 1.0;\n        /**\n         * Maximum depth value to still render AO. A smooth falloff makes the dimming more natural, so there will be no abrupt shading change.\n         */\n        _this.maxZ = 100.0;\n        /**\n         * In order to save performances, SSAO radius is clamped on close geometry. This ratio changes by how much\n         */\n        _this.minZAspect = 0.2;\n        _this._samples = 8;\n        _this._textureSamples = 1;\n        /**\n         * Force rendering the geometry through geometry buffer\n         */\n        _this._forceGeometryBuffer = false;\n        _this._expensiveBlur = true;\n        /**\n         * The radius around the analyzed pixel used by the SSAO post-process. Default value is 2.0\n         */\n        _this.radius = 2.0;\n        /**\n         * The base color of the SSAO post-process\n         * The final result is \"base + ssao\" between [0, 1]\n         */\n        _this.base = 0;\n        _this._bits = new Uint32Array(1);\n        _this._scene = scene;\n        _this._ratio = ratio;\n        _this._forceGeometryBuffer = forceGeometryBuffer;\n        if (!_this.isSupported) {\n            Logger.Error(\"The current engine does not support SSAO 2.\");\n            return _this;\n        }\n        var ssaoRatio = _this._ratio.ssaoRatio || ratio;\n        var blurRatio = _this._ratio.blurRatio || ratio;\n        // Set up assets\n        if (_this._forceGeometryBuffer) {\n            scene.enableGeometryBufferRenderer();\n        }\n        else {\n            scene.enablePrePassRenderer();\n        }\n        _this._createRandomTexture();\n        _this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), undefined, textureType);\n        _this._originalColorPostProcess.samples = _this.textureSamples;\n        _this._createSSAOPostProcess(1.0, textureType);\n        _this._createBlurPostProcess(ssaoRatio, blurRatio, textureType);\n        _this._createSSAOCombinePostProcess(blurRatio, textureType);\n        // Set up pipeline\n        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOOriginalSceneColorEffect, function () {\n            return _this._originalColorPostProcess;\n        }, true));\n        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAORenderEffect, function () {\n            return _this._ssaoPostProcess;\n        }, true));\n        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOBlurHRenderEffect, function () {\n            return _this._blurHPostProcess;\n        }, true));\n        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOBlurVRenderEffect, function () {\n            return _this._blurVPostProcess;\n        }, true));\n        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOCombineRenderEffect, function () {\n            return _this._ssaoCombinePostProcess;\n        }, true));\n        // Finish\n        scene.postProcessRenderPipelineManager.addPipeline(_this);\n        if (cameras) {\n            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n        }\n        return _this;\n    }\n    Object.defineProperty(SSAO2RenderingPipeline.prototype, \"samples\", {\n        get: function () {\n            return this._samples;\n        },\n        /**\n         * Number of samples used for the SSAO calculations. Default value is 8\n         */\n        set: function (n) {\n            this._samples = n;\n            this._ssaoPostProcess.updateEffect(this._getDefinesForSSAO());\n            this._sampleSphere = this._generateHemisphere();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SSAO2RenderingPipeline.prototype, \"textureSamples\", {\n        get: function () {\n            return this._textureSamples;\n        },\n        /**\n         * Number of samples to use for antialiasing\n         */\n        set: function (n) {\n            this._textureSamples = n;\n            if (this._prePassRenderer) {\n                this._prePassRenderer.samples = n;\n            }\n            else {\n                this._originalColorPostProcess.samples = n;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SSAO2RenderingPipeline.prototype, \"_geometryBufferRenderer\", {\n        get: function () {\n            if (!this._forceGeometryBuffer) {\n                return null;\n            }\n            return this._scene.geometryBufferRenderer;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SSAO2RenderingPipeline.prototype, \"_prePassRenderer\", {\n        get: function () {\n            if (this._forceGeometryBuffer) {\n                return null;\n            }\n            return this._scene.prePassRenderer;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SSAO2RenderingPipeline.prototype, \"expensiveBlur\", {\n        get: function () {\n            return this._expensiveBlur;\n        },\n        /**\n         * If bilateral blur should be used\n         */\n        set: function (b) {\n            this._blurHPostProcess.updateEffect(\"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (b ? \"1\" : \"0\") + \"\\n\", null, [\n                \"textureSampler\",\n                \"depthSampler\",\n            ]);\n            this._blurVPostProcess.updateEffect(\"#define BILATERAL_BLUR\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (b ? \"1\" : \"0\") + \"\\n\", null, [\"textureSampler\", \"depthSampler\"]);\n            this._expensiveBlur = b;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SSAO2RenderingPipeline, \"IsSupported\", {\n        /**\n         *  Support test.\n         */\n        get: function () {\n            var engine = EngineStore.LastCreatedEngine;\n            if (!engine) {\n                return false;\n            }\n            return engine._features.supportSSAO2;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SSAO2RenderingPipeline.prototype, \"scene\", {\n        /**\n         * Gets active scene\n         */\n        get: function () {\n            return this._scene;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // Public Methods\n    /**\n     * Get the class name\n     * @returns \"SSAO2RenderingPipeline\"\n     */\n    SSAO2RenderingPipeline.prototype.getClassName = function () {\n        return \"SSAO2RenderingPipeline\";\n    };\n    /**\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\n     * @param disableGeometryBufferRenderer\n     */\n    SSAO2RenderingPipeline.prototype.dispose = function (disableGeometryBufferRenderer) {\n        if (disableGeometryBufferRenderer === void 0) { disableGeometryBufferRenderer = false; }\n        for (var i = 0; i < this._scene.cameras.length; i++) {\n            var camera = this._scene.cameras[i];\n            this._originalColorPostProcess.dispose(camera);\n            this._ssaoPostProcess.dispose(camera);\n            this._blurHPostProcess.dispose(camera);\n            this._blurVPostProcess.dispose(camera);\n            this._ssaoCombinePostProcess.dispose(camera);\n        }\n        this._randomTexture.dispose();\n        if (disableGeometryBufferRenderer) {\n            this._scene.disableGeometryBufferRenderer();\n        }\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n        _super.prototype.dispose.call(this);\n    };\n    // Private Methods\n    SSAO2RenderingPipeline.prototype._createBlurPostProcess = function (ssaoRatio, blurRatio, textureType) {\n        var _this = this;\n        this._samplerOffsets = [];\n        var expensive = this.expensiveBlur;\n        for (var i = -8; i < 8; i++) {\n            this._samplerOffsets.push(i * 2 + 0.5);\n        }\n        this._blurHPostProcess = new PostProcess(\"BlurH\", \"ssao2\", [\"outSize\", \"samplerOffsets\", \"near\", \"far\", \"radius\"], [\"depthSampler\"], ssaoRatio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (expensive ? \"1\" : \"0\") + \"\\n\", textureType);\n        this._blurHPostProcess.onApply = function (effect) {\n            if (!_this._scene.activeCamera) {\n                return;\n            }\n            effect.setFloat(\"outSize\", _this._ssaoCombinePostProcess.width > 0 ? _this._ssaoCombinePostProcess.width : _this._originalColorPostProcess.width);\n            effect.setFloat(\"near\", _this._scene.activeCamera.minZ);\n            effect.setFloat(\"far\", _this._scene.activeCamera.maxZ);\n            effect.setFloat(\"radius\", _this.radius);\n            if (_this._geometryBufferRenderer) {\n                effect.setTexture(\"depthSampler\", _this._geometryBufferRenderer.getGBuffer().textures[0]);\n            }\n            else if (_this._prePassRenderer) {\n                effect.setTexture(\"depthSampler\", _this._prePassRenderer.getRenderTarget().textures[_this._prePassRenderer.getIndex(5)]);\n            }\n            effect.setArray(\"samplerOffsets\", _this._samplerOffsets);\n        };\n        this._blurVPostProcess = new PostProcess(\"BlurV\", \"ssao2\", [\"outSize\", \"samplerOffsets\", \"near\", \"far\", \"radius\"], [\"depthSampler\"], blurRatio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_V\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (expensive ? \"1\" : \"0\") + \"\\n\", textureType);\n        this._blurVPostProcess.onApply = function (effect) {\n            if (!_this._scene.activeCamera) {\n                return;\n            }\n            effect.setFloat(\"outSize\", _this._ssaoCombinePostProcess.height > 0 ? _this._ssaoCombinePostProcess.height : _this._originalColorPostProcess.height);\n            effect.setFloat(\"near\", _this._scene.activeCamera.minZ);\n            effect.setFloat(\"far\", _this._scene.activeCamera.maxZ);\n            effect.setFloat(\"radius\", _this.radius);\n            if (_this._geometryBufferRenderer) {\n                effect.setTexture(\"depthSampler\", _this._geometryBufferRenderer.getGBuffer().textures[0]);\n            }\n            else if (_this._prePassRenderer) {\n                effect.setTexture(\"depthSampler\", _this._prePassRenderer.getRenderTarget().textures[_this._prePassRenderer.getIndex(5)]);\n            }\n            effect.setArray(\"samplerOffsets\", _this._samplerOffsets);\n        };\n        this._blurHPostProcess.samples = this.textureSamples;\n        this._blurVPostProcess.samples = this.textureSamples;\n    };\n    /** @hidden */\n    SSAO2RenderingPipeline.prototype._rebuild = function () {\n        _super.prototype._rebuild.call(this);\n    };\n    //Van der Corput radical inverse\n    SSAO2RenderingPipeline.prototype._radicalInverse_VdC = function (i) {\n        this._bits[0] = i;\n        this._bits[0] = ((this._bits[0] << 16) | (this._bits[0] >> 16)) >>> 0;\n        this._bits[0] = ((this._bits[0] & 0x55555555) << 1) | (((this._bits[0] & 0xaaaaaaaa) >>> 1) >>> 0);\n        this._bits[0] = ((this._bits[0] & 0x33333333) << 2) | (((this._bits[0] & 0xcccccccc) >>> 2) >>> 0);\n        this._bits[0] = ((this._bits[0] & 0x0f0f0f0f) << 4) | (((this._bits[0] & 0xf0f0f0f0) >>> 4) >>> 0);\n        this._bits[0] = ((this._bits[0] & 0x00ff00ff) << 8) | (((this._bits[0] & 0xff00ff00) >>> 8) >>> 0);\n        return this._bits[0] * 2.3283064365386963e-10; // / 0x100000000 or / 4294967296\n    };\n    SSAO2RenderingPipeline.prototype._hammersley = function (i, n) {\n        return [i / n, this._radicalInverse_VdC(i)];\n    };\n    SSAO2RenderingPipeline.prototype._hemisphereSample_uniform = function (u, v) {\n        var phi = v * 2.0 * Math.PI;\n        // rejecting samples that are close to tangent plane to avoid z-fighting artifacts\n        var cosTheta = 1.0 - (u * 0.85 + 0.15);\n        var sinTheta = Math.sqrt(1.0 - cosTheta * cosTheta);\n        return new Vector3(Math.cos(phi) * sinTheta, Math.sin(phi) * sinTheta, cosTheta);\n    };\n    SSAO2RenderingPipeline.prototype._generateHemisphere = function () {\n        var numSamples = this.samples;\n        var result = [];\n        var vector;\n        var i = 0;\n        while (i < numSamples) {\n            if (numSamples < 16) {\n                vector = this._hemisphereSample_uniform(Math.random(), Math.random());\n            }\n            else {\n                var rand = this._hammersley(i, numSamples);\n                vector = this._hemisphereSample_uniform(rand[0], rand[1]);\n            }\n            result.push(vector.x, vector.y, vector.z);\n            i++;\n        }\n        return result;\n    };\n    SSAO2RenderingPipeline.prototype._getDefinesForSSAO = function () {\n        var defines = \"#define SAMPLES \" + this.samples + \"\\n#define SSAO\";\n        return defines;\n    };\n    SSAO2RenderingPipeline.prototype._createSSAOPostProcess = function (ratio, textureType) {\n        var _this = this;\n        this._sampleSphere = this._generateHemisphere();\n        var defines = this._getDefinesForSSAO();\n        var samplers = [\"randomSampler\", \"depthSampler\", \"normalSampler\"];\n        this._ssaoPostProcess = new PostProcess(\"ssao2\", \"ssao2\", [\n            \"sampleSphere\",\n            \"samplesFactor\",\n            \"randTextureTiles\",\n            \"totalStrength\",\n            \"radius\",\n            \"base\",\n            \"range\",\n            \"projection\",\n            \"near\",\n            \"far\",\n            \"texelSize\",\n            \"xViewport\",\n            \"yViewport\",\n            \"maxZ\",\n            \"minZAspect\",\n            \"depthProjection\",\n        ], samplers, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, defines, textureType);\n        this._ssaoPostProcess.onApply = function (effect) {\n            var _a, _b, _c, _d;\n            if (!_this._scene.activeCamera) {\n                return;\n            }\n            effect.setArray3(\"sampleSphere\", _this._sampleSphere);\n            effect.setFloat(\"randTextureTiles\", 32.0);\n            effect.setFloat(\"samplesFactor\", 1 / _this.samples);\n            effect.setFloat(\"totalStrength\", _this.totalStrength);\n            effect.setFloat2(\"texelSize\", 1 / _this._ssaoPostProcess.width, 1 / _this._ssaoPostProcess.height);\n            effect.setFloat(\"radius\", _this.radius);\n            effect.setFloat(\"maxZ\", _this.maxZ);\n            effect.setFloat(\"minZAspect\", _this.minZAspect);\n            effect.setFloat(\"base\", _this.base);\n            effect.setFloat(\"near\", _this._scene.activeCamera.minZ);\n            effect.setFloat(\"far\", _this._scene.activeCamera.maxZ);\n            if (_this._scene.activeCamera.mode === Camera.PERSPECTIVE_CAMERA) {\n                effect.setMatrix3x3(\"depthProjection\", SSAO2RenderingPipeline.PERSPECTIVE_DEPTH_PROJECTION);\n                effect.setFloat(\"xViewport\", Math.tan(_this._scene.activeCamera.fov / 2) * _this._scene.getEngine().getAspectRatio(_this._scene.activeCamera, true));\n                effect.setFloat(\"yViewport\", Math.tan(_this._scene.activeCamera.fov / 2));\n            }\n            else {\n                var halfWidth = _this._scene.getEngine().getRenderWidth() / 2.0;\n                var halfHeight = _this._scene.getEngine().getRenderHeight() / 2.0;\n                var orthoLeft = (_a = _this._scene.activeCamera.orthoLeft) !== null && _a !== void 0 ? _a : -halfWidth;\n                var orthoRight = (_b = _this._scene.activeCamera.orthoRight) !== null && _b !== void 0 ? _b : halfWidth;\n                var orthoBottom = (_c = _this._scene.activeCamera.orthoBottom) !== null && _c !== void 0 ? _c : -halfHeight;\n                var orthoTop = (_d = _this._scene.activeCamera.orthoTop) !== null && _d !== void 0 ? _d : halfHeight;\n                effect.setMatrix3x3(\"depthProjection\", SSAO2RenderingPipeline.ORTHO_DEPTH_PROJECTION);\n                effect.setFloat(\"xViewport\", (orthoRight - orthoLeft) * 0.5);\n                effect.setFloat(\"yViewport\", (orthoTop - orthoBottom) * 0.5);\n            }\n            effect.setMatrix(\"projection\", _this._scene.getProjectionMatrix());\n            if (_this._geometryBufferRenderer) {\n                effect.setTexture(\"depthSampler\", _this._geometryBufferRenderer.getGBuffer().textures[0]);\n                effect.setTexture(\"normalSampler\", _this._geometryBufferRenderer.getGBuffer().textures[1]);\n            }\n            else if (_this._prePassRenderer) {\n                effect.setTexture(\"depthSampler\", _this._prePassRenderer.getRenderTarget().textures[_this._prePassRenderer.getIndex(5)]);\n                effect.setTexture(\"normalSampler\", _this._prePassRenderer.getRenderTarget().textures[_this._prePassRenderer.getIndex(6)]);\n            }\n            effect.setTexture(\"randomSampler\", _this._randomTexture);\n        };\n        this._ssaoPostProcess.samples = this.textureSamples;\n        if (!this._forceGeometryBuffer) {\n            this._ssaoPostProcess._prePassEffectConfiguration = new SSAO2Configuration();\n        }\n    };\n    SSAO2RenderingPipeline.prototype._createSSAOCombinePostProcess = function (ratio, textureType) {\n        var _this = this;\n        this._ssaoCombinePostProcess = new PostProcess(\"ssaoCombine\", \"ssaoCombine\", [], [\"originalColor\", \"viewport\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, undefined, textureType);\n        this._ssaoCombinePostProcess.onApply = function (effect) {\n            var viewport = _this._scene.activeCamera.viewport;\n            effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(viewport.x, viewport.y, viewport.width, viewport.height));\n            effect.setTextureFromPostProcessOutput(\"originalColor\", _this._originalColorPostProcess);\n        };\n        this._ssaoCombinePostProcess.samples = this.textureSamples;\n    };\n    SSAO2RenderingPipeline.prototype._createRandomTexture = function () {\n        var size = 128;\n        this._randomTexture = new DynamicTexture(\"SSAORandomTexture\", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);\n        this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;\n        this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;\n        var context = this._randomTexture.getContext();\n        var rand = function (min, max) {\n            return Math.random() * (max - min) + min;\n        };\n        var randVector = Vector3.Zero();\n        for (var x = 0; x < size; x++) {\n            for (var y = 0; y < size; y++) {\n                randVector.x = rand(0.0, 1.0);\n                randVector.y = rand(0.0, 1.0);\n                randVector.z = 0.0;\n                randVector.normalize();\n                randVector.scaleInPlace(255);\n                randVector.x = Math.floor(randVector.x);\n                randVector.y = Math.floor(randVector.y);\n                context.fillStyle = \"rgb(\" + randVector.x + \", \" + randVector.y + \", \" + randVector.z + \")\";\n                context.fillRect(x, y, 1, 1);\n            }\n        }\n        this._randomTexture.update(false);\n    };\n    /**\n     * Serialize the rendering pipeline (Used when exporting)\n     * @returns the serialized object\n     */\n    SSAO2RenderingPipeline.prototype.serialize = function () {\n        var serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"SSAO2RenderingPipeline\";\n        return serializationObject;\n    };\n    /**\n     * Parse the serialized pipeline\n     * @param source Source pipeline.\n     * @param scene The scene to load the pipeline to.\n     * @param rootUrl The URL of the serialized pipeline.\n     * @returns An instantiated pipeline from the serialized object.\n     */\n    SSAO2RenderingPipeline.Parse = function (source, scene, rootUrl) {\n        return SerializationHelper.Parse(function () { return new SSAO2RenderingPipeline(source._name, scene, source._ratio); }, source, scene, rootUrl);\n    };\n    SSAO2RenderingPipeline.ORTHO_DEPTH_PROJECTION = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    SSAO2RenderingPipeline.PERSPECTIVE_DEPTH_PROJECTION = [0, 0, 0, 0, 0, 0, 1, 1, 1];\n    __decorate([\n        serialize()\n    ], SSAO2RenderingPipeline.prototype, \"totalStrength\", void 0);\n    __decorate([\n        serialize()\n    ], SSAO2RenderingPipeline.prototype, \"maxZ\", void 0);\n    __decorate([\n        serialize()\n    ], SSAO2RenderingPipeline.prototype, \"minZAspect\", void 0);\n    __decorate([\n        serialize(\"samples\")\n    ], SSAO2RenderingPipeline.prototype, \"_samples\", void 0);\n    __decorate([\n        serialize(\"textureSamples\")\n    ], SSAO2RenderingPipeline.prototype, \"_textureSamples\", void 0);\n    __decorate([\n        serialize()\n    ], SSAO2RenderingPipeline.prototype, \"_ratio\", void 0);\n    __decorate([\n        serialize(\"expensiveBlur\")\n    ], SSAO2RenderingPipeline.prototype, \"_expensiveBlur\", void 0);\n    __decorate([\n        serialize()\n    ], SSAO2RenderingPipeline.prototype, \"radius\", void 0);\n    __decorate([\n        serialize()\n    ], SSAO2RenderingPipeline.prototype, \"base\", void 0);\n    return SSAO2RenderingPipeline;\n}(PostProcessRenderPipeline));\nexport { SSAO2RenderingPipeline };\nRegisterClass(\"BABYLON.SSAO2RenderingPipeline\", SSAO2RenderingPipeline);\n//# sourceMappingURL=ssao2RenderingPipeline.js.map","import { __decorate, __extends } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Vector2, Vector3, TmpVectors } from \"../../../Maths/math.vector.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture.js\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess.js\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess.js\";\nimport { BlurPostProcess } from \"../../../PostProcesses/blurPostProcess.js\";\n\nimport { serialize } from \"../../../Misc/decorators.js\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js\";\nimport \"../../../Shaders/ssao.fragment.js\";\nimport \"../../../Shaders/ssaoCombine.fragment.js\";\n/**\n * Render pipeline to produce ssao effect\n */\nvar SSAORenderingPipeline = /** @class */ (function (_super) {\n    __extends(SSAORenderingPipeline, _super);\n    /**\n     * @constructor\n     * @param name - The rendering pipeline name\n     * @param scene - The scene linked to this pipeline\n     * @param ratio - The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, combineRatio: 1.0 }\n     * @param cameras - The array of cameras that the rendering pipeline will be attached to\n     */\n    function SSAORenderingPipeline(name, scene, ratio, cameras) {\n        var _this = _super.call(this, scene.getEngine(), name) || this;\n        // Members\n        /**\n         * @ignore\n         * The PassPostProcess id in the pipeline that contains the original scene color\n         */\n        _this.SSAOOriginalSceneColorEffect = \"SSAOOriginalSceneColorEffect\";\n        /**\n         * @ignore\n         * The SSAO PostProcess id in the pipeline\n         */\n        _this.SSAORenderEffect = \"SSAORenderEffect\";\n        /**\n         * @ignore\n         * The horizontal blur PostProcess id in the pipeline\n         */\n        _this.SSAOBlurHRenderEffect = \"SSAOBlurHRenderEffect\";\n        /**\n         * @ignore\n         * The vertical blur PostProcess id in the pipeline\n         */\n        _this.SSAOBlurVRenderEffect = \"SSAOBlurVRenderEffect\";\n        /**\n         * @ignore\n         * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\n         */\n        _this.SSAOCombineRenderEffect = \"SSAOCombineRenderEffect\";\n        /**\n         * The output strength of the SSAO post-process. Default value is 1.0.\n         */\n        _this.totalStrength = 1.0;\n        /**\n         * The radius around the analyzed pixel used by the SSAO post-process. Default value is 0.0006\n         */\n        _this.radius = 0.0001;\n        /**\n         * Related to fallOff, used to interpolate SSAO samples (first interpolate function input) based on the occlusion difference of each pixel\n         * Must not be equal to fallOff and superior to fallOff.\n         * Default value is 0.0075\n         */\n        _this.area = 0.0075;\n        /**\n         * Related to area, used to interpolate SSAO samples (second interpolate function input) based on the occlusion difference of each pixel\n         * Must not be equal to area and inferior to area.\n         * Default value is 0.000001\n         */\n        _this.fallOff = 0.000001;\n        /**\n         * The base color of the SSAO post-process\n         * The final result is \"base + ssao\" between [0, 1]\n         */\n        _this.base = 0.5;\n        _this._firstUpdate = true;\n        _this._scene = scene;\n        // Set up assets\n        _this._createRandomTexture();\n        var ssaoRatio = ratio.ssaoRatio || ratio;\n        var combineRatio = ratio.combineRatio || ratio;\n        _this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", combineRatio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false);\n        _this._createSSAOPostProcess(ssaoRatio);\n        _this._createBlurPostProcess(ssaoRatio);\n        _this._createSSAOCombinePostProcess(combineRatio);\n        // Set up pipeline\n        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOOriginalSceneColorEffect, function () {\n            return _this._originalColorPostProcess;\n        }, true));\n        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAORenderEffect, function () {\n            return _this._ssaoPostProcess;\n        }, true));\n        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOBlurHRenderEffect, function () {\n            return _this._blurHPostProcess;\n        }, true));\n        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOBlurVRenderEffect, function () {\n            return _this._blurVPostProcess;\n        }, true));\n        _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOCombineRenderEffect, function () {\n            return _this._ssaoCombinePostProcess;\n        }, true));\n        // Finish\n        scene.postProcessRenderPipelineManager.addPipeline(_this);\n        if (cameras) {\n            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n        }\n        return _this;\n    }\n    Object.defineProperty(SSAORenderingPipeline.prototype, \"scene\", {\n        /**\n         * Gets active scene\n         */\n        get: function () {\n            return this._scene;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @param cameras\n     * @param unique\n     * @hidden\n     */\n    SSAORenderingPipeline.prototype._attachCameras = function (cameras, unique) {\n        _super.prototype._attachCameras.call(this, cameras, unique);\n        for (var _i = 0, _a = this._cameras; _i < _a.length; _i++) {\n            var camera = _a[_i];\n            this._scene.enableDepthRenderer(camera).getDepthMap(); // Force depth renderer \"on\"\n        }\n    };\n    // Public Methods\n    /**\n     * Get the class name\n     * @returns \"SSAORenderingPipeline\"\n     */\n    SSAORenderingPipeline.prototype.getClassName = function () {\n        return \"SSAORenderingPipeline\";\n    };\n    /**\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\n     * @param disableDepthRender\n     */\n    SSAORenderingPipeline.prototype.dispose = function (disableDepthRender) {\n        if (disableDepthRender === void 0) { disableDepthRender = false; }\n        for (var i = 0; i < this._scene.cameras.length; i++) {\n            var camera = this._scene.cameras[i];\n            this._originalColorPostProcess.dispose(camera);\n            this._ssaoPostProcess.dispose(camera);\n            this._blurHPostProcess.dispose(camera);\n            this._blurVPostProcess.dispose(camera);\n            this._ssaoCombinePostProcess.dispose(camera);\n        }\n        this._randomTexture.dispose();\n        if (disableDepthRender) {\n            this._scene.disableDepthRenderer();\n        }\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n        _super.prototype.dispose.call(this);\n    };\n    // Private Methods\n    SSAORenderingPipeline.prototype._createBlurPostProcess = function (ratio) {\n        var _this = this;\n        var size = 16;\n        this._blurHPostProcess = new BlurPostProcess(\"BlurH\", new Vector2(1, 0), size, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, 0);\n        this._blurVPostProcess = new BlurPostProcess(\"BlurV\", new Vector2(0, 1), size, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, 0);\n        this._blurHPostProcess.onActivateObservable.add(function () {\n            var dw = _this._blurHPostProcess.width / _this._scene.getEngine().getRenderWidth();\n            _this._blurHPostProcess.kernel = size * dw;\n        });\n        this._blurVPostProcess.onActivateObservable.add(function () {\n            var dw = _this._blurVPostProcess.height / _this._scene.getEngine().getRenderHeight();\n            _this._blurVPostProcess.kernel = size * dw;\n        });\n    };\n    /** @hidden */\n    SSAORenderingPipeline.prototype._rebuild = function () {\n        this._firstUpdate = true;\n        _super.prototype._rebuild.call(this);\n    };\n    SSAORenderingPipeline.prototype._createSSAOPostProcess = function (ratio) {\n        var _this = this;\n        var numSamples = 16;\n        var sampleSphere = [\n            0.5381, 0.1856, -0.4319, 0.1379, 0.2486, 0.443, 0.3371, 0.5679, -0.0057, -0.6999, -0.0451, -0.0019, 0.0689, -0.1598, -0.8547, 0.056, 0.0069, -0.1843, -0.0146, 0.1402,\n            0.0762, 0.01, -0.1924, -0.0344, -0.3577, -0.5301, -0.4358, -0.3169, 0.1063, 0.0158, 0.0103, -0.5869, 0.0046, -0.0897, -0.494, 0.3287, 0.7119, -0.0154, -0.0918, -0.0533,\n            0.0596, -0.5411, 0.0352, -0.0631, 0.546, -0.4776, 0.2847, -0.0271,\n        ];\n        var samplesFactor = 1.0 / numSamples;\n        this._ssaoPostProcess = new PostProcess(\"ssao\", \"ssao\", [\"sampleSphere\", \"samplesFactor\", \"randTextureTiles\", \"totalStrength\", \"radius\", \"area\", \"fallOff\", \"base\", \"range\", \"viewport\"], [\"randomSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define SAMPLES \" + numSamples + \"\\n#define SSAO\");\n        this._ssaoPostProcess.externalTextureSamplerBinding = true;\n        this._ssaoPostProcess.onApply = function (effect) {\n            if (_this._firstUpdate) {\n                effect.setArray3(\"sampleSphere\", sampleSphere);\n                effect.setFloat(\"samplesFactor\", samplesFactor);\n                effect.setFloat(\"randTextureTiles\", 4.0);\n            }\n            effect.setFloat(\"totalStrength\", _this.totalStrength);\n            effect.setFloat(\"radius\", _this.radius);\n            effect.setFloat(\"area\", _this.area);\n            effect.setFloat(\"fallOff\", _this.fallOff);\n            effect.setFloat(\"base\", _this.base);\n            effect.setTexture(\"textureSampler\", _this._scene.enableDepthRenderer(_this._scene.activeCamera).getDepthMap());\n            effect.setTexture(\"randomSampler\", _this._randomTexture);\n        };\n    };\n    SSAORenderingPipeline.prototype._createSSAOCombinePostProcess = function (ratio) {\n        var _this = this;\n        this._ssaoCombinePostProcess = new PostProcess(\"ssaoCombine\", \"ssaoCombine\", [], [\"originalColor\", \"viewport\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n        this._ssaoCombinePostProcess.onApply = function (effect) {\n            effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(0, 0, 1.0, 1.0));\n            effect.setTextureFromPostProcess(\"originalColor\", _this._originalColorPostProcess);\n        };\n    };\n    SSAORenderingPipeline.prototype._createRandomTexture = function () {\n        var size = 512;\n        this._randomTexture = new DynamicTexture(\"SSAORandomTexture\", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);\n        this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;\n        this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;\n        var context = this._randomTexture.getContext();\n        var rand = function (min, max) {\n            return Math.random() * (max - min) + min;\n        };\n        var randVector = Vector3.Zero();\n        for (var x = 0; x < size; x++) {\n            for (var y = 0; y < size; y++) {\n                randVector.x = Math.floor(rand(-1.0, 1.0) * 255);\n                randVector.y = Math.floor(rand(-1.0, 1.0) * 255);\n                randVector.z = Math.floor(rand(-1.0, 1.0) * 255);\n                context.fillStyle = \"rgb(\" + randVector.x + \", \" + randVector.y + \", \" + randVector.z + \")\";\n                context.fillRect(x, y, 1, 1);\n            }\n        }\n        this._randomTexture.update(false);\n    };\n    __decorate([\n        serialize()\n    ], SSAORenderingPipeline.prototype, \"totalStrength\", void 0);\n    __decorate([\n        serialize()\n    ], SSAORenderingPipeline.prototype, \"radius\", void 0);\n    __decorate([\n        serialize()\n    ], SSAORenderingPipeline.prototype, \"area\", void 0);\n    __decorate([\n        serialize()\n    ], SSAORenderingPipeline.prototype, \"fallOff\", void 0);\n    __decorate([\n        serialize()\n    ], SSAORenderingPipeline.prototype, \"base\", void 0);\n    return SSAORenderingPipeline;\n}(PostProcessRenderPipeline));\nexport { SSAORenderingPipeline };\n//# sourceMappingURL=ssaoRenderingPipeline.js.map","import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport { GeometryBufferRenderer } from \"../Rendering/geometryBufferRenderer.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\nimport { ScreenSpaceReflectionsConfiguration } from \"../Rendering/screenSpaceReflectionsConfiguration.js\";\nimport \"../Shaders/screenSpaceReflection.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * The ScreenSpaceReflectionPostProcess performs realtime reflections using only and only the available informations on the screen (positions and normals).\n * Basically, the screen space reflection post-process will compute reflections according the material's reflectivity.\n */\nvar ScreenSpaceReflectionPostProcess = /** @class */ (function (_super) {\n    __extends(ScreenSpaceReflectionPostProcess, _super);\n    /**\n     * Creates a new instance of ScreenSpaceReflectionPostProcess.\n     * @param name The name of the effect.\n     * @param scene The scene containing the objects to calculate reflections.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: true)\n     * @param forceGeometryBuffer If this post process should use geometry buffer instead of prepass (default: false)\n     */\n    function ScreenSpaceReflectionPostProcess(name, scene, options, camera, samplingMode, engine, reusable, textureType, blockCompilation, forceGeometryBuffer) {\n        if (textureType === void 0) { textureType = 0; }\n        if (blockCompilation === void 0) { blockCompilation = false; }\n        if (forceGeometryBuffer === void 0) { forceGeometryBuffer = false; }\n        var _this = _super.call(this, name, \"screenSpaceReflection\", [\"projection\", \"view\", \"threshold\", \"reflectionSpecularFalloffExponent\", \"strength\", \"stepSize\", \"roughnessFactor\"], [\"textureSampler\", \"normalSampler\", \"positionSampler\", \"reflectivitySampler\"], options, camera, samplingMode, engine, reusable, \"#define SSR_SUPPORTED\\n#define REFLECTION_SAMPLES 64\\n#define SMOOTH_STEPS 5\\n\", textureType, undefined, null, blockCompilation) || this;\n        /**\n         * Gets or sets a reflection threshold mainly used to adjust the reflection's height.\n         */\n        _this.threshold = 1.2;\n        /**\n         * Gets or sets the current reflection strength. 1.0 is an ideal value but can be increased/decreased for particular results.\n         */\n        _this.strength = 1;\n        /**\n         * Gets or sets the falloff exponent used while computing fresnel. More the exponent is high, more the reflections will be discrete.\n         */\n        _this.reflectionSpecularFalloffExponent = 3;\n        /**\n         * Gets or sets the step size used to iterate until the effect finds the color of the reflection's pixel. Typically in interval [0.1, 1.0]\n         */\n        _this.step = 1.0;\n        /**\n         * Gets or sets the factor applied when computing roughness. Default value is 0.2.\n         */\n        _this.roughnessFactor = 0.2;\n        _this._forceGeometryBuffer = false;\n        _this._enableSmoothReflections = false;\n        _this._reflectionSamples = 64;\n        _this._smoothSteps = 5;\n        _this._forceGeometryBuffer = forceGeometryBuffer;\n        if (_this._forceGeometryBuffer) {\n            // Get geometry buffer renderer and update effect\n            var geometryBufferRenderer = scene.enableGeometryBufferRenderer();\n            if (geometryBufferRenderer) {\n                if (geometryBufferRenderer.isSupported) {\n                    geometryBufferRenderer.enablePosition = true;\n                    geometryBufferRenderer.enableReflectivity = true;\n                }\n            }\n        }\n        else {\n            var prePassRenderer = scene.enablePrePassRenderer();\n            prePassRenderer === null || prePassRenderer === void 0 ? void 0 : prePassRenderer.markAsDirty();\n            _this._prePassEffectConfiguration = new ScreenSpaceReflectionsConfiguration();\n        }\n        _this._updateEffectDefines();\n        // On apply, send uniforms\n        _this.onApply = function (effect) {\n            var geometryBufferRenderer = _this._geometryBufferRenderer;\n            var prePassRenderer = _this._prePassRenderer;\n            if (!prePassRenderer && !geometryBufferRenderer) {\n                return;\n            }\n            if (geometryBufferRenderer) {\n                // Samplers\n                var positionIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.POSITION_TEXTURE_TYPE);\n                var roughnessIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE);\n                effect.setTexture(\"normalSampler\", geometryBufferRenderer.getGBuffer().textures[1]);\n                effect.setTexture(\"positionSampler\", geometryBufferRenderer.getGBuffer().textures[positionIndex]);\n                effect.setTexture(\"reflectivitySampler\", geometryBufferRenderer.getGBuffer().textures[roughnessIndex]);\n            }\n            else if (prePassRenderer) {\n                // Samplers\n                var positionIndex = prePassRenderer.getIndex(1);\n                var roughnessIndex = prePassRenderer.getIndex(3);\n                var normalIndex = prePassRenderer.getIndex(6);\n                effect.setTexture(\"normalSampler\", prePassRenderer.getRenderTarget().textures[normalIndex]);\n                effect.setTexture(\"positionSampler\", prePassRenderer.getRenderTarget().textures[positionIndex]);\n                effect.setTexture(\"reflectivitySampler\", prePassRenderer.getRenderTarget().textures[roughnessIndex]);\n            }\n            // Uniforms\n            var camera = scene.activeCamera;\n            if (!camera) {\n                return;\n            }\n            var viewMatrix = camera.getViewMatrix(true);\n            var projectionMatrix = camera.getProjectionMatrix(true);\n            effect.setMatrix(\"projection\", projectionMatrix);\n            effect.setMatrix(\"view\", viewMatrix);\n            effect.setFloat(\"threshold\", _this.threshold);\n            effect.setFloat(\"reflectionSpecularFalloffExponent\", _this.reflectionSpecularFalloffExponent);\n            effect.setFloat(\"strength\", _this.strength);\n            effect.setFloat(\"stepSize\", _this.step);\n            effect.setFloat(\"roughnessFactor\", _this.roughnessFactor);\n        };\n        _this._isSceneRightHanded = scene.useRightHandedSystem;\n        return _this;\n    }\n    Object.defineProperty(ScreenSpaceReflectionPostProcess.prototype, \"_geometryBufferRenderer\", {\n        get: function () {\n            if (!this._forceGeometryBuffer) {\n                return null;\n            }\n            return this._scene.geometryBufferRenderer;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ScreenSpaceReflectionPostProcess.prototype, \"_prePassRenderer\", {\n        get: function () {\n            if (this._forceGeometryBuffer) {\n                return null;\n            }\n            return this._scene.prePassRenderer;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"ScreenSpaceReflectionPostProcess\" string\n     */\n    ScreenSpaceReflectionPostProcess.prototype.getClassName = function () {\n        return \"ScreenSpaceReflectionPostProcess\";\n    };\n    Object.defineProperty(ScreenSpaceReflectionPostProcess.prototype, \"enableSmoothReflections\", {\n        /**\n         * Gets whether or not smoothing reflections is enabled.\n         * Enabling smoothing will require more GPU power and can generate a drop in FPS.\n         */\n        get: function () {\n            return this._enableSmoothReflections;\n        },\n        /**\n         * Sets whether or not smoothing reflections is enabled.\n         * Enabling smoothing will require more GPU power and can generate a drop in FPS.\n         */\n        set: function (enabled) {\n            if (enabled === this._enableSmoothReflections) {\n                return;\n            }\n            this._enableSmoothReflections = enabled;\n            this._updateEffectDefines();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ScreenSpaceReflectionPostProcess.prototype, \"reflectionSamples\", {\n        /**\n         * Gets the number of samples taken while computing reflections. More samples count is high,\n         * more the post-process wil require GPU power and can generate a drop in FPS. Basically in interval [25, 100].\n         */\n        get: function () {\n            return this._reflectionSamples;\n        },\n        /**\n         * Sets the number of samples taken while computing reflections. More samples count is high,\n         * more the post-process wil require GPU power and can generate a drop in FPS. Basically in interval [25, 100].\n         */\n        set: function (samples) {\n            if (samples === this._reflectionSamples) {\n                return;\n            }\n            this._reflectionSamples = samples;\n            this._updateEffectDefines();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ScreenSpaceReflectionPostProcess.prototype, \"smoothSteps\", {\n        /**\n         * Gets the number of samples taken while smoothing reflections. More samples count is high,\n         * more the post-process will require GPU power and can generate a drop in FPS.\n         * Default value (5.0) work pretty well in all cases but can be adjusted.\n         */\n        get: function () {\n            return this._smoothSteps;\n        },\n        /*\n         * Sets the number of samples taken while smoothing reflections. More samples count is high,\n         * more the post-process will require GPU power and can generate a drop in FPS.\n         * Default value (5.0) work pretty well in all cases but can be adjusted.\n         */\n        set: function (steps) {\n            if (steps === this._smoothSteps) {\n                return;\n            }\n            this._smoothSteps = steps;\n            this._updateEffectDefines();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ScreenSpaceReflectionPostProcess.prototype._updateEffectDefines = function () {\n        var defines = [];\n        if (this._geometryBufferRenderer || this._prePassRenderer) {\n            defines.push(\"#define SSR_SUPPORTED\");\n        }\n        if (this._enableSmoothReflections) {\n            defines.push(\"#define ENABLE_SMOOTH_REFLECTIONS\");\n        }\n        if (this._isSceneRightHanded) {\n            defines.push(\"#define RIGHT_HANDED_SCENE\");\n        }\n        defines.push(\"#define REFLECTION_SAMPLES \" + (this._reflectionSamples >> 0));\n        defines.push(\"#define SMOOTH_STEPS \" + (this._smoothSteps >> 0));\n        this.updateEffect(defines.join(\"\\n\"));\n    };\n    /**\n     * @param parsedPostProcess\n     * @param targetCamera\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    ScreenSpaceReflectionPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(function () {\n            return new ScreenSpaceReflectionPostProcess(parsedPostProcess.name, scene, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.textureType, parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    };\n    __decorate([\n        serialize()\n    ], ScreenSpaceReflectionPostProcess.prototype, \"threshold\", void 0);\n    __decorate([\n        serialize()\n    ], ScreenSpaceReflectionPostProcess.prototype, \"strength\", void 0);\n    __decorate([\n        serialize()\n    ], ScreenSpaceReflectionPostProcess.prototype, \"reflectionSpecularFalloffExponent\", void 0);\n    __decorate([\n        serialize()\n    ], ScreenSpaceReflectionPostProcess.prototype, \"step\", void 0);\n    __decorate([\n        serialize()\n    ], ScreenSpaceReflectionPostProcess.prototype, \"roughnessFactor\", void 0);\n    __decorate([\n        serialize()\n    ], ScreenSpaceReflectionPostProcess.prototype, \"enableSmoothReflections\", null);\n    __decorate([\n        serialize()\n    ], ScreenSpaceReflectionPostProcess.prototype, \"reflectionSamples\", null);\n    __decorate([\n        serialize()\n    ], ScreenSpaceReflectionPostProcess.prototype, \"smoothSteps\", null);\n    return ScreenSpaceReflectionPostProcess;\n}(PostProcess));\nexport { ScreenSpaceReflectionPostProcess };\nRegisterClass(\"BABYLON.ScreenSpaceReflectionPostProcess\", ScreenSpaceReflectionPostProcess);\n//# sourceMappingURL=screenSpaceReflectionPostProcess.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize, serializeAsTexture, SerializationHelper } from \"../../../Misc/decorators.js\";\nimport { Logger } from \"../../../Misc/logger.js\";\nimport { Vector2, Vector3, Matrix, Vector4 } from \"../../../Maths/math.vector.js\";\nimport { Scalar } from \"../../../Maths/math.scalar.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess.js\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { BlurPostProcess } from \"../../../PostProcesses/blurPostProcess.js\";\nimport { FxaaPostProcess } from \"../../../PostProcesses/fxaaPostProcess.js\";\n\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { MotionBlurPostProcess } from \"../../motionBlurPostProcess.js\";\nimport { ScreenSpaceReflectionPostProcess } from \"../../screenSpaceReflectionPostProcess.js\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js\";\nimport \"../../../Shaders/standard.fragment.js\";\n/**\n * Standard rendering pipeline\n * Default pipeline should be used going forward but the standard pipeline will be kept for backwards compatibility.\n * @see https://doc.babylonjs.com/how_to/using_standard_rendering_pipeline\n */\nvar StandardRenderingPipeline = /** @class */ (function (_super) {\n    __extends(StandardRenderingPipeline, _super);\n    /**\n     * Default pipeline should be used going forward but the standard pipeline will be kept for backwards compatibility.\n     * @constructor\n     * @param name The rendering pipeline name\n     * @param scene The scene linked to this pipeline\n     * @param ratio The size of the postprocesses (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)\n     * @param originalPostProcess the custom original color post-process. Must be \"reusable\". Can be null.\n     * @param cameras The array of cameras that the rendering pipeline will be attached to\n     */\n    function StandardRenderingPipeline(name, scene, ratio, originalPostProcess, cameras) {\n        if (originalPostProcess === void 0) { originalPostProcess = null; }\n        var _this = _super.call(this, scene.getEngine(), name) || this;\n        /**\n         * Post-process used to down scale an image x4\n         */\n        _this.downSampleX4PostProcess = null;\n        /**\n         * Post-process used to calculate the illuminated surfaces controlled by a threshold\n         */\n        _this.brightPassPostProcess = null;\n        /**\n         * Post-process array storing all the horizontal blur post-processes used by the pipeline\n         */\n        _this.blurHPostProcesses = [];\n        /**\n         * Post-process array storing all the vertical blur post-processes used by the pipeline\n         */\n        _this.blurVPostProcesses = [];\n        /**\n         * Post-process used to add colors of 2 textures (typically brightness + real scene color)\n         */\n        _this.textureAdderPostProcess = null;\n        /**\n         * Post-process used to create volumetric lighting effect\n         */\n        _this.volumetricLightPostProcess = null;\n        /**\n         * Post-process used to smooth the previous volumetric light post-process on the X axis\n         */\n        _this.volumetricLightSmoothXPostProcess = null;\n        /**\n         * Post-process used to smooth the previous volumetric light post-process on the Y axis\n         */\n        _this.volumetricLightSmoothYPostProcess = null;\n        /**\n         * Post-process used to merge the volumetric light effect and the real scene color\n         */\n        _this.volumetricLightMergePostProces = null;\n        /**\n         * Post-process used to store the final volumetric light post-process (attach/detach for debug purpose)\n         */\n        _this.volumetricLightFinalPostProcess = null;\n        /**\n         * Base post-process used to calculate the average luminance of the final image for HDR\n         */\n        _this.luminancePostProcess = null;\n        /**\n         * Post-processes used to create down sample post-processes in order to get\n         * the average luminance of the final image for HDR\n         * Array of length \"StandardRenderingPipeline.LuminanceSteps\"\n         */\n        _this.luminanceDownSamplePostProcesses = [];\n        /**\n         * Post-process used to create a HDR effect (light adaptation)\n         */\n        _this.hdrPostProcess = null;\n        /**\n         * Post-process used to store the final texture adder post-process (attach/detach for debug purpose)\n         */\n        _this.textureAdderFinalPostProcess = null;\n        /**\n         * Post-process used to store the final lens flare post-process (attach/detach for debug purpose)\n         */\n        _this.lensFlareFinalPostProcess = null;\n        /**\n         * Post-process used to merge the final HDR post-process and the real scene color\n         */\n        _this.hdrFinalPostProcess = null;\n        /**\n         * Post-process used to create a lens flare effect\n         */\n        _this.lensFlarePostProcess = null;\n        /**\n         * Post-process that merges the result of the lens flare post-process and the real scene color\n         */\n        _this.lensFlareComposePostProcess = null;\n        /**\n         * Post-process used to create a motion blur effect\n         */\n        _this.motionBlurPostProcess = null;\n        /**\n         * Post-process used to create a depth of field effect\n         */\n        _this.depthOfFieldPostProcess = null;\n        /**\n         * The Fast Approximate Anti-Aliasing post process which attempts to remove aliasing from an image.\n         */\n        _this.fxaaPostProcess = null;\n        /**\n         * Post-process used to simulate realtime reflections using the screen space and geometry renderer.\n         */\n        _this.screenSpaceReflectionPostProcess = null;\n        // Values\n        /**\n         * Represents the brightness threshold in order to configure the illuminated surfaces\n         */\n        _this.brightThreshold = 1.0;\n        /**\n         * Configures the blur intensity used for surexposed surfaces are highlighted surfaces (light halo)\n         */\n        _this.blurWidth = 512.0;\n        /**\n         * Sets if the blur for highlighted surfaces must be only horizontal\n         */\n        _this.horizontalBlur = false;\n        /**\n         * Texture used typically to simulate \"dirty\" on camera lens\n         */\n        _this.lensTexture = null;\n        /**\n         * Represents the offset coefficient based on Rayleigh principle. Typically in interval [-0.2, 0.2]\n         */\n        _this.volumetricLightCoefficient = 0.2;\n        /**\n         * The overall power of volumetric lights, typically in interval [0, 10] maximum\n         */\n        _this.volumetricLightPower = 4.0;\n        /**\n         * Used the set the blur intensity to smooth the volumetric lights\n         */\n        _this.volumetricLightBlurScale = 64.0;\n        /**\n         * Light (spot or directional) used to generate the volumetric lights rays\n         * The source light must have a shadow generate so the pipeline can get its\n         * depth map\n         */\n        _this.sourceLight = null;\n        /**\n         * For eye adaptation, represents the minimum luminance the eye can see\n         */\n        _this.hdrMinimumLuminance = 1.0;\n        /**\n         * For eye adaptation, represents the decrease luminance speed\n         */\n        _this.hdrDecreaseRate = 0.5;\n        /**\n         * For eye adaptation, represents the increase luminance speed\n         */\n        _this.hdrIncreaseRate = 0.5;\n        /**\n         * Lens color texture used by the lens flare effect. Mandatory if lens flare effect enabled\n         */\n        _this.lensColorTexture = null;\n        /**\n         * The overall strength for the lens flare effect\n         */\n        _this.lensFlareStrength = 20.0;\n        /**\n         * Dispersion coefficient for lens flare ghosts\n         */\n        _this.lensFlareGhostDispersal = 1.4;\n        /**\n         * Main lens flare halo width\n         */\n        _this.lensFlareHaloWidth = 0.7;\n        /**\n         * Based on the lens distortion effect, defines how much the lens flare result\n         * is distorted\n         */\n        _this.lensFlareDistortionStrength = 16.0;\n        /**\n         * Configures the blur intensity used for for lens flare (halo)\n         */\n        _this.lensFlareBlurWidth = 512.0;\n        /**\n         * Lens star texture must be used to simulate rays on the flares and is available\n         * in the documentation\n         */\n        _this.lensStarTexture = null;\n        /**\n         * As the \"lensTexture\" (can be the same texture or different), it is used to apply the lens\n         * flare effect by taking account of the dirt texture\n         */\n        _this.lensFlareDirtTexture = null;\n        /**\n         * Represents the focal length for the depth of field effect\n         */\n        _this.depthOfFieldDistance = 10.0;\n        /**\n         * Represents the blur intensity for the blurred part of the depth of field effect\n         */\n        _this.depthOfFieldBlurWidth = 64.0;\n        /**\n         * List of animations for the pipeline (IAnimatable implementation)\n         */\n        _this.animations = [];\n        _this._currentDepthOfFieldSource = null;\n        _this._fixedExposure = 1.0;\n        _this._currentExposure = 1.0;\n        _this._hdrAutoExposure = false;\n        _this._hdrCurrentLuminance = 1.0;\n        _this._motionStrength = 1.0;\n        _this._isObjectBasedMotionBlur = false;\n        _this._camerasToBeAttached = [];\n        // Getters and setters\n        _this._bloomEnabled = false;\n        _this._depthOfFieldEnabled = false;\n        _this._vlsEnabled = false;\n        _this._lensFlareEnabled = false;\n        _this._hdrEnabled = false;\n        _this._motionBlurEnabled = false;\n        _this._fxaaEnabled = false;\n        _this._screenSpaceReflectionsEnabled = false;\n        _this._motionBlurSamples = 64.0;\n        _this._volumetricLightStepsCount = 50.0;\n        _this._samples = 1;\n        _this._cameras = cameras || scene.cameras;\n        _this._cameras = _this._cameras.slice();\n        _this._camerasToBeAttached = _this._cameras.slice();\n        // Initialize\n        _this._scene = scene;\n        _this._basePostProcess = originalPostProcess;\n        _this._ratio = ratio;\n        // Misc\n        _this._floatTextureType = scene.getEngine().getCaps().textureFloatRender ? 1 : 2;\n        // Finish\n        scene.postProcessRenderPipelineManager.addPipeline(_this);\n        _this._buildPipeline();\n        return _this;\n    }\n    Object.defineProperty(StandardRenderingPipeline.prototype, \"exposure\", {\n        /**\n         * Gets the overall exposure used by the pipeline\n         */\n        get: function () {\n            return this._fixedExposure;\n        },\n        /**\n         * Sets the overall exposure used by the pipeline\n         */\n        set: function (value) {\n            this._fixedExposure = value;\n            this._currentExposure = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardRenderingPipeline.prototype, \"hdrAutoExposure\", {\n        /**\n         * Gets whether or not the exposure of the overall pipeline should be automatically adjusted by the HDR post-process\n         */\n        get: function () {\n            return this._hdrAutoExposure;\n        },\n        /**\n         * Sets whether or not the exposure of the overall pipeline should be automatically adjusted by the HDR post-process\n         */\n        set: function (value) {\n            this._hdrAutoExposure = value;\n            if (this.hdrPostProcess) {\n                var defines = [\"#define HDR\"];\n                if (value) {\n                    defines.push(\"#define AUTO_EXPOSURE\");\n                }\n                this.hdrPostProcess.updateEffect(defines.join(\"\\n\"));\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardRenderingPipeline.prototype, \"motionStrength\", {\n        /**\n         * Gets how much the image is blurred by the movement while using the motion blur post-process\n         */\n        get: function () {\n            return this._motionStrength;\n        },\n        /**\n         * Sets how much the image is blurred by the movement while using the motion blur post-process\n         */\n        set: function (strength) {\n            this._motionStrength = strength;\n            if (this._isObjectBasedMotionBlur && this.motionBlurPostProcess) {\n                this.motionBlurPostProcess.motionStrength = strength;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardRenderingPipeline.prototype, \"objectBasedMotionBlur\", {\n        /**\n         * Gets whether or not the motion blur post-process is object based or screen based.\n         */\n        get: function () {\n            return this._isObjectBasedMotionBlur;\n        },\n        /**\n         * Sets whether or not the motion blur post-process should be object based or screen based\n         */\n        set: function (value) {\n            var shouldRebuild = this._isObjectBasedMotionBlur !== value;\n            this._isObjectBasedMotionBlur = value;\n            if (shouldRebuild) {\n                this._buildPipeline();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardRenderingPipeline.prototype, \"BloomEnabled\", {\n        /**\n         * @ignore\n         * Specifies if the bloom pipeline is enabled\n         */\n        get: function () {\n            return this._bloomEnabled;\n        },\n        set: function (enabled) {\n            if (this._bloomEnabled === enabled) {\n                return;\n            }\n            this._bloomEnabled = enabled;\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardRenderingPipeline.prototype, \"DepthOfFieldEnabled\", {\n        /**\n         * @ignore\n         * Specifies if the depth of field pipeline is enabled\n         */\n        get: function () {\n            return this._depthOfFieldEnabled;\n        },\n        set: function (enabled) {\n            if (this._depthOfFieldEnabled === enabled) {\n                return;\n            }\n            this._depthOfFieldEnabled = enabled;\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardRenderingPipeline.prototype, \"LensFlareEnabled\", {\n        /**\n         * @ignore\n         * Specifies if the lens flare pipeline is enabled\n         */\n        get: function () {\n            return this._lensFlareEnabled;\n        },\n        set: function (enabled) {\n            if (this._lensFlareEnabled === enabled) {\n                return;\n            }\n            this._lensFlareEnabled = enabled;\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardRenderingPipeline.prototype, \"HDREnabled\", {\n        /**\n         * @ignore\n         * Specifies if the HDR pipeline is enabled\n         */\n        get: function () {\n            return this._hdrEnabled;\n        },\n        set: function (enabled) {\n            if (this._hdrEnabled === enabled) {\n                return;\n            }\n            this._hdrEnabled = enabled;\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardRenderingPipeline.prototype, \"VLSEnabled\", {\n        /**\n         * @ignore\n         * Specifies if the volumetric lights scattering effect is enabled\n         */\n        get: function () {\n            return this._vlsEnabled;\n        },\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        set: function (enabled) {\n            if (this._vlsEnabled === enabled) {\n                return;\n            }\n            if (enabled) {\n                var geometry = this._scene.enableGeometryBufferRenderer();\n                if (!geometry) {\n                    Logger.Warn(\"Geometry renderer is not supported, cannot create volumetric lights in Standard Rendering Pipeline\");\n                    return;\n                }\n            }\n            this._vlsEnabled = enabled;\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardRenderingPipeline.prototype, \"MotionBlurEnabled\", {\n        /**\n         * @ignore\n         * Specifies if the motion blur effect is enabled\n         */\n        get: function () {\n            return this._motionBlurEnabled;\n        },\n        set: function (enabled) {\n            if (this._motionBlurEnabled === enabled) {\n                return;\n            }\n            this._motionBlurEnabled = enabled;\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardRenderingPipeline.prototype, \"fxaaEnabled\", {\n        /**\n         * Specifies if anti-aliasing is enabled\n         */\n        get: function () {\n            return this._fxaaEnabled;\n        },\n        set: function (enabled) {\n            if (this._fxaaEnabled === enabled) {\n                return;\n            }\n            this._fxaaEnabled = enabled;\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardRenderingPipeline.prototype, \"screenSpaceReflectionsEnabled\", {\n        /**\n         * Specifies if screen space reflections are enabled.\n         */\n        get: function () {\n            return this._screenSpaceReflectionsEnabled;\n        },\n        set: function (enabled) {\n            if (this._screenSpaceReflectionsEnabled === enabled) {\n                return;\n            }\n            this._screenSpaceReflectionsEnabled = enabled;\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardRenderingPipeline.prototype, \"volumetricLightStepsCount\", {\n        /**\n         * Specifies the number of steps used to calculate the volumetric lights\n         * Typically in interval [50, 200]\n         */\n        get: function () {\n            return this._volumetricLightStepsCount;\n        },\n        set: function (count) {\n            if (this.volumetricLightPostProcess) {\n                this.volumetricLightPostProcess.updateEffect(\"#define VLS\\n#define NB_STEPS \" + count.toFixed(1));\n            }\n            this._volumetricLightStepsCount = count;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardRenderingPipeline.prototype, \"motionBlurSamples\", {\n        /**\n         * Specifies the number of samples used for the motion blur effect\n         * Typically in interval [16, 64]\n         */\n        get: function () {\n            return this._motionBlurSamples;\n        },\n        set: function (samples) {\n            if (this.motionBlurPostProcess) {\n                if (this._isObjectBasedMotionBlur) {\n                    this.motionBlurPostProcess.motionBlurSamples = samples;\n                }\n                else {\n                    this.motionBlurPostProcess.updateEffect(\"#define MOTION_BLUR\\n#define MAX_MOTION_SAMPLES \" + samples.toFixed(1));\n                }\n            }\n            this._motionBlurSamples = samples;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StandardRenderingPipeline.prototype, \"samples\", {\n        /**\n         * Specifies MSAA sample count, setting this to 4 will provide 4x anti aliasing. (default: 1)\n         */\n        get: function () {\n            return this._samples;\n        },\n        set: function (sampleCount) {\n            if (this._samples === sampleCount) {\n                return;\n            }\n            this._samples = sampleCount;\n            this._buildPipeline();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StandardRenderingPipeline.prototype._buildPipeline = function () {\n        var _this = this;\n        var ratio = this._ratio;\n        var scene = this._scene;\n        this._disposePostProcesses();\n        if (this._cameras !== null) {\n            this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\n            // get back cameras to be used to reattach pipeline\n            this._cameras = this._camerasToBeAttached.slice();\n        }\n        this._reset();\n        // Create pass post-process\n        if (this._screenSpaceReflectionsEnabled) {\n            this.screenSpaceReflectionPostProcess = new ScreenSpaceReflectionPostProcess(\"HDRPass\", scene, ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, this._floatTextureType);\n            this.screenSpaceReflectionPostProcess.onApplyObservable.add(function () {\n                _this._currentDepthOfFieldSource = _this.screenSpaceReflectionPostProcess;\n            });\n            this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRScreenSpaceReflections\", function () { return _this.screenSpaceReflectionPostProcess; }, true));\n        }\n        if (!this._basePostProcess) {\n            this.originalPostProcess = new PostProcess(\"HDRPass\", \"standard\", [], [], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define PASS_POST_PROCESS\", this._floatTextureType);\n        }\n        else {\n            this.originalPostProcess = this._basePostProcess;\n        }\n        this.originalPostProcess.autoClear = !this.screenSpaceReflectionPostProcess;\n        this.originalPostProcess.onApplyObservable.add(function () {\n            _this._currentDepthOfFieldSource = _this.originalPostProcess;\n        });\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRPassPostProcess\", function () { return _this.originalPostProcess; }, true));\n        if (this._bloomEnabled) {\n            // Create down sample X4 post-process\n            this._createDownSampleX4PostProcess(scene, ratio / 4);\n            // Create bright pass post-process\n            this._createBrightPassPostProcess(scene, ratio / 4);\n            // Create gaussian blur post-processes (down sampling blurs)\n            this._createBlurPostProcesses(scene, ratio / 4, 1);\n            // Create texture adder post-process\n            this._createTextureAdderPostProcess(scene, ratio);\n            // Create depth-of-field source post-process\n            this.textureAdderFinalPostProcess = new PostProcess(\"HDRDepthOfFieldSource\", \"standard\", [], [], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define PASS_POST_PROCESS\", 0);\n            this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRBaseDepthOfFieldSource\", function () {\n                return _this.textureAdderFinalPostProcess;\n            }, true));\n        }\n        if (this._vlsEnabled) {\n            // Create volumetric light\n            this._createVolumetricLightPostProcess(scene, ratio);\n            // Create volumetric light final post-process\n            this.volumetricLightFinalPostProcess = new PostProcess(\"HDRVLSFinal\", \"standard\", [], [], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define PASS_POST_PROCESS\", 0);\n            this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRVLSFinal\", function () {\n                return _this.volumetricLightFinalPostProcess;\n            }, true));\n        }\n        if (this._lensFlareEnabled) {\n            // Create lens flare post-process\n            this._createLensFlarePostProcess(scene, ratio);\n            // Create depth-of-field source post-process post lens-flare and disable it now\n            this.lensFlareFinalPostProcess = new PostProcess(\"HDRPostLensFlareDepthOfFieldSource\", \"standard\", [], [], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define PASS_POST_PROCESS\", 0);\n            this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRPostLensFlareDepthOfFieldSource\", function () {\n                return _this.lensFlareFinalPostProcess;\n            }, true));\n        }\n        if (this._hdrEnabled) {\n            // Create luminance\n            this._createLuminancePostProcesses(scene, this._floatTextureType);\n            // Create HDR\n            this._createHdrPostProcess(scene, ratio);\n            // Create depth-of-field source post-process post hdr and disable it now\n            this.hdrFinalPostProcess = new PostProcess(\"HDRPostHDReDepthOfFieldSource\", \"standard\", [], [], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define PASS_POST_PROCESS\", 0);\n            this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRPostHDReDepthOfFieldSource\", function () {\n                return _this.hdrFinalPostProcess;\n            }, true));\n        }\n        if (this._depthOfFieldEnabled) {\n            // Create gaussian blur used by depth-of-field\n            this._createBlurPostProcesses(scene, ratio / 2, 3, \"depthOfFieldBlurWidth\");\n            // Create depth-of-field post-process\n            this._createDepthOfFieldPostProcess(scene, ratio);\n        }\n        if (this._motionBlurEnabled) {\n            // Create motion blur post-process\n            this._createMotionBlurPostProcess(scene, ratio);\n        }\n        if (this._fxaaEnabled) {\n            // Create fxaa post-process\n            this.fxaaPostProcess = new FxaaPostProcess(\"fxaa\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, 0);\n            this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRFxaa\", function () {\n                return _this.fxaaPostProcess;\n            }, true));\n        }\n        if (this._cameras !== null) {\n            this._scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(this._name, this._cameras);\n        }\n        if (!this._enableMSAAOnFirstPostProcess(this._samples) && this._samples > 1) {\n            Logger.Warn(\"MSAA failed to enable, MSAA is only supported in browsers that support webGL >= 2.0\");\n        }\n    };\n    // Down Sample X4 Post-Process\n    StandardRenderingPipeline.prototype._createDownSampleX4PostProcess = function (scene, ratio) {\n        var _this = this;\n        var downSampleX4Offsets = new Array(32);\n        this.downSampleX4PostProcess = new PostProcess(\"HDRDownSampleX4\", \"standard\", [\"dsOffsets\"], [], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define DOWN_SAMPLE_X4\", this._floatTextureType);\n        this.downSampleX4PostProcess.onApply = function (effect) {\n            var id = 0;\n            var width = _this.downSampleX4PostProcess.width;\n            var height = _this.downSampleX4PostProcess.height;\n            for (var i = -2; i < 2; i++) {\n                for (var j = -2; j < 2; j++) {\n                    downSampleX4Offsets[id] = (i + 0.5) * (1.0 / width);\n                    downSampleX4Offsets[id + 1] = (j + 0.5) * (1.0 / height);\n                    id += 2;\n                }\n            }\n            effect.setArray2(\"dsOffsets\", downSampleX4Offsets);\n        };\n        // Add to pipeline\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRDownSampleX4\", function () {\n            return _this.downSampleX4PostProcess;\n        }, true));\n    };\n    // Brightpass Post-Process\n    StandardRenderingPipeline.prototype._createBrightPassPostProcess = function (scene, ratio) {\n        var _this = this;\n        var brightOffsets = new Array(8);\n        this.brightPassPostProcess = new PostProcess(\"HDRBrightPass\", \"standard\", [\"dsOffsets\", \"brightThreshold\"], [], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define BRIGHT_PASS\", this._floatTextureType);\n        this.brightPassPostProcess.onApply = function (effect) {\n            var sU = 1.0 / _this.brightPassPostProcess.width;\n            var sV = 1.0 / _this.brightPassPostProcess.height;\n            brightOffsets[0] = -0.5 * sU;\n            brightOffsets[1] = 0.5 * sV;\n            brightOffsets[2] = 0.5 * sU;\n            brightOffsets[3] = 0.5 * sV;\n            brightOffsets[4] = -0.5 * sU;\n            brightOffsets[5] = -0.5 * sV;\n            brightOffsets[6] = 0.5 * sU;\n            brightOffsets[7] = -0.5 * sV;\n            effect.setArray2(\"dsOffsets\", brightOffsets);\n            effect.setFloat(\"brightThreshold\", _this.brightThreshold);\n        };\n        // Add to pipeline\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRBrightPass\", function () {\n            return _this.brightPassPostProcess;\n        }, true));\n    };\n    // Create blur H&V post-processes\n    StandardRenderingPipeline.prototype._createBlurPostProcesses = function (scene, ratio, indice, blurWidthKey) {\n        var _this = this;\n        if (blurWidthKey === void 0) { blurWidthKey = \"blurWidth\"; }\n        var engine = scene.getEngine();\n        var blurX = new BlurPostProcess(\"HDRBlurH\" + \"_\" + indice, new Vector2(1, 0), this[blurWidthKey], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, this._floatTextureType);\n        var blurY = new BlurPostProcess(\"HDRBlurV\" + \"_\" + indice, new Vector2(0, 1), this[blurWidthKey], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, this._floatTextureType);\n        blurX.onActivateObservable.add(function () {\n            var dw = blurX.width / engine.getRenderWidth();\n            blurX.kernel = _this[blurWidthKey] * dw;\n        });\n        blurY.onActivateObservable.add(function () {\n            var dw = blurY.height / engine.getRenderHeight();\n            blurY.kernel = _this.horizontalBlur ? 64 * dw : _this[blurWidthKey] * dw;\n        });\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRBlurH\" + indice, function () {\n            return blurX;\n        }, true));\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRBlurV\" + indice, function () {\n            return blurY;\n        }, true));\n        this.blurHPostProcesses.push(blurX);\n        this.blurVPostProcesses.push(blurY);\n    };\n    // Create texture adder post-process\n    StandardRenderingPipeline.prototype._createTextureAdderPostProcess = function (scene, ratio) {\n        var _this = this;\n        this.textureAdderPostProcess = new PostProcess(\"HDRTextureAdder\", \"standard\", [\"exposure\"], [\"otherSampler\", \"lensSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define TEXTURE_ADDER\", this._floatTextureType);\n        this.textureAdderPostProcess.onApply = function (effect) {\n            effect.setTextureFromPostProcess(\"otherSampler\", _this._vlsEnabled ? _this._currentDepthOfFieldSource : _this.originalPostProcess);\n            effect.setTexture(\"lensSampler\", _this.lensTexture);\n            effect.setFloat(\"exposure\", _this._currentExposure);\n            _this._currentDepthOfFieldSource = _this.textureAdderFinalPostProcess;\n        };\n        // Add to pipeline\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRTextureAdder\", function () {\n            return _this.textureAdderPostProcess;\n        }, true));\n    };\n    StandardRenderingPipeline.prototype._createVolumetricLightPostProcess = function (scene, ratio) {\n        var _this = this;\n        var geometryRenderer = scene.enableGeometryBufferRenderer();\n        geometryRenderer.enablePosition = true;\n        var geometry = geometryRenderer.getGBuffer();\n        // Base post-process\n        this.volumetricLightPostProcess = new PostProcess(\"HDRVLS\", \"standard\", [\"shadowViewProjection\", \"cameraPosition\", \"sunDirection\", \"sunColor\", \"scatteringCoefficient\", \"scatteringPower\", \"depthValues\"], [\"shadowMapSampler\", \"positionSampler\"], ratio / 8, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define VLS\\n#define NB_STEPS \" + this._volumetricLightStepsCount.toFixed(1));\n        var depthValues = Vector2.Zero();\n        this.volumetricLightPostProcess.onApply = function (effect) {\n            if (_this.sourceLight && _this.sourceLight.getShadowGenerator() && _this._scene.activeCamera) {\n                var generator = _this.sourceLight.getShadowGenerator();\n                effect.setTexture(\"shadowMapSampler\", generator.getShadowMap());\n                effect.setTexture(\"positionSampler\", geometry.textures[2]);\n                effect.setColor3(\"sunColor\", _this.sourceLight.diffuse);\n                effect.setVector3(\"sunDirection\", _this.sourceLight.getShadowDirection());\n                effect.setVector3(\"cameraPosition\", _this._scene.activeCamera.globalPosition);\n                effect.setMatrix(\"shadowViewProjection\", generator.getTransformMatrix());\n                effect.setFloat(\"scatteringCoefficient\", _this.volumetricLightCoefficient);\n                effect.setFloat(\"scatteringPower\", _this.volumetricLightPower);\n                depthValues.x = _this.sourceLight.getDepthMinZ(_this._scene.activeCamera);\n                depthValues.y = _this.sourceLight.getDepthMaxZ(_this._scene.activeCamera);\n                effect.setVector2(\"depthValues\", depthValues);\n            }\n        };\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRVLS\", function () {\n            return _this.volumetricLightPostProcess;\n        }, true));\n        // Smooth\n        this._createBlurPostProcesses(scene, ratio / 4, 0, \"volumetricLightBlurScale\");\n        // Merge\n        this.volumetricLightMergePostProces = new PostProcess(\"HDRVLSMerge\", \"standard\", [], [\"originalSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define VLSMERGE\");\n        this.volumetricLightMergePostProces.onApply = function (effect) {\n            effect.setTextureFromPostProcess(\"originalSampler\", _this._bloomEnabled ? _this.textureAdderFinalPostProcess : _this.originalPostProcess);\n            _this._currentDepthOfFieldSource = _this.volumetricLightFinalPostProcess;\n        };\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRVLSMerge\", function () {\n            return _this.volumetricLightMergePostProces;\n        }, true));\n    };\n    // Create luminance\n    StandardRenderingPipeline.prototype._createLuminancePostProcesses = function (scene, textureType) {\n        var _this = this;\n        // Create luminance\n        var size = Math.pow(3, StandardRenderingPipeline.LuminanceSteps);\n        this.luminancePostProcess = new PostProcess(\"HDRLuminance\", \"standard\", [\"lumOffsets\"], [], { width: size, height: size }, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define LUMINANCE\", textureType);\n        var offsets = [];\n        this.luminancePostProcess.onApply = function (effect) {\n            var sU = 1.0 / _this.luminancePostProcess.width;\n            var sV = 1.0 / _this.luminancePostProcess.height;\n            offsets[0] = -0.5 * sU;\n            offsets[1] = 0.5 * sV;\n            offsets[2] = 0.5 * sU;\n            offsets[3] = 0.5 * sV;\n            offsets[4] = -0.5 * sU;\n            offsets[5] = -0.5 * sV;\n            offsets[6] = 0.5 * sU;\n            offsets[7] = -0.5 * sV;\n            effect.setArray2(\"lumOffsets\", offsets);\n        };\n        // Add to pipeline\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRLuminance\", function () {\n            return _this.luminancePostProcess;\n        }, true));\n        // Create down sample luminance\n        for (var i = StandardRenderingPipeline.LuminanceSteps - 1; i >= 0; i--) {\n            size = Math.pow(3, i);\n            var defines = \"#define LUMINANCE_DOWN_SAMPLE\\n\";\n            if (i === 0) {\n                defines += \"#define FINAL_DOWN_SAMPLER\";\n            }\n            var postProcess = new PostProcess(\"HDRLuminanceDownSample\" + i, \"standard\", [\"dsOffsets\", \"halfDestPixelSize\"], [], { width: size, height: size }, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, defines, textureType);\n            this.luminanceDownSamplePostProcesses.push(postProcess);\n        }\n        // Create callbacks and add effects\n        var lastLuminance = this.luminancePostProcess;\n        this.luminanceDownSamplePostProcesses.forEach(function (pp, index) {\n            var downSampleOffsets = new Array(18);\n            pp.onApply = function (effect) {\n                if (!lastLuminance) {\n                    return;\n                }\n                var id = 0;\n                for (var x = -1; x < 2; x++) {\n                    for (var y = -1; y < 2; y++) {\n                        downSampleOffsets[id] = x / lastLuminance.width;\n                        downSampleOffsets[id + 1] = y / lastLuminance.height;\n                        id += 2;\n                    }\n                }\n                effect.setArray2(\"dsOffsets\", downSampleOffsets);\n                effect.setFloat(\"halfDestPixelSize\", 0.5 / lastLuminance.width);\n                if (index === _this.luminanceDownSamplePostProcesses.length - 1) {\n                    lastLuminance = _this.luminancePostProcess;\n                }\n                else {\n                    lastLuminance = pp;\n                }\n            };\n            if (index === _this.luminanceDownSamplePostProcesses.length - 1) {\n                pp.onAfterRender = function () {\n                    var pixel = scene.getEngine().readPixels(0, 0, 1, 1);\n                    var bit_shift = new Vector4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\n                    pixel.then(function (pixel) {\n                        var data = new Uint8Array(pixel.buffer);\n                        _this._hdrCurrentLuminance = (data[0] * bit_shift.x + data[1] * bit_shift.y + data[2] * bit_shift.z + data[3] * bit_shift.w) / 100.0;\n                    });\n                };\n            }\n            _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRLuminanceDownSample\" + index, function () {\n                return pp;\n            }, true));\n        });\n    };\n    // Create HDR post-process\n    StandardRenderingPipeline.prototype._createHdrPostProcess = function (scene, ratio) {\n        var _this = this;\n        var defines = [\"#define HDR\"];\n        if (this._hdrAutoExposure) {\n            defines.push(\"#define AUTO_EXPOSURE\");\n        }\n        this.hdrPostProcess = new PostProcess(\"HDR\", \"standard\", [\"averageLuminance\"], [\"textureAdderSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, defines.join(\"\\n\"), 0);\n        var outputLiminance = 1;\n        var time = 0;\n        var lastTime = 0;\n        this.hdrPostProcess.onApply = function (effect) {\n            effect.setTextureFromPostProcess(\"textureAdderSampler\", _this._currentDepthOfFieldSource);\n            time += scene.getEngine().getDeltaTime();\n            if (outputLiminance < 0) {\n                outputLiminance = _this._hdrCurrentLuminance;\n            }\n            else {\n                var dt = (lastTime - time) / 1000.0;\n                if (_this._hdrCurrentLuminance < outputLiminance + _this.hdrDecreaseRate * dt) {\n                    outputLiminance += _this.hdrDecreaseRate * dt;\n                }\n                else if (_this._hdrCurrentLuminance > outputLiminance - _this.hdrIncreaseRate * dt) {\n                    outputLiminance -= _this.hdrIncreaseRate * dt;\n                }\n                else {\n                    outputLiminance = _this._hdrCurrentLuminance;\n                }\n            }\n            if (_this.hdrAutoExposure) {\n                _this._currentExposure = _this._fixedExposure / outputLiminance;\n            }\n            else {\n                outputLiminance = Scalar.Clamp(outputLiminance, _this.hdrMinimumLuminance, 1e20);\n                effect.setFloat(\"averageLuminance\", outputLiminance);\n            }\n            lastTime = time;\n            _this._currentDepthOfFieldSource = _this.hdrFinalPostProcess;\n        };\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDR\", function () {\n            return _this.hdrPostProcess;\n        }, true));\n    };\n    // Create lens flare post-process\n    StandardRenderingPipeline.prototype._createLensFlarePostProcess = function (scene, ratio) {\n        var _this = this;\n        this.lensFlarePostProcess = new PostProcess(\"HDRLensFlare\", \"standard\", [\"strength\", \"ghostDispersal\", \"haloWidth\", \"resolution\", \"distortionStrength\"], [\"lensColorSampler\"], ratio / 2, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define LENS_FLARE\", 0);\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRLensFlare\", function () {\n            return _this.lensFlarePostProcess;\n        }, true));\n        this._createBlurPostProcesses(scene, ratio / 4, 2, \"lensFlareBlurWidth\");\n        this.lensFlareComposePostProcess = new PostProcess(\"HDRLensFlareCompose\", \"standard\", [\"lensStarMatrix\"], [\"otherSampler\", \"lensDirtSampler\", \"lensStarSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define LENS_FLARE_COMPOSE\", 0);\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRLensFlareCompose\", function () {\n            return _this.lensFlareComposePostProcess;\n        }, true));\n        var resolution = new Vector2(0, 0);\n        // Lens flare\n        this.lensFlarePostProcess.externalTextureSamplerBinding = true;\n        this.lensFlarePostProcess.onApply = function (effect) {\n            effect.setTextureFromPostProcess(\"textureSampler\", _this._bloomEnabled ? _this.blurHPostProcesses[0] : _this.originalPostProcess);\n            effect.setTexture(\"lensColorSampler\", _this.lensColorTexture);\n            effect.setFloat(\"strength\", _this.lensFlareStrength);\n            effect.setFloat(\"ghostDispersal\", _this.lensFlareGhostDispersal);\n            effect.setFloat(\"haloWidth\", _this.lensFlareHaloWidth);\n            // Shift\n            resolution.x = _this.lensFlarePostProcess.width;\n            resolution.y = _this.lensFlarePostProcess.height;\n            effect.setVector2(\"resolution\", resolution);\n            effect.setFloat(\"distortionStrength\", _this.lensFlareDistortionStrength);\n        };\n        // Compose\n        var scaleBias1 = Matrix.FromValues(2.0, 0.0, -1.0, 0.0, 0.0, 2.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n        var scaleBias2 = Matrix.FromValues(0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n        this.lensFlareComposePostProcess.onApply = function (effect) {\n            if (!_this._scene.activeCamera) {\n                return;\n            }\n            effect.setTextureFromPostProcess(\"otherSampler\", _this.lensFlarePostProcess);\n            effect.setTexture(\"lensDirtSampler\", _this.lensFlareDirtTexture);\n            effect.setTexture(\"lensStarSampler\", _this.lensStarTexture);\n            // Lens start rotation matrix\n            var camerax = _this._scene.activeCamera.getViewMatrix().getRow(0);\n            var cameraz = _this._scene.activeCamera.getViewMatrix().getRow(2);\n            var camRot = Vector3.Dot(camerax.toVector3(), new Vector3(1.0, 0.0, 0.0)) + Vector3.Dot(cameraz.toVector3(), new Vector3(0.0, 0.0, 1.0));\n            camRot *= 4.0;\n            var starRotation = Matrix.FromValues(Math.cos(camRot) * 0.5, -Math.sin(camRot), 0.0, 0.0, Math.sin(camRot), Math.cos(camRot) * 0.5, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n            var lensStarMatrix = scaleBias2.multiply(starRotation).multiply(scaleBias1);\n            effect.setMatrix(\"lensStarMatrix\", lensStarMatrix);\n            _this._currentDepthOfFieldSource = _this.lensFlareFinalPostProcess;\n        };\n    };\n    // Create depth-of-field post-process\n    StandardRenderingPipeline.prototype._createDepthOfFieldPostProcess = function (scene, ratio) {\n        var _this = this;\n        this.depthOfFieldPostProcess = new PostProcess(\"HDRDepthOfField\", \"standard\", [\"distance\"], [\"otherSampler\", \"depthSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define DEPTH_OF_FIELD\", 0);\n        this.depthOfFieldPostProcess.onApply = function (effect) {\n            effect.setTextureFromPostProcess(\"otherSampler\", _this._currentDepthOfFieldSource);\n            effect.setTexture(\"depthSampler\", _this._getDepthTexture());\n            effect.setFloat(\"distance\", _this.depthOfFieldDistance);\n        };\n        // Add to pipeline\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRDepthOfField\", function () {\n            return _this.depthOfFieldPostProcess;\n        }, true));\n    };\n    // Create motion blur post-process\n    StandardRenderingPipeline.prototype._createMotionBlurPostProcess = function (scene, ratio) {\n        var _this = this;\n        if (this._isObjectBasedMotionBlur) {\n            var mb = new MotionBlurPostProcess(\"HDRMotionBlur\", scene, ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, 0);\n            mb.motionStrength = this.motionStrength;\n            mb.motionBlurSamples = this.motionBlurSamples;\n            this.motionBlurPostProcess = mb;\n        }\n        else {\n            this.motionBlurPostProcess = new PostProcess(\"HDRMotionBlur\", \"standard\", [\"inverseViewProjection\", \"prevViewProjection\", \"screenSize\", \"motionScale\", \"motionStrength\"], [\"depthSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false, \"#define MOTION_BLUR\\n#define MAX_MOTION_SAMPLES \" + this.motionBlurSamples.toFixed(1), 0);\n            var motionScale_1 = 0;\n            var prevViewProjection_1 = Matrix.Identity();\n            var invViewProjection_1 = Matrix.Identity();\n            var viewProjection_1 = Matrix.Identity();\n            var screenSize_1 = Vector2.Zero();\n            this.motionBlurPostProcess.onApply = function (effect) {\n                viewProjection_1 = scene.getProjectionMatrix().multiply(scene.getViewMatrix());\n                viewProjection_1.invertToRef(invViewProjection_1);\n                effect.setMatrix(\"inverseViewProjection\", invViewProjection_1);\n                effect.setMatrix(\"prevViewProjection\", prevViewProjection_1);\n                prevViewProjection_1 = viewProjection_1;\n                screenSize_1.x = _this.motionBlurPostProcess.width;\n                screenSize_1.y = _this.motionBlurPostProcess.height;\n                effect.setVector2(\"screenSize\", screenSize_1);\n                motionScale_1 = scene.getEngine().getFps() / 60.0;\n                effect.setFloat(\"motionScale\", motionScale_1);\n                effect.setFloat(\"motionStrength\", _this.motionStrength);\n                effect.setTexture(\"depthSampler\", _this._getDepthTexture());\n            };\n        }\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), \"HDRMotionBlur\", function () {\n            return _this.motionBlurPostProcess;\n        }, true));\n    };\n    StandardRenderingPipeline.prototype._getDepthTexture = function () {\n        if (this._scene.getEngine().getCaps().drawBuffersExtension) {\n            var renderer = this._scene.enableGeometryBufferRenderer();\n            return renderer.getGBuffer().textures[0];\n        }\n        return this._scene.enableDepthRenderer().getDepthMap();\n    };\n    StandardRenderingPipeline.prototype._disposePostProcesses = function () {\n        for (var i = 0; i < this._cameras.length; i++) {\n            var camera = this._cameras[i];\n            if (this.originalPostProcess) {\n                this.originalPostProcess.dispose(camera);\n            }\n            if (this.screenSpaceReflectionPostProcess) {\n                this.screenSpaceReflectionPostProcess.dispose(camera);\n            }\n            if (this.downSampleX4PostProcess) {\n                this.downSampleX4PostProcess.dispose(camera);\n            }\n            if (this.brightPassPostProcess) {\n                this.brightPassPostProcess.dispose(camera);\n            }\n            if (this.textureAdderPostProcess) {\n                this.textureAdderPostProcess.dispose(camera);\n            }\n            if (this.volumetricLightPostProcess) {\n                this.volumetricLightPostProcess.dispose(camera);\n            }\n            if (this.volumetricLightSmoothXPostProcess) {\n                this.volumetricLightSmoothXPostProcess.dispose(camera);\n            }\n            if (this.volumetricLightSmoothYPostProcess) {\n                this.volumetricLightSmoothYPostProcess.dispose(camera);\n            }\n            if (this.volumetricLightMergePostProces) {\n                this.volumetricLightMergePostProces.dispose(camera);\n            }\n            if (this.volumetricLightFinalPostProcess) {\n                this.volumetricLightFinalPostProcess.dispose(camera);\n            }\n            if (this.lensFlarePostProcess) {\n                this.lensFlarePostProcess.dispose(camera);\n            }\n            if (this.lensFlareComposePostProcess) {\n                this.lensFlareComposePostProcess.dispose(camera);\n            }\n            for (var j = 0; j < this.luminanceDownSamplePostProcesses.length; j++) {\n                this.luminanceDownSamplePostProcesses[j].dispose(camera);\n            }\n            if (this.luminancePostProcess) {\n                this.luminancePostProcess.dispose(camera);\n            }\n            if (this.hdrPostProcess) {\n                this.hdrPostProcess.dispose(camera);\n            }\n            if (this.hdrFinalPostProcess) {\n                this.hdrFinalPostProcess.dispose(camera);\n            }\n            if (this.depthOfFieldPostProcess) {\n                this.depthOfFieldPostProcess.dispose(camera);\n            }\n            if (this.motionBlurPostProcess) {\n                this.motionBlurPostProcess.dispose(camera);\n            }\n            if (this.fxaaPostProcess) {\n                this.fxaaPostProcess.dispose(camera);\n            }\n            for (var j = 0; j < this.blurHPostProcesses.length; j++) {\n                this.blurHPostProcesses[j].dispose(camera);\n            }\n            for (var j = 0; j < this.blurVPostProcesses.length; j++) {\n                this.blurVPostProcesses[j].dispose(camera);\n            }\n        }\n        this.originalPostProcess = null;\n        this.downSampleX4PostProcess = null;\n        this.brightPassPostProcess = null;\n        this.textureAdderPostProcess = null;\n        this.textureAdderFinalPostProcess = null;\n        this.volumetricLightPostProcess = null;\n        this.volumetricLightSmoothXPostProcess = null;\n        this.volumetricLightSmoothYPostProcess = null;\n        this.volumetricLightMergePostProces = null;\n        this.volumetricLightFinalPostProcess = null;\n        this.lensFlarePostProcess = null;\n        this.lensFlareComposePostProcess = null;\n        this.luminancePostProcess = null;\n        this.hdrPostProcess = null;\n        this.hdrFinalPostProcess = null;\n        this.depthOfFieldPostProcess = null;\n        this.motionBlurPostProcess = null;\n        this.fxaaPostProcess = null;\n        this.screenSpaceReflectionPostProcess = null;\n        this.luminanceDownSamplePostProcesses = [];\n        this.blurHPostProcesses = [];\n        this.blurVPostProcesses = [];\n    };\n    /**\n     * Dispose of the pipeline and stop all post processes\n     */\n    StandardRenderingPipeline.prototype.dispose = function () {\n        this._disposePostProcesses();\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Serialize the rendering pipeline (Used when exporting)\n     * @returns the serialized object\n     */\n    StandardRenderingPipeline.prototype.serialize = function () {\n        var serializationObject = SerializationHelper.Serialize(this);\n        if (this.sourceLight) {\n            serializationObject.sourceLightId = this.sourceLight.id;\n        }\n        if (this.screenSpaceReflectionPostProcess) {\n            serializationObject.screenSpaceReflectionPostProcess = SerializationHelper.Serialize(this.screenSpaceReflectionPostProcess);\n        }\n        serializationObject.customType = \"StandardRenderingPipeline\";\n        return serializationObject;\n    };\n    /**\n     * Parse the serialized pipeline\n     * @param source Source pipeline.\n     * @param scene The scene to load the pipeline to.\n     * @param rootUrl The URL of the serialized pipeline.\n     * @returns An instantiated pipeline from the serialized object.\n     */\n    StandardRenderingPipeline.Parse = function (source, scene, rootUrl) {\n        var p = SerializationHelper.Parse(function () { return new StandardRenderingPipeline(source._name, scene, source._ratio); }, source, scene, rootUrl);\n        if (source.sourceLightId) {\n            p.sourceLight = scene.getLightById(source.sourceLightId);\n        }\n        if (source.screenSpaceReflectionPostProcess) {\n            SerializationHelper.Parse(function () { return p.screenSpaceReflectionPostProcess; }, source.screenSpaceReflectionPostProcess, scene, rootUrl);\n        }\n        return p;\n    };\n    /**\n     * Luminance steps\n     */\n    StandardRenderingPipeline.LuminanceSteps = 6;\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"brightThreshold\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"blurWidth\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"horizontalBlur\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"exposure\", null);\n    __decorate([\n        serializeAsTexture(\"lensTexture\")\n    ], StandardRenderingPipeline.prototype, \"lensTexture\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"volumetricLightCoefficient\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"volumetricLightPower\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"volumetricLightBlurScale\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"hdrMinimumLuminance\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"hdrDecreaseRate\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"hdrIncreaseRate\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"hdrAutoExposure\", null);\n    __decorate([\n        serializeAsTexture(\"lensColorTexture\")\n    ], StandardRenderingPipeline.prototype, \"lensColorTexture\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"lensFlareStrength\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"lensFlareGhostDispersal\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"lensFlareHaloWidth\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"lensFlareDistortionStrength\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"lensFlareBlurWidth\", void 0);\n    __decorate([\n        serializeAsTexture(\"lensStarTexture\")\n    ], StandardRenderingPipeline.prototype, \"lensStarTexture\", void 0);\n    __decorate([\n        serializeAsTexture(\"lensFlareDirtTexture\")\n    ], StandardRenderingPipeline.prototype, \"lensFlareDirtTexture\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"depthOfFieldDistance\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"depthOfFieldBlurWidth\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"motionStrength\", null);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"objectBasedMotionBlur\", null);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"_ratio\", void 0);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"BloomEnabled\", null);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"DepthOfFieldEnabled\", null);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"LensFlareEnabled\", null);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"HDREnabled\", null);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"VLSEnabled\", null);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"MotionBlurEnabled\", null);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"fxaaEnabled\", null);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"screenSpaceReflectionsEnabled\", null);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"volumetricLightStepsCount\", null);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"motionBlurSamples\", null);\n    __decorate([\n        serialize()\n    ], StandardRenderingPipeline.prototype, \"samples\", null);\n    return StandardRenderingPipeline;\n}(PostProcessRenderPipeline));\nexport { StandardRenderingPipeline };\nRegisterClass(\"BABYLON.StandardRenderingPipeline\", StandardRenderingPipeline);\n//# sourceMappingURL=standardRenderingPipeline.js.map","import { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport \"../Shaders/tonemap.fragment.js\";\n/** Defines operator used for tonemapping */\nexport var TonemappingOperator;\n(function (TonemappingOperator) {\n    /** Hable */\n    TonemappingOperator[TonemappingOperator[\"Hable\"] = 0] = \"Hable\";\n    /** Reinhard */\n    TonemappingOperator[TonemappingOperator[\"Reinhard\"] = 1] = \"Reinhard\";\n    /** HejiDawson */\n    TonemappingOperator[TonemappingOperator[\"HejiDawson\"] = 2] = \"HejiDawson\";\n    /** Photographic */\n    TonemappingOperator[TonemappingOperator[\"Photographic\"] = 3] = \"Photographic\";\n})(TonemappingOperator || (TonemappingOperator = {}));\n/**\n * Defines a post process to apply tone mapping\n */\nvar TonemapPostProcess = /** @class */ (function (_super) {\n    __extends(TonemapPostProcess, _super);\n    /**\n     * Creates a new TonemapPostProcess\n     * @param name defines the name of the postprocess\n     * @param _operator defines the operator to use\n     * @param exposureAdjustment defines the required exposure adjustment\n     * @param camera defines the camera to use (can be null)\n     * @param samplingMode defines the required sampling mode (BABYLON.Texture.BILINEAR_SAMPLINGMODE by default)\n     * @param engine defines the hosting engine (can be ignore if camera is set)\n     * @param textureFormat defines the texture format to use (BABYLON.Engine.TEXTURETYPE_UNSIGNED_INT by default)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     */\n    function TonemapPostProcess(name, _operator, \n    /** Defines the required exposure adjustment */\n    exposureAdjustment, camera, samplingMode, engine, textureFormat, reusable) {\n        if (samplingMode === void 0) { samplingMode = 2; }\n        if (textureFormat === void 0) { textureFormat = 0; }\n        var _this = _super.call(this, name, \"tonemap\", [\"_ExposureAdjustment\"], null, 1.0, camera, samplingMode, engine, reusable, null, textureFormat) || this;\n        _this._operator = _operator;\n        _this.exposureAdjustment = exposureAdjustment;\n        var defines = \"#define \";\n        if (_this._operator === TonemappingOperator.Hable) {\n            defines += \"HABLE_TONEMAPPING\";\n        }\n        else if (_this._operator === TonemappingOperator.Reinhard) {\n            defines += \"REINHARD_TONEMAPPING\";\n        }\n        else if (_this._operator === TonemappingOperator.HejiDawson) {\n            defines += \"OPTIMIZED_HEJIDAWSON_TONEMAPPING\";\n        }\n        else if (_this._operator === TonemappingOperator.Photographic) {\n            defines += \"PHOTOGRAPHIC_TONEMAPPING\";\n        }\n        //sadly a second call to create the effect.\n        _this.updateEffect(defines);\n        _this.onApply = function (effect) {\n            effect.setFloat(\"_ExposureAdjustment\", _this.exposureAdjustment);\n        };\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"TonemapPostProcess\" string\n     */\n    TonemapPostProcess.prototype.getClassName = function () {\n        return \"TonemapPostProcess\";\n    };\n    return TonemapPostProcess;\n}(PostProcess));\nexport { TonemapPostProcess };\n//# sourceMappingURL=tonemapPostProcess.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serializeAsVector3, serialize, serializeAsMeshReference } from \"../Misc/decorators.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { Vector2, Vector3, Matrix } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { MaterialHelper } from \"../Materials/materialHelper.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture.js\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport { CreatePlane } from \"../Meshes/Builders/planeBuilder.js\";\nimport \"../Shaders/depth.vertex.js\";\nimport \"../Shaders/volumetricLightScattering.fragment.js\";\nimport \"../Shaders/volumetricLightScatteringPass.vertex.js\";\nimport \"../Shaders/volumetricLightScatteringPass.fragment.js\";\nimport { Color4, Color3 } from \"../Maths/math.color.js\";\nimport { Viewport } from \"../Maths/math.viewport.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { DrawWrapper } from \"../Materials/drawWrapper.js\";\n/**\n *  Inspired by https://developer.nvidia.com/gpugems/gpugems3/part-ii-light-and-shadows/chapter-13-volumetric-light-scattering-post-process\n */\nvar VolumetricLightScatteringPostProcess = /** @class */ (function (_super) {\n    __extends(VolumetricLightScatteringPostProcess, _super);\n    /**\n     * @constructor\n     * @param name The post-process name\n     * @param ratio The size of the post-process and/or internal pass (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)\n     * @param camera The camera that the post-process will be attached to\n     * @param mesh The mesh used to create the light scattering\n     * @param samples The post-process quality, default 100\n     * @param samplingMode The post-process filtering mode\n     * @param engine The babylon engine\n     * @param reusable If the post-process is reusable\n     * @param scene The constructor needs a scene reference to initialize internal components. If \"camera\" is null a \"scene\" must be provided\n     */\n    function VolumetricLightScatteringPostProcess(name, ratio, camera, mesh, samples, samplingMode, engine, reusable, scene) {\n        if (samples === void 0) { samples = 100; }\n        if (samplingMode === void 0) { samplingMode = Texture.BILINEAR_SAMPLINGMODE; }\n        var _this = this;\n        var _a;\n        _this = _super.call(this, name, \"volumetricLightScattering\", [\"decay\", \"exposure\", \"weight\", \"meshPositionOnScreen\", \"density\"], [\"lightScatteringSampler\"], ratio.postProcessRatio || ratio, camera, samplingMode, engine, reusable, \"#define NUM_SAMPLES \" + samples) || this;\n        _this._screenCoordinates = Vector2.Zero();\n        /**\n         * Custom position of the mesh. Used if \"useCustomMeshPosition\" is set to \"true\"\n         */\n        _this.customMeshPosition = Vector3.Zero();\n        /**\n         * Set if the post-process should use a custom position for the light source (true) or the internal mesh position (false)\n         */\n        _this.useCustomMeshPosition = false;\n        /**\n         * If the post-process should inverse the light scattering direction\n         */\n        _this.invert = true;\n        /**\n         * Array containing the excluded meshes not rendered in the internal pass\n         */\n        _this.excludedMeshes = new Array();\n        /**\n         * Controls the overall intensity of the post-process\n         */\n        _this.exposure = 0.3;\n        /**\n         * Dissipates each sample's contribution in range [0, 1]\n         */\n        _this.decay = 0.96815;\n        /**\n         * Controls the overall intensity of each sample\n         */\n        _this.weight = 0.58767;\n        /**\n         * Controls the density of each sample\n         */\n        _this.density = 0.926;\n        scene = (_a = camera === null || camera === void 0 ? void 0 : camera.getScene()) !== null && _a !== void 0 ? _a : scene; // parameter \"scene\" can be null.\n        engine = scene.getEngine();\n        _this._viewPort = new Viewport(0, 0, 1, 1).toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\n        // Configure mesh\n        _this.mesh = mesh !== null && mesh !== void 0 ? mesh : VolumetricLightScatteringPostProcess.CreateDefaultMesh(\"VolumetricLightScatteringMesh\", scene);\n        _this._volumetricLightScatteringPass = new DrawWrapper(engine);\n        // Configure\n        _this._createPass(scene, ratio.passRatio || ratio);\n        _this.onActivate = function (camera) {\n            if (!_this.isSupported) {\n                _this.dispose(camera);\n            }\n            _this.onActivate = null;\n        };\n        _this.onApplyObservable.add(function (effect) {\n            _this._updateMeshScreenCoordinates(scene);\n            effect.setTexture(\"lightScatteringSampler\", _this._volumetricLightScatteringRTT);\n            effect.setFloat(\"exposure\", _this.exposure);\n            effect.setFloat(\"decay\", _this.decay);\n            effect.setFloat(\"weight\", _this.weight);\n            effect.setFloat(\"density\", _this.density);\n            effect.setVector2(\"meshPositionOnScreen\", _this._screenCoordinates);\n        });\n        return _this;\n    }\n    Object.defineProperty(VolumetricLightScatteringPostProcess.prototype, \"useDiffuseColor\", {\n        /**\n         * @hidden\n         * VolumetricLightScatteringPostProcess.useDiffuseColor is no longer used, use the mesh material directly instead\n         */\n        get: function () {\n            Logger.Warn(\"VolumetricLightScatteringPostProcess.useDiffuseColor is no longer used, use the mesh material directly instead\");\n            return false;\n        },\n        set: function (useDiffuseColor) {\n            Logger.Warn(\"VolumetricLightScatteringPostProcess.useDiffuseColor is no longer used, use the mesh material directly instead\");\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns the string \"VolumetricLightScatteringPostProcess\"\n     * @returns \"VolumetricLightScatteringPostProcess\"\n     */\n    VolumetricLightScatteringPostProcess.prototype.getClassName = function () {\n        return \"VolumetricLightScatteringPostProcess\";\n    };\n    VolumetricLightScatteringPostProcess.prototype._isReady = function (subMesh, useInstances) {\n        var mesh = subMesh.getMesh();\n        // Render this.mesh as default\n        if (mesh === this.mesh && mesh.material) {\n            return mesh.material.isReady(mesh);\n        }\n        var defines = [];\n        var attribs = [VertexBuffer.PositionKind];\n        var material = subMesh.getMaterial();\n        // Alpha test\n        if (material) {\n            if (material.needAlphaTesting()) {\n                defines.push(\"#define ALPHATEST\");\n            }\n            if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\n                attribs.push(VertexBuffer.UVKind);\n                defines.push(\"#define UV1\");\n            }\n            if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\n                attribs.push(VertexBuffer.UV2Kind);\n                defines.push(\"#define UV2\");\n            }\n        }\n        // Bones\n        if (mesh.useBones && mesh.computeBonesUsingShaders) {\n            attribs.push(VertexBuffer.MatricesIndicesKind);\n            attribs.push(VertexBuffer.MatricesWeightsKind);\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\n            defines.push(\"#define BonesPerMesh \" + (mesh.skeleton ? mesh.skeleton.bones.length + 1 : 0));\n        }\n        else {\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\n        }\n        // Instances\n        if (useInstances) {\n            defines.push(\"#define INSTANCES\");\n            MaterialHelper.PushAttributesForInstances(attribs);\n            if (subMesh.getRenderingMesh().hasThinInstances) {\n                defines.push(\"#define THIN_INSTANCES\");\n            }\n        }\n        // Get correct effect\n        var join = defines.join(\"\\n\");\n        if (this._cachedDefines !== join) {\n            this._cachedDefines = join;\n            this._volumetricLightScatteringPass.effect = mesh\n                .getScene()\n                .getEngine()\n                .createEffect(\"volumetricLightScatteringPass\", attribs, [\"world\", \"mBones\", \"viewProjection\", \"diffuseMatrix\"], [\"diffuseSampler\"], join, undefined, undefined, undefined, { maxSimultaneousMorphTargets: mesh.numBoneInfluencers });\n        }\n        return this._volumetricLightScatteringPass.effect.isReady();\n    };\n    /**\n     * Sets the new light position for light scattering effect\n     * @param position The new custom light position\n     */\n    VolumetricLightScatteringPostProcess.prototype.setCustomMeshPosition = function (position) {\n        this.customMeshPosition = position;\n    };\n    /**\n     * Returns the light position for light scattering effect\n     * @return Vector3 The custom light position\n     */\n    VolumetricLightScatteringPostProcess.prototype.getCustomMeshPosition = function () {\n        return this.customMeshPosition;\n    };\n    /**\n     * Disposes the internal assets and detaches the post-process from the camera\n     * @param camera\n     */\n    VolumetricLightScatteringPostProcess.prototype.dispose = function (camera) {\n        var rttIndex = camera.getScene().customRenderTargets.indexOf(this._volumetricLightScatteringRTT);\n        if (rttIndex !== -1) {\n            camera.getScene().customRenderTargets.splice(rttIndex, 1);\n        }\n        this._volumetricLightScatteringRTT.dispose();\n        _super.prototype.dispose.call(this, camera);\n    };\n    /**\n     * Returns the render target texture used by the post-process\n     * @return the render target texture used by the post-process\n     */\n    VolumetricLightScatteringPostProcess.prototype.getPass = function () {\n        return this._volumetricLightScatteringRTT;\n    };\n    // Private methods\n    VolumetricLightScatteringPostProcess.prototype._meshExcluded = function (mesh) {\n        if (this.excludedMeshes.length > 0 && this.excludedMeshes.indexOf(mesh) !== -1) {\n            return true;\n        }\n        return false;\n    };\n    VolumetricLightScatteringPostProcess.prototype._createPass = function (scene, ratio) {\n        var _this = this;\n        var engine = scene.getEngine();\n        this._volumetricLightScatteringRTT = new RenderTargetTexture(\"volumetricLightScatteringMap\", { width: engine.getRenderWidth() * ratio, height: engine.getRenderHeight() * ratio }, scene, false, true, 0);\n        this._volumetricLightScatteringRTT.wrapU = Texture.CLAMP_ADDRESSMODE;\n        this._volumetricLightScatteringRTT.wrapV = Texture.CLAMP_ADDRESSMODE;\n        this._volumetricLightScatteringRTT.renderList = null;\n        this._volumetricLightScatteringRTT.renderParticles = false;\n        this._volumetricLightScatteringRTT.ignoreCameraViewport = true;\n        var camera = this.getCamera();\n        if (camera) {\n            camera.customRenderTargets.push(this._volumetricLightScatteringRTT);\n        }\n        else {\n            scene.customRenderTargets.push(this._volumetricLightScatteringRTT);\n        }\n        // Custom render function for submeshes\n        var renderSubMesh = function (subMesh) {\n            var renderingMesh = subMesh.getRenderingMesh();\n            var effectiveMesh = subMesh.getEffectiveMesh();\n            if (_this._meshExcluded(renderingMesh)) {\n                return;\n            }\n            effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\n            var material = subMesh.getMaterial();\n            if (!material) {\n                return;\n            }\n            var scene = renderingMesh.getScene();\n            var engine = scene.getEngine();\n            // Culling\n            engine.setState(material.backFaceCulling, undefined, undefined, undefined, material.cullBackFaces);\n            // Managing instances\n            var batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n            if (batch.mustReturn) {\n                return;\n            }\n            var hardwareInstancedRendering = engine.getCaps().instancedArrays && (batch.visibleInstances[subMesh._id] !== null || renderingMesh.hasThinInstances);\n            if (_this._isReady(subMesh, hardwareInstancedRendering)) {\n                var drawWrapper = _this._volumetricLightScatteringPass;\n                if (renderingMesh === _this.mesh) {\n                    if (subMesh.effect) {\n                        drawWrapper = subMesh._drawWrapper;\n                    }\n                    else {\n                        drawWrapper = material._getDrawWrapper();\n                    }\n                }\n                var effect_1 = drawWrapper.effect;\n                engine.enableEffect(drawWrapper);\n                if (!hardwareInstancedRendering) {\n                    renderingMesh._bind(subMesh, effect_1, material.fillMode);\n                }\n                if (renderingMesh === _this.mesh) {\n                    material.bind(effectiveMesh.getWorldMatrix(), renderingMesh);\n                }\n                else {\n                    effect_1.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n                    // Alpha test\n                    if (material && material.needAlphaTesting()) {\n                        var alphaTexture = material.getAlphaTestTexture();\n                        effect_1.setTexture(\"diffuseSampler\", alphaTexture);\n                        if (alphaTexture) {\n                            effect_1.setMatrix(\"diffuseMatrix\", alphaTexture.getTextureMatrix());\n                        }\n                    }\n                    // Bones\n                    if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\n                        effect_1.setMatrices(\"mBones\", renderingMesh.skeleton.getTransformMatrices(renderingMesh));\n                    }\n                }\n                if (hardwareInstancedRendering && renderingMesh.hasThinInstances) {\n                    effect_1.setMatrix(\"world\", effectiveMesh.getWorldMatrix());\n                }\n                // Draw\n                renderingMesh._processRendering(effectiveMesh, subMesh, effect_1, Material.TriangleFillMode, batch, hardwareInstancedRendering, function (isInstance, world) {\n                    if (!isInstance) {\n                        effect_1.setMatrix(\"world\", world);\n                    }\n                });\n            }\n        };\n        // Render target texture callbacks\n        var savedSceneClearColor;\n        var sceneClearColor = new Color4(0.0, 0.0, 0.0, 1.0);\n        this._volumetricLightScatteringRTT.onBeforeRenderObservable.add(function () {\n            savedSceneClearColor = scene.clearColor;\n            scene.clearColor = sceneClearColor;\n        });\n        this._volumetricLightScatteringRTT.onAfterRenderObservable.add(function () {\n            scene.clearColor = savedSceneClearColor;\n        });\n        this._volumetricLightScatteringRTT.customIsReadyFunction = function (mesh, refreshRate) {\n            if (!mesh.isReady(false)) {\n                return false;\n            }\n            if (refreshRate === 0 && mesh.subMeshes) {\n                // full check: check that the effects are ready\n                for (var i = 0; i < mesh.subMeshes.length; ++i) {\n                    var subMesh = mesh.subMeshes[i];\n                    var material = subMesh.getMaterial();\n                    var renderingMesh = subMesh.getRenderingMesh();\n                    if (!material) {\n                        continue;\n                    }\n                    var batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n                    var hardwareInstancedRendering = engine.getCaps().instancedArrays && (batch.visibleInstances[subMesh._id] !== null || renderingMesh.hasThinInstances);\n                    if (!_this._isReady(subMesh, hardwareInstancedRendering)) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        };\n        this._volumetricLightScatteringRTT.customRenderFunction = function (opaqueSubMeshes, alphaTestSubMeshes, transparentSubMeshes, depthOnlySubMeshes) {\n            var engine = scene.getEngine();\n            var index;\n            if (depthOnlySubMeshes.length) {\n                engine.setColorWrite(false);\n                for (index = 0; index < depthOnlySubMeshes.length; index++) {\n                    renderSubMesh(depthOnlySubMeshes.data[index]);\n                }\n                engine.setColorWrite(true);\n            }\n            for (index = 0; index < opaqueSubMeshes.length; index++) {\n                renderSubMesh(opaqueSubMeshes.data[index]);\n            }\n            for (index = 0; index < alphaTestSubMeshes.length; index++) {\n                renderSubMesh(alphaTestSubMeshes.data[index]);\n            }\n            if (transparentSubMeshes.length) {\n                // Sort sub meshes\n                for (index = 0; index < transparentSubMeshes.length; index++) {\n                    var submesh = transparentSubMeshes.data[index];\n                    var boundingInfo = submesh.getBoundingInfo();\n                    if (boundingInfo && scene.activeCamera) {\n                        submesh._alphaIndex = submesh.getMesh().alphaIndex;\n                        submesh._distanceToCamera = boundingInfo.boundingSphere.centerWorld.subtract(scene.activeCamera.position).length();\n                    }\n                }\n                var sortedArray = transparentSubMeshes.data.slice(0, transparentSubMeshes.length);\n                sortedArray.sort(function (a, b) {\n                    // Alpha index first\n                    if (a._alphaIndex > b._alphaIndex) {\n                        return 1;\n                    }\n                    if (a._alphaIndex < b._alphaIndex) {\n                        return -1;\n                    }\n                    // Then distance to camera\n                    if (a._distanceToCamera < b._distanceToCamera) {\n                        return 1;\n                    }\n                    if (a._distanceToCamera > b._distanceToCamera) {\n                        return -1;\n                    }\n                    return 0;\n                });\n                // Render sub meshes\n                engine.setAlphaMode(2);\n                for (index = 0; index < sortedArray.length; index++) {\n                    renderSubMesh(sortedArray[index]);\n                }\n                engine.setAlphaMode(0);\n            }\n        };\n    };\n    VolumetricLightScatteringPostProcess.prototype._updateMeshScreenCoordinates = function (scene) {\n        var transform = scene.getTransformMatrix();\n        var meshPosition;\n        if (this.useCustomMeshPosition) {\n            meshPosition = this.customMeshPosition;\n        }\n        else if (this.attachedNode) {\n            meshPosition = this.attachedNode.position;\n        }\n        else {\n            meshPosition = this.mesh.parent ? this.mesh.getAbsolutePosition() : this.mesh.position;\n        }\n        var pos = Vector3.Project(meshPosition, Matrix.Identity(), transform, this._viewPort);\n        this._screenCoordinates.x = pos.x / this._viewPort.width;\n        this._screenCoordinates.y = pos.y / this._viewPort.height;\n        if (this.invert) {\n            this._screenCoordinates.y = 1.0 - this._screenCoordinates.y;\n        }\n    };\n    // Static methods\n    /**\n     * Creates a default mesh for the Volumeric Light Scattering post-process\n     * @param name The mesh name\n     * @param scene The scene where to create the mesh\n     * @return the default mesh\n     */\n    VolumetricLightScatteringPostProcess.CreateDefaultMesh = function (name, scene) {\n        var mesh = CreatePlane(name, { size: 1 }, scene);\n        mesh.billboardMode = AbstractMesh.BILLBOARDMODE_ALL;\n        var material = new StandardMaterial(name + \"Material\", scene);\n        material.emissiveColor = new Color3(1, 1, 1);\n        mesh.material = material;\n        return mesh;\n    };\n    __decorate([\n        serializeAsVector3()\n    ], VolumetricLightScatteringPostProcess.prototype, \"customMeshPosition\", void 0);\n    __decorate([\n        serialize()\n    ], VolumetricLightScatteringPostProcess.prototype, \"useCustomMeshPosition\", void 0);\n    __decorate([\n        serialize()\n    ], VolumetricLightScatteringPostProcess.prototype, \"invert\", void 0);\n    __decorate([\n        serializeAsMeshReference()\n    ], VolumetricLightScatteringPostProcess.prototype, \"mesh\", void 0);\n    __decorate([\n        serialize()\n    ], VolumetricLightScatteringPostProcess.prototype, \"excludedMeshes\", void 0);\n    __decorate([\n        serialize()\n    ], VolumetricLightScatteringPostProcess.prototype, \"exposure\", void 0);\n    __decorate([\n        serialize()\n    ], VolumetricLightScatteringPostProcess.prototype, \"decay\", void 0);\n    __decorate([\n        serialize()\n    ], VolumetricLightScatteringPostProcess.prototype, \"weight\", void 0);\n    __decorate([\n        serialize()\n    ], VolumetricLightScatteringPostProcess.prototype, \"density\", void 0);\n    return VolumetricLightScatteringPostProcess;\n}(PostProcess));\nexport { VolumetricLightScatteringPostProcess };\nRegisterClass(\"BABYLON.VolumetricLightScatteringPostProcess\", VolumetricLightScatteringPostProcess);\n//# sourceMappingURL=volumetricLightScatteringPostProcess.js.map","import { __decorate, __extends } from \"tslib\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport \"../Rendering/geometryBufferRendererSceneComponent.js\";\nimport \"../Shaders/screenSpaceCurvature.fragment.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The Screen Space curvature effect can help highlighting ridge and valley of a model.\n */\nvar ScreenSpaceCurvaturePostProcess = /** @class */ (function (_super) {\n    __extends(ScreenSpaceCurvaturePostProcess, _super);\n    /**\n     * Creates a new instance ScreenSpaceCurvaturePostProcess\n     * @param name The name of the effect.\n     * @param scene The scene containing the objects to blur according to their velocity.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    function ScreenSpaceCurvaturePostProcess(name, scene, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n        if (textureType === void 0) { textureType = 0; }\n        if (blockCompilation === void 0) { blockCompilation = false; }\n        var _this = _super.call(this, name, \"screenSpaceCurvature\", [\"curvature_ridge\", \"curvature_valley\"], [\"textureSampler\", \"normalSampler\"], options, camera, samplingMode, engine, reusable, undefined, textureType, undefined, null, blockCompilation) || this;\n        /**\n         * Defines how much ridge the curvature effect displays.\n         */\n        _this.ridge = 1;\n        /**\n         * Defines how much valley the curvature effect displays.\n         */\n        _this.valley = 1;\n        _this._geometryBufferRenderer = scene.enableGeometryBufferRenderer();\n        if (!_this._geometryBufferRenderer) {\n            // Geometry buffer renderer is not supported. So, work as a passthrough.\n            Logger.Error(\"Multiple Render Target support needed for screen space curvature post process. Please use IsSupported test first.\");\n        }\n        else {\n            // Geometry buffer renderer is supported.\n            _this.onApply = function (effect) {\n                effect.setFloat(\"curvature_ridge\", 0.5 / Math.max(_this.ridge * _this.ridge, 1e-4));\n                effect.setFloat(\"curvature_valley\", 0.7 / Math.max(_this.valley * _this.valley, 1e-4));\n                var normalTexture = _this._geometryBufferRenderer.getGBuffer().textures[1];\n                effect.setTexture(\"normalSampler\", normalTexture);\n            };\n        }\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"ScreenSpaceCurvaturePostProcess\" string\n     */\n    ScreenSpaceCurvaturePostProcess.prototype.getClassName = function () {\n        return \"ScreenSpaceCurvaturePostProcess\";\n    };\n    Object.defineProperty(ScreenSpaceCurvaturePostProcess, \"IsSupported\", {\n        /**\n         * Support test.\n         */\n        get: function () {\n            var engine = EngineStore.LastCreatedEngine;\n            if (!engine) {\n                return false;\n            }\n            return engine.getCaps().drawBuffersExtension;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @param parsedPostProcess\n     * @param targetCamera\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    ScreenSpaceCurvaturePostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(function () {\n            return new ScreenSpaceCurvaturePostProcess(parsedPostProcess.name, scene, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.textureType, parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    };\n    __decorate([\n        serialize()\n    ], ScreenSpaceCurvaturePostProcess.prototype, \"ridge\", void 0);\n    __decorate([\n        serialize()\n    ], ScreenSpaceCurvaturePostProcess.prototype, \"valley\", void 0);\n    return ScreenSpaceCurvaturePostProcess;\n}(PostProcess));\nexport { ScreenSpaceCurvaturePostProcess };\nRegisterClass(\"BABYLON.ScreenSpaceCurvaturePostProcess\", ScreenSpaceCurvaturePostProcess);\n//# sourceMappingURL=screenSpaceCurvaturePostProcess.js.map","import { __extends } from \"tslib\";\n\nimport { PostProcess } from \"./postProcess.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport \"../Shaders/pass.fragment.js\";\nimport \"../Shaders/passCube.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * PassPostProcess which produces an output the same as it's input\n */\nvar PassPostProcess = /** @class */ (function (_super) {\n    __extends(PassPostProcess, _super);\n    /**\n     * Creates the PassPostProcess\n     * @param name The name of the effect.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType The type of texture to be used when performing the post processing.\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    function PassPostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n        if (camera === void 0) { camera = null; }\n        if (textureType === void 0) { textureType = 0; }\n        if (blockCompilation === void 0) { blockCompilation = false; }\n        return _super.call(this, name, \"pass\", null, null, options, camera, samplingMode, engine, reusable, undefined, textureType, undefined, null, blockCompilation) || this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"PassPostProcess\" string\n     */\n    PassPostProcess.prototype.getClassName = function () {\n        return \"PassPostProcess\";\n    };\n    /**\n     * @param parsedPostProcess\n     * @param targetCamera\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    PassPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(function () {\n            return new PassPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, parsedPostProcess._engine, parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    };\n    return PassPostProcess;\n}(PostProcess));\nexport { PassPostProcess };\nRegisterClass(\"BABYLON.PassPostProcess\", PassPostProcess);\n/**\n * PassCubePostProcess which produces an output the same as it's input (which must be a cube texture)\n */\nvar PassCubePostProcess = /** @class */ (function (_super) {\n    __extends(PassCubePostProcess, _super);\n    /**\n     * Creates the PassCubePostProcess\n     * @param name The name of the effect.\n     * @param options The required width/height ratio to downsize to before computing the render pass.\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param textureType The type of texture to be used when performing the post processing.\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n     */\n    function PassCubePostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n        if (camera === void 0) { camera = null; }\n        if (textureType === void 0) { textureType = 0; }\n        if (blockCompilation === void 0) { blockCompilation = false; }\n        var _this = _super.call(this, name, \"passCube\", null, null, options, camera, samplingMode, engine, reusable, \"#define POSITIVEX\", textureType, undefined, null, blockCompilation) || this;\n        _this._face = 0;\n        return _this;\n    }\n    Object.defineProperty(PassCubePostProcess.prototype, \"face\", {\n        /**\n         * Gets or sets the cube face to display.\n         *  * 0 is +X\n         *  * 1 is -X\n         *  * 2 is +Y\n         *  * 3 is -Y\n         *  * 4 is +Z\n         *  * 5 is -Z\n         */\n        get: function () {\n            return this._face;\n        },\n        set: function (value) {\n            if (value < 0 || value > 5) {\n                return;\n            }\n            this._face = value;\n            switch (this._face) {\n                case 0:\n                    this.updateEffect(\"#define POSITIVEX\");\n                    break;\n                case 1:\n                    this.updateEffect(\"#define NEGATIVEX\");\n                    break;\n                case 2:\n                    this.updateEffect(\"#define POSITIVEY\");\n                    break;\n                case 3:\n                    this.updateEffect(\"#define NEGATIVEY\");\n                    break;\n                case 4:\n                    this.updateEffect(\"#define POSITIVEZ\");\n                    break;\n                case 5:\n                    this.updateEffect(\"#define NEGATIVEZ\");\n                    break;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"PassCubePostProcess\" string\n     */\n    PassCubePostProcess.prototype.getClassName = function () {\n        return \"PassCubePostProcess\";\n    };\n    /**\n     * @param parsedPostProcess\n     * @param targetCamera\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    PassCubePostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(function () {\n            return new PassCubePostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, parsedPostProcess._engine, parsedPostProcess.reusable);\n        }, parsedPostProcess, scene, rootUrl);\n    };\n    return PassCubePostProcess;\n}(PostProcess));\nexport { PassCubePostProcess };\nEngine._RescalePostProcessFactory = function (engine) {\n    return new PassPostProcess(\"rescale\", 1, null, 2, engine, false, 0);\n};\n//# sourceMappingURL=passPostProcess.js.map","import { __decorate } from \"tslib\";\nimport { SmartArray } from \"../Misc/smartArray.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\n\nimport \"../Shaders/postprocess.vertex.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport \"../Engines/Extensions/engine.renderTarget.js\";\nimport { serialize, serializeAsColor4, SerializationHelper } from \"../Misc/decorators.js\";\nimport { GetClass, RegisterClass } from \"../Misc/typeStore.js\";\nimport { DrawWrapper } from \"../Materials/drawWrapper.js\";\n/**\n * PostProcess can be used to apply a shader to a texture after it has been rendered\n * See https://doc.babylonjs.com/how_to/how_to_use_postprocesses\n */\nvar PostProcess = /** @class */ (function () {\n    /**\n     * Creates a new instance PostProcess\n     * @param name The name of the PostProcess.\n     * @param fragmentUrl The url of the fragment shader to be used.\n     * @param parameters Array of the names of uniform non-sampler2D variables that will be passed to the shader.\n     * @param samplers Array of the names of uniform sampler2D variables that will be passed to the shader.\n     * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\n     * @param camera The camera to apply the render pass to.\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     * @param defines String of defines that will be set when running the fragment shader. (default: null)\n     * @param textureType Type of textures used when performing the post process. (default: 0)\n     * @param vertexUrl The url of the vertex shader to be used. (default: \"postprocess\")\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\n     * @param blockCompilation If the shader should not be compiled immediatly. (default: false)\n     * @param textureFormat Format of textures used when performing the post process. (default: TEXTUREFORMAT_RGBA)\n     */\n    function PostProcess(name, fragmentUrl, parameters, samplers, options, camera, samplingMode, engine, reusable, defines, textureType, vertexUrl, indexParameters, blockCompilation, textureFormat) {\n        if (samplingMode === void 0) { samplingMode = 1; }\n        if (defines === void 0) { defines = null; }\n        if (textureType === void 0) { textureType = 0; }\n        if (vertexUrl === void 0) { vertexUrl = \"postprocess\"; }\n        if (blockCompilation === void 0) { blockCompilation = false; }\n        if (textureFormat === void 0) { textureFormat = 5; }\n        /** @hidden */\n        this._parentContainer = null;\n        /**\n         * Width of the texture to apply the post process on\n         */\n        this.width = -1;\n        /**\n         * Height of the texture to apply the post process on\n         */\n        this.height = -1;\n        /**\n         * Gets the node material used to create this postprocess (null if the postprocess was manually created)\n         */\n        this.nodeMaterialSource = null;\n        /**\n         * Internal, reference to the location where this postprocess was output to. (Typically the texture on the next postprocess in the chain)\n         * @hidden\n         */\n        this._outputTexture = null;\n        /**\n         * If the buffer needs to be cleared before applying the post process. (default: true)\n         * Should be set to false if shader will overwrite all previous pixels.\n         */\n        this.autoClear = true;\n        /**\n         * Type of alpha mode to use when performing the post process (default: Engine.ALPHA_DISABLE)\n         */\n        this.alphaMode = 0;\n        /**\n         * Animations to be used for the post processing\n         */\n        this.animations = new Array();\n        /**\n         * Enable Pixel Perfect mode where texture is not scaled to be power of 2.\n         * Can only be used on a single postprocess or on the last one of a chain. (default: false)\n         */\n        this.enablePixelPerfectMode = false;\n        /**\n         * Force the postprocess to be applied without taking in account viewport\n         */\n        this.forceFullscreenViewport = true;\n        /**\n         * Scale mode for the post process (default: Engine.SCALEMODE_FLOOR)\n         *\n         * | Value | Type                                | Description |\n         * | ----- | ----------------------------------- | ----------- |\n         * | 1     | SCALEMODE_FLOOR                     | [engine.scalemode_floor](https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_floor) |\n         * | 2     | SCALEMODE_NEAREST                   | [engine.scalemode_nearest](https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_nearest) |\n         * | 3     | SCALEMODE_CEILING                   | [engine.scalemode_ceiling](https://doc.babylonjs.com/api/classes/babylon.engine#scalemode_ceiling) |\n         *\n         */\n        this.scaleMode = 1;\n        /**\n         * Force textures to be a power of two (default: false)\n         */\n        this.alwaysForcePOT = false;\n        this._samples = 1;\n        /**\n         * Modify the scale of the post process to be the same as the viewport (default: false)\n         */\n        this.adaptScaleToCurrentViewport = false;\n        this._reusable = false;\n        this._renderId = 0;\n        /**\n         * if externalTextureSamplerBinding is true, the \"apply\" method won't bind the textureSampler texture, it is expected to be done by the \"outside\" (by the onApplyObservable observer most probably).\n         * counter-productive in some cases because if the texture bound by \"apply\" is different from the currently texture bound, (the one set by the onApplyObservable observer, for eg) some\n         * internal structures (materialContext) will be dirtified, which may impact performances\n         */\n        this.externalTextureSamplerBinding = false;\n        /**\n         * Smart array of input and output textures for the post process.\n         * @hidden\n         */\n        this._textures = new SmartArray(2);\n        /**\n         * Smart array of input and output textures for the post process.\n         * @hidden\n         */\n        this._textureCache = [];\n        /**\n         * The index in _textures that corresponds to the output texture.\n         * @hidden\n         */\n        this._currentRenderTextureInd = 0;\n        this._scaleRatio = new Vector2(1, 1);\n        this._texelSize = Vector2.Zero();\n        // Events\n        /**\n         * An event triggered when the postprocess is activated.\n         */\n        this.onActivateObservable = new Observable();\n        /**\n         * An event triggered when the postprocess changes its size.\n         */\n        this.onSizeChangedObservable = new Observable();\n        /**\n         * An event triggered when the postprocess applies its effect.\n         */\n        this.onApplyObservable = new Observable();\n        /**\n         * An event triggered before rendering the postprocess\n         */\n        this.onBeforeRenderObservable = new Observable();\n        /**\n         * An event triggered after rendering the postprocess\n         */\n        this.onAfterRenderObservable = new Observable();\n        this.name = name;\n        if (camera != null) {\n            this._camera = camera;\n            this._scene = camera.getScene();\n            camera.attachPostProcess(this);\n            this._engine = this._scene.getEngine();\n            this._scene.postProcesses.push(this);\n            this.uniqueId = this._scene.getUniqueId();\n        }\n        else if (engine) {\n            this._engine = engine;\n            this._engine.postProcesses.push(this);\n        }\n        this._options = options;\n        this.renderTargetSamplingMode = samplingMode ? samplingMode : 1;\n        this._reusable = reusable || false;\n        this._textureType = textureType;\n        this._textureFormat = textureFormat;\n        this._samplers = samplers || [];\n        this._samplers.push(\"textureSampler\");\n        this._fragmentUrl = fragmentUrl;\n        this._vertexUrl = vertexUrl;\n        this._parameters = parameters || [];\n        this._parameters.push(\"scale\");\n        this._indexParameters = indexParameters;\n        this._drawWrapper = new DrawWrapper(this._engine);\n        if (!blockCompilation) {\n            this.updateEffect(defines);\n        }\n    }\n    Object.defineProperty(PostProcess.prototype, \"samples\", {\n        /**\n         * Number of sample textures (default: 1)\n         */\n        get: function () {\n            return this._samples;\n        },\n        set: function (n) {\n            var _this = this;\n            this._samples = Math.min(n, this._engine.getCaps().maxMSAASamples);\n            this._textures.forEach(function (texture) {\n                if (texture.samples !== _this._samples) {\n                    _this._engine.updateRenderTargetTextureSampleCount(texture, _this._samples);\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns the fragment url or shader name used in the post process.\n     * @returns the fragment url or name in the shader store.\n     */\n    PostProcess.prototype.getEffectName = function () {\n        return this._fragmentUrl;\n    };\n    Object.defineProperty(PostProcess.prototype, \"onActivate\", {\n        /**\n         * A function that is added to the onActivateObservable\n         */\n        set: function (callback) {\n            if (this._onActivateObserver) {\n                this.onActivateObservable.remove(this._onActivateObserver);\n            }\n            if (callback) {\n                this._onActivateObserver = this.onActivateObservable.add(callback);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PostProcess.prototype, \"onSizeChanged\", {\n        /**\n         * A function that is added to the onSizeChangedObservable\n         */\n        set: function (callback) {\n            if (this._onSizeChangedObserver) {\n                this.onSizeChangedObservable.remove(this._onSizeChangedObserver);\n            }\n            this._onSizeChangedObserver = this.onSizeChangedObservable.add(callback);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PostProcess.prototype, \"onApply\", {\n        /**\n         * A function that is added to the onApplyObservable\n         */\n        set: function (callback) {\n            if (this._onApplyObserver) {\n                this.onApplyObservable.remove(this._onApplyObserver);\n            }\n            this._onApplyObserver = this.onApplyObservable.add(callback);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PostProcess.prototype, \"onBeforeRender\", {\n        /**\n         * A function that is added to the onBeforeRenderObservable\n         */\n        set: function (callback) {\n            if (this._onBeforeRenderObserver) {\n                this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\n            }\n            this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PostProcess.prototype, \"onAfterRender\", {\n        /**\n         * A function that is added to the onAfterRenderObservable\n         */\n        set: function (callback) {\n            if (this._onAfterRenderObserver) {\n                this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n            }\n            this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PostProcess.prototype, \"inputTexture\", {\n        /**\n         * The input texture for this post process and the output texture of the previous post process. When added to a pipeline the previous post process will\n         * render it's output into this texture and this texture will be used as textureSampler in the fragment shader of this post process.\n         */\n        get: function () {\n            return this._textures.data[this._currentRenderTextureInd];\n        },\n        set: function (value) {\n            this._forcedOutputTexture = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Since inputTexture should always be defined, if we previously manually set `inputTexture`,\n     * the only way to unset it is to use this function to restore its internal state\n     */\n    PostProcess.prototype.restoreDefaultInputTexture = function () {\n        if (this._forcedOutputTexture) {\n            this._forcedOutputTexture = null;\n            this.markTextureDirty();\n        }\n    };\n    /**\n     * Gets the camera which post process is applied to.\n     * @returns The camera the post process is applied to.\n     */\n    PostProcess.prototype.getCamera = function () {\n        return this._camera;\n    };\n    Object.defineProperty(PostProcess.prototype, \"texelSize\", {\n        /**\n         * Gets the texel size of the postprocess.\n         * See https://en.wikipedia.org/wiki/Texel_(graphics)\n         */\n        get: function () {\n            if (this._shareOutputWithPostProcess) {\n                return this._shareOutputWithPostProcess.texelSize;\n            }\n            if (this._forcedOutputTexture) {\n                this._texelSize.copyFromFloats(1.0 / this._forcedOutputTexture.width, 1.0 / this._forcedOutputTexture.height);\n            }\n            return this._texelSize;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"PostProcess\" string\n     */\n    PostProcess.prototype.getClassName = function () {\n        return \"PostProcess\";\n    };\n    /**\n     * Gets the engine which this post process belongs to.\n     * @returns The engine the post process was enabled with.\n     */\n    PostProcess.prototype.getEngine = function () {\n        return this._engine;\n    };\n    /**\n     * The effect that is created when initializing the post process.\n     * @returns The created effect corresponding the the postprocess.\n     */\n    PostProcess.prototype.getEffect = function () {\n        return this._drawWrapper.effect;\n    };\n    /**\n     * To avoid multiple redundant textures for multiple post process, the output the output texture for this post process can be shared with another.\n     * @param postProcess The post process to share the output with.\n     * @returns This post process.\n     */\n    PostProcess.prototype.shareOutputWith = function (postProcess) {\n        this._disposeTextures();\n        this._shareOutputWithPostProcess = postProcess;\n        return this;\n    };\n    /**\n     * Reverses the effect of calling shareOutputWith and returns the post process back to its original state.\n     * This should be called if the post process that shares output with this post process is disabled/disposed.\n     */\n    PostProcess.prototype.useOwnOutput = function () {\n        if (this._textures.length == 0) {\n            this._textures = new SmartArray(2);\n        }\n        this._shareOutputWithPostProcess = null;\n    };\n    /**\n     * Updates the effect with the current post process compile time values and recompiles the shader.\n     * @param defines Define statements that should be added at the beginning of the shader. (default: null)\n     * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\n     * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\n     * @param onCompiled Called when the shader has been compiled.\n     * @param onError Called if there is an error when compiling a shader.\n     * @param vertexUrl The url of the vertex shader to be used (default: the one given at construction time)\n     * @param fragmentUrl The url of the fragment shader to be used (default: the one given at construction time)\n     */\n    PostProcess.prototype.updateEffect = function (defines, uniforms, samplers, indexParameters, onCompiled, onError, vertexUrl, fragmentUrl) {\n        if (defines === void 0) { defines = null; }\n        if (uniforms === void 0) { uniforms = null; }\n        if (samplers === void 0) { samplers = null; }\n        this._postProcessDefines = defines;\n        this._drawWrapper.effect = this._engine.createEffect({ vertex: vertexUrl !== null && vertexUrl !== void 0 ? vertexUrl : this._vertexUrl, fragment: fragmentUrl !== null && fragmentUrl !== void 0 ? fragmentUrl : this._fragmentUrl }, [\"position\"], uniforms || this._parameters, samplers || this._samplers, defines !== null ? defines : \"\", undefined, onCompiled, onError, indexParameters || this._indexParameters);\n    };\n    /**\n     * The post process is reusable if it can be used multiple times within one frame.\n     * @returns If the post process is reusable\n     */\n    PostProcess.prototype.isReusable = function () {\n        return this._reusable;\n    };\n    /** invalidate frameBuffer to hint the postprocess to create a depth buffer */\n    PostProcess.prototype.markTextureDirty = function () {\n        this.width = -1;\n    };\n    PostProcess.prototype._createRenderTargetTexture = function (textureSize, textureOptions, channel) {\n        if (channel === void 0) { channel = 0; }\n        for (var i = 0; i < this._textureCache.length; i++) {\n            if (this._textureCache[i].texture.width === textureSize.width &&\n                this._textureCache[i].texture.height === textureSize.height &&\n                this._textureCache[i].postProcessChannel === channel &&\n                this._textureCache[i].texture._generateDepthBuffer === textureOptions.generateDepthBuffer) {\n                return this._textureCache[i].texture;\n            }\n        }\n        var tex = this._engine.createRenderTargetTexture(textureSize, textureOptions);\n        this._textureCache.push({ texture: tex, postProcessChannel: channel, lastUsedRenderId: -1 });\n        return tex;\n    };\n    PostProcess.prototype._flushTextureCache = function () {\n        var currentRenderId = this._renderId;\n        for (var i = this._textureCache.length - 1; i >= 0; i--) {\n            if (currentRenderId - this._textureCache[i].lastUsedRenderId > 100) {\n                var currentlyUsed = false;\n                for (var j = 0; j < this._textures.length; j++) {\n                    if (this._textures.data[j] === this._textureCache[i].texture) {\n                        currentlyUsed = true;\n                        break;\n                    }\n                }\n                if (!currentlyUsed) {\n                    this._textureCache[i].texture.dispose();\n                    this._textureCache.splice(i, 1);\n                }\n            }\n        }\n    };\n    PostProcess.prototype._resize = function (width, height, camera, needMipMaps, forceDepthStencil) {\n        if (this._textures.length > 0) {\n            this._textures.reset();\n        }\n        this.width = width;\n        this.height = height;\n        var firstPP = null;\n        for (var i = 0; i < camera._postProcesses.length; i++) {\n            if (camera._postProcesses[i] !== null) {\n                firstPP = camera._postProcesses[i];\n                break;\n            }\n        }\n        var textureSize = { width: this.width, height: this.height };\n        var textureOptions = {\n            generateMipMaps: needMipMaps,\n            generateDepthBuffer: forceDepthStencil || firstPP === this,\n            generateStencilBuffer: (forceDepthStencil || firstPP === this) && this._engine.isStencilEnable,\n            samplingMode: this.renderTargetSamplingMode,\n            type: this._textureType,\n            format: this._textureFormat,\n        };\n        this._textures.push(this._createRenderTargetTexture(textureSize, textureOptions, 0));\n        if (this._reusable) {\n            this._textures.push(this._createRenderTargetTexture(textureSize, textureOptions, 1));\n        }\n        this._texelSize.copyFromFloats(1.0 / this.width, 1.0 / this.height);\n        this.onSizeChangedObservable.notifyObservers(this);\n    };\n    /**\n     * Activates the post process by intializing the textures to be used when executed. Notifies onActivateObservable.\n     * When this post process is used in a pipeline, this is call will bind the input texture of this post process to the output of the previous.\n     * @param camera The camera that will be used in the post process. This camera will be used when calling onActivateObservable.\n     * @param sourceTexture The source texture to be inspected to get the width and height if not specified in the post process constructor. (default: null)\n     * @param forceDepthStencil If true, a depth and stencil buffer will be generated. (default: false)\n     * @returns The render target wrapper that was bound to be written to.\n     */\n    PostProcess.prototype.activate = function (camera, sourceTexture, forceDepthStencil) {\n        var _this = this;\n        var _a, _b;\n        if (sourceTexture === void 0) { sourceTexture = null; }\n        camera = camera || this._camera;\n        var scene = camera.getScene();\n        var engine = scene.getEngine();\n        var maxSize = engine.getCaps().maxTextureSize;\n        var requiredWidth = ((sourceTexture ? sourceTexture.width : this._engine.getRenderWidth(true)) * this._options) | 0;\n        var requiredHeight = ((sourceTexture ? sourceTexture.height : this._engine.getRenderHeight(true)) * this._options) | 0;\n        // If rendering to a webvr camera's left or right eye only half the width should be used to avoid resize when rendered to screen\n        var webVRCamera = camera.parent;\n        if (webVRCamera && (webVRCamera.leftCamera == camera || webVRCamera.rightCamera == camera)) {\n            requiredWidth /= 2;\n        }\n        var desiredWidth = this._options.width || requiredWidth;\n        var desiredHeight = this._options.height || requiredHeight;\n        var needMipMaps = this.renderTargetSamplingMode !== 7 &&\n            this.renderTargetSamplingMode !== 1 &&\n            this.renderTargetSamplingMode !== 2;\n        if (!this._shareOutputWithPostProcess && !this._forcedOutputTexture) {\n            if (this.adaptScaleToCurrentViewport) {\n                var currentViewport = engine.currentViewport;\n                if (currentViewport) {\n                    desiredWidth *= currentViewport.width;\n                    desiredHeight *= currentViewport.height;\n                }\n            }\n            if (needMipMaps || this.alwaysForcePOT) {\n                if (!this._options.width) {\n                    desiredWidth = engine.needPOTTextures ? Engine.GetExponentOfTwo(desiredWidth, maxSize, this.scaleMode) : desiredWidth;\n                }\n                if (!this._options.height) {\n                    desiredHeight = engine.needPOTTextures ? Engine.GetExponentOfTwo(desiredHeight, maxSize, this.scaleMode) : desiredHeight;\n                }\n            }\n            if (this.width !== desiredWidth || this.height !== desiredHeight) {\n                this._resize(desiredWidth, desiredHeight, camera, needMipMaps, forceDepthStencil);\n            }\n            this._textures.forEach(function (texture) {\n                if (texture.samples !== _this.samples) {\n                    _this._engine.updateRenderTargetTextureSampleCount(texture, _this.samples);\n                }\n            });\n            this._flushTextureCache();\n            this._renderId++;\n        }\n        var target;\n        if (this._shareOutputWithPostProcess) {\n            target = this._shareOutputWithPostProcess.inputTexture;\n        }\n        else if (this._forcedOutputTexture) {\n            target = this._forcedOutputTexture;\n            this.width = this._forcedOutputTexture.width;\n            this.height = this._forcedOutputTexture.height;\n        }\n        else {\n            target = this.inputTexture;\n            var cache = void 0;\n            for (var i = 0; i < this._textureCache.length; i++) {\n                if (this._textureCache[i].texture === target) {\n                    cache = this._textureCache[i];\n                    break;\n                }\n            }\n            if (cache) {\n                cache.lastUsedRenderId = this._renderId;\n            }\n        }\n        // Bind the input of this post process to be used as the output of the previous post process.\n        if (this.enablePixelPerfectMode) {\n            this._scaleRatio.copyFromFloats(requiredWidth / desiredWidth, requiredHeight / desiredHeight);\n            this._engine.bindFramebuffer(target, 0, requiredWidth, requiredHeight, this.forceFullscreenViewport);\n        }\n        else {\n            this._scaleRatio.copyFromFloats(1, 1);\n            this._engine.bindFramebuffer(target, 0, undefined, undefined, this.forceFullscreenViewport);\n        }\n        (_b = (_a = this._engine)._debugInsertMarker) === null || _b === void 0 ? void 0 : _b.call(_a, \"post process \".concat(this.name, \" input\"));\n        this.onActivateObservable.notifyObservers(camera);\n        // Clear\n        if (this.autoClear && this.alphaMode === 0) {\n            this._engine.clear(this.clearColor ? this.clearColor : scene.clearColor, scene._allowPostProcessClearColor, true, true);\n        }\n        if (this._reusable) {\n            this._currentRenderTextureInd = (this._currentRenderTextureInd + 1) % 2;\n        }\n        return target;\n    };\n    Object.defineProperty(PostProcess.prototype, \"isSupported\", {\n        /**\n         * If the post process is supported.\n         */\n        get: function () {\n            return this._drawWrapper.effect.isSupported;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PostProcess.prototype, \"aspectRatio\", {\n        /**\n         * The aspect ratio of the output texture.\n         */\n        get: function () {\n            if (this._shareOutputWithPostProcess) {\n                return this._shareOutputWithPostProcess.aspectRatio;\n            }\n            if (this._forcedOutputTexture) {\n                return this._forcedOutputTexture.width / this._forcedOutputTexture.height;\n            }\n            return this.width / this.height;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get a value indicating if the post-process is ready to be used\n     * @returns true if the post-process is ready (shader is compiled)\n     */\n    PostProcess.prototype.isReady = function () {\n        var _a, _b;\n        return (_b = (_a = this._drawWrapper.effect) === null || _a === void 0 ? void 0 : _a.isReady()) !== null && _b !== void 0 ? _b : false;\n    };\n    /**\n     * Binds all textures and uniforms to the shader, this will be run on every pass.\n     * @returns the effect corresponding to this post process. Null if not compiled or not ready.\n     */\n    PostProcess.prototype.apply = function () {\n        var _a;\n        // Check\n        if (!((_a = this._drawWrapper.effect) === null || _a === void 0 ? void 0 : _a.isReady())) {\n            return null;\n        }\n        // States\n        this._engine.enableEffect(this._drawWrapper);\n        this._engine.setState(false);\n        this._engine.setDepthBuffer(false);\n        this._engine.setDepthWrite(false);\n        // Alpha\n        this._engine.setAlphaMode(this.alphaMode);\n        if (this.alphaConstants) {\n            this.getEngine().setAlphaConstants(this.alphaConstants.r, this.alphaConstants.g, this.alphaConstants.b, this.alphaConstants.a);\n        }\n        // Bind the output texture of the preivous post process as the input to this post process.\n        var source;\n        if (this._shareOutputWithPostProcess) {\n            source = this._shareOutputWithPostProcess.inputTexture;\n        }\n        else if (this._forcedOutputTexture) {\n            source = this._forcedOutputTexture;\n        }\n        else {\n            source = this.inputTexture;\n        }\n        if (!this.externalTextureSamplerBinding) {\n            this._drawWrapper.effect._bindTexture(\"textureSampler\", source === null || source === void 0 ? void 0 : source.texture);\n        }\n        // Parameters\n        this._drawWrapper.effect.setVector2(\"scale\", this._scaleRatio);\n        this.onApplyObservable.notifyObservers(this._drawWrapper.effect);\n        return this._drawWrapper.effect;\n    };\n    PostProcess.prototype._disposeTextures = function () {\n        if (this._shareOutputWithPostProcess || this._forcedOutputTexture) {\n            this._disposeTextureCache();\n            return;\n        }\n        this._disposeTextureCache();\n        this._textures.dispose();\n    };\n    PostProcess.prototype._disposeTextureCache = function () {\n        for (var i = this._textureCache.length - 1; i >= 0; i--) {\n            this._textureCache[i].texture.dispose();\n        }\n        this._textureCache.length = 0;\n    };\n    /**\n     * Sets the required values to the prepass renderer.\n     * @param prePassRenderer defines the prepass renderer to setup.\n     * @returns true if the pre pass is needed.\n     */\n    PostProcess.prototype.setPrePassRenderer = function (prePassRenderer) {\n        if (this._prePassEffectConfiguration) {\n            this._prePassEffectConfiguration = prePassRenderer.addEffectConfiguration(this._prePassEffectConfiguration);\n            this._prePassEffectConfiguration.enabled = true;\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Disposes the post process.\n     * @param camera The camera to dispose the post process on.\n     */\n    PostProcess.prototype.dispose = function (camera) {\n        camera = camera || this._camera;\n        this._disposeTextures();\n        var index;\n        if (this._scene) {\n            index = this._scene.postProcesses.indexOf(this);\n            if (index !== -1) {\n                this._scene.postProcesses.splice(index, 1);\n            }\n        }\n        if (this._parentContainer) {\n            var index_1 = this._parentContainer.postProcesses.indexOf(this);\n            if (index_1 > -1) {\n                this._parentContainer.postProcesses.splice(index_1, 1);\n            }\n            this._parentContainer = null;\n        }\n        index = this._engine.postProcesses.indexOf(this);\n        if (index !== -1) {\n            this._engine.postProcesses.splice(index, 1);\n        }\n        if (!camera) {\n            return;\n        }\n        camera.detachPostProcess(this);\n        index = camera._postProcesses.indexOf(this);\n        if (index === 0 && camera._postProcesses.length > 0) {\n            var firstPostProcess = this._camera._getFirstPostProcess();\n            if (firstPostProcess) {\n                firstPostProcess.markTextureDirty();\n            }\n        }\n        this.onActivateObservable.clear();\n        this.onAfterRenderObservable.clear();\n        this.onApplyObservable.clear();\n        this.onBeforeRenderObservable.clear();\n        this.onSizeChangedObservable.clear();\n    };\n    /**\n     * Serializes the post process to a JSON object\n     * @returns the JSON object\n     */\n    PostProcess.prototype.serialize = function () {\n        var serializationObject = SerializationHelper.Serialize(this);\n        var camera = this.getCamera() || (this._scene && this._scene.activeCamera);\n        serializationObject.customType = \"BABYLON.\" + this.getClassName();\n        serializationObject.cameraId = camera ? camera.id : null;\n        serializationObject.reusable = this._reusable;\n        serializationObject.textureType = this._textureType;\n        serializationObject.fragmentUrl = this._fragmentUrl;\n        serializationObject.parameters = this._parameters;\n        serializationObject.samplers = this._samplers;\n        serializationObject.options = this._options;\n        serializationObject.defines = this._postProcessDefines;\n        serializationObject.textureFormat = this._textureFormat;\n        serializationObject.vertexUrl = this._vertexUrl;\n        serializationObject.indexParameters = this._indexParameters;\n        return serializationObject;\n    };\n    /**\n     * Clones this post process\n     * @returns a new post process similar to this one\n     */\n    PostProcess.prototype.clone = function () {\n        var serializationObject = this.serialize();\n        serializationObject._engine = this._engine;\n        serializationObject.cameraId = null;\n        var result = PostProcess.Parse(serializationObject, this._scene, \"\");\n        if (!result) {\n            return null;\n        }\n        result.onActivateObservable = this.onActivateObservable.clone();\n        result.onSizeChangedObservable = this.onSizeChangedObservable.clone();\n        result.onApplyObservable = this.onApplyObservable.clone();\n        result.onBeforeRenderObservable = this.onBeforeRenderObservable.clone();\n        result.onAfterRenderObservable = this.onAfterRenderObservable.clone();\n        result._prePassEffectConfiguration = this._prePassEffectConfiguration;\n        return result;\n    };\n    /**\n     * Creates a material from parsed material data\n     * @param parsedPostProcess defines parsed post process data\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures\n     * @returns a new post process\n     */\n    PostProcess.Parse = function (parsedPostProcess, scene, rootUrl) {\n        var postProcessType = GetClass(parsedPostProcess.customType);\n        if (!postProcessType || !postProcessType._Parse) {\n            return null;\n        }\n        var camera = scene ? scene.getCameraById(parsedPostProcess.cameraId) : null;\n        return postProcessType._Parse(parsedPostProcess, camera, scene, rootUrl);\n    };\n    /**\n     * @param parsedPostProcess\n     * @param targetCamera\n     * @param scene\n     * @param rootUrl\n     * @hidden\n     */\n    PostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n        return SerializationHelper.Parse(function () {\n            return new PostProcess(parsedPostProcess.name, parsedPostProcess.fragmentUrl, parsedPostProcess.parameters, parsedPostProcess.samplers, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, parsedPostProcess._engine, parsedPostProcess.reusable, parsedPostProcess.defines, parsedPostProcess.textureType, parsedPostProcess.vertexUrl, parsedPostProcess.indexParameters, false, parsedPostProcess.textureFormat);\n        }, parsedPostProcess, scene, rootUrl);\n    };\n    __decorate([\n        serialize()\n    ], PostProcess.prototype, \"uniqueId\", void 0);\n    __decorate([\n        serialize()\n    ], PostProcess.prototype, \"name\", void 0);\n    __decorate([\n        serialize()\n    ], PostProcess.prototype, \"width\", void 0);\n    __decorate([\n        serialize()\n    ], PostProcess.prototype, \"height\", void 0);\n    __decorate([\n        serialize()\n    ], PostProcess.prototype, \"renderTargetSamplingMode\", void 0);\n    __decorate([\n        serializeAsColor4()\n    ], PostProcess.prototype, \"clearColor\", void 0);\n    __decorate([\n        serialize()\n    ], PostProcess.prototype, \"autoClear\", void 0);\n    __decorate([\n        serialize()\n    ], PostProcess.prototype, \"alphaMode\", void 0);\n    __decorate([\n        serialize()\n    ], PostProcess.prototype, \"alphaConstants\", void 0);\n    __decorate([\n        serialize()\n    ], PostProcess.prototype, \"enablePixelPerfectMode\", void 0);\n    __decorate([\n        serialize()\n    ], PostProcess.prototype, \"forceFullscreenViewport\", void 0);\n    __decorate([\n        serialize()\n    ], PostProcess.prototype, \"scaleMode\", void 0);\n    __decorate([\n        serialize()\n    ], PostProcess.prototype, \"alwaysForcePOT\", void 0);\n    __decorate([\n        serialize(\"samples\")\n    ], PostProcess.prototype, \"_samples\", void 0);\n    __decorate([\n        serialize()\n    ], PostProcess.prototype, \"adaptScaleToCurrentViewport\", void 0);\n    return PostProcess;\n}());\nexport { PostProcess };\nRegisterClass(\"BABYLON.PostProcess\", PostProcess);\n//# sourceMappingURL=postProcess.js.map","import { VertexBuffer } from \"../Buffers/buffer.js\";\n\n/**\n * PostProcessManager is used to manage one or more post processes or post process pipelines\n * See https://doc.babylonjs.com/how_to/how_to_use_postprocesses\n */\nvar PostProcessManager = /** @class */ (function () {\n    /**\n     * Creates a new instance PostProcess\n     * @param scene The scene that the post process is associated with.\n     */\n    function PostProcessManager(scene) {\n        this._vertexBuffers = {};\n        this._scene = scene;\n    }\n    PostProcessManager.prototype._prepareBuffers = function () {\n        if (this._vertexBuffers[VertexBuffer.PositionKind]) {\n            return;\n        }\n        // VBO\n        var vertices = [];\n        vertices.push(1, 1);\n        vertices.push(-1, 1);\n        vertices.push(-1, -1);\n        vertices.push(1, -1);\n        this._vertexBuffers[VertexBuffer.PositionKind] = new VertexBuffer(this._scene.getEngine(), vertices, VertexBuffer.PositionKind, false, false, 2);\n        this._buildIndexBuffer();\n    };\n    PostProcessManager.prototype._buildIndexBuffer = function () {\n        // Indices\n        var indices = [];\n        indices.push(0);\n        indices.push(1);\n        indices.push(2);\n        indices.push(0);\n        indices.push(2);\n        indices.push(3);\n        this._indexBuffer = this._scene.getEngine().createIndexBuffer(indices);\n    };\n    /**\n     * Rebuilds the vertex buffers of the manager.\n     * @hidden\n     */\n    PostProcessManager.prototype._rebuild = function () {\n        var vb = this._vertexBuffers[VertexBuffer.PositionKind];\n        if (!vb) {\n            return;\n        }\n        vb._rebuild();\n        this._buildIndexBuffer();\n    };\n    // Methods\n    /**\n     * Prepares a frame to be run through a post process.\n     * @param sourceTexture The input texture to the post processes. (default: null)\n     * @param postProcesses An array of post processes to be run. (default: null)\n     * @returns True if the post processes were able to be run.\n     * @hidden\n     */\n    PostProcessManager.prototype._prepareFrame = function (sourceTexture, postProcesses) {\n        if (sourceTexture === void 0) { sourceTexture = null; }\n        if (postProcesses === void 0) { postProcesses = null; }\n        var camera = this._scene.activeCamera;\n        if (!camera) {\n            return false;\n        }\n        postProcesses = postProcesses || camera._postProcesses.filter(function (pp) {\n            return pp != null;\n        });\n        if (!postProcesses || postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\n            return false;\n        }\n        postProcesses[0].activate(camera, sourceTexture, postProcesses !== null && postProcesses !== undefined);\n        return true;\n    };\n    /**\n     * Manually render a set of post processes to a texture.\n     * Please note, the frame buffer won't be unbound after the call in case you have more render to do.\n     * @param postProcesses An array of post processes to be run.\n     * @param targetTexture The render target wrapper to render to.\n     * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight\n     * @param faceIndex defines the face to render to if a cubemap is defined as the target\n     * @param lodLevel defines which lod of the texture to render to\n     * @param doNotBindFrambuffer If set to true, assumes that the framebuffer has been bound previously\n     */\n    PostProcessManager.prototype.directRender = function (postProcesses, targetTexture, forceFullscreenViewport, faceIndex, lodLevel, doNotBindFrambuffer) {\n        var _a;\n        if (targetTexture === void 0) { targetTexture = null; }\n        if (forceFullscreenViewport === void 0) { forceFullscreenViewport = false; }\n        if (faceIndex === void 0) { faceIndex = 0; }\n        if (lodLevel === void 0) { lodLevel = 0; }\n        if (doNotBindFrambuffer === void 0) { doNotBindFrambuffer = false; }\n        var engine = this._scene.getEngine();\n        for (var index = 0; index < postProcesses.length; index++) {\n            if (index < postProcesses.length - 1) {\n                postProcesses[index + 1].activate(this._scene.activeCamera, targetTexture === null || targetTexture === void 0 ? void 0 : targetTexture.texture);\n            }\n            else {\n                if (targetTexture) {\n                    engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport, lodLevel);\n                }\n                else if (!doNotBindFrambuffer) {\n                    engine.restoreDefaultFramebuffer();\n                }\n                (_a = engine._debugInsertMarker) === null || _a === void 0 ? void 0 : _a.call(engine, \"post process \".concat(postProcesses[index].name, \" output\"));\n            }\n            var pp = postProcesses[index];\n            var effect = pp.apply();\n            if (effect) {\n                pp.onBeforeRenderObservable.notifyObservers(effect);\n                // VBOs\n                this._prepareBuffers();\n                engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\n                // Draw order\n                engine.drawElementsType(0, 0, 6);\n                pp.onAfterRenderObservable.notifyObservers(effect);\n            }\n        }\n        // Restore depth buffer\n        engine.setDepthBuffer(true);\n        engine.setDepthWrite(true);\n    };\n    /**\n     * Finalize the result of the output of the postprocesses.\n     * @param doNotPresent If true the result will not be displayed to the screen.\n     * @param targetTexture The render target wrapper to render to.\n     * @param faceIndex The index of the face to bind the target texture to.\n     * @param postProcesses The array of post processes to render.\n     * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight (default: false)\n     * @hidden\n     */\n    PostProcessManager.prototype._finalizeFrame = function (doNotPresent, targetTexture, faceIndex, postProcesses, forceFullscreenViewport) {\n        var _a;\n        if (forceFullscreenViewport === void 0) { forceFullscreenViewport = false; }\n        var camera = this._scene.activeCamera;\n        if (!camera) {\n            return;\n        }\n        postProcesses = postProcesses || camera._postProcesses.filter(function (pp) {\n            return pp != null;\n        });\n        if (postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\n            return;\n        }\n        var engine = this._scene.getEngine();\n        for (var index = 0, len = postProcesses.length; index < len; index++) {\n            var pp = postProcesses[index];\n            if (index < len - 1) {\n                pp._outputTexture = postProcesses[index + 1].activate(camera, targetTexture === null || targetTexture === void 0 ? void 0 : targetTexture.texture);\n            }\n            else {\n                if (targetTexture) {\n                    engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport);\n                    pp._outputTexture = targetTexture;\n                }\n                else {\n                    engine.restoreDefaultFramebuffer();\n                    pp._outputTexture = null;\n                }\n                (_a = engine._debugInsertMarker) === null || _a === void 0 ? void 0 : _a.call(engine, \"post process \".concat(postProcesses[index].name, \" output\"));\n            }\n            if (doNotPresent) {\n                break;\n            }\n            var effect = pp.apply();\n            if (effect) {\n                pp.onBeforeRenderObservable.notifyObservers(effect);\n                // VBOs\n                this._prepareBuffers();\n                engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\n                // Draw order\n                engine.drawElementsType(0, 0, 6);\n                pp.onAfterRenderObservable.notifyObservers(effect);\n            }\n        }\n        // Restore states\n        engine.setDepthBuffer(true);\n        engine.setDepthWrite(true);\n        engine.setAlphaMode(0);\n    };\n    /**\n     * Disposes of the post process manager.\n     */\n    PostProcessManager.prototype.dispose = function () {\n        var buffer = this._vertexBuffers[VertexBuffer.PositionKind];\n        if (buffer) {\n            buffer.dispose();\n            this._vertexBuffers[VertexBuffer.PositionKind] = null;\n        }\n        if (this._indexBuffer) {\n            this._scene.getEngine()._releaseBuffer(this._indexBuffer);\n            this._indexBuffer = null;\n        }\n    };\n    return PostProcessManager;\n}());\nexport { PostProcessManager };\n//# sourceMappingURL=postProcessManager.js.map","import { __extends } from \"tslib\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/stereoscopicInterlace.fragment.js\";\n/**\n * StereoscopicInterlacePostProcessI used to render stereo views from a rigged camera with support for alternate line interlacing\n */\nvar StereoscopicInterlacePostProcessI = /** @class */ (function (_super) {\n    __extends(StereoscopicInterlacePostProcessI, _super);\n    /**\n     * Initializes a StereoscopicInterlacePostProcessI\n     * @param name The name of the effect.\n     * @param rigCameras The rig cameras to be applied to the post process\n     * @param isStereoscopicHoriz If the rendered results are horizontal or vertical\n     * @param isStereoscopicInterlaced If the rendered results are alternate line interlaced\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     */\n    function StereoscopicInterlacePostProcessI(name, rigCameras, isStereoscopicHoriz, isStereoscopicInterlaced, samplingMode, engine, reusable) {\n        var _this = _super.call(this, name, \"stereoscopicInterlace\", [\"stepSize\"], [\"camASampler\"], 1, rigCameras[1], samplingMode, engine, reusable, isStereoscopicInterlaced ? \"#define IS_STEREOSCOPIC_INTERLACED 1\" : isStereoscopicHoriz ? \"#define IS_STEREOSCOPIC_HORIZ 1\" : undefined) || this;\n        _this._passedProcess = rigCameras[0]._rigPostProcess;\n        _this._stepSize = new Vector2(1 / _this.width, 1 / _this.height);\n        _this.onSizeChangedObservable.add(function () {\n            _this._stepSize = new Vector2(1 / _this.width, 1 / _this.height);\n        });\n        _this.onApplyObservable.add(function (effect) {\n            effect.setTextureFromPostProcess(\"camASampler\", _this._passedProcess);\n            effect.setFloat2(\"stepSize\", _this._stepSize.x, _this._stepSize.y);\n        });\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"StereoscopicInterlacePostProcessI\" string\n     */\n    StereoscopicInterlacePostProcessI.prototype.getClassName = function () {\n        return \"StereoscopicInterlacePostProcessI\";\n    };\n    return StereoscopicInterlacePostProcessI;\n}(PostProcess));\nexport { StereoscopicInterlacePostProcessI };\n/**\n * StereoscopicInterlacePostProcess used to render stereo views from a rigged camera\n */\nvar StereoscopicInterlacePostProcess = /** @class */ (function (_super) {\n    __extends(StereoscopicInterlacePostProcess, _super);\n    /**\n     * Initializes a StereoscopicInterlacePostProcess\n     * @param name The name of the effect.\n     * @param rigCameras The rig cameras to be applied to the post process\n     * @param isStereoscopicHoriz If the rendered results are horizontal or vertical\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n     * @param engine The engine which the post process will be applied. (default: current engine)\n     * @param reusable If the post process can be reused on the same frame. (default: false)\n     */\n    function StereoscopicInterlacePostProcess(name, rigCameras, isStereoscopicHoriz, samplingMode, engine, reusable) {\n        var _this = _super.call(this, name, \"stereoscopicInterlace\", [\"stepSize\"], [\"camASampler\"], 1, rigCameras[1], samplingMode, engine, reusable, isStereoscopicHoriz ? \"#define IS_STEREOSCOPIC_HORIZ 1\" : undefined) || this;\n        _this._passedProcess = rigCameras[0]._rigPostProcess;\n        _this._stepSize = new Vector2(1 / _this.width, 1 / _this.height);\n        _this.onSizeChangedObservable.add(function () {\n            _this._stepSize = new Vector2(1 / _this.width, 1 / _this.height);\n        });\n        _this.onApplyObservable.add(function (effect) {\n            effect.setTextureFromPostProcess(\"camASampler\", _this._passedProcess);\n            effect.setFloat2(\"stepSize\", _this._stepSize.x, _this._stepSize.y);\n        });\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"StereoscopicInterlacePostProcess\" string\n     */\n    StereoscopicInterlacePostProcess.prototype.getClassName = function () {\n        return \"StereoscopicInterlacePostProcess\";\n    };\n    return StereoscopicInterlacePostProcess;\n}(PostProcess));\nexport { StereoscopicInterlacePostProcess };\n//# sourceMappingURL=stereoscopicInterlacePostProcess.js.map","import { __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\n\nimport { Logger } from \"../Misc/logger.js\";\nimport \"../Shaders/imageProcessing.fragment.js\";\nimport \"../Shaders/subSurfaceScattering.fragment.js\";\nimport \"../Shaders/postprocess.vertex.js\";\n/**\n * Sub surface scattering post process\n */\nvar SubSurfaceScatteringPostProcess = /** @class */ (function (_super) {\n    __extends(SubSurfaceScatteringPostProcess, _super);\n    function SubSurfaceScatteringPostProcess(name, scene, options, camera, samplingMode, engine, reusable, textureType) {\n        if (camera === void 0) { camera = null; }\n        if (textureType === void 0) { textureType = 0; }\n        var _this = _super.call(this, name, \"subSurfaceScattering\", [\"texelSize\", \"viewportSize\", \"metersPerUnit\"], [\"diffusionS\", \"diffusionD\", \"filterRadii\", \"irradianceSampler\", \"depthSampler\", \"albedoSampler\"], options, camera, samplingMode || Texture.BILINEAR_SAMPLINGMODE, engine, reusable, null, textureType, \"postprocess\", undefined, true) || this;\n        _this._scene = scene;\n        _this.updateEffect();\n        _this.onApplyObservable.add(function (effect) {\n            if (!scene.prePassRenderer || !scene.subSurfaceConfiguration) {\n                Logger.Error(\"PrePass and subsurface configuration needs to be enabled for subsurface scattering.\");\n                return;\n            }\n            var texelSize = _this.texelSize;\n            effect.setFloat(\"metersPerUnit\", scene.subSurfaceConfiguration.metersPerUnit);\n            effect.setFloat2(\"texelSize\", texelSize.x, texelSize.y);\n            effect.setTexture(\"irradianceSampler\", scene.prePassRenderer.getRenderTarget().textures[scene.prePassRenderer.getIndex(0)]);\n            effect.setTexture(\"depthSampler\", scene.prePassRenderer.getRenderTarget().textures[scene.prePassRenderer.getIndex(5)]);\n            effect.setTexture(\"albedoSampler\", scene.prePassRenderer.getRenderTarget().textures[scene.prePassRenderer.getIndex(7)]);\n            effect.setFloat2(\"viewportSize\", Math.tan(scene.activeCamera.fov / 2) * scene.getEngine().getAspectRatio(scene.activeCamera, true), Math.tan(scene.activeCamera.fov / 2));\n            effect.setArray3(\"diffusionS\", scene.subSurfaceConfiguration.ssDiffusionS);\n            effect.setArray(\"diffusionD\", scene.subSurfaceConfiguration.ssDiffusionD);\n            effect.setArray(\"filterRadii\", scene.subSurfaceConfiguration.ssFilterRadii);\n        });\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"SubSurfaceScatteringPostProcess\" string\n     */\n    SubSurfaceScatteringPostProcess.prototype.getClassName = function () {\n        return \"SubSurfaceScatteringPostProcess\";\n    };\n    return SubSurfaceScatteringPostProcess;\n}(PostProcess));\nexport { SubSurfaceScatteringPostProcess };\n//# sourceMappingURL=subSurfaceScatteringPostProcess.js.map","import { __extends } from \"tslib\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/vrDistortionCorrection.fragment.js\";\n/**\n * VRDistortionCorrectionPostProcess used for mobile VR\n */\nvar VRDistortionCorrectionPostProcess = /** @class */ (function (_super) {\n    __extends(VRDistortionCorrectionPostProcess, _super);\n    /**\n     * Initializes the VRDistortionCorrectionPostProcess\n     * @param name The name of the effect.\n     * @param camera The camera to apply the render pass to.\n     * @param isRightEye If this is for the right eye distortion\n     * @param vrMetrics All the required metrics for the VR camera\n     */\n    function VRDistortionCorrectionPostProcess(name, camera, isRightEye, vrMetrics) {\n        var _this = _super.call(this, name, \"vrDistortionCorrection\", [\"LensCenter\", \"Scale\", \"ScaleIn\", \"HmdWarpParam\"], null, vrMetrics.postProcessScaleFactor, camera, Texture.BILINEAR_SAMPLINGMODE) || this;\n        _this._isRightEye = isRightEye;\n        _this._distortionFactors = vrMetrics.distortionK;\n        _this._postProcessScaleFactor = vrMetrics.postProcessScaleFactor;\n        _this._lensCenterOffset = vrMetrics.lensCenterOffset;\n        _this.adaptScaleToCurrentViewport = true;\n        _this.onSizeChangedObservable.add(function () {\n            _this._scaleIn = new Vector2(2, 2 / _this.aspectRatio);\n            _this._scaleFactor = new Vector2(0.5 * (1 / _this._postProcessScaleFactor), 0.5 * (1 / _this._postProcessScaleFactor) * _this.aspectRatio);\n            _this._lensCenter = new Vector2(_this._isRightEye ? 0.5 - _this._lensCenterOffset * 0.5 : 0.5 + _this._lensCenterOffset * 0.5, 0.5);\n        });\n        _this.onApplyObservable.add(function (effect) {\n            effect.setFloat2(\"LensCenter\", _this._lensCenter.x, _this._lensCenter.y);\n            effect.setFloat2(\"Scale\", _this._scaleFactor.x, _this._scaleFactor.y);\n            effect.setFloat2(\"ScaleIn\", _this._scaleIn.x, _this._scaleIn.y);\n            effect.setFloat4(\"HmdWarpParam\", _this._distortionFactors[0], _this._distortionFactors[1], _this._distortionFactors[2], _this._distortionFactors[3]);\n        });\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"VRDistortionCorrectionPostProcess\" string\n     */\n    VRDistortionCorrectionPostProcess.prototype.getClassName = function () {\n        return \"VRDistortionCorrectionPostProcess\";\n    };\n    return VRDistortionCorrectionPostProcess;\n}(PostProcess));\nexport { VRDistortionCorrectionPostProcess };\n//# sourceMappingURL=vrDistortionCorrectionPostProcess.js.map","import { __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/vrMultiviewToSingleview.fragment.js\";\nimport \"../Engines/Extensions/engine.multiview.js\";\n/**\n * VRMultiviewToSingleview used to convert multiview texture arrays to standard textures for scenarios such as webVR\n * This will not be used for webXR as it supports displaying texture arrays directly\n */\nvar VRMultiviewToSingleviewPostProcess = /** @class */ (function (_super) {\n    __extends(VRMultiviewToSingleviewPostProcess, _super);\n    /**\n     * Initializes a VRMultiviewToSingleview\n     * @param name name of the post process\n     * @param camera camera to be applied to\n     * @param scaleFactor scaling factor to the size of the output texture\n     */\n    function VRMultiviewToSingleviewPostProcess(name, camera, scaleFactor) {\n        var _this = _super.call(this, name, \"vrMultiviewToSingleview\", [\"imageIndex\"], [\"multiviewSampler\"], scaleFactor, camera, Texture.BILINEAR_SAMPLINGMODE) || this;\n        _this.onSizeChangedObservable.add(function () { });\n        _this.onApplyObservable.add(function (effect) {\n            if (camera._scene.activeCamera && camera._scene.activeCamera.isLeftCamera) {\n                effect.setInt(\"imageIndex\", 0);\n            }\n            else {\n                effect.setInt(\"imageIndex\", 1);\n            }\n            effect.setTexture(\"multiviewSampler\", camera._multiviewTexture);\n        });\n        return _this;\n    }\n    /**\n     * Gets a string identifying the name of the class\n     * @returns \"VRMultiviewToSingleviewPostProcess\" string\n     */\n    VRMultiviewToSingleviewPostProcess.prototype.getClassName = function () {\n        return \"VRMultiviewToSingleviewPostProcess\";\n    };\n    return VRMultiviewToSingleviewPostProcess;\n}(PostProcess));\nexport { VRMultiviewToSingleviewPostProcess };\n//# sourceMappingURL=vrMultiviewToSingleviewPostProcess.js.map"],"names":["CannonJSPlugin","_useDeltaForWorldStep","iterations","cannonInjection","CANNON","this","name","_physicsMaterials","Array","_fixedTimeStep","_physicsBodysToRemoveAfterStep","_firstFrame","_tmpQuaternion","_minus90X","_plus90X","_tmpPosition","_tmpDeltaPosition","_tmpUnityRotation","BJSCANNON","isSupported","_extendNamespace","world","World","broadphase","NaiveBroadphase","solver","_cannonRaycastResult","RaycastResult","_raycastResult","prototype","setGravity","gravity","vec","set","x","y","z","setTimeStep","timeStep","getTimeStep","executeStep","delta","impostors","_i","impostors_1","length","impostor","type","beforeStep","step","_removeMarkedPhysicsBodiesFromWorld","_this","forEach","physicsBody","removeBody","remove","applyImpulse","force","contactPoint","worldPoint","Vec3","impulse","applyForce","generatePhysicsBody","parent","removePhysicsBody","forceUpdate","isBodyInitRequired","shape","_createShape","oldBody_1","material","_addMaterial","uniqueId","getParam","bodyCreationObject","mass","nativeOptions","key","Object","hasOwnProperty","call","Body","addEventListener","onCollide","afterStep","addShape","addBody","add","param","_processChildMeshes","_updatePhysicsBodyTransformation","mainImpostor","meshChildren","object","getChildMeshes","mainRotation","rotationQuaternion","conjugateToRef","processMesh_1","mesh","childImpostor","getPhysicsImpostor","pPosition","getAbsolutePosition","subtract","q","multiply","resetUpdateFlags","Quaternion","w","filter","m","physicsImpostor","removeEventListener","indexOf","push","generateJoint","impostorJoint","mainBody","connectedBody","connectedImpostor","constraint","jointData","joint","constraintData","pivotA","mainPivot","pivotB","connectedPivot","axisA","mainAxis","axisB","connectedAxis","maxForce","nativeParams","collideConnected","collision","HingeConstraint","DistanceConstraint","maxDistance","springData","Spring","restLength","stiffness","damping","localAnchorA","localAnchorB","LockConstraint","PointToPointConstraint","physicsJoint","addConstraint","forceApplicationCallback","registerAfterPhysicsStep","removeJoint","removeConstraint","unregisterAfterPhysicsStep","friction","restitution","index","mat","currentMat","Material","_checkWithEpsilon","value","returnValue","extendSize","getObjectExtendSize","radiusX","radiusY","radiusZ","Sphere","Math","max","radiusTop","undefined","radiusBottom","height","numSegments","Cylinder","quat","setFromAxisAngle","PI","translation","transformAllPoints","box","scale","Box","Plane","rawVerts","getVerticesData","rawFaces","getIndices","oldPosition","position","clone","oldRotation","rotation","oldQuaternion","copyFromFloats","copyFrom","getParentsRotation","conjugateInPlace","transform","computeWorldMatrix","temp","toArray","Trimesh","oldPosition2","oldRotation2","oldQuaternion2","multiplyInPlace","_createHeightmap","Particle","pointDepth","pos","matrix","arraySize","sqrt","boundingInfo","getBoundingInfo","dim","min","boundingBox","extendSizeWorld","minY","elementSize","i","round","loc","slice","newValue","Heightfield","center","getObjectCenter","getAbsolutePivotPoint","divideInPlace","scaling","quaternion","setDeltaRotation","c","oldPivot","getPivotMatrix","p","setPreTransformMatrix","centerWorld","negate","setDeltaPosition","setTransformationFromPhysicsBody","setPhysicsBodyTransformation","newPosition","newRotation","setLinearVelocity","velocity","setAngularVelocity","angularVelocity","getLinearVelocity","v","getAngularVelocity","setBodyMass","updateMassProperties","getBodyMass","getBodyFriction","setBodyFriction","getBodyRestitution","setBodyRestitution","sleepBody","sleep","wakeUpBody","wakeUp","updateDistanceJoint","distance","setMotor","speed","motorIndex","enableMotor","setMotorSpeed","setLimit","upperLimit","lowerLimit","motorEquation","minForce","syncMeshWithImpostor","body","getRadius","shapes","boundingSphereRadius","getBoxSizeToRef","result","halfExtents","dispose","step_tmp1","engine","dt","timeSinceLastCalled","maxSubSteps","internalStep","time","internalSteps","floor","t0","performance","now","h_div_dt","interpvelo","bodies","j","b","STATIC","sleepState","SLEEPING","vsub","previousPosition","vadd","interpolatedPosition","interpolatedQuaternion","raycast","from","to","reset","raycastClosest","hasHit","setHitData","hitNormalWorld","hitPointWorld","setHitDistance","OimoJSPlugin","oimoInjection","OIMO","_tmpImpostorsArray","_tmpPositionVector","BJSOIMO","clear","contact","contacts","touching","body1","sleeping","body2","collidingImpostor","point","next","invScale","bodyConfig_1","config","size","posShape","rot","rotShape","move","density","checkWithEpsilon_1","globalQuaternion_1","toEulerAngles","radToDeg","subtractToRef","localPosition","sizeX","sizeY","sizeZ","resetQuaternion","updatePosition","removeRigidBody","options","nativeJointData","axe1","asArray","axe2","pos1","pos2","spring","e","parent_1","getPosition","getQuaternion","orientation","syncShapes","awake","linearVelocity","staticBody","setupMass","minDistance","limitMotor","motor","rotationalLimitMotor2","rotationalLimitMotor1","rotationalLimitMotor","radius","halfWidth","halfHeight","halfDepth","_physicsEngine","plugin","component","_getComponent","PhysicsEngineSceneComponent","_addComponent","_physicsTimeAccumulator","message","compound","parts","subTime","getSubTimeStep","onBeforePhysicsObservable","notifyObservers","_step","onAfterPhysicsObservable","defineProperty","get","_physicsImpostor","_disposePhysicsObserver","onDisposeObservable","enumerable","configurable","otherMesh","pivot1","pivot2","createJoint","PhysicsRadialImpulseFalloff","PhysicsUpdraftMode","scene","getDeterministicFrameTime","register","rebuild","disablePhysicsEngine","PhysicsHelper","_scene","getPhysicsEngine","applyRadialExplosionImpulse","origin","radiusOrEventOptions","strength","falloff","getImpostors","PhysicsRadialExplosionEventOptions","event","PhysicsRadialExplosionEvent","affectedImpostorsWithData","impostorHitData","getImpostorHitData","hitData","triggerAffectedImpostorsCallback","applyRadialExplosionForce","gravitationalField","PhysicsGravitationalFieldEvent","updraft","updraftMode","PhysicsUpdraftEventOptions","PhysicsUpdraftEvent","vortex","PhysicsVortexEventOptions","PhysicsVortexEvent","_options","_dataFetched","getData","sphere","_sphere","_intersectsWithSphere","getClassName","direction","intersectsMesh","pickedPoint","distanceFromOrigin","multiplier","Constant","multiplyByFloats","affectedImpostorsCallback","setTimeout","_prepareSphere","isVisible","impostorObject","_updateBoundingInfo","_physicsHelper","_origin","_tickCallback","_tick","bind","enable","registerBeforeRender","disable","unregisterBeforeRender","radialExplosionEvent","_originTop","_originDirection","_cylinderPosition","addToRef","Perpendicular","normalize","_prepareCylinder","cylinder","_cylinder","_getImpostorHitData","_intersectsWithCylinder","impostorObjectCenter","diameter","originOnPlane","originToImpostorDirection","hit","forceX","forceY","forceZ","absoluteDistanceFromOrigin","directionToOrigin","centripetalForceThreshold","centripetalForceMultiplier","updraftForceMultiplier","perpendicularDirection","centrifugalForceMultiplier","segments","Center","PhysicsEngine","_physicsPlugin","DefaultPluginFactory","_impostors","_joints","_subTimeStep","_uniqueIdCounter","Error","newTimeStep","setSubTimeStep","subTimeStep","getPhysicsPluginName","addImpostor","removeImpostor","splice","getPhysicsPlugin","addJoint","physicsPlugin","matchingJoints","getImpostorForPhysicsObject","getImpostorWithPhysicsBody","Epsilon","physicObject","jsonObject","PhysicsImpostor","physicsMass","physicsFriction","physicsRestitution","_pluginData","_bodyUpdateRequired","_onBeforePhysicsStepCallbacks","_onAfterPhysicsStepCallbacks","_onPhysicsCollideCallbacks","_deltaPosition","_isDisposed","soft","_tmpQuat","_tmpQuat2","translate","_deltaRotationConjugated","multiplyToRef","disableBidirectionalTransformation","func","setAbsolutePosition","_deltaRotation","onCollideEvent","otherImpostor","obj","otherImpostors","callback","getScene","pressure","velocityIterations","positionIterations","fixedPoints","margin","path","ignoreParent","_init","setMass","setBodyPressure","getBodyPressure","getBodyStiffness","setBodyStiffness","getBodyVelocityIterations","setBodyVelocityIterations","getBodyPositionIterations","setBodyPositionIterations","_parent","_getPhysicsParent","_physicsBody","setScalingUpdated","IDENTITY_QUATERNION","worldMatrix","decompose","abs","DEFAULT_OBJECT_SIZE","paramName","setParam","executeNativeFunction","registerBeforePhysicsStep","unregisterBeforePhysicsStep","registerOnPhysicsCollide","collideAgainst","collidedAgainstList","unregisterOnPhysicsCollide","some","cbDef","idx","sameList","every","jointType","addAnchor","width","influence","noCollisionBetweenLinkedBodies","appendAnchor","addHook","appendHook","newObject","conjugate","syncBoneWithImpostor","bone","boneMesh","jointPivot","distToJoint","adjustRotation","tempVec","_TmpVecs","tempQuat","_TmpQuat","setRotationQuaternion","getDirectionToRef","getParent","addInPlace","syncImpostorWithBone","boneAxis","getRotationQuaternionToRef","boneDir","getAbsolutePositionToRef","NoImpostor","SphereImpostor","BoxImpostor","PlaneImpostor","MeshImpostor","CapsuleImpostor","CylinderImpostor","ParticleImpostor","HeightmapImpostor","ConvexHullImpostor","CustomImpostor","RopeImpostor","ClothImpostor","SoftbodyImpostor","PhysicsJoint","_physicsJoint","newJoint","DistanceJoint","HingeJoint","BallAndSocketJoint","WheelJoint","SliderJoint","PrismaticJoint","UniversalJoint","Hinge2Joint","PointToPointJoint","SpringJoint","LockJoint","_super","updateDistance","MotorEnabledJoint","targetSpeed","PhysicsRaycastResult","_hasHit","_hitDistance","_hitNormalWorld","_hitPointWorld","_rayFromWorld","_rayToWorld","calculateHitDistance","AnaglyphPostProcess","rigCameras","samplingMode","reusable","_passedProcess","_rigPostProcess","onApplyObservable","effect","setTextureFromPostProcess","BlurPostProcess","kernel","camera","textureType","defines","_blockCompilation","varyingCount","depCount","_packedFloat","_staticDefines","_outputTexture","setFloat2","_idealKernel","_kernel","_nearestBestKernel","_updateParameters","updateEffect","uniforms","samplers","indexParameters","onCompiled","onError","N","centerIndex","offsets","weights","totalWeight","u","_gaussianWeight","linearSamplingWeights","linearSamplingOffsets","linearSamplingMap","o","sharedCell","weightLinear","offsetLinear","maxVaryingRows","getEngine","getCaps","maxVaryingVectors","freeVaryingVec2","concat","_glslFloat","packedFloat","idealKernel","_a","k","sigma","exponent","exp","decimalFigures","toFixed","replace","_Parse","parsedPostProcess","targetCamera","rootUrl","renderTargetSamplingMode","FxaaPostProcess","_getDefines","texelSize","glInfo","getGlInfo","renderer","toLowerCase","ImageProcessingPostProcess","imageProcessingConfiguration","_fromLinearSpace","_defines","IMAGEPROCESSING","VIGNETTE","VIGNETTEBLENDMODEMULTIPLY","VIGNETTEBLENDMODEOPAQUE","TONEMAPPING","TONEMAPPING_ACES","CONTRAST","COLORCURVES","COLORGRADING","COLORGRADING3D","FROMLINEARSPACE","SAMPLER3DGREENDEPTH","SAMPLER3DBGRMAP","IMAGEPROCESSINGPOSTPROCESS","EXPOSURE","SKIPFINALCOLORCLAMP","applyByPostProcess","_attachImageProcessingConfiguration","onApply","aspectRatio","_imageProcessingConfiguration","configuration","doNotBuild","_imageProcessingObserver","onUpdateParameters","getCamera","scenes","getEffect","colorCurves","colorCurvesEnabled","colorGradingTexture","colorGradingEnabled","exposure","toneMappingEnabled","toneMappingType","contrast","vignetteStretch","vignetteCentreX","vignetteCentreY","vignetteWeight","vignetteColor","vignetteCameraFov","vignetteBlendMode","vignetteEnabled","prepareDefines","define","BlackAndWhitePostProcess","degree","setFloat","PostProcessRenderEffect","getPostProcesses","singleInstance","_name","_singleInstance","_getPostProcesses","_cameras","_indicesForCamera","_postProcesses","pps","ppIndex","_update","_attachCameras","cameras","cameraKey","cams","_loop_1","cameraName","this_1","postProcess","isArray","attachPostProcess","_detachCameras","_loop_2","postProcesses","this_2","detachPostProcess","_enable","_loop_3","_loop_4","this_3","_disable","_loop_5","this_4","ExtractHighlightsPostProcess","blockCompilation","threshold","_exposure","_inputPostProcess","externalTextureSamplerBinding","pow","BloomMergePostProcess","originalFromInput","blurred","weight","setTextureFromPostProcessOutput","BloomEffect","_bloomScale","bloomWeight","bloomKernel","pipelineTextureType","_effects","_downscale","_blurX","alwaysForcePOT","autoClear","_blurY","_merge","disposeEffects","effectIndex","_updateEffects","_isReady","isReady","ChromaticAberrationPostProcess","screenWidth","screenHeight","aberrationAmount","radialIntensity","centerPosition","CircleOfConfusionPostProcess","depthTexture","lensSize","fStop","focusDistance","focalLength","_depthTexture","setTexture","cocPrecalculation","activeCamera","minZ","maxZ","ColorCorrectionPostProcess","colorTableUrl","_colorTableTexture","anisotropicFilteringLevel","wrapU","wrapV","ConvolutionPostProcess","setArray","EdgeDetect0Kernel","EdgeDetect1Kernel","EdgeDetect2Kernel","SharpenKernel","EmbossKernel","GaussianKernel","DepthOfFieldBlurPostProcess","circleOfConfusion","imageToBlur","DepthOfFieldEffectBlurLevel","DepthOfFieldMergePostProcessOptions","DepthOfFieldMergePostProcess","_blurSteps","DepthOfFieldEffect","blurLevel","Low","_circleOfConfusion","_depthOfFieldBlurY","_depthOfFieldBlurX","blurCount","kernelSize","High","Medium","adjustedKernelSize","ratio","blurY","blurX","_dofMerge","DisplayPassPostProcess","FilterPostProcess","kernelMatrix","setMatrix","GrainPostProcess","intensity","animated","random","HighlightsPostProcess","MotionBlurPostProcess","forceGeometryBuffer","motionStrength","_motionBlurSamples","_isObjectBased","_forceGeometryBuffer","_invViewProjection","_previousViewProjection","enableGeometryBufferRenderer","_geometryBufferRenderer","enableVelocity","enablePrePassRenderer","_prePassRenderer","markAsDirty","_prePassEffectConfiguration","_applyMode","samples","_updateEffect","geometryBufferRenderer","prePassRenderer","excludeSkinnedMesh","skinnedMesh","skeleton","list","excludedSkinnedMeshesFromVelocity","excludedSkinnedMesh","removeExcludedSkinnedMesh","_previousTransformationMatrices","_previousBonesTransformationMatrices","isObjectBased","texturesRequired","_onApplyObjectBased","_onApplyScreenBased","setVector2","getAnimationRatio","velocityIndex","getTextureIndex","getGBuffer","textures","getIndex","getRenderTarget","viewProjection","getProjectionMatrix","getViewMatrix","invertToRef","depthIndex","join","RefractionPostProcess","refractionTextureUrl","color","depth","colorLevel","_ownRefractionTexture","onActivateObservable","cam","_refTexture","setColor3","SharpenPostProcess","colorAmount","edgeAmount","PostProcessRenderPipeline","_engine","_renderEffects","_renderEffectsForIsolatedPass","renderEffectName","addEffect","renderEffect","_rebuild","_enableEffect","renderEffects","_disableEffect","unique","indicesToDelete","_reset","_enableMSAAOnFirstPostProcess","sampleCount","_features","supportMSAA","effectKeys","keys","setPrePassRenderer","PostProcessRenderPipelineManager","_renderPipelines","renderPipelineName","pipeline","addPipeline","renderPipeline","attachCamerasToRenderPipeline","detachCamerasFromRenderPipeline","enableEffectInPipeline","disableEffectInPipeline","update","_postProcessRenderPipelineManager","PostProcessRenderPipelineManagerSceneComponent","_gatherRenderTargetsStage","registerStep","_gatherRenderTargets","DefaultRenderingPipeline","hdr","automaticBuild","_camerasToBeAttached","SharpenPostProcessId","ImageProcessingPostProcessId","FxaaPostProcessId","ChromaticAberrationPostProcessId","GrainPostProcessId","_glowLayer","animations","_imageProcessingConfigurationObserver","_sharpenEnabled","_bloomEnabled","_depthOfFieldEnabled","_depthOfFieldBlurLevel","_fxaaEnabled","_imageProcessingEnabled","_chromaticAberrationEnabled","_grainEnabled","_buildAllowed","onBuildObservable","_resizeObserver","_hardwareScaleLevel","_bloomKernel","_bloomWeight","_bloomThreshold","_samples","_hasCleared","_prevPostProcess","_prevPrevPostProcess","_depthOfFieldSceneObserver","caps","_hdr","textureHalfFloatRender","textureFloatRender","_defaultPipelineTextureType","postProcessRenderPipelineManager","sharpen","_sharpenEffect","depthOfField","bloom","chromaticAberration","getRenderWidth","getRenderHeight","_chromaticAberrationEffect","grain","_grainEffect","onResizeObservable","getHardwareScalingLevel","imageProcessingEnabled","isEnabled","_buildPipeline","enabled","_rebuildBloom","oldBloom","bloomScale","oldDof","prepare","previousState","_setAutoClearAndTextureSharing","skipTextureSharing","shareOutputWith","useOwnOutput","_disposePostProcesses","depthOfFieldEnabled","depthRenderer","enableDepthRenderer","useOnlyInActiveCamera","onAfterRenderTargetsRenderObservable","getDepthMap","bloomEnabled","imageProcessing","sharpenEnabled","grainEnabled","chromaticAberrationEnabled","fxaaEnabled","fxaa","activeCameras","disposeNonRecreated","addCamera","removeCamera","serialize","serializationObject","customType","Parse","source","LensRenderingPipeline","parameters","LensChromaticAberrationEffect","HighlightsEnhancingEffect","LensDepthOfFieldEffect","_pentagonBokehIsEnabled","grain_texture","_grainTexture","_createGrainTexture","_edgeBlur","edge_blur","_grainAmount","grain_amount","_chromaticAberration","chromatic_aberration","_distortion","distortion","_highlightsGain","dof_gain","_highlightsThreshold","dof_threshold","_dofDistance","dof_focus_distance","_dofAperture","dof_aperture","_dofDarken","dof_darken","_dofPentagon","dof_pentagon","_blurNoise","blur_noise","_createChromaticAberrationPostProcess","_createHighlightsPostProcess","_createDepthOfFieldPostProcess","_chromaticAberrationPostProcess","_highlightsPostProcess","_depthOfFieldPostProcess","setEdgeBlur","setGrainAmount","setChromaticAberration","setAperture","setEdgeDistortion","setFocusDistance","setDarkenOutOfFocus","enablePentagonBokeh","disablePentagonBokeh","setHighlightsGain","setHighlightsThreshold","amount","disableEdgeBlur","disableGrain","disableChromaticAberration","disableEdgeDistortion","disableDepthOfField","enableNoiseBlur","disableNoiseBlur","disableHighlights","disableDepthRender","disableDepthRenderer","setBool","context","getContext","fillStyle","fillRect","SSAO2RenderingPipeline","SSAOOriginalSceneColorEffect","SSAORenderEffect","SSAOBlurHRenderEffect","SSAOBlurVRenderEffect","SSAOCombineRenderEffect","totalStrength","minZAspect","_textureSamples","_expensiveBlur","base","_bits","Uint32Array","_ratio","ssaoRatio","blurRatio","_createRandomTexture","_originalColorPostProcess","textureSamples","_createSSAOPostProcess","_createBlurPostProcess","_createSSAOCombinePostProcess","_ssaoPostProcess","_blurHPostProcess","_blurVPostProcess","_ssaoCombinePostProcess","n","_getDefinesForSSAO","_sampleSphere","_generateHemisphere","supportSSAO2","disableGeometryBufferRenderer","_randomTexture","_samplerOffsets","expensive","expensiveBlur","_radicalInverse_VdC","_hammersley","_hemisphereSample_uniform","phi","cosTheta","sinTheta","cos","sin","vector","numSamples","rand","_b","_c","_d","setArray3","mode","setMatrix3x3","PERSPECTIVE_DEPTH_PROJECTION","tan","fov","getAspectRatio","orthoLeft","orthoRight","orthoBottom","orthoTop","ORTHO_DEPTH_PROJECTION","viewport","setVector4","randVector","scaleInPlace","SSAORenderingPipeline","area","fallOff","_firstUpdate","combineRatio","dw","sampleSphere","ScreenSpaceReflectionPostProcess","reflectionSpecularFalloffExponent","roughnessFactor","_enableSmoothReflections","_reflectionSamples","_smoothSteps","enablePosition","enableReflectivity","_updateEffectDefines","positionIndex","roughnessIndex","normalIndex","viewMatrix","projectionMatrix","_isSceneRightHanded","useRightHandedSystem","steps","StandardRenderingPipeline","originalPostProcess","downSampleX4PostProcess","brightPassPostProcess","blurHPostProcesses","blurVPostProcesses","textureAdderPostProcess","volumetricLightPostProcess","volumetricLightSmoothXPostProcess","volumetricLightSmoothYPostProcess","volumetricLightMergePostProces","volumetricLightFinalPostProcess","luminancePostProcess","luminanceDownSamplePostProcesses","hdrPostProcess","textureAdderFinalPostProcess","lensFlareFinalPostProcess","hdrFinalPostProcess","lensFlarePostProcess","lensFlareComposePostProcess","motionBlurPostProcess","depthOfFieldPostProcess","fxaaPostProcess","screenSpaceReflectionPostProcess","brightThreshold","blurWidth","horizontalBlur","lensTexture","volumetricLightCoefficient","volumetricLightPower","volumetricLightBlurScale","sourceLight","hdrMinimumLuminance","hdrDecreaseRate","hdrIncreaseRate","lensColorTexture","lensFlareStrength","lensFlareGhostDispersal","lensFlareHaloWidth","lensFlareDistortionStrength","lensFlareBlurWidth","lensStarTexture","lensFlareDirtTexture","depthOfFieldDistance","depthOfFieldBlurWidth","_currentDepthOfFieldSource","_fixedExposure","_currentExposure","_hdrAutoExposure","_hdrCurrentLuminance","_motionStrength","_isObjectBasedMotionBlur","_vlsEnabled","_lensFlareEnabled","_hdrEnabled","_motionBlurEnabled","_screenSpaceReflectionsEnabled","_volumetricLightStepsCount","_basePostProcess","_floatTextureType","shouldRebuild","count","motionBlurSamples","_createDownSampleX4PostProcess","_createBrightPassPostProcess","_createBlurPostProcesses","_createTextureAdderPostProcess","_createVolumetricLightPostProcess","_createLensFlarePostProcess","_createLuminancePostProcesses","_createHdrPostProcess","_createMotionBlurPostProcess","downSampleX4Offsets","id","setArray2","brightOffsets","sU","sV","indice","blurWidthKey","geometryRenderer","geometry","depthValues","getShadowGenerator","generator","getShadowMap","diffuse","setVector3","getShadowDirection","globalPosition","getTransformMatrix","getDepthMinZ","getDepthMaxZ","LuminanceSteps","lastLuminance","pp","downSampleOffsets","onAfterRender","pixel","readPixels","bit_shift","then","data","Uint8Array","buffer","outputLiminance","lastTime","getDeltaTime","hdrAutoExposure","resolution","scaleBias1","scaleBias2","camerax","getRow","cameraz","camRot","toVector3","starRotation","lensStarMatrix","_getDepthTexture","mb","motionScale_1","prevViewProjection_1","invViewProjection_1","viewProjection_1","screenSize_1","getFps","drawBuffersExtension","sourceLightId","getLightById","TonemappingOperator","TonemapPostProcess","_operator","exposureAdjustment","textureFormat","Hable","Reinhard","HejiDawson","Photographic","VolumetricLightScatteringPostProcess","postProcessRatio","_screenCoordinates","customMeshPosition","useCustomMeshPosition","invert","excludedMeshes","decay","_viewPort","toGlobal","CreateDefaultMesh","_volumetricLightScatteringPass","_createPass","passRatio","onActivate","_updateMeshScreenCoordinates","_volumetricLightScatteringRTT","useDiffuseColor","subMesh","useInstances","getMesh","attribs","getMaterial","needAlphaTesting","isVerticesDataPresent","useBones","computeBonesUsingShaders","numBoneInfluencers","bones","getRenderingMesh","hasThinInstances","_cachedDefines","createEffect","maxSimultaneousMorphTargets","setCustomMeshPosition","getCustomMeshPosition","rttIndex","customRenderTargets","getPass","_meshExcluded","renderList","renderParticles","ignoreCameraViewport","savedSceneClearColor","renderSubMesh","renderingMesh","effectiveMesh","getEffectiveMesh","_internalAbstractMeshDataInfo","_isActiveIntermediate","setState","backFaceCulling","cullBackFaces","batch","_getInstancesRenderList","_id","getReplacementMesh","mustReturn","hardwareInstancedRendering","instancedArrays","visibleInstances","drawWrapper","_drawWrapper","_getDrawWrapper","effect_1","enableEffect","_bind","fillMode","getWorldMatrix","alphaTexture","getAlphaTestTexture","getTextureMatrix","setMatrices","getTransformMatrices","_processRendering","isInstance","sceneClearColor","onBeforeRenderObservable","clearColor","onAfterRenderObservable","customIsReadyFunction","refreshRate","subMeshes","customRenderFunction","opaqueSubMeshes","alphaTestSubMeshes","transparentSubMeshes","depthOnlySubMeshes","setColorWrite","submesh","_alphaIndex","alphaIndex","_distanceToCamera","boundingSphere","sortedArray","sort","a","setAlphaMode","meshPosition","attachedNode","billboardMode","emissiveColor","ScreenSpaceCurvaturePostProcess","ridge","valley","normalTexture","PassPostProcess","PassCubePostProcess","_face","PostProcess","fragmentUrl","vertexUrl","_parentContainer","nodeMaterialSource","alphaMode","enablePixelPerfectMode","forceFullscreenViewport","scaleMode","adaptScaleToCurrentViewport","_reusable","_renderId","_textures","_textureCache","_currentRenderTextureInd","_scaleRatio","_texelSize","onSizeChangedObservable","_camera","getUniqueId","_textureType","_textureFormat","_samplers","_fragmentUrl","_vertexUrl","_parameters","_indexParameters","maxMSAASamples","texture","updateRenderTargetTextureSampleCount","getEffectName","_onActivateObserver","_onSizeChangedObserver","_onApplyObserver","_onBeforeRenderObserver","_onAfterRenderObserver","_forcedOutputTexture","restoreDefaultInputTexture","markTextureDirty","_shareOutputWithPostProcess","_disposeTextures","_postProcessDefines","vertex","fragment","isReusable","_createRenderTargetTexture","textureSize","textureOptions","channel","postProcessChannel","_generateDepthBuffer","generateDepthBuffer","tex","createRenderTargetTexture","lastUsedRenderId","_flushTextureCache","currentRenderId","currentlyUsed","_resize","needMipMaps","forceDepthStencil","firstPP","generateMipMaps","generateStencilBuffer","isStencilEnable","format","activate","sourceTexture","maxSize","maxTextureSize","requiredWidth","requiredHeight","webVRCamera","leftCamera","rightCamera","target","desiredWidth","desiredHeight","currentViewport","needPOTTextures","inputTexture","cache","bindFramebuffer","_debugInsertMarker","_allowPostProcessClearColor","apply","setDepthBuffer","setDepthWrite","alphaConstants","setAlphaConstants","r","g","_bindTexture","_disposeTextureCache","addEffectConfiguration","index_1","firstPostProcess","_getFirstPostProcess","cameraId","postProcessType","getCameraById","PostProcessManager","_vertexBuffers","_prepareBuffers","vertices","_buildIndexBuffer","indices","_indexBuffer","createIndexBuffer","vb","_prepareFrame","postProcessesEnabled","directRender","targetTexture","faceIndex","lodLevel","doNotBindFrambuffer","restoreDefaultFramebuffer","bindBuffers","drawElementsType","_finalizeFrame","doNotPresent","len","_releaseBuffer","StereoscopicInterlacePostProcessI","isStereoscopicHoriz","isStereoscopicInterlaced","_stepSize","StereoscopicInterlacePostProcess","SubSurfaceScatteringPostProcess","subSurfaceConfiguration","metersPerUnit","ssDiffusionS","ssDiffusionD","ssFilterRadii","VRDistortionCorrectionPostProcess","isRightEye","vrMetrics","postProcessScaleFactor","_isRightEye","_distortionFactors","distortionK","_postProcessScaleFactor","_lensCenterOffset","lensCenterOffset","_scaleIn","_scaleFactor","_lensCenter","setFloat4","VRMultiviewToSingleviewPostProcess","scaleFactor","isLeftCamera","setInt","_multiviewTexture"],"sourceRoot":""}