{"version":3,"file":"js/vender~e0d29eb3.6d7f5f98.js","mappings":"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","sources":["webpack:///../../../node_modules/cesium/Source/Core/ArcGISTiledElevationTerrainProvider.js","webpack:///../../../node_modules/cesium/Source/Core/BingMapsGeocoderService.js","webpack:///../../../node_modules/cesium/Source/Core/CatmullRomSpline.js","webpack:///../../../node_modules/cesium/Source/Core/CircleGeometry.js","webpack:///../../../node_modules/cesium/Source/Core/CircleOutlineGeometry.js","webpack:///../../../node_modules/cesium/Source/Cesium.js","webpack:///../../../node_modules/cesium/Source/Core/ApproximateTerrainHeights.js","webpack:///../../../node_modules/cesium/Source/Core/ArcType.js","webpack:///../../../node_modules/cesium/Source/Core/AssociativeArray.js","webpack:///../../../node_modules/cesium/Source/Core/AttributeCompression.js","webpack:///../../../node_modules/cesium/Source/Core/AxisAlignedBoundingBox.js","webpack:///../../../node_modules/cesium/Source/Core/BoundingRectangle.js","webpack:///../../../node_modules/cesium/Source/Core/BoundingSphere.js","webpack:///../../../node_modules/cesium/Source/Core/BoxGeometry.js","webpack:///../../../node_modules/cesium/Source/Core/BoxOutlineGeometry.js","webpack:///../../../node_modules/cesium/Source/Core/Cartesian2.js","webpack:///../../../node_modules/cesium/Source/Core/Cartesian3.js","webpack:///../../../node_modules/cesium/Source/Core/Cartesian4.js","webpack:///../../../node_modules/cesium/Source/Core/Cartographic.js","webpack:///../../../node_modules/cesium/Source/Core/CartographicGeocoderService.js","webpack:///../../../node_modules/cesium/Source/Core/CesiumTerrainProvider.js","webpack:///../../../node_modules/cesium/Source/Core/Check.js","webpack:///../../../node_modules/cesium/Source/Core/Clock.js","webpack:///../../../node_modules/cesium/Source/Core/ClockRange.js","webpack:///../../../node_modules/cesium/Source/Core/ClockStep.js","webpack:///../../../node_modules/cesium/Source/Core/Color.js","webpack:///../../../node_modules/cesium/Source/Core/ColorGeometryInstanceAttribute.js","webpack:///../../../node_modules/cesium/Source/Core/ComponentDatatype.js","webpack:///../../../node_modules/cesium/Source/Core/CompressedTextureBuffer.js","webpack:///../../../node_modules/cesium/Source/Core/ConstantSpline.js","webpack:///../../../node_modules/cesium/Source/Core/CoplanarPolygonGeometry.js","webpack:///../../../node_modules/cesium/Source/Core/CoplanarPolygonGeometryLibrary.js","webpack:///../../../node_modules/cesium/Source/Core/CoplanarPolygonOutlineGeometry.js"],"sourcesContent":["import Cartesian2 from \"./Cartesian2.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Event from \"./Event.js\";\nimport GeographicTilingScheme from \"./GeographicTilingScheme.js\";\nimport HeightmapEncoding from \"./HeightmapEncoding.js\";\nimport HeightmapTerrainData from \"./HeightmapTerrainData.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport Request from \"./Request.js\";\nimport RequestState from \"./RequestState.js\";\nimport RequestType from \"./RequestType.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\nimport TerrainProvider from \"./TerrainProvider.js\";\nimport TileAvailability from \"./TileAvailability.js\";\nimport TileProviderError from \"./TileProviderError.js\";\nimport WebMercatorTilingScheme from \"./WebMercatorTilingScheme.js\";\n\nconst ALL_CHILDREN = 15;\n\n/**\n * A {@link TerrainProvider} that produces terrain geometry by tessellating height maps\n * retrieved from Elevation Tiles of an an ArcGIS ImageService.\n *\n * @alias ArcGISTiledElevationTerrainProvider\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource|String|Promise<Resource>|Promise<String>} options.url The URL of the ArcGIS ImageServer service.\n * @param {String} [options.token] The authorization token to use to connect to the service.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If the tilingScheme is specified,\n *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead.\n *                    If neither parameter is specified, the WGS84 ellipsoid is used.\n *\n * @example\n * const terrainProvider = new Cesium.ArcGISTiledElevationTerrainProvider({\n *   url : 'https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer',\n *   token : 'KED1aF_I4UzXOHy3BnhwyBHU4l5oY6rO6walkmHoYqGp4XyIWUd5YZUC1ZrLAzvV40pR6gBXQayh0eFA8m6vPg..'\n * });\n * viewer.terrainProvider = terrainProvider;\n *\n *  @see TerrainProvider\n */\nfunction ArcGISTiledElevationTerrainProvider(options) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options) || !defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._resource = undefined;\n  this._credit = undefined;\n  this._tilingScheme = undefined;\n  this._levelZeroMaximumGeometricError = undefined;\n  this._maxLevel = undefined;\n  this._terrainDataStructure = undefined;\n  this._ready = false;\n  this._width = undefined;\n  this._height = undefined;\n  this._encoding = undefined;\n  const token = options.token;\n\n  this._hasAvailability = false;\n  this._tilesAvailable = undefined;\n  this._tilesAvailablityLoaded = undefined;\n  this._availableCache = {};\n\n  const that = this;\n  const ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n  this._readyPromise = Promise.resolve(options.url)\n    .then(function (url) {\n      let resource = Resource.createIfNeeded(url);\n      resource.appendForwardSlash();\n      if (defined(token)) {\n        resource = resource.getDerivedResource({\n          queryParameters: {\n            token: token,\n          },\n        });\n      }\n      that._resource = resource;\n\n      const metadataResource = resource.getDerivedResource({\n        queryParameters: {\n          f: \"pjson\",\n        },\n      });\n\n      return metadataResource.fetchJson();\n    })\n    .then(function (metadata) {\n      const copyrightText = metadata.copyrightText;\n      if (defined(copyrightText)) {\n        that._credit = new Credit(copyrightText);\n      }\n\n      const spatialReference = metadata.spatialReference;\n      const wkid = defaultValue(\n        spatialReference.latestWkid,\n        spatialReference.wkid\n      );\n      const extent = metadata.extent;\n      const tilingSchemeOptions = {\n        ellipsoid: ellipsoid,\n      };\n      if (wkid === 4326) {\n        tilingSchemeOptions.rectangle = Rectangle.fromDegrees(\n          extent.xmin,\n          extent.ymin,\n          extent.xmax,\n          extent.ymax\n        );\n        that._tilingScheme = new GeographicTilingScheme(tilingSchemeOptions);\n      } else if (wkid === 3857) {\n        tilingSchemeOptions.rectangleSouthwestInMeters = new Cartesian2(\n          extent.xmin,\n          extent.ymin\n        );\n        tilingSchemeOptions.rectangleNortheastInMeters = new Cartesian2(\n          extent.xmax,\n          extent.ymax\n        );\n        that._tilingScheme = new WebMercatorTilingScheme(tilingSchemeOptions);\n      } else {\n        return Promise.reject(new RuntimeError(\"Invalid spatial reference\"));\n      }\n\n      const tileInfo = metadata.tileInfo;\n      if (!defined(tileInfo)) {\n        return Promise.reject(new RuntimeError(\"tileInfo is required\"));\n      }\n\n      that._width = tileInfo.rows + 1;\n      that._height = tileInfo.cols + 1;\n      that._encoding =\n        tileInfo.format === \"LERC\"\n          ? HeightmapEncoding.LERC\n          : HeightmapEncoding.NONE;\n      that._lodCount = tileInfo.lods.length - 1;\n\n      const hasAvailability = (that._hasAvailability =\n        metadata.capabilities.indexOf(\"Tilemap\") !== -1);\n      if (hasAvailability) {\n        that._tilesAvailable = new TileAvailability(\n          that._tilingScheme,\n          that._lodCount\n        );\n        that._tilesAvailable.addAvailableTileRange(\n          0,\n          0,\n          0,\n          that._tilingScheme.getNumberOfXTilesAtLevel(0),\n          that._tilingScheme.getNumberOfYTilesAtLevel(0)\n        );\n        that._tilesAvailablityLoaded = new TileAvailability(\n          that._tilingScheme,\n          that._lodCount\n        );\n      }\n\n      that._levelZeroMaximumGeometricError = TerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap(\n        that._tilingScheme.ellipsoid,\n        that._width,\n        that._tilingScheme.getNumberOfXTilesAtLevel(0)\n      );\n\n      if (metadata.bandCount > 1) {\n        console.log(\n          \"ArcGISTiledElevationTerrainProvider: Terrain data has more than 1 band. Using the first one.\"\n        );\n      }\n\n      that._terrainDataStructure = {\n        elementMultiplier: 1.0,\n        lowestEncodedHeight: metadata.minValues[0],\n        highestEncodedHeight: metadata.maxValues[0],\n      };\n\n      that._ready = true;\n\n      return true;\n    })\n    .catch(function (error) {\n      const message = `An error occurred while accessing ${that._resource.url}.`;\n      TileProviderError.handleError(undefined, that, that._errorEvent, message);\n      return Promise.reject(error);\n    });\n\n  this._errorEvent = new Event();\n}\n\nObject.defineProperties(ArcGISTiledElevationTerrainProvider.prototype, {\n  /**\n   * Gets an event that is raised when the terrain provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof ArcGISTiledElevationTerrainProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\n   * the source of the terrain.  This function should not be called before {@link ArcGISTiledElevationTerrainProvider#ready} returns true.\n   * @memberof ArcGISTiledElevationTerrainProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\n          \"credit must not be called before ready returns true.\"\n        );\n      }\n      //>>includeEnd('debug');\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link ArcGISTiledElevationTerrainProvider#ready} returns true.\n   * @memberof ArcGISTiledElevationTerrainProvider.prototype\n   * @type {GeographicTilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug);\n      if (!this.ready) {\n        throw new DeveloperError(\n          \"tilingScheme must not be called before ready returns true.\"\n        );\n      }\n      //>>includeEnd('debug');\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof ArcGISTiledElevationTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof ArcGISTiledElevationTerrainProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider includes a water mask.  The water mask\n   * indicates which areas of the globe are water rather than land, so they can be rendered\n   * as a reflective surface with animated waves.  This function should not be\n   * called before {@link ArcGISTiledElevationTerrainProvider#ready} returns true.\n   * @memberof ArcGISTiledElevationTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasWaterMask: {\n    get: function () {\n      return false;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the requested tiles include vertex normals.\n   * This function should not be called before {@link ArcGISTiledElevationTerrainProvider#ready} returns true.\n   * @memberof ArcGISTiledElevationTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  hasVertexNormals: {\n    get: function () {\n      return false;\n    },\n  },\n  /**\n   * Gets an object that can be used to determine availability of terrain from this provider, such as\n   * at points and in rectangles.  This function should not be called before\n   * {@link TerrainProvider#ready} returns true.  This property may be undefined if availability\n   * information is not available.\n   * @memberof ArcGISTiledElevationTerrainProvider.prototype\n   * @type {TileAvailability}\n   * @readonly\n   */\n  availability: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug)\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"availability must not be called before the terrain provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n      return this._tilesAvailable;\n    },\n  },\n});\n\n/**\n * Requests the geometry for a given tile.  This function should not be called before\n * {@link ArcGISTiledElevationTerrainProvider#ready} returns true.  The result includes terrain\n * data and indicates that all child tiles are available.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @param {Request} [request] The request object. Intended for internal use only.\n * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\n *          returns undefined instead of a promise, it is an indication that too many requests are already\n *          pending and the request will be retried later.\n */\nArcGISTiledElevationTerrainProvider.prototype.requestTileGeometry = function (\n  x,\n  y,\n  level,\n  request\n) {\n  //>>includeStart('debug', pragmas.debug)\n  if (!this._ready) {\n    throw new DeveloperError(\n      \"requestTileGeometry must not be called before the terrain provider is ready.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const tileResource = this._resource.getDerivedResource({\n    url: `tile/${level}/${y}/${x}`,\n    request: request,\n  });\n\n  const hasAvailability = this._hasAvailability;\n  let availabilityPromise = Promise.resolve(true);\n  let availabilityRequest;\n  if (\n    hasAvailability &&\n    !defined(isTileAvailable(this, level + 1, x * 2, y * 2))\n  ) {\n    // We need to load child availability\n    const availabilityResult = requestAvailability(\n      this,\n      level + 1,\n      x * 2,\n      y * 2\n    );\n\n    availabilityPromise = availabilityResult.promise;\n    availabilityRequest = availabilityResult.request;\n  }\n\n  const promise = tileResource.fetchArrayBuffer();\n  if (!defined(promise) || !defined(availabilityPromise)) {\n    return undefined;\n  }\n\n  const that = this;\n  const tilesAvailable = this._tilesAvailable;\n  return Promise.all([promise, availabilityPromise])\n    .then(function (result) {\n      return new HeightmapTerrainData({\n        buffer: result[0],\n        width: that._width,\n        height: that._height,\n        childTileMask: hasAvailability\n          ? tilesAvailable.computeChildMaskForTile(level, x, y)\n          : ALL_CHILDREN,\n        structure: that._terrainDataStructure,\n        encoding: that._encoding,\n      });\n    })\n    .catch(function (error) {\n      if (\n        defined(availabilityRequest) &&\n        availabilityRequest.state === RequestState.CANCELLED\n      ) {\n        request.cancel();\n\n        // Don't reject the promise till the request is actually cancelled\n        // Otherwise it will think the request failed, but it didn't.\n        return request.deferred.promise.finally(function () {\n          request.state = RequestState.CANCELLED;\n          return Promise.reject(error);\n        });\n      }\n      return Promise.reject(error);\n    });\n};\n\nfunction isTileAvailable(that, level, x, y) {\n  if (!that._hasAvailability) {\n    return undefined;\n  }\n\n  const tilesAvailablityLoaded = that._tilesAvailablityLoaded;\n  const tilesAvailable = that._tilesAvailable;\n\n  if (level > that._lodCount) {\n    return false;\n  }\n\n  // Check if tiles are known to be available\n  if (tilesAvailable.isTileAvailable(level, x, y)) {\n    return true;\n  }\n\n  // or to not be available\n  if (tilesAvailablityLoaded.isTileAvailable(level, x, y)) {\n    return false;\n  }\n\n  return undefined;\n}\n\n/**\n * Gets the maximum geometric error allowed in a tile at a given level.\n *\n * @param {Number} level The tile level for which to get the maximum geometric error.\n * @returns {Number} The maximum geometric error.\n */\nArcGISTiledElevationTerrainProvider.prototype.getLevelMaximumGeometricError = function (\n  level\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!this.ready) {\n    throw new DeveloperError(\n      \"getLevelMaximumGeometricError must not be called before ready returns true.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  return this._levelZeroMaximumGeometricError / (1 << level);\n};\n\n/**\n * Determines whether data for a tile is available to be loaded.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {Boolean|undefined} Undefined if not supported, otherwise true or false.\n */\nArcGISTiledElevationTerrainProvider.prototype.getTileDataAvailable = function (\n  x,\n  y,\n  level\n) {\n  if (!this._hasAvailability) {\n    return undefined;\n  }\n\n  const result = isTileAvailable(this, level, x, y);\n  if (defined(result)) {\n    return result;\n  }\n\n  requestAvailability(this, level, x, y);\n\n  return undefined;\n};\n\n/**\n * Makes sure we load availability data for a tile\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {undefined} This provider does not support loading availability.\n */\nArcGISTiledElevationTerrainProvider.prototype.loadTileDataAvailability = function (\n  x,\n  y,\n  level\n) {\n  return undefined;\n};\n\nfunction findRange(origin, width, height, data) {\n  const endCol = width - 1;\n  const endRow = height - 1;\n\n  const value = data[origin.y * width + origin.x];\n  const endingIndices = [];\n  const range = {\n    startX: origin.x,\n    startY: origin.y,\n    endX: 0,\n    endY: 0,\n  };\n\n  const corner = new Cartesian2(origin.x + 1, origin.y + 1);\n  let doneX = false;\n  let doneY = false;\n  while (!(doneX && doneY)) {\n    // We want to use the original value when checking Y,\n    //  so get it before it possibly gets incremented\n    let endX = corner.x;\n\n    // If we no longer move in the Y direction we need to check the corner tile in X pass\n    const endY = doneY ? corner.y + 1 : corner.y;\n\n    // Check X range\n    if (!doneX) {\n      for (let y = origin.y; y < endY; ++y) {\n        if (data[y * width + corner.x] !== value) {\n          doneX = true;\n          break;\n        }\n      }\n\n      if (doneX) {\n        endingIndices.push(new Cartesian2(corner.x, origin.y));\n\n        // Use the last good column so we can continue with Y\n        --corner.x;\n        --endX;\n        range.endX = corner.x;\n      } else if (corner.x === endCol) {\n        range.endX = corner.x;\n        doneX = true;\n      } else {\n        ++corner.x;\n      }\n    }\n\n    // Check Y range - The corner tile is checked here\n    if (!doneY) {\n      const col = corner.y * width;\n      for (let x = origin.x; x <= endX; ++x) {\n        if (data[col + x] !== value) {\n          doneY = true;\n          break;\n        }\n      }\n\n      if (doneY) {\n        endingIndices.push(new Cartesian2(origin.x, corner.y));\n\n        // Use the last good row so we can continue with X\n        --corner.y;\n        range.endY = corner.y;\n      } else if (corner.y === endRow) {\n        range.endY = corner.y;\n        doneY = true;\n      } else {\n        ++corner.y;\n      }\n    }\n  }\n\n  return {\n    endingIndices: endingIndices,\n    range: range,\n    value: value,\n  };\n}\n\nfunction computeAvailability(x, y, width, height, data) {\n  const ranges = [];\n\n  const singleValue = data.every(function (val) {\n    return val === data[0];\n  });\n  if (singleValue) {\n    if (data[0] === 1) {\n      ranges.push({\n        startX: x,\n        startY: y,\n        endX: x + width - 1,\n        endY: y + height - 1,\n      });\n    }\n\n    return ranges;\n  }\n\n  let positions = [new Cartesian2(0, 0)];\n  while (positions.length > 0) {\n    const origin = positions.pop();\n    const result = findRange(origin, width, height, data);\n\n    if (result.value === 1) {\n      // Convert range into the array into global tile coordinates\n      const range = result.range;\n      range.startX += x;\n      range.endX += x;\n      range.startY += y;\n      range.endY += y;\n      ranges.push(range);\n    }\n\n    const endingIndices = result.endingIndices;\n    if (endingIndices.length > 0) {\n      positions = positions.concat(endingIndices);\n    }\n  }\n\n  return ranges;\n}\n\nfunction requestAvailability(that, level, x, y) {\n  if (!that._hasAvailability) {\n    return {};\n  }\n\n  // Fetch 128x128 availability list, so we make the minimum amount of requests\n  const xOffset = Math.floor(x / 128) * 128;\n  const yOffset = Math.floor(y / 128) * 128;\n\n  const dim = Math.min(1 << level, 128);\n  const url = `tilemap/${level}/${yOffset}/${xOffset}/${dim}/${dim}`;\n\n  const availableCache = that._availableCache;\n  if (defined(availableCache[url])) {\n    return availableCache[url];\n  }\n\n  const request = new Request({\n    throttle: false,\n    throttleByServer: true,\n    type: RequestType.TERRAIN,\n  });\n\n  const tilemapResource = that._resource.getDerivedResource({\n    url: url,\n    request: request,\n  });\n\n  let promise = tilemapResource.fetchJson();\n  if (!defined(promise)) {\n    return {};\n  }\n\n  promise = promise.then(function (result) {\n    const available = computeAvailability(\n      xOffset,\n      yOffset,\n      dim,\n      dim,\n      result.data\n    );\n\n    // Mark whole area as having availability loaded\n    that._tilesAvailablityLoaded.addAvailableTileRange(\n      level,\n      xOffset,\n      yOffset,\n      xOffset + dim,\n      yOffset + dim\n    );\n\n    const tilesAvailable = that._tilesAvailable;\n    for (let i = 0; i < available.length; ++i) {\n      const range = available[i];\n      tilesAvailable.addAvailableTileRange(\n        level,\n        range.startX,\n        range.startY,\n        range.endX,\n        range.endY\n      );\n    }\n\n    // Conveniently return availability of original tile\n    return isTileAvailable(that, level, x, y);\n  });\n\n  availableCache[url] = {\n    promise: promise,\n    request: request,\n  };\n\n  promise = promise.finally(function (result) {\n    delete availableCache[url];\n\n    return result;\n  });\n\n  return {\n    promise: promise,\n    request: request,\n  };\n}\nexport default ArcGISTiledElevationTerrainProvider;\n","import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport Resource from \"./Resource.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\nconst url = \"https://dev.virtualearth.net/REST/v1/Locations\";\n\n/**\n * Provides geocoding through Bing Maps.\n * @alias BingMapsGeocoderService\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {String} options.key A key to use with the Bing Maps geocoding service\n * @param {String} [options.culture] A Bing Maps {@link https://docs.microsoft.com/en-us/bingmaps/rest-services/common-parameters-and-types/supported-culture-codes|Culture Code} to return results in a specific culture and language.\n */\nfunction BingMapsGeocoderService(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const key = options.key;\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(key)) {\n    throw new DeveloperError(\"options.key is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._key = key;\n\n  const queryParameters = {\n    key: key,\n  };\n\n  if (defined(options.culture)) {\n    queryParameters.culture = options.culture;\n  }\n\n  this._resource = new Resource({\n    url: url,\n    queryParameters: queryParameters,\n  });\n}\n\nObject.defineProperties(BingMapsGeocoderService.prototype, {\n  /**\n   * The URL endpoint for the Bing geocoder service\n   * @type {String}\n   * @memberof BingMapsGeocoderService.prototype\n   * @readonly\n   */\n  url: {\n    get: function () {\n      return url;\n    },\n  },\n\n  /**\n   * The key for the Bing geocoder service\n   * @type {String}\n   * @memberof BingMapsGeocoderService.prototype\n   * @readonly\n   */\n  key: {\n    get: function () {\n      return this._key;\n    },\n  },\n});\n\n/**\n * @function\n *\n * @param {String} query The query to be sent to the geocoder service\n * @returns {Promise<GeocoderService.Result[]>}\n */\nBingMapsGeocoderService.prototype.geocode = function (query) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"query\", query);\n  //>>includeEnd('debug');\n\n  const resource = this._resource.getDerivedResource({\n    queryParameters: {\n      query: query,\n    },\n  });\n\n  return resource.fetchJsonp(\"jsonp\").then(function (result) {\n    if (result.resourceSets.length === 0) {\n      return [];\n    }\n\n    const results = result.resourceSets[0].resources;\n\n    return results.map(function (resource) {\n      const bbox = resource.bbox;\n      const south = bbox[0];\n      const west = bbox[1];\n      const north = bbox[2];\n      const east = bbox[3];\n      return {\n        displayName: resource.name,\n        destination: Rectangle.fromDegrees(west, south, east, north),\n      };\n    });\n  });\n};\nexport default BingMapsGeocoderService;\n","import Cartesian3 from \"./Cartesian3.js\";\nimport Cartesian4 from \"./Cartesian4.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport HermiteSpline from \"./HermiteSpline.js\";\nimport Matrix4 from \"./Matrix4.js\";\nimport Spline from \"./Spline.js\";\n\nconst scratchTimeVec = new Cartesian4();\nconst scratchTemp0 = new Cartesian3();\nconst scratchTemp1 = new Cartesian3();\n\nfunction createEvaluateFunction(spline) {\n  const points = spline.points;\n  const times = spline.times;\n\n  if (points.length < 3) {\n    const t0 = times[0];\n    const invSpan = 1.0 / (times[1] - t0);\n\n    const p0 = points[0];\n    const p1 = points[1];\n\n    return function (time, result) {\n      if (!defined(result)) {\n        result = new Cartesian3();\n      }\n      const u = (time - t0) * invSpan;\n      return Cartesian3.lerp(p0, p1, u, result);\n    };\n  }\n\n  return function (time, result) {\n    if (!defined(result)) {\n      result = new Cartesian3();\n    }\n    const i = (spline._lastTimeIndex = spline.findTimeInterval(\n      time,\n      spline._lastTimeIndex\n    ));\n    const u = (time - times[i]) / (times[i + 1] - times[i]);\n\n    const timeVec = scratchTimeVec;\n    timeVec.z = u;\n    timeVec.y = u * u;\n    timeVec.x = timeVec.y * u;\n    timeVec.w = 1.0;\n\n    let p0;\n    let p1;\n    let p2;\n    let p3;\n    let coefs;\n\n    if (i === 0) {\n      p0 = points[0];\n      p1 = points[1];\n      p2 = spline.firstTangent;\n\n      p3 = Cartesian3.subtract(points[2], p0, scratchTemp0);\n      Cartesian3.multiplyByScalar(p3, 0.5, p3);\n\n      coefs = Matrix4.multiplyByVector(\n        HermiteSpline.hermiteCoefficientMatrix,\n        timeVec,\n        timeVec\n      );\n    } else if (i === points.length - 2) {\n      p0 = points[i];\n      p1 = points[i + 1];\n      p3 = spline.lastTangent;\n\n      p2 = Cartesian3.subtract(p1, points[i - 1], scratchTemp0);\n      Cartesian3.multiplyByScalar(p2, 0.5, p2);\n\n      coefs = Matrix4.multiplyByVector(\n        HermiteSpline.hermiteCoefficientMatrix,\n        timeVec,\n        timeVec\n      );\n    } else {\n      p0 = points[i - 1];\n      p1 = points[i];\n      p2 = points[i + 1];\n      p3 = points[i + 2];\n      coefs = Matrix4.multiplyByVector(\n        CatmullRomSpline.catmullRomCoefficientMatrix,\n        timeVec,\n        timeVec\n      );\n    }\n    result = Cartesian3.multiplyByScalar(p0, coefs.x, result);\n    Cartesian3.multiplyByScalar(p1, coefs.y, scratchTemp1);\n    Cartesian3.add(result, scratchTemp1, result);\n    Cartesian3.multiplyByScalar(p2, coefs.z, scratchTemp1);\n    Cartesian3.add(result, scratchTemp1, result);\n    Cartesian3.multiplyByScalar(p3, coefs.w, scratchTemp1);\n    return Cartesian3.add(result, scratchTemp1, result);\n  };\n}\n\nconst firstTangentScratch = new Cartesian3();\nconst lastTangentScratch = new Cartesian3();\n\n/**\n * A Catmull-Rom spline is a cubic spline where the tangent at control points,\n * except the first and last, are computed using the previous and next control points.\n * Catmull-Rom splines are in the class C<sup>1</sup>.\n *\n * @alias CatmullRomSpline\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Number[]} options.times An array of strictly increasing, unit-less, floating-point times at each point.\n *                The values are in no way connected to the clock time. They are the parameterization for the curve.\n * @param {Cartesian3[]} options.points The array of {@link Cartesian3} control points.\n * @param {Cartesian3} [options.firstTangent] The tangent of the curve at the first control point.\n *                     If the tangent is not given, it will be estimated.\n * @param {Cartesian3} [options.lastTangent] The tangent of the curve at the last control point.\n *                     If the tangent is not given, it will be estimated.\n *\n * @exception {DeveloperError} points.length must be greater than or equal to 2.\n * @exception {DeveloperError} times.length must be equal to points.length.\n *\n *\n * @example\n * // spline above the earth from Philadelphia to Los Angeles\n * const spline = new Cesium.CatmullRomSpline({\n *     times : [ 0.0, 1.5, 3.0, 4.5, 6.0 ],\n *     points : [\n *         new Cesium.Cartesian3(1235398.0, -4810983.0, 4146266.0),\n *         new Cesium.Cartesian3(1372574.0, -5345182.0, 4606657.0),\n *         new Cesium.Cartesian3(-757983.0, -5542796.0, 4514323.0),\n *         new Cesium.Cartesian3(-2821260.0, -5248423.0, 4021290.0),\n *         new Cesium.Cartesian3(-2539788.0, -4724797.0, 3620093.0)\n *     ]\n * });\n *\n * const p0 = spline.evaluate(times[i]);         // equal to positions[i]\n * const p1 = spline.evaluate(times[i] + delta); // interpolated value when delta < times[i + 1] - times[i]\n *\n * @see ConstantSpline\n * @see SteppedSpline\n * @see HermiteSpline\n * @see LinearSpline\n * @see QuaternionSpline\n * @see MorphWeightSpline\n */\nfunction CatmullRomSpline(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const points = options.points;\n  const times = options.times;\n  let firstTangent = options.firstTangent;\n  let lastTangent = options.lastTangent;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"points\", points);\n  Check.defined(\"times\", times);\n  Check.typeOf.number.greaterThanOrEquals(\"points.length\", points.length, 2);\n  Check.typeOf.number.equals(\n    \"times.length\",\n    \"points.length\",\n    times.length,\n    points.length\n  );\n  //>>includeEnd('debug');\n\n  if (points.length > 2) {\n    if (!defined(firstTangent)) {\n      firstTangent = firstTangentScratch;\n      Cartesian3.multiplyByScalar(points[1], 2.0, firstTangent);\n      Cartesian3.subtract(firstTangent, points[2], firstTangent);\n      Cartesian3.subtract(firstTangent, points[0], firstTangent);\n      Cartesian3.multiplyByScalar(firstTangent, 0.5, firstTangent);\n    }\n\n    if (!defined(lastTangent)) {\n      const n = points.length - 1;\n      lastTangent = lastTangentScratch;\n      Cartesian3.multiplyByScalar(points[n - 1], 2.0, lastTangent);\n      Cartesian3.subtract(points[n], lastTangent, lastTangent);\n      Cartesian3.add(lastTangent, points[n - 2], lastTangent);\n      Cartesian3.multiplyByScalar(lastTangent, 0.5, lastTangent);\n    }\n  }\n\n  this._times = times;\n  this._points = points;\n  this._firstTangent = Cartesian3.clone(firstTangent);\n  this._lastTangent = Cartesian3.clone(lastTangent);\n\n  this._evaluateFunction = createEvaluateFunction(this);\n  this._lastTimeIndex = 0;\n}\n\nObject.defineProperties(CatmullRomSpline.prototype, {\n  /**\n   * An array of times for the control points.\n   *\n   * @memberof CatmullRomSpline.prototype\n   *\n   * @type {Number[]}\n   * @readonly\n   */\n  times: {\n    get: function () {\n      return this._times;\n    },\n  },\n\n  /**\n   * An array of {@link Cartesian3} control points.\n   *\n   * @memberof CatmullRomSpline.prototype\n   *\n   * @type {Cartesian3[]}\n   * @readonly\n   */\n  points: {\n    get: function () {\n      return this._points;\n    },\n  },\n\n  /**\n   * The tangent at the first control point.\n   *\n   * @memberof CatmullRomSpline.prototype\n   *\n   * @type {Cartesian3}\n   * @readonly\n   */\n  firstTangent: {\n    get: function () {\n      return this._firstTangent;\n    },\n  },\n\n  /**\n   * The tangent at the last control point.\n   *\n   * @memberof CatmullRomSpline.prototype\n   *\n   * @type {Cartesian3}\n   * @readonly\n   */\n  lastTangent: {\n    get: function () {\n      return this._lastTangent;\n    },\n  },\n});\n\n/**\n * @private\n */\nCatmullRomSpline.catmullRomCoefficientMatrix = new Matrix4(\n  -0.5,\n  1.0,\n  -0.5,\n  0.0,\n  1.5,\n  -2.5,\n  0.0,\n  1.0,\n  -1.5,\n  2.0,\n  0.5,\n  0.0,\n  0.5,\n  -0.5,\n  0.0,\n  0.0\n);\n\n/**\n * Finds an index <code>i</code> in <code>times</code> such that the parameter\n * <code>time</code> is in the interval <code>[times[i], times[i + 1]]</code>.\n * @function\n *\n * @param {Number} time The time.\n * @returns {Number} The index for the element at the start of the interval.\n *\n * @exception {DeveloperError} time must be in the range <code>[t<sub>0</sub>, t<sub>n</sub>]</code>, where <code>t<sub>0</sub></code>\n *                             is the first element in the array <code>times</code> and <code>t<sub>n</sub></code> is the last element\n *                             in the array <code>times</code>.\n */\nCatmullRomSpline.prototype.findTimeInterval = Spline.prototype.findTimeInterval;\n\n/**\n * Wraps the given time to the period covered by the spline.\n * @function\n *\n * @param {Number} time The time.\n * @return {Number} The time, wrapped around to the updated animation.\n */\nCatmullRomSpline.prototype.wrapTime = Spline.prototype.wrapTime;\n\n/**\n * Clamps the given time to the period covered by the spline.\n * @function\n *\n * @param {Number} time The time.\n * @return {Number} The time, clamped to the animation period.\n */\nCatmullRomSpline.prototype.clampTime = Spline.prototype.clampTime;\n\n/**\n * Evaluates the curve at a given time.\n *\n * @param {Number} time The time at which to evaluate the curve.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new instance of the point on the curve at the given time.\n *\n * @exception {DeveloperError} time must be in the range <code>[t<sub>0</sub>, t<sub>n</sub>]</code>, where <code>t<sub>0</sub></code>\n *                             is the first element in the array <code>times</code> and <code>t<sub>n</sub></code> is the last element\n *                             in the array <code>times</code>.\n */\nCatmullRomSpline.prototype.evaluate = function (time, result) {\n  return this._evaluateFunction(time, result);\n};\nexport default CatmullRomSpline;\n","import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipseGeometry from \"./EllipseGeometry.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\n/**\n * A description of a circle on the ellipsoid. Circle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @alias CircleGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.center The circle's center point in the fixed frame.\n * @param {Number} options.radius The radius in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\n * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\n * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n *\n * @exception {DeveloperError} radius must be greater than zero.\n * @exception {DeveloperError} granularity must be greater than zero.\n *\n * @see CircleGeometry.createGeometry\n * @see Packable\n *\n * @example\n * // Create a circle.\n * const circle = new Cesium.CircleGeometry({\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n *   radius : 100000.0\n * });\n * const geometry = Cesium.CircleGeometry.createGeometry(circle);\n */\nfunction CircleGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const radius = options.radius;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"radius\", radius);\n  //>>includeEnd('debug');\n\n  const ellipseGeometryOptions = {\n    center: options.center,\n    semiMajorAxis: radius,\n    semiMinorAxis: radius,\n    ellipsoid: options.ellipsoid,\n    height: options.height,\n    extrudedHeight: options.extrudedHeight,\n    granularity: options.granularity,\n    vertexFormat: options.vertexFormat,\n    stRotation: options.stRotation,\n    shadowVolume: options.shadowVolume,\n  };\n  this._ellipseGeometry = new EllipseGeometry(ellipseGeometryOptions);\n  this._workerName = \"createCircleGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nCircleGeometry.packedLength = EllipseGeometry.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CircleGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCircleGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  //>>includeEnd('debug');\n  return EllipseGeometry.pack(value._ellipseGeometry, array, startingIndex);\n};\n\nconst scratchEllipseGeometry = new EllipseGeometry({\n  center: new Cartesian3(),\n  semiMajorAxis: 1.0,\n  semiMinorAxis: 1.0,\n});\nconst scratchOptions = {\n  center: new Cartesian3(),\n  radius: undefined,\n  ellipsoid: Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\n  height: undefined,\n  extrudedHeight: undefined,\n  granularity: undefined,\n  vertexFormat: new VertexFormat(),\n  stRotation: undefined,\n  semiMajorAxis: undefined,\n  semiMinorAxis: undefined,\n  shadowVolume: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CircleGeometry} [result] The object into which to store the result.\n * @returns {CircleGeometry} The modified result parameter or a new CircleGeometry instance if one was not provided.\n */\nCircleGeometry.unpack = function (array, startingIndex, result) {\n  const ellipseGeometry = EllipseGeometry.unpack(\n    array,\n    startingIndex,\n    scratchEllipseGeometry\n  );\n  scratchOptions.center = Cartesian3.clone(\n    ellipseGeometry._center,\n    scratchOptions.center\n  );\n  scratchOptions.ellipsoid = Ellipsoid.clone(\n    ellipseGeometry._ellipsoid,\n    scratchOptions.ellipsoid\n  );\n  scratchOptions.height = ellipseGeometry._height;\n  scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\n  scratchOptions.granularity = ellipseGeometry._granularity;\n  scratchOptions.vertexFormat = VertexFormat.clone(\n    ellipseGeometry._vertexFormat,\n    scratchOptions.vertexFormat\n  );\n  scratchOptions.stRotation = ellipseGeometry._stRotation;\n  scratchOptions.shadowVolume = ellipseGeometry._shadowVolume;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipseGeometry._semiMajorAxis;\n    return new CircleGeometry(scratchOptions);\n  }\n\n  scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\n  scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\n  result._ellipseGeometry = new EllipseGeometry(scratchOptions);\n  return result;\n};\n\n/**\n * Computes the geometric representation of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {CircleGeometry} circleGeometry A description of the circle.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCircleGeometry.createGeometry = function (circleGeometry) {\n  return EllipseGeometry.createGeometry(circleGeometry._ellipseGeometry);\n};\n\n/**\n * @private\n */\nCircleGeometry.createShadowVolume = function (\n  circleGeometry,\n  minHeightFunc,\n  maxHeightFunc\n) {\n  const granularity = circleGeometry._ellipseGeometry._granularity;\n  const ellipsoid = circleGeometry._ellipseGeometry._ellipsoid;\n\n  const minHeight = minHeightFunc(granularity, ellipsoid);\n  const maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n  return new CircleGeometry({\n    center: circleGeometry._ellipseGeometry._center,\n    radius: circleGeometry._ellipseGeometry._semiMajorAxis,\n    ellipsoid: ellipsoid,\n    stRotation: circleGeometry._ellipseGeometry._stRotation,\n    granularity: granularity,\n    extrudedHeight: minHeight,\n    height: maxHeight,\n    vertexFormat: VertexFormat.POSITION_ONLY,\n    shadowVolume: true,\n  });\n};\n\nObject.defineProperties(CircleGeometry.prototype, {\n  /**\n   * @private\n   */\n  rectangle: {\n    get: function () {\n      return this._ellipseGeometry.rectangle;\n    },\n  },\n  /**\n   * For remapping texture coordinates when rendering CircleGeometries as GroundPrimitives.\n   * @private\n   */\n  textureCoordinateRotationPoints: {\n    get: function () {\n      return this._ellipseGeometry.textureCoordinateRotationPoints;\n    },\n  },\n});\nexport default CircleGeometry;\n","import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipseOutlineGeometry from \"./EllipseOutlineGeometry.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\n\n/**\n * A description of the outline of a circle on the ellipsoid.\n *\n * @alias CircleOutlineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.center The circle's center point in the fixed frame.\n * @param {Number} options.radius The radius in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\n * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\n * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\n * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\n * @param {Number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom of an extruded circle.\n *\n * @exception {DeveloperError} radius must be greater than zero.\n * @exception {DeveloperError} granularity must be greater than zero.\n *\n * @see CircleOutlineGeometry.createGeometry\n * @see Packable\n *\n * @example\n * // Create a circle.\n * const circle = new Cesium.CircleOutlineGeometry({\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n *   radius : 100000.0\n * });\n * const geometry = Cesium.CircleOutlineGeometry.createGeometry(circle);\n */\nfunction CircleOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const radius = options.radius;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"radius\", radius);\n  //>>includeEnd('debug');\n\n  const ellipseGeometryOptions = {\n    center: options.center,\n    semiMajorAxis: radius,\n    semiMinorAxis: radius,\n    ellipsoid: options.ellipsoid,\n    height: options.height,\n    extrudedHeight: options.extrudedHeight,\n    granularity: options.granularity,\n    numberOfVerticalLines: options.numberOfVerticalLines,\n  };\n  this._ellipseGeometry = new EllipseOutlineGeometry(ellipseGeometryOptions);\n  this._workerName = \"createCircleOutlineGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nCircleOutlineGeometry.packedLength = EllipseOutlineGeometry.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CircleOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCircleOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  //>>includeEnd('debug');\n  return EllipseOutlineGeometry.pack(\n    value._ellipseGeometry,\n    array,\n    startingIndex\n  );\n};\n\nconst scratchEllipseGeometry = new EllipseOutlineGeometry({\n  center: new Cartesian3(),\n  semiMajorAxis: 1.0,\n  semiMinorAxis: 1.0,\n});\nconst scratchOptions = {\n  center: new Cartesian3(),\n  radius: undefined,\n  ellipsoid: Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\n  height: undefined,\n  extrudedHeight: undefined,\n  granularity: undefined,\n  numberOfVerticalLines: undefined,\n  semiMajorAxis: undefined,\n  semiMinorAxis: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CircleOutlineGeometry} [result] The object into which to store the result.\n * @returns {CircleOutlineGeometry} The modified result parameter or a new CircleOutlineGeometry instance if one was not provided.\n */\nCircleOutlineGeometry.unpack = function (array, startingIndex, result) {\n  const ellipseGeometry = EllipseOutlineGeometry.unpack(\n    array,\n    startingIndex,\n    scratchEllipseGeometry\n  );\n  scratchOptions.center = Cartesian3.clone(\n    ellipseGeometry._center,\n    scratchOptions.center\n  );\n  scratchOptions.ellipsoid = Ellipsoid.clone(\n    ellipseGeometry._ellipsoid,\n    scratchOptions.ellipsoid\n  );\n  scratchOptions.height = ellipseGeometry._height;\n  scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\n  scratchOptions.granularity = ellipseGeometry._granularity;\n  scratchOptions.numberOfVerticalLines = ellipseGeometry._numberOfVerticalLines;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipseGeometry._semiMajorAxis;\n    return new CircleOutlineGeometry(scratchOptions);\n  }\n\n  scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\n  scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\n  result._ellipseGeometry = new EllipseOutlineGeometry(scratchOptions);\n  return result;\n};\n\n/**\n * Computes the geometric representation of an outline of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {CircleOutlineGeometry} circleGeometry A description of the circle.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCircleOutlineGeometry.createGeometry = function (circleGeometry) {\n  return EllipseOutlineGeometry.createGeometry(circleGeometry._ellipseGeometry);\n};\nexport default CircleOutlineGeometry;\n","export const VERSION = '1.94.3';\nexport { default as ApproximateTerrainHeights } from './Core/ApproximateTerrainHeights.js';\nexport { default as ArcGISTiledElevationTerrainProvider } from './Core/ArcGISTiledElevationTerrainProvider.js';\nexport { default as ArcType } from './Core/ArcType.js';\nexport { default as AssociativeArray } from './Core/AssociativeArray.js';\nexport { default as AttributeCompression } from './Core/AttributeCompression.js';\nexport { default as AxisAlignedBoundingBox } from './Core/AxisAlignedBoundingBox.js';\nexport { default as BingMapsGeocoderService } from './Core/BingMapsGeocoderService.js';\nexport { default as BoundingRectangle } from './Core/BoundingRectangle.js';\nexport { default as BoundingSphere } from './Core/BoundingSphere.js';\nexport { default as BoxGeometry } from './Core/BoxGeometry.js';\nexport { default as BoxOutlineGeometry } from './Core/BoxOutlineGeometry.js';\nexport { default as Cartesian2 } from './Core/Cartesian2.js';\nexport { default as Cartesian3 } from './Core/Cartesian3.js';\nexport { default as Cartesian4 } from './Core/Cartesian4.js';\nexport { default as Cartographic } from './Core/Cartographic.js';\nexport { default as CartographicGeocoderService } from './Core/CartographicGeocoderService.js';\nexport { default as CatmullRomSpline } from './Core/CatmullRomSpline.js';\nexport { default as CesiumTerrainProvider } from './Core/CesiumTerrainProvider.js';\nexport { default as Check } from './Core/Check.js';\nexport { default as CircleGeometry } from './Core/CircleGeometry.js';\nexport { default as CircleOutlineGeometry } from './Core/CircleOutlineGeometry.js';\nexport { default as Clock } from './Core/Clock.js';\nexport { default as ClockRange } from './Core/ClockRange.js';\nexport { default as ClockStep } from './Core/ClockStep.js';\nexport { default as Color } from './Core/Color.js';\nexport { default as ColorGeometryInstanceAttribute } from './Core/ColorGeometryInstanceAttribute.js';\nexport { default as ComponentDatatype } from './Core/ComponentDatatype.js';\nexport { default as CompressedTextureBuffer } from './Core/CompressedTextureBuffer.js';\nexport { default as ConstantSpline } from './Core/ConstantSpline.js';\nexport { default as CoplanarPolygonGeometry } from './Core/CoplanarPolygonGeometry.js';\nexport { default as CoplanarPolygonGeometryLibrary } from './Core/CoplanarPolygonGeometryLibrary.js';\nexport { default as CoplanarPolygonOutlineGeometry } from './Core/CoplanarPolygonOutlineGeometry.js';\nexport { default as CornerType } from './Core/CornerType.js';\nexport { default as CorridorGeometry } from './Core/CorridorGeometry.js';\nexport { default as CorridorGeometryLibrary } from './Core/CorridorGeometryLibrary.js';\nexport { default as CorridorOutlineGeometry } from './Core/CorridorOutlineGeometry.js';\nexport { default as Credit } from './Core/Credit.js';\nexport { default as CubicRealPolynomial } from './Core/CubicRealPolynomial.js';\nexport { default as CullingVolume } from './Core/CullingVolume.js';\nexport { default as CustomHeightmapTerrainProvider } from './Core/CustomHeightmapTerrainProvider.js';\nexport { default as CylinderGeometry } from './Core/CylinderGeometry.js';\nexport { default as CylinderGeometryLibrary } from './Core/CylinderGeometryLibrary.js';\nexport { default as CylinderOutlineGeometry } from './Core/CylinderOutlineGeometry.js';\nexport { default as DefaultProxy } from './Core/DefaultProxy.js';\nexport { default as DeveloperError } from './Core/DeveloperError.js';\nexport { default as DistanceDisplayCondition } from './Core/DistanceDisplayCondition.js';\nexport { default as DistanceDisplayConditionGeometryInstanceAttribute } from './Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nexport { default as DoubleEndedPriorityQueue } from './Core/DoubleEndedPriorityQueue.js';\nexport { default as DoublyLinkedList } from './Core/DoublyLinkedList.js';\nexport { default as EarthOrientationParameters } from './Core/EarthOrientationParameters.js';\nexport { default as EarthOrientationParametersSample } from './Core/EarthOrientationParametersSample.js';\nexport { default as EasingFunction } from './Core/EasingFunction.js';\nexport { default as EllipseGeometry } from './Core/EllipseGeometry.js';\nexport { default as EllipseGeometryLibrary } from './Core/EllipseGeometryLibrary.js';\nexport { default as EllipseOutlineGeometry } from './Core/EllipseOutlineGeometry.js';\nexport { default as Ellipsoid } from './Core/Ellipsoid.js';\nexport { default as EllipsoidGeodesic } from './Core/EllipsoidGeodesic.js';\nexport { default as EllipsoidGeometry } from './Core/EllipsoidGeometry.js';\nexport { default as EllipsoidOutlineGeometry } from './Core/EllipsoidOutlineGeometry.js';\nexport { default as EllipsoidRhumbLine } from './Core/EllipsoidRhumbLine.js';\nexport { default as EllipsoidTangentPlane } from './Core/EllipsoidTangentPlane.js';\nexport { default as EllipsoidTerrainProvider } from './Core/EllipsoidTerrainProvider.js';\nexport { default as EllipsoidalOccluder } from './Core/EllipsoidalOccluder.js';\nexport { default as EncodedCartesian3 } from './Core/EncodedCartesian3.js';\nexport { default as Event } from './Core/Event.js';\nexport { default as EventHelper } from './Core/EventHelper.js';\nexport { default as ExperimentalFeatures } from './Core/ExperimentalFeatures.js';\nexport { default as ExtrapolationType } from './Core/ExtrapolationType.js';\nexport { default as FeatureDetection } from './Core/FeatureDetection.js';\nexport { default as FrustumGeometry } from './Core/FrustumGeometry.js';\nexport { default as FrustumOutlineGeometry } from './Core/FrustumOutlineGeometry.js';\nexport { default as Fullscreen } from './Core/Fullscreen.js';\nexport { default as GeocodeType } from './Core/GeocodeType.js';\nexport { default as GeocoderService } from './Core/GeocoderService.js';\nexport { default as GeographicProjection } from './Core/GeographicProjection.js';\nexport { default as GeographicTilingScheme } from './Core/GeographicTilingScheme.js';\nexport { default as Geometry } from './Core/Geometry.js';\nexport { default as GeometryAttribute } from './Core/GeometryAttribute.js';\nexport { default as GeometryAttributes } from './Core/GeometryAttributes.js';\nexport { default as GeometryFactory } from './Core/GeometryFactory.js';\nexport { default as GeometryInstance } from './Core/GeometryInstance.js';\nexport { default as GeometryInstanceAttribute } from './Core/GeometryInstanceAttribute.js';\nexport { default as GeometryOffsetAttribute } from './Core/GeometryOffsetAttribute.js';\nexport { default as GeometryPipeline } from './Core/GeometryPipeline.js';\nexport { default as GeometryType } from './Core/GeometryType.js';\nexport { default as GoogleEarthEnterpriseMetadata } from './Core/GoogleEarthEnterpriseMetadata.js';\nexport { default as GoogleEarthEnterpriseTerrainData } from './Core/GoogleEarthEnterpriseTerrainData.js';\nexport { default as GoogleEarthEnterpriseTerrainProvider } from './Core/GoogleEarthEnterpriseTerrainProvider.js';\nexport { default as GoogleEarthEnterpriseTileInformation } from './Core/GoogleEarthEnterpriseTileInformation.js';\nexport { default as GregorianDate } from './Core/GregorianDate.js';\nexport { default as GroundPolylineGeometry } from './Core/GroundPolylineGeometry.js';\nexport { default as HeadingPitchRange } from './Core/HeadingPitchRange.js';\nexport { default as HeadingPitchRoll } from './Core/HeadingPitchRoll.js';\nexport { default as Heap } from './Core/Heap.js';\nexport { default as HeightmapEncoding } from './Core/HeightmapEncoding.js';\nexport { default as HeightmapTerrainData } from './Core/HeightmapTerrainData.js';\nexport { default as HeightmapTessellator } from './Core/HeightmapTessellator.js';\nexport { default as HermitePolynomialApproximation } from './Core/HermitePolynomialApproximation.js';\nexport { default as HermiteSpline } from './Core/HermiteSpline.js';\nexport { default as HilbertOrder } from './Core/HilbertOrder.js';\nexport { default as Iau2000Orientation } from './Core/Iau2000Orientation.js';\nexport { default as Iau2006XysData } from './Core/Iau2006XysData.js';\nexport { default as Iau2006XysSample } from './Core/Iau2006XysSample.js';\nexport { default as IauOrientationAxes } from './Core/IauOrientationAxes.js';\nexport { default as IauOrientationParameters } from './Core/IauOrientationParameters.js';\nexport { default as IndexDatatype } from './Core/IndexDatatype.js';\nexport { default as InterpolationAlgorithm } from './Core/InterpolationAlgorithm.js';\nexport { default as InterpolationType } from './Core/InterpolationType.js';\nexport { default as Intersect } from './Core/Intersect.js';\nexport { default as IntersectionTests } from './Core/IntersectionTests.js';\nexport { default as Intersections2D } from './Core/Intersections2D.js';\nexport { default as Interval } from './Core/Interval.js';\nexport { default as Ion } from './Core/Ion.js';\nexport { default as IonGeocoderService } from './Core/IonGeocoderService.js';\nexport { default as IonResource } from './Core/IonResource.js';\nexport { default as Iso8601 } from './Core/Iso8601.js';\nexport { default as JulianDate } from './Core/JulianDate.js';\nexport { default as KTX2Transcoder } from './Core/KTX2Transcoder.js';\nexport { default as KeyboardEventModifier } from './Core/KeyboardEventModifier.js';\nexport { default as LagrangePolynomialApproximation } from './Core/LagrangePolynomialApproximation.js';\nexport { default as LeapSecond } from './Core/LeapSecond.js';\nexport { default as LinearApproximation } from './Core/LinearApproximation.js';\nexport { default as LinearSpline } from './Core/LinearSpline.js';\nexport { default as ManagedArray } from './Core/ManagedArray.js';\nexport { default as MapProjection } from './Core/MapProjection.js';\nexport { default as Math } from './Core/Math.js';\nexport { default as Matrix2 } from './Core/Matrix2.js';\nexport { default as Matrix3 } from './Core/Matrix3.js';\nexport { default as Matrix4 } from './Core/Matrix4.js';\nexport { default as MorphWeightSpline } from './Core/MorphWeightSpline.js';\nexport { default as MortonOrder } from './Core/MortonOrder.js';\nexport { default as NearFarScalar } from './Core/NearFarScalar.js';\nexport { default as Occluder } from './Core/Occluder.js';\nexport { default as OffsetGeometryInstanceAttribute } from './Core/OffsetGeometryInstanceAttribute.js';\nexport { default as OpenCageGeocoderService } from './Core/OpenCageGeocoderService.js';\nexport { default as OrientedBoundingBox } from './Core/OrientedBoundingBox.js';\nexport { default as OrthographicFrustum } from './Core/OrthographicFrustum.js';\nexport { default as OrthographicOffCenterFrustum } from './Core/OrthographicOffCenterFrustum.js';\nexport { default as Packable } from './Core/Packable.js';\nexport { default as PackableForInterpolation } from './Core/PackableForInterpolation.js';\nexport { default as PeliasGeocoderService } from './Core/PeliasGeocoderService.js';\nexport { default as PerspectiveFrustum } from './Core/PerspectiveFrustum.js';\nexport { default as PerspectiveOffCenterFrustum } from './Core/PerspectiveOffCenterFrustum.js';\nexport { default as PinBuilder } from './Core/PinBuilder.js';\nexport { default as PixelFormat } from './Core/PixelFormat.js';\nexport { default as Plane } from './Core/Plane.js';\nexport { default as PlaneGeometry } from './Core/PlaneGeometry.js';\nexport { default as PlaneOutlineGeometry } from './Core/PlaneOutlineGeometry.js';\nexport { default as PolygonGeometry } from './Core/PolygonGeometry.js';\nexport { default as PolygonGeometryLibrary } from './Core/PolygonGeometryLibrary.js';\nexport { default as PolygonHierarchy } from './Core/PolygonHierarchy.js';\nexport { default as PolygonOutlineGeometry } from './Core/PolygonOutlineGeometry.js';\nexport { default as PolygonPipeline } from './Core/PolygonPipeline.js';\nexport { default as PolylineGeometry } from './Core/PolylineGeometry.js';\nexport { default as PolylinePipeline } from './Core/PolylinePipeline.js';\nexport { default as PolylineVolumeGeometry } from './Core/PolylineVolumeGeometry.js';\nexport { default as PolylineVolumeGeometryLibrary } from './Core/PolylineVolumeGeometryLibrary.js';\nexport { default as PolylineVolumeOutlineGeometry } from './Core/PolylineVolumeOutlineGeometry.js';\nexport { default as PrimitiveType } from './Core/PrimitiveType.js';\nexport { default as Proxy } from './Core/Proxy.js';\nexport { default as QuadraticRealPolynomial } from './Core/QuadraticRealPolynomial.js';\nexport { default as QuantizedMeshTerrainData } from './Core/QuantizedMeshTerrainData.js';\nexport { default as QuarticRealPolynomial } from './Core/QuarticRealPolynomial.js';\nexport { default as Quaternion } from './Core/Quaternion.js';\nexport { default as QuaternionSpline } from './Core/QuaternionSpline.js';\nexport { default as Queue } from './Core/Queue.js';\nexport { default as Ray } from './Core/Ray.js';\nexport { default as Rectangle } from './Core/Rectangle.js';\nexport { default as RectangleCollisionChecker } from './Core/RectangleCollisionChecker.js';\nexport { default as RectangleGeometry } from './Core/RectangleGeometry.js';\nexport { default as RectangleGeometryLibrary } from './Core/RectangleGeometryLibrary.js';\nexport { default as RectangleOutlineGeometry } from './Core/RectangleOutlineGeometry.js';\nexport { default as ReferenceFrame } from './Core/ReferenceFrame.js';\nexport { default as Request } from './Core/Request.js';\nexport { default as RequestErrorEvent } from './Core/RequestErrorEvent.js';\nexport { default as RequestScheduler } from './Core/RequestScheduler.js';\nexport { default as RequestState } from './Core/RequestState.js';\nexport { default as RequestType } from './Core/RequestType.js';\nexport { default as Resource } from './Core/Resource.js';\nexport { default as RuntimeError } from './Core/RuntimeError.js';\nexport { default as S2Cell } from './Core/S2Cell.js';\nexport { default as ScreenSpaceEventHandler } from './Core/ScreenSpaceEventHandler.js';\nexport { default as ScreenSpaceEventType } from './Core/ScreenSpaceEventType.js';\nexport { default as ShowGeometryInstanceAttribute } from './Core/ShowGeometryInstanceAttribute.js';\nexport { default as Simon1994PlanetaryPositions } from './Core/Simon1994PlanetaryPositions.js';\nexport { default as SimplePolylineGeometry } from './Core/SimplePolylineGeometry.js';\nexport { default as SphereGeometry } from './Core/SphereGeometry.js';\nexport { default as SphereOutlineGeometry } from './Core/SphereOutlineGeometry.js';\nexport { default as Spherical } from './Core/Spherical.js';\nexport { default as Spline } from './Core/Spline.js';\nexport { default as SteppedSpline } from './Core/SteppedSpline.js';\nexport { default as TaskProcessor } from './Core/TaskProcessor.js';\nexport { default as TerrainData } from './Core/TerrainData.js';\nexport { default as TerrainEncoding } from './Core/TerrainEncoding.js';\nexport { default as TerrainExaggeration } from './Core/TerrainExaggeration.js';\nexport { default as TerrainMesh } from './Core/TerrainMesh.js';\nexport { default as TerrainProvider } from './Core/TerrainProvider.js';\nexport { default as TerrainQuantization } from './Core/TerrainQuantization.js';\nexport { default as TileAvailability } from './Core/TileAvailability.js';\nexport { default as TileEdge } from './Core/TileEdge.js';\nexport { default as TileProviderError } from './Core/TileProviderError.js';\nexport { default as TilingScheme } from './Core/TilingScheme.js';\nexport { default as TimeConstants } from './Core/TimeConstants.js';\nexport { default as TimeInterval } from './Core/TimeInterval.js';\nexport { default as TimeIntervalCollection } from './Core/TimeIntervalCollection.js';\nexport { default as TimeStandard } from './Core/TimeStandard.js';\nexport { default as Tipsify } from './Core/Tipsify.js';\nexport { default as Transforms } from './Core/Transforms.js';\nexport { default as TranslationRotationScale } from './Core/TranslationRotationScale.js';\nexport { default as TridiagonalSystemSolver } from './Core/TridiagonalSystemSolver.js';\nexport { default as TrustedServers } from './Core/TrustedServers.js';\nexport { default as VRTheWorldTerrainProvider } from './Core/VRTheWorldTerrainProvider.js';\nexport { default as VertexFormat } from './Core/VertexFormat.js';\nexport { default as VideoSynchronizer } from './Core/VideoSynchronizer.js';\nexport { default as Visibility } from './Core/Visibility.js';\nexport { default as VulkanConstants } from './Core/VulkanConstants.js';\nexport { default as WallGeometry } from './Core/WallGeometry.js';\nexport { default as WallGeometryLibrary } from './Core/WallGeometryLibrary.js';\nexport { default as WallOutlineGeometry } from './Core/WallOutlineGeometry.js';\nexport { default as WebGLConstants } from './Core/WebGLConstants.js';\nexport { default as WebMercatorProjection } from './Core/WebMercatorProjection.js';\nexport { default as WebMercatorTilingScheme } from './Core/WebMercatorTilingScheme.js';\nexport { default as WindingOrder } from './Core/WindingOrder.js';\nexport { default as WireframeIndexGenerator } from './Core/WireframeIndexGenerator.js';\nexport { default as appendForwardSlash } from './Core/appendForwardSlash.js';\nexport { default as arrayFill } from './Core/arrayFill.js';\nexport { default as arrayRemoveDuplicates } from './Core/arrayRemoveDuplicates.js';\nexport { default as arraySlice } from './Core/arraySlice.js';\nexport { default as barycentricCoordinates } from './Core/barycentricCoordinates.js';\nexport { default as binarySearch } from './Core/binarySearch.js';\nexport { default as buildModuleUrl } from './Core/buildModuleUrl.js';\nexport { default as cancelAnimationFrame } from './Core/cancelAnimationFrame.js';\nexport { default as clone } from './Core/clone.js';\nexport { default as combine } from './Core/combine.js';\nexport { default as createGuid } from './Core/createGuid.js';\nexport { default as createWorldTerrain } from './Core/createWorldTerrain.js';\nexport { default as decodeGoogleEarthEnterpriseData } from './Core/decodeGoogleEarthEnterpriseData.js';\nexport { default as decodeVectorPolylinePositions } from './Core/decodeVectorPolylinePositions.js';\nexport { default as defaultValue } from './Core/defaultValue.js';\nexport { default as defer } from './Core/defer.js';\nexport { default as defined } from './Core/defined.js';\nexport { default as deprecationWarning } from './Core/deprecationWarning.js';\nexport { default as destroyObject } from './Core/destroyObject.js';\nexport { default as formatError } from './Core/formatError.js';\nexport { default as getAbsoluteUri } from './Core/getAbsoluteUri.js';\nexport { default as getBaseUri } from './Core/getBaseUri.js';\nexport { default as getExtensionFromUri } from './Core/getExtensionFromUri.js';\nexport { default as getFilenameFromUri } from './Core/getFilenameFromUri.js';\nexport { default as getImagePixels } from './Core/getImagePixels.js';\nexport { default as getJsonFromTypedArray } from './Core/getJsonFromTypedArray.js';\nexport { default as getMagic } from './Core/getMagic.js';\nexport { default as getStringFromTypedArray } from './Core/getStringFromTypedArray.js';\nexport { default as getTimestamp } from './Core/getTimestamp.js';\nexport { default as isBitSet } from './Core/isBitSet.js';\nexport { default as isBlobUri } from './Core/isBlobUri.js';\nexport { default as isCrossOriginUrl } from './Core/isCrossOriginUrl.js';\nexport { default as isDataUri } from './Core/isDataUri.js';\nexport { default as isLeapYear } from './Core/isLeapYear.js';\nexport { default as loadAndExecuteScript } from './Core/loadAndExecuteScript.js';\nexport { default as loadImageFromTypedArray } from './Core/loadImageFromTypedArray.js';\nexport { default as loadKTX2 } from './Core/loadKTX2.js';\nexport { default as mergeSort } from './Core/mergeSort.js';\nexport { default as objectToQuery } from './Core/objectToQuery.js';\nexport { default as oneTimeWarning } from './Core/oneTimeWarning.js';\nexport { default as parseResponseHeaders } from './Core/parseResponseHeaders.js';\nexport { default as pointInsideTriangle } from './Core/pointInsideTriangle.js';\nexport { default as queryToObject } from './Core/queryToObject.js';\nexport { default as requestAnimationFrame } from './Core/requestAnimationFrame.js';\nexport { default as sampleTerrain } from './Core/sampleTerrain.js';\nexport { default as sampleTerrainMostDetailed } from './Core/sampleTerrainMostDetailed.js';\nexport { default as scaleToGeodeticSurface } from './Core/scaleToGeodeticSurface.js';\nexport { default as subdivideArray } from './Core/subdivideArray.js';\nexport { default as webGLConstantToGlslType } from './Core/webGLConstantToGlslType.js';\nexport { default as wrapFunction } from './Core/wrapFunction.js';\nexport { default as writeTextToCanvas } from './Core/writeTextToCanvas.js';\nexport { default as BillboardGraphics } from './DataSources/BillboardGraphics.js';\nexport { default as BillboardVisualizer } from './DataSources/BillboardVisualizer.js';\nexport { default as BoundingSphereState } from './DataSources/BoundingSphereState.js';\nexport { default as BoxGeometryUpdater } from './DataSources/BoxGeometryUpdater.js';\nexport { default as BoxGraphics } from './DataSources/BoxGraphics.js';\nexport { default as CallbackProperty } from './DataSources/CallbackProperty.js';\nexport { default as Cesium3DTilesetGraphics } from './DataSources/Cesium3DTilesetGraphics.js';\nexport { default as Cesium3DTilesetVisualizer } from './DataSources/Cesium3DTilesetVisualizer.js';\nexport { default as CheckerboardMaterialProperty } from './DataSources/CheckerboardMaterialProperty.js';\nexport { default as ColorMaterialProperty } from './DataSources/ColorMaterialProperty.js';\nexport { default as CompositeEntityCollection } from './DataSources/CompositeEntityCollection.js';\nexport { default as CompositeMaterialProperty } from './DataSources/CompositeMaterialProperty.js';\nexport { default as CompositePositionProperty } from './DataSources/CompositePositionProperty.js';\nexport { default as CompositeProperty } from './DataSources/CompositeProperty.js';\nexport { default as ConstantPositionProperty } from './DataSources/ConstantPositionProperty.js';\nexport { default as ConstantProperty } from './DataSources/ConstantProperty.js';\nexport { default as CorridorGeometryUpdater } from './DataSources/CorridorGeometryUpdater.js';\nexport { default as CorridorGraphics } from './DataSources/CorridorGraphics.js';\nexport { default as CustomDataSource } from './DataSources/CustomDataSource.js';\nexport { default as CylinderGeometryUpdater } from './DataSources/CylinderGeometryUpdater.js';\nexport { default as CylinderGraphics } from './DataSources/CylinderGraphics.js';\nexport { default as CzmlDataSource } from './DataSources/CzmlDataSource.js';\nexport { default as DataSource } from './DataSources/DataSource.js';\nexport { default as DataSourceClock } from './DataSources/DataSourceClock.js';\nexport { default as DataSourceCollection } from './DataSources/DataSourceCollection.js';\nexport { default as DataSourceDisplay } from './DataSources/DataSourceDisplay.js';\nexport { default as DynamicGeometryBatch } from './DataSources/DynamicGeometryBatch.js';\nexport { default as DynamicGeometryUpdater } from './DataSources/DynamicGeometryUpdater.js';\nexport { default as EllipseGeometryUpdater } from './DataSources/EllipseGeometryUpdater.js';\nexport { default as EllipseGraphics } from './DataSources/EllipseGraphics.js';\nexport { default as EllipsoidGeometryUpdater } from './DataSources/EllipsoidGeometryUpdater.js';\nexport { default as EllipsoidGraphics } from './DataSources/EllipsoidGraphics.js';\nexport { default as Entity } from './DataSources/Entity.js';\nexport { default as EntityCluster } from './DataSources/EntityCluster.js';\nexport { default as EntityCollection } from './DataSources/EntityCollection.js';\nexport { default as EntityView } from './DataSources/EntityView.js';\nexport { default as GeoJsonDataSource } from './DataSources/GeoJsonDataSource.js';\nexport { default as GeometryUpdater } from './DataSources/GeometryUpdater.js';\nexport { default as GeometryVisualizer } from './DataSources/GeometryVisualizer.js';\nexport { default as GpxDataSource } from './DataSources/GpxDataSource.js';\nexport { default as GridMaterialProperty } from './DataSources/GridMaterialProperty.js';\nexport { default as GroundGeometryUpdater } from './DataSources/GroundGeometryUpdater.js';\nexport { default as ImageMaterialProperty } from './DataSources/ImageMaterialProperty.js';\nexport { default as KmlCamera } from './DataSources/KmlCamera.js';\nexport { default as KmlDataSource } from './DataSources/KmlDataSource.js';\nexport { default as KmlLookAt } from './DataSources/KmlLookAt.js';\nexport { default as KmlTour } from './DataSources/KmlTour.js';\nexport { default as KmlTourFlyTo } from './DataSources/KmlTourFlyTo.js';\nexport { default as KmlTourWait } from './DataSources/KmlTourWait.js';\nexport { default as LabelGraphics } from './DataSources/LabelGraphics.js';\nexport { default as LabelVisualizer } from './DataSources/LabelVisualizer.js';\nexport { default as MaterialProperty } from './DataSources/MaterialProperty.js';\nexport { default as ModelGraphics } from './DataSources/ModelGraphics.js';\nexport { default as ModelVisualizer } from './DataSources/ModelVisualizer.js';\nexport { default as NodeTransformationProperty } from './DataSources/NodeTransformationProperty.js';\nexport { default as PathGraphics } from './DataSources/PathGraphics.js';\nexport { default as PathVisualizer } from './DataSources/PathVisualizer.js';\nexport { default as PlaneGeometryUpdater } from './DataSources/PlaneGeometryUpdater.js';\nexport { default as PlaneGraphics } from './DataSources/PlaneGraphics.js';\nexport { default as PointGraphics } from './DataSources/PointGraphics.js';\nexport { default as PointVisualizer } from './DataSources/PointVisualizer.js';\nexport { default as PolygonGeometryUpdater } from './DataSources/PolygonGeometryUpdater.js';\nexport { default as PolygonGraphics } from './DataSources/PolygonGraphics.js';\nexport { default as PolylineArrowMaterialProperty } from './DataSources/PolylineArrowMaterialProperty.js';\nexport { default as PolylineDashMaterialProperty } from './DataSources/PolylineDashMaterialProperty.js';\nexport { default as PolylineGeometryUpdater } from './DataSources/PolylineGeometryUpdater.js';\nexport { default as PolylineGlowMaterialProperty } from './DataSources/PolylineGlowMaterialProperty.js';\nexport { default as PolylineGraphics } from './DataSources/PolylineGraphics.js';\nexport { default as PolylineOutlineMaterialProperty } from './DataSources/PolylineOutlineMaterialProperty.js';\nexport { default as PolylineVisualizer } from './DataSources/PolylineVisualizer.js';\nexport { default as PolylineVolumeGeometryUpdater } from './DataSources/PolylineVolumeGeometryUpdater.js';\nexport { default as PolylineVolumeGraphics } from './DataSources/PolylineVolumeGraphics.js';\nexport { default as PositionProperty } from './DataSources/PositionProperty.js';\nexport { default as PositionPropertyArray } from './DataSources/PositionPropertyArray.js';\nexport { default as Property } from './DataSources/Property.js';\nexport { default as PropertyArray } from './DataSources/PropertyArray.js';\nexport { default as PropertyBag } from './DataSources/PropertyBag.js';\nexport { default as RectangleGeometryUpdater } from './DataSources/RectangleGeometryUpdater.js';\nexport { default as RectangleGraphics } from './DataSources/RectangleGraphics.js';\nexport { default as ReferenceProperty } from './DataSources/ReferenceProperty.js';\nexport { default as Rotation } from './DataSources/Rotation.js';\nexport { default as SampledPositionProperty } from './DataSources/SampledPositionProperty.js';\nexport { default as SampledProperty } from './DataSources/SampledProperty.js';\nexport { default as ScaledPositionProperty } from './DataSources/ScaledPositionProperty.js';\nexport { default as StaticGeometryColorBatch } from './DataSources/StaticGeometryColorBatch.js';\nexport { default as StaticGeometryPerMaterialBatch } from './DataSources/StaticGeometryPerMaterialBatch.js';\nexport { default as StaticGroundGeometryColorBatch } from './DataSources/StaticGroundGeometryColorBatch.js';\nexport { default as StaticGroundGeometryPerMaterialBatch } from './DataSources/StaticGroundGeometryPerMaterialBatch.js';\nexport { default as StaticGroundPolylinePerMaterialBatch } from './DataSources/StaticGroundPolylinePerMaterialBatch.js';\nexport { default as StaticOutlineGeometryBatch } from './DataSources/StaticOutlineGeometryBatch.js';\nexport { default as StripeMaterialProperty } from './DataSources/StripeMaterialProperty.js';\nexport { default as StripeOrientation } from './DataSources/StripeOrientation.js';\nexport { default as TerrainOffsetProperty } from './DataSources/TerrainOffsetProperty.js';\nexport { default as TimeIntervalCollectionPositionProperty } from './DataSources/TimeIntervalCollectionPositionProperty.js';\nexport { default as TimeIntervalCollectionProperty } from './DataSources/TimeIntervalCollectionProperty.js';\nexport { default as VelocityOrientationProperty } from './DataSources/VelocityOrientationProperty.js';\nexport { default as VelocityVectorProperty } from './DataSources/VelocityVectorProperty.js';\nexport { default as Visualizer } from './DataSources/Visualizer.js';\nexport { default as WallGeometryUpdater } from './DataSources/WallGeometryUpdater.js';\nexport { default as WallGraphics } from './DataSources/WallGraphics.js';\nexport { default as createMaterialPropertyDescriptor } from './DataSources/createMaterialPropertyDescriptor.js';\nexport { default as createPropertyDescriptor } from './DataSources/createPropertyDescriptor.js';\nexport { default as createRawPropertyDescriptor } from './DataSources/createRawPropertyDescriptor.js';\nexport { default as exportKml } from './DataSources/exportKml.js';\nexport { default as heightReferenceOnEntityPropertyChanged } from './DataSources/heightReferenceOnEntityPropertyChanged.js';\nexport { default as AutomaticUniforms } from './Renderer/AutomaticUniforms.js';\nexport { default as Buffer } from './Renderer/Buffer.js';\nexport { default as BufferUsage } from './Renderer/BufferUsage.js';\nexport { default as ClearCommand } from './Renderer/ClearCommand.js';\nexport { default as ComputeCommand } from './Renderer/ComputeCommand.js';\nexport { default as ComputeEngine } from './Renderer/ComputeEngine.js';\nexport { default as Context } from './Renderer/Context.js';\nexport { default as ContextLimits } from './Renderer/ContextLimits.js';\nexport { default as CubeMap } from './Renderer/CubeMap.js';\nexport { default as CubeMapFace } from './Renderer/CubeMapFace.js';\nexport { default as DrawCommand } from './Renderer/DrawCommand.js';\nexport { default as Framebuffer } from './Renderer/Framebuffer.js';\nexport { default as FramebufferManager } from './Renderer/FramebufferManager.js';\nexport { default as MipmapHint } from './Renderer/MipmapHint.js';\nexport { default as MultisampleFramebuffer } from './Renderer/MultisampleFramebuffer.js';\nexport { default as Pass } from './Renderer/Pass.js';\nexport { default as PassState } from './Renderer/PassState.js';\nexport { default as PixelDatatype } from './Renderer/PixelDatatype.js';\nexport { default as RenderState } from './Renderer/RenderState.js';\nexport { default as Renderbuffer } from './Renderer/Renderbuffer.js';\nexport { default as RenderbufferFormat } from './Renderer/RenderbufferFormat.js';\nexport { default as Sampler } from './Renderer/Sampler.js';\nexport { default as ShaderBuilder } from './Renderer/ShaderBuilder.js';\nexport { default as ShaderCache } from './Renderer/ShaderCache.js';\nexport { default as ShaderDestination } from './Renderer/ShaderDestination.js';\nexport { default as ShaderFunction } from './Renderer/ShaderFunction.js';\nexport { default as ShaderProgram } from './Renderer/ShaderProgram.js';\nexport { default as ShaderSource } from './Renderer/ShaderSource.js';\nexport { default as ShaderStruct } from './Renderer/ShaderStruct.js';\nexport { default as Texture } from './Renderer/Texture.js';\nexport { default as TextureCache } from './Renderer/TextureCache.js';\nexport { default as TextureMagnificationFilter } from './Renderer/TextureMagnificationFilter.js';\nexport { default as TextureMinificationFilter } from './Renderer/TextureMinificationFilter.js';\nexport { default as TextureWrap } from './Renderer/TextureWrap.js';\nexport { default as UniformState } from './Renderer/UniformState.js';\nexport { default as VertexArray } from './Renderer/VertexArray.js';\nexport { default as VertexArrayFacade } from './Renderer/VertexArrayFacade.js';\nexport { default as createUniform } from './Renderer/createUniform.js';\nexport { default as createUniformArray } from './Renderer/createUniformArray.js';\nexport { default as freezeRenderState } from './Renderer/freezeRenderState.js';\nexport { default as loadCubeMap } from './Renderer/loadCubeMap.js';\nexport { default as modernizeShader } from './Renderer/modernizeShader.js';\nexport { default as AlphaMode } from './Scene/AlphaMode.js';\nexport { default as Appearance } from './Scene/Appearance.js';\nexport { default as ArcGisMapServerImageryProvider } from './Scene/ArcGisMapServerImageryProvider.js';\nexport { default as AttributeType } from './Scene/AttributeType.js';\nexport { default as AutoExposure } from './Scene/AutoExposure.js';\nexport { default as Axis } from './Scene/Axis.js';\nexport { default as B3dmParser } from './Scene/B3dmParser.js';\nexport { default as BatchTable } from './Scene/BatchTable.js';\nexport { default as BatchTableHierarchy } from './Scene/BatchTableHierarchy.js';\nexport { default as BatchTexture } from './Scene/BatchTexture.js';\nexport { default as Batched3DModel3DTileContent } from './Scene/Batched3DModel3DTileContent.js';\nexport { default as Billboard } from './Scene/Billboard.js';\nexport { default as BillboardCollection } from './Scene/BillboardCollection.js';\nexport { default as BingMapsImageryProvider } from './Scene/BingMapsImageryProvider.js';\nexport { default as BingMapsStyle } from './Scene/BingMapsStyle.js';\nexport { default as BlendEquation } from './Scene/BlendEquation.js';\nexport { default as BlendFunction } from './Scene/BlendFunction.js';\nexport { default as BlendOption } from './Scene/BlendOption.js';\nexport { default as BlendingState } from './Scene/BlendingState.js';\nexport { default as BoxEmitter } from './Scene/BoxEmitter.js';\nexport { default as BrdfLutGenerator } from './Scene/BrdfLutGenerator.js';\nexport { default as BufferLoader } from './Scene/BufferLoader.js';\nexport { default as Camera } from './Scene/Camera.js';\nexport { default as CameraEventAggregator } from './Scene/CameraEventAggregator.js';\nexport { default as CameraEventType } from './Scene/CameraEventType.js';\nexport { default as CameraFlightPath } from './Scene/CameraFlightPath.js';\nexport { default as Cesium3DContentGroup } from './Scene/Cesium3DContentGroup.js';\nexport { default as Cesium3DTile } from './Scene/Cesium3DTile.js';\nexport { default as Cesium3DTileBatchTable } from './Scene/Cesium3DTileBatchTable.js';\nexport { default as Cesium3DTileColorBlendMode } from './Scene/Cesium3DTileColorBlendMode.js';\nexport { default as Cesium3DTileContent } from './Scene/Cesium3DTileContent.js';\nexport { default as Cesium3DTileContentFactory } from './Scene/Cesium3DTileContentFactory.js';\nexport { default as Cesium3DTileContentState } from './Scene/Cesium3DTileContentState.js';\nexport { default as Cesium3DTileContentType } from './Scene/Cesium3DTileContentType.js';\nexport { default as Cesium3DTileFeature } from './Scene/Cesium3DTileFeature.js';\nexport { default as Cesium3DTileFeatureTable } from './Scene/Cesium3DTileFeatureTable.js';\nexport { default as Cesium3DTileOptimizationHint } from './Scene/Cesium3DTileOptimizationHint.js';\nexport { default as Cesium3DTileOptimizations } from './Scene/Cesium3DTileOptimizations.js';\nexport { default as Cesium3DTilePass } from './Scene/Cesium3DTilePass.js';\nexport { default as Cesium3DTilePassState } from './Scene/Cesium3DTilePassState.js';\nexport { default as Cesium3DTilePointFeature } from './Scene/Cesium3DTilePointFeature.js';\nexport { default as Cesium3DTileRefine } from './Scene/Cesium3DTileRefine.js';\nexport { default as Cesium3DTileStyle } from './Scene/Cesium3DTileStyle.js';\nexport { default as Cesium3DTileStyleEngine } from './Scene/Cesium3DTileStyleEngine.js';\nexport { default as Cesium3DTileset } from './Scene/Cesium3DTileset.js';\nexport { default as Cesium3DTilesetCache } from './Scene/Cesium3DTilesetCache.js';\nexport { default as Cesium3DTilesetHeatmap } from './Scene/Cesium3DTilesetHeatmap.js';\nexport { default as Cesium3DTilesetMetadata } from './Scene/Cesium3DTilesetMetadata.js';\nexport { default as Cesium3DTilesetMostDetailedTraversal } from './Scene/Cesium3DTilesetMostDetailedTraversal.js';\nexport { default as Cesium3DTilesetStatistics } from './Scene/Cesium3DTilesetStatistics.js';\nexport { default as Cesium3DTilesetTraversal } from './Scene/Cesium3DTilesetTraversal.js';\nexport { default as CircleEmitter } from './Scene/CircleEmitter.js';\nexport { default as ClassificationModel } from './Scene/ClassificationModel.js';\nexport { default as ClassificationPrimitive } from './Scene/ClassificationPrimitive.js';\nexport { default as ClassificationType } from './Scene/ClassificationType.js';\nexport { default as ClippingPlane } from './Scene/ClippingPlane.js';\nexport { default as ClippingPlaneCollection } from './Scene/ClippingPlaneCollection.js';\nexport { default as CloudCollection } from './Scene/CloudCollection.js';\nexport { default as CloudType } from './Scene/CloudType.js';\nexport { default as ColorBlendMode } from './Scene/ColorBlendMode.js';\nexport { default as Composite3DTileContent } from './Scene/Composite3DTileContent.js';\nexport { default as ConditionsExpression } from './Scene/ConditionsExpression.js';\nexport { default as ConeEmitter } from './Scene/ConeEmitter.js';\nexport { default as ContentMetadata } from './Scene/ContentMetadata.js';\nexport { default as CreditDisplay } from './Scene/CreditDisplay.js';\nexport { default as CullFace } from './Scene/CullFace.js';\nexport { default as CumulusCloud } from './Scene/CumulusCloud.js';\nexport { default as DebugAppearance } from './Scene/DebugAppearance.js';\nexport { default as DebugCameraPrimitive } from './Scene/DebugCameraPrimitive.js';\nexport { default as DebugInspector } from './Scene/DebugInspector.js';\nexport { default as DebugModelMatrixPrimitive } from './Scene/DebugModelMatrixPrimitive.js';\nexport { default as DepthFunction } from './Scene/DepthFunction.js';\nexport { default as DepthPlane } from './Scene/DepthPlane.js';\nexport { default as DerivedCommand } from './Scene/DerivedCommand.js';\nexport { default as DeviceOrientationCameraController } from './Scene/DeviceOrientationCameraController.js';\nexport { default as DirectionalLight } from './Scene/DirectionalLight.js';\nexport { default as DiscardEmptyTileImagePolicy } from './Scene/DiscardEmptyTileImagePolicy.js';\nexport { default as DiscardMissingTileImagePolicy } from './Scene/DiscardMissingTileImagePolicy.js';\nexport { default as DracoLoader } from './Scene/DracoLoader.js';\nexport { default as EllipsoidPrimitive } from './Scene/EllipsoidPrimitive.js';\nexport { default as EllipsoidSurfaceAppearance } from './Scene/EllipsoidSurfaceAppearance.js';\nexport { default as Empty3DTileContent } from './Scene/Empty3DTileContent.js';\nexport { default as Expression } from './Scene/Expression.js';\nexport { default as ExpressionNodeType } from './Scene/ExpressionNodeType.js';\nexport { default as Fog } from './Scene/Fog.js';\nexport { default as FrameRateMonitor } from './Scene/FrameRateMonitor.js';\nexport { default as FrameState } from './Scene/FrameState.js';\nexport { default as FrustumCommands } from './Scene/FrustumCommands.js';\nexport { default as Geometry3DTileContent } from './Scene/Geometry3DTileContent.js';\nexport { default as GetFeatureInfoFormat } from './Scene/GetFeatureInfoFormat.js';\nexport { default as Globe } from './Scene/Globe.js';\nexport { default as GlobeDepth } from './Scene/GlobeDepth.js';\nexport { default as GlobeSurfaceShaderSet } from './Scene/GlobeSurfaceShaderSet.js';\nexport { default as GlobeSurfaceTile } from './Scene/GlobeSurfaceTile.js';\nexport { default as GlobeSurfaceTileProvider } from './Scene/GlobeSurfaceTileProvider.js';\nexport { default as GlobeTranslucency } from './Scene/GlobeTranslucency.js';\nexport { default as GlobeTranslucencyFramebuffer } from './Scene/GlobeTranslucencyFramebuffer.js';\nexport { default as GlobeTranslucencyState } from './Scene/GlobeTranslucencyState.js';\nexport { default as GltfBufferViewLoader } from './Scene/GltfBufferViewLoader.js';\nexport { default as GltfDracoLoader } from './Scene/GltfDracoLoader.js';\nexport { default as GltfImageLoader } from './Scene/GltfImageLoader.js';\nexport { default as GltfIndexBufferLoader } from './Scene/GltfIndexBufferLoader.js';\nexport { default as GltfJsonLoader } from './Scene/GltfJsonLoader.js';\nexport { default as GltfLoader } from './Scene/GltfLoader.js';\nexport { default as GltfLoaderUtil } from './Scene/GltfLoaderUtil.js';\nexport { default as GltfStructuralMetadataLoader } from './Scene/GltfStructuralMetadataLoader.js';\nexport { default as GltfTextureLoader } from './Scene/GltfTextureLoader.js';\nexport { default as GltfVertexBufferLoader } from './Scene/GltfVertexBufferLoader.js';\nexport { default as GoogleEarthEnterpriseImageryProvider } from './Scene/GoogleEarthEnterpriseImageryProvider.js';\nexport { default as GoogleEarthEnterpriseMapsProvider } from './Scene/GoogleEarthEnterpriseMapsProvider.js';\nexport { default as GridImageryProvider } from './Scene/GridImageryProvider.js';\nexport { default as GroundPolylinePrimitive } from './Scene/GroundPolylinePrimitive.js';\nexport { default as GroundPrimitive } from './Scene/GroundPrimitive.js';\nexport { default as GroupMetadata } from './Scene/GroupMetadata.js';\nexport { default as HeightReference } from './Scene/HeightReference.js';\nexport { default as HorizontalOrigin } from './Scene/HorizontalOrigin.js';\nexport { default as I3dmParser } from './Scene/I3dmParser.js';\nexport { default as ImageBasedLighting } from './Scene/ImageBasedLighting.js';\nexport { default as Imagery } from './Scene/Imagery.js';\nexport { default as ImageryLayer } from './Scene/ImageryLayer.js';\nexport { default as ImageryLayerCollection } from './Scene/ImageryLayerCollection.js';\nexport { default as ImageryLayerFeatureInfo } from './Scene/ImageryLayerFeatureInfo.js';\nexport { default as ImageryProvider } from './Scene/ImageryProvider.js';\nexport { default as ImageryState } from './Scene/ImageryState.js';\nexport { default as Implicit3DTileContent } from './Scene/Implicit3DTileContent.js';\nexport { default as ImplicitAvailabilityBitstream } from './Scene/ImplicitAvailabilityBitstream.js';\nexport { default as ImplicitMetadataView } from './Scene/ImplicitMetadataView.js';\nexport { default as ImplicitSubdivisionScheme } from './Scene/ImplicitSubdivisionScheme.js';\nexport { default as ImplicitSubtree } from './Scene/ImplicitSubtree.js';\nexport { default as ImplicitSubtreeMetadata } from './Scene/ImplicitSubtreeMetadata.js';\nexport { default as ImplicitTileCoordinates } from './Scene/ImplicitTileCoordinates.js';\nexport { default as ImplicitTileset } from './Scene/ImplicitTileset.js';\nexport { default as InstanceAttributeSemantic } from './Scene/InstanceAttributeSemantic.js';\nexport { default as Instanced3DModel3DTileContent } from './Scene/Instanced3DModel3DTileContent.js';\nexport { default as InvertClassification } from './Scene/InvertClassification.js';\nexport { default as IonImageryProvider } from './Scene/IonImageryProvider.js';\nexport { default as IonWorldImageryStyle } from './Scene/IonWorldImageryStyle.js';\nexport { default as JobScheduler } from './Scene/JobScheduler.js';\nexport { default as JobType } from './Scene/JobType.js';\nexport { default as JsonMetadataTable } from './Scene/JsonMetadataTable.js';\nexport { default as Label } from './Scene/Label.js';\nexport { default as LabelCollection } from './Scene/LabelCollection.js';\nexport { default as LabelStyle } from './Scene/LabelStyle.js';\nexport { default as Light } from './Scene/Light.js';\nexport { default as MapMode2D } from './Scene/MapMode2D.js';\nexport { default as MapboxImageryProvider } from './Scene/MapboxImageryProvider.js';\nexport { default as MapboxStyleImageryProvider } from './Scene/MapboxStyleImageryProvider.js';\nexport { default as Material } from './Scene/Material.js';\nexport { default as MaterialAppearance } from './Scene/MaterialAppearance.js';\nexport { default as MetadataClass } from './Scene/MetadataClass.js';\nexport { default as MetadataClassProperty } from './Scene/MetadataClassProperty.js';\nexport { default as MetadataComponentType } from './Scene/MetadataComponentType.js';\nexport { default as MetadataEntity } from './Scene/MetadataEntity.js';\nexport { default as MetadataEnum } from './Scene/MetadataEnum.js';\nexport { default as MetadataEnumValue } from './Scene/MetadataEnumValue.js';\nexport { default as MetadataSchema } from './Scene/MetadataSchema.js';\nexport { default as MetadataSchemaLoader } from './Scene/MetadataSchemaLoader.js';\nexport { default as MetadataSemantic } from './Scene/MetadataSemantic.js';\nexport { default as MetadataTable } from './Scene/MetadataTable.js';\nexport { default as MetadataTableProperty } from './Scene/MetadataTableProperty.js';\nexport { default as MetadataType } from './Scene/MetadataType.js';\nexport { default as Model } from './Scene/Model.js';\nexport { default as ModelAnimation } from './Scene/ModelAnimation.js';\nexport { default as ModelAnimationCache } from './Scene/ModelAnimationCache.js';\nexport { default as ModelAnimationCollection } from './Scene/ModelAnimationCollection.js';\nexport { default as ModelAnimationLoop } from './Scene/ModelAnimationLoop.js';\nexport { default as ModelAnimationState } from './Scene/ModelAnimationState.js';\nexport { default as ModelComponents } from './Scene/ModelComponents.js';\nexport { default as ModelInstance } from './Scene/ModelInstance.js';\nexport { default as ModelInstanceCollection } from './Scene/ModelInstanceCollection.js';\nexport { default as ModelLoadResources } from './Scene/ModelLoadResources.js';\nexport { default as ModelMaterial } from './Scene/ModelMaterial.js';\nexport { default as ModelMesh } from './Scene/ModelMesh.js';\nexport { default as ModelNode } from './Scene/ModelNode.js';\nexport { default as ModelOutlineLoader } from './Scene/ModelOutlineLoader.js';\nexport { default as ModelUtility } from './Scene/ModelUtility.js';\nexport { default as Moon } from './Scene/Moon.js';\nexport { default as Multiple3DTileContent } from './Scene/Multiple3DTileContent.js';\nexport { default as NeverTileDiscardPolicy } from './Scene/NeverTileDiscardPolicy.js';\nexport { default as OIT } from './Scene/OIT.js';\nexport { default as OctahedralProjectedCubeMap } from './Scene/OctahedralProjectedCubeMap.js';\nexport { default as OpenStreetMapImageryProvider } from './Scene/OpenStreetMapImageryProvider.js';\nexport { default as OrderedGroundPrimitiveCollection } from './Scene/OrderedGroundPrimitiveCollection.js';\nexport { default as Particle } from './Scene/Particle.js';\nexport { default as ParticleBurst } from './Scene/ParticleBurst.js';\nexport { default as ParticleEmitter } from './Scene/ParticleEmitter.js';\nexport { default as ParticleSystem } from './Scene/ParticleSystem.js';\nexport { default as PerInstanceColorAppearance } from './Scene/PerInstanceColorAppearance.js';\nexport { default as PerformanceDisplay } from './Scene/PerformanceDisplay.js';\nexport { default as PickDepth } from './Scene/PickDepth.js';\nexport { default as PickDepthFramebuffer } from './Scene/PickDepthFramebuffer.js';\nexport { default as PickFramebuffer } from './Scene/PickFramebuffer.js';\nexport { default as Picking } from './Scene/Picking.js';\nexport { default as PntsParser } from './Scene/PntsParser.js';\nexport { default as PointCloud } from './Scene/PointCloud.js';\nexport { default as PointCloud3DTileContent } from './Scene/PointCloud3DTileContent.js';\nexport { default as PointCloudEyeDomeLighting } from './Scene/PointCloudEyeDomeLighting.js';\nexport { default as PointCloudShading } from './Scene/PointCloudShading.js';\nexport { default as PointPrimitive } from './Scene/PointPrimitive.js';\nexport { default as PointPrimitiveCollection } from './Scene/PointPrimitiveCollection.js';\nexport { default as Polyline } from './Scene/Polyline.js';\nexport { default as PolylineCollection } from './Scene/PolylineCollection.js';\nexport { default as PolylineColorAppearance } from './Scene/PolylineColorAppearance.js';\nexport { default as PolylineMaterialAppearance } from './Scene/PolylineMaterialAppearance.js';\nexport { default as PostProcessStage } from './Scene/PostProcessStage.js';\nexport { default as PostProcessStageCollection } from './Scene/PostProcessStageCollection.js';\nexport { default as PostProcessStageComposite } from './Scene/PostProcessStageComposite.js';\nexport { default as PostProcessStageLibrary } from './Scene/PostProcessStageLibrary.js';\nexport { default as PostProcessStageSampleMode } from './Scene/PostProcessStageSampleMode.js';\nexport { default as PostProcessStageTextureCache } from './Scene/PostProcessStageTextureCache.js';\nexport { default as Primitive } from './Scene/Primitive.js';\nexport { default as PrimitiveCollection } from './Scene/PrimitiveCollection.js';\nexport { default as PrimitivePipeline } from './Scene/PrimitivePipeline.js';\nexport { default as PrimitiveState } from './Scene/PrimitiveState.js';\nexport { default as PropertyAttribute } from './Scene/PropertyAttribute.js';\nexport { default as PropertyAttributeProperty } from './Scene/PropertyAttributeProperty.js';\nexport { default as PropertyTable } from './Scene/PropertyTable.js';\nexport { default as PropertyTexture } from './Scene/PropertyTexture.js';\nexport { default as PropertyTextureProperty } from './Scene/PropertyTextureProperty.js';\nexport { default as QuadtreeOccluders } from './Scene/QuadtreeOccluders.js';\nexport { default as QuadtreePrimitive } from './Scene/QuadtreePrimitive.js';\nexport { default as QuadtreeTile } from './Scene/QuadtreeTile.js';\nexport { default as QuadtreeTileLoadState } from './Scene/QuadtreeTileLoadState.js';\nexport { default as QuadtreeTileProvider } from './Scene/QuadtreeTileProvider.js';\nexport { default as ResourceCache } from './Scene/ResourceCache.js';\nexport { default as ResourceCacheKey } from './Scene/ResourceCacheKey.js';\nexport { default as ResourceLoader } from './Scene/ResourceLoader.js';\nexport { default as ResourceLoaderState } from './Scene/ResourceLoaderState.js';\nexport { default as SDFSettings } from './Scene/SDFSettings.js';\nexport { default as Scene } from './Scene/Scene.js';\nexport { default as SceneFramebuffer } from './Scene/SceneFramebuffer.js';\nexport { default as SceneMode } from './Scene/SceneMode.js';\nexport { default as SceneTransforms } from './Scene/SceneTransforms.js';\nexport { default as SceneTransitioner } from './Scene/SceneTransitioner.js';\nexport { default as ScreenSpaceCameraController } from './Scene/ScreenSpaceCameraController.js';\nexport { default as ShadowMap } from './Scene/ShadowMap.js';\nexport { default as ShadowMapShader } from './Scene/ShadowMapShader.js';\nexport { default as ShadowMode } from './Scene/ShadowMode.js';\nexport { default as ShadowVolumeAppearance } from './Scene/ShadowVolumeAppearance.js';\nexport { default as SingleTileImageryProvider } from './Scene/SingleTileImageryProvider.js';\nexport { default as SkyAtmosphere } from './Scene/SkyAtmosphere.js';\nexport { default as SkyBox } from './Scene/SkyBox.js';\nexport { default as SphereEmitter } from './Scene/SphereEmitter.js';\nexport { default as SplitDirection } from './Scene/SplitDirection.js';\nexport { default as Splitter } from './Scene/Splitter.js';\nexport { default as StencilConstants } from './Scene/StencilConstants.js';\nexport { default as StencilFunction } from './Scene/StencilFunction.js';\nexport { default as StencilOperation } from './Scene/StencilOperation.js';\nexport { default as StructuralMetadata } from './Scene/StructuralMetadata.js';\nexport { default as StyleExpression } from './Scene/StyleExpression.js';\nexport { default as Sun } from './Scene/Sun.js';\nexport { default as SunLight } from './Scene/SunLight.js';\nexport { default as SunPostProcess } from './Scene/SunPostProcess.js';\nexport { default as SupportedImageFormats } from './Scene/SupportedImageFormats.js';\nexport { default as TerrainFillMesh } from './Scene/TerrainFillMesh.js';\nexport { default as TerrainState } from './Scene/TerrainState.js';\nexport { default as TextureAtlas } from './Scene/TextureAtlas.js';\nexport { default as TileBoundingRegion } from './Scene/TileBoundingRegion.js';\nexport { default as TileBoundingS2Cell } from './Scene/TileBoundingS2Cell.js';\nexport { default as TileBoundingSphere } from './Scene/TileBoundingSphere.js';\nexport { default as TileBoundingVolume } from './Scene/TileBoundingVolume.js';\nexport { default as TileCoordinatesImageryProvider } from './Scene/TileCoordinatesImageryProvider.js';\nexport { default as TileDiscardPolicy } from './Scene/TileDiscardPolicy.js';\nexport { default as TileImagery } from './Scene/TileImagery.js';\nexport { default as TileMapServiceImageryProvider } from './Scene/TileMapServiceImageryProvider.js';\nexport { default as TileMetadata } from './Scene/TileMetadata.js';\nexport { default as TileOrientedBoundingBox } from './Scene/TileOrientedBoundingBox.js';\nexport { default as TileReplacementQueue } from './Scene/TileReplacementQueue.js';\nexport { default as TileSelectionResult } from './Scene/TileSelectionResult.js';\nexport { default as TileState } from './Scene/TileState.js';\nexport { default as Tileset3DTileContent } from './Scene/Tileset3DTileContent.js';\nexport { default as TilesetMetadata } from './Scene/TilesetMetadata.js';\nexport { default as TimeDynamicImagery } from './Scene/TimeDynamicImagery.js';\nexport { default as TimeDynamicPointCloud } from './Scene/TimeDynamicPointCloud.js';\nexport { default as Tonemapper } from './Scene/Tonemapper.js';\nexport { default as TranslucentTileClassification } from './Scene/TranslucentTileClassification.js';\nexport { default as TweenCollection } from './Scene/TweenCollection.js';\nexport { default as UrlTemplateImageryProvider } from './Scene/UrlTemplateImageryProvider.js';\nexport { default as Vector3DTileBatch } from './Scene/Vector3DTileBatch.js';\nexport { default as Vector3DTileClampedPolylines } from './Scene/Vector3DTileClampedPolylines.js';\nexport { default as Vector3DTileContent } from './Scene/Vector3DTileContent.js';\nexport { default as Vector3DTileGeometry } from './Scene/Vector3DTileGeometry.js';\nexport { default as Vector3DTilePoints } from './Scene/Vector3DTilePoints.js';\nexport { default as Vector3DTilePolygons } from './Scene/Vector3DTilePolygons.js';\nexport { default as Vector3DTilePolylines } from './Scene/Vector3DTilePolylines.js';\nexport { default as Vector3DTilePrimitive } from './Scene/Vector3DTilePrimitive.js';\nexport { default as VertexAttributeSemantic } from './Scene/VertexAttributeSemantic.js';\nexport { default as VerticalOrigin } from './Scene/VerticalOrigin.js';\nexport { default as View } from './Scene/View.js';\nexport { default as ViewportQuad } from './Scene/ViewportQuad.js';\nexport { default as WebMapServiceImageryProvider } from './Scene/WebMapServiceImageryProvider.js';\nexport { default as WebMapTileServiceImageryProvider } from './Scene/WebMapTileServiceImageryProvider.js';\nexport { default as computeFlyToLocationForRectangle } from './Scene/computeFlyToLocationForRectangle.js';\nexport { default as createBillboardPointCallback } from './Scene/createBillboardPointCallback.js';\nexport { default as createElevationBandMaterial } from './Scene/createElevationBandMaterial.js';\nexport { default as createOsmBuildings } from './Scene/createOsmBuildings.js';\nexport { default as createTangentSpaceDebugPrimitive } from './Scene/createTangentSpaceDebugPrimitive.js';\nexport { default as createWorldImagery } from './Scene/createWorldImagery.js';\nexport { default as findContentMetadata } from './Scene/findContentMetadata.js';\nexport { default as findGroupMetadata } from './Scene/findGroupMetadata.js';\nexport { default as findTileMetadata } from './Scene/findTileMetadata.js';\nexport { default as getBinaryAccessor } from './Scene/getBinaryAccessor.js';\nexport { default as getClipAndStyleCode } from './Scene/getClipAndStyleCode.js';\nexport { default as getClippingFunction } from './Scene/getClippingFunction.js';\nexport { default as hasExtension } from './Scene/hasExtension.js';\nexport { default as parseBatchTable } from './Scene/parseBatchTable.js';\nexport { default as parseBoundingVolumeSemantics } from './Scene/parseBoundingVolumeSemantics.js';\nexport { default as parseFeatureMetadataLegacy } from './Scene/parseFeatureMetadataLegacy.js';\nexport { default as parseStructuralMetadata } from './Scene/parseStructuralMetadata.js';\nexport { default as preprocess3DTileContent } from './Scene/preprocess3DTileContent.js';\nexport { default as processModelMaterialsCommon } from './Scene/processModelMaterialsCommon.js';\nexport { default as processPbrMaterials } from './Scene/processPbrMaterials.js';\nexport { default as _shadersAdjustTranslucentFS } from './Shaders/AdjustTranslucentFS.js';\nexport { default as _shadersAtmosphereCommon } from './Shaders/AtmosphereCommon.js';\nexport { default as _shadersBillboardCollectionFS } from './Shaders/BillboardCollectionFS.js';\nexport { default as _shadersBillboardCollectionVS } from './Shaders/BillboardCollectionVS.js';\nexport { default as _shadersBrdfLutGeneratorFS } from './Shaders/BrdfLutGeneratorFS.js';\nexport { default as _shadersCloudCollectionFS } from './Shaders/CloudCollectionFS.js';\nexport { default as _shadersCloudCollectionVS } from './Shaders/CloudCollectionVS.js';\nexport { default as _shadersCloudNoiseFS } from './Shaders/CloudNoiseFS.js';\nexport { default as _shadersCloudNoiseVS } from './Shaders/CloudNoiseVS.js';\nexport { default as _shadersCompareAndPackTranslucentDepth } from './Shaders/CompareAndPackTranslucentDepth.js';\nexport { default as _shadersCompositeOITFS } from './Shaders/CompositeOITFS.js';\nexport { default as _shadersDepthPlaneFS } from './Shaders/DepthPlaneFS.js';\nexport { default as _shadersDepthPlaneVS } from './Shaders/DepthPlaneVS.js';\nexport { default as _shadersEllipsoidFS } from './Shaders/EllipsoidFS.js';\nexport { default as _shadersEllipsoidVS } from './Shaders/EllipsoidVS.js';\nexport { default as _shadersFXAA3_11 } from './Shaders/FXAA3_11.js';\nexport { default as _shadersGlobeFS } from './Shaders/GlobeFS.js';\nexport { default as _shadersGlobeVS } from './Shaders/GlobeVS.js';\nexport { default as _shadersGroundAtmosphere } from './Shaders/GroundAtmosphere.js';\nexport { default as _shadersOctahedralProjectionAtlasFS } from './Shaders/OctahedralProjectionAtlasFS.js';\nexport { default as _shadersOctahedralProjectionFS } from './Shaders/OctahedralProjectionFS.js';\nexport { default as _shadersOctahedralProjectionVS } from './Shaders/OctahedralProjectionVS.js';\nexport { default as _shadersPointPrimitiveCollectionFS } from './Shaders/PointPrimitiveCollectionFS.js';\nexport { default as _shadersPointPrimitiveCollectionVS } from './Shaders/PointPrimitiveCollectionVS.js';\nexport { default as _shadersPolylineCommon } from './Shaders/PolylineCommon.js';\nexport { default as _shadersPolylineFS } from './Shaders/PolylineFS.js';\nexport { default as _shadersPolylineShadowVolumeFS } from './Shaders/PolylineShadowVolumeFS.js';\nexport { default as _shadersPolylineShadowVolumeMorphFS } from './Shaders/PolylineShadowVolumeMorphFS.js';\nexport { default as _shadersPolylineShadowVolumeMorphVS } from './Shaders/PolylineShadowVolumeMorphVS.js';\nexport { default as _shadersPolylineShadowVolumeVS } from './Shaders/PolylineShadowVolumeVS.js';\nexport { default as _shadersPolylineVS } from './Shaders/PolylineVS.js';\nexport { default as _shadersReprojectWebMercatorFS } from './Shaders/ReprojectWebMercatorFS.js';\nexport { default as _shadersReprojectWebMercatorVS } from './Shaders/ReprojectWebMercatorVS.js';\nexport { default as _shadersShadowVolumeAppearanceFS } from './Shaders/ShadowVolumeAppearanceFS.js';\nexport { default as _shadersShadowVolumeAppearanceVS } from './Shaders/ShadowVolumeAppearanceVS.js';\nexport { default as _shadersShadowVolumeFS } from './Shaders/ShadowVolumeFS.js';\nexport { default as _shadersSkyAtmosphereCommon } from './Shaders/SkyAtmosphereCommon.js';\nexport { default as _shadersSkyAtmosphereFS } from './Shaders/SkyAtmosphereFS.js';\nexport { default as _shadersSkyAtmosphereVS } from './Shaders/SkyAtmosphereVS.js';\nexport { default as _shadersSkyBoxFS } from './Shaders/SkyBoxFS.js';\nexport { default as _shadersSkyBoxVS } from './Shaders/SkyBoxVS.js';\nexport { default as _shadersSunFS } from './Shaders/SunFS.js';\nexport { default as _shadersSunTextureFS } from './Shaders/SunTextureFS.js';\nexport { default as _shadersSunVS } from './Shaders/SunVS.js';\nexport { default as _shadersVector3DTileClampedPolylinesFS } from './Shaders/Vector3DTileClampedPolylinesFS.js';\nexport { default as _shadersVector3DTileClampedPolylinesVS } from './Shaders/Vector3DTileClampedPolylinesVS.js';\nexport { default as _shadersVector3DTilePolylinesVS } from './Shaders/Vector3DTilePolylinesVS.js';\nexport { default as _shadersVectorTileVS } from './Shaders/VectorTileVS.js';\nexport { default as _shadersViewportQuadFS } from './Shaders/ViewportQuadFS.js';\nexport { default as _shadersViewportQuadVS } from './Shaders/ViewportQuadVS.js';\nexport { default as Autolinker } from './ThirdParty/Autolinker.js';\nexport { default as Tween } from './ThirdParty/Tween.js';\nexport { default as Uri } from './ThirdParty/Uri.js';\nexport { default as bitmap_sdf } from './ThirdParty/bitmap-sdf.js';\nexport { default as dompurify } from './ThirdParty/dompurify.js';\nexport { default as earcut } from './ThirdParty/earcut.js';\nexport { default as grapheme_splitter } from './ThirdParty/grapheme-splitter.js';\nexport { default as jsep } from './ThirdParty/jsep.js';\nexport { default as kdbush } from './ThirdParty/kdbush.js';\nexport { default as knockout_3_5_1 } from './ThirdParty/knockout-3.5.1.js';\nexport { default as knockout_es5 } from './ThirdParty/knockout-es5.js';\nexport { default as knockout } from './ThirdParty/knockout.js';\nexport { default as ktx_parse } from './ThirdParty/ktx-parse.js';\nexport { default as lerc } from './ThirdParty/lerc.js';\nexport { default as mersenne_twister } from './ThirdParty/mersenne-twister.js';\nexport { default as meshoptimizer } from './ThirdParty/meshoptimizer.js';\nexport { default as nosleep } from './ThirdParty/nosleep.js';\nexport { default as pako } from './ThirdParty/pako.js';\nexport { default as protobufjs } from './ThirdParty/protobufjs.js';\nexport { default as rbush } from './ThirdParty/rbush.js';\nexport { default as topojson } from './ThirdParty/topojson.js';\nexport { default as zip } from './ThirdParty/zip.js';\nexport { default as ClockViewModel } from './Widgets/ClockViewModel.js';\nexport { default as Command } from './Widgets/Command.js';\nexport { default as InspectorShared } from './Widgets/InspectorShared.js';\nexport { default as SvgPathBindingHandler } from './Widgets/SvgPathBindingHandler.js';\nexport { default as ToggleButtonViewModel } from './Widgets/ToggleButtonViewModel.js';\nexport { default as createCommand } from './Widgets/createCommand.js';\nexport { default as getElement } from './Widgets/getElement.js';\nexport { default as subscribeAndEvaluate } from './Widgets/subscribeAndEvaluate.js';\nexport { default as ForEach } from './Scene/GltfPipeline/ForEach.js';\nexport { default as addBuffer } from './Scene/GltfPipeline/addBuffer.js';\nexport { default as addDefaults } from './Scene/GltfPipeline/addDefaults.js';\nexport { default as addExtensionsRequired } from './Scene/GltfPipeline/addExtensionsRequired.js';\nexport { default as addExtensionsUsed } from './Scene/GltfPipeline/addExtensionsUsed.js';\nexport { default as addPipelineExtras } from './Scene/GltfPipeline/addPipelineExtras.js';\nexport { default as addToArray } from './Scene/GltfPipeline/addToArray.js';\nexport { default as findAccessorMinMax } from './Scene/GltfPipeline/findAccessorMinMax.js';\nexport { default as forEachTextureInMaterial } from './Scene/GltfPipeline/forEachTextureInMaterial.js';\nexport { default as getAccessorByteStride } from './Scene/GltfPipeline/getAccessorByteStride.js';\nexport { default as getComponentReader } from './Scene/GltfPipeline/getComponentReader.js';\nexport { default as moveTechniqueRenderStates } from './Scene/GltfPipeline/moveTechniqueRenderStates.js';\nexport { default as moveTechniquesToExtension } from './Scene/GltfPipeline/moveTechniquesToExtension.js';\nexport { default as numberOfComponentsForType } from './Scene/GltfPipeline/numberOfComponentsForType.js';\nexport { default as parseGlb } from './Scene/GltfPipeline/parseGlb.js';\nexport { default as readAccessorPacked } from './Scene/GltfPipeline/readAccessorPacked.js';\nexport { default as removeExtensionsRequired } from './Scene/GltfPipeline/removeExtensionsRequired.js';\nexport { default as removeExtensionsUsed } from './Scene/GltfPipeline/removeExtensionsUsed.js';\nexport { default as removePipelineExtras } from './Scene/GltfPipeline/removePipelineExtras.js';\nexport { default as removeUnusedElements } from './Scene/GltfPipeline/removeUnusedElements.js';\nexport { default as updateAccessorComponentTypes } from './Scene/GltfPipeline/updateAccessorComponentTypes.js';\nexport { default as updateVersion } from './Scene/GltfPipeline/updateVersion.js';\nexport { default as usesExtension } from './Scene/GltfPipeline/usesExtension.js';\nexport { default as AlphaPipelineStage } from './Scene/ModelExperimental/AlphaPipelineStage.js';\nexport { default as B3dmLoader } from './Scene/ModelExperimental/B3dmLoader.js';\nexport { default as BatchTexturePipelineStage } from './Scene/ModelExperimental/BatchTexturePipelineStage.js';\nexport { default as CPUStylingPipelineStage } from './Scene/ModelExperimental/CPUStylingPipelineStage.js';\nexport { default as CustomShader } from './Scene/ModelExperimental/CustomShader.js';\nexport { default as CustomShaderMode } from './Scene/ModelExperimental/CustomShaderMode.js';\nexport { default as CustomShaderPipelineStage } from './Scene/ModelExperimental/CustomShaderPipelineStage.js';\nexport { default as DequantizationPipelineStage } from './Scene/ModelExperimental/DequantizationPipelineStage.js';\nexport { default as FeatureIdPipelineStage } from './Scene/ModelExperimental/FeatureIdPipelineStage.js';\nexport { default as GeoJsonLoader } from './Scene/ModelExperimental/GeoJsonLoader.js';\nexport { default as GeometryPipelineStage } from './Scene/ModelExperimental/GeometryPipelineStage.js';\nexport { default as I3dmLoader } from './Scene/ModelExperimental/I3dmLoader.js';\nexport { default as ImageBasedLightingPipelineStage } from './Scene/ModelExperimental/ImageBasedLightingPipelineStage.js';\nexport { default as InstancingPipelineStage } from './Scene/ModelExperimental/InstancingPipelineStage.js';\nexport { default as LightingModel } from './Scene/ModelExperimental/LightingModel.js';\nexport { default as LightingPipelineStage } from './Scene/ModelExperimental/LightingPipelineStage.js';\nexport { default as MaterialPipelineStage } from './Scene/ModelExperimental/MaterialPipelineStage.js';\nexport { default as MetadataPipelineStage } from './Scene/ModelExperimental/MetadataPipelineStage.js';\nexport { default as ModelAlphaOptions } from './Scene/ModelExperimental/ModelAlphaOptions.js';\nexport { default as ModelClippingPlanesPipelineStage } from './Scene/ModelExperimental/ModelClippingPlanesPipelineStage.js';\nexport { default as ModelColorPipelineStage } from './Scene/ModelExperimental/ModelColorPipelineStage.js';\nexport { default as ModelExperimental } from './Scene/ModelExperimental/ModelExperimental.js';\nexport { default as ModelExperimental3DTileContent } from './Scene/ModelExperimental/ModelExperimental3DTileContent.js';\nexport { default as ModelExperimentalAnimation } from './Scene/ModelExperimental/ModelExperimentalAnimation.js';\nexport { default as ModelExperimentalAnimationChannel } from './Scene/ModelExperimental/ModelExperimentalAnimationChannel.js';\nexport { default as ModelExperimentalAnimationCollection } from './Scene/ModelExperimental/ModelExperimentalAnimationCollection.js';\nexport { default as ModelExperimentalDrawCommand } from './Scene/ModelExperimental/ModelExperimentalDrawCommand.js';\nexport { default as ModelExperimentalNode } from './Scene/ModelExperimental/ModelExperimentalNode.js';\nexport { default as ModelExperimentalPrimitive } from './Scene/ModelExperimental/ModelExperimentalPrimitive.js';\nexport { default as ModelExperimentalSceneGraph } from './Scene/ModelExperimental/ModelExperimentalSceneGraph.js';\nexport { default as ModelExperimentalSkin } from './Scene/ModelExperimental/ModelExperimentalSkin.js';\nexport { default as ModelExperimentalType } from './Scene/ModelExperimental/ModelExperimentalType.js';\nexport { default as ModelExperimentalUtility } from './Scene/ModelExperimental/ModelExperimentalUtility.js';\nexport { default as ModelFeature } from './Scene/ModelExperimental/ModelFeature.js';\nexport { default as ModelFeatureTable } from './Scene/ModelExperimental/ModelFeatureTable.js';\nexport { default as ModelLightingOptions } from './Scene/ModelExperimental/ModelLightingOptions.js';\nexport { default as ModelMatrixUpdateStage } from './Scene/ModelExperimental/ModelMatrixUpdateStage.js';\nexport { default as ModelRenderResources } from './Scene/ModelExperimental/ModelRenderResources.js';\nexport { default as ModelSplitterPipelineStage } from './Scene/ModelExperimental/ModelSplitterPipelineStage.js';\nexport { default as MorphTargetsPipelineStage } from './Scene/ModelExperimental/MorphTargetsPipelineStage.js';\nexport { default as NodeRenderResources } from './Scene/ModelExperimental/NodeRenderResources.js';\nexport { default as PickingPipelineStage } from './Scene/ModelExperimental/PickingPipelineStage.js';\nexport { default as PntsLoader } from './Scene/ModelExperimental/PntsLoader.js';\nexport { default as PointCloudAttenuationPipelineStage } from './Scene/ModelExperimental/PointCloudAttenuationPipelineStage.js';\nexport { default as PrimitiveRenderResources } from './Scene/ModelExperimental/PrimitiveRenderResources.js';\nexport { default as SceneMode2DPipelineStage } from './Scene/ModelExperimental/SceneMode2DPipelineStage.js';\nexport { default as SelectedFeatureIdPipelineStage } from './Scene/ModelExperimental/SelectedFeatureIdPipelineStage.js';\nexport { default as SkinningPipelineStage } from './Scene/ModelExperimental/SkinningPipelineStage.js';\nexport { default as StyleCommandsNeeded } from './Scene/ModelExperimental/StyleCommandsNeeded.js';\nexport { default as TextureManager } from './Scene/ModelExperimental/TextureManager.js';\nexport { default as TextureUniform } from './Scene/ModelExperimental/TextureUniform.js';\nexport { default as UniformType } from './Scene/ModelExperimental/UniformType.js';\nexport { default as VaryingType } from './Scene/ModelExperimental/VaryingType.js';\nexport { default as WireframePipelineStage } from './Scene/ModelExperimental/WireframePipelineStage.js';\nexport { default as buildDrawCommand } from './Scene/ModelExperimental/buildDrawCommand.js';\nexport { default as _shadersAllMaterialAppearanceFS } from './Shaders/Appearances/AllMaterialAppearanceFS.js';\nexport { default as _shadersAllMaterialAppearanceVS } from './Shaders/Appearances/AllMaterialAppearanceVS.js';\nexport { default as _shadersBasicMaterialAppearanceFS } from './Shaders/Appearances/BasicMaterialAppearanceFS.js';\nexport { default as _shadersBasicMaterialAppearanceVS } from './Shaders/Appearances/BasicMaterialAppearanceVS.js';\nexport { default as _shadersEllipsoidSurfaceAppearanceFS } from './Shaders/Appearances/EllipsoidSurfaceAppearanceFS.js';\nexport { default as _shadersEllipsoidSurfaceAppearanceVS } from './Shaders/Appearances/EllipsoidSurfaceAppearanceVS.js';\nexport { default as _shadersPerInstanceColorAppearanceFS } from './Shaders/Appearances/PerInstanceColorAppearanceFS.js';\nexport { default as _shadersPerInstanceColorAppearanceVS } from './Shaders/Appearances/PerInstanceColorAppearanceVS.js';\nexport { default as _shadersPerInstanceFlatColorAppearanceFS } from './Shaders/Appearances/PerInstanceFlatColorAppearanceFS.js';\nexport { default as _shadersPerInstanceFlatColorAppearanceVS } from './Shaders/Appearances/PerInstanceFlatColorAppearanceVS.js';\nexport { default as _shadersPolylineColorAppearanceVS } from './Shaders/Appearances/PolylineColorAppearanceVS.js';\nexport { default as _shadersPolylineMaterialAppearanceVS } from './Shaders/Appearances/PolylineMaterialAppearanceVS.js';\nexport { default as _shadersTexturedMaterialAppearanceFS } from './Shaders/Appearances/TexturedMaterialAppearanceFS.js';\nexport { default as _shadersTexturedMaterialAppearanceVS } from './Shaders/Appearances/TexturedMaterialAppearanceVS.js';\nexport { default as _shadersCzmBuiltins } from './Shaders/Builtin/CzmBuiltins.js';\nexport { default as _shadersAspectRampMaterial } from './Shaders/Materials/AspectRampMaterial.js';\nexport { default as _shadersBumpMapMaterial } from './Shaders/Materials/BumpMapMaterial.js';\nexport { default as _shadersCheckerboardMaterial } from './Shaders/Materials/CheckerboardMaterial.js';\nexport { default as _shadersDotMaterial } from './Shaders/Materials/DotMaterial.js';\nexport { default as _shadersElevationBandMaterial } from './Shaders/Materials/ElevationBandMaterial.js';\nexport { default as _shadersElevationContourMaterial } from './Shaders/Materials/ElevationContourMaterial.js';\nexport { default as _shadersElevationRampMaterial } from './Shaders/Materials/ElevationRampMaterial.js';\nexport { default as _shadersFadeMaterial } from './Shaders/Materials/FadeMaterial.js';\nexport { default as _shadersGridMaterial } from './Shaders/Materials/GridMaterial.js';\nexport { default as _shadersNormalMapMaterial } from './Shaders/Materials/NormalMapMaterial.js';\nexport { default as _shadersPolylineArrowMaterial } from './Shaders/Materials/PolylineArrowMaterial.js';\nexport { default as _shadersPolylineDashMaterial } from './Shaders/Materials/PolylineDashMaterial.js';\nexport { default as _shadersPolylineGlowMaterial } from './Shaders/Materials/PolylineGlowMaterial.js';\nexport { default as _shadersPolylineOutlineMaterial } from './Shaders/Materials/PolylineOutlineMaterial.js';\nexport { default as _shadersRimLightingMaterial } from './Shaders/Materials/RimLightingMaterial.js';\nexport { default as _shadersSlopeRampMaterial } from './Shaders/Materials/SlopeRampMaterial.js';\nexport { default as _shadersStripeMaterial } from './Shaders/Materials/StripeMaterial.js';\nexport { default as _shadersWater } from './Shaders/Materials/Water.js';\nexport { default as _shadersCPUStylingStageFS } from './Shaders/ModelExperimental/CPUStylingStageFS.js';\nexport { default as _shadersCPUStylingStageVS } from './Shaders/ModelExperimental/CPUStylingStageVS.js';\nexport { default as _shadersCustomShaderStageFS } from './Shaders/ModelExperimental/CustomShaderStageFS.js';\nexport { default as _shadersCustomShaderStageVS } from './Shaders/ModelExperimental/CustomShaderStageVS.js';\nexport { default as _shadersFeatureIdStageFS } from './Shaders/ModelExperimental/FeatureIdStageFS.js';\nexport { default as _shadersFeatureIdStageVS } from './Shaders/ModelExperimental/FeatureIdStageVS.js';\nexport { default as _shadersGeometryStageFS } from './Shaders/ModelExperimental/GeometryStageFS.js';\nexport { default as _shadersGeometryStageVS } from './Shaders/ModelExperimental/GeometryStageVS.js';\nexport { default as _shadersImageBasedLightingStageFS } from './Shaders/ModelExperimental/ImageBasedLightingStageFS.js';\nexport { default as _shadersInstancingStageCommon } from './Shaders/ModelExperimental/InstancingStageCommon.js';\nexport { default as _shadersInstancingStageVS } from './Shaders/ModelExperimental/InstancingStageVS.js';\nexport { default as _shadersLegacyInstancingStageVS } from './Shaders/ModelExperimental/LegacyInstancingStageVS.js';\nexport { default as _shadersLightingStageFS } from './Shaders/ModelExperimental/LightingStageFS.js';\nexport { default as _shadersMaterialStageFS } from './Shaders/ModelExperimental/MaterialStageFS.js';\nexport { default as _shadersMetadataStageFS } from './Shaders/ModelExperimental/MetadataStageFS.js';\nexport { default as _shadersMetadataStageVS } from './Shaders/ModelExperimental/MetadataStageVS.js';\nexport { default as _shadersModelClippingPlanesStageFS } from './Shaders/ModelExperimental/ModelClippingPlanesStageFS.js';\nexport { default as _shadersModelColorStageFS } from './Shaders/ModelExperimental/ModelColorStageFS.js';\nexport { default as _shadersModelExperimentalFS } from './Shaders/ModelExperimental/ModelExperimentalFS.js';\nexport { default as _shadersModelExperimentalVS } from './Shaders/ModelExperimental/ModelExperimentalVS.js';\nexport { default as _shadersModelSplitterStageFS } from './Shaders/ModelExperimental/ModelSplitterStageFS.js';\nexport { default as _shadersMorphTargetsStageVS } from './Shaders/ModelExperimental/MorphTargetsStageVS.js';\nexport { default as _shadersPointCloudAttenuationStageVS } from './Shaders/ModelExperimental/PointCloudAttenuationStageVS.js';\nexport { default as _shadersSelectedFeatureIdStageCommon } from './Shaders/ModelExperimental/SelectedFeatureIdStageCommon.js';\nexport { default as _shadersSkinningStageVS } from './Shaders/ModelExperimental/SkinningStageVS.js';\nexport { default as _shadersAcesTonemappingStage } from './Shaders/PostProcessStages/AcesTonemappingStage.js';\nexport { default as _shadersAdditiveBlend } from './Shaders/PostProcessStages/AdditiveBlend.js';\nexport { default as _shadersAmbientOcclusionGenerate } from './Shaders/PostProcessStages/AmbientOcclusionGenerate.js';\nexport { default as _shadersAmbientOcclusionModulate } from './Shaders/PostProcessStages/AmbientOcclusionModulate.js';\nexport { default as _shadersBlackAndWhite } from './Shaders/PostProcessStages/BlackAndWhite.js';\nexport { default as _shadersBloomComposite } from './Shaders/PostProcessStages/BloomComposite.js';\nexport { default as _shadersBrightPass } from './Shaders/PostProcessStages/BrightPass.js';\nexport { default as _shadersBrightness } from './Shaders/PostProcessStages/Brightness.js';\nexport { default as _shadersCompositeTranslucentClassification } from './Shaders/PostProcessStages/CompositeTranslucentClassification.js';\nexport { default as _shadersContrastBias } from './Shaders/PostProcessStages/ContrastBias.js';\nexport { default as _shadersDepthOfField } from './Shaders/PostProcessStages/DepthOfField.js';\nexport { default as _shadersDepthView } from './Shaders/PostProcessStages/DepthView.js';\nexport { default as _shadersDepthViewPacked } from './Shaders/PostProcessStages/DepthViewPacked.js';\nexport { default as _shadersEdgeDetection } from './Shaders/PostProcessStages/EdgeDetection.js';\nexport { default as _shadersFXAA } from './Shaders/PostProcessStages/FXAA.js';\nexport { default as _shadersFilmicTonemapping } from './Shaders/PostProcessStages/FilmicTonemapping.js';\nexport { default as _shadersGaussianBlur1D } from './Shaders/PostProcessStages/GaussianBlur1D.js';\nexport { default as _shadersLensFlare } from './Shaders/PostProcessStages/LensFlare.js';\nexport { default as _shadersModifiedReinhardTonemapping } from './Shaders/PostProcessStages/ModifiedReinhardTonemapping.js';\nexport { default as _shadersNightVision } from './Shaders/PostProcessStages/NightVision.js';\nexport { default as _shadersPassThrough } from './Shaders/PostProcessStages/PassThrough.js';\nexport { default as _shadersPassThroughDepth } from './Shaders/PostProcessStages/PassThroughDepth.js';\nexport { default as _shadersPointCloudEyeDomeLighting } from './Shaders/PostProcessStages/PointCloudEyeDomeLighting.js';\nexport { default as _shadersReinhardTonemapping } from './Shaders/PostProcessStages/ReinhardTonemapping.js';\nexport { default as _shadersSilhouette } from './Shaders/PostProcessStages/Silhouette.js';\nexport { default as Animation } from './Widgets/Animation/Animation.js';\nexport { default as AnimationViewModel } from './Widgets/Animation/AnimationViewModel.js';\nexport { default as BaseLayerPicker } from './Widgets/BaseLayerPicker/BaseLayerPicker.js';\nexport { default as BaseLayerPickerViewModel } from './Widgets/BaseLayerPicker/BaseLayerPickerViewModel.js';\nexport { default as ProviderViewModel } from './Widgets/BaseLayerPicker/ProviderViewModel.js';\nexport { default as createDefaultImageryProviderViewModels } from './Widgets/BaseLayerPicker/createDefaultImageryProviderViewModels.js';\nexport { default as createDefaultTerrainProviderViewModels } from './Widgets/BaseLayerPicker/createDefaultTerrainProviderViewModels.js';\nexport { default as Cesium3DTilesInspector } from './Widgets/Cesium3DTilesInspector/Cesium3DTilesInspector.js';\nexport { default as Cesium3DTilesInspectorViewModel } from './Widgets/Cesium3DTilesInspector/Cesium3DTilesInspectorViewModel.js';\nexport { default as CesiumInspector } from './Widgets/CesiumInspector/CesiumInspector.js';\nexport { default as CesiumInspectorViewModel } from './Widgets/CesiumInspector/CesiumInspectorViewModel.js';\nexport { default as CesiumWidget } from './Widgets/CesiumWidget/CesiumWidget.js';\nexport { default as FullscreenButton } from './Widgets/FullscreenButton/FullscreenButton.js';\nexport { default as FullscreenButtonViewModel } from './Widgets/FullscreenButton/FullscreenButtonViewModel.js';\nexport { default as Geocoder } from './Widgets/Geocoder/Geocoder.js';\nexport { default as GeocoderViewModel } from './Widgets/Geocoder/GeocoderViewModel.js';\nexport { default as HomeButton } from './Widgets/HomeButton/HomeButton.js';\nexport { default as HomeButtonViewModel } from './Widgets/HomeButton/HomeButtonViewModel.js';\nexport { default as InfoBox } from './Widgets/InfoBox/InfoBox.js';\nexport { default as InfoBoxViewModel } from './Widgets/InfoBox/InfoBoxViewModel.js';\nexport { default as NavigationHelpButton } from './Widgets/NavigationHelpButton/NavigationHelpButton.js';\nexport { default as NavigationHelpButtonViewModel } from './Widgets/NavigationHelpButton/NavigationHelpButtonViewModel.js';\nexport { default as PerformanceWatchdog } from './Widgets/PerformanceWatchdog/PerformanceWatchdog.js';\nexport { default as PerformanceWatchdogViewModel } from './Widgets/PerformanceWatchdog/PerformanceWatchdogViewModel.js';\nexport { default as ProjectionPicker } from './Widgets/ProjectionPicker/ProjectionPicker.js';\nexport { default as ProjectionPickerViewModel } from './Widgets/ProjectionPicker/ProjectionPickerViewModel.js';\nexport { default as SceneModePicker } from './Widgets/SceneModePicker/SceneModePicker.js';\nexport { default as SceneModePickerViewModel } from './Widgets/SceneModePicker/SceneModePickerViewModel.js';\nexport { default as SelectionIndicator } from './Widgets/SelectionIndicator/SelectionIndicator.js';\nexport { default as SelectionIndicatorViewModel } from './Widgets/SelectionIndicator/SelectionIndicatorViewModel.js';\nexport { default as Timeline } from './Widgets/Timeline/Timeline.js';\nexport { default as TimelineHighlightRange } from './Widgets/Timeline/TimelineHighlightRange.js';\nexport { default as TimelineTrack } from './Widgets/Timeline/TimelineTrack.js';\nexport { default as VRButton } from './Widgets/VRButton/VRButton.js';\nexport { default as VRButtonViewModel } from './Widgets/VRButton/VRButtonViewModel.js';\nexport { default as Viewer } from './Widgets/Viewer/Viewer.js';\nexport { default as viewerCesium3DTilesInspectorMixin } from './Widgets/Viewer/viewerCesium3DTilesInspectorMixin.js';\nexport { default as viewerCesiumInspectorMixin } from './Widgets/Viewer/viewerCesiumInspectorMixin.js';\nexport { default as viewerDragDropMixin } from './Widgets/Viewer/viewerDragDropMixin.js';\nexport { default as viewerPerformanceWatchdogMixin } from './Widgets/Viewer/viewerPerformanceWatchdogMixin.js';\nexport { default as _shadersdegreesPerRadian } from './Shaders/Builtin/Constants/degreesPerRadian.js';\nexport { default as _shadersdepthRange } from './Shaders/Builtin/Constants/depthRange.js';\nexport { default as _shadersepsilon1 } from './Shaders/Builtin/Constants/epsilon1.js';\nexport { default as _shadersepsilon2 } from './Shaders/Builtin/Constants/epsilon2.js';\nexport { default as _shadersepsilon3 } from './Shaders/Builtin/Constants/epsilon3.js';\nexport { default as _shadersepsilon4 } from './Shaders/Builtin/Constants/epsilon4.js';\nexport { default as _shadersepsilon5 } from './Shaders/Builtin/Constants/epsilon5.js';\nexport { default as _shadersepsilon6 } from './Shaders/Builtin/Constants/epsilon6.js';\nexport { default as _shadersepsilon7 } from './Shaders/Builtin/Constants/epsilon7.js';\nexport { default as _shadersinfinity } from './Shaders/Builtin/Constants/infinity.js';\nexport { default as _shadersoneOverPi } from './Shaders/Builtin/Constants/oneOverPi.js';\nexport { default as _shadersoneOverTwoPi } from './Shaders/Builtin/Constants/oneOverTwoPi.js';\nexport { default as _shaderspassCesium3DTile } from './Shaders/Builtin/Constants/passCesium3DTile.js';\nexport { default as _shaderspassCesium3DTileClassification } from './Shaders/Builtin/Constants/passCesium3DTileClassification.js';\nexport { default as _shaderspassCesium3DTileClassificationIgnoreShow } from './Shaders/Builtin/Constants/passCesium3DTileClassificationIgnoreShow.js';\nexport { default as _shaderspassClassification } from './Shaders/Builtin/Constants/passClassification.js';\nexport { default as _shaderspassCompute } from './Shaders/Builtin/Constants/passCompute.js';\nexport { default as _shaderspassEnvironment } from './Shaders/Builtin/Constants/passEnvironment.js';\nexport { default as _shaderspassGlobe } from './Shaders/Builtin/Constants/passGlobe.js';\nexport { default as _shaderspassOpaque } from './Shaders/Builtin/Constants/passOpaque.js';\nexport { default as _shaderspassOverlay } from './Shaders/Builtin/Constants/passOverlay.js';\nexport { default as _shaderspassTerrainClassification } from './Shaders/Builtin/Constants/passTerrainClassification.js';\nexport { default as _shaderspassTranslucent } from './Shaders/Builtin/Constants/passTranslucent.js';\nexport { default as _shaderspi } from './Shaders/Builtin/Constants/pi.js';\nexport { default as _shaderspiOverFour } from './Shaders/Builtin/Constants/piOverFour.js';\nexport { default as _shaderspiOverSix } from './Shaders/Builtin/Constants/piOverSix.js';\nexport { default as _shaderspiOverThree } from './Shaders/Builtin/Constants/piOverThree.js';\nexport { default as _shaderspiOverTwo } from './Shaders/Builtin/Constants/piOverTwo.js';\nexport { default as _shadersradiansPerDegree } from './Shaders/Builtin/Constants/radiansPerDegree.js';\nexport { default as _shaderssceneMode2D } from './Shaders/Builtin/Constants/sceneMode2D.js';\nexport { default as _shaderssceneMode3D } from './Shaders/Builtin/Constants/sceneMode3D.js';\nexport { default as _shaderssceneModeColumbusView } from './Shaders/Builtin/Constants/sceneModeColumbusView.js';\nexport { default as _shaderssceneModeMorphing } from './Shaders/Builtin/Constants/sceneModeMorphing.js';\nexport { default as _shaderssolarRadius } from './Shaders/Builtin/Constants/solarRadius.js';\nexport { default as _shadersthreePiOver2 } from './Shaders/Builtin/Constants/threePiOver2.js';\nexport { default as _shaderstwoPi } from './Shaders/Builtin/Constants/twoPi.js';\nexport { default as _shaderswebMercatorMaxLatitude } from './Shaders/Builtin/Constants/webMercatorMaxLatitude.js';\nexport { default as _shadersHSBToRGB } from './Shaders/Builtin/Functions/HSBToRGB.js';\nexport { default as _shadersHSLToRGB } from './Shaders/Builtin/Functions/HSLToRGB.js';\nexport { default as _shadersRGBToHSB } from './Shaders/Builtin/Functions/RGBToHSB.js';\nexport { default as _shadersRGBToHSL } from './Shaders/Builtin/Functions/RGBToHSL.js';\nexport { default as _shadersRGBToXYZ } from './Shaders/Builtin/Functions/RGBToXYZ.js';\nexport { default as _shadersXYZToRGB } from './Shaders/Builtin/Functions/XYZToRGB.js';\nexport { default as _shadersacesTonemapping } from './Shaders/Builtin/Functions/acesTonemapping.js';\nexport { default as _shadersalphaWeight } from './Shaders/Builtin/Functions/alphaWeight.js';\nexport { default as _shadersantialias } from './Shaders/Builtin/Functions/antialias.js';\nexport { default as _shadersapproximateSphericalCoordinates } from './Shaders/Builtin/Functions/approximateSphericalCoordinates.js';\nexport { default as _shadersbackFacing } from './Shaders/Builtin/Functions/backFacing.js';\nexport { default as _shadersbranchFreeTernary } from './Shaders/Builtin/Functions/branchFreeTernary.js';\nexport { default as _shaderscascadeColor } from './Shaders/Builtin/Functions/cascadeColor.js';\nexport { default as _shaderscascadeDistance } from './Shaders/Builtin/Functions/cascadeDistance.js';\nexport { default as _shaderscascadeMatrix } from './Shaders/Builtin/Functions/cascadeMatrix.js';\nexport { default as _shaderscascadeWeights } from './Shaders/Builtin/Functions/cascadeWeights.js';\nexport { default as _shaderscolumbusViewMorph } from './Shaders/Builtin/Functions/columbusViewMorph.js';\nexport { default as _shaderscomputePosition } from './Shaders/Builtin/Functions/computePosition.js';\nexport { default as _shaderscosineAndSine } from './Shaders/Builtin/Functions/cosineAndSine.js';\nexport { default as _shadersdecompressTextureCoordinates } from './Shaders/Builtin/Functions/decompressTextureCoordinates.js';\nexport { default as _shadersdefaultPbrMaterial } from './Shaders/Builtin/Functions/defaultPbrMaterial.js';\nexport { default as _shadersdepthClamp } from './Shaders/Builtin/Functions/depthClamp.js';\nexport { default as _shaderseastNorthUpToEyeCoordinates } from './Shaders/Builtin/Functions/eastNorthUpToEyeCoordinates.js';\nexport { default as _shadersellipsoidContainsPoint } from './Shaders/Builtin/Functions/ellipsoidContainsPoint.js';\nexport { default as _shadersellipsoidWgs84TextureCoordinates } from './Shaders/Builtin/Functions/ellipsoidWgs84TextureCoordinates.js';\nexport { default as _shadersequalsEpsilon } from './Shaders/Builtin/Functions/equalsEpsilon.js';\nexport { default as _shaderseyeOffset } from './Shaders/Builtin/Functions/eyeOffset.js';\nexport { default as _shaderseyeToWindowCoordinates } from './Shaders/Builtin/Functions/eyeToWindowCoordinates.js';\nexport { default as _shadersfastApproximateAtan } from './Shaders/Builtin/Functions/fastApproximateAtan.js';\nexport { default as _shadersfog } from './Shaders/Builtin/Functions/fog.js';\nexport { default as _shadersgammaCorrect } from './Shaders/Builtin/Functions/gammaCorrect.js';\nexport { default as _shadersgeodeticSurfaceNormal } from './Shaders/Builtin/Functions/geodeticSurfaceNormal.js';\nexport { default as _shadersgetDefaultMaterial } from './Shaders/Builtin/Functions/getDefaultMaterial.js';\nexport { default as _shadersgetLambertDiffuse } from './Shaders/Builtin/Functions/getLambertDiffuse.js';\nexport { default as _shadersgetSpecular } from './Shaders/Builtin/Functions/getSpecular.js';\nexport { default as _shadersgetWaterNoise } from './Shaders/Builtin/Functions/getWaterNoise.js';\nexport { default as _shadershue } from './Shaders/Builtin/Functions/hue.js';\nexport { default as _shadersinverseGamma } from './Shaders/Builtin/Functions/inverseGamma.js';\nexport { default as _shadersisEmpty } from './Shaders/Builtin/Functions/isEmpty.js';\nexport { default as _shadersisFull } from './Shaders/Builtin/Functions/isFull.js';\nexport { default as _shaderslatitudeToWebMercatorFraction } from './Shaders/Builtin/Functions/latitudeToWebMercatorFraction.js';\nexport { default as _shaderslineDistance } from './Shaders/Builtin/Functions/lineDistance.js';\nexport { default as _shaderslinearToSrgb } from './Shaders/Builtin/Functions/linearToSrgb.js';\nexport { default as _shadersluminance } from './Shaders/Builtin/Functions/luminance.js';\nexport { default as _shadersmetersPerPixel } from './Shaders/Builtin/Functions/metersPerPixel.js';\nexport { default as _shadersmodelToWindowCoordinates } from './Shaders/Builtin/Functions/modelToWindowCoordinates.js';\nexport { default as _shadersmultiplyWithColorBalance } from './Shaders/Builtin/Functions/multiplyWithColorBalance.js';\nexport { default as _shadersnearFarScalar } from './Shaders/Builtin/Functions/nearFarScalar.js';\nexport { default as _shadersoctDecode } from './Shaders/Builtin/Functions/octDecode.js';\nexport { default as _shaderspackDepth } from './Shaders/Builtin/Functions/packDepth.js';\nexport { default as _shaderspbrLighting } from './Shaders/Builtin/Functions/pbrLighting.js';\nexport { default as _shaderspbrMetallicRoughnessMaterial } from './Shaders/Builtin/Functions/pbrMetallicRoughnessMaterial.js';\nexport { default as _shaderspbrSpecularGlossinessMaterial } from './Shaders/Builtin/Functions/pbrSpecularGlossinessMaterial.js';\nexport { default as _shadersphong } from './Shaders/Builtin/Functions/phong.js';\nexport { default as _shadersplaneDistance } from './Shaders/Builtin/Functions/planeDistance.js';\nexport { default as _shaderspointAlongRay } from './Shaders/Builtin/Functions/pointAlongRay.js';\nexport { default as _shadersrayEllipsoidIntersectionInterval } from './Shaders/Builtin/Functions/rayEllipsoidIntersectionInterval.js';\nexport { default as _shadersraySphereIntersectionInterval } from './Shaders/Builtin/Functions/raySphereIntersectionInterval.js';\nexport { default as _shadersreadDepth } from './Shaders/Builtin/Functions/readDepth.js';\nexport { default as _shadersreadNonPerspective } from './Shaders/Builtin/Functions/readNonPerspective.js';\nexport { default as _shadersreverseLogDepth } from './Shaders/Builtin/Functions/reverseLogDepth.js';\nexport { default as _shadersround } from './Shaders/Builtin/Functions/round.js';\nexport { default as _shaderssampleOctahedralProjection } from './Shaders/Builtin/Functions/sampleOctahedralProjection.js';\nexport { default as _shaderssaturation } from './Shaders/Builtin/Functions/saturation.js';\nexport { default as _shadersshadowDepthCompare } from './Shaders/Builtin/Functions/shadowDepthCompare.js';\nexport { default as _shadersshadowVisibility } from './Shaders/Builtin/Functions/shadowVisibility.js';\nexport { default as _shaderssignNotZero } from './Shaders/Builtin/Functions/signNotZero.js';\nexport { default as _shaderssphericalHarmonics } from './Shaders/Builtin/Functions/sphericalHarmonics.js';\nexport { default as _shaderssrgbToLinear } from './Shaders/Builtin/Functions/srgbToLinear.js';\nexport { default as _shaderstangentToEyeSpaceMatrix } from './Shaders/Builtin/Functions/tangentToEyeSpaceMatrix.js';\nexport { default as _shaderstransformPlane } from './Shaders/Builtin/Functions/transformPlane.js';\nexport { default as _shaderstranslateRelativeToEye } from './Shaders/Builtin/Functions/translateRelativeToEye.js';\nexport { default as _shaderstranslucentPhong } from './Shaders/Builtin/Functions/translucentPhong.js';\nexport { default as _shaderstranspose } from './Shaders/Builtin/Functions/transpose.js';\nexport { default as _shadersunpackDepth } from './Shaders/Builtin/Functions/unpackDepth.js';\nexport { default as _shadersunpackFloat } from './Shaders/Builtin/Functions/unpackFloat.js';\nexport { default as _shadersunpackUint } from './Shaders/Builtin/Functions/unpackUint.js';\nexport { default as _shadersvalueTransform } from './Shaders/Builtin/Functions/valueTransform.js';\nexport { default as _shadersvertexLogDepth } from './Shaders/Builtin/Functions/vertexLogDepth.js';\nexport { default as _shaderswindowToEyeCoordinates } from './Shaders/Builtin/Functions/windowToEyeCoordinates.js';\nexport { default as _shaderswriteDepthClamp } from './Shaders/Builtin/Functions/writeDepthClamp.js';\nexport { default as _shaderswriteLogDepth } from './Shaders/Builtin/Functions/writeLogDepth.js';\nexport { default as _shaderswriteNonPerspective } from './Shaders/Builtin/Functions/writeNonPerspective.js';\nexport { default as _shadersdepthRangeStruct } from './Shaders/Builtin/Structs/depthRangeStruct.js';\nexport { default as _shadersmaterial } from './Shaders/Builtin/Structs/material.js';\nexport { default as _shadersmaterialInput } from './Shaders/Builtin/Structs/materialInput.js';\nexport { default as _shadersmodelMaterial } from './Shaders/Builtin/Structs/modelMaterial.js';\nexport { default as _shadersmodelVertexOutput } from './Shaders/Builtin/Structs/modelVertexOutput.js';\nexport { default as _shaderspbrParameters } from './Shaders/Builtin/Structs/pbrParameters.js';\nexport { default as _shadersray } from './Shaders/Builtin/Structs/ray.js';\nexport { default as _shadersraySegment } from './Shaders/Builtin/Structs/raySegment.js';\nexport { default as _shadersshadowParameters } from './Shaders/Builtin/Structs/shadowParameters.js';\nexport { default as createTaskProcessorWorker } from './WorkersES6/createTaskProcessorWorker.js';\n","import BoundingSphere from \"./BoundingSphere.js\";\nimport buildModuleUrl from \"./buildModuleUrl.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport GeographicTilingScheme from \"./GeographicTilingScheme.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport Resource from \"./Resource.js\";\n\nconst scratchDiagonalCartesianNE = new Cartesian3();\nconst scratchDiagonalCartesianSW = new Cartesian3();\nconst scratchDiagonalCartographic = new Cartographic();\nconst scratchCenterCartesian = new Cartesian3();\nconst scratchSurfaceCartesian = new Cartesian3();\n\nconst scratchBoundingSphere = new BoundingSphere();\nconst tilingScheme = new GeographicTilingScheme();\nconst scratchCorners = [\n  new Cartographic(),\n  new Cartographic(),\n  new Cartographic(),\n  new Cartographic(),\n];\nconst scratchTileXY = new Cartesian2();\n\n/**\n * A collection of functions for approximating terrain height\n * @private\n */\nconst ApproximateTerrainHeights = {};\n\n/**\n * Initializes the minimum and maximum terrain heights\n * @return {Promise.<void>}\n */\nApproximateTerrainHeights.initialize = function () {\n  let initPromise = ApproximateTerrainHeights._initPromise;\n  if (defined(initPromise)) {\n    return initPromise;\n  }\n\n  initPromise = Resource.fetchJson(\n    buildModuleUrl(\"Assets/approximateTerrainHeights.json\")\n  ).then(function (json) {\n    ApproximateTerrainHeights._terrainHeights = json;\n  });\n  ApproximateTerrainHeights._initPromise = initPromise;\n\n  return initPromise;\n};\n\n/**\n * Computes the minimum and maximum terrain heights for a given rectangle\n * @param {Rectangle} rectangle The bounding rectangle\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid\n * @return {{minimumTerrainHeight: Number, maximumTerrainHeight: Number}}\n */\nApproximateTerrainHeights.getMinimumMaximumHeights = function (\n  rectangle,\n  ellipsoid\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"rectangle\", rectangle);\n  if (!defined(ApproximateTerrainHeights._terrainHeights)) {\n    throw new DeveloperError(\n      \"You must call ApproximateTerrainHeights.initialize and wait for the promise to resolve before using this function\"\n    );\n  }\n  //>>includeEnd('debug');\n  ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n\n  const xyLevel = getTileXYLevel(rectangle);\n\n  // Get the terrain min/max for that tile\n  let minTerrainHeight = ApproximateTerrainHeights._defaultMinTerrainHeight;\n  let maxTerrainHeight = ApproximateTerrainHeights._defaultMaxTerrainHeight;\n  if (defined(xyLevel)) {\n    const key = `${xyLevel.level}-${xyLevel.x}-${xyLevel.y}`;\n    const heights = ApproximateTerrainHeights._terrainHeights[key];\n    if (defined(heights)) {\n      minTerrainHeight = heights[0];\n      maxTerrainHeight = heights[1];\n    }\n\n    // Compute min by taking the center of the NE->SW diagonal and finding distance to the surface\n    ellipsoid.cartographicToCartesian(\n      Rectangle.northeast(rectangle, scratchDiagonalCartographic),\n      scratchDiagonalCartesianNE\n    );\n    ellipsoid.cartographicToCartesian(\n      Rectangle.southwest(rectangle, scratchDiagonalCartographic),\n      scratchDiagonalCartesianSW\n    );\n\n    Cartesian3.midpoint(\n      scratchDiagonalCartesianSW,\n      scratchDiagonalCartesianNE,\n      scratchCenterCartesian\n    );\n    const surfacePosition = ellipsoid.scaleToGeodeticSurface(\n      scratchCenterCartesian,\n      scratchSurfaceCartesian\n    );\n    if (defined(surfacePosition)) {\n      const distance = Cartesian3.distance(\n        scratchCenterCartesian,\n        surfacePosition\n      );\n      minTerrainHeight = Math.min(minTerrainHeight, -distance);\n    } else {\n      minTerrainHeight = ApproximateTerrainHeights._defaultMinTerrainHeight;\n    }\n  }\n\n  minTerrainHeight = Math.max(\n    ApproximateTerrainHeights._defaultMinTerrainHeight,\n    minTerrainHeight\n  );\n\n  return {\n    minimumTerrainHeight: minTerrainHeight,\n    maximumTerrainHeight: maxTerrainHeight,\n  };\n};\n\n/**\n * Computes the bounding sphere based on the tile heights in the rectangle\n * @param {Rectangle} rectangle The bounding rectangle\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid\n * @return {BoundingSphere} The result bounding sphere\n */\nApproximateTerrainHeights.getBoundingSphere = function (rectangle, ellipsoid) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"rectangle\", rectangle);\n  if (!defined(ApproximateTerrainHeights._terrainHeights)) {\n    throw new DeveloperError(\n      \"You must call ApproximateTerrainHeights.initialize and wait for the promise to resolve before using this function\"\n    );\n  }\n  //>>includeEnd('debug');\n  ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n\n  const xyLevel = getTileXYLevel(rectangle);\n\n  // Get the terrain max for that tile\n  let maxTerrainHeight = ApproximateTerrainHeights._defaultMaxTerrainHeight;\n  if (defined(xyLevel)) {\n    const key = `${xyLevel.level}-${xyLevel.x}-${xyLevel.y}`;\n    const heights = ApproximateTerrainHeights._terrainHeights[key];\n    if (defined(heights)) {\n      maxTerrainHeight = heights[1];\n    }\n  }\n\n  const result = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, 0.0);\n  BoundingSphere.fromRectangle3D(\n    rectangle,\n    ellipsoid,\n    maxTerrainHeight,\n    scratchBoundingSphere\n  );\n\n  return BoundingSphere.union(result, scratchBoundingSphere, result);\n};\n\nfunction getTileXYLevel(rectangle) {\n  Cartographic.fromRadians(\n    rectangle.east,\n    rectangle.north,\n    0.0,\n    scratchCorners[0]\n  );\n  Cartographic.fromRadians(\n    rectangle.west,\n    rectangle.north,\n    0.0,\n    scratchCorners[1]\n  );\n  Cartographic.fromRadians(\n    rectangle.east,\n    rectangle.south,\n    0.0,\n    scratchCorners[2]\n  );\n  Cartographic.fromRadians(\n    rectangle.west,\n    rectangle.south,\n    0.0,\n    scratchCorners[3]\n  );\n\n  // Determine which tile the bounding rectangle is in\n  let lastLevelX = 0,\n    lastLevelY = 0;\n  let currentX = 0,\n    currentY = 0;\n  const maxLevel = ApproximateTerrainHeights._terrainHeightsMaxLevel;\n  let i;\n  for (i = 0; i <= maxLevel; ++i) {\n    let failed = false;\n    for (let j = 0; j < 4; ++j) {\n      const corner = scratchCorners[j];\n      tilingScheme.positionToTileXY(corner, i, scratchTileXY);\n      if (j === 0) {\n        currentX = scratchTileXY.x;\n        currentY = scratchTileXY.y;\n      } else if (currentX !== scratchTileXY.x || currentY !== scratchTileXY.y) {\n        failed = true;\n        break;\n      }\n    }\n\n    if (failed) {\n      break;\n    }\n\n    lastLevelX = currentX;\n    lastLevelY = currentY;\n  }\n\n  if (i === 0) {\n    return undefined;\n  }\n\n  return {\n    x: lastLevelX,\n    y: lastLevelY,\n    level: i > maxLevel ? maxLevel : i - 1,\n  };\n}\n\nApproximateTerrainHeights._terrainHeightsMaxLevel = 6;\nApproximateTerrainHeights._defaultMaxTerrainHeight = 9000.0;\nApproximateTerrainHeights._defaultMinTerrainHeight = -100000.0;\nApproximateTerrainHeights._terrainHeights = undefined;\nApproximateTerrainHeights._initPromise = undefined;\n\nObject.defineProperties(ApproximateTerrainHeights, {\n  /**\n   * Determines if the terrain heights are initialized and ready to use. To initialize the terrain heights,\n   * call {@link ApproximateTerrainHeights#initialize} and wait for the returned promise to resolve.\n   * @type {Boolean}\n   * @readonly\n   * @memberof ApproximateTerrainHeights\n   */\n  initialized: {\n    get: function () {\n      return defined(ApproximateTerrainHeights._terrainHeights);\n    },\n  },\n});\nexport default ApproximateTerrainHeights;\n","/**\n * ArcType defines the path that should be taken connecting vertices.\n *\n * @enum {Number}\n */\nconst ArcType = {\n  /**\n   * Straight line that does not conform to the surface of the ellipsoid.\n   *\n   * @type {Number}\n   * @constant\n   */\n  NONE: 0,\n\n  /**\n   * Follow geodesic path.\n   *\n   * @type {Number}\n   * @constant\n   */\n  GEODESIC: 1,\n\n  /**\n   * Follow rhumb or loxodrome path.\n   *\n   * @type {Number}\n   * @constant\n   */\n  RHUMB: 2,\n};\nexport default Object.freeze(ArcType);\n","import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * A collection of key-value pairs that is stored as a hash for easy\n * lookup but also provides an array for fast iteration.\n * @alias AssociativeArray\n * @constructor\n */\nfunction AssociativeArray() {\n  this._array = [];\n  this._hash = {};\n}\n\nObject.defineProperties(AssociativeArray.prototype, {\n  /**\n   * Gets the number of items in the collection.\n   * @memberof AssociativeArray.prototype\n   *\n   * @type {Number}\n   */\n  length: {\n    get: function () {\n      return this._array.length;\n    },\n  },\n  /**\n   * Gets an unordered array of all values in the collection.\n   * This is a live array that will automatically reflect the values in the collection,\n   * it should not be modified directly.\n   * @memberof AssociativeArray.prototype\n   *\n   * @type {Array}\n   */\n  values: {\n    get: function () {\n      return this._array;\n    },\n  },\n});\n\n/**\n * Determines if the provided key is in the array.\n *\n * @param {String|Number} key The key to check.\n * @returns {Boolean} <code>true</code> if the key is in the array, <code>false</code> otherwise.\n */\nAssociativeArray.prototype.contains = function (key) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof key !== \"string\" && typeof key !== \"number\") {\n    throw new DeveloperError(\"key is required to be a string or number.\");\n  }\n  //>>includeEnd('debug');\n  return defined(this._hash[key]);\n};\n\n/**\n * Associates the provided key with the provided value.  If the key already\n * exists, it is overwritten with the new value.\n *\n * @param {String|Number} key A unique identifier.\n * @param {*} value The value to associate with the provided key.\n */\nAssociativeArray.prototype.set = function (key, value) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof key !== \"string\" && typeof key !== \"number\") {\n    throw new DeveloperError(\"key is required to be a string or number.\");\n  }\n  //>>includeEnd('debug');\n\n  const oldValue = this._hash[key];\n  if (value !== oldValue) {\n    this.remove(key);\n    this._hash[key] = value;\n    this._array.push(value);\n  }\n};\n\n/**\n * Retrieves the value associated with the provided key.\n *\n * @param {String|Number} key The key whose value is to be retrieved.\n * @returns {*} The associated value, or undefined if the key does not exist in the collection.\n */\nAssociativeArray.prototype.get = function (key) {\n  //>>includeStart('debug', pragmas.debug);\n  if (typeof key !== \"string\" && typeof key !== \"number\") {\n    throw new DeveloperError(\"key is required to be a string or number.\");\n  }\n  //>>includeEnd('debug');\n  return this._hash[key];\n};\n\n/**\n * Removes a key-value pair from the collection.\n *\n * @param {String|Number} key The key to be removed.\n * @returns {Boolean} True if it was removed, false if the key was not in the collection.\n */\nAssociativeArray.prototype.remove = function (key) {\n  //>>includeStart('debug', pragmas.debug);\n  if (defined(key) && typeof key !== \"string\" && typeof key !== \"number\") {\n    throw new DeveloperError(\"key is required to be a string or number.\");\n  }\n  //>>includeEnd('debug');\n\n  const value = this._hash[key];\n  const hasValue = defined(value);\n  if (hasValue) {\n    const array = this._array;\n    array.splice(array.indexOf(value), 1);\n    delete this._hash[key];\n  }\n  return hasValue;\n};\n\n/**\n * Clears the collection.\n */\nAssociativeArray.prototype.removeAll = function () {\n  const array = this._array;\n  if (array.length > 0) {\n    this._hash = {};\n    array.length = 0;\n  }\n};\nexport default AssociativeArray;\n","import Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport Check from \"./Check.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\nimport AttributeType from \"../Scene/AttributeType.js\";\n\nconst RIGHT_SHIFT = 1.0 / 256.0;\nconst LEFT_SHIFT = 256.0;\n\n/**\n * Attribute compression and decompression functions.\n *\n * @namespace AttributeCompression\n *\n * @private\n */\nconst AttributeCompression = {};\n\n/**\n * Encodes a normalized vector into 2 SNORM values in the range of [0-rangeMax] following the 'oct' encoding.\n *\n * Oct encoding is a compact representation of unit length vectors.\n * The 'oct' encoding is described in \"A Survey of Efficient Representations of Independent Unit Vectors\",\n * Cigolle et al 2014: {@link http://jcgt.org/published/0003/02/01/}\n *\n * @param {Cartesian3} vector The normalized vector to be compressed into 2 component 'oct' encoding.\n * @param {Cartesian2} result The 2 component oct-encoded unit length vector.\n * @param {Number} rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\n * @returns {Cartesian2} The 2 component oct-encoded unit length vector.\n *\n * @exception {DeveloperError} vector must be normalized.\n *\n * @see AttributeCompression.octDecodeInRange\n */\nAttributeCompression.octEncodeInRange = function (vector, rangeMax, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"vector\", vector);\n  Check.defined(\"result\", result);\n  const magSquared = Cartesian3.magnitudeSquared(vector);\n  if (Math.abs(magSquared - 1.0) > CesiumMath.EPSILON6) {\n    throw new DeveloperError(\"vector must be normalized.\");\n  }\n  //>>includeEnd('debug');\n\n  result.x =\n    vector.x / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\n  result.y =\n    vector.y / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\n  if (vector.z < 0) {\n    const x = result.x;\n    const y = result.y;\n    result.x = (1.0 - Math.abs(y)) * CesiumMath.signNotZero(x);\n    result.y = (1.0 - Math.abs(x)) * CesiumMath.signNotZero(y);\n  }\n\n  result.x = CesiumMath.toSNorm(result.x, rangeMax);\n  result.y = CesiumMath.toSNorm(result.y, rangeMax);\n\n  return result;\n};\n\n/**\n * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the 'oct' encoding.\n *\n * @param {Cartesian3} vector The normalized vector to be compressed into 2 byte 'oct' encoding.\n * @param {Cartesian2} result The 2 byte oct-encoded unit length vector.\n * @returns {Cartesian2} The 2 byte oct-encoded unit length vector.\n *\n * @exception {DeveloperError} vector must be normalized.\n *\n * @see AttributeCompression.octEncodeInRange\n * @see AttributeCompression.octDecode\n */\nAttributeCompression.octEncode = function (vector, result) {\n  return AttributeCompression.octEncodeInRange(vector, 255, result);\n};\n\nconst octEncodeScratch = new Cartesian2();\nconst uint8ForceArray = new Uint8Array(1);\nfunction forceUint8(value) {\n  uint8ForceArray[0] = value;\n  return uint8ForceArray[0];\n}\n/**\n * @param {Cartesian3} vector The normalized vector to be compressed into 4 byte 'oct' encoding.\n * @param {Cartesian4} result The 4 byte oct-encoded unit length vector.\n * @returns {Cartesian4} The 4 byte oct-encoded unit length vector.\n *\n * @exception {DeveloperError} vector must be normalized.\n *\n * @see AttributeCompression.octEncodeInRange\n * @see AttributeCompression.octDecodeFromCartesian4\n */\nAttributeCompression.octEncodeToCartesian4 = function (vector, result) {\n  AttributeCompression.octEncodeInRange(vector, 65535, octEncodeScratch);\n  result.x = forceUint8(octEncodeScratch.x * RIGHT_SHIFT);\n  result.y = forceUint8(octEncodeScratch.x);\n  result.z = forceUint8(octEncodeScratch.y * RIGHT_SHIFT);\n  result.w = forceUint8(octEncodeScratch.y);\n  return result;\n};\n\n/**\n * Decodes a unit-length vector in 'oct' encoding to a normalized 3-component vector.\n *\n * @param {Number} x The x component of the oct-encoded unit length vector.\n * @param {Number} y The y component of the oct-encoded unit length vector.\n * @param {Number} rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\n * @param {Cartesian3} result The decoded and normalized vector\n * @returns {Cartesian3} The decoded and normalized vector.\n *\n * @exception {DeveloperError} x and y must be unsigned normalized integers between 0 and rangeMax.\n *\n * @see AttributeCompression.octEncodeInRange\n */\nAttributeCompression.octDecodeInRange = function (x, y, rangeMax, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"result\", result);\n  if (x < 0 || x > rangeMax || y < 0 || y > rangeMax) {\n    throw new DeveloperError(\n      `x and y must be unsigned normalized integers between 0 and ${rangeMax}`\n    );\n  }\n  //>>includeEnd('debug');\n\n  result.x = CesiumMath.fromSNorm(x, rangeMax);\n  result.y = CesiumMath.fromSNorm(y, rangeMax);\n  result.z = 1.0 - (Math.abs(result.x) + Math.abs(result.y));\n\n  if (result.z < 0.0) {\n    const oldVX = result.x;\n    result.x = (1.0 - Math.abs(result.y)) * CesiumMath.signNotZero(oldVX);\n    result.y = (1.0 - Math.abs(oldVX)) * CesiumMath.signNotZero(result.y);\n  }\n\n  return Cartesian3.normalize(result, result);\n};\n\n/**\n * Decodes a unit-length vector in 2 byte 'oct' encoding to a normalized 3-component vector.\n *\n * @param {Number} x The x component of the oct-encoded unit length vector.\n * @param {Number} y The y component of the oct-encoded unit length vector.\n * @param {Cartesian3} result The decoded and normalized vector.\n * @returns {Cartesian3} The decoded and normalized vector.\n *\n * @exception {DeveloperError} x and y must be an unsigned normalized integer between 0 and 255.\n *\n * @see AttributeCompression.octDecodeInRange\n */\nAttributeCompression.octDecode = function (x, y, result) {\n  return AttributeCompression.octDecodeInRange(x, y, 255, result);\n};\n\n/**\n * Decodes a unit-length vector in 4 byte 'oct' encoding to a normalized 3-component vector.\n *\n * @param {Cartesian4} encoded The oct-encoded unit length vector.\n * @param {Cartesian3} result The decoded and normalized vector.\n * @returns {Cartesian3} The decoded and normalized vector.\n *\n * @exception {DeveloperError} x, y, z, and w must be unsigned normalized integers between 0 and 255.\n *\n * @see AttributeCompression.octDecodeInRange\n * @see AttributeCompression.octEncodeToCartesian4\n */\nAttributeCompression.octDecodeFromCartesian4 = function (encoded, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"encoded\", encoded);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n  const x = encoded.x;\n  const y = encoded.y;\n  const z = encoded.z;\n  const w = encoded.w;\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    x < 0 ||\n    x > 255 ||\n    y < 0 ||\n    y > 255 ||\n    z < 0 ||\n    z > 255 ||\n    w < 0 ||\n    w > 255\n  ) {\n    throw new DeveloperError(\n      \"x, y, z, and w must be unsigned normalized integers between 0 and 255\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const xOct16 = x * LEFT_SHIFT + y;\n  const yOct16 = z * LEFT_SHIFT + w;\n  return AttributeCompression.octDecodeInRange(xOct16, yOct16, 65535, result);\n};\n\n/**\n * Packs an oct encoded vector into a single floating-point number.\n *\n * @param {Cartesian2} encoded The oct encoded vector.\n * @returns {Number} The oct encoded vector packed into a single float.\n *\n */\nAttributeCompression.octPackFloat = function (encoded) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"encoded\", encoded);\n  //>>includeEnd('debug');\n  return 256.0 * encoded.x + encoded.y;\n};\n\nconst scratchEncodeCart2 = new Cartesian2();\n\n/**\n * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the 'oct' encoding and\n * stores those values in a single float-point number.\n *\n * @param {Cartesian3} vector The normalized vector to be compressed into 2 byte 'oct' encoding.\n * @returns {Number} The 2 byte oct-encoded unit length vector.\n *\n * @exception {DeveloperError} vector must be normalized.\n */\nAttributeCompression.octEncodeFloat = function (vector) {\n  AttributeCompression.octEncode(vector, scratchEncodeCart2);\n  return AttributeCompression.octPackFloat(scratchEncodeCart2);\n};\n\n/**\n * Decodes a unit-length vector in 'oct' encoding packed in a floating-point number to a normalized 3-component vector.\n *\n * @param {Number} value The oct-encoded unit length vector stored as a single floating-point number.\n * @param {Cartesian3} result The decoded and normalized vector\n * @returns {Cartesian3} The decoded and normalized vector.\n *\n */\nAttributeCompression.octDecodeFloat = function (value, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"value\", value);\n  //>>includeEnd('debug');\n\n  const temp = value / 256.0;\n  const x = Math.floor(temp);\n  const y = (temp - x) * 256.0;\n\n  return AttributeCompression.octDecode(x, y, result);\n};\n\n/**\n * Encodes three normalized vectors into 6 SNORM values in the range of [0-255] following the 'oct' encoding and\n * packs those into two floating-point numbers.\n *\n * @param {Cartesian3} v1 A normalized vector to be compressed.\n * @param {Cartesian3} v2 A normalized vector to be compressed.\n * @param {Cartesian3} v3 A normalized vector to be compressed.\n * @param {Cartesian2} result The 'oct' encoded vectors packed into two floating-point numbers.\n * @returns {Cartesian2} The 'oct' encoded vectors packed into two floating-point numbers.\n *\n */\nAttributeCompression.octPack = function (v1, v2, v3, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"v1\", v1);\n  Check.defined(\"v2\", v2);\n  Check.defined(\"v3\", v3);\n  Check.defined(\"result\", result);\n  //>>includeEnd('debug');\n\n  const encoded1 = AttributeCompression.octEncodeFloat(v1);\n  const encoded2 = AttributeCompression.octEncodeFloat(v2);\n\n  const encoded3 = AttributeCompression.octEncode(v3, scratchEncodeCart2);\n  result.x = 65536.0 * encoded3.x + encoded1;\n  result.y = 65536.0 * encoded3.y + encoded2;\n  return result;\n};\n\n/**\n * Decodes three unit-length vectors in 'oct' encoding packed into a floating-point number to a normalized 3-component vector.\n *\n * @param {Cartesian2} packed The three oct-encoded unit length vectors stored as two floating-point number.\n * @param {Cartesian3} v1 One decoded and normalized vector.\n * @param {Cartesian3} v2 One decoded and normalized vector.\n * @param {Cartesian3} v3 One decoded and normalized vector.\n */\nAttributeCompression.octUnpack = function (packed, v1, v2, v3) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"packed\", packed);\n  Check.defined(\"v1\", v1);\n  Check.defined(\"v2\", v2);\n  Check.defined(\"v3\", v3);\n  //>>includeEnd('debug');\n\n  let temp = packed.x / 65536.0;\n  const x = Math.floor(temp);\n  const encodedFloat1 = (temp - x) * 65536.0;\n\n  temp = packed.y / 65536.0;\n  const y = Math.floor(temp);\n  const encodedFloat2 = (temp - y) * 65536.0;\n\n  AttributeCompression.octDecodeFloat(encodedFloat1, v1);\n  AttributeCompression.octDecodeFloat(encodedFloat2, v2);\n  AttributeCompression.octDecode(x, y, v3);\n};\n\n/**\n * Pack texture coordinates into a single float. The texture coordinates will only preserve 12 bits of precision.\n *\n * @param {Cartesian2} textureCoordinates The texture coordinates to compress.  Both coordinates must be in the range 0.0-1.0.\n * @returns {Number} The packed texture coordinates.\n *\n */\nAttributeCompression.compressTextureCoordinates = function (\n  textureCoordinates\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"textureCoordinates\", textureCoordinates);\n  //>>includeEnd('debug');\n\n  // Move x and y to the range 0-4095;\n  const x = (textureCoordinates.x * 4095.0) | 0;\n  const y = (textureCoordinates.y * 4095.0) | 0;\n  return 4096.0 * x + y;\n};\n\n/**\n * Decompresses texture coordinates that were packed into a single float.\n *\n * @param {Number} compressed The compressed texture coordinates.\n * @param {Cartesian2} result The decompressed texture coordinates.\n * @returns {Cartesian2} The modified result parameter.\n *\n */\nAttributeCompression.decompressTextureCoordinates = function (\n  compressed,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"compressed\", compressed);\n  Check.defined(\"result\", result);\n  //>>includeEnd('debug');\n\n  const temp = compressed / 4096.0;\n  const xZeroTo4095 = Math.floor(temp);\n  result.x = xZeroTo4095 / 4095.0;\n  result.y = (compressed - xZeroTo4095 * 4096) / 4095;\n  return result;\n};\n\nfunction zigZagDecode(value) {\n  return (value >> 1) ^ -(value & 1);\n}\n\n/**\n * Decodes delta and ZigZag encoded vertices. This modifies the buffers in place.\n *\n * @param {Uint16Array} uBuffer The buffer view of u values.\n * @param {Uint16Array} vBuffer The buffer view of v values.\n * @param {Uint16Array} [heightBuffer] The buffer view of height values.\n *\n * @see {@link https://github.com/CesiumGS/quantized-mesh|quantized-mesh-1.0 terrain format}\n */\nAttributeCompression.zigZagDeltaDecode = function (\n  uBuffer,\n  vBuffer,\n  heightBuffer\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"uBuffer\", uBuffer);\n  Check.defined(\"vBuffer\", vBuffer);\n  Check.typeOf.number.equals(\n    \"uBuffer.length\",\n    \"vBuffer.length\",\n    uBuffer.length,\n    vBuffer.length\n  );\n  if (defined(heightBuffer)) {\n    Check.typeOf.number.equals(\n      \"uBuffer.length\",\n      \"heightBuffer.length\",\n      uBuffer.length,\n      heightBuffer.length\n    );\n  }\n  //>>includeEnd('debug');\n\n  const count = uBuffer.length;\n\n  let u = 0;\n  let v = 0;\n  let height = 0;\n\n  for (let i = 0; i < count; ++i) {\n    u += zigZagDecode(uBuffer[i]);\n    v += zigZagDecode(vBuffer[i]);\n\n    uBuffer[i] = u;\n    vBuffer[i] = v;\n\n    if (defined(heightBuffer)) {\n      height += zigZagDecode(heightBuffer[i]);\n      heightBuffer[i] = height;\n    }\n  }\n};\n\n/**\n * Dequantizes a quantized typed array into a floating point typed array.\n *\n * @see {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization#encoding-quantized-data}\n *\n * @param {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array} typedArray The typed array for the quantized data.\n * @param {ComponentDatatype} componentDatatype The component datatype of the quantized data.\n * @param {AttributeType} type The attribute type of the quantized data.\n * @param {Number} count The number of attributes referenced in the dequantized array.\n *\n * @returns {Float32Array} The dequantized array.\n */\nAttributeCompression.dequantize = function (\n  typedArray,\n  componentDatatype,\n  type,\n  count\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"typedArray\", typedArray);\n  Check.defined(\"componentDatatype\", componentDatatype);\n  Check.defined(\"type\", type);\n  Check.defined(\"count\", count);\n  //>>includeEnd('debug');\n\n  const componentsPerAttribute = AttributeType.getNumberOfComponents(type);\n\n  let divisor;\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      divisor = 127.0;\n      break;\n    case ComponentDatatype.UNSIGNED_BYTE:\n      divisor = 255.0;\n      break;\n    case ComponentDatatype.SHORT:\n      divisor = 32767.0;\n      break;\n    case ComponentDatatype.UNSIGNED_SHORT:\n      divisor = 65535.0;\n      break;\n    case ComponentDatatype.INT:\n      divisor = 2147483647.0;\n      break;\n    case ComponentDatatype.UNSIGNED_INT:\n      divisor = 4294967295.0;\n      break;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\n        `Cannot dequantize component datatype: ${componentDatatype}`\n      );\n    //>>includeEnd('debug');\n  }\n\n  const dequantizedTypedArray = new Float32Array(\n    count * componentsPerAttribute\n  );\n\n  for (let i = 0; i < count; i++) {\n    for (let j = 0; j < componentsPerAttribute; j++) {\n      const index = i * componentsPerAttribute + j;\n      dequantizedTypedArray[index] = Math.max(\n        typedArray[index] / divisor,\n        -1.0\n      );\n    }\n  }\n\n  return dequantizedTypedArray;\n};\n\n/**\n * Decode RGB565-encoded colors into a floating point typed array containing\n * normalized RGB values.\n *\n * @param {Uint16Array} typedArray Array of RGB565 values\n * @param {Float32Array} [result] Array to store the normalized VEC3 result\n */\nAttributeCompression.decodeRGB565 = function (typedArray, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"typedArray\", typedArray);\n\n  const expectedLength = typedArray.length * 3;\n  if (defined(result)) {\n    Check.typeOf.number.equals(\n      \"result.length\",\n      \"typedArray.length * 3\",\n      result.length,\n      expectedLength\n    );\n  }\n  //>>includeEnd('debug');\n\n  const count = typedArray.length;\n  if (!defined(result)) {\n    result = new Float32Array(count * 3);\n  }\n\n  const mask5 = (1 << 5) - 1;\n  const mask6 = (1 << 6) - 1;\n  const normalize5 = 1.0 / 31.0;\n  const normalize6 = 1.0 / 63.0;\n  for (let i = 0; i < count; i++) {\n    const value = typedArray[i];\n    const red = value >> 11;\n    const green = (value >> 5) & mask6;\n    const blue = value & mask5;\n\n    const offset = 3 * i;\n    result[offset] = red * normalize5;\n    result[offset + 1] = green * normalize6;\n    result[offset + 2] = blue * normalize5;\n  }\n\n  return result;\n};\n\nexport default AttributeCompression;\n","import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Intersect from \"./Intersect.js\";\n\n/**\n * Creates an instance of an AxisAlignedBoundingBox from the minimum and maximum points along the x, y, and z axes.\n * @alias AxisAlignedBoundingBox\n * @constructor\n *\n * @param {Cartesian3} [minimum=Cartesian3.ZERO] The minimum point along the x, y, and z axes.\n * @param {Cartesian3} [maximum=Cartesian3.ZERO] The maximum point along the x, y, and z axes.\n * @param {Cartesian3} [center] The center of the box; automatically computed if not supplied.\n *\n * @see BoundingSphere\n * @see BoundingRectangle\n */\nfunction AxisAlignedBoundingBox(minimum, maximum, center) {\n  /**\n   * The minimum point defining the bounding box.\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.minimum = Cartesian3.clone(defaultValue(minimum, Cartesian3.ZERO));\n\n  /**\n   * The maximum point defining the bounding box.\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.maximum = Cartesian3.clone(defaultValue(maximum, Cartesian3.ZERO));\n\n  // If center was not defined, compute it.\n  if (!defined(center)) {\n    center = Cartesian3.midpoint(this.minimum, this.maximum, new Cartesian3());\n  } else {\n    center = Cartesian3.clone(center);\n  }\n\n  /**\n   * The center point of the bounding box.\n   * @type {Cartesian3}\n   */\n  this.center = center;\n}\n\n/**\n * Creates an instance of an AxisAlignedBoundingBox from its corners.\n *\n * @param {Cartesian3} minimum The minimum point along the x, y, and z axes.\n * @param {Cartesian3} maximum The maximum point along the x, y, and z axes.\n * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\n * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if one was not provided.\n *\n * @example\n * // Compute an axis aligned bounding box from the two corners.\n * const box = Cesium.AxisAlignedBoundingBox.fromCorners(new Cesium.Cartesian3(-1, -1, -1), new Cesium.Cartesian3(1, 1, 1));\n */\nAxisAlignedBoundingBox.fromCorners = function (minimum, maximum, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"minimum\", minimum);\n  Check.defined(\"maximum\", maximum);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new AxisAlignedBoundingBox();\n  }\n\n  result.minimum = Cartesian3.clone(minimum, result.minimum);\n  result.maximum = Cartesian3.clone(maximum, result.maximum);\n  result.center = Cartesian3.midpoint(minimum, maximum, result.center);\n\n  return result;\n};\n\n/**\n * Computes an instance of an AxisAlignedBoundingBox. The box is determined by\n * finding the points spaced the farthest apart on the x, y, and z axes.\n *\n * @param {Cartesian3[]} positions List of points that the bounding box will enclose.  Each point must have a <code>x</code>, <code>y</code>, and <code>z</code> properties.\n * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\n * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if one was not provided.\n *\n * @example\n * // Compute an axis aligned bounding box enclosing two points.\n * const box = Cesium.AxisAlignedBoundingBox.fromPoints([new Cesium.Cartesian3(2, 0, 0), new Cesium.Cartesian3(-2, 0, 0)]);\n */\nAxisAlignedBoundingBox.fromPoints = function (positions, result) {\n  if (!defined(result)) {\n    result = new AxisAlignedBoundingBox();\n  }\n\n  if (!defined(positions) || positions.length === 0) {\n    result.minimum = Cartesian3.clone(Cartesian3.ZERO, result.minimum);\n    result.maximum = Cartesian3.clone(Cartesian3.ZERO, result.maximum);\n    result.center = Cartesian3.clone(Cartesian3.ZERO, result.center);\n    return result;\n  }\n\n  let minimumX = positions[0].x;\n  let minimumY = positions[0].y;\n  let minimumZ = positions[0].z;\n\n  let maximumX = positions[0].x;\n  let maximumY = positions[0].y;\n  let maximumZ = positions[0].z;\n\n  const length = positions.length;\n  for (let i = 1; i < length; i++) {\n    const p = positions[i];\n    const x = p.x;\n    const y = p.y;\n    const z = p.z;\n\n    minimumX = Math.min(x, minimumX);\n    maximumX = Math.max(x, maximumX);\n    minimumY = Math.min(y, minimumY);\n    maximumY = Math.max(y, maximumY);\n    minimumZ = Math.min(z, minimumZ);\n    maximumZ = Math.max(z, maximumZ);\n  }\n\n  const minimum = result.minimum;\n  minimum.x = minimumX;\n  minimum.y = minimumY;\n  minimum.z = minimumZ;\n\n  const maximum = result.maximum;\n  maximum.x = maximumX;\n  maximum.y = maximumY;\n  maximum.z = maximumZ;\n\n  result.center = Cartesian3.midpoint(minimum, maximum, result.center);\n\n  return result;\n};\n\n/**\n * Duplicates a AxisAlignedBoundingBox instance.\n *\n * @param {AxisAlignedBoundingBox} box The bounding box to duplicate.\n * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\n * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if none was provided. (Returns undefined if box is undefined)\n */\nAxisAlignedBoundingBox.clone = function (box, result) {\n  if (!defined(box)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    return new AxisAlignedBoundingBox(box.minimum, box.maximum, box.center);\n  }\n\n  result.minimum = Cartesian3.clone(box.minimum, result.minimum);\n  result.maximum = Cartesian3.clone(box.maximum, result.maximum);\n  result.center = Cartesian3.clone(box.center, result.center);\n  return result;\n};\n\n/**\n * Compares the provided AxisAlignedBoundingBox componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {AxisAlignedBoundingBox} [left] The first AxisAlignedBoundingBox.\n * @param {AxisAlignedBoundingBox} [right] The second AxisAlignedBoundingBox.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nAxisAlignedBoundingBox.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      Cartesian3.equals(left.center, right.center) &&\n      Cartesian3.equals(left.minimum, right.minimum) &&\n      Cartesian3.equals(left.maximum, right.maximum))\n  );\n};\n\nlet intersectScratch = new Cartesian3();\n/**\n * Determines which side of a plane a box is located.\n *\n * @param {AxisAlignedBoundingBox} box The bounding box to test.\n * @param {Plane} plane The plane to test against.\n * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane\n *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is\n *                      on the opposite side, and {@link Intersect.INTERSECTING} if the box\n *                      intersects the plane.\n */\nAxisAlignedBoundingBox.intersectPlane = function (box, plane) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"box\", box);\n  Check.defined(\"plane\", plane);\n  //>>includeEnd('debug');\n\n  intersectScratch = Cartesian3.subtract(\n    box.maximum,\n    box.minimum,\n    intersectScratch\n  );\n  const h = Cartesian3.multiplyByScalar(\n    intersectScratch,\n    0.5,\n    intersectScratch\n  ); //The positive half diagonal\n  const normal = plane.normal;\n  const e =\n    h.x * Math.abs(normal.x) +\n    h.y * Math.abs(normal.y) +\n    h.z * Math.abs(normal.z);\n  const s = Cartesian3.dot(box.center, normal) + plane.distance; //signed distance from center\n\n  if (s - e > 0) {\n    return Intersect.INSIDE;\n  }\n\n  if (s + e < 0) {\n    //Not in front because normals point inward\n    return Intersect.OUTSIDE;\n  }\n\n  return Intersect.INTERSECTING;\n};\n\n/**\n * Duplicates this AxisAlignedBoundingBox instance.\n *\n * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\n * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if one was not provided.\n */\nAxisAlignedBoundingBox.prototype.clone = function (result) {\n  return AxisAlignedBoundingBox.clone(this, result);\n};\n\n/**\n * Determines which side of a plane this box is located.\n *\n * @param {Plane} plane The plane to test against.\n * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane\n *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is\n *                      on the opposite side, and {@link Intersect.INTERSECTING} if the box\n *                      intersects the plane.\n */\nAxisAlignedBoundingBox.prototype.intersectPlane = function (plane) {\n  return AxisAlignedBoundingBox.intersectPlane(this, plane);\n};\n\n/**\n * Compares this AxisAlignedBoundingBox against the provided AxisAlignedBoundingBox componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {AxisAlignedBoundingBox} [right] The right hand side AxisAlignedBoundingBox.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nAxisAlignedBoundingBox.prototype.equals = function (right) {\n  return AxisAlignedBoundingBox.equals(this, right);\n};\nexport default AxisAlignedBoundingBox;\n","import Cartesian2 from \"./Cartesian2.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport GeographicProjection from \"./GeographicProjection.js\";\nimport Intersect from \"./Intersect.js\";\nimport Rectangle from \"./Rectangle.js\";\n\n/**\n * A bounding rectangle given by a corner, width and height.\n * @alias BoundingRectangle\n * @constructor\n *\n * @param {Number} [x=0.0] The x coordinate of the rectangle.\n * @param {Number} [y=0.0] The y coordinate of the rectangle.\n * @param {Number} [width=0.0] The width of the rectangle.\n * @param {Number} [height=0.0] The height of the rectangle.\n *\n * @see BoundingSphere\n * @see Packable\n */\nfunction BoundingRectangle(x, y, width, height) {\n  /**\n   * The x coordinate of the rectangle.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.x = defaultValue(x, 0.0);\n\n  /**\n   * The y coordinate of the rectangle.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.y = defaultValue(y, 0.0);\n\n  /**\n   * The width of the rectangle.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.width = defaultValue(width, 0.0);\n\n  /**\n   * The height of the rectangle.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.height = defaultValue(height, 0.0);\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nBoundingRectangle.packedLength = 4;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {BoundingRectangle} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nBoundingRectangle.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  array[startingIndex++] = value.x;\n  array[startingIndex++] = value.y;\n  array[startingIndex++] = value.width;\n  array[startingIndex] = value.height;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {BoundingRectangle} [result] The object into which to store the result.\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\n */\nBoundingRectangle.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new BoundingRectangle();\n  }\n  result.x = array[startingIndex++];\n  result.y = array[startingIndex++];\n  result.width = array[startingIndex++];\n  result.height = array[startingIndex];\n  return result;\n};\n\n/**\n * Computes a bounding rectangle enclosing the list of 2D points.\n * The rectangle is oriented with the corner at the bottom left.\n *\n * @param {Cartesian2[]} positions List of points that the bounding rectangle will enclose.  Each point must have <code>x</code> and <code>y</code> properties.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\n */\nBoundingRectangle.fromPoints = function (positions, result) {\n  if (!defined(result)) {\n    result = new BoundingRectangle();\n  }\n\n  if (!defined(positions) || positions.length === 0) {\n    result.x = 0;\n    result.y = 0;\n    result.width = 0;\n    result.height = 0;\n    return result;\n  }\n\n  const length = positions.length;\n\n  let minimumX = positions[0].x;\n  let minimumY = positions[0].y;\n\n  let maximumX = positions[0].x;\n  let maximumY = positions[0].y;\n\n  for (let i = 1; i < length; i++) {\n    const p = positions[i];\n    const x = p.x;\n    const y = p.y;\n\n    minimumX = Math.min(x, minimumX);\n    maximumX = Math.max(x, maximumX);\n    minimumY = Math.min(y, minimumY);\n    maximumY = Math.max(y, maximumY);\n  }\n\n  result.x = minimumX;\n  result.y = minimumY;\n  result.width = maximumX - minimumX;\n  result.height = maximumY - minimumY;\n  return result;\n};\n\nconst defaultProjection = new GeographicProjection();\nconst fromRectangleLowerLeft = new Cartographic();\nconst fromRectangleUpperRight = new Cartographic();\n/**\n * Computes a bounding rectangle from a rectangle.\n *\n * @param {Rectangle} rectangle The valid rectangle used to create a bounding rectangle.\n * @param {Object} [projection=GeographicProjection] The projection used to project the rectangle into 2D.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\n */\nBoundingRectangle.fromRectangle = function (rectangle, projection, result) {\n  if (!defined(result)) {\n    result = new BoundingRectangle();\n  }\n\n  if (!defined(rectangle)) {\n    result.x = 0;\n    result.y = 0;\n    result.width = 0;\n    result.height = 0;\n    return result;\n  }\n\n  projection = defaultValue(projection, defaultProjection);\n\n  const lowerLeft = projection.project(\n    Rectangle.southwest(rectangle, fromRectangleLowerLeft)\n  );\n  const upperRight = projection.project(\n    Rectangle.northeast(rectangle, fromRectangleUpperRight)\n  );\n\n  Cartesian2.subtract(upperRight, lowerLeft, upperRight);\n\n  result.x = lowerLeft.x;\n  result.y = lowerLeft.y;\n  result.width = upperRight.x;\n  result.height = upperRight.y;\n  return result;\n};\n\n/**\n * Duplicates a BoundingRectangle instance.\n *\n * @param {BoundingRectangle} rectangle The bounding rectangle to duplicate.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided. (Returns undefined if rectangle is undefined)\n */\nBoundingRectangle.clone = function (rectangle, result) {\n  if (!defined(rectangle)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    return new BoundingRectangle(\n      rectangle.x,\n      rectangle.y,\n      rectangle.width,\n      rectangle.height\n    );\n  }\n\n  result.x = rectangle.x;\n  result.y = rectangle.y;\n  result.width = rectangle.width;\n  result.height = rectangle.height;\n  return result;\n};\n\n/**\n * Computes a bounding rectangle that is the union of the left and right bounding rectangles.\n *\n * @param {BoundingRectangle} left A rectangle to enclose in bounding rectangle.\n * @param {BoundingRectangle} right A rectangle to enclose in a bounding rectangle.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\n */\nBoundingRectangle.union = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new BoundingRectangle();\n  }\n\n  const lowerLeftX = Math.min(left.x, right.x);\n  const lowerLeftY = Math.min(left.y, right.y);\n  const upperRightX = Math.max(left.x + left.width, right.x + right.width);\n  const upperRightY = Math.max(left.y + left.height, right.y + right.height);\n\n  result.x = lowerLeftX;\n  result.y = lowerLeftY;\n  result.width = upperRightX - lowerLeftX;\n  result.height = upperRightY - lowerLeftY;\n  return result;\n};\n\n/**\n * Computes a bounding rectangle by enlarging the provided rectangle until it contains the provided point.\n *\n * @param {BoundingRectangle} rectangle A rectangle to expand.\n * @param {Cartesian2} point A point to enclose in a bounding rectangle.\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\n */\nBoundingRectangle.expand = function (rectangle, point, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"rectangle\", rectangle);\n  Check.typeOf.object(\"point\", point);\n  //>>includeEnd('debug');\n\n  result = BoundingRectangle.clone(rectangle, result);\n\n  const width = point.x - result.x;\n  const height = point.y - result.y;\n\n  if (width > result.width) {\n    result.width = width;\n  } else if (width < 0) {\n    result.width -= width;\n    result.x = point.x;\n  }\n\n  if (height > result.height) {\n    result.height = height;\n  } else if (height < 0) {\n    result.height -= height;\n    result.y = point.y;\n  }\n\n  return result;\n};\n\n/**\n * Determines if two rectangles intersect.\n *\n * @param {BoundingRectangle} left A rectangle to check for intersection.\n * @param {BoundingRectangle} right The other rectangle to check for intersection.\n * @returns {Intersect} <code>Intersect.INTERSECTING</code> if the rectangles intersect, <code>Intersect.OUTSIDE</code> otherwise.\n */\nBoundingRectangle.intersect = function (left, right) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  //>>includeEnd('debug');\n\n  const leftX = left.x;\n  const leftY = left.y;\n  const rightX = right.x;\n  const rightY = right.y;\n  if (\n    !(\n      leftX > rightX + right.width ||\n      leftX + left.width < rightX ||\n      leftY + left.height < rightY ||\n      leftY > rightY + right.height\n    )\n  ) {\n    return Intersect.INTERSECTING;\n  }\n\n  return Intersect.OUTSIDE;\n};\n\n/**\n * Compares the provided BoundingRectangles componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {BoundingRectangle} [left] The first BoundingRectangle.\n * @param {BoundingRectangle} [right] The second BoundingRectangle.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nBoundingRectangle.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      left.x === right.x &&\n      left.y === right.y &&\n      left.width === right.width &&\n      left.height === right.height)\n  );\n};\n\n/**\n * Duplicates this BoundingRectangle instance.\n *\n * @param {BoundingRectangle} [result] The object onto which to store the result.\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\n */\nBoundingRectangle.prototype.clone = function (result) {\n  return BoundingRectangle.clone(this, result);\n};\n\n/**\n * Determines if this rectangle intersects with another.\n *\n * @param {BoundingRectangle} right A rectangle to check for intersection.\n * @returns {Intersect} <code>Intersect.INTERSECTING</code> if the rectangles intersect, <code>Intersect.OUTSIDE</code> otherwise.\n */\nBoundingRectangle.prototype.intersect = function (right) {\n  return BoundingRectangle.intersect(this, right);\n};\n\n/**\n * Compares this BoundingRectangle against the provided BoundingRectangle componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {BoundingRectangle} [right] The right hand side BoundingRectangle.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nBoundingRectangle.prototype.equals = function (right) {\n  return BoundingRectangle.equals(this, right);\n};\nexport default BoundingRectangle;\n","import Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport GeographicProjection from \"./GeographicProjection.js\";\nimport Intersect from \"./Intersect.js\";\nimport Interval from \"./Interval.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport Matrix4 from \"./Matrix4.js\";\nimport Rectangle from \"./Rectangle.js\";\n\n/**\n * A bounding sphere with a center and a radius.\n * @alias BoundingSphere\n * @constructor\n *\n * @param {Cartesian3} [center=Cartesian3.ZERO] The center of the bounding sphere.\n * @param {Number} [radius=0.0] The radius of the bounding sphere.\n *\n * @see AxisAlignedBoundingBox\n * @see BoundingRectangle\n * @see Packable\n */\nfunction BoundingSphere(center, radius) {\n  /**\n   * The center point of the sphere.\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.center = Cartesian3.clone(defaultValue(center, Cartesian3.ZERO));\n\n  /**\n   * The radius of the sphere.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.radius = defaultValue(radius, 0.0);\n}\n\nconst fromPointsXMin = new Cartesian3();\nconst fromPointsYMin = new Cartesian3();\nconst fromPointsZMin = new Cartesian3();\nconst fromPointsXMax = new Cartesian3();\nconst fromPointsYMax = new Cartesian3();\nconst fromPointsZMax = new Cartesian3();\nconst fromPointsCurrentPos = new Cartesian3();\nconst fromPointsScratch = new Cartesian3();\nconst fromPointsRitterCenter = new Cartesian3();\nconst fromPointsMinBoxPt = new Cartesian3();\nconst fromPointsMaxBoxPt = new Cartesian3();\nconst fromPointsNaiveCenterScratch = new Cartesian3();\nconst volumeConstant = (4.0 / 3.0) * CesiumMath.PI;\n\n/**\n * Computes a tight-fitting bounding sphere enclosing a list of 3D Cartesian points.\n * The bounding sphere is computed by running two algorithms, a naive algorithm and\n * Ritter's algorithm. The smaller of the two spheres is used to ensure a tight fit.\n *\n * @param {Cartesian3[]} [positions] An array of points that the bounding sphere will enclose.  Each point must have <code>x</code>, <code>y</code>, and <code>z</code> properties.\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if one was not provided.\n *\n * @see {@link http://help.agi.com/AGIComponents/html/BlogBoundingSphere.htm|Bounding Sphere computation article}\n */\nBoundingSphere.fromPoints = function (positions, result) {\n  if (!defined(result)) {\n    result = new BoundingSphere();\n  }\n\n  if (!defined(positions) || positions.length === 0) {\n    result.center = Cartesian3.clone(Cartesian3.ZERO, result.center);\n    result.radius = 0.0;\n    return result;\n  }\n\n  const currentPos = Cartesian3.clone(positions[0], fromPointsCurrentPos);\n\n  const xMin = Cartesian3.clone(currentPos, fromPointsXMin);\n  const yMin = Cartesian3.clone(currentPos, fromPointsYMin);\n  const zMin = Cartesian3.clone(currentPos, fromPointsZMin);\n\n  const xMax = Cartesian3.clone(currentPos, fromPointsXMax);\n  const yMax = Cartesian3.clone(currentPos, fromPointsYMax);\n  const zMax = Cartesian3.clone(currentPos, fromPointsZMax);\n\n  const numPositions = positions.length;\n  let i;\n  for (i = 1; i < numPositions; i++) {\n    Cartesian3.clone(positions[i], currentPos);\n\n    const x = currentPos.x;\n    const y = currentPos.y;\n    const z = currentPos.z;\n\n    // Store points containing the the smallest and largest components\n    if (x < xMin.x) {\n      Cartesian3.clone(currentPos, xMin);\n    }\n\n    if (x > xMax.x) {\n      Cartesian3.clone(currentPos, xMax);\n    }\n\n    if (y < yMin.y) {\n      Cartesian3.clone(currentPos, yMin);\n    }\n\n    if (y > yMax.y) {\n      Cartesian3.clone(currentPos, yMax);\n    }\n\n    if (z < zMin.z) {\n      Cartesian3.clone(currentPos, zMin);\n    }\n\n    if (z > zMax.z) {\n      Cartesian3.clone(currentPos, zMax);\n    }\n  }\n\n  // Compute x-, y-, and z-spans (Squared distances b/n each component's min. and max.).\n  const xSpan = Cartesian3.magnitudeSquared(\n    Cartesian3.subtract(xMax, xMin, fromPointsScratch)\n  );\n  const ySpan = Cartesian3.magnitudeSquared(\n    Cartesian3.subtract(yMax, yMin, fromPointsScratch)\n  );\n  const zSpan = Cartesian3.magnitudeSquared(\n    Cartesian3.subtract(zMax, zMin, fromPointsScratch)\n  );\n\n  // Set the diameter endpoints to the largest span.\n  let diameter1 = xMin;\n  let diameter2 = xMax;\n  let maxSpan = xSpan;\n  if (ySpan > maxSpan) {\n    maxSpan = ySpan;\n    diameter1 = yMin;\n    diameter2 = yMax;\n  }\n  if (zSpan > maxSpan) {\n    maxSpan = zSpan;\n    diameter1 = zMin;\n    diameter2 = zMax;\n  }\n\n  // Calculate the center of the initial sphere found by Ritter's algorithm\n  const ritterCenter = fromPointsRitterCenter;\n  ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;\n  ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;\n  ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;\n\n  // Calculate the radius of the initial sphere found by Ritter's algorithm\n  let radiusSquared = Cartesian3.magnitudeSquared(\n    Cartesian3.subtract(diameter2, ritterCenter, fromPointsScratch)\n  );\n  let ritterRadius = Math.sqrt(radiusSquared);\n\n  // Find the center of the sphere found using the Naive method.\n  const minBoxPt = fromPointsMinBoxPt;\n  minBoxPt.x = xMin.x;\n  minBoxPt.y = yMin.y;\n  minBoxPt.z = zMin.z;\n\n  const maxBoxPt = fromPointsMaxBoxPt;\n  maxBoxPt.x = xMax.x;\n  maxBoxPt.y = yMax.y;\n  maxBoxPt.z = zMax.z;\n\n  const naiveCenter = Cartesian3.midpoint(\n    minBoxPt,\n    maxBoxPt,\n    fromPointsNaiveCenterScratch\n  );\n\n  // Begin 2nd pass to find naive radius and modify the ritter sphere.\n  let naiveRadius = 0;\n  for (i = 0; i < numPositions; i++) {\n    Cartesian3.clone(positions[i], currentPos);\n\n    // Find the furthest point from the naive center to calculate the naive radius.\n    const r = Cartesian3.magnitude(\n      Cartesian3.subtract(currentPos, naiveCenter, fromPointsScratch)\n    );\n    if (r > naiveRadius) {\n      naiveRadius = r;\n    }\n\n    // Make adjustments to the Ritter Sphere to include all points.\n    const oldCenterToPointSquared = Cartesian3.magnitudeSquared(\n      Cartesian3.subtract(currentPos, ritterCenter, fromPointsScratch)\n    );\n    if (oldCenterToPointSquared > radiusSquared) {\n      const oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);\n      // Calculate new radius to include the point that lies outside\n      ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;\n      radiusSquared = ritterRadius * ritterRadius;\n      // Calculate center of new Ritter sphere\n      const oldToNew = oldCenterToPoint - ritterRadius;\n      ritterCenter.x =\n        (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) /\n        oldCenterToPoint;\n      ritterCenter.y =\n        (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) /\n        oldCenterToPoint;\n      ritterCenter.z =\n        (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) /\n        oldCenterToPoint;\n    }\n  }\n\n  if (ritterRadius < naiveRadius) {\n    Cartesian3.clone(ritterCenter, result.center);\n    result.radius = ritterRadius;\n  } else {\n    Cartesian3.clone(naiveCenter, result.center);\n    result.radius = naiveRadius;\n  }\n\n  return result;\n};\n\nconst defaultProjection = new GeographicProjection();\nconst fromRectangle2DLowerLeft = new Cartesian3();\nconst fromRectangle2DUpperRight = new Cartesian3();\nconst fromRectangle2DSouthwest = new Cartographic();\nconst fromRectangle2DNortheast = new Cartographic();\n\n/**\n * Computes a bounding sphere from a rectangle projected in 2D.\n *\n * @param {Rectangle} [rectangle] The rectangle around which to create a bounding sphere.\n * @param {Object} [projection=GeographicProjection] The projection used to project the rectangle into 2D.\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\n */\nBoundingSphere.fromRectangle2D = function (rectangle, projection, result) {\n  return BoundingSphere.fromRectangleWithHeights2D(\n    rectangle,\n    projection,\n    0.0,\n    0.0,\n    result\n  );\n};\n\n/**\n * Computes a bounding sphere from a rectangle projected in 2D.  The bounding sphere accounts for the\n * object's minimum and maximum heights over the rectangle.\n *\n * @param {Rectangle} [rectangle] The rectangle around which to create a bounding sphere.\n * @param {Object} [projection=GeographicProjection] The projection used to project the rectangle into 2D.\n * @param {Number} [minimumHeight=0.0] The minimum height over the rectangle.\n * @param {Number} [maximumHeight=0.0] The maximum height over the rectangle.\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\n */\nBoundingSphere.fromRectangleWithHeights2D = function (\n  rectangle,\n  projection,\n  minimumHeight,\n  maximumHeight,\n  result\n) {\n  if (!defined(result)) {\n    result = new BoundingSphere();\n  }\n\n  if (!defined(rectangle)) {\n    result.center = Cartesian3.clone(Cartesian3.ZERO, result.center);\n    result.radius = 0.0;\n    return result;\n  }\n\n  projection = defaultValue(projection, defaultProjection);\n\n  Rectangle.southwest(rectangle, fromRectangle2DSouthwest);\n  fromRectangle2DSouthwest.height = minimumHeight;\n  Rectangle.northeast(rectangle, fromRectangle2DNortheast);\n  fromRectangle2DNortheast.height = maximumHeight;\n\n  const lowerLeft = projection.project(\n    fromRectangle2DSouthwest,\n    fromRectangle2DLowerLeft\n  );\n  const upperRight = projection.project(\n    fromRectangle2DNortheast,\n    fromRectangle2DUpperRight\n  );\n\n  const width = upperRight.x - lowerLeft.x;\n  const height = upperRight.y - lowerLeft.y;\n  const elevation = upperRight.z - lowerLeft.z;\n\n  result.radius =\n    Math.sqrt(width * width + height * height + elevation * elevation) * 0.5;\n  const center = result.center;\n  center.x = lowerLeft.x + width * 0.5;\n  center.y = lowerLeft.y + height * 0.5;\n  center.z = lowerLeft.z + elevation * 0.5;\n  return result;\n};\n\nconst fromRectangle3DScratch = [];\n\n/**\n * Computes a bounding sphere from a rectangle in 3D. The bounding sphere is created using a subsample of points\n * on the ellipsoid and contained in the rectangle. It may not be accurate for all rectangles on all types of ellipsoids.\n *\n * @param {Rectangle} [rectangle] The valid rectangle used to create a bounding sphere.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid used to determine positions of the rectangle.\n * @param {Number} [surfaceHeight=0.0] The height above the surface of the ellipsoid.\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\n */\nBoundingSphere.fromRectangle3D = function (\n  rectangle,\n  ellipsoid,\n  surfaceHeight,\n  result\n) {\n  ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n  surfaceHeight = defaultValue(surfaceHeight, 0.0);\n\n  if (!defined(result)) {\n    result = new BoundingSphere();\n  }\n\n  if (!defined(rectangle)) {\n    result.center = Cartesian3.clone(Cartesian3.ZERO, result.center);\n    result.radius = 0.0;\n    return result;\n  }\n\n  const positions = Rectangle.subsample(\n    rectangle,\n    ellipsoid,\n    surfaceHeight,\n    fromRectangle3DScratch\n  );\n  return BoundingSphere.fromPoints(positions, result);\n};\n\n/**\n * Computes a tight-fitting bounding sphere enclosing a list of 3D points, where the points are\n * stored in a flat array in X, Y, Z, order.  The bounding sphere is computed by running two\n * algorithms, a naive algorithm and Ritter's algorithm. The smaller of the two spheres is used to\n * ensure a tight fit.\n *\n * @param {Number[]} [positions] An array of points that the bounding sphere will enclose.  Each point\n *        is formed from three elements in the array in the order X, Y, Z.\n * @param {Cartesian3} [center=Cartesian3.ZERO] The position to which the positions are relative, which need not be the\n *        origin of the coordinate system.  This is useful when the positions are to be used for\n *        relative-to-center (RTC) rendering.\n * @param {Number} [stride=3] The number of array elements per vertex.  It must be at least 3, but it may\n *        be higher.  Regardless of the value of this parameter, the X coordinate of the first position\n *        is at array index 0, the Y coordinate is at array index 1, and the Z coordinate is at array index\n *        2.  When stride is 3, the X coordinate of the next position then begins at array index 3.  If\n *        the stride is 5, however, two array elements are skipped and the next position begins at array\n *        index 5.\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if one was not provided.\n *\n * @example\n * // Compute the bounding sphere from 3 positions, each specified relative to a center.\n * // In addition to the X, Y, and Z coordinates, the points array contains two additional\n * // elements per point which are ignored for the purpose of computing the bounding sphere.\n * const center = new Cesium.Cartesian3(1.0, 2.0, 3.0);\n * const points = [1.0, 2.0, 3.0, 0.1, 0.2,\n *               4.0, 5.0, 6.0, 0.1, 0.2,\n *               7.0, 8.0, 9.0, 0.1, 0.2];\n * const sphere = Cesium.BoundingSphere.fromVertices(points, center, 5);\n *\n * @see {@link http://blogs.agi.com/insight3d/index.php/2008/02/04/a-bounding/|Bounding Sphere computation article}\n */\nBoundingSphere.fromVertices = function (positions, center, stride, result) {\n  if (!defined(result)) {\n    result = new BoundingSphere();\n  }\n\n  if (!defined(positions) || positions.length === 0) {\n    result.center = Cartesian3.clone(Cartesian3.ZERO, result.center);\n    result.radius = 0.0;\n    return result;\n  }\n\n  center = defaultValue(center, Cartesian3.ZERO);\n\n  stride = defaultValue(stride, 3);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number.greaterThanOrEquals(\"stride\", stride, 3);\n  //>>includeEnd('debug');\n\n  const currentPos = fromPointsCurrentPos;\n  currentPos.x = positions[0] + center.x;\n  currentPos.y = positions[1] + center.y;\n  currentPos.z = positions[2] + center.z;\n\n  const xMin = Cartesian3.clone(currentPos, fromPointsXMin);\n  const yMin = Cartesian3.clone(currentPos, fromPointsYMin);\n  const zMin = Cartesian3.clone(currentPos, fromPointsZMin);\n\n  const xMax = Cartesian3.clone(currentPos, fromPointsXMax);\n  const yMax = Cartesian3.clone(currentPos, fromPointsYMax);\n  const zMax = Cartesian3.clone(currentPos, fromPointsZMax);\n\n  const numElements = positions.length;\n  let i;\n  for (i = 0; i < numElements; i += stride) {\n    const x = positions[i] + center.x;\n    const y = positions[i + 1] + center.y;\n    const z = positions[i + 2] + center.z;\n\n    currentPos.x = x;\n    currentPos.y = y;\n    currentPos.z = z;\n\n    // Store points containing the the smallest and largest components\n    if (x < xMin.x) {\n      Cartesian3.clone(currentPos, xMin);\n    }\n\n    if (x > xMax.x) {\n      Cartesian3.clone(currentPos, xMax);\n    }\n\n    if (y < yMin.y) {\n      Cartesian3.clone(currentPos, yMin);\n    }\n\n    if (y > yMax.y) {\n      Cartesian3.clone(currentPos, yMax);\n    }\n\n    if (z < zMin.z) {\n      Cartesian3.clone(currentPos, zMin);\n    }\n\n    if (z > zMax.z) {\n      Cartesian3.clone(currentPos, zMax);\n    }\n  }\n\n  // Compute x-, y-, and z-spans (Squared distances b/n each component's min. and max.).\n  const xSpan = Cartesian3.magnitudeSquared(\n    Cartesian3.subtract(xMax, xMin, fromPointsScratch)\n  );\n  const ySpan = Cartesian3.magnitudeSquared(\n    Cartesian3.subtract(yMax, yMin, fromPointsScratch)\n  );\n  const zSpan = Cartesian3.magnitudeSquared(\n    Cartesian3.subtract(zMax, zMin, fromPointsScratch)\n  );\n\n  // Set the diameter endpoints to the largest span.\n  let diameter1 = xMin;\n  let diameter2 = xMax;\n  let maxSpan = xSpan;\n  if (ySpan > maxSpan) {\n    maxSpan = ySpan;\n    diameter1 = yMin;\n    diameter2 = yMax;\n  }\n  if (zSpan > maxSpan) {\n    maxSpan = zSpan;\n    diameter1 = zMin;\n    diameter2 = zMax;\n  }\n\n  // Calculate the center of the initial sphere found by Ritter's algorithm\n  const ritterCenter = fromPointsRitterCenter;\n  ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;\n  ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;\n  ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;\n\n  // Calculate the radius of the initial sphere found by Ritter's algorithm\n  let radiusSquared = Cartesian3.magnitudeSquared(\n    Cartesian3.subtract(diameter2, ritterCenter, fromPointsScratch)\n  );\n  let ritterRadius = Math.sqrt(radiusSquared);\n\n  // Find the center of the sphere found using the Naive method.\n  const minBoxPt = fromPointsMinBoxPt;\n  minBoxPt.x = xMin.x;\n  minBoxPt.y = yMin.y;\n  minBoxPt.z = zMin.z;\n\n  const maxBoxPt = fromPointsMaxBoxPt;\n  maxBoxPt.x = xMax.x;\n  maxBoxPt.y = yMax.y;\n  maxBoxPt.z = zMax.z;\n\n  const naiveCenter = Cartesian3.midpoint(\n    minBoxPt,\n    maxBoxPt,\n    fromPointsNaiveCenterScratch\n  );\n\n  // Begin 2nd pass to find naive radius and modify the ritter sphere.\n  let naiveRadius = 0;\n  for (i = 0; i < numElements; i += stride) {\n    currentPos.x = positions[i] + center.x;\n    currentPos.y = positions[i + 1] + center.y;\n    currentPos.z = positions[i + 2] + center.z;\n\n    // Find the furthest point from the naive center to calculate the naive radius.\n    const r = Cartesian3.magnitude(\n      Cartesian3.subtract(currentPos, naiveCenter, fromPointsScratch)\n    );\n    if (r > naiveRadius) {\n      naiveRadius = r;\n    }\n\n    // Make adjustments to the Ritter Sphere to include all points.\n    const oldCenterToPointSquared = Cartesian3.magnitudeSquared(\n      Cartesian3.subtract(currentPos, ritterCenter, fromPointsScratch)\n    );\n    if (oldCenterToPointSquared > radiusSquared) {\n      const oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);\n      // Calculate new radius to include the point that lies outside\n      ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;\n      radiusSquared = ritterRadius * ritterRadius;\n      // Calculate center of new Ritter sphere\n      const oldToNew = oldCenterToPoint - ritterRadius;\n      ritterCenter.x =\n        (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) /\n        oldCenterToPoint;\n      ritterCenter.y =\n        (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) /\n        oldCenterToPoint;\n      ritterCenter.z =\n        (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) /\n        oldCenterToPoint;\n    }\n  }\n\n  if (ritterRadius < naiveRadius) {\n    Cartesian3.clone(ritterCenter, result.center);\n    result.radius = ritterRadius;\n  } else {\n    Cartesian3.clone(naiveCenter, result.center);\n    result.radius = naiveRadius;\n  }\n\n  return result;\n};\n\n/**\n * Computes a tight-fitting bounding sphere enclosing a list of EncodedCartesian3s, where the points are\n * stored in parallel flat arrays in X, Y, Z, order.  The bounding sphere is computed by running two\n * algorithms, a naive algorithm and Ritter's algorithm. The smaller of the two spheres is used to\n * ensure a tight fit.\n *\n * @param {Number[]} [positionsHigh] An array of high bits of the encoded cartesians that the bounding sphere will enclose.  Each point\n *        is formed from three elements in the array in the order X, Y, Z.\n * @param {Number[]} [positionsLow] An array of low bits of the encoded cartesians that the bounding sphere will enclose.  Each point\n *        is formed from three elements in the array in the order X, Y, Z.\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if one was not provided.\n *\n * @see {@link http://blogs.agi.com/insight3d/index.php/2008/02/04/a-bounding/|Bounding Sphere computation article}\n */\nBoundingSphere.fromEncodedCartesianVertices = function (\n  positionsHigh,\n  positionsLow,\n  result\n) {\n  if (!defined(result)) {\n    result = new BoundingSphere();\n  }\n\n  if (\n    !defined(positionsHigh) ||\n    !defined(positionsLow) ||\n    positionsHigh.length !== positionsLow.length ||\n    positionsHigh.length === 0\n  ) {\n    result.center = Cartesian3.clone(Cartesian3.ZERO, result.center);\n    result.radius = 0.0;\n    return result;\n  }\n\n  const currentPos = fromPointsCurrentPos;\n  currentPos.x = positionsHigh[0] + positionsLow[0];\n  currentPos.y = positionsHigh[1] + positionsLow[1];\n  currentPos.z = positionsHigh[2] + positionsLow[2];\n\n  const xMin = Cartesian3.clone(currentPos, fromPointsXMin);\n  const yMin = Cartesian3.clone(currentPos, fromPointsYMin);\n  const zMin = Cartesian3.clone(currentPos, fromPointsZMin);\n\n  const xMax = Cartesian3.clone(currentPos, fromPointsXMax);\n  const yMax = Cartesian3.clone(currentPos, fromPointsYMax);\n  const zMax = Cartesian3.clone(currentPos, fromPointsZMax);\n\n  const numElements = positionsHigh.length;\n  let i;\n  for (i = 0; i < numElements; i += 3) {\n    const x = positionsHigh[i] + positionsLow[i];\n    const y = positionsHigh[i + 1] + positionsLow[i + 1];\n    const z = positionsHigh[i + 2] + positionsLow[i + 2];\n\n    currentPos.x = x;\n    currentPos.y = y;\n    currentPos.z = z;\n\n    // Store points containing the the smallest and largest components\n    if (x < xMin.x) {\n      Cartesian3.clone(currentPos, xMin);\n    }\n\n    if (x > xMax.x) {\n      Cartesian3.clone(currentPos, xMax);\n    }\n\n    if (y < yMin.y) {\n      Cartesian3.clone(currentPos, yMin);\n    }\n\n    if (y > yMax.y) {\n      Cartesian3.clone(currentPos, yMax);\n    }\n\n    if (z < zMin.z) {\n      Cartesian3.clone(currentPos, zMin);\n    }\n\n    if (z > zMax.z) {\n      Cartesian3.clone(currentPos, zMax);\n    }\n  }\n\n  // Compute x-, y-, and z-spans (Squared distances b/n each component's min. and max.).\n  const xSpan = Cartesian3.magnitudeSquared(\n    Cartesian3.subtract(xMax, xMin, fromPointsScratch)\n  );\n  const ySpan = Cartesian3.magnitudeSquared(\n    Cartesian3.subtract(yMax, yMin, fromPointsScratch)\n  );\n  const zSpan = Cartesian3.magnitudeSquared(\n    Cartesian3.subtract(zMax, zMin, fromPointsScratch)\n  );\n\n  // Set the diameter endpoints to the largest span.\n  let diameter1 = xMin;\n  let diameter2 = xMax;\n  let maxSpan = xSpan;\n  if (ySpan > maxSpan) {\n    maxSpan = ySpan;\n    diameter1 = yMin;\n    diameter2 = yMax;\n  }\n  if (zSpan > maxSpan) {\n    maxSpan = zSpan;\n    diameter1 = zMin;\n    diameter2 = zMax;\n  }\n\n  // Calculate the center of the initial sphere found by Ritter's algorithm\n  const ritterCenter = fromPointsRitterCenter;\n  ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;\n  ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;\n  ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;\n\n  // Calculate the radius of the initial sphere found by Ritter's algorithm\n  let radiusSquared = Cartesian3.magnitudeSquared(\n    Cartesian3.subtract(diameter2, ritterCenter, fromPointsScratch)\n  );\n  let ritterRadius = Math.sqrt(radiusSquared);\n\n  // Find the center of the sphere found using the Naive method.\n  const minBoxPt = fromPointsMinBoxPt;\n  minBoxPt.x = xMin.x;\n  minBoxPt.y = yMin.y;\n  minBoxPt.z = zMin.z;\n\n  const maxBoxPt = fromPointsMaxBoxPt;\n  maxBoxPt.x = xMax.x;\n  maxBoxPt.y = yMax.y;\n  maxBoxPt.z = zMax.z;\n\n  const naiveCenter = Cartesian3.midpoint(\n    minBoxPt,\n    maxBoxPt,\n    fromPointsNaiveCenterScratch\n  );\n\n  // Begin 2nd pass to find naive radius and modify the ritter sphere.\n  let naiveRadius = 0;\n  for (i = 0; i < numElements; i += 3) {\n    currentPos.x = positionsHigh[i] + positionsLow[i];\n    currentPos.y = positionsHigh[i + 1] + positionsLow[i + 1];\n    currentPos.z = positionsHigh[i + 2] + positionsLow[i + 2];\n\n    // Find the furthest point from the naive center to calculate the naive radius.\n    const r = Cartesian3.magnitude(\n      Cartesian3.subtract(currentPos, naiveCenter, fromPointsScratch)\n    );\n    if (r > naiveRadius) {\n      naiveRadius = r;\n    }\n\n    // Make adjustments to the Ritter Sphere to include all points.\n    const oldCenterToPointSquared = Cartesian3.magnitudeSquared(\n      Cartesian3.subtract(currentPos, ritterCenter, fromPointsScratch)\n    );\n    if (oldCenterToPointSquared > radiusSquared) {\n      const oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);\n      // Calculate new radius to include the point that lies outside\n      ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;\n      radiusSquared = ritterRadius * ritterRadius;\n      // Calculate center of new Ritter sphere\n      const oldToNew = oldCenterToPoint - ritterRadius;\n      ritterCenter.x =\n        (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) /\n        oldCenterToPoint;\n      ritterCenter.y =\n        (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) /\n        oldCenterToPoint;\n      ritterCenter.z =\n        (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) /\n        oldCenterToPoint;\n    }\n  }\n\n  if (ritterRadius < naiveRadius) {\n    Cartesian3.clone(ritterCenter, result.center);\n    result.radius = ritterRadius;\n  } else {\n    Cartesian3.clone(naiveCenter, result.center);\n    result.radius = naiveRadius;\n  }\n\n  return result;\n};\n\n/**\n * Computes a bounding sphere from the corner points of an axis-aligned bounding box.  The sphere\n * tightly and fully encompasses the box.\n *\n * @param {Cartesian3} [corner] The minimum height over the rectangle.\n * @param {Cartesian3} [oppositeCorner] The maximum height over the rectangle.\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\n *\n * @example\n * // Create a bounding sphere around the unit cube\n * const sphere = Cesium.BoundingSphere.fromCornerPoints(new Cesium.Cartesian3(-0.5, -0.5, -0.5), new Cesium.Cartesian3(0.5, 0.5, 0.5));\n */\nBoundingSphere.fromCornerPoints = function (corner, oppositeCorner, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"corner\", corner);\n  Check.typeOf.object(\"oppositeCorner\", oppositeCorner);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new BoundingSphere();\n  }\n\n  const center = Cartesian3.midpoint(corner, oppositeCorner, result.center);\n  result.radius = Cartesian3.distance(center, oppositeCorner);\n  return result;\n};\n\n/**\n * Creates a bounding sphere encompassing an ellipsoid.\n *\n * @param {Ellipsoid} ellipsoid The ellipsoid around which to create a bounding sphere.\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\n *\n * @example\n * const boundingSphere = Cesium.BoundingSphere.fromEllipsoid(ellipsoid);\n */\nBoundingSphere.fromEllipsoid = function (ellipsoid, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"ellipsoid\", ellipsoid);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new BoundingSphere();\n  }\n\n  Cartesian3.clone(Cartesian3.ZERO, result.center);\n  result.radius = ellipsoid.maximumRadius;\n  return result;\n};\n\nconst fromBoundingSpheresScratch = new Cartesian3();\n\n/**\n * Computes a tight-fitting bounding sphere enclosing the provided array of bounding spheres.\n *\n * @param {BoundingSphere[]} [boundingSpheres] The array of bounding spheres.\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\n */\nBoundingSphere.fromBoundingSpheres = function (boundingSpheres, result) {\n  if (!defined(result)) {\n    result = new BoundingSphere();\n  }\n\n  if (!defined(boundingSpheres) || boundingSpheres.length === 0) {\n    result.center = Cartesian3.clone(Cartesian3.ZERO, result.center);\n    result.radius = 0.0;\n    return result;\n  }\n\n  const length = boundingSpheres.length;\n  if (length === 1) {\n    return BoundingSphere.clone(boundingSpheres[0], result);\n  }\n\n  if (length === 2) {\n    return BoundingSphere.union(boundingSpheres[0], boundingSpheres[1], result);\n  }\n\n  const positions = [];\n  let i;\n  for (i = 0; i < length; i++) {\n    positions.push(boundingSpheres[i].center);\n  }\n\n  result = BoundingSphere.fromPoints(positions, result);\n\n  const center = result.center;\n  let radius = result.radius;\n  for (i = 0; i < length; i++) {\n    const tmp = boundingSpheres[i];\n    radius = Math.max(\n      radius,\n      Cartesian3.distance(center, tmp.center, fromBoundingSpheresScratch) +\n        tmp.radius\n    );\n  }\n  result.radius = radius;\n\n  return result;\n};\n\nconst fromOrientedBoundingBoxScratchU = new Cartesian3();\nconst fromOrientedBoundingBoxScratchV = new Cartesian3();\nconst fromOrientedBoundingBoxScratchW = new Cartesian3();\n\n/**\n * Computes a tight-fitting bounding sphere enclosing the provided oriented bounding box.\n *\n * @param {OrientedBoundingBox} orientedBoundingBox The oriented bounding box.\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\n */\nBoundingSphere.fromOrientedBoundingBox = function (\n  orientedBoundingBox,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"orientedBoundingBox\", orientedBoundingBox);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new BoundingSphere();\n  }\n\n  const halfAxes = orientedBoundingBox.halfAxes;\n  const u = Matrix3.getColumn(halfAxes, 0, fromOrientedBoundingBoxScratchU);\n  const v = Matrix3.getColumn(halfAxes, 1, fromOrientedBoundingBoxScratchV);\n  const w = Matrix3.getColumn(halfAxes, 2, fromOrientedBoundingBoxScratchW);\n\n  Cartesian3.add(u, v, u);\n  Cartesian3.add(u, w, u);\n\n  result.center = Cartesian3.clone(orientedBoundingBox.center, result.center);\n  result.radius = Cartesian3.magnitude(u);\n\n  return result;\n};\n\nconst scratchFromTransformationCenter = new Cartesian3();\nconst scratchFromTransformationScale = new Cartesian3();\n\n/**\n * Computes a tight-fitting bounding sphere enclosing the provided affine transformation.\n *\n * @param {Matrix4} transformation The affine transformation.\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\n */\nBoundingSphere.fromTransformation = function (transformation, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"transformation\", transformation);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new BoundingSphere();\n  }\n\n  const center = Matrix4.getTranslation(\n    transformation,\n    scratchFromTransformationCenter\n  );\n  const scale = Matrix4.getScale(\n    transformation,\n    scratchFromTransformationScale\n  );\n  const radius = 0.5 * Cartesian3.magnitude(scale);\n  result.center = Cartesian3.clone(center, result.center);\n  result.radius = radius;\n\n  return result;\n};\n\n/**\n * Duplicates a BoundingSphere instance.\n *\n * @param {BoundingSphere} sphere The bounding sphere to duplicate.\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided. (Returns undefined if sphere is undefined)\n */\nBoundingSphere.clone = function (sphere, result) {\n  if (!defined(sphere)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    return new BoundingSphere(sphere.center, sphere.radius);\n  }\n\n  result.center = Cartesian3.clone(sphere.center, result.center);\n  result.radius = sphere.radius;\n  return result;\n};\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nBoundingSphere.packedLength = 4;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {BoundingSphere} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nBoundingSphere.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  const center = value.center;\n  array[startingIndex++] = center.x;\n  array[startingIndex++] = center.y;\n  array[startingIndex++] = center.z;\n  array[startingIndex] = value.radius;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {BoundingSphere} [result] The object into which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if one was not provided.\n */\nBoundingSphere.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new BoundingSphere();\n  }\n\n  const center = result.center;\n  center.x = array[startingIndex++];\n  center.y = array[startingIndex++];\n  center.z = array[startingIndex++];\n  result.radius = array[startingIndex];\n  return result;\n};\n\nconst unionScratch = new Cartesian3();\nconst unionScratchCenter = new Cartesian3();\n/**\n * Computes a bounding sphere that contains both the left and right bounding spheres.\n *\n * @param {BoundingSphere} left A sphere to enclose in a bounding sphere.\n * @param {BoundingSphere} right A sphere to enclose in a bounding sphere.\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\n */\nBoundingSphere.union = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new BoundingSphere();\n  }\n\n  const leftCenter = left.center;\n  const leftRadius = left.radius;\n  const rightCenter = right.center;\n  const rightRadius = right.radius;\n\n  const toRightCenter = Cartesian3.subtract(\n    rightCenter,\n    leftCenter,\n    unionScratch\n  );\n  const centerSeparation = Cartesian3.magnitude(toRightCenter);\n\n  if (leftRadius >= centerSeparation + rightRadius) {\n    // Left sphere wins.\n    left.clone(result);\n    return result;\n  }\n\n  if (rightRadius >= centerSeparation + leftRadius) {\n    // Right sphere wins.\n    right.clone(result);\n    return result;\n  }\n\n  // There are two tangent points, one on far side of each sphere.\n  const halfDistanceBetweenTangentPoints =\n    (leftRadius + centerSeparation + rightRadius) * 0.5;\n\n  // Compute the center point halfway between the two tangent points.\n  const center = Cartesian3.multiplyByScalar(\n    toRightCenter,\n    (-leftRadius + halfDistanceBetweenTangentPoints) / centerSeparation,\n    unionScratchCenter\n  );\n  Cartesian3.add(center, leftCenter, center);\n  Cartesian3.clone(center, result.center);\n  result.radius = halfDistanceBetweenTangentPoints;\n\n  return result;\n};\n\nconst expandScratch = new Cartesian3();\n/**\n * Computes a bounding sphere by enlarging the provided sphere to contain the provided point.\n *\n * @param {BoundingSphere} sphere A sphere to expand.\n * @param {Cartesian3} point A point to enclose in a bounding sphere.\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\n */\nBoundingSphere.expand = function (sphere, point, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"sphere\", sphere);\n  Check.typeOf.object(\"point\", point);\n  //>>includeEnd('debug');\n\n  result = BoundingSphere.clone(sphere, result);\n\n  const radius = Cartesian3.magnitude(\n    Cartesian3.subtract(point, result.center, expandScratch)\n  );\n  if (radius > result.radius) {\n    result.radius = radius;\n  }\n\n  return result;\n};\n\n/**\n * Determines which side of a plane a sphere is located.\n *\n * @param {BoundingSphere} sphere The bounding sphere to test.\n * @param {Plane} plane The plane to test against.\n * @returns {Intersect} {@link Intersect.INSIDE} if the entire sphere is on the side of the plane\n *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire sphere is\n *                      on the opposite side, and {@link Intersect.INTERSECTING} if the sphere\n *                      intersects the plane.\n */\nBoundingSphere.intersectPlane = function (sphere, plane) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"sphere\", sphere);\n  Check.typeOf.object(\"plane\", plane);\n  //>>includeEnd('debug');\n\n  const center = sphere.center;\n  const radius = sphere.radius;\n  const normal = plane.normal;\n  const distanceToPlane = Cartesian3.dot(normal, center) + plane.distance;\n\n  if (distanceToPlane < -radius) {\n    // The center point is negative side of the plane normal\n    return Intersect.OUTSIDE;\n  } else if (distanceToPlane < radius) {\n    // The center point is positive side of the plane, but radius extends beyond it; partial overlap\n    return Intersect.INTERSECTING;\n  }\n  return Intersect.INSIDE;\n};\n\n/**\n * Applies a 4x4 affine transformation matrix to a bounding sphere.\n *\n * @param {BoundingSphere} sphere The bounding sphere to apply the transformation to.\n * @param {Matrix4} transform The transformation matrix to apply to the bounding sphere.\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\n */\nBoundingSphere.transform = function (sphere, transform, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"sphere\", sphere);\n  Check.typeOf.object(\"transform\", transform);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new BoundingSphere();\n  }\n\n  result.center = Matrix4.multiplyByPoint(\n    transform,\n    sphere.center,\n    result.center\n  );\n  result.radius = Matrix4.getMaximumScale(transform) * sphere.radius;\n\n  return result;\n};\n\nconst distanceSquaredToScratch = new Cartesian3();\n\n/**\n * Computes the estimated distance squared from the closest point on a bounding sphere to a point.\n *\n * @param {BoundingSphere} sphere The sphere.\n * @param {Cartesian3} cartesian The point\n * @returns {Number} The distance squared from the bounding sphere to the point. Returns 0 if the point is inside the sphere.\n *\n * @example\n * // Sort bounding spheres from back to front\n * spheres.sort(function(a, b) {\n *     return Cesium.BoundingSphere.distanceSquaredTo(b, camera.positionWC) - Cesium.BoundingSphere.distanceSquaredTo(a, camera.positionWC);\n * });\n */\nBoundingSphere.distanceSquaredTo = function (sphere, cartesian) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"sphere\", sphere);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  const diff = Cartesian3.subtract(\n    sphere.center,\n    cartesian,\n    distanceSquaredToScratch\n  );\n\n  const distance = Cartesian3.magnitude(diff) - sphere.radius;\n  if (distance <= 0.0) {\n    return 0.0;\n  }\n\n  return distance * distance;\n};\n\n/**\n * Applies a 4x4 affine transformation matrix to a bounding sphere where there is no scale\n * The transformation matrix is not verified to have a uniform scale of 1.\n * This method is faster than computing the general bounding sphere transform using {@link BoundingSphere.transform}.\n *\n * @param {BoundingSphere} sphere The bounding sphere to apply the transformation to.\n * @param {Matrix4} transform The transformation matrix to apply to the bounding sphere.\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\n *\n * @example\n * const modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(positionOnEllipsoid);\n * const boundingSphere = new Cesium.BoundingSphere();\n * const newBoundingSphere = Cesium.BoundingSphere.transformWithoutScale(boundingSphere, modelMatrix);\n */\nBoundingSphere.transformWithoutScale = function (sphere, transform, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"sphere\", sphere);\n  Check.typeOf.object(\"transform\", transform);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new BoundingSphere();\n  }\n\n  result.center = Matrix4.multiplyByPoint(\n    transform,\n    sphere.center,\n    result.center\n  );\n  result.radius = sphere.radius;\n\n  return result;\n};\n\nconst scratchCartesian3 = new Cartesian3();\n/**\n * The distances calculated by the vector from the center of the bounding sphere to position projected onto direction\n * plus/minus the radius of the bounding sphere.\n * <br>\n * If you imagine the infinite number of planes with normal direction, this computes the smallest distance to the\n * closest and farthest planes from position that intersect the bounding sphere.\n *\n * @param {BoundingSphere} sphere The bounding sphere to calculate the distance to.\n * @param {Cartesian3} position The position to calculate the distance from.\n * @param {Cartesian3} direction The direction from position.\n * @param {Interval} [result] A Interval to store the nearest and farthest distances.\n * @returns {Interval} The nearest and farthest distances on the bounding sphere from position in direction.\n */\nBoundingSphere.computePlaneDistances = function (\n  sphere,\n  position,\n  direction,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"sphere\", sphere);\n  Check.typeOf.object(\"position\", position);\n  Check.typeOf.object(\"direction\", direction);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Interval();\n  }\n\n  const toCenter = Cartesian3.subtract(\n    sphere.center,\n    position,\n    scratchCartesian3\n  );\n  const mag = Cartesian3.dot(direction, toCenter);\n\n  result.start = mag - sphere.radius;\n  result.stop = mag + sphere.radius;\n  return result;\n};\n\nconst projectTo2DNormalScratch = new Cartesian3();\nconst projectTo2DEastScratch = new Cartesian3();\nconst projectTo2DNorthScratch = new Cartesian3();\nconst projectTo2DWestScratch = new Cartesian3();\nconst projectTo2DSouthScratch = new Cartesian3();\nconst projectTo2DCartographicScratch = new Cartographic();\nconst projectTo2DPositionsScratch = new Array(8);\nfor (let n = 0; n < 8; ++n) {\n  projectTo2DPositionsScratch[n] = new Cartesian3();\n}\n\nconst projectTo2DProjection = new GeographicProjection();\n/**\n * Creates a bounding sphere in 2D from a bounding sphere in 3D world coordinates.\n *\n * @param {BoundingSphere} sphere The bounding sphere to transform to 2D.\n * @param {Object} [projection=GeographicProjection] The projection to 2D.\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\n */\nBoundingSphere.projectTo2D = function (sphere, projection, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"sphere\", sphere);\n  //>>includeEnd('debug');\n\n  projection = defaultValue(projection, projectTo2DProjection);\n\n  const ellipsoid = projection.ellipsoid;\n  let center = sphere.center;\n  const radius = sphere.radius;\n\n  let normal;\n  if (Cartesian3.equals(center, Cartesian3.ZERO)) {\n    // Bounding sphere is at the center. The geodetic surface normal is not\n    // defined here so pick the x-axis as a fallback.\n    normal = Cartesian3.clone(Cartesian3.UNIT_X, projectTo2DNormalScratch);\n  } else {\n    normal = ellipsoid.geodeticSurfaceNormal(center, projectTo2DNormalScratch);\n  }\n  const east = Cartesian3.cross(\n    Cartesian3.UNIT_Z,\n    normal,\n    projectTo2DEastScratch\n  );\n  Cartesian3.normalize(east, east);\n  const north = Cartesian3.cross(normal, east, projectTo2DNorthScratch);\n  Cartesian3.normalize(north, north);\n\n  Cartesian3.multiplyByScalar(normal, radius, normal);\n  Cartesian3.multiplyByScalar(north, radius, north);\n  Cartesian3.multiplyByScalar(east, radius, east);\n\n  const south = Cartesian3.negate(north, projectTo2DSouthScratch);\n  const west = Cartesian3.negate(east, projectTo2DWestScratch);\n\n  const positions = projectTo2DPositionsScratch;\n\n  // top NE corner\n  let corner = positions[0];\n  Cartesian3.add(normal, north, corner);\n  Cartesian3.add(corner, east, corner);\n\n  // top NW corner\n  corner = positions[1];\n  Cartesian3.add(normal, north, corner);\n  Cartesian3.add(corner, west, corner);\n\n  // top SW corner\n  corner = positions[2];\n  Cartesian3.add(normal, south, corner);\n  Cartesian3.add(corner, west, corner);\n\n  // top SE corner\n  corner = positions[3];\n  Cartesian3.add(normal, south, corner);\n  Cartesian3.add(corner, east, corner);\n\n  Cartesian3.negate(normal, normal);\n\n  // bottom NE corner\n  corner = positions[4];\n  Cartesian3.add(normal, north, corner);\n  Cartesian3.add(corner, east, corner);\n\n  // bottom NW corner\n  corner = positions[5];\n  Cartesian3.add(normal, north, corner);\n  Cartesian3.add(corner, west, corner);\n\n  // bottom SW corner\n  corner = positions[6];\n  Cartesian3.add(normal, south, corner);\n  Cartesian3.add(corner, west, corner);\n\n  // bottom SE corner\n  corner = positions[7];\n  Cartesian3.add(normal, south, corner);\n  Cartesian3.add(corner, east, corner);\n\n  const length = positions.length;\n  for (let i = 0; i < length; ++i) {\n    const position = positions[i];\n    Cartesian3.add(center, position, position);\n    const cartographic = ellipsoid.cartesianToCartographic(\n      position,\n      projectTo2DCartographicScratch\n    );\n    projection.project(cartographic, position);\n  }\n\n  result = BoundingSphere.fromPoints(positions, result);\n\n  // swizzle center components\n  center = result.center;\n  const x = center.x;\n  const y = center.y;\n  const z = center.z;\n  center.x = z;\n  center.y = x;\n  center.z = y;\n\n  return result;\n};\n\n/**\n * Determines whether or not a sphere is hidden from view by the occluder.\n *\n * @param {BoundingSphere} sphere The bounding sphere surrounding the occludee object.\n * @param {Occluder} occluder The occluder.\n * @returns {Boolean} <code>true</code> if the sphere is not visible; otherwise <code>false</code>.\n */\nBoundingSphere.isOccluded = function (sphere, occluder) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"sphere\", sphere);\n  Check.typeOf.object(\"occluder\", occluder);\n  //>>includeEnd('debug');\n  return !occluder.isBoundingSphereVisible(sphere);\n};\n\n/**\n * Compares the provided BoundingSphere componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {BoundingSphere} [left] The first BoundingSphere.\n * @param {BoundingSphere} [right] The second BoundingSphere.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nBoundingSphere.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      Cartesian3.equals(left.center, right.center) &&\n      left.radius === right.radius)\n  );\n};\n\n/**\n * Determines which side of a plane the sphere is located.\n *\n * @param {Plane} plane The plane to test against.\n * @returns {Intersect} {@link Intersect.INSIDE} if the entire sphere is on the side of the plane\n *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire sphere is\n *                      on the opposite side, and {@link Intersect.INTERSECTING} if the sphere\n *                      intersects the plane.\n */\nBoundingSphere.prototype.intersectPlane = function (plane) {\n  return BoundingSphere.intersectPlane(this, plane);\n};\n\n/**\n * Computes the estimated distance squared from the closest point on a bounding sphere to a point.\n *\n * @param {Cartesian3} cartesian The point\n * @returns {Number} The estimated distance squared from the bounding sphere to the point.\n *\n * @example\n * // Sort bounding spheres from back to front\n * spheres.sort(function(a, b) {\n *     return b.distanceSquaredTo(camera.positionWC) - a.distanceSquaredTo(camera.positionWC);\n * });\n */\nBoundingSphere.prototype.distanceSquaredTo = function (cartesian) {\n  return BoundingSphere.distanceSquaredTo(this, cartesian);\n};\n\n/**\n * The distances calculated by the vector from the center of the bounding sphere to position projected onto direction\n * plus/minus the radius of the bounding sphere.\n * <br>\n * If you imagine the infinite number of planes with normal direction, this computes the smallest distance to the\n * closest and farthest planes from position that intersect the bounding sphere.\n *\n * @param {Cartesian3} position The position to calculate the distance from.\n * @param {Cartesian3} direction The direction from position.\n * @param {Interval} [result] A Interval to store the nearest and farthest distances.\n * @returns {Interval} The nearest and farthest distances on the bounding sphere from position in direction.\n */\nBoundingSphere.prototype.computePlaneDistances = function (\n  position,\n  direction,\n  result\n) {\n  return BoundingSphere.computePlaneDistances(\n    this,\n    position,\n    direction,\n    result\n  );\n};\n\n/**\n * Determines whether or not a sphere is hidden from view by the occluder.\n *\n * @param {Occluder} occluder The occluder.\n * @returns {Boolean} <code>true</code> if the sphere is not visible; otherwise <code>false</code>.\n */\nBoundingSphere.prototype.isOccluded = function (occluder) {\n  return BoundingSphere.isOccluded(this, occluder);\n};\n\n/**\n * Compares this BoundingSphere against the provided BoundingSphere componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {BoundingSphere} [right] The right hand side BoundingSphere.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nBoundingSphere.prototype.equals = function (right) {\n  return BoundingSphere.equals(this, right);\n};\n\n/**\n * Duplicates this BoundingSphere instance.\n *\n * @param {BoundingSphere} [result] The object onto which to store the result.\n * @returns {BoundingSphere} The modified result parameter or a new BoundingSphere instance if none was provided.\n */\nBoundingSphere.prototype.clone = function (result) {\n  return BoundingSphere.clone(this, result);\n};\n\n/**\n * Computes the radius of the BoundingSphere.\n * @returns {Number} The radius of the BoundingSphere.\n */\nBoundingSphere.prototype.volume = function () {\n  const radius = this.radius;\n  return volumeConstant * radius * radius * radius;\n};\nexport default BoundingSphere;\n","import arrayFill from \"./arrayFill.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\nconst diffScratch = new Cartesian3();\n\n/**\n * Describes a cube centered at the origin.\n *\n * @alias BoxGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.minimum The minimum x, y, and z coordinates of the box.\n * @param {Cartesian3} options.maximum The maximum x, y, and z coordinates of the box.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n *\n * @see BoxGeometry.fromDimensions\n * @see BoxGeometry.createGeometry\n * @see Packable\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Box.html|Cesium Sandcastle Box Demo}\n *\n * @example\n * const box = new Cesium.BoxGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0),\n *   minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0)\n * });\n * const geometry = Cesium.BoxGeometry.createGeometry(box);\n */\nfunction BoxGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const min = options.minimum;\n  const max = options.maximum;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"min\", min);\n  Check.typeOf.object(\"max\", max);\n  if (\n    defined(options.offsetAttribute) &&\n    options.offsetAttribute === GeometryOffsetAttribute.TOP\n  ) {\n    throw new DeveloperError(\n      \"GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n  this._minimum = Cartesian3.clone(min);\n  this._maximum = Cartesian3.clone(max);\n  this._vertexFormat = vertexFormat;\n  this._offsetAttribute = options.offsetAttribute;\n  this._workerName = \"createBoxGeometry\";\n}\n\n/**\n * Creates a cube centered at the origin given its dimensions.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.dimensions The width, depth, and height of the box stored in the x, y, and z coordinates of the <code>Cartesian3</code>, respectively.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @returns {BoxGeometry}\n *\n * @exception {DeveloperError} All dimensions components must be greater than or equal to zero.\n *\n *\n * @example\n * const box = Cesium.BoxGeometry.fromDimensions({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   dimensions : new Cesium.Cartesian3(500000.0, 500000.0, 500000.0)\n * });\n * const geometry = Cesium.BoxGeometry.createGeometry(box);\n *\n * @see BoxGeometry.createGeometry\n */\nBoxGeometry.fromDimensions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const dimensions = options.dimensions;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"dimensions\", dimensions);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.x\", dimensions.x, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.y\", dimensions.y, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.z\", dimensions.z, 0);\n  //>>includeEnd('debug');\n\n  const corner = Cartesian3.multiplyByScalar(dimensions, 0.5, new Cartesian3());\n\n  return new BoxGeometry({\n    minimum: Cartesian3.negate(corner, new Cartesian3()),\n    maximum: corner,\n    vertexFormat: options.vertexFormat,\n    offsetAttribute: options.offsetAttribute,\n  });\n};\n\n/**\n * Creates a cube from the dimensions of an AxisAlignedBoundingBox.\n *\n * @param {AxisAlignedBoundingBox} boundingBox A description of the AxisAlignedBoundingBox.\n * @returns {BoxGeometry}\n *\n *\n *\n * @example\n * const aabb = Cesium.AxisAlignedBoundingBox.fromPoints(Cesium.Cartesian3.fromDegreesArray([\n *      -72.0, 40.0,\n *      -70.0, 35.0,\n *      -75.0, 30.0,\n *      -70.0, 30.0,\n *      -68.0, 40.0\n * ]));\n * const box = Cesium.BoxGeometry.fromAxisAlignedBoundingBox(aabb);\n *\n * @see BoxGeometry.createGeometry\n */\nBoxGeometry.fromAxisAlignedBoundingBox = function (boundingBox) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"boundingBox\", boundingBox);\n  //>>includeEnd('debug');\n\n  return new BoxGeometry({\n    minimum: boundingBox.minimum,\n    maximum: boundingBox.maximum,\n  });\n};\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nBoxGeometry.packedLength =\n  2 * Cartesian3.packedLength + VertexFormat.packedLength + 1;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {BoxGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nBoxGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  Cartesian3.pack(value._minimum, array, startingIndex);\n  Cartesian3.pack(\n    value._maximum,\n    array,\n    startingIndex + Cartesian3.packedLength\n  );\n  VertexFormat.pack(\n    value._vertexFormat,\n    array,\n    startingIndex + 2 * Cartesian3.packedLength\n  );\n  array[\n    startingIndex + 2 * Cartesian3.packedLength + VertexFormat.packedLength\n  ] = defaultValue(value._offsetAttribute, -1);\n\n  return array;\n};\n\nconst scratchMin = new Cartesian3();\nconst scratchMax = new Cartesian3();\nconst scratchVertexFormat = new VertexFormat();\nconst scratchOptions = {\n  minimum: scratchMin,\n  maximum: scratchMax,\n  vertexFormat: scratchVertexFormat,\n  offsetAttribute: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {BoxGeometry} [result] The object into which to store the result.\n * @returns {BoxGeometry} The modified result parameter or a new BoxGeometry instance if one was not provided.\n */\nBoxGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  const min = Cartesian3.unpack(array, startingIndex, scratchMin);\n  const max = Cartesian3.unpack(\n    array,\n    startingIndex + Cartesian3.packedLength,\n    scratchMax\n  );\n  const vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex + 2 * Cartesian3.packedLength,\n    scratchVertexFormat\n  );\n  const offsetAttribute =\n    array[\n      startingIndex + 2 * Cartesian3.packedLength + VertexFormat.packedLength\n    ];\n\n  if (!defined(result)) {\n    scratchOptions.offsetAttribute =\n      offsetAttribute === -1 ? undefined : offsetAttribute;\n    return new BoxGeometry(scratchOptions);\n  }\n\n  result._minimum = Cartesian3.clone(min, result._minimum);\n  result._maximum = Cartesian3.clone(max, result._maximum);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n\n  return result;\n};\n\n/**\n * Computes the geometric representation of a box, including its vertices, indices, and a bounding sphere.\n *\n * @param {BoxGeometry} boxGeometry A description of the box.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nBoxGeometry.createGeometry = function (boxGeometry) {\n  const min = boxGeometry._minimum;\n  const max = boxGeometry._maximum;\n  const vertexFormat = boxGeometry._vertexFormat;\n\n  if (Cartesian3.equals(min, max)) {\n    return;\n  }\n\n  const attributes = new GeometryAttributes();\n  let indices;\n  let positions;\n\n  if (\n    vertexFormat.position &&\n    (vertexFormat.st ||\n      vertexFormat.normal ||\n      vertexFormat.tangent ||\n      vertexFormat.bitangent)\n  ) {\n    if (vertexFormat.position) {\n      // 8 corner points.  Duplicated 3 times each for each incident edge/face.\n      positions = new Float64Array(6 * 4 * 3);\n\n      // +z face\n      positions[0] = min.x;\n      positions[1] = min.y;\n      positions[2] = max.z;\n      positions[3] = max.x;\n      positions[4] = min.y;\n      positions[5] = max.z;\n      positions[6] = max.x;\n      positions[7] = max.y;\n      positions[8] = max.z;\n      positions[9] = min.x;\n      positions[10] = max.y;\n      positions[11] = max.z;\n\n      // -z face\n      positions[12] = min.x;\n      positions[13] = min.y;\n      positions[14] = min.z;\n      positions[15] = max.x;\n      positions[16] = min.y;\n      positions[17] = min.z;\n      positions[18] = max.x;\n      positions[19] = max.y;\n      positions[20] = min.z;\n      positions[21] = min.x;\n      positions[22] = max.y;\n      positions[23] = min.z;\n\n      // +x face\n      positions[24] = max.x;\n      positions[25] = min.y;\n      positions[26] = min.z;\n      positions[27] = max.x;\n      positions[28] = max.y;\n      positions[29] = min.z;\n      positions[30] = max.x;\n      positions[31] = max.y;\n      positions[32] = max.z;\n      positions[33] = max.x;\n      positions[34] = min.y;\n      positions[35] = max.z;\n\n      // -x face\n      positions[36] = min.x;\n      positions[37] = min.y;\n      positions[38] = min.z;\n      positions[39] = min.x;\n      positions[40] = max.y;\n      positions[41] = min.z;\n      positions[42] = min.x;\n      positions[43] = max.y;\n      positions[44] = max.z;\n      positions[45] = min.x;\n      positions[46] = min.y;\n      positions[47] = max.z;\n\n      // +y face\n      positions[48] = min.x;\n      positions[49] = max.y;\n      positions[50] = min.z;\n      positions[51] = max.x;\n      positions[52] = max.y;\n      positions[53] = min.z;\n      positions[54] = max.x;\n      positions[55] = max.y;\n      positions[56] = max.z;\n      positions[57] = min.x;\n      positions[58] = max.y;\n      positions[59] = max.z;\n\n      // -y face\n      positions[60] = min.x;\n      positions[61] = min.y;\n      positions[62] = min.z;\n      positions[63] = max.x;\n      positions[64] = min.y;\n      positions[65] = min.z;\n      positions[66] = max.x;\n      positions[67] = min.y;\n      positions[68] = max.z;\n      positions[69] = min.x;\n      positions[70] = min.y;\n      positions[71] = max.z;\n\n      attributes.position = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.DOUBLE,\n        componentsPerAttribute: 3,\n        values: positions,\n      });\n    }\n\n    if (vertexFormat.normal) {\n      const normals = new Float32Array(6 * 4 * 3);\n\n      // +z face\n      normals[0] = 0.0;\n      normals[1] = 0.0;\n      normals[2] = 1.0;\n      normals[3] = 0.0;\n      normals[4] = 0.0;\n      normals[5] = 1.0;\n      normals[6] = 0.0;\n      normals[7] = 0.0;\n      normals[8] = 1.0;\n      normals[9] = 0.0;\n      normals[10] = 0.0;\n      normals[11] = 1.0;\n\n      // -z face\n      normals[12] = 0.0;\n      normals[13] = 0.0;\n      normals[14] = -1.0;\n      normals[15] = 0.0;\n      normals[16] = 0.0;\n      normals[17] = -1.0;\n      normals[18] = 0.0;\n      normals[19] = 0.0;\n      normals[20] = -1.0;\n      normals[21] = 0.0;\n      normals[22] = 0.0;\n      normals[23] = -1.0;\n\n      // +x face\n      normals[24] = 1.0;\n      normals[25] = 0.0;\n      normals[26] = 0.0;\n      normals[27] = 1.0;\n      normals[28] = 0.0;\n      normals[29] = 0.0;\n      normals[30] = 1.0;\n      normals[31] = 0.0;\n      normals[32] = 0.0;\n      normals[33] = 1.0;\n      normals[34] = 0.0;\n      normals[35] = 0.0;\n\n      // -x face\n      normals[36] = -1.0;\n      normals[37] = 0.0;\n      normals[38] = 0.0;\n      normals[39] = -1.0;\n      normals[40] = 0.0;\n      normals[41] = 0.0;\n      normals[42] = -1.0;\n      normals[43] = 0.0;\n      normals[44] = 0.0;\n      normals[45] = -1.0;\n      normals[46] = 0.0;\n      normals[47] = 0.0;\n\n      // +y face\n      normals[48] = 0.0;\n      normals[49] = 1.0;\n      normals[50] = 0.0;\n      normals[51] = 0.0;\n      normals[52] = 1.0;\n      normals[53] = 0.0;\n      normals[54] = 0.0;\n      normals[55] = 1.0;\n      normals[56] = 0.0;\n      normals[57] = 0.0;\n      normals[58] = 1.0;\n      normals[59] = 0.0;\n\n      // -y face\n      normals[60] = 0.0;\n      normals[61] = -1.0;\n      normals[62] = 0.0;\n      normals[63] = 0.0;\n      normals[64] = -1.0;\n      normals[65] = 0.0;\n      normals[66] = 0.0;\n      normals[67] = -1.0;\n      normals[68] = 0.0;\n      normals[69] = 0.0;\n      normals[70] = -1.0;\n      normals[71] = 0.0;\n\n      attributes.normal = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: normals,\n      });\n    }\n\n    if (vertexFormat.st) {\n      const texCoords = new Float32Array(6 * 4 * 2);\n\n      // +z face\n      texCoords[0] = 0.0;\n      texCoords[1] = 0.0;\n      texCoords[2] = 1.0;\n      texCoords[3] = 0.0;\n      texCoords[4] = 1.0;\n      texCoords[5] = 1.0;\n      texCoords[6] = 0.0;\n      texCoords[7] = 1.0;\n\n      // -z face\n      texCoords[8] = 1.0;\n      texCoords[9] = 0.0;\n      texCoords[10] = 0.0;\n      texCoords[11] = 0.0;\n      texCoords[12] = 0.0;\n      texCoords[13] = 1.0;\n      texCoords[14] = 1.0;\n      texCoords[15] = 1.0;\n\n      //+x face\n      texCoords[16] = 0.0;\n      texCoords[17] = 0.0;\n      texCoords[18] = 1.0;\n      texCoords[19] = 0.0;\n      texCoords[20] = 1.0;\n      texCoords[21] = 1.0;\n      texCoords[22] = 0.0;\n      texCoords[23] = 1.0;\n\n      // -x face\n      texCoords[24] = 1.0;\n      texCoords[25] = 0.0;\n      texCoords[26] = 0.0;\n      texCoords[27] = 0.0;\n      texCoords[28] = 0.0;\n      texCoords[29] = 1.0;\n      texCoords[30] = 1.0;\n      texCoords[31] = 1.0;\n\n      // +y face\n      texCoords[32] = 1.0;\n      texCoords[33] = 0.0;\n      texCoords[34] = 0.0;\n      texCoords[35] = 0.0;\n      texCoords[36] = 0.0;\n      texCoords[37] = 1.0;\n      texCoords[38] = 1.0;\n      texCoords[39] = 1.0;\n\n      // -y face\n      texCoords[40] = 0.0;\n      texCoords[41] = 0.0;\n      texCoords[42] = 1.0;\n      texCoords[43] = 0.0;\n      texCoords[44] = 1.0;\n      texCoords[45] = 1.0;\n      texCoords[46] = 0.0;\n      texCoords[47] = 1.0;\n\n      attributes.st = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 2,\n        values: texCoords,\n      });\n    }\n\n    if (vertexFormat.tangent) {\n      const tangents = new Float32Array(6 * 4 * 3);\n\n      // +z face\n      tangents[0] = 1.0;\n      tangents[1] = 0.0;\n      tangents[2] = 0.0;\n      tangents[3] = 1.0;\n      tangents[4] = 0.0;\n      tangents[5] = 0.0;\n      tangents[6] = 1.0;\n      tangents[7] = 0.0;\n      tangents[8] = 0.0;\n      tangents[9] = 1.0;\n      tangents[10] = 0.0;\n      tangents[11] = 0.0;\n\n      // -z face\n      tangents[12] = -1.0;\n      tangents[13] = 0.0;\n      tangents[14] = 0.0;\n      tangents[15] = -1.0;\n      tangents[16] = 0.0;\n      tangents[17] = 0.0;\n      tangents[18] = -1.0;\n      tangents[19] = 0.0;\n      tangents[20] = 0.0;\n      tangents[21] = -1.0;\n      tangents[22] = 0.0;\n      tangents[23] = 0.0;\n\n      // +x face\n      tangents[24] = 0.0;\n      tangents[25] = 1.0;\n      tangents[26] = 0.0;\n      tangents[27] = 0.0;\n      tangents[28] = 1.0;\n      tangents[29] = 0.0;\n      tangents[30] = 0.0;\n      tangents[31] = 1.0;\n      tangents[32] = 0.0;\n      tangents[33] = 0.0;\n      tangents[34] = 1.0;\n      tangents[35] = 0.0;\n\n      // -x face\n      tangents[36] = 0.0;\n      tangents[37] = -1.0;\n      tangents[38] = 0.0;\n      tangents[39] = 0.0;\n      tangents[40] = -1.0;\n      tangents[41] = 0.0;\n      tangents[42] = 0.0;\n      tangents[43] = -1.0;\n      tangents[44] = 0.0;\n      tangents[45] = 0.0;\n      tangents[46] = -1.0;\n      tangents[47] = 0.0;\n\n      // +y face\n      tangents[48] = -1.0;\n      tangents[49] = 0.0;\n      tangents[50] = 0.0;\n      tangents[51] = -1.0;\n      tangents[52] = 0.0;\n      tangents[53] = 0.0;\n      tangents[54] = -1.0;\n      tangents[55] = 0.0;\n      tangents[56] = 0.0;\n      tangents[57] = -1.0;\n      tangents[58] = 0.0;\n      tangents[59] = 0.0;\n\n      // -y face\n      tangents[60] = 1.0;\n      tangents[61] = 0.0;\n      tangents[62] = 0.0;\n      tangents[63] = 1.0;\n      tangents[64] = 0.0;\n      tangents[65] = 0.0;\n      tangents[66] = 1.0;\n      tangents[67] = 0.0;\n      tangents[68] = 0.0;\n      tangents[69] = 1.0;\n      tangents[70] = 0.0;\n      tangents[71] = 0.0;\n\n      attributes.tangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: tangents,\n      });\n    }\n\n    if (vertexFormat.bitangent) {\n      const bitangents = new Float32Array(6 * 4 * 3);\n\n      // +z face\n      bitangents[0] = 0.0;\n      bitangents[1] = 1.0;\n      bitangents[2] = 0.0;\n      bitangents[3] = 0.0;\n      bitangents[4] = 1.0;\n      bitangents[5] = 0.0;\n      bitangents[6] = 0.0;\n      bitangents[7] = 1.0;\n      bitangents[8] = 0.0;\n      bitangents[9] = 0.0;\n      bitangents[10] = 1.0;\n      bitangents[11] = 0.0;\n\n      // -z face\n      bitangents[12] = 0.0;\n      bitangents[13] = 1.0;\n      bitangents[14] = 0.0;\n      bitangents[15] = 0.0;\n      bitangents[16] = 1.0;\n      bitangents[17] = 0.0;\n      bitangents[18] = 0.0;\n      bitangents[19] = 1.0;\n      bitangents[20] = 0.0;\n      bitangents[21] = 0.0;\n      bitangents[22] = 1.0;\n      bitangents[23] = 0.0;\n\n      // +x face\n      bitangents[24] = 0.0;\n      bitangents[25] = 0.0;\n      bitangents[26] = 1.0;\n      bitangents[27] = 0.0;\n      bitangents[28] = 0.0;\n      bitangents[29] = 1.0;\n      bitangents[30] = 0.0;\n      bitangents[31] = 0.0;\n      bitangents[32] = 1.0;\n      bitangents[33] = 0.0;\n      bitangents[34] = 0.0;\n      bitangents[35] = 1.0;\n\n      // -x face\n      bitangents[36] = 0.0;\n      bitangents[37] = 0.0;\n      bitangents[38] = 1.0;\n      bitangents[39] = 0.0;\n      bitangents[40] = 0.0;\n      bitangents[41] = 1.0;\n      bitangents[42] = 0.0;\n      bitangents[43] = 0.0;\n      bitangents[44] = 1.0;\n      bitangents[45] = 0.0;\n      bitangents[46] = 0.0;\n      bitangents[47] = 1.0;\n\n      // +y face\n      bitangents[48] = 0.0;\n      bitangents[49] = 0.0;\n      bitangents[50] = 1.0;\n      bitangents[51] = 0.0;\n      bitangents[52] = 0.0;\n      bitangents[53] = 1.0;\n      bitangents[54] = 0.0;\n      bitangents[55] = 0.0;\n      bitangents[56] = 1.0;\n      bitangents[57] = 0.0;\n      bitangents[58] = 0.0;\n      bitangents[59] = 1.0;\n\n      // -y face\n      bitangents[60] = 0.0;\n      bitangents[61] = 0.0;\n      bitangents[62] = 1.0;\n      bitangents[63] = 0.0;\n      bitangents[64] = 0.0;\n      bitangents[65] = 1.0;\n      bitangents[66] = 0.0;\n      bitangents[67] = 0.0;\n      bitangents[68] = 1.0;\n      bitangents[69] = 0.0;\n      bitangents[70] = 0.0;\n      bitangents[71] = 1.0;\n\n      attributes.bitangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: bitangents,\n      });\n    }\n\n    // 12 triangles:  6 faces, 2 triangles each.\n    indices = new Uint16Array(6 * 2 * 3);\n\n    // +z face\n    indices[0] = 0;\n    indices[1] = 1;\n    indices[2] = 2;\n    indices[3] = 0;\n    indices[4] = 2;\n    indices[5] = 3;\n\n    // -z face\n    indices[6] = 4 + 2;\n    indices[7] = 4 + 1;\n    indices[8] = 4 + 0;\n    indices[9] = 4 + 3;\n    indices[10] = 4 + 2;\n    indices[11] = 4 + 0;\n\n    // +x face\n    indices[12] = 8 + 0;\n    indices[13] = 8 + 1;\n    indices[14] = 8 + 2;\n    indices[15] = 8 + 0;\n    indices[16] = 8 + 2;\n    indices[17] = 8 + 3;\n\n    // -x face\n    indices[18] = 12 + 2;\n    indices[19] = 12 + 1;\n    indices[20] = 12 + 0;\n    indices[21] = 12 + 3;\n    indices[22] = 12 + 2;\n    indices[23] = 12 + 0;\n\n    // +y face\n    indices[24] = 16 + 2;\n    indices[25] = 16 + 1;\n    indices[26] = 16 + 0;\n    indices[27] = 16 + 3;\n    indices[28] = 16 + 2;\n    indices[29] = 16 + 0;\n\n    // -y face\n    indices[30] = 20 + 0;\n    indices[31] = 20 + 1;\n    indices[32] = 20 + 2;\n    indices[33] = 20 + 0;\n    indices[34] = 20 + 2;\n    indices[35] = 20 + 3;\n  } else {\n    // Positions only - no need to duplicate corner points\n    positions = new Float64Array(8 * 3);\n\n    positions[0] = min.x;\n    positions[1] = min.y;\n    positions[2] = min.z;\n    positions[3] = max.x;\n    positions[4] = min.y;\n    positions[5] = min.z;\n    positions[6] = max.x;\n    positions[7] = max.y;\n    positions[8] = min.z;\n    positions[9] = min.x;\n    positions[10] = max.y;\n    positions[11] = min.z;\n    positions[12] = min.x;\n    positions[13] = min.y;\n    positions[14] = max.z;\n    positions[15] = max.x;\n    positions[16] = min.y;\n    positions[17] = max.z;\n    positions[18] = max.x;\n    positions[19] = max.y;\n    positions[20] = max.z;\n    positions[21] = min.x;\n    positions[22] = max.y;\n    positions[23] = max.z;\n\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: positions,\n    });\n\n    // 12 triangles:  6 faces, 2 triangles each.\n    indices = new Uint16Array(6 * 2 * 3);\n\n    // plane z = corner.Z\n    indices[0] = 4;\n    indices[1] = 5;\n    indices[2] = 6;\n    indices[3] = 4;\n    indices[4] = 6;\n    indices[5] = 7;\n\n    // plane z = -corner.Z\n    indices[6] = 1;\n    indices[7] = 0;\n    indices[8] = 3;\n    indices[9] = 1;\n    indices[10] = 3;\n    indices[11] = 2;\n\n    // plane x = corner.X\n    indices[12] = 1;\n    indices[13] = 6;\n    indices[14] = 5;\n    indices[15] = 1;\n    indices[16] = 2;\n    indices[17] = 6;\n\n    // plane y = corner.Y\n    indices[18] = 2;\n    indices[19] = 3;\n    indices[20] = 7;\n    indices[21] = 2;\n    indices[22] = 7;\n    indices[23] = 6;\n\n    // plane x = -corner.X\n    indices[24] = 3;\n    indices[25] = 0;\n    indices[26] = 4;\n    indices[27] = 3;\n    indices[28] = 4;\n    indices[29] = 7;\n\n    // plane y = -corner.Y\n    indices[30] = 0;\n    indices[31] = 1;\n    indices[32] = 5;\n    indices[33] = 0;\n    indices[34] = 5;\n    indices[35] = 4;\n  }\n\n  const diff = Cartesian3.subtract(max, min, diffScratch);\n  const radius = Cartesian3.magnitude(diff) * 0.5;\n\n  if (defined(boxGeometry._offsetAttribute)) {\n    const length = positions.length;\n    const applyOffset = new Uint8Array(length / 3);\n    const offsetValue =\n      boxGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n    arrayFill(applyOffset, offsetValue);\n    attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: applyOffset,\n    });\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, radius),\n    offsetAttribute: boxGeometry._offsetAttribute,\n  });\n};\n\nlet unitBoxGeometry;\n\n/**\n * Returns the geometric representation of a unit box, including its vertices, indices, and a bounding sphere.\n * @returns {Geometry} The computed vertices and indices.\n *\n * @private\n */\nBoxGeometry.getUnitBox = function () {\n  if (!defined(unitBoxGeometry)) {\n    unitBoxGeometry = BoxGeometry.createGeometry(\n      BoxGeometry.fromDimensions({\n        dimensions: new Cartesian3(1.0, 1.0, 1.0),\n        vertexFormat: VertexFormat.POSITION_ONLY,\n      })\n    );\n  }\n  return unitBoxGeometry;\n};\nexport default BoxGeometry;\n","import arrayFill from \"./arrayFill.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\n\nconst diffScratch = new Cartesian3();\n\n/**\n * A description of the outline of a cube centered at the origin.\n *\n * @alias BoxOutlineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.minimum The minimum x, y, and z coordinates of the box.\n * @param {Cartesian3} options.maximum The maximum x, y, and z coordinates of the box.\n *\n * @see BoxOutlineGeometry.fromDimensions\n * @see BoxOutlineGeometry.createGeometry\n * @see Packable\n *\n * @example\n * const box = new Cesium.BoxOutlineGeometry({\n *   maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0),\n *   minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0)\n * });\n * const geometry = Cesium.BoxOutlineGeometry.createGeometry(box);\n */\nfunction BoxOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const min = options.minimum;\n  const max = options.maximum;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"min\", min);\n  Check.typeOf.object(\"max\", max);\n  if (\n    defined(options.offsetAttribute) &&\n    options.offsetAttribute === GeometryOffsetAttribute.TOP\n  ) {\n    throw new DeveloperError(\n      \"GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  this._min = Cartesian3.clone(min);\n  this._max = Cartesian3.clone(max);\n  this._offsetAttribute = options.offsetAttribute;\n  this._workerName = \"createBoxOutlineGeometry\";\n}\n\n/**\n * Creates an outline of a cube centered at the origin given its dimensions.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.dimensions The width, depth, and height of the box stored in the x, y, and z coordinates of the <code>Cartesian3</code>, respectively.\n * @returns {BoxOutlineGeometry}\n *\n * @exception {DeveloperError} All dimensions components must be greater than or equal to zero.\n *\n *\n * @example\n * const box = Cesium.BoxOutlineGeometry.fromDimensions({\n *   dimensions : new Cesium.Cartesian3(500000.0, 500000.0, 500000.0)\n * });\n * const geometry = Cesium.BoxOutlineGeometry.createGeometry(box);\n *\n * @see BoxOutlineGeometry.createGeometry\n */\nBoxOutlineGeometry.fromDimensions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const dimensions = options.dimensions;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"dimensions\", dimensions);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.x\", dimensions.x, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.y\", dimensions.y, 0);\n  Check.typeOf.number.greaterThanOrEquals(\"dimensions.z\", dimensions.z, 0);\n  //>>includeEnd('debug');\n\n  const corner = Cartesian3.multiplyByScalar(dimensions, 0.5, new Cartesian3());\n\n  return new BoxOutlineGeometry({\n    minimum: Cartesian3.negate(corner, new Cartesian3()),\n    maximum: corner,\n    offsetAttribute: options.offsetAttribute,\n  });\n};\n\n/**\n * Creates an outline of a cube from the dimensions of an AxisAlignedBoundingBox.\n *\n * @param {AxisAlignedBoundingBox} boundingBox A description of the AxisAlignedBoundingBox.\n * @returns {BoxOutlineGeometry}\n *\n *\n *\n * @example\n * const aabb = Cesium.AxisAlignedBoundingBox.fromPoints(Cesium.Cartesian3.fromDegreesArray([\n *      -72.0, 40.0,\n *      -70.0, 35.0,\n *      -75.0, 30.0,\n *      -70.0, 30.0,\n *      -68.0, 40.0\n * ]));\n * const box = Cesium.BoxOutlineGeometry.fromAxisAlignedBoundingBox(aabb);\n *\n *  @see BoxOutlineGeometry.createGeometry\n */\nBoxOutlineGeometry.fromAxisAlignedBoundingBox = function (boundingBox) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"boundindBox\", boundingBox);\n  //>>includeEnd('debug');\n\n  return new BoxOutlineGeometry({\n    minimum: boundingBox.minimum,\n    maximum: boundingBox.maximum,\n  });\n};\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nBoxOutlineGeometry.packedLength = 2 * Cartesian3.packedLength + 1;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {BoxOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nBoxOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  Cartesian3.pack(value._min, array, startingIndex);\n  Cartesian3.pack(value._max, array, startingIndex + Cartesian3.packedLength);\n  array[startingIndex + Cartesian3.packedLength * 2] = defaultValue(\n    value._offsetAttribute,\n    -1\n  );\n\n  return array;\n};\n\nconst scratchMin = new Cartesian3();\nconst scratchMax = new Cartesian3();\nconst scratchOptions = {\n  minimum: scratchMin,\n  maximum: scratchMax,\n  offsetAttribute: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {BoxOutlineGeometry} [result] The object into which to store the result.\n * @returns {BoxOutlineGeometry} The modified result parameter or a new BoxOutlineGeometry instance if one was not provided.\n */\nBoxOutlineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  const min = Cartesian3.unpack(array, startingIndex, scratchMin);\n  const max = Cartesian3.unpack(\n    array,\n    startingIndex + Cartesian3.packedLength,\n    scratchMax\n  );\n  const offsetAttribute = array[startingIndex + Cartesian3.packedLength * 2];\n\n  if (!defined(result)) {\n    scratchOptions.offsetAttribute =\n      offsetAttribute === -1 ? undefined : offsetAttribute;\n    return new BoxOutlineGeometry(scratchOptions);\n  }\n\n  result._min = Cartesian3.clone(min, result._min);\n  result._max = Cartesian3.clone(max, result._max);\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n\n  return result;\n};\n\n/**\n * Computes the geometric representation of an outline of a box, including its vertices, indices, and a bounding sphere.\n *\n * @param {BoxOutlineGeometry} boxGeometry A description of the box outline.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nBoxOutlineGeometry.createGeometry = function (boxGeometry) {\n  const min = boxGeometry._min;\n  const max = boxGeometry._max;\n\n  if (Cartesian3.equals(min, max)) {\n    return;\n  }\n\n  const attributes = new GeometryAttributes();\n  const indices = new Uint16Array(12 * 2);\n  const positions = new Float64Array(8 * 3);\n\n  positions[0] = min.x;\n  positions[1] = min.y;\n  positions[2] = min.z;\n  positions[3] = max.x;\n  positions[4] = min.y;\n  positions[5] = min.z;\n  positions[6] = max.x;\n  positions[7] = max.y;\n  positions[8] = min.z;\n  positions[9] = min.x;\n  positions[10] = max.y;\n  positions[11] = min.z;\n\n  positions[12] = min.x;\n  positions[13] = min.y;\n  positions[14] = max.z;\n  positions[15] = max.x;\n  positions[16] = min.y;\n  positions[17] = max.z;\n  positions[18] = max.x;\n  positions[19] = max.y;\n  positions[20] = max.z;\n  positions[21] = min.x;\n  positions[22] = max.y;\n  positions[23] = max.z;\n\n  attributes.position = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: positions,\n  });\n\n  // top\n  indices[0] = 4;\n  indices[1] = 5;\n  indices[2] = 5;\n  indices[3] = 6;\n  indices[4] = 6;\n  indices[5] = 7;\n  indices[6] = 7;\n  indices[7] = 4;\n\n  // bottom\n  indices[8] = 0;\n  indices[9] = 1;\n  indices[10] = 1;\n  indices[11] = 2;\n  indices[12] = 2;\n  indices[13] = 3;\n  indices[14] = 3;\n  indices[15] = 0;\n\n  // left\n  indices[16] = 0;\n  indices[17] = 4;\n  indices[18] = 1;\n  indices[19] = 5;\n\n  //right\n  indices[20] = 2;\n  indices[21] = 6;\n  indices[22] = 3;\n  indices[23] = 7;\n\n  const diff = Cartesian3.subtract(max, min, diffScratch);\n  const radius = Cartesian3.magnitude(diff) * 0.5;\n\n  if (defined(boxGeometry._offsetAttribute)) {\n    const length = positions.length;\n    const applyOffset = new Uint8Array(length / 3);\n    const offsetValue =\n      boxGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n    arrayFill(applyOffset, offsetValue);\n    attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: applyOffset,\n    });\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.LINES,\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, radius),\n    offsetAttribute: boxGeometry._offsetAttribute,\n  });\n};\nexport default BoxOutlineGeometry;\n","import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\n\n/**\n * A 2D Cartesian point.\n * @alias Cartesian2\n * @constructor\n *\n * @param {Number} [x=0.0] The X component.\n * @param {Number} [y=0.0] The Y component.\n *\n * @see Cartesian3\n * @see Cartesian4\n * @see Packable\n */\nfunction Cartesian2(x, y) {\n  /**\n   * The X component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.x = defaultValue(x, 0.0);\n\n  /**\n   * The Y component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.y = defaultValue(y, 0.0);\n}\n\n/**\n * Creates a Cartesian2 instance from x and y coordinates.\n *\n * @param {Number} x The x coordinate.\n * @param {Number} y The y coordinate.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\n */\nCartesian2.fromElements = function (x, y, result) {\n  if (!defined(result)) {\n    return new Cartesian2(x, y);\n  }\n\n  result.x = x;\n  result.y = y;\n  return result;\n};\n\n/**\n * Duplicates a Cartesian2 instance.\n *\n * @param {Cartesian2} cartesian The Cartesian to duplicate.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided. (Returns undefined if cartesian is undefined)\n */\nCartesian2.clone = function (cartesian, result) {\n  if (!defined(cartesian)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    return new Cartesian2(cartesian.x, cartesian.y);\n  }\n\n  result.x = cartesian.x;\n  result.y = cartesian.y;\n  return result;\n};\n\n/**\n * Creates a Cartesian2 instance from an existing Cartesian3.  This simply takes the\n * x and y properties of the Cartesian3 and drops z.\n * @function\n *\n * @param {Cartesian3} cartesian The Cartesian3 instance to create a Cartesian2 instance from.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\n */\nCartesian2.fromCartesian3 = Cartesian2.clone;\n\n/**\n * Creates a Cartesian2 instance from an existing Cartesian4.  This simply takes the\n * x and y properties of the Cartesian4 and drops z and w.\n * @function\n *\n * @param {Cartesian4} cartesian The Cartesian4 instance to create a Cartesian2 instance from.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\n */\nCartesian2.fromCartesian4 = Cartesian2.clone;\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nCartesian2.packedLength = 2;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {Cartesian2} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCartesian2.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  array[startingIndex++] = value.x;\n  array[startingIndex] = value.y;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {Cartesian2} [result] The object into which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\n */\nCartesian2.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new Cartesian2();\n  }\n  result.x = array[startingIndex++];\n  result.y = array[startingIndex];\n  return result;\n};\n\n/**\n * Flattens an array of Cartesian2s into an array of components.\n *\n * @param {Cartesian2[]} array The array of cartesians to pack.\n * @param {Number[]} [result] The array onto which to store the result. If this is a typed array, it must have array.length * 2 components, else a {@link DeveloperError} will be thrown. If it is a regular array, it will be resized to have (array.length * 2) elements.\n * @returns {Number[]} The packed array.\n */\nCartesian2.packArray = function (array, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  const length = array.length;\n  const resultLength = length * 2;\n  if (!defined(result)) {\n    result = new Array(resultLength);\n  } else if (!Array.isArray(result) && result.length !== resultLength) {\n    //>>includeStart('debug', pragmas.debug);\n    throw new DeveloperError(\n      \"If result is a typed array, it must have exactly array.length * 2 elements\"\n    );\n    //>>includeEnd('debug');\n  } else if (result.length !== resultLength) {\n    result.length = resultLength;\n  }\n\n  for (let i = 0; i < length; ++i) {\n    Cartesian2.pack(array[i], result, i * 2);\n  }\n  return result;\n};\n\n/**\n * Unpacks an array of cartesian components into an array of Cartesian2s.\n *\n * @param {Number[]} array The array of components to unpack.\n * @param {Cartesian2[]} [result] The array onto which to store the result.\n * @returns {Cartesian2[]} The unpacked array.\n */\nCartesian2.unpackArray = function (array, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  Check.typeOf.number.greaterThanOrEquals(\"array.length\", array.length, 2);\n  if (array.length % 2 !== 0) {\n    throw new DeveloperError(\"array length must be a multiple of 2.\");\n  }\n  //>>includeEnd('debug');\n\n  const length = array.length;\n  if (!defined(result)) {\n    result = new Array(length / 2);\n  } else {\n    result.length = length / 2;\n  }\n\n  for (let i = 0; i < length; i += 2) {\n    const index = i / 2;\n    result[index] = Cartesian2.unpack(array, i, result[index]);\n  }\n  return result;\n};\n\n/**\n * Creates a Cartesian2 from two consecutive elements in an array.\n * @function\n *\n * @param {Number[]} array The array whose two consecutive elements correspond to the x and y components, respectively.\n * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to the x component.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\n *\n * @example\n * // Create a Cartesian2 with (1.0, 2.0)\n * const v = [1.0, 2.0];\n * const p = Cesium.Cartesian2.fromArray(v);\n *\n * // Create a Cartesian2 with (1.0, 2.0) using an offset into an array\n * const v2 = [0.0, 0.0, 1.0, 2.0];\n * const p2 = Cesium.Cartesian2.fromArray(v2, 2);\n */\nCartesian2.fromArray = Cartesian2.unpack;\n\n/**\n * Computes the value of the maximum component for the supplied Cartesian.\n *\n * @param {Cartesian2} cartesian The cartesian to use.\n * @returns {Number} The value of the maximum component.\n */\nCartesian2.maximumComponent = function (cartesian) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  return Math.max(cartesian.x, cartesian.y);\n};\n\n/**\n * Computes the value of the minimum component for the supplied Cartesian.\n *\n * @param {Cartesian2} cartesian The cartesian to use.\n * @returns {Number} The value of the minimum component.\n */\nCartesian2.minimumComponent = function (cartesian) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  return Math.min(cartesian.x, cartesian.y);\n};\n\n/**\n * Compares two Cartesians and computes a Cartesian which contains the minimum components of the supplied Cartesians.\n *\n * @param {Cartesian2} first A cartesian to compare.\n * @param {Cartesian2} second A cartesian to compare.\n * @param {Cartesian2} result The object into which to store the result.\n * @returns {Cartesian2} A cartesian with the minimum components.\n */\nCartesian2.minimumByComponent = function (first, second, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"first\", first);\n  Check.typeOf.object(\"second\", second);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = Math.min(first.x, second.x);\n  result.y = Math.min(first.y, second.y);\n\n  return result;\n};\n\n/**\n * Compares two Cartesians and computes a Cartesian which contains the maximum components of the supplied Cartesians.\n *\n * @param {Cartesian2} first A cartesian to compare.\n * @param {Cartesian2} second A cartesian to compare.\n * @param {Cartesian2} result The object into which to store the result.\n * @returns {Cartesian2} A cartesian with the maximum components.\n */\nCartesian2.maximumByComponent = function (first, second, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"first\", first);\n  Check.typeOf.object(\"second\", second);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = Math.max(first.x, second.x);\n  result.y = Math.max(first.y, second.y);\n  return result;\n};\n\n/**\n * Constrain a value to lie between two values.\n *\n * @param {Cartesian2} value The value to clamp.\n * @param {Cartesian2} min The minimum bound.\n * @param {Cartesian2} max The maximum bound.\n * @param {Cartesian2} result The object into which to store the result.\n * @returns {Cartesian2} The clamped value such that min <= result <= max.\n */\nCartesian2.clamp = function (value, min, max, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.typeOf.object(\"min\", min);\n  Check.typeOf.object(\"max\", max);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const x = CesiumMath.clamp(value.x, min.x, max.x);\n  const y = CesiumMath.clamp(value.y, min.y, max.y);\n\n  result.x = x;\n  result.y = y;\n\n  return result;\n};\n\n/**\n * Computes the provided Cartesian's squared magnitude.\n *\n * @param {Cartesian2} cartesian The Cartesian instance whose squared magnitude is to be computed.\n * @returns {Number} The squared magnitude.\n */\nCartesian2.magnitudeSquared = function (cartesian) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  return cartesian.x * cartesian.x + cartesian.y * cartesian.y;\n};\n\n/**\n * Computes the Cartesian's magnitude (length).\n *\n * @param {Cartesian2} cartesian The Cartesian instance whose magnitude is to be computed.\n * @returns {Number} The magnitude.\n */\nCartesian2.magnitude = function (cartesian) {\n  return Math.sqrt(Cartesian2.magnitudeSquared(cartesian));\n};\n\nconst distanceScratch = new Cartesian2();\n\n/**\n * Computes the distance between two points.\n *\n * @param {Cartesian2} left The first point to compute the distance from.\n * @param {Cartesian2} right The second point to compute the distance to.\n * @returns {Number} The distance between two points.\n *\n * @example\n * // Returns 1.0\n * const d = Cesium.Cartesian2.distance(new Cesium.Cartesian2(1.0, 0.0), new Cesium.Cartesian2(2.0, 0.0));\n */\nCartesian2.distance = function (left, right) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  //>>includeEnd('debug');\n\n  Cartesian2.subtract(left, right, distanceScratch);\n  return Cartesian2.magnitude(distanceScratch);\n};\n\n/**\n * Computes the squared distance between two points.  Comparing squared distances\n * using this function is more efficient than comparing distances using {@link Cartesian2#distance}.\n *\n * @param {Cartesian2} left The first point to compute the distance from.\n * @param {Cartesian2} right The second point to compute the distance to.\n * @returns {Number} The distance between two points.\n *\n * @example\n * // Returns 4.0, not 2.0\n * const d = Cesium.Cartesian2.distance(new Cesium.Cartesian2(1.0, 0.0), new Cesium.Cartesian2(3.0, 0.0));\n */\nCartesian2.distanceSquared = function (left, right) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  //>>includeEnd('debug');\n\n  Cartesian2.subtract(left, right, distanceScratch);\n  return Cartesian2.magnitudeSquared(distanceScratch);\n};\n\n/**\n * Computes the normalized form of the supplied Cartesian.\n *\n * @param {Cartesian2} cartesian The Cartesian to be normalized.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.normalize = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const magnitude = Cartesian2.magnitude(cartesian);\n\n  result.x = cartesian.x / magnitude;\n  result.y = cartesian.y / magnitude;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (isNaN(result.x) || isNaN(result.y)) {\n    throw new DeveloperError(\"normalized result is not a number\");\n  }\n  //>>includeEnd('debug');\n\n  return result;\n};\n\n/**\n * Computes the dot (scalar) product of two Cartesians.\n *\n * @param {Cartesian2} left The first Cartesian.\n * @param {Cartesian2} right The second Cartesian.\n * @returns {Number} The dot product.\n */\nCartesian2.dot = function (left, right) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  //>>includeEnd('debug');\n\n  return left.x * right.x + left.y * right.y;\n};\n\n/**\n * Computes the magnitude of the cross product that would result from implicitly setting the Z coordinate of the input vectors to 0\n *\n * @param {Cartesian2} left The first Cartesian.\n * @param {Cartesian2} right The second Cartesian.\n * @returns {Number} The cross product.\n */\nCartesian2.cross = function (left, right) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  //>>includeEnd('debug');\n\n  return left.x * right.y - left.y * right.x;\n};\n\n/**\n * Computes the componentwise product of two Cartesians.\n *\n * @param {Cartesian2} left The first Cartesian.\n * @param {Cartesian2} right The second Cartesian.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.multiplyComponents = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = left.x * right.x;\n  result.y = left.y * right.y;\n  return result;\n};\n\n/**\n * Computes the componentwise quotient of two Cartesians.\n *\n * @param {Cartesian2} left The first Cartesian.\n * @param {Cartesian2} right The second Cartesian.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.divideComponents = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = left.x / right.x;\n  result.y = left.y / right.y;\n  return result;\n};\n\n/**\n * Computes the componentwise sum of two Cartesians.\n *\n * @param {Cartesian2} left The first Cartesian.\n * @param {Cartesian2} right The second Cartesian.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.add = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = left.x + right.x;\n  result.y = left.y + right.y;\n  return result;\n};\n\n/**\n * Computes the componentwise difference of two Cartesians.\n *\n * @param {Cartesian2} left The first Cartesian.\n * @param {Cartesian2} right The second Cartesian.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.subtract = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = left.x - right.x;\n  result.y = left.y - right.y;\n  return result;\n};\n\n/**\n * Multiplies the provided Cartesian componentwise by the provided scalar.\n *\n * @param {Cartesian2} cartesian The Cartesian to be scaled.\n * @param {Number} scalar The scalar to multiply with.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.multiplyByScalar = function (cartesian, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = cartesian.x * scalar;\n  result.y = cartesian.y * scalar;\n  return result;\n};\n\n/**\n * Divides the provided Cartesian componentwise by the provided scalar.\n *\n * @param {Cartesian2} cartesian The Cartesian to be divided.\n * @param {Number} scalar The scalar to divide by.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.divideByScalar = function (cartesian, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = cartesian.x / scalar;\n  result.y = cartesian.y / scalar;\n  return result;\n};\n\n/**\n * Negates the provided Cartesian.\n *\n * @param {Cartesian2} cartesian The Cartesian to be negated.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.negate = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = -cartesian.x;\n  result.y = -cartesian.y;\n  return result;\n};\n\n/**\n * Computes the absolute value of the provided Cartesian.\n *\n * @param {Cartesian2} cartesian The Cartesian whose absolute value is to be computed.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.abs = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = Math.abs(cartesian.x);\n  result.y = Math.abs(cartesian.y);\n  return result;\n};\n\nconst lerpScratch = new Cartesian2();\n/**\n * Computes the linear interpolation or extrapolation at t using the provided cartesians.\n *\n * @param {Cartesian2} start The value corresponding to t at 0.0.\n * @param {Cartesian2} end The value corresponding to t at 1.0.\n * @param {Number} t The point along t at which to interpolate.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter.\n */\nCartesian2.lerp = function (start, end, t, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"start\", start);\n  Check.typeOf.object(\"end\", end);\n  Check.typeOf.number(\"t\", t);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  Cartesian2.multiplyByScalar(end, t, lerpScratch);\n  result = Cartesian2.multiplyByScalar(start, 1.0 - t, result);\n  return Cartesian2.add(lerpScratch, result, result);\n};\n\nconst angleBetweenScratch = new Cartesian2();\nconst angleBetweenScratch2 = new Cartesian2();\n/**\n * Returns the angle, in radians, between the provided Cartesians.\n *\n * @param {Cartesian2} left The first Cartesian.\n * @param {Cartesian2} right The second Cartesian.\n * @returns {Number} The angle between the Cartesians.\n */\nCartesian2.angleBetween = function (left, right) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  //>>includeEnd('debug');\n\n  Cartesian2.normalize(left, angleBetweenScratch);\n  Cartesian2.normalize(right, angleBetweenScratch2);\n  return CesiumMath.acosClamped(\n    Cartesian2.dot(angleBetweenScratch, angleBetweenScratch2)\n  );\n};\n\nconst mostOrthogonalAxisScratch = new Cartesian2();\n/**\n * Returns the axis that is most orthogonal to the provided Cartesian.\n *\n * @param {Cartesian2} cartesian The Cartesian on which to find the most orthogonal axis.\n * @param {Cartesian2} result The object onto which to store the result.\n * @returns {Cartesian2} The most orthogonal axis.\n */\nCartesian2.mostOrthogonalAxis = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const f = Cartesian2.normalize(cartesian, mostOrthogonalAxisScratch);\n  Cartesian2.abs(f, f);\n\n  if (f.x <= f.y) {\n    result = Cartesian2.clone(Cartesian2.UNIT_X, result);\n  } else {\n    result = Cartesian2.clone(Cartesian2.UNIT_Y, result);\n  }\n\n  return result;\n};\n\n/**\n * Compares the provided Cartesians componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Cartesian2} [left] The first Cartesian.\n * @param {Cartesian2} [right] The second Cartesian.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCartesian2.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      left.x === right.x &&\n      left.y === right.y)\n  );\n};\n\n/**\n * @private\n */\nCartesian2.equalsArray = function (cartesian, array, offset) {\n  return cartesian.x === array[offset] && cartesian.y === array[offset + 1];\n};\n\n/**\n * Compares the provided Cartesians componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {Cartesian2} [left] The first Cartesian.\n * @param {Cartesian2} [right] The second Cartesian.\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n */\nCartesian2.equalsEpsilon = function (\n  left,\n  right,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      CesiumMath.equalsEpsilon(\n        left.x,\n        right.x,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      CesiumMath.equalsEpsilon(\n        left.y,\n        right.y,\n        relativeEpsilon,\n        absoluteEpsilon\n      ))\n  );\n};\n\n/**\n * An immutable Cartesian2 instance initialized to (0.0, 0.0).\n *\n * @type {Cartesian2}\n * @constant\n */\nCartesian2.ZERO = Object.freeze(new Cartesian2(0.0, 0.0));\n\n/**\n * An immutable Cartesian2 instance initialized to (1.0, 1.0).\n *\n * @type {Cartesian2}\n * @constant\n */\nCartesian2.ONE = Object.freeze(new Cartesian2(1.0, 1.0));\n\n/**\n * An immutable Cartesian2 instance initialized to (1.0, 0.0).\n *\n * @type {Cartesian2}\n * @constant\n */\nCartesian2.UNIT_X = Object.freeze(new Cartesian2(1.0, 0.0));\n\n/**\n * An immutable Cartesian2 instance initialized to (0.0, 1.0).\n *\n * @type {Cartesian2}\n * @constant\n */\nCartesian2.UNIT_Y = Object.freeze(new Cartesian2(0.0, 1.0));\n\n/**\n * Duplicates this Cartesian2 instance.\n *\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\n */\nCartesian2.prototype.clone = function (result) {\n  return Cartesian2.clone(this, result);\n};\n\n/**\n * Compares this Cartesian against the provided Cartesian componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Cartesian2} [right] The right hand side Cartesian.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nCartesian2.prototype.equals = function (right) {\n  return Cartesian2.equals(this, right);\n};\n\n/**\n * Compares this Cartesian against the provided Cartesian componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {Cartesian2} [right] The right hand side Cartesian.\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\n */\nCartesian2.prototype.equalsEpsilon = function (\n  right,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  return Cartesian2.equalsEpsilon(\n    this,\n    right,\n    relativeEpsilon,\n    absoluteEpsilon\n  );\n};\n\n/**\n * Creates a string representing this Cartesian in the format '(x, y)'.\n *\n * @returns {String} A string representing the provided Cartesian in the format '(x, y)'.\n */\nCartesian2.prototype.toString = function () {\n  return `(${this.x}, ${this.y})`;\n};\nexport default Cartesian2;\n","import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\n\n/**\n * A 3D Cartesian point.\n * @alias Cartesian3\n * @constructor\n *\n * @param {Number} [x=0.0] The X component.\n * @param {Number} [y=0.0] The Y component.\n * @param {Number} [z=0.0] The Z component.\n *\n * @see Cartesian2\n * @see Cartesian4\n * @see Packable\n */\nfunction Cartesian3(x, y, z) {\n  /**\n   * The X component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.x = defaultValue(x, 0.0);\n\n  /**\n   * The Y component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.y = defaultValue(y, 0.0);\n\n  /**\n   * The Z component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.z = defaultValue(z, 0.0);\n}\n\n/**\n * Converts the provided Spherical into Cartesian3 coordinates.\n *\n * @param {Spherical} spherical The Spherical to be converted to Cartesian3.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\n */\nCartesian3.fromSpherical = function (spherical, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"spherical\", spherical);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  const clock = spherical.clock;\n  const cone = spherical.cone;\n  const magnitude = defaultValue(spherical.magnitude, 1.0);\n  const radial = magnitude * Math.sin(cone);\n  result.x = radial * Math.cos(clock);\n  result.y = radial * Math.sin(clock);\n  result.z = magnitude * Math.cos(cone);\n  return result;\n};\n\n/**\n * Creates a Cartesian3 instance from x, y and z coordinates.\n *\n * @param {Number} x The x coordinate.\n * @param {Number} y The y coordinate.\n * @param {Number} z The z coordinate.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\n */\nCartesian3.fromElements = function (x, y, z, result) {\n  if (!defined(result)) {\n    return new Cartesian3(x, y, z);\n  }\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n\n/**\n * Duplicates a Cartesian3 instance.\n *\n * @param {Cartesian3} cartesian The Cartesian to duplicate.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided. (Returns undefined if cartesian is undefined)\n */\nCartesian3.clone = function (cartesian, result) {\n  if (!defined(cartesian)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    return new Cartesian3(cartesian.x, cartesian.y, cartesian.z);\n  }\n\n  result.x = cartesian.x;\n  result.y = cartesian.y;\n  result.z = cartesian.z;\n  return result;\n};\n\n/**\n * Creates a Cartesian3 instance from an existing Cartesian4.  This simply takes the\n * x, y, and z properties of the Cartesian4 and drops w.\n * @function\n *\n * @param {Cartesian4} cartesian The Cartesian4 instance to create a Cartesian3 instance from.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\n */\nCartesian3.fromCartesian4 = Cartesian3.clone;\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nCartesian3.packedLength = 3;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {Cartesian3} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCartesian3.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  array[startingIndex++] = value.x;\n  array[startingIndex++] = value.y;\n  array[startingIndex] = value.z;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {Cartesian3} [result] The object into which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\n */\nCartesian3.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n  result.x = array[startingIndex++];\n  result.y = array[startingIndex++];\n  result.z = array[startingIndex];\n  return result;\n};\n\n/**\n * Flattens an array of Cartesian3s into an array of components.\n *\n * @param {Cartesian3[]} array The array of cartesians to pack.\n * @param {Number[]} [result] The array onto which to store the result. If this is a typed array, it must have array.length * 3 components, else a {@link DeveloperError} will be thrown. If it is a regular array, it will be resized to have (array.length * 3) elements.\n * @returns {Number[]} The packed array.\n */\nCartesian3.packArray = function (array, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  const length = array.length;\n  const resultLength = length * 3;\n  if (!defined(result)) {\n    result = new Array(resultLength);\n  } else if (!Array.isArray(result) && result.length !== resultLength) {\n    //>>includeStart('debug', pragmas.debug);\n    throw new DeveloperError(\n      \"If result is a typed array, it must have exactly array.length * 3 elements\"\n    );\n    //>>includeEnd('debug');\n  } else if (result.length !== resultLength) {\n    result.length = resultLength;\n  }\n\n  for (let i = 0; i < length; ++i) {\n    Cartesian3.pack(array[i], result, i * 3);\n  }\n  return result;\n};\n\n/**\n * Unpacks an array of cartesian components into an array of Cartesian3s.\n *\n * @param {Number[]} array The array of components to unpack.\n * @param {Cartesian3[]} [result] The array onto which to store the result.\n * @returns {Cartesian3[]} The unpacked array.\n */\nCartesian3.unpackArray = function (array, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  Check.typeOf.number.greaterThanOrEquals(\"array.length\", array.length, 3);\n  if (array.length % 3 !== 0) {\n    throw new DeveloperError(\"array length must be a multiple of 3.\");\n  }\n  //>>includeEnd('debug');\n\n  const length = array.length;\n  if (!defined(result)) {\n    result = new Array(length / 3);\n  } else {\n    result.length = length / 3;\n  }\n\n  for (let i = 0; i < length; i += 3) {\n    const index = i / 3;\n    result[index] = Cartesian3.unpack(array, i, result[index]);\n  }\n  return result;\n};\n\n/**\n * Creates a Cartesian3 from three consecutive elements in an array.\n * @function\n *\n * @param {Number[]} array The array whose three consecutive elements correspond to the x, y, and z components, respectively.\n * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to the x component.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\n *\n * @example\n * // Create a Cartesian3 with (1.0, 2.0, 3.0)\n * const v = [1.0, 2.0, 3.0];\n * const p = Cesium.Cartesian3.fromArray(v);\n *\n * // Create a Cartesian3 with (1.0, 2.0, 3.0) using an offset into an array\n * const v2 = [0.0, 0.0, 1.0, 2.0, 3.0];\n * const p2 = Cesium.Cartesian3.fromArray(v2, 2);\n */\nCartesian3.fromArray = Cartesian3.unpack;\n\n/**\n * Computes the value of the maximum component for the supplied Cartesian.\n *\n * @param {Cartesian3} cartesian The cartesian to use.\n * @returns {Number} The value of the maximum component.\n */\nCartesian3.maximumComponent = function (cartesian) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  return Math.max(cartesian.x, cartesian.y, cartesian.z);\n};\n\n/**\n * Computes the value of the minimum component for the supplied Cartesian.\n *\n * @param {Cartesian3} cartesian The cartesian to use.\n * @returns {Number} The value of the minimum component.\n */\nCartesian3.minimumComponent = function (cartesian) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  return Math.min(cartesian.x, cartesian.y, cartesian.z);\n};\n\n/**\n * Compares two Cartesians and computes a Cartesian which contains the minimum components of the supplied Cartesians.\n *\n * @param {Cartesian3} first A cartesian to compare.\n * @param {Cartesian3} second A cartesian to compare.\n * @param {Cartesian3} result The object into which to store the result.\n * @returns {Cartesian3} A cartesian with the minimum components.\n */\nCartesian3.minimumByComponent = function (first, second, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"first\", first);\n  Check.typeOf.object(\"second\", second);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = Math.min(first.x, second.x);\n  result.y = Math.min(first.y, second.y);\n  result.z = Math.min(first.z, second.z);\n\n  return result;\n};\n\n/**\n * Compares two Cartesians and computes a Cartesian which contains the maximum components of the supplied Cartesians.\n *\n * @param {Cartesian3} first A cartesian to compare.\n * @param {Cartesian3} second A cartesian to compare.\n * @param {Cartesian3} result The object into which to store the result.\n * @returns {Cartesian3} A cartesian with the maximum components.\n */\nCartesian3.maximumByComponent = function (first, second, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"first\", first);\n  Check.typeOf.object(\"second\", second);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = Math.max(first.x, second.x);\n  result.y = Math.max(first.y, second.y);\n  result.z = Math.max(first.z, second.z);\n  return result;\n};\n\n/**\n * Constrain a value to lie between two values.\n *\n * @param {Cartesian3} cartesian The value to clamp.\n * @param {Cartesian3} min The minimum bound.\n * @param {Cartesian3} max The maximum bound.\n * @param {Cartesian3} result The object into which to store the result.\n * @returns {Cartesian3} The clamped value such that min <= value <= max.\n */\nCartesian3.clamp = function (value, min, max, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.typeOf.object(\"min\", min);\n  Check.typeOf.object(\"max\", max);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const x = CesiumMath.clamp(value.x, min.x, max.x);\n  const y = CesiumMath.clamp(value.y, min.y, max.y);\n  const z = CesiumMath.clamp(value.z, min.z, max.z);\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n\n  return result;\n};\n\n/**\n * Computes the provided Cartesian's squared magnitude.\n *\n * @param {Cartesian3} cartesian The Cartesian instance whose squared magnitude is to be computed.\n * @returns {Number} The squared magnitude.\n */\nCartesian3.magnitudeSquared = function (cartesian) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  return (\n    cartesian.x * cartesian.x +\n    cartesian.y * cartesian.y +\n    cartesian.z * cartesian.z\n  );\n};\n\n/**\n * Computes the Cartesian's magnitude (length).\n *\n * @param {Cartesian3} cartesian The Cartesian instance whose magnitude is to be computed.\n * @returns {Number} The magnitude.\n */\nCartesian3.magnitude = function (cartesian) {\n  return Math.sqrt(Cartesian3.magnitudeSquared(cartesian));\n};\n\nconst distanceScratch = new Cartesian3();\n\n/**\n * Computes the distance between two points.\n *\n * @param {Cartesian3} left The first point to compute the distance from.\n * @param {Cartesian3} right The second point to compute the distance to.\n * @returns {Number} The distance between two points.\n *\n * @example\n * // Returns 1.0\n * const d = Cesium.Cartesian3.distance(new Cesium.Cartesian3(1.0, 0.0, 0.0), new Cesium.Cartesian3(2.0, 0.0, 0.0));\n */\nCartesian3.distance = function (left, right) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  //>>includeEnd('debug');\n\n  Cartesian3.subtract(left, right, distanceScratch);\n  return Cartesian3.magnitude(distanceScratch);\n};\n\n/**\n * Computes the squared distance between two points.  Comparing squared distances\n * using this function is more efficient than comparing distances using {@link Cartesian3#distance}.\n *\n * @param {Cartesian3} left The first point to compute the distance from.\n * @param {Cartesian3} right The second point to compute the distance to.\n * @returns {Number} The distance between two points.\n *\n * @example\n * // Returns 4.0, not 2.0\n * const d = Cesium.Cartesian3.distanceSquared(new Cesium.Cartesian3(1.0, 0.0, 0.0), new Cesium.Cartesian3(3.0, 0.0, 0.0));\n */\nCartesian3.distanceSquared = function (left, right) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  //>>includeEnd('debug');\n\n  Cartesian3.subtract(left, right, distanceScratch);\n  return Cartesian3.magnitudeSquared(distanceScratch);\n};\n\n/**\n * Computes the normalized form of the supplied Cartesian.\n *\n * @param {Cartesian3} cartesian The Cartesian to be normalized.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.normalize = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const magnitude = Cartesian3.magnitude(cartesian);\n\n  result.x = cartesian.x / magnitude;\n  result.y = cartesian.y / magnitude;\n  result.z = cartesian.z / magnitude;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (isNaN(result.x) || isNaN(result.y) || isNaN(result.z)) {\n    throw new DeveloperError(\"normalized result is not a number\");\n  }\n  //>>includeEnd('debug');\n\n  return result;\n};\n\n/**\n * Computes the dot (scalar) product of two Cartesians.\n *\n * @param {Cartesian3} left The first Cartesian.\n * @param {Cartesian3} right The second Cartesian.\n * @returns {Number} The dot product.\n */\nCartesian3.dot = function (left, right) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  //>>includeEnd('debug');\n\n  return left.x * right.x + left.y * right.y + left.z * right.z;\n};\n\n/**\n * Computes the componentwise product of two Cartesians.\n *\n * @param {Cartesian3} left The first Cartesian.\n * @param {Cartesian3} right The second Cartesian.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.multiplyComponents = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = left.x * right.x;\n  result.y = left.y * right.y;\n  result.z = left.z * right.z;\n  return result;\n};\n\n/**\n * Computes the componentwise quotient of two Cartesians.\n *\n * @param {Cartesian3} left The first Cartesian.\n * @param {Cartesian3} right The second Cartesian.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.divideComponents = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = left.x / right.x;\n  result.y = left.y / right.y;\n  result.z = left.z / right.z;\n  return result;\n};\n\n/**\n * Computes the componentwise sum of two Cartesians.\n *\n * @param {Cartesian3} left The first Cartesian.\n * @param {Cartesian3} right The second Cartesian.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.add = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = left.x + right.x;\n  result.y = left.y + right.y;\n  result.z = left.z + right.z;\n  return result;\n};\n\n/**\n * Computes the componentwise difference of two Cartesians.\n *\n * @param {Cartesian3} left The first Cartesian.\n * @param {Cartesian3} right The second Cartesian.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.subtract = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = left.x - right.x;\n  result.y = left.y - right.y;\n  result.z = left.z - right.z;\n  return result;\n};\n\n/**\n * Multiplies the provided Cartesian componentwise by the provided scalar.\n *\n * @param {Cartesian3} cartesian The Cartesian to be scaled.\n * @param {Number} scalar The scalar to multiply with.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.multiplyByScalar = function (cartesian, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = cartesian.x * scalar;\n  result.y = cartesian.y * scalar;\n  result.z = cartesian.z * scalar;\n  return result;\n};\n\n/**\n * Divides the provided Cartesian componentwise by the provided scalar.\n *\n * @param {Cartesian3} cartesian The Cartesian to be divided.\n * @param {Number} scalar The scalar to divide by.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.divideByScalar = function (cartesian, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = cartesian.x / scalar;\n  result.y = cartesian.y / scalar;\n  result.z = cartesian.z / scalar;\n  return result;\n};\n\n/**\n * Negates the provided Cartesian.\n *\n * @param {Cartesian3} cartesian The Cartesian to be negated.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.negate = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = -cartesian.x;\n  result.y = -cartesian.y;\n  result.z = -cartesian.z;\n  return result;\n};\n\n/**\n * Computes the absolute value of the provided Cartesian.\n *\n * @param {Cartesian3} cartesian The Cartesian whose absolute value is to be computed.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.abs = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = Math.abs(cartesian.x);\n  result.y = Math.abs(cartesian.y);\n  result.z = Math.abs(cartesian.z);\n  return result;\n};\n\nconst lerpScratch = new Cartesian3();\n/**\n * Computes the linear interpolation or extrapolation at t using the provided cartesians.\n *\n * @param {Cartesian3} start The value corresponding to t at 0.0.\n * @param {Cartesian3} end The value corresponding to t at 1.0.\n * @param {Number} t The point along t at which to interpolate.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter.\n */\nCartesian3.lerp = function (start, end, t, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"start\", start);\n  Check.typeOf.object(\"end\", end);\n  Check.typeOf.number(\"t\", t);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  Cartesian3.multiplyByScalar(end, t, lerpScratch);\n  result = Cartesian3.multiplyByScalar(start, 1.0 - t, result);\n  return Cartesian3.add(lerpScratch, result, result);\n};\n\nconst angleBetweenScratch = new Cartesian3();\nconst angleBetweenScratch2 = new Cartesian3();\n/**\n * Returns the angle, in radians, between the provided Cartesians.\n *\n * @param {Cartesian3} left The first Cartesian.\n * @param {Cartesian3} right The second Cartesian.\n * @returns {Number} The angle between the Cartesians.\n */\nCartesian3.angleBetween = function (left, right) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  //>>includeEnd('debug');\n\n  Cartesian3.normalize(left, angleBetweenScratch);\n  Cartesian3.normalize(right, angleBetweenScratch2);\n  const cosine = Cartesian3.dot(angleBetweenScratch, angleBetweenScratch2);\n  const sine = Cartesian3.magnitude(\n    Cartesian3.cross(\n      angleBetweenScratch,\n      angleBetweenScratch2,\n      angleBetweenScratch\n    )\n  );\n  return Math.atan2(sine, cosine);\n};\n\nconst mostOrthogonalAxisScratch = new Cartesian3();\n/**\n * Returns the axis that is most orthogonal to the provided Cartesian.\n *\n * @param {Cartesian3} cartesian The Cartesian on which to find the most orthogonal axis.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The most orthogonal axis.\n */\nCartesian3.mostOrthogonalAxis = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const f = Cartesian3.normalize(cartesian, mostOrthogonalAxisScratch);\n  Cartesian3.abs(f, f);\n\n  if (f.x <= f.y) {\n    if (f.x <= f.z) {\n      result = Cartesian3.clone(Cartesian3.UNIT_X, result);\n    } else {\n      result = Cartesian3.clone(Cartesian3.UNIT_Z, result);\n    }\n  } else if (f.y <= f.z) {\n    result = Cartesian3.clone(Cartesian3.UNIT_Y, result);\n  } else {\n    result = Cartesian3.clone(Cartesian3.UNIT_Z, result);\n  }\n\n  return result;\n};\n\n/**\n * Projects vector a onto vector b\n * @param {Cartesian3} a The vector that needs projecting\n * @param {Cartesian3} b The vector to project onto\n * @param {Cartesian3} result The result cartesian\n * @returns {Cartesian3} The modified result parameter\n */\nCartesian3.projectVector = function (a, b, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"a\", a);\n  Check.defined(\"b\", b);\n  Check.defined(\"result\", result);\n  //>>includeEnd('debug');\n\n  const scalar = Cartesian3.dot(a, b) / Cartesian3.dot(b, b);\n  return Cartesian3.multiplyByScalar(b, scalar, result);\n};\n\n/**\n * Compares the provided Cartesians componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Cartesian3} [left] The first Cartesian.\n * @param {Cartesian3} [right] The second Cartesian.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCartesian3.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      left.x === right.x &&\n      left.y === right.y &&\n      left.z === right.z)\n  );\n};\n\n/**\n * @private\n */\nCartesian3.equalsArray = function (cartesian, array, offset) {\n  return (\n    cartesian.x === array[offset] &&\n    cartesian.y === array[offset + 1] &&\n    cartesian.z === array[offset + 2]\n  );\n};\n\n/**\n * Compares the provided Cartesians componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {Cartesian3} [left] The first Cartesian.\n * @param {Cartesian3} [right] The second Cartesian.\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n */\nCartesian3.equalsEpsilon = function (\n  left,\n  right,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      CesiumMath.equalsEpsilon(\n        left.x,\n        right.x,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      CesiumMath.equalsEpsilon(\n        left.y,\n        right.y,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      CesiumMath.equalsEpsilon(\n        left.z,\n        right.z,\n        relativeEpsilon,\n        absoluteEpsilon\n      ))\n  );\n};\n\n/**\n * Computes the cross (outer) product of two Cartesians.\n *\n * @param {Cartesian3} left The first Cartesian.\n * @param {Cartesian3} right The second Cartesian.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The cross product.\n */\nCartesian3.cross = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const leftX = left.x;\n  const leftY = left.y;\n  const leftZ = left.z;\n  const rightX = right.x;\n  const rightY = right.y;\n  const rightZ = right.z;\n\n  const x = leftY * rightZ - leftZ * rightY;\n  const y = leftZ * rightX - leftX * rightZ;\n  const z = leftX * rightY - leftY * rightX;\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  return result;\n};\n\n/**\n * Computes the midpoint between the right and left Cartesian.\n * @param {Cartesian3} left The first Cartesian.\n * @param {Cartesian3} right The second Cartesian.\n * @param {Cartesian3} result The object onto which to store the result.\n * @returns {Cartesian3} The midpoint.\n */\nCartesian3.midpoint = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = (left.x + right.x) * 0.5;\n  result.y = (left.y + right.y) * 0.5;\n  result.z = (left.z + right.z) * 0.5;\n\n  return result;\n};\n\n/**\n * Returns a Cartesian3 position from longitude and latitude values given in degrees.\n *\n * @param {Number} longitude The longitude, in degrees\n * @param {Number} latitude The latitude, in degrees\n * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The position\n *\n * @example\n * const position = Cesium.Cartesian3.fromDegrees(-115.0, 37.0);\n */\nCartesian3.fromDegrees = function (\n  longitude,\n  latitude,\n  height,\n  ellipsoid,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"longitude\", longitude);\n  Check.typeOf.number(\"latitude\", latitude);\n  //>>includeEnd('debug');\n\n  longitude = CesiumMath.toRadians(longitude);\n  latitude = CesiumMath.toRadians(latitude);\n  return Cartesian3.fromRadians(longitude, latitude, height, ellipsoid, result);\n};\n\nlet scratchN = new Cartesian3();\nlet scratchK = new Cartesian3();\nconst wgs84RadiiSquared = new Cartesian3(\n  6378137.0 * 6378137.0,\n  6378137.0 * 6378137.0,\n  6356752.3142451793 * 6356752.3142451793\n);\n\n/**\n * Returns a Cartesian3 position from longitude and latitude values given in radians.\n *\n * @param {Number} longitude The longitude, in radians\n * @param {Number} latitude The latitude, in radians\n * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The position\n *\n * @example\n * const position = Cesium.Cartesian3.fromRadians(-2.007, 0.645);\n */\nCartesian3.fromRadians = function (\n  longitude,\n  latitude,\n  height,\n  ellipsoid,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"longitude\", longitude);\n  Check.typeOf.number(\"latitude\", latitude);\n  //>>includeEnd('debug');\n\n  height = defaultValue(height, 0.0);\n  const radiiSquared = defined(ellipsoid)\n    ? ellipsoid.radiiSquared\n    : wgs84RadiiSquared;\n\n  const cosLatitude = Math.cos(latitude);\n  scratchN.x = cosLatitude * Math.cos(longitude);\n  scratchN.y = cosLatitude * Math.sin(longitude);\n  scratchN.z = Math.sin(latitude);\n  scratchN = Cartesian3.normalize(scratchN, scratchN);\n\n  Cartesian3.multiplyComponents(radiiSquared, scratchN, scratchK);\n  const gamma = Math.sqrt(Cartesian3.dot(scratchN, scratchK));\n  scratchK = Cartesian3.divideByScalar(scratchK, gamma, scratchK);\n  scratchN = Cartesian3.multiplyByScalar(scratchN, height, scratchN);\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n  return Cartesian3.add(scratchK, scratchN, result);\n};\n\n/**\n * Returns an array of Cartesian3 positions given an array of longitude and latitude values given in degrees.\n *\n * @param {Number[]} coordinates A list of longitude and latitude values. Values alternate [longitude, latitude, longitude, latitude...].\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the coordinates lie.\n * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\n * @returns {Cartesian3[]} The array of positions.\n *\n * @example\n * const positions = Cesium.Cartesian3.fromDegreesArray([-115.0, 37.0, -107.0, 33.0]);\n */\nCartesian3.fromDegreesArray = function (coordinates, ellipsoid, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"coordinates\", coordinates);\n  if (coordinates.length < 2 || coordinates.length % 2 !== 0) {\n    throw new DeveloperError(\n      \"the number of coordinates must be a multiple of 2 and at least 2\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const length = coordinates.length;\n  if (!defined(result)) {\n    result = new Array(length / 2);\n  } else {\n    result.length = length / 2;\n  }\n\n  for (let i = 0; i < length; i += 2) {\n    const longitude = coordinates[i];\n    const latitude = coordinates[i + 1];\n    const index = i / 2;\n    result[index] = Cartesian3.fromDegrees(\n      longitude,\n      latitude,\n      0,\n      ellipsoid,\n      result[index]\n    );\n  }\n\n  return result;\n};\n\n/**\n * Returns an array of Cartesian3 positions given an array of longitude and latitude values given in radians.\n *\n * @param {Number[]} coordinates A list of longitude and latitude values. Values alternate [longitude, latitude, longitude, latitude...].\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the coordinates lie.\n * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\n * @returns {Cartesian3[]} The array of positions.\n *\n * @example\n * const positions = Cesium.Cartesian3.fromRadiansArray([-2.007, 0.645, -1.867, .575]);\n */\nCartesian3.fromRadiansArray = function (coordinates, ellipsoid, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"coordinates\", coordinates);\n  if (coordinates.length < 2 || coordinates.length % 2 !== 0) {\n    throw new DeveloperError(\n      \"the number of coordinates must be a multiple of 2 and at least 2\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const length = coordinates.length;\n  if (!defined(result)) {\n    result = new Array(length / 2);\n  } else {\n    result.length = length / 2;\n  }\n\n  for (let i = 0; i < length; i += 2) {\n    const longitude = coordinates[i];\n    const latitude = coordinates[i + 1];\n    const index = i / 2;\n    result[index] = Cartesian3.fromRadians(\n      longitude,\n      latitude,\n      0,\n      ellipsoid,\n      result[index]\n    );\n  }\n\n  return result;\n};\n\n/**\n * Returns an array of Cartesian3 positions given an array of longitude, latitude and height values where longitude and latitude are given in degrees.\n *\n * @param {Number[]} coordinates A list of longitude, latitude and height values. Values alternate [longitude, latitude, height, longitude, latitude, height...].\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\n * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\n * @returns {Cartesian3[]} The array of positions.\n *\n * @example\n * const positions = Cesium.Cartesian3.fromDegreesArrayHeights([-115.0, 37.0, 100000.0, -107.0, 33.0, 150000.0]);\n */\nCartesian3.fromDegreesArrayHeights = function (coordinates, ellipsoid, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"coordinates\", coordinates);\n  if (coordinates.length < 3 || coordinates.length % 3 !== 0) {\n    throw new DeveloperError(\n      \"the number of coordinates must be a multiple of 3 and at least 3\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const length = coordinates.length;\n  if (!defined(result)) {\n    result = new Array(length / 3);\n  } else {\n    result.length = length / 3;\n  }\n\n  for (let i = 0; i < length; i += 3) {\n    const longitude = coordinates[i];\n    const latitude = coordinates[i + 1];\n    const height = coordinates[i + 2];\n    const index = i / 3;\n    result[index] = Cartesian3.fromDegrees(\n      longitude,\n      latitude,\n      height,\n      ellipsoid,\n      result[index]\n    );\n  }\n\n  return result;\n};\n\n/**\n * Returns an array of Cartesian3 positions given an array of longitude, latitude and height values where longitude and latitude are given in radians.\n *\n * @param {Number[]} coordinates A list of longitude, latitude and height values. Values alternate [longitude, latitude, height, longitude, latitude, height...].\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\n * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\n * @returns {Cartesian3[]} The array of positions.\n *\n * @example\n * const positions = Cesium.Cartesian3.fromRadiansArrayHeights([-2.007, 0.645, 100000.0, -1.867, .575, 150000.0]);\n */\nCartesian3.fromRadiansArrayHeights = function (coordinates, ellipsoid, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"coordinates\", coordinates);\n  if (coordinates.length < 3 || coordinates.length % 3 !== 0) {\n    throw new DeveloperError(\n      \"the number of coordinates must be a multiple of 3 and at least 3\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const length = coordinates.length;\n  if (!defined(result)) {\n    result = new Array(length / 3);\n  } else {\n    result.length = length / 3;\n  }\n\n  for (let i = 0; i < length; i += 3) {\n    const longitude = coordinates[i];\n    const latitude = coordinates[i + 1];\n    const height = coordinates[i + 2];\n    const index = i / 3;\n    result[index] = Cartesian3.fromRadians(\n      longitude,\n      latitude,\n      height,\n      ellipsoid,\n      result[index]\n    );\n  }\n\n  return result;\n};\n\n/**\n * An immutable Cartesian3 instance initialized to (0.0, 0.0, 0.0).\n *\n * @type {Cartesian3}\n * @constant\n */\nCartesian3.ZERO = Object.freeze(new Cartesian3(0.0, 0.0, 0.0));\n\n/**\n * An immutable Cartesian3 instance initialized to (1.0, 1.0, 1.0).\n *\n * @type {Cartesian3}\n * @constant\n */\nCartesian3.ONE = Object.freeze(new Cartesian3(1.0, 1.0, 1.0));\n\n/**\n * An immutable Cartesian3 instance initialized to (1.0, 0.0, 0.0).\n *\n * @type {Cartesian3}\n * @constant\n */\nCartesian3.UNIT_X = Object.freeze(new Cartesian3(1.0, 0.0, 0.0));\n\n/**\n * An immutable Cartesian3 instance initialized to (0.0, 1.0, 0.0).\n *\n * @type {Cartesian3}\n * @constant\n */\nCartesian3.UNIT_Y = Object.freeze(new Cartesian3(0.0, 1.0, 0.0));\n\n/**\n * An immutable Cartesian3 instance initialized to (0.0, 0.0, 1.0).\n *\n * @type {Cartesian3}\n * @constant\n */\nCartesian3.UNIT_Z = Object.freeze(new Cartesian3(0.0, 0.0, 1.0));\n\n/**\n * Duplicates this Cartesian3 instance.\n *\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\n */\nCartesian3.prototype.clone = function (result) {\n  return Cartesian3.clone(this, result);\n};\n\n/**\n * Compares this Cartesian against the provided Cartesian componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Cartesian3} [right] The right hand side Cartesian.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nCartesian3.prototype.equals = function (right) {\n  return Cartesian3.equals(this, right);\n};\n\n/**\n * Compares this Cartesian against the provided Cartesian componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {Cartesian3} [right] The right hand side Cartesian.\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\n */\nCartesian3.prototype.equalsEpsilon = function (\n  right,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  return Cartesian3.equalsEpsilon(\n    this,\n    right,\n    relativeEpsilon,\n    absoluteEpsilon\n  );\n};\n\n/**\n * Creates a string representing this Cartesian in the format '(x, y, z)'.\n *\n * @returns {String} A string representing this Cartesian in the format '(x, y, z)'.\n */\nCartesian3.prototype.toString = function () {\n  return `(${this.x}, ${this.y}, ${this.z})`;\n};\nexport default Cartesian3;\n","import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport CesiumMath from \"./Math.js\";\n\n/**\n * A 4D Cartesian point.\n * @alias Cartesian4\n * @constructor\n *\n * @param {Number} [x=0.0] The X component.\n * @param {Number} [y=0.0] The Y component.\n * @param {Number} [z=0.0] The Z component.\n * @param {Number} [w=0.0] The W component.\n *\n * @see Cartesian2\n * @see Cartesian3\n * @see Packable\n */\nfunction Cartesian4(x, y, z, w) {\n  /**\n   * The X component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.x = defaultValue(x, 0.0);\n\n  /**\n   * The Y component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.y = defaultValue(y, 0.0);\n\n  /**\n   * The Z component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.z = defaultValue(z, 0.0);\n\n  /**\n   * The W component.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.w = defaultValue(w, 0.0);\n}\n\n/**\n * Creates a Cartesian4 instance from x, y, z and w coordinates.\n *\n * @param {Number} x The x coordinate.\n * @param {Number} y The y coordinate.\n * @param {Number} z The z coordinate.\n * @param {Number} w The w coordinate.\n * @param {Cartesian4} [result] The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided.\n */\nCartesian4.fromElements = function (x, y, z, w, result) {\n  if (!defined(result)) {\n    return new Cartesian4(x, y, z, w);\n  }\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  result.w = w;\n  return result;\n};\n\n/**\n * Creates a Cartesian4 instance from a {@link Color}. <code>red</code>, <code>green</code>, <code>blue</code>,\n * and <code>alpha</code> map to <code>x</code>, <code>y</code>, <code>z</code>, and <code>w</code>, respectively.\n *\n * @param {Color} color The source color.\n * @param {Cartesian4} [result] The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided.\n */\nCartesian4.fromColor = function (color, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"color\", color);\n  //>>includeEnd('debug');\n  if (!defined(result)) {\n    return new Cartesian4(color.red, color.green, color.blue, color.alpha);\n  }\n\n  result.x = color.red;\n  result.y = color.green;\n  result.z = color.blue;\n  result.w = color.alpha;\n  return result;\n};\n\n/**\n * Duplicates a Cartesian4 instance.\n *\n * @param {Cartesian4} cartesian The Cartesian to duplicate.\n * @param {Cartesian4} [result] The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided. (Returns undefined if cartesian is undefined)\n */\nCartesian4.clone = function (cartesian, result) {\n  if (!defined(cartesian)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    return new Cartesian4(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\n  }\n\n  result.x = cartesian.x;\n  result.y = cartesian.y;\n  result.z = cartesian.z;\n  result.w = cartesian.w;\n  return result;\n};\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nCartesian4.packedLength = 4;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {Cartesian4} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCartesian4.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  array[startingIndex++] = value.x;\n  array[startingIndex++] = value.y;\n  array[startingIndex++] = value.z;\n  array[startingIndex] = value.w;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {Cartesian4} [result] The object into which to store the result.\n * @returns {Cartesian4}  The modified result parameter or a new Cartesian4 instance if one was not provided.\n */\nCartesian4.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  if (!defined(result)) {\n    result = new Cartesian4();\n  }\n  result.x = array[startingIndex++];\n  result.y = array[startingIndex++];\n  result.z = array[startingIndex++];\n  result.w = array[startingIndex];\n  return result;\n};\n\n/**\n * Flattens an array of Cartesian4s into an array of components.\n *\n * @param {Cartesian4[]} array The array of cartesians to pack.\n * @param {Number[]} [result] The array onto which to store the result. If this is a typed array, it must have array.length * 4 components, else a {@link DeveloperError} will be thrown. If it is a regular array, it will be resized to have (array.length * 4) elements.\n * @returns {Number[]} The packed array.\n */\nCartesian4.packArray = function (array, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  const length = array.length;\n  const resultLength = length * 4;\n  if (!defined(result)) {\n    result = new Array(resultLength);\n  } else if (!Array.isArray(result) && result.length !== resultLength) {\n    //>>includeStart('debug', pragmas.debug);\n    throw new DeveloperError(\n      \"If result is a typed array, it must have exactly array.length * 4 elements\"\n    );\n    //>>includeEnd('debug');\n  } else if (result.length !== resultLength) {\n    result.length = resultLength;\n  }\n\n  for (let i = 0; i < length; ++i) {\n    Cartesian4.pack(array[i], result, i * 4);\n  }\n  return result;\n};\n\n/**\n * Unpacks an array of cartesian components into an array of Cartesian4s.\n *\n * @param {Number[]} array The array of components to unpack.\n * @param {Cartesian4[]} [result] The array onto which to store the result.\n * @returns {Cartesian4[]} The unpacked array.\n */\nCartesian4.unpackArray = function (array, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  Check.typeOf.number.greaterThanOrEquals(\"array.length\", array.length, 4);\n  if (array.length % 4 !== 0) {\n    throw new DeveloperError(\"array length must be a multiple of 4.\");\n  }\n  //>>includeEnd('debug');\n\n  const length = array.length;\n  if (!defined(result)) {\n    result = new Array(length / 4);\n  } else {\n    result.length = length / 4;\n  }\n\n  for (let i = 0; i < length; i += 4) {\n    const index = i / 4;\n    result[index] = Cartesian4.unpack(array, i, result[index]);\n  }\n  return result;\n};\n\n/**\n * Creates a Cartesian4 from four consecutive elements in an array.\n * @function\n *\n * @param {Number[]} array The array whose four consecutive elements correspond to the x, y, z, and w components, respectively.\n * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to the x component.\n * @param {Cartesian4} [result] The object onto which to store the result.\n * @returns {Cartesian4}  The modified result parameter or a new Cartesian4 instance if one was not provided.\n *\n * @example\n * // Create a Cartesian4 with (1.0, 2.0, 3.0, 4.0)\n * const v = [1.0, 2.0, 3.0, 4.0];\n * const p = Cesium.Cartesian4.fromArray(v);\n *\n * // Create a Cartesian4 with (1.0, 2.0, 3.0, 4.0) using an offset into an array\n * const v2 = [0.0, 0.0, 1.0, 2.0, 3.0, 4.0];\n * const p2 = Cesium.Cartesian4.fromArray(v2, 2);\n */\nCartesian4.fromArray = Cartesian4.unpack;\n\n/**\n * Computes the value of the maximum component for the supplied Cartesian.\n *\n * @param {Cartesian4} cartesian The cartesian to use.\n * @returns {Number} The value of the maximum component.\n */\nCartesian4.maximumComponent = function (cartesian) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  return Math.max(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\n};\n\n/**\n * Computes the value of the minimum component for the supplied Cartesian.\n *\n * @param {Cartesian4} cartesian The cartesian to use.\n * @returns {Number} The value of the minimum component.\n */\nCartesian4.minimumComponent = function (cartesian) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  return Math.min(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\n};\n\n/**\n * Compares two Cartesians and computes a Cartesian which contains the minimum components of the supplied Cartesians.\n *\n * @param {Cartesian4} first A cartesian to compare.\n * @param {Cartesian4} second A cartesian to compare.\n * @param {Cartesian4} result The object into which to store the result.\n * @returns {Cartesian4} A cartesian with the minimum components.\n */\nCartesian4.minimumByComponent = function (first, second, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"first\", first);\n  Check.typeOf.object(\"second\", second);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = Math.min(first.x, second.x);\n  result.y = Math.min(first.y, second.y);\n  result.z = Math.min(first.z, second.z);\n  result.w = Math.min(first.w, second.w);\n\n  return result;\n};\n\n/**\n * Compares two Cartesians and computes a Cartesian which contains the maximum components of the supplied Cartesians.\n *\n * @param {Cartesian4} first A cartesian to compare.\n * @param {Cartesian4} second A cartesian to compare.\n * @param {Cartesian4} result The object into which to store the result.\n * @returns {Cartesian4} A cartesian with the maximum components.\n */\nCartesian4.maximumByComponent = function (first, second, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"first\", first);\n  Check.typeOf.object(\"second\", second);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = Math.max(first.x, second.x);\n  result.y = Math.max(first.y, second.y);\n  result.z = Math.max(first.z, second.z);\n  result.w = Math.max(first.w, second.w);\n\n  return result;\n};\n\n/**\n * Constrain a value to lie between two values.\n *\n * @param {Cartesian4} value The value to clamp.\n * @param {Cartesian4} min The minimum bound.\n * @param {Cartesian4} max The maximum bound.\n * @param {Cartesian4} result The object into which to store the result.\n * @returns {Cartesian4} The clamped value such that min <= result <= max.\n */\nCartesian4.clamp = function (value, min, max, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.typeOf.object(\"min\", min);\n  Check.typeOf.object(\"max\", max);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const x = CesiumMath.clamp(value.x, min.x, max.x);\n  const y = CesiumMath.clamp(value.y, min.y, max.y);\n  const z = CesiumMath.clamp(value.z, min.z, max.z);\n  const w = CesiumMath.clamp(value.w, min.w, max.w);\n\n  result.x = x;\n  result.y = y;\n  result.z = z;\n  result.w = w;\n\n  return result;\n};\n\n/**\n * Computes the provided Cartesian's squared magnitude.\n *\n * @param {Cartesian4} cartesian The Cartesian instance whose squared magnitude is to be computed.\n * @returns {Number} The squared magnitude.\n */\nCartesian4.magnitudeSquared = function (cartesian) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  return (\n    cartesian.x * cartesian.x +\n    cartesian.y * cartesian.y +\n    cartesian.z * cartesian.z +\n    cartesian.w * cartesian.w\n  );\n};\n\n/**\n * Computes the Cartesian's magnitude (length).\n *\n * @param {Cartesian4} cartesian The Cartesian instance whose magnitude is to be computed.\n * @returns {Number} The magnitude.\n */\nCartesian4.magnitude = function (cartesian) {\n  return Math.sqrt(Cartesian4.magnitudeSquared(cartesian));\n};\n\nconst distanceScratch = new Cartesian4();\n\n/**\n * Computes the 4-space distance between two points.\n *\n * @param {Cartesian4} left The first point to compute the distance from.\n * @param {Cartesian4} right The second point to compute the distance to.\n * @returns {Number} The distance between two points.\n *\n * @example\n * // Returns 1.0\n * const d = Cesium.Cartesian4.distance(\n *   new Cesium.Cartesian4(1.0, 0.0, 0.0, 0.0),\n *   new Cesium.Cartesian4(2.0, 0.0, 0.0, 0.0));\n */\nCartesian4.distance = function (left, right) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  //>>includeEnd('debug');\n\n  Cartesian4.subtract(left, right, distanceScratch);\n  return Cartesian4.magnitude(distanceScratch);\n};\n\n/**\n * Computes the squared distance between two points.  Comparing squared distances\n * using this function is more efficient than comparing distances using {@link Cartesian4#distance}.\n *\n * @param {Cartesian4} left The first point to compute the distance from.\n * @param {Cartesian4} right The second point to compute the distance to.\n * @returns {Number} The distance between two points.\n *\n * @example\n * // Returns 4.0, not 2.0\n * const d = Cesium.Cartesian4.distance(\n *   new Cesium.Cartesian4(1.0, 0.0, 0.0, 0.0),\n *   new Cesium.Cartesian4(3.0, 0.0, 0.0, 0.0));\n */\nCartesian4.distanceSquared = function (left, right) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  //>>includeEnd('debug');\n\n  Cartesian4.subtract(left, right, distanceScratch);\n  return Cartesian4.magnitudeSquared(distanceScratch);\n};\n\n/**\n * Computes the normalized form of the supplied Cartesian.\n *\n * @param {Cartesian4} cartesian The Cartesian to be normalized.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.normalize = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const magnitude = Cartesian4.magnitude(cartesian);\n\n  result.x = cartesian.x / magnitude;\n  result.y = cartesian.y / magnitude;\n  result.z = cartesian.z / magnitude;\n  result.w = cartesian.w / magnitude;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    isNaN(result.x) ||\n    isNaN(result.y) ||\n    isNaN(result.z) ||\n    isNaN(result.w)\n  ) {\n    throw new DeveloperError(\"normalized result is not a number\");\n  }\n  //>>includeEnd('debug');\n\n  return result;\n};\n\n/**\n * Computes the dot (scalar) product of two Cartesians.\n *\n * @param {Cartesian4} left The first Cartesian.\n * @param {Cartesian4} right The second Cartesian.\n * @returns {Number} The dot product.\n */\nCartesian4.dot = function (left, right) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  //>>includeEnd('debug');\n\n  return (\n    left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w\n  );\n};\n\n/**\n * Computes the componentwise product of two Cartesians.\n *\n * @param {Cartesian4} left The first Cartesian.\n * @param {Cartesian4} right The second Cartesian.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.multiplyComponents = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = left.x * right.x;\n  result.y = left.y * right.y;\n  result.z = left.z * right.z;\n  result.w = left.w * right.w;\n  return result;\n};\n\n/**\n * Computes the componentwise quotient of two Cartesians.\n *\n * @param {Cartesian4} left The first Cartesian.\n * @param {Cartesian4} right The second Cartesian.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.divideComponents = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = left.x / right.x;\n  result.y = left.y / right.y;\n  result.z = left.z / right.z;\n  result.w = left.w / right.w;\n  return result;\n};\n\n/**\n * Computes the componentwise sum of two Cartesians.\n *\n * @param {Cartesian4} left The first Cartesian.\n * @param {Cartesian4} right The second Cartesian.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.add = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = left.x + right.x;\n  result.y = left.y + right.y;\n  result.z = left.z + right.z;\n  result.w = left.w + right.w;\n  return result;\n};\n\n/**\n * Computes the componentwise difference of two Cartesians.\n *\n * @param {Cartesian4} left The first Cartesian.\n * @param {Cartesian4} right The second Cartesian.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.subtract = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = left.x - right.x;\n  result.y = left.y - right.y;\n  result.z = left.z - right.z;\n  result.w = left.w - right.w;\n  return result;\n};\n\n/**\n * Multiplies the provided Cartesian componentwise by the provided scalar.\n *\n * @param {Cartesian4} cartesian The Cartesian to be scaled.\n * @param {Number} scalar The scalar to multiply with.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.multiplyByScalar = function (cartesian, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = cartesian.x * scalar;\n  result.y = cartesian.y * scalar;\n  result.z = cartesian.z * scalar;\n  result.w = cartesian.w * scalar;\n  return result;\n};\n\n/**\n * Divides the provided Cartesian componentwise by the provided scalar.\n *\n * @param {Cartesian4} cartesian The Cartesian to be divided.\n * @param {Number} scalar The scalar to divide by.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.divideByScalar = function (cartesian, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = cartesian.x / scalar;\n  result.y = cartesian.y / scalar;\n  result.z = cartesian.z / scalar;\n  result.w = cartesian.w / scalar;\n  return result;\n};\n\n/**\n * Negates the provided Cartesian.\n *\n * @param {Cartesian4} cartesian The Cartesian to be negated.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.negate = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = -cartesian.x;\n  result.y = -cartesian.y;\n  result.z = -cartesian.z;\n  result.w = -cartesian.w;\n  return result;\n};\n\n/**\n * Computes the absolute value of the provided Cartesian.\n *\n * @param {Cartesian4} cartesian The Cartesian whose absolute value is to be computed.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.abs = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.x = Math.abs(cartesian.x);\n  result.y = Math.abs(cartesian.y);\n  result.z = Math.abs(cartesian.z);\n  result.w = Math.abs(cartesian.w);\n  return result;\n};\n\nconst lerpScratch = new Cartesian4();\n/**\n * Computes the linear interpolation or extrapolation at t using the provided cartesians.\n *\n * @param {Cartesian4} start The value corresponding to t at 0.0.\n * @param {Cartesian4}end The value corresponding to t at 1.0.\n * @param {Number} t The point along t at which to interpolate.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter.\n */\nCartesian4.lerp = function (start, end, t, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"start\", start);\n  Check.typeOf.object(\"end\", end);\n  Check.typeOf.number(\"t\", t);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  Cartesian4.multiplyByScalar(end, t, lerpScratch);\n  result = Cartesian4.multiplyByScalar(start, 1.0 - t, result);\n  return Cartesian4.add(lerpScratch, result, result);\n};\n\nconst mostOrthogonalAxisScratch = new Cartesian4();\n/**\n * Returns the axis that is most orthogonal to the provided Cartesian.\n *\n * @param {Cartesian4} cartesian The Cartesian on which to find the most orthogonal axis.\n * @param {Cartesian4} result The object onto which to store the result.\n * @returns {Cartesian4} The most orthogonal axis.\n */\nCartesian4.mostOrthogonalAxis = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  const f = Cartesian4.normalize(cartesian, mostOrthogonalAxisScratch);\n  Cartesian4.abs(f, f);\n\n  if (f.x <= f.y) {\n    if (f.x <= f.z) {\n      if (f.x <= f.w) {\n        result = Cartesian4.clone(Cartesian4.UNIT_X, result);\n      } else {\n        result = Cartesian4.clone(Cartesian4.UNIT_W, result);\n      }\n    } else if (f.z <= f.w) {\n      result = Cartesian4.clone(Cartesian4.UNIT_Z, result);\n    } else {\n      result = Cartesian4.clone(Cartesian4.UNIT_W, result);\n    }\n  } else if (f.y <= f.z) {\n    if (f.y <= f.w) {\n      result = Cartesian4.clone(Cartesian4.UNIT_Y, result);\n    } else {\n      result = Cartesian4.clone(Cartesian4.UNIT_W, result);\n    }\n  } else if (f.z <= f.w) {\n    result = Cartesian4.clone(Cartesian4.UNIT_Z, result);\n  } else {\n    result = Cartesian4.clone(Cartesian4.UNIT_W, result);\n  }\n\n  return result;\n};\n\n/**\n * Compares the provided Cartesians componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Cartesian4} [left] The first Cartesian.\n * @param {Cartesian4} [right] The second Cartesian.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCartesian4.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      left.x === right.x &&\n      left.y === right.y &&\n      left.z === right.z &&\n      left.w === right.w)\n  );\n};\n\n/**\n * @private\n */\nCartesian4.equalsArray = function (cartesian, array, offset) {\n  return (\n    cartesian.x === array[offset] &&\n    cartesian.y === array[offset + 1] &&\n    cartesian.z === array[offset + 2] &&\n    cartesian.w === array[offset + 3]\n  );\n};\n\n/**\n * Compares the provided Cartesians componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {Cartesian4} [left] The first Cartesian.\n * @param {Cartesian4} [right] The second Cartesian.\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n */\nCartesian4.equalsEpsilon = function (\n  left,\n  right,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      CesiumMath.equalsEpsilon(\n        left.x,\n        right.x,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      CesiumMath.equalsEpsilon(\n        left.y,\n        right.y,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      CesiumMath.equalsEpsilon(\n        left.z,\n        right.z,\n        relativeEpsilon,\n        absoluteEpsilon\n      ) &&\n      CesiumMath.equalsEpsilon(\n        left.w,\n        right.w,\n        relativeEpsilon,\n        absoluteEpsilon\n      ))\n  );\n};\n\n/**\n * An immutable Cartesian4 instance initialized to (0.0, 0.0, 0.0, 0.0).\n *\n * @type {Cartesian4}\n * @constant\n */\nCartesian4.ZERO = Object.freeze(new Cartesian4(0.0, 0.0, 0.0, 0.0));\n\n/**\n * An immutable Cartesian4 instance initialized to (1.0, 1.0, 1.0, 1.0).\n *\n * @type {Cartesian4}\n * @constant\n */\nCartesian4.ONE = Object.freeze(new Cartesian4(1.0, 1.0, 1.0, 1.0));\n\n/**\n * An immutable Cartesian4 instance initialized to (1.0, 0.0, 0.0, 0.0).\n *\n * @type {Cartesian4}\n * @constant\n */\nCartesian4.UNIT_X = Object.freeze(new Cartesian4(1.0, 0.0, 0.0, 0.0));\n\n/**\n * An immutable Cartesian4 instance initialized to (0.0, 1.0, 0.0, 0.0).\n *\n * @type {Cartesian4}\n * @constant\n */\nCartesian4.UNIT_Y = Object.freeze(new Cartesian4(0.0, 1.0, 0.0, 0.0));\n\n/**\n * An immutable Cartesian4 instance initialized to (0.0, 0.0, 1.0, 0.0).\n *\n * @type {Cartesian4}\n * @constant\n */\nCartesian4.UNIT_Z = Object.freeze(new Cartesian4(0.0, 0.0, 1.0, 0.0));\n\n/**\n * An immutable Cartesian4 instance initialized to (0.0, 0.0, 0.0, 1.0).\n *\n * @type {Cartesian4}\n * @constant\n */\nCartesian4.UNIT_W = Object.freeze(new Cartesian4(0.0, 0.0, 0.0, 1.0));\n\n/**\n * Duplicates this Cartesian4 instance.\n *\n * @param {Cartesian4} [result] The object onto which to store the result.\n * @returns {Cartesian4} The modified result parameter or a new Cartesian4 instance if one was not provided.\n */\nCartesian4.prototype.clone = function (result) {\n  return Cartesian4.clone(this, result);\n};\n\n/**\n * Compares this Cartesian against the provided Cartesian componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Cartesian4} [right] The right hand side Cartesian.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nCartesian4.prototype.equals = function (right) {\n  return Cartesian4.equals(this, right);\n};\n\n/**\n * Compares this Cartesian against the provided Cartesian componentwise and returns\n * <code>true</code> if they pass an absolute or relative tolerance test,\n * <code>false</code> otherwise.\n *\n * @param {Cartesian4} [right] The right hand side Cartesian.\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\n * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\n */\nCartesian4.prototype.equalsEpsilon = function (\n  right,\n  relativeEpsilon,\n  absoluteEpsilon\n) {\n  return Cartesian4.equalsEpsilon(\n    this,\n    right,\n    relativeEpsilon,\n    absoluteEpsilon\n  );\n};\n\n/**\n * Creates a string representing this Cartesian in the format '(x, y, z, w)'.\n *\n * @returns {String} A string representing the provided Cartesian in the format '(x, y, z, w)'.\n */\nCartesian4.prototype.toString = function () {\n  return `(${this.x}, ${this.y}, ${this.z}, ${this.w})`;\n};\n\n// scratchU8Array and scratchF32Array are views into the same buffer\nconst scratchF32Array = new Float32Array(1);\nconst scratchU8Array = new Uint8Array(scratchF32Array.buffer);\n\nconst testU32 = new Uint32Array([0x11223344]);\nconst testU8 = new Uint8Array(testU32.buffer);\nconst littleEndian = testU8[0] === 0x44;\n\n/**\n * Packs an arbitrary floating point value to 4 values representable using uint8.\n *\n * @param {Number} value A floating point number.\n * @param {Cartesian4} [result] The Cartesian4 that will contain the packed float.\n * @returns {Cartesian4} A Cartesian4 representing the float packed to values in x, y, z, and w.\n */\nCartesian4.packFloat = function (value, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"value\", value);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Cartesian4();\n  }\n\n  // scratchU8Array and scratchF32Array are views into the same buffer\n  scratchF32Array[0] = value;\n\n  if (littleEndian) {\n    result.x = scratchU8Array[0];\n    result.y = scratchU8Array[1];\n    result.z = scratchU8Array[2];\n    result.w = scratchU8Array[3];\n  } else {\n    // convert from big-endian to little-endian\n    result.x = scratchU8Array[3];\n    result.y = scratchU8Array[2];\n    result.z = scratchU8Array[1];\n    result.w = scratchU8Array[0];\n  }\n  return result;\n};\n\n/**\n * Unpacks a float packed using Cartesian4.packFloat.\n *\n * @param {Cartesian4} packedFloat A Cartesian4 containing a float packed to 4 values representable using uint8.\n * @returns {Number} The unpacked float.\n * @private\n */\nCartesian4.unpackFloat = function (packedFloat) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"packedFloat\", packedFloat);\n  //>>includeEnd('debug');\n\n  // scratchU8Array and scratchF32Array are views into the same buffer\n  if (littleEndian) {\n    scratchU8Array[0] = packedFloat.x;\n    scratchU8Array[1] = packedFloat.y;\n    scratchU8Array[2] = packedFloat.z;\n    scratchU8Array[3] = packedFloat.w;\n  } else {\n    // convert from little-endian to big-endian\n    scratchU8Array[0] = packedFloat.w;\n    scratchU8Array[1] = packedFloat.z;\n    scratchU8Array[2] = packedFloat.y;\n    scratchU8Array[3] = packedFloat.x;\n  }\n  return scratchF32Array[0];\n};\nexport default Cartesian4;\n","import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport CesiumMath from \"./Math.js\";\nimport scaleToGeodeticSurface from \"./scaleToGeodeticSurface.js\";\n\n/**\n * A position defined by longitude, latitude, and height.\n * @alias Cartographic\n * @constructor\n *\n * @param {Number} [longitude=0.0] The longitude, in radians.\n * @param {Number} [latitude=0.0] The latitude, in radians.\n * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\n *\n * @see Ellipsoid\n */\nfunction Cartographic(longitude, latitude, height) {\n  /**\n   * The longitude, in radians.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.longitude = defaultValue(longitude, 0.0);\n\n  /**\n   * The latitude, in radians.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.latitude = defaultValue(latitude, 0.0);\n\n  /**\n   * The height, in meters, above the ellipsoid.\n   * @type {Number}\n   * @default 0.0\n   */\n  this.height = defaultValue(height, 0.0);\n}\n\n/**\n * Creates a new Cartographic instance from longitude and latitude\n * specified in radians.\n *\n * @param {Number} longitude The longitude, in radians.\n * @param {Number} latitude The latitude, in radians.\n * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\n * @param {Cartographic} [result] The object onto which to store the result.\n * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided.\n */\nCartographic.fromRadians = function (longitude, latitude, height, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"longitude\", longitude);\n  Check.typeOf.number(\"latitude\", latitude);\n  //>>includeEnd('debug');\n\n  height = defaultValue(height, 0.0);\n\n  if (!defined(result)) {\n    return new Cartographic(longitude, latitude, height);\n  }\n\n  result.longitude = longitude;\n  result.latitude = latitude;\n  result.height = height;\n  return result;\n};\n\n/**\n * Creates a new Cartographic instance from longitude and latitude\n * specified in degrees.  The values in the resulting object will\n * be in radians.\n *\n * @param {Number} longitude The longitude, in degrees.\n * @param {Number} latitude The latitude, in degrees.\n * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\n * @param {Cartographic} [result] The object onto which to store the result.\n * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided.\n */\nCartographic.fromDegrees = function (longitude, latitude, height, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"longitude\", longitude);\n  Check.typeOf.number(\"latitude\", latitude);\n  //>>includeEnd('debug');\n  longitude = CesiumMath.toRadians(longitude);\n  latitude = CesiumMath.toRadians(latitude);\n\n  return Cartographic.fromRadians(longitude, latitude, height, result);\n};\n\nconst cartesianToCartographicN = new Cartesian3();\nconst cartesianToCartographicP = new Cartesian3();\nconst cartesianToCartographicH = new Cartesian3();\nconst wgs84OneOverRadii = new Cartesian3(\n  1.0 / 6378137.0,\n  1.0 / 6378137.0,\n  1.0 / 6356752.3142451793\n);\nconst wgs84OneOverRadiiSquared = new Cartesian3(\n  1.0 / (6378137.0 * 6378137.0),\n  1.0 / (6378137.0 * 6378137.0),\n  1.0 / (6356752.3142451793 * 6356752.3142451793)\n);\nconst wgs84CenterToleranceSquared = CesiumMath.EPSILON1;\n\n/**\n * Creates a new Cartographic instance from a Cartesian position. The values in the\n * resulting object will be in radians.\n *\n * @param {Cartesian3} cartesian The Cartesian position to convert to cartographic representation.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\n * @param {Cartographic} [result] The object onto which to store the result.\n * @returns {Cartographic} The modified result parameter, new Cartographic instance if none was provided, or undefined if the cartesian is at the center of the ellipsoid.\n */\nCartographic.fromCartesian = function (cartesian, ellipsoid, result) {\n  const oneOverRadii = defined(ellipsoid)\n    ? ellipsoid.oneOverRadii\n    : wgs84OneOverRadii;\n  const oneOverRadiiSquared = defined(ellipsoid)\n    ? ellipsoid.oneOverRadiiSquared\n    : wgs84OneOverRadiiSquared;\n  const centerToleranceSquared = defined(ellipsoid)\n    ? ellipsoid._centerToleranceSquared\n    : wgs84CenterToleranceSquared;\n\n  //`cartesian is required.` is thrown from scaleToGeodeticSurface\n  const p = scaleToGeodeticSurface(\n    cartesian,\n    oneOverRadii,\n    oneOverRadiiSquared,\n    centerToleranceSquared,\n    cartesianToCartographicP\n  );\n\n  if (!defined(p)) {\n    return undefined;\n  }\n\n  let n = Cartesian3.multiplyComponents(\n    p,\n    oneOverRadiiSquared,\n    cartesianToCartographicN\n  );\n  n = Cartesian3.normalize(n, n);\n\n  const h = Cartesian3.subtract(cartesian, p, cartesianToCartographicH);\n\n  const longitude = Math.atan2(n.y, n.x);\n  const latitude = Math.asin(n.z);\n  const height =\n    CesiumMath.sign(Cartesian3.dot(h, cartesian)) * Cartesian3.magnitude(h);\n\n  if (!defined(result)) {\n    return new Cartographic(longitude, latitude, height);\n  }\n  result.longitude = longitude;\n  result.latitude = latitude;\n  result.height = height;\n  return result;\n};\n\n/**\n * Creates a new Cartesian3 instance from a Cartographic input. The values in the inputted\n * object should be in radians.\n *\n * @param {Cartographic} cartographic Input to be converted into a Cartesian3 output.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The position\n */\nCartographic.toCartesian = function (cartographic, ellipsoid, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"cartographic\", cartographic);\n  //>>includeEnd('debug');\n\n  return Cartesian3.fromRadians(\n    cartographic.longitude,\n    cartographic.latitude,\n    cartographic.height,\n    ellipsoid,\n    result\n  );\n};\n\n/**\n * Duplicates a Cartographic instance.\n *\n * @param {Cartographic} cartographic The cartographic to duplicate.\n * @param {Cartographic} [result] The object onto which to store the result.\n * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided. (Returns undefined if cartographic is undefined)\n */\nCartographic.clone = function (cartographic, result) {\n  if (!defined(cartographic)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    return new Cartographic(\n      cartographic.longitude,\n      cartographic.latitude,\n      cartographic.height\n    );\n  }\n  result.longitude = cartographic.longitude;\n  result.latitude = cartographic.latitude;\n  result.height = cartographic.height;\n  return result;\n};\n\n/**\n * Compares the provided cartographics componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Cartographic} [left] The first cartographic.\n * @param {Cartographic} [right] The second cartographic.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCartographic.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      left.longitude === right.longitude &&\n      left.latitude === right.latitude &&\n      left.height === right.height)\n  );\n};\n\n/**\n * Compares the provided cartographics componentwise and returns\n * <code>true</code> if they are within the provided epsilon,\n * <code>false</code> otherwise.\n *\n * @param {Cartographic} [left] The first cartographic.\n * @param {Cartographic} [right] The second cartographic.\n * @param {Number} [epsilon=0] The epsilon to use for equality testing.\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n */\nCartographic.equalsEpsilon = function (left, right, epsilon) {\n  epsilon = defaultValue(epsilon, 0);\n\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      Math.abs(left.longitude - right.longitude) <= epsilon &&\n      Math.abs(left.latitude - right.latitude) <= epsilon &&\n      Math.abs(left.height - right.height) <= epsilon)\n  );\n};\n\n/**\n * An immutable Cartographic instance initialized to (0.0, 0.0, 0.0).\n *\n * @type {Cartographic}\n * @constant\n */\nCartographic.ZERO = Object.freeze(new Cartographic(0.0, 0.0, 0.0));\n\n/**\n * Duplicates this instance.\n *\n * @param {Cartographic} [result] The object onto which to store the result.\n * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided.\n */\nCartographic.prototype.clone = function (result) {\n  return Cartographic.clone(this, result);\n};\n\n/**\n * Compares the provided against this cartographic componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Cartographic} [right] The second cartographic.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nCartographic.prototype.equals = function (right) {\n  return Cartographic.equals(this, right);\n};\n\n/**\n * Compares the provided against this cartographic componentwise and returns\n * <code>true</code> if they are within the provided epsilon,\n * <code>false</code> otherwise.\n *\n * @param {Cartographic} [right] The second cartographic.\n * @param {Number} [epsilon=0] The epsilon to use for equality testing.\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\n */\nCartographic.prototype.equalsEpsilon = function (right, epsilon) {\n  return Cartographic.equalsEpsilon(this, right, epsilon);\n};\n\n/**\n * Creates a string representing this cartographic in the format '(longitude, latitude, height)'.\n *\n * @returns {String} A string representing the provided cartographic in the format '(longitude, latitude, height)'.\n */\nCartographic.prototype.toString = function () {\n  return `(${this.longitude}, ${this.latitude}, ${this.height})`;\n};\nexport default Cartographic;\n","import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\n\n/**\n * Geocodes queries containing longitude and latitude coordinates and an optional height.\n * Query format: `longitude latitude (height)` with longitude/latitude in degrees and height in meters.\n *\n * @alias CartographicGeocoderService\n * @constructor\n */\nfunction CartographicGeocoderService() {}\n\n/**\n * @function\n *\n * @param {String} query The query to be sent to the geocoder service\n * @returns {Promise<GeocoderService.Result[]>}\n */\nCartographicGeocoderService.prototype.geocode = function (query) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"query\", query);\n  //>>includeEnd('debug');\n\n  const splitQuery = query.match(/[^\\s,\\n]+/g);\n  if (splitQuery.length === 2 || splitQuery.length === 3) {\n    let longitude = +splitQuery[0];\n    let latitude = +splitQuery[1];\n    const height = splitQuery.length === 3 ? +splitQuery[2] : 300.0;\n\n    if (isNaN(longitude) && isNaN(latitude)) {\n      const coordTest = /^(\\d+.?\\d*)([nsew])/i;\n      for (let i = 0; i < splitQuery.length; ++i) {\n        const splitCoord = splitQuery[i].match(coordTest);\n        if (coordTest.test(splitQuery[i]) && splitCoord.length === 3) {\n          if (/^[ns]/i.test(splitCoord[2])) {\n            latitude = /^[n]/i.test(splitCoord[2])\n              ? +splitCoord[1]\n              : -splitCoord[1];\n          } else if (/^[ew]/i.test(splitCoord[2])) {\n            longitude = /^[e]/i.test(splitCoord[2])\n              ? +splitCoord[1]\n              : -splitCoord[1];\n          }\n        }\n      }\n    }\n\n    if (!isNaN(longitude) && !isNaN(latitude) && !isNaN(height)) {\n      const result = {\n        displayName: query,\n        destination: Cartesian3.fromDegrees(longitude, latitude, height),\n      };\n      return Promise.resolve([result]);\n    }\n  }\n  return Promise.resolve([]);\n};\nexport default CartographicGeocoderService;\n","import AttributeCompression from \"./AttributeCompression.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Credit from \"./Credit.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defer from \"./defer.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Event from \"./Event.js\";\nimport GeographicTilingScheme from \"./GeographicTilingScheme.js\";\nimport WebMercatorTilingScheme from \"./WebMercatorTilingScheme.js\";\nimport getJsonFromTypedArray from \"./getJsonFromTypedArray.js\";\nimport HeightmapTerrainData from \"./HeightmapTerrainData.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport OrientedBoundingBox from \"./OrientedBoundingBox.js\";\nimport QuantizedMeshTerrainData from \"./QuantizedMeshTerrainData.js\";\nimport Request from \"./Request.js\";\nimport RequestType from \"./RequestType.js\";\nimport Resource from \"./Resource.js\";\nimport RuntimeError from \"./RuntimeError.js\";\nimport TerrainProvider from \"./TerrainProvider.js\";\nimport TileAvailability from \"./TileAvailability.js\";\nimport TileProviderError from \"./TileProviderError.js\";\n\nfunction LayerInformation(layer) {\n  this.resource = layer.resource;\n  this.version = layer.version;\n  this.isHeightmap = layer.isHeightmap;\n  this.tileUrlTemplates = layer.tileUrlTemplates;\n  this.availability = layer.availability;\n  this.hasVertexNormals = layer.hasVertexNormals;\n  this.hasWaterMask = layer.hasWaterMask;\n  this.hasMetadata = layer.hasMetadata;\n  this.availabilityLevels = layer.availabilityLevels;\n  this.availabilityTilesLoaded = layer.availabilityTilesLoaded;\n  this.littleEndianExtensionSize = layer.littleEndianExtensionSize;\n  this.availabilityPromiseCache = {};\n}\n\n/**\n * A {@link TerrainProvider} that accesses terrain data in a Cesium terrain format.\n *\n * @alias CesiumTerrainProvider\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Resource|String|Promise<Resource>|Promise<String>} options.url The URL of the Cesium terrain server.\n * @param {Boolean} [options.requestVertexNormals=false] Flag that indicates if the client should request additional lighting information from the server, in the form of per vertex normals if available.\n * @param {Boolean} [options.requestWaterMask=false] Flag that indicates if the client should request per tile water masks from the server,  if available.\n * @param {Boolean} [options.requestMetadata=true] Flag that indicates if the client should request per tile metadata from the server, if available.\n * @param {Ellipsoid} [options.ellipsoid] The ellipsoid.  If not specified, the WGS84 ellipsoid is used.\n * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n *\n *\n * @example\n * // Create Arctic DEM terrain with normals.\n * const viewer = new Cesium.Viewer('cesiumContainer', {\n *     terrainProvider : new Cesium.CesiumTerrainProvider({\n *         url : Cesium.IonResource.fromAssetId(3956),\n *         requestVertexNormals : true\n *     })\n * });\n *\n * @see createWorldTerrain\n * @see TerrainProvider\n */\nfunction CesiumTerrainProvider(options) {\n  //>>includeStart('debug', pragmas.debug)\n  if (!defined(options) || !defined(options.url)) {\n    throw new DeveloperError(\"options.url is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._heightmapWidth = 65;\n  this._heightmapStructure = undefined;\n  this._hasWaterMask = false;\n  this._hasVertexNormals = false;\n  this._ellipsoid = options.ellipsoid;\n\n  /**\n   * Boolean flag that indicates if the client should request vertex normals from the server.\n   * @type {Boolean}\n   * @default false\n   * @private\n   */\n  this._requestVertexNormals = defaultValue(\n    options.requestVertexNormals,\n    false\n  );\n\n  /**\n   * Boolean flag that indicates if the client should request tile watermasks from the server.\n   * @type {Boolean}\n   * @default false\n   * @private\n   */\n  this._requestWaterMask = defaultValue(options.requestWaterMask, false);\n\n  /**\n   * Boolean flag that indicates if the client should request tile metadata from the server.\n   * @type {Boolean}\n   * @default true\n   * @private\n   */\n  this._requestMetadata = defaultValue(options.requestMetadata, true);\n\n  this._errorEvent = new Event();\n\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  this._credit = credit;\n\n  this._availability = undefined;\n\n  const deferred = defer();\n  this._ready = false;\n  this._readyPromise = deferred;\n  this._tileCredits = undefined;\n\n  const that = this;\n  let lastResource;\n  let layerJsonResource;\n  let metadataError;\n\n  const layers = (this._layers = []);\n  let attribution = \"\";\n  const overallAvailability = [];\n  let overallMaxZoom = 0;\n  Promise.resolve(options.url)\n    .then(function (url) {\n      const resource = Resource.createIfNeeded(url);\n      resource.appendForwardSlash();\n      lastResource = resource;\n      layerJsonResource = lastResource.getDerivedResource({\n        url: \"layer.json\",\n      });\n\n      // ion resources have a credits property we can use for additional attribution.\n      that._tileCredits = resource.credits;\n\n      requestLayerJson();\n    })\n    .catch(function (e) {\n      deferred.reject(e);\n    });\n\n  function parseMetadataSuccess(data) {\n    let message;\n\n    if (!data.format) {\n      message = \"The tile format is not specified in the layer.json file.\";\n      metadataError = TileProviderError.handleError(\n        metadataError,\n        that,\n        that._errorEvent,\n        message,\n        undefined,\n        undefined,\n        undefined,\n        requestLayerJson\n      );\n      return;\n    }\n\n    if (!data.tiles || data.tiles.length === 0) {\n      message = \"The layer.json file does not specify any tile URL templates.\";\n      metadataError = TileProviderError.handleError(\n        metadataError,\n        that,\n        that._errorEvent,\n        message,\n        undefined,\n        undefined,\n        undefined,\n        requestLayerJson\n      );\n      return;\n    }\n\n    let hasVertexNormals = false;\n    let hasWaterMask = false;\n    let hasMetadata = false;\n    let littleEndianExtensionSize = true;\n    let isHeightmap = false;\n    if (data.format === \"heightmap-1.0\") {\n      isHeightmap = true;\n      if (!defined(that._heightmapStructure)) {\n        that._heightmapStructure = {\n          heightScale: 1.0 / 5.0,\n          heightOffset: -1000.0,\n          elementsPerHeight: 1,\n          stride: 1,\n          elementMultiplier: 256.0,\n          isBigEndian: false,\n          lowestEncodedHeight: 0,\n          highestEncodedHeight: 256 * 256 - 1,\n        };\n      }\n      hasWaterMask = true;\n      that._requestWaterMask = true;\n    } else if (data.format.indexOf(\"quantized-mesh-1.\") !== 0) {\n      message = `The tile format \"${data.format}\" is invalid or not supported.`;\n      metadataError = TileProviderError.handleError(\n        metadataError,\n        that,\n        that._errorEvent,\n        message,\n        undefined,\n        undefined,\n        undefined,\n        requestLayerJson\n      );\n      return;\n    }\n\n    const tileUrlTemplates = data.tiles;\n\n    const maxZoom = data.maxzoom;\n    overallMaxZoom = Math.max(overallMaxZoom, maxZoom);\n    // Keeps track of which of the availablity containing tiles have been loaded\n\n    if (!data.projection || data.projection === \"EPSG:4326\") {\n      that._tilingScheme = new GeographicTilingScheme({\n        numberOfLevelZeroTilesX: 2,\n        numberOfLevelZeroTilesY: 1,\n        ellipsoid: that._ellipsoid,\n      });\n    } else if (data.projection === \"EPSG:3857\") {\n      that._tilingScheme = new WebMercatorTilingScheme({\n        numberOfLevelZeroTilesX: 1,\n        numberOfLevelZeroTilesY: 1,\n        ellipsoid: that._ellipsoid,\n      });\n    } else {\n      message = `The projection \"${data.projection}\" is invalid or not supported.`;\n      metadataError = TileProviderError.handleError(\n        metadataError,\n        that,\n        that._errorEvent,\n        message,\n        undefined,\n        undefined,\n        undefined,\n        requestLayerJson\n      );\n      return;\n    }\n\n    that._levelZeroMaximumGeometricError = TerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap(\n      that._tilingScheme.ellipsoid,\n      that._heightmapWidth,\n      that._tilingScheme.getNumberOfXTilesAtLevel(0)\n    );\n    if (!data.scheme || data.scheme === \"tms\" || data.scheme === \"slippyMap\") {\n      that._scheme = data.scheme;\n    } else {\n      message = `The scheme \"${data.scheme}\" is invalid or not supported.`;\n      metadataError = TileProviderError.handleError(\n        metadataError,\n        that,\n        that._errorEvent,\n        message,\n        undefined,\n        undefined,\n        undefined,\n        requestLayerJson\n      );\n      return;\n    }\n\n    let availabilityTilesLoaded;\n\n    // The vertex normals defined in the 'octvertexnormals' extension is identical to the original\n    // contents of the original 'vertexnormals' extension.  'vertexnormals' extension is now\n    // deprecated, as the extensionLength for this extension was incorrectly using big endian.\n    // We maintain backwards compatibility with the legacy 'vertexnormal' implementation\n    // by setting the _littleEndianExtensionSize to false. Always prefer 'octvertexnormals'\n    // over 'vertexnormals' if both extensions are supported by the server.\n    if (\n      defined(data.extensions) &&\n      data.extensions.indexOf(\"octvertexnormals\") !== -1\n    ) {\n      hasVertexNormals = true;\n    } else if (\n      defined(data.extensions) &&\n      data.extensions.indexOf(\"vertexnormals\") !== -1\n    ) {\n      hasVertexNormals = true;\n      littleEndianExtensionSize = false;\n    }\n    if (\n      defined(data.extensions) &&\n      data.extensions.indexOf(\"watermask\") !== -1\n    ) {\n      hasWaterMask = true;\n    }\n    if (\n      defined(data.extensions) &&\n      data.extensions.indexOf(\"metadata\") !== -1\n    ) {\n      hasMetadata = true;\n    }\n\n    const availabilityLevels = data.metadataAvailability;\n    const availableTiles = data.available;\n    let availability;\n    if (defined(availableTiles) && !defined(availabilityLevels)) {\n      availability = new TileAvailability(\n        that._tilingScheme,\n        availableTiles.length\n      );\n      for (let level = 0; level < availableTiles.length; ++level) {\n        const rangesAtLevel = availableTiles[level];\n        const yTiles = that._tilingScheme.getNumberOfYTilesAtLevel(level);\n        if (!defined(overallAvailability[level])) {\n          overallAvailability[level] = [];\n        }\n\n        for (\n          let rangeIndex = 0;\n          rangeIndex < rangesAtLevel.length;\n          ++rangeIndex\n        ) {\n          const range = rangesAtLevel[rangeIndex];\n          const yStart = yTiles - range.endY - 1;\n          const yEnd = yTiles - range.startY - 1;\n          overallAvailability[level].push([\n            range.startX,\n            yStart,\n            range.endX,\n            yEnd,\n          ]);\n          availability.addAvailableTileRange(\n            level,\n            range.startX,\n            yStart,\n            range.endX,\n            yEnd\n          );\n        }\n      }\n    } else if (defined(availabilityLevels)) {\n      availabilityTilesLoaded = new TileAvailability(\n        that._tilingScheme,\n        maxZoom\n      );\n      availability = new TileAvailability(that._tilingScheme, maxZoom);\n      overallAvailability[0] = [[0, 0, 1, 0]];\n      availability.addAvailableTileRange(0, 0, 0, 1, 0);\n    }\n\n    that._hasWaterMask = that._hasWaterMask || hasWaterMask;\n    that._hasVertexNormals = that._hasVertexNormals || hasVertexNormals;\n    that._hasMetadata = that._hasMetadata || hasMetadata;\n    if (defined(data.attribution)) {\n      if (attribution.length > 0) {\n        attribution += \" \";\n      }\n      attribution += data.attribution;\n    }\n\n    layers.push(\n      new LayerInformation({\n        resource: lastResource,\n        version: data.version,\n        isHeightmap: isHeightmap,\n        tileUrlTemplates: tileUrlTemplates,\n        availability: availability,\n        hasVertexNormals: hasVertexNormals,\n        hasWaterMask: hasWaterMask,\n        hasMetadata: hasMetadata,\n        availabilityLevels: availabilityLevels,\n        availabilityTilesLoaded: availabilityTilesLoaded,\n        littleEndianExtensionSize: littleEndianExtensionSize,\n      })\n    );\n\n    const parentUrl = data.parentUrl;\n    if (defined(parentUrl)) {\n      if (!defined(availability)) {\n        console.log(\n          \"A layer.json can't have a parentUrl if it does't have an available array.\"\n        );\n        return Promise.resolve();\n      }\n      lastResource = lastResource.getDerivedResource({\n        url: parentUrl,\n      });\n      lastResource.appendForwardSlash(); // Terrain always expects a directory\n      layerJsonResource = lastResource.getDerivedResource({\n        url: \"layer.json\",\n      });\n      const parentMetadata = layerJsonResource.fetchJson();\n      return Promise.resolve(parentMetadata)\n        .then(parseMetadataSuccess)\n        .catch(parseMetadataFailure);\n    }\n\n    return Promise.resolve();\n  }\n\n  function parseMetadataFailure(data) {\n    const message = `An error occurred while accessing ${layerJsonResource.url}.`;\n    metadataError = TileProviderError.handleError(\n      metadataError,\n      that,\n      that._errorEvent,\n      message,\n      undefined,\n      undefined,\n      undefined,\n      requestLayerJson\n    );\n  }\n\n  function metadataSuccess(data) {\n    parseMetadataSuccess(data).then(function () {\n      if (defined(metadataError)) {\n        return;\n      }\n\n      const length = overallAvailability.length;\n      if (length > 0) {\n        const availability = (that._availability = new TileAvailability(\n          that._tilingScheme,\n          overallMaxZoom\n        ));\n        for (let level = 0; level < length; ++level) {\n          const levelRanges = overallAvailability[level];\n          for (let i = 0; i < levelRanges.length; ++i) {\n            const range = levelRanges[i];\n            availability.addAvailableTileRange(\n              level,\n              range[0],\n              range[1],\n              range[2],\n              range[3]\n            );\n          }\n        }\n      }\n\n      if (attribution.length > 0) {\n        const layerJsonCredit = new Credit(attribution);\n\n        if (defined(that._tileCredits)) {\n          that._tileCredits.push(layerJsonCredit);\n        } else {\n          that._tileCredits = [layerJsonCredit];\n        }\n      }\n\n      that._ready = true;\n      that._readyPromise.resolve(true);\n    });\n  }\n\n  function metadataFailure(data) {\n    // If the metadata is not found, assume this is a pre-metadata heightmap tileset.\n    if (defined(data) && data.statusCode === 404) {\n      metadataSuccess({\n        tilejson: \"2.1.0\",\n        format: \"heightmap-1.0\",\n        version: \"1.0.0\",\n        scheme: \"tms\",\n        tiles: [\"{z}/{x}/{y}.terrain?v={version}\"],\n      });\n      return;\n    }\n    parseMetadataFailure(data);\n  }\n\n  function requestLayerJson() {\n    Promise.resolve(layerJsonResource.fetchJson())\n      .then(metadataSuccess)\n      .catch(metadataFailure);\n  }\n}\n\n/**\n * When using the Quantized-Mesh format, a tile may be returned that includes additional extensions, such as PerVertexNormals, watermask, etc.\n * This enumeration defines the unique identifiers for each type of extension data that has been appended to the standard mesh data.\n *\n * @namespace QuantizedMeshExtensionIds\n * @see CesiumTerrainProvider\n * @private\n */\nconst QuantizedMeshExtensionIds = {\n  /**\n   * Oct-Encoded Per-Vertex Normals are included as an extension to the tile mesh\n   *\n   * @type {Number}\n   * @constant\n   * @default 1\n   */\n  OCT_VERTEX_NORMALS: 1,\n  /**\n   * A watermask is included as an extension to the tile mesh\n   *\n   * @type {Number}\n   * @constant\n   * @default 2\n   */\n  WATER_MASK: 2,\n  /**\n   * A json object contain metadata about the tile\n   *\n   * @type {Number}\n   * @constant\n   * @default 4\n   */\n  METADATA: 4,\n};\n\nfunction getRequestHeader(extensionsList) {\n  if (!defined(extensionsList) || extensionsList.length === 0) {\n    return {\n      Accept:\n        \"application/vnd.quantized-mesh,application/octet-stream;q=0.9,*/*;q=0.01\",\n    };\n  }\n  const extensions = extensionsList.join(\"-\");\n  return {\n    Accept: `application/vnd.quantized-mesh;extensions=${extensions},application/octet-stream;q=0.9,*/*;q=0.01`,\n  };\n}\n\nfunction createHeightmapTerrainData(provider, buffer, level, x, y) {\n  const heightBuffer = new Uint16Array(\n    buffer,\n    0,\n    provider._heightmapWidth * provider._heightmapWidth\n  );\n  return new HeightmapTerrainData({\n    buffer: heightBuffer,\n    childTileMask: new Uint8Array(buffer, heightBuffer.byteLength, 1)[0],\n    waterMask: new Uint8Array(\n      buffer,\n      heightBuffer.byteLength + 1,\n      buffer.byteLength - heightBuffer.byteLength - 1\n    ),\n    width: provider._heightmapWidth,\n    height: provider._heightmapWidth,\n    structure: provider._heightmapStructure,\n    credits: provider._tileCredits,\n  });\n}\n\nfunction createQuantizedMeshTerrainData(provider, buffer, level, x, y, layer) {\n  const littleEndianExtensionSize = layer.littleEndianExtensionSize;\n  let pos = 0;\n  const cartesian3Elements = 3;\n  const boundingSphereElements = cartesian3Elements + 1;\n  const cartesian3Length = Float64Array.BYTES_PER_ELEMENT * cartesian3Elements;\n  const boundingSphereLength =\n    Float64Array.BYTES_PER_ELEMENT * boundingSphereElements;\n  const encodedVertexElements = 3;\n  const encodedVertexLength =\n    Uint16Array.BYTES_PER_ELEMENT * encodedVertexElements;\n  const triangleElements = 3;\n  let bytesPerIndex = Uint16Array.BYTES_PER_ELEMENT;\n  let triangleLength = bytesPerIndex * triangleElements;\n\n  const view = new DataView(buffer);\n  const center = new Cartesian3(\n    view.getFloat64(pos, true),\n    view.getFloat64(pos + 8, true),\n    view.getFloat64(pos + 16, true)\n  );\n  pos += cartesian3Length;\n\n  const minimumHeight = view.getFloat32(pos, true);\n  pos += Float32Array.BYTES_PER_ELEMENT;\n  const maximumHeight = view.getFloat32(pos, true);\n  pos += Float32Array.BYTES_PER_ELEMENT;\n\n  const boundingSphere = new BoundingSphere(\n    new Cartesian3(\n      view.getFloat64(pos, true),\n      view.getFloat64(pos + 8, true),\n      view.getFloat64(pos + 16, true)\n    ),\n    view.getFloat64(pos + cartesian3Length, true)\n  );\n  pos += boundingSphereLength;\n\n  const horizonOcclusionPoint = new Cartesian3(\n    view.getFloat64(pos, true),\n    view.getFloat64(pos + 8, true),\n    view.getFloat64(pos + 16, true)\n  );\n  pos += cartesian3Length;\n\n  const vertexCount = view.getUint32(pos, true);\n  pos += Uint32Array.BYTES_PER_ELEMENT;\n  const encodedVertexBuffer = new Uint16Array(buffer, pos, vertexCount * 3);\n  pos += vertexCount * encodedVertexLength;\n\n  if (vertexCount > 64 * 1024) {\n    // More than 64k vertices, so indices are 32-bit.\n    bytesPerIndex = Uint32Array.BYTES_PER_ELEMENT;\n    triangleLength = bytesPerIndex * triangleElements;\n  }\n\n  // Decode the vertex buffer.\n  const uBuffer = encodedVertexBuffer.subarray(0, vertexCount);\n  const vBuffer = encodedVertexBuffer.subarray(vertexCount, 2 * vertexCount);\n  const heightBuffer = encodedVertexBuffer.subarray(\n    vertexCount * 2,\n    3 * vertexCount\n  );\n\n  AttributeCompression.zigZagDeltaDecode(uBuffer, vBuffer, heightBuffer);\n\n  // skip over any additional padding that was added for 2/4 byte alignment\n  if (pos % bytesPerIndex !== 0) {\n    pos += bytesPerIndex - (pos % bytesPerIndex);\n  }\n\n  const triangleCount = view.getUint32(pos, true);\n  pos += Uint32Array.BYTES_PER_ELEMENT;\n  const indices = IndexDatatype.createTypedArrayFromArrayBuffer(\n    vertexCount,\n    buffer,\n    pos,\n    triangleCount * triangleElements\n  );\n  pos += triangleCount * triangleLength;\n\n  // High water mark decoding based on decompressIndices_ in webgl-loader's loader.js.\n  // https://code.google.com/p/webgl-loader/source/browse/trunk/samples/loader.js?r=99#55\n  // Copyright 2012 Google Inc., Apache 2.0 license.\n  let highest = 0;\n  const length = indices.length;\n  for (let i = 0; i < length; ++i) {\n    const code = indices[i];\n    indices[i] = highest - code;\n    if (code === 0) {\n      ++highest;\n    }\n  }\n\n  const westVertexCount = view.getUint32(pos, true);\n  pos += Uint32Array.BYTES_PER_ELEMENT;\n  const westIndices = IndexDatatype.createTypedArrayFromArrayBuffer(\n    vertexCount,\n    buffer,\n    pos,\n    westVertexCount\n  );\n  pos += westVertexCount * bytesPerIndex;\n\n  const southVertexCount = view.getUint32(pos, true);\n  pos += Uint32Array.BYTES_PER_ELEMENT;\n  const southIndices = IndexDatatype.createTypedArrayFromArrayBuffer(\n    vertexCount,\n    buffer,\n    pos,\n    southVertexCount\n  );\n  pos += southVertexCount * bytesPerIndex;\n\n  const eastVertexCount = view.getUint32(pos, true);\n  pos += Uint32Array.BYTES_PER_ELEMENT;\n  const eastIndices = IndexDatatype.createTypedArrayFromArrayBuffer(\n    vertexCount,\n    buffer,\n    pos,\n    eastVertexCount\n  );\n  pos += eastVertexCount * bytesPerIndex;\n\n  const northVertexCount = view.getUint32(pos, true);\n  pos += Uint32Array.BYTES_PER_ELEMENT;\n  const northIndices = IndexDatatype.createTypedArrayFromArrayBuffer(\n    vertexCount,\n    buffer,\n    pos,\n    northVertexCount\n  );\n  pos += northVertexCount * bytesPerIndex;\n\n  let encodedNormalBuffer;\n  let waterMaskBuffer;\n  while (pos < view.byteLength) {\n    const extensionId = view.getUint8(pos, true);\n    pos += Uint8Array.BYTES_PER_ELEMENT;\n    const extensionLength = view.getUint32(pos, littleEndianExtensionSize);\n    pos += Uint32Array.BYTES_PER_ELEMENT;\n\n    if (\n      extensionId === QuantizedMeshExtensionIds.OCT_VERTEX_NORMALS &&\n      provider._requestVertexNormals\n    ) {\n      encodedNormalBuffer = new Uint8Array(buffer, pos, vertexCount * 2);\n    } else if (\n      extensionId === QuantizedMeshExtensionIds.WATER_MASK &&\n      provider._requestWaterMask\n    ) {\n      waterMaskBuffer = new Uint8Array(buffer, pos, extensionLength);\n    } else if (\n      extensionId === QuantizedMeshExtensionIds.METADATA &&\n      provider._requestMetadata\n    ) {\n      const stringLength = view.getUint32(pos, true);\n      if (stringLength > 0) {\n        const metadata = getJsonFromTypedArray(\n          new Uint8Array(buffer),\n          pos + Uint32Array.BYTES_PER_ELEMENT,\n          stringLength\n        );\n        const availableTiles = metadata.available;\n        if (defined(availableTiles)) {\n          for (let offset = 0; offset < availableTiles.length; ++offset) {\n            const availableLevel = level + offset + 1;\n            const rangesAtLevel = availableTiles[offset];\n            const yTiles = provider._tilingScheme.getNumberOfYTilesAtLevel(\n              availableLevel\n            );\n\n            for (\n              let rangeIndex = 0;\n              rangeIndex < rangesAtLevel.length;\n              ++rangeIndex\n            ) {\n              const range = rangesAtLevel[rangeIndex];\n              const yStart = yTiles - range.endY - 1;\n              const yEnd = yTiles - range.startY - 1;\n              provider.availability.addAvailableTileRange(\n                availableLevel,\n                range.startX,\n                yStart,\n                range.endX,\n                yEnd\n              );\n              layer.availability.addAvailableTileRange(\n                availableLevel,\n                range.startX,\n                yStart,\n                range.endX,\n                yEnd\n              );\n            }\n          }\n        }\n      }\n      layer.availabilityTilesLoaded.addAvailableTileRange(level, x, y, x, y);\n    }\n    pos += extensionLength;\n  }\n\n  const skirtHeight = provider.getLevelMaximumGeometricError(level) * 5.0;\n\n  // The skirt is not included in the OBB computation. If this ever\n  // causes any rendering artifacts (cracks), they are expected to be\n  // minor and in the corners of the screen. It's possible that this\n  // might need to be changed - just change to `minimumHeight - skirtHeight`\n  // A similar change might also be needed in `upsampleQuantizedTerrainMesh.js`.\n  const rectangle = provider._tilingScheme.tileXYToRectangle(x, y, level);\n  const orientedBoundingBox = OrientedBoundingBox.fromRectangle(\n    rectangle,\n    minimumHeight,\n    maximumHeight,\n    provider._tilingScheme.ellipsoid\n  );\n\n  return new QuantizedMeshTerrainData({\n    center: center,\n    minimumHeight: minimumHeight,\n    maximumHeight: maximumHeight,\n    boundingSphere: boundingSphere,\n    orientedBoundingBox: orientedBoundingBox,\n    horizonOcclusionPoint: horizonOcclusionPoint,\n    quantizedVertices: encodedVertexBuffer,\n    encodedNormals: encodedNormalBuffer,\n    indices: indices,\n    westIndices: westIndices,\n    southIndices: southIndices,\n    eastIndices: eastIndices,\n    northIndices: northIndices,\n    westSkirtHeight: skirtHeight,\n    southSkirtHeight: skirtHeight,\n    eastSkirtHeight: skirtHeight,\n    northSkirtHeight: skirtHeight,\n    childTileMask: provider.availability.computeChildMaskForTile(level, x, y),\n    waterMask: waterMaskBuffer,\n    credits: provider._tileCredits,\n  });\n}\n\n/**\n * Requests the geometry for a given tile.  This function should not be called before\n * {@link CesiumTerrainProvider#ready} returns true.  The result must include terrain data and\n * may optionally include a water mask and an indication of which child tiles are available.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\n *          returns undefined instead of a promise, it is an indication that too many requests are already\n *          pending and the request will be retried later.\n *\n * @exception {DeveloperError} This function must not be called before {@link CesiumTerrainProvider#ready}\n *            returns true.\n */\nCesiumTerrainProvider.prototype.requestTileGeometry = function (\n  x,\n  y,\n  level,\n  request\n) {\n  //>>includeStart('debug', pragmas.debug)\n  if (!this._ready) {\n    throw new DeveloperError(\n      \"requestTileGeometry must not be called before the terrain provider is ready.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const layers = this._layers;\n  let layerToUse;\n  const layerCount = layers.length;\n\n  if (layerCount === 1) {\n    // Optimized path for single layers\n    layerToUse = layers[0];\n  } else {\n    for (let i = 0; i < layerCount; ++i) {\n      const layer = layers[i];\n      if (\n        !defined(layer.availability) ||\n        layer.availability.isTileAvailable(level, x, y)\n      ) {\n        layerToUse = layer;\n        break;\n      }\n    }\n  }\n\n  return requestTileGeometry(this, x, y, level, layerToUse, request);\n};\n\nfunction requestTileGeometry(provider, x, y, level, layerToUse, request) {\n  if (!defined(layerToUse)) {\n    return Promise.reject(new RuntimeError(\"Terrain tile doesn't exist\"));\n  }\n\n  const urlTemplates = layerToUse.tileUrlTemplates;\n  if (urlTemplates.length === 0) {\n    return undefined;\n  }\n\n  // The TileMapService scheme counts from the bottom left\n  let terrainY;\n  if (!provider._scheme || provider._scheme === \"tms\") {\n    const yTiles = provider._tilingScheme.getNumberOfYTilesAtLevel(level);\n    terrainY = yTiles - y - 1;\n  } else {\n    terrainY = y;\n  }\n\n  const extensionList = [];\n  if (provider._requestVertexNormals && layerToUse.hasVertexNormals) {\n    extensionList.push(\n      layerToUse.littleEndianExtensionSize\n        ? \"octvertexnormals\"\n        : \"vertexnormals\"\n    );\n  }\n  if (provider._requestWaterMask && layerToUse.hasWaterMask) {\n    extensionList.push(\"watermask\");\n  }\n  if (provider._requestMetadata && layerToUse.hasMetadata) {\n    extensionList.push(\"metadata\");\n  }\n\n  let headers;\n  let query;\n  const url = urlTemplates[(x + terrainY + level) % urlTemplates.length];\n\n  const resource = layerToUse.resource;\n  if (\n    defined(resource._ionEndpoint) &&\n    !defined(resource._ionEndpoint.externalType)\n  ) {\n    // ion uses query paremeters to request extensions\n    if (extensionList.length !== 0) {\n      query = { extensions: extensionList.join(\"-\") };\n    }\n    headers = getRequestHeader(undefined);\n  } else {\n    //All other terrain servers\n    headers = getRequestHeader(extensionList);\n  }\n\n  const promise = resource\n    .getDerivedResource({\n      url: url,\n      templateValues: {\n        version: layerToUse.version,\n        z: level,\n        x: x,\n        y: terrainY,\n      },\n      queryParameters: query,\n      headers: headers,\n      request: request,\n    })\n    .fetchArrayBuffer();\n\n  if (!defined(promise)) {\n    return undefined;\n  }\n\n  return promise.then(function (buffer) {\n    if (defined(provider._heightmapStructure)) {\n      return createHeightmapTerrainData(provider, buffer, level, x, y);\n    }\n    return createQuantizedMeshTerrainData(\n      provider,\n      buffer,\n      level,\n      x,\n      y,\n      layerToUse\n    );\n  });\n}\n\nObject.defineProperties(CesiumTerrainProvider.prototype, {\n  /**\n   * Gets an event that is raised when the terrain provider encounters an asynchronous error.  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Event}\n   * @readonly\n   */\n  errorEvent: {\n    get: function () {\n      return this._errorEvent;\n    },\n  },\n\n  /**\n   * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\n   * the source of the terrain.  This function should not be called before {@link CesiumTerrainProvider#ready} returns true.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Credit}\n   * @readonly\n   */\n  credit: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug)\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"credit must not be called before the terrain provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._credit;\n    },\n  },\n\n  /**\n   * Gets the tiling scheme used by this provider.  This function should\n   * not be called before {@link CesiumTerrainProvider#ready} returns true.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {GeographicTilingScheme}\n   * @readonly\n   */\n  tilingScheme: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug)\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"tilingScheme must not be called before the terrain provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._tilingScheme;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  ready: {\n    get: function () {\n      return this._ready;\n    },\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: function () {\n      return this._readyPromise.promise;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider includes a water mask.  The water mask\n   * indicates which areas of the globe are water rather than land, so they can be rendered\n   * as a reflective surface with animated waves.  This function should not be\n   * called before {@link CesiumTerrainProvider#ready} returns true.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   * @exception {DeveloperError} This property must not be called before {@link CesiumTerrainProvider#ready}\n   */\n  hasWaterMask: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug)\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"hasWaterMask must not be called before the terrain provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      return this._hasWaterMask && this._requestWaterMask;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the requested tiles include vertex normals.\n   * This function should not be called before {@link CesiumTerrainProvider#ready} returns true.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   * @exception {DeveloperError} This property must not be called before {@link CesiumTerrainProvider#ready}\n   */\n  hasVertexNormals: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug)\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"hasVertexNormals must not be called before the terrain provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      // returns true if we can request vertex normals from the server\n      return this._hasVertexNormals && this._requestVertexNormals;\n    },\n  },\n\n  /**\n   * Gets a value indicating whether or not the requested tiles include metadata.\n   * This function should not be called before {@link CesiumTerrainProvider#ready} returns true.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   * @exception {DeveloperError} This property must not be called before {@link CesiumTerrainProvider#ready}\n   */\n  hasMetadata: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug)\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"hasMetadata must not be called before the terrain provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n\n      // returns true if we can request metadata from the server\n      return this._hasMetadata && this._requestMetadata;\n    },\n  },\n\n  /**\n   * Boolean flag that indicates if the client should request vertex normals from the server.\n   * Vertex normals data is appended to the standard tile mesh data only if the client requests the vertex normals and\n   * if the server provides vertex normals.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  requestVertexNormals: {\n    get: function () {\n      return this._requestVertexNormals;\n    },\n  },\n\n  /**\n   * Boolean flag that indicates if the client should request a watermask from the server.\n   * Watermask data is appended to the standard tile mesh data only if the client requests the watermask and\n   * if the server provides a watermask.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  requestWaterMask: {\n    get: function () {\n      return this._requestWaterMask;\n    },\n  },\n\n  /**\n   * Boolean flag that indicates if the client should request metadata from the server.\n   * Metadata is appended to the standard tile mesh data only if the client requests the metadata and\n   * if the server provides a metadata.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {Boolean}\n   * @readonly\n   */\n  requestMetadata: {\n    get: function () {\n      return this._requestMetadata;\n    },\n  },\n\n  /**\n   * Gets an object that can be used to determine availability of terrain from this provider, such as\n   * at points and in rectangles.  This function should not be called before\n   * {@link CesiumTerrainProvider#ready} returns true.  This property may be undefined if availability\n   * information is not available. Note that this reflects tiles that are known to be available currently.\n   * Additional tiles may be discovered to be available in the future, e.g. if availability information\n   * exists deeper in the tree rather than it all being discoverable at the root. However, a tile that\n   * is available now will not become unavailable in the future.\n   * @memberof CesiumTerrainProvider.prototype\n   * @type {TileAvailability}\n   * @readonly\n   */\n  availability: {\n    get: function () {\n      //>>includeStart('debug', pragmas.debug)\n      if (!this._ready) {\n        throw new DeveloperError(\n          \"availability must not be called before the terrain provider is ready.\"\n        );\n      }\n      //>>includeEnd('debug');\n      return this._availability;\n    },\n  },\n});\n\n/**\n * Gets the maximum geometric error allowed in a tile at a given level.\n *\n * @param {Number} level The tile level for which to get the maximum geometric error.\n * @returns {Number} The maximum geometric error.\n */\nCesiumTerrainProvider.prototype.getLevelMaximumGeometricError = function (\n  level\n) {\n  return this._levelZeroMaximumGeometricError / (1 << level);\n};\n\n/**\n * Determines whether data for a tile is available to be loaded.\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {Boolean|undefined} Undefined if not supported or availability is unknown, otherwise true or false.\n */\nCesiumTerrainProvider.prototype.getTileDataAvailable = function (x, y, level) {\n  if (!defined(this._availability)) {\n    return undefined;\n  }\n  if (level > this._availability._maximumLevel) {\n    return false;\n  }\n\n  if (this._availability.isTileAvailable(level, x, y)) {\n    // If the tile is listed as available, then we are done\n    return true;\n  }\n  if (!this._hasMetadata) {\n    // If we don't have any layers with the metadata extension then we don't have this tile\n    return false;\n  }\n\n  const layers = this._layers;\n  const count = layers.length;\n  for (let i = 0; i < count; ++i) {\n    const layerResult = checkLayer(this, x, y, level, layers[i], i === 0);\n    if (layerResult.result) {\n      // There is a layer that may or may not have the tile\n      return undefined;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Makes sure we load availability data for a tile\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {undefined|Promise<void>} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\n */\nCesiumTerrainProvider.prototype.loadTileDataAvailability = function (\n  x,\n  y,\n  level\n) {\n  if (\n    !defined(this._availability) ||\n    level > this._availability._maximumLevel ||\n    this._availability.isTileAvailable(level, x, y) ||\n    !this._hasMetadata\n  ) {\n    // We know the tile is either available or not available so nothing to wait on\n    return undefined;\n  }\n\n  const layers = this._layers;\n  const count = layers.length;\n  for (let i = 0; i < count; ++i) {\n    const layerResult = checkLayer(this, x, y, level, layers[i], i === 0);\n    if (defined(layerResult.promise)) {\n      return layerResult.promise;\n    }\n  }\n};\n\nfunction getAvailabilityTile(layer, x, y, level) {\n  if (level === 0) {\n    return;\n  }\n\n  const availabilityLevels = layer.availabilityLevels;\n  const parentLevel =\n    level % availabilityLevels === 0\n      ? level - availabilityLevels\n      : ((level / availabilityLevels) | 0) * availabilityLevels;\n  const divisor = 1 << (level - parentLevel);\n  const parentX = (x / divisor) | 0;\n  const parentY = (y / divisor) | 0;\n\n  return {\n    level: parentLevel,\n    x: parentX,\n    y: parentY,\n  };\n}\n\nfunction checkLayer(provider, x, y, level, layer, topLayer) {\n  if (!defined(layer.availabilityLevels)) {\n    // It's definitely not in this layer\n    return {\n      result: false,\n    };\n  }\n\n  let cacheKey;\n  const deleteFromCache = function () {\n    delete layer.availabilityPromiseCache[cacheKey];\n  };\n  const availabilityTilesLoaded = layer.availabilityTilesLoaded;\n  const availability = layer.availability;\n\n  let tile = getAvailabilityTile(layer, x, y, level);\n  while (defined(tile)) {\n    if (\n      availability.isTileAvailable(tile.level, tile.x, tile.y) &&\n      !availabilityTilesLoaded.isTileAvailable(tile.level, tile.x, tile.y)\n    ) {\n      let requestPromise;\n      if (!topLayer) {\n        cacheKey = `${tile.level}-${tile.x}-${tile.y}`;\n        requestPromise = layer.availabilityPromiseCache[cacheKey];\n        if (!defined(requestPromise)) {\n          // For cutout terrain, if this isn't the top layer the availability tiles\n          //  may never get loaded, so request it here.\n          const request = new Request({\n            throttle: false,\n            throttleByServer: true,\n            type: RequestType.TERRAIN,\n          });\n          requestPromise = requestTileGeometry(\n            provider,\n            tile.x,\n            tile.y,\n            tile.level,\n            layer,\n            request\n          );\n          if (defined(requestPromise)) {\n            layer.availabilityPromiseCache[cacheKey] = requestPromise;\n            requestPromise.then(deleteFromCache);\n          }\n        }\n      }\n\n      // The availability tile is available, but not loaded, so there\n      //  is still a chance that it may become available at some point\n      return {\n        result: true,\n        promise: requestPromise,\n      };\n    }\n\n    tile = getAvailabilityTile(layer, tile.x, tile.y, tile.level);\n  }\n\n  return {\n    result: false,\n  };\n}\n\n// Used for testing\nCesiumTerrainProvider._getAvailabilityTile = getAvailabilityTile;\nexport default CesiumTerrainProvider;\n","import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Contains functions for checking that supplied arguments are of a specified type\n * or meet specified conditions\n * @private\n */\nconst Check = {};\n\n/**\n * Contains type checking functions, all using the typeof operator\n */\nCheck.typeOf = {};\n\nfunction getUndefinedErrorMessage(name) {\n  return `${name} is required, actual value was undefined`;\n}\n\nfunction getFailedTypeErrorMessage(actual, expected, name) {\n  return `Expected ${name} to be typeof ${expected}, actual typeof was ${actual}`;\n}\n\n/**\n * Throws if test is not defined\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value that is to be checked\n * @exception {DeveloperError} test must be defined\n */\nCheck.defined = function (name, test) {\n  if (!defined(test)) {\n    throw new DeveloperError(getUndefinedErrorMessage(name));\n  }\n};\n\n/**\n * Throws if test is not typeof 'function'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'function'\n */\nCheck.typeOf.func = function (name, test) {\n  if (typeof test !== \"function\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"function\", name)\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'string'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'string'\n */\nCheck.typeOf.string = function (name, test) {\n  if (typeof test !== \"string\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"string\", name)\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'number'\n */\nCheck.typeOf.number = function (name, test) {\n  if (typeof test !== \"number\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"number\", name)\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and less than limit\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {Number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and less than limit\n */\nCheck.typeOf.number.lessThan = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test >= limit) {\n    throw new DeveloperError(\n      `Expected ${name} to be less than ${limit}, actual value was ${test}`\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and less than or equal to limit\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {Number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and less than or equal to limit\n */\nCheck.typeOf.number.lessThanOrEquals = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test > limit) {\n    throw new DeveloperError(\n      `Expected ${name} to be less than or equal to ${limit}, actual value was ${test}`\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and greater than limit\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {Number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and greater than limit\n */\nCheck.typeOf.number.greaterThan = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test <= limit) {\n    throw new DeveloperError(\n      `Expected ${name} to be greater than ${limit}, actual value was ${test}`\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'number' and greater than or equal to limit\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @param {Number} limit The limit value to compare against\n * @exception {DeveloperError} test must be typeof 'number' and greater than or equal to limit\n */\nCheck.typeOf.number.greaterThanOrEquals = function (name, test, limit) {\n  Check.typeOf.number(name, test);\n  if (test < limit) {\n    throw new DeveloperError(\n      `Expected ${name} to be greater than or equal to ${limit}, actual value was ${test}`\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'object'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'object'\n */\nCheck.typeOf.object = function (name, test) {\n  if (typeof test !== \"object\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"object\", name)\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'boolean'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'boolean'\n */\nCheck.typeOf.bool = function (name, test) {\n  if (typeof test !== \"boolean\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"boolean\", name)\n    );\n  }\n};\n\n/**\n * Throws if test is not typeof 'bigint'\n *\n * @param {String} name The name of the variable being tested\n * @param {*} test The value to test\n * @exception {DeveloperError} test must be typeof 'bigint'\n */\nCheck.typeOf.bigint = function (name, test) {\n  if (typeof test !== \"bigint\") {\n    throw new DeveloperError(\n      getFailedTypeErrorMessage(typeof test, \"bigint\", name)\n    );\n  }\n};\n\n/**\n * Throws if test1 and test2 is not typeof 'number' and not equal in value\n *\n * @param {String} name1 The name of the first variable being tested\n * @param {String} name2 The name of the second variable being tested against\n * @param {*} test1 The value to test\n * @param {*} test2 The value to test against\n * @exception {DeveloperError} test1 and test2 should be type of 'number' and be equal in value\n */\nCheck.typeOf.number.equals = function (name1, name2, test1, test2) {\n  Check.typeOf.number(name1, test1);\n  Check.typeOf.number(name2, test2);\n  if (test1 !== test2) {\n    throw new DeveloperError(\n      `${name1} must be equal to ${name2}, the actual values are ${test1} and ${test2}`\n    );\n  }\n};\nexport default Check;\n","import ClockRange from \"./ClockRange.js\";\nimport ClockStep from \"./ClockStep.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Event from \"./Event.js\";\nimport getTimestamp from \"./getTimestamp.js\";\nimport JulianDate from \"./JulianDate.js\";\n\n/**\n * A simple clock for keeping track of simulated time.\n *\n * @alias Clock\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {JulianDate} [options.startTime] The start time of the clock.\n * @param {JulianDate} [options.stopTime] The stop time of the clock.\n * @param {JulianDate} [options.currentTime] The current time.\n * @param {Number} [options.multiplier=1.0] Determines how much time advances when {@link Clock#tick} is called, negative values allow for advancing backwards.\n * @param {ClockStep} [options.clockStep=ClockStep.SYSTEM_CLOCK_MULTIPLIER] Determines if calls to {@link Clock#tick} are frame dependent or system clock dependent.\n * @param {ClockRange} [options.clockRange=ClockRange.UNBOUNDED] Determines how the clock should behave when {@link Clock#startTime} or {@link Clock#stopTime} is reached.\n * @param {Boolean} [options.canAnimate=true] Indicates whether {@link Clock#tick} can advance time.  This could be false if data is being buffered, for example.  The clock will only tick when both {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n * @param {Boolean} [options.shouldAnimate=false] Indicates whether {@link Clock#tick} should attempt to advance time.  The clock will only tick when both {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n *\n * @exception {DeveloperError} startTime must come before stopTime.\n *\n *\n * @example\n * // Create a clock that loops on Christmas day 2013 and runs in real-time.\n * const clock = new Cesium.Clock({\n *    startTime : Cesium.JulianDate.fromIso8601(\"2013-12-25\"),\n *    currentTime : Cesium.JulianDate.fromIso8601(\"2013-12-25\"),\n *    stopTime : Cesium.JulianDate.fromIso8601(\"2013-12-26\"),\n *    clockRange : Cesium.ClockRange.LOOP_STOP,\n *    clockStep : Cesium.ClockStep.SYSTEM_CLOCK_MULTIPLIER\n * });\n *\n * @see ClockStep\n * @see ClockRange\n * @see JulianDate\n */\nfunction Clock(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  let currentTime = options.currentTime;\n  let startTime = options.startTime;\n  let stopTime = options.stopTime;\n\n  if (!defined(currentTime)) {\n    // if not specified, current time is the start time,\n    // or if that is not specified, 1 day before the stop time,\n    // or if that is not specified, then now.\n    if (defined(startTime)) {\n      currentTime = JulianDate.clone(startTime);\n    } else if (defined(stopTime)) {\n      currentTime = JulianDate.addDays(stopTime, -1.0, new JulianDate());\n    } else {\n      currentTime = JulianDate.now();\n    }\n  } else {\n    currentTime = JulianDate.clone(currentTime);\n  }\n\n  if (!defined(startTime)) {\n    // if not specified, start time is the current time\n    // (as determined above)\n    startTime = JulianDate.clone(currentTime);\n  } else {\n    startTime = JulianDate.clone(startTime);\n  }\n\n  if (!defined(stopTime)) {\n    // if not specified, stop time is 1 day after the start time\n    // (as determined above)\n    stopTime = JulianDate.addDays(startTime, 1.0, new JulianDate());\n  } else {\n    stopTime = JulianDate.clone(stopTime);\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (JulianDate.greaterThan(startTime, stopTime)) {\n    throw new DeveloperError(\"startTime must come before stopTime.\");\n  }\n  //>>includeEnd('debug');\n\n  /**\n   * The start time of the clock.\n   * @type {JulianDate}\n   */\n  this.startTime = startTime;\n\n  /**\n   * The stop time of the clock.\n   * @type {JulianDate}\n   */\n  this.stopTime = stopTime;\n\n  /**\n   * Determines how the clock should behave when\n   * {@link Clock#startTime} or {@link Clock#stopTime}\n   * is reached.\n   * @type {ClockRange}\n   * @default {@link ClockRange.UNBOUNDED}\n   */\n  this.clockRange = defaultValue(options.clockRange, ClockRange.UNBOUNDED);\n\n  /**\n   * Indicates whether {@link Clock#tick} can advance time.  This could be false if data is being buffered,\n   * for example.  The clock will only advance time when both\n   * {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n   * @type {Boolean}\n   * @default true\n   */\n  this.canAnimate = defaultValue(options.canAnimate, true);\n\n  /**\n   * An {@link Event} that is fired whenever {@link Clock#tick} is called.\n   * @type {Event}\n   */\n  this.onTick = new Event();\n  /**\n   * An {@link Event} that is fired whenever {@link Clock#stopTime} is reached.\n   * @type {Event}\n   */\n  this.onStop = new Event();\n\n  this._currentTime = undefined;\n  this._multiplier = undefined;\n  this._clockStep = undefined;\n  this._shouldAnimate = undefined;\n  this._lastSystemTime = getTimestamp();\n\n  // set values using the property setters to\n  // make values consistent.\n\n  this.currentTime = currentTime;\n  this.multiplier = defaultValue(options.multiplier, 1.0);\n  this.shouldAnimate = defaultValue(options.shouldAnimate, false);\n  this.clockStep = defaultValue(\n    options.clockStep,\n    ClockStep.SYSTEM_CLOCK_MULTIPLIER\n  );\n}\n\nObject.defineProperties(Clock.prototype, {\n  /**\n   * The current time.\n   * Changing this property will change\n   * {@link Clock#clockStep} from {@link ClockStep.SYSTEM_CLOCK} to\n   * {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}.\n   * @memberof Clock.prototype\n   * @type {JulianDate}\n   */\n  currentTime: {\n    get: function () {\n      return this._currentTime;\n    },\n    set: function (value) {\n      if (JulianDate.equals(this._currentTime, value)) {\n        return;\n      }\n\n      if (this._clockStep === ClockStep.SYSTEM_CLOCK) {\n        this._clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n      }\n\n      this._currentTime = value;\n    },\n  },\n\n  /**\n   * Gets or sets how much time advances when {@link Clock#tick} is called. Negative values allow for advancing backwards.\n   * If {@link Clock#clockStep} is set to {@link ClockStep.TICK_DEPENDENT}, this is the number of seconds to advance.\n   * If {@link Clock#clockStep} is set to {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}, this value is multiplied by the\n   * elapsed system time since the last call to {@link Clock#tick}.\n   * Changing this property will change\n   * {@link Clock#clockStep} from {@link ClockStep.SYSTEM_CLOCK} to\n   * {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}.\n   * @memberof Clock.prototype\n   * @type {Number}\n   * @default 1.0\n   */\n  multiplier: {\n    get: function () {\n      return this._multiplier;\n    },\n    set: function (value) {\n      if (this._multiplier === value) {\n        return;\n      }\n\n      if (this._clockStep === ClockStep.SYSTEM_CLOCK) {\n        this._clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n      }\n\n      this._multiplier = value;\n    },\n  },\n\n  /**\n   * Determines if calls to {@link Clock#tick} are frame dependent or system clock dependent.\n   * Changing this property to {@link ClockStep.SYSTEM_CLOCK} will set\n   * {@link Clock#multiplier} to 1.0, {@link Clock#shouldAnimate} to true, and\n   * {@link Clock#currentTime} to the current system clock time.\n   * @memberof Clock.prototype\n   * @type ClockStep\n   * @default {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}\n   */\n  clockStep: {\n    get: function () {\n      return this._clockStep;\n    },\n    set: function (value) {\n      if (value === ClockStep.SYSTEM_CLOCK) {\n        this._multiplier = 1.0;\n        this._shouldAnimate = true;\n        this._currentTime = JulianDate.now();\n      }\n\n      this._clockStep = value;\n    },\n  },\n\n  /**\n   * Indicates whether {@link Clock#tick} should attempt to advance time.\n   * The clock will only advance time when both\n   * {@link Clock#canAnimate} and {@link Clock#shouldAnimate} are true.\n   * Changing this property will change\n   * {@link Clock#clockStep} from {@link ClockStep.SYSTEM_CLOCK} to\n   * {@link ClockStep.SYSTEM_CLOCK_MULTIPLIER}.\n   * @memberof Clock.prototype\n   * @type {Boolean}\n   * @default false\n   */\n  shouldAnimate: {\n    get: function () {\n      return this._shouldAnimate;\n    },\n    set: function (value) {\n      if (this._shouldAnimate === value) {\n        return;\n      }\n\n      if (this._clockStep === ClockStep.SYSTEM_CLOCK) {\n        this._clockStep = ClockStep.SYSTEM_CLOCK_MULTIPLIER;\n      }\n\n      this._shouldAnimate = value;\n    },\n  },\n});\n\n/**\n * Advances the clock from the current time based on the current configuration options.\n * tick should be called every frame, regardless of whether animation is taking place\n * or not.  To control animation, use the {@link Clock#shouldAnimate} property.\n *\n * @returns {JulianDate} The new value of the {@link Clock#currentTime} property.\n */\nClock.prototype.tick = function () {\n  const currentSystemTime = getTimestamp();\n  let currentTime = JulianDate.clone(this._currentTime);\n\n  if (this.canAnimate && this._shouldAnimate) {\n    const clockStep = this._clockStep;\n    if (clockStep === ClockStep.SYSTEM_CLOCK) {\n      currentTime = JulianDate.now(currentTime);\n    } else {\n      const multiplier = this._multiplier;\n\n      if (clockStep === ClockStep.TICK_DEPENDENT) {\n        currentTime = JulianDate.addSeconds(\n          currentTime,\n          multiplier,\n          currentTime\n        );\n      } else {\n        const milliseconds = currentSystemTime - this._lastSystemTime;\n        currentTime = JulianDate.addSeconds(\n          currentTime,\n          multiplier * (milliseconds / 1000.0),\n          currentTime\n        );\n      }\n\n      const clockRange = this.clockRange;\n      const startTime = this.startTime;\n      const stopTime = this.stopTime;\n\n      if (clockRange === ClockRange.CLAMPED) {\n        if (JulianDate.lessThan(currentTime, startTime)) {\n          currentTime = JulianDate.clone(startTime, currentTime);\n        } else if (JulianDate.greaterThan(currentTime, stopTime)) {\n          currentTime = JulianDate.clone(stopTime, currentTime);\n          this.onStop.raiseEvent(this);\n        }\n      } else if (clockRange === ClockRange.LOOP_STOP) {\n        if (JulianDate.lessThan(currentTime, startTime)) {\n          currentTime = JulianDate.clone(startTime, currentTime);\n        }\n        while (JulianDate.greaterThan(currentTime, stopTime)) {\n          currentTime = JulianDate.addSeconds(\n            startTime,\n            JulianDate.secondsDifference(currentTime, stopTime),\n            currentTime\n          );\n          this.onStop.raiseEvent(this);\n        }\n      }\n    }\n  }\n\n  this._currentTime = currentTime;\n  this._lastSystemTime = currentSystemTime;\n  this.onTick.raiseEvent(this);\n  return currentTime;\n};\nexport default Clock;\n","/**\n * Constants used by {@link Clock#tick} to determine behavior\n * when {@link Clock#startTime} or {@link Clock#stopTime} is reached.\n *\n * @enum {Number}\n *\n * @see Clock\n * @see ClockStep\n */\nconst ClockRange = {\n  /**\n   * {@link Clock#tick} will always advances the clock in its current direction.\n   *\n   * @type {Number}\n   * @constant\n   */\n  UNBOUNDED: 0,\n\n  /**\n   * When {@link Clock#startTime} or {@link Clock#stopTime} is reached,\n   * {@link Clock#tick} will not advance {@link Clock#currentTime} any further.\n   *\n   * @type {Number}\n   * @constant\n   */\n  CLAMPED: 1,\n\n  /**\n   * When {@link Clock#stopTime} is reached, {@link Clock#tick} will advance\n   * {@link Clock#currentTime} to the opposite end of the interval.  When\n   * time is moving backwards, {@link Clock#tick} will not advance past\n   * {@link Clock#startTime}\n   *\n   * @type {Number}\n   * @constant\n   */\n  LOOP_STOP: 2,\n};\nexport default Object.freeze(ClockRange);\n","/**\n * Constants to determine how much time advances with each call\n * to {@link Clock#tick}.\n *\n * @enum {Number}\n *\n * @see Clock\n * @see ClockRange\n */\nconst ClockStep = {\n  /**\n   * {@link Clock#tick} advances the current time by a fixed step,\n   * which is the number of seconds specified by {@link Clock#multiplier}.\n   *\n   * @type {Number}\n   * @constant\n   */\n  TICK_DEPENDENT: 0,\n\n  /**\n   * {@link Clock#tick} advances the current time by the amount of system\n   * time elapsed since the previous call multiplied by {@link Clock#multiplier}.\n   *\n   * @type {Number}\n   * @constant\n   */\n  SYSTEM_CLOCK_MULTIPLIER: 1,\n\n  /**\n   * {@link Clock#tick} sets the clock to the current system time;\n   * ignoring all other settings.\n   *\n   * @type {Number}\n   * @constant\n   */\n  SYSTEM_CLOCK: 2,\n};\nexport default Object.freeze(ClockStep);\n","import Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport FeatureDetection from \"./FeatureDetection.js\";\nimport CesiumMath from \"./Math.js\";\n\nfunction hue2rgb(m1, m2, h) {\n  if (h < 0) {\n    h += 1;\n  }\n  if (h > 1) {\n    h -= 1;\n  }\n  if (h * 6 < 1) {\n    return m1 + (m2 - m1) * 6 * h;\n  }\n  if (h * 2 < 1) {\n    return m2;\n  }\n  if (h * 3 < 2) {\n    return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n  }\n  return m1;\n}\n\n/**\n * A color, specified using red, green, blue, and alpha values,\n * which range from <code>0</code> (no intensity) to <code>1.0</code> (full intensity).\n * @param {Number} [red=1.0] The red component.\n * @param {Number} [green=1.0] The green component.\n * @param {Number} [blue=1.0] The blue component.\n * @param {Number} [alpha=1.0] The alpha component.\n *\n * @constructor\n * @alias Color\n *\n * @see Packable\n */\nfunction Color(red, green, blue, alpha) {\n  /**\n   * The red component.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.red = defaultValue(red, 1.0);\n  /**\n   * The green component.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.green = defaultValue(green, 1.0);\n  /**\n   * The blue component.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.blue = defaultValue(blue, 1.0);\n  /**\n   * The alpha component.\n   * @type {Number}\n   * @default 1.0\n   */\n  this.alpha = defaultValue(alpha, 1.0);\n}\n\n/**\n * Creates a Color instance from a {@link Cartesian4}. <code>x</code>, <code>y</code>, <code>z</code>,\n * and <code>w</code> map to <code>red</code>, <code>green</code>, <code>blue</code>, and <code>alpha</code>, respectively.\n *\n * @param {Cartesian4} cartesian The source cartesian.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\nColor.fromCartesian4 = function (cartesian, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Color(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\n  }\n\n  result.red = cartesian.x;\n  result.green = cartesian.y;\n  result.blue = cartesian.z;\n  result.alpha = cartesian.w;\n  return result;\n};\n\n/**\n * Creates a new Color specified using red, green, blue, and alpha values\n * that are in the range of 0 to 255, converting them internally to a range of 0.0 to 1.0.\n *\n * @param {Number} [red=255] The red component.\n * @param {Number} [green=255] The green component.\n * @param {Number} [blue=255] The blue component.\n * @param {Number} [alpha=255] The alpha component.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\nColor.fromBytes = function (red, green, blue, alpha, result) {\n  red = Color.byteToFloat(defaultValue(red, 255.0));\n  green = Color.byteToFloat(defaultValue(green, 255.0));\n  blue = Color.byteToFloat(defaultValue(blue, 255.0));\n  alpha = Color.byteToFloat(defaultValue(alpha, 255.0));\n\n  if (!defined(result)) {\n    return new Color(red, green, blue, alpha);\n  }\n\n  result.red = red;\n  result.green = green;\n  result.blue = blue;\n  result.alpha = alpha;\n  return result;\n};\n\n/**\n * Creates a new Color that has the same red, green, and blue components\n * of the specified color, but with the specified alpha value.\n *\n * @param {Color} color The base color\n * @param {Number} alpha The new alpha component.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n *\n * @example const translucentRed = Cesium.Color.fromAlpha(Cesium.Color.RED, 0.9);\n */\nColor.fromAlpha = function (color, alpha, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"color\", color);\n  Check.typeOf.number(\"alpha\", alpha);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Color(color.red, color.green, color.blue, alpha);\n  }\n\n  result.red = color.red;\n  result.green = color.green;\n  result.blue = color.blue;\n  result.alpha = alpha;\n  return result;\n};\n\nlet scratchArrayBuffer;\nlet scratchUint32Array;\nlet scratchUint8Array;\nif (FeatureDetection.supportsTypedArrays()) {\n  scratchArrayBuffer = new ArrayBuffer(4);\n  scratchUint32Array = new Uint32Array(scratchArrayBuffer);\n  scratchUint8Array = new Uint8Array(scratchArrayBuffer);\n}\n\n/**\n * Creates a new Color from a single numeric unsigned 32-bit RGBA value, using the endianness\n * of the system.\n *\n * @param {Number} rgba A single numeric unsigned 32-bit RGBA value.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The color object.\n *\n * @example\n * const color = Cesium.Color.fromRgba(0x67ADDFFF);\n *\n * @see Color#toRgba\n */\nColor.fromRgba = function (rgba, result) {\n  // scratchUint32Array and scratchUint8Array share an underlying array buffer\n  scratchUint32Array[0] = rgba;\n  return Color.fromBytes(\n    scratchUint8Array[0],\n    scratchUint8Array[1],\n    scratchUint8Array[2],\n    scratchUint8Array[3],\n    result\n  );\n};\n\n/**\n * Creates a Color instance from hue, saturation, and lightness.\n *\n * @param {Number} [hue=0] The hue angle 0...1\n * @param {Number} [saturation=0] The saturation value 0...1\n * @param {Number} [lightness=0] The lightness value 0...1\n * @param {Number} [alpha=1.0] The alpha component 0...1\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The color object.\n *\n * @see {@link http://www.w3.org/TR/css3-color/#hsl-color|CSS color values}\n */\nColor.fromHsl = function (hue, saturation, lightness, alpha, result) {\n  hue = defaultValue(hue, 0.0) % 1.0;\n  saturation = defaultValue(saturation, 0.0);\n  lightness = defaultValue(lightness, 0.0);\n  alpha = defaultValue(alpha, 1.0);\n\n  let red = lightness;\n  let green = lightness;\n  let blue = lightness;\n\n  if (saturation !== 0) {\n    let m2;\n    if (lightness < 0.5) {\n      m2 = lightness * (1 + saturation);\n    } else {\n      m2 = lightness + saturation - lightness * saturation;\n    }\n\n    const m1 = 2.0 * lightness - m2;\n    red = hue2rgb(m1, m2, hue + 1 / 3);\n    green = hue2rgb(m1, m2, hue);\n    blue = hue2rgb(m1, m2, hue - 1 / 3);\n  }\n\n  if (!defined(result)) {\n    return new Color(red, green, blue, alpha);\n  }\n\n  result.red = red;\n  result.green = green;\n  result.blue = blue;\n  result.alpha = alpha;\n  return result;\n};\n\n/**\n * Creates a random color using the provided options. For reproducible random colors, you should\n * call {@link CesiumMath#setRandomNumberSeed} once at the beginning of your application.\n *\n * @param {Object} [options] Object with the following properties:\n * @param {Number} [options.red] If specified, the red component to use instead of a randomized value.\n * @param {Number} [options.minimumRed=0.0] The maximum red value to generate if none was specified.\n * @param {Number} [options.maximumRed=1.0] The minimum red value to generate if none was specified.\n * @param {Number} [options.green] If specified, the green component to use instead of a randomized value.\n * @param {Number} [options.minimumGreen=0.0] The maximum green value to generate if none was specified.\n * @param {Number} [options.maximumGreen=1.0] The minimum green value to generate if none was specified.\n * @param {Number} [options.blue] If specified, the blue component to use instead of a randomized value.\n * @param {Number} [options.minimumBlue=0.0] The maximum blue value to generate if none was specified.\n * @param {Number} [options.maximumBlue=1.0] The minimum blue value to generate if none was specified.\n * @param {Number} [options.alpha] If specified, the alpha component to use instead of a randomized value.\n * @param {Number} [options.minimumAlpha=0.0] The maximum alpha value to generate if none was specified.\n * @param {Number} [options.maximumAlpha=1.0] The minimum alpha value to generate if none was specified.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The modified result parameter or a new instance if result was undefined.\n *\n * @exception {DeveloperError} minimumRed must be less than or equal to maximumRed.\n * @exception {DeveloperError} minimumGreen must be less than or equal to maximumGreen.\n * @exception {DeveloperError} minimumBlue must be less than or equal to maximumBlue.\n * @exception {DeveloperError} minimumAlpha must be less than or equal to maximumAlpha.\n *\n * @example\n * //Create a completely random color\n * const color = Cesium.Color.fromRandom();\n *\n * //Create a random shade of yellow.\n * const color1 = Cesium.Color.fromRandom({\n *     red : 1.0,\n *     green : 1.0,\n *     alpha : 1.0\n * });\n *\n * //Create a random bright color.\n * const color2 = Cesium.Color.fromRandom({\n *     minimumRed : 0.75,\n *     minimumGreen : 0.75,\n *     minimumBlue : 0.75,\n *     alpha : 1.0\n * });\n */\nColor.fromRandom = function (options, result) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  let red = options.red;\n  if (!defined(red)) {\n    const minimumRed = defaultValue(options.minimumRed, 0);\n    const maximumRed = defaultValue(options.maximumRed, 1.0);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.number.lessThanOrEquals(\"minimumRed\", minimumRed, maximumRed);\n    //>>includeEnd('debug');\n\n    red =\n      minimumRed + CesiumMath.nextRandomNumber() * (maximumRed - minimumRed);\n  }\n\n  let green = options.green;\n  if (!defined(green)) {\n    const minimumGreen = defaultValue(options.minimumGreen, 0);\n    const maximumGreen = defaultValue(options.maximumGreen, 1.0);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.number.lessThanOrEquals(\n      \"minimumGreen\",\n      minimumGreen,\n      maximumGreen\n    );\n    //>>includeEnd('debug');\n    green =\n      minimumGreen +\n      CesiumMath.nextRandomNumber() * (maximumGreen - minimumGreen);\n  }\n\n  let blue = options.blue;\n  if (!defined(blue)) {\n    const minimumBlue = defaultValue(options.minimumBlue, 0);\n    const maximumBlue = defaultValue(options.maximumBlue, 1.0);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.number.lessThanOrEquals(\n      \"minimumBlue\",\n      minimumBlue,\n      maximumBlue\n    );\n    //>>includeEnd('debug');\n\n    blue =\n      minimumBlue + CesiumMath.nextRandomNumber() * (maximumBlue - minimumBlue);\n  }\n\n  let alpha = options.alpha;\n  if (!defined(alpha)) {\n    const minimumAlpha = defaultValue(options.minimumAlpha, 0);\n    const maximumAlpha = defaultValue(options.maximumAlpha, 1.0);\n\n    //>>includeStart('debug', pragmas.debug);\n    Check.typeOf.number.lessThanOrEquals(\n      \"minumumAlpha\",\n      minimumAlpha,\n      maximumAlpha\n    );\n    //>>includeEnd('debug');\n\n    alpha =\n      minimumAlpha +\n      CesiumMath.nextRandomNumber() * (maximumAlpha - minimumAlpha);\n  }\n\n  if (!defined(result)) {\n    return new Color(red, green, blue, alpha);\n  }\n\n  result.red = red;\n  result.green = green;\n  result.blue = blue;\n  result.alpha = alpha;\n  return result;\n};\n\n//#rgba\nconst rgbaMatcher = /^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i;\n//#rrggbbaa\nconst rrggbbaaMatcher = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i;\n//rgb(), rgba(), or rgb%()\nconst rgbParenthesesMatcher = /^rgba?\\(\\s*([0-9.]+%?)\\s*,\\s*([0-9.]+%?)\\s*,\\s*([0-9.]+%?)(?:\\s*,\\s*([0-9.]+))?\\s*\\)$/i;\n//hsl() or hsla()\nconst hslParenthesesMatcher = /^hsla?\\(\\s*([0-9.]+)\\s*,\\s*([0-9.]+%)\\s*,\\s*([0-9.]+%)(?:\\s*,\\s*([0-9.]+))?\\s*\\)$/i;\n\n/**\n * Creates a Color instance from a CSS color value.\n *\n * @param {String} color The CSS color value in #rgb, #rgba, #rrggbb, #rrggbbaa, rgb(), rgba(), hsl(), or hsla() format.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The color object, or undefined if the string was not a valid CSS color.\n *\n *\n * @example\n * const cesiumBlue = Cesium.Color.fromCssColorString('#67ADDF');\n * const green = Cesium.Color.fromCssColorString('green');\n *\n * @see {@link http://www.w3.org/TR/css3-color|CSS color values}\n */\nColor.fromCssColorString = function (color, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.string(\"color\", color);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Color();\n  }\n\n  // Remove all whitespaces from the color string\n  color = color.replace(/\\s/g, \"\");\n\n  const namedColor = Color[color.toUpperCase()];\n  if (defined(namedColor)) {\n    Color.clone(namedColor, result);\n    return result;\n  }\n\n  let matches = rgbaMatcher.exec(color);\n  if (matches !== null) {\n    result.red = parseInt(matches[1], 16) / 15;\n    result.green = parseInt(matches[2], 16) / 15.0;\n    result.blue = parseInt(matches[3], 16) / 15.0;\n    result.alpha = parseInt(defaultValue(matches[4], \"f\"), 16) / 15.0;\n    return result;\n  }\n\n  matches = rrggbbaaMatcher.exec(color);\n  if (matches !== null) {\n    result.red = parseInt(matches[1], 16) / 255.0;\n    result.green = parseInt(matches[2], 16) / 255.0;\n    result.blue = parseInt(matches[3], 16) / 255.0;\n    result.alpha = parseInt(defaultValue(matches[4], \"ff\"), 16) / 255.0;\n    return result;\n  }\n\n  matches = rgbParenthesesMatcher.exec(color);\n  if (matches !== null) {\n    result.red =\n      parseFloat(matches[1]) / (\"%\" === matches[1].substr(-1) ? 100.0 : 255.0);\n    result.green =\n      parseFloat(matches[2]) / (\"%\" === matches[2].substr(-1) ? 100.0 : 255.0);\n    result.blue =\n      parseFloat(matches[3]) / (\"%\" === matches[3].substr(-1) ? 100.0 : 255.0);\n    result.alpha = parseFloat(defaultValue(matches[4], \"1.0\"));\n    return result;\n  }\n\n  matches = hslParenthesesMatcher.exec(color);\n  if (matches !== null) {\n    return Color.fromHsl(\n      parseFloat(matches[1]) / 360.0,\n      parseFloat(matches[2]) / 100.0,\n      parseFloat(matches[3]) / 100.0,\n      parseFloat(defaultValue(matches[4], \"1.0\")),\n      result\n    );\n  }\n\n  result = undefined;\n  return result;\n};\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nColor.packedLength = 4;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {Color} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nColor.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  array[startingIndex++] = value.red;\n  array[startingIndex++] = value.green;\n  array[startingIndex++] = value.blue;\n  array[startingIndex] = value.alpha;\n\n  return array;\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {Color} [result] The object into which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\nColor.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n  if (!defined(result)) {\n    result = new Color();\n  }\n  result.red = array[startingIndex++];\n  result.green = array[startingIndex++];\n  result.blue = array[startingIndex++];\n  result.alpha = array[startingIndex];\n  return result;\n};\n\n/**\n * Converts a 'byte' color component in the range of 0 to 255 into\n * a 'float' color component in the range of 0 to 1.0.\n *\n * @param {Number} number The number to be converted.\n * @returns {Number} The converted number.\n */\nColor.byteToFloat = function (number) {\n  return number / 255.0;\n};\n\n/**\n * Converts a 'float' color component in the range of 0 to 1.0 into\n * a 'byte' color component in the range of 0 to 255.\n *\n * @param {Number} number The number to be converted.\n * @returns {Number} The converted number.\n */\nColor.floatToByte = function (number) {\n  return number === 1.0 ? 255.0 : (number * 256.0) | 0;\n};\n\n/**\n * Duplicates a Color.\n *\n * @param {Color} color The Color to duplicate.\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The modified result parameter or a new instance if result was undefined. (Returns undefined if color is undefined)\n */\nColor.clone = function (color, result) {\n  if (!defined(color)) {\n    return undefined;\n  }\n  if (!defined(result)) {\n    return new Color(color.red, color.green, color.blue, color.alpha);\n  }\n  result.red = color.red;\n  result.green = color.green;\n  result.blue = color.blue;\n  result.alpha = color.alpha;\n  return result;\n};\n\n/**\n * Returns true if the first Color equals the second color.\n *\n * @param {Color} left The first Color to compare for equality.\n * @param {Color} right The second Color to compare for equality.\n * @returns {Boolean} <code>true</code> if the Colors are equal; otherwise, <code>false</code>.\n */\nColor.equals = function (left, right) {\n  return (\n    left === right || //\n    (defined(left) && //\n      defined(right) && //\n      left.red === right.red && //\n      left.green === right.green && //\n      left.blue === right.blue && //\n      left.alpha === right.alpha)\n  );\n};\n\n/**\n * @private\n */\nColor.equalsArray = function (color, array, offset) {\n  return (\n    color.red === array[offset] &&\n    color.green === array[offset + 1] &&\n    color.blue === array[offset + 2] &&\n    color.alpha === array[offset + 3]\n  );\n};\n\n/**\n * Returns a duplicate of a Color instance.\n *\n * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\n * @returns {Color} The modified result parameter or a new instance if result was undefined.\n */\nColor.prototype.clone = function (result) {\n  return Color.clone(this, result);\n};\n\n/**\n * Returns true if this Color equals other.\n *\n * @param {Color} other The Color to compare for equality.\n * @returns {Boolean} <code>true</code> if the Colors are equal; otherwise, <code>false</code>.\n */\nColor.prototype.equals = function (other) {\n  return Color.equals(this, other);\n};\n\n/**\n * Returns <code>true</code> if this Color equals other componentwise within the specified epsilon.\n *\n * @param {Color} other The Color to compare for equality.\n * @param {Number} [epsilon=0.0] The epsilon to use for equality testing.\n * @returns {Boolean} <code>true</code> if the Colors are equal within the specified epsilon; otherwise, <code>false</code>.\n */\nColor.prototype.equalsEpsilon = function (other, epsilon) {\n  return (\n    this === other || //\n    (defined(other) && //\n      Math.abs(this.red - other.red) <= epsilon && //\n      Math.abs(this.green - other.green) <= epsilon && //\n      Math.abs(this.blue - other.blue) <= epsilon && //\n      Math.abs(this.alpha - other.alpha) <= epsilon)\n  );\n};\n\n/**\n * Creates a string representing this Color in the format '(red, green, blue, alpha)'.\n *\n * @returns {String} A string representing this Color in the format '(red, green, blue, alpha)'.\n */\nColor.prototype.toString = function () {\n  return `(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;\n};\n\n/**\n * Creates a string containing the CSS color value for this color.\n *\n * @returns {String} The CSS equivalent of this color.\n *\n * @see {@link http://www.w3.org/TR/css3-color/#rgba-color|CSS RGB or RGBA color values}\n */\nColor.prototype.toCssColorString = function () {\n  const red = Color.floatToByte(this.red);\n  const green = Color.floatToByte(this.green);\n  const blue = Color.floatToByte(this.blue);\n  if (this.alpha === 1) {\n    return `rgb(${red},${green},${blue})`;\n  }\n  return `rgba(${red},${green},${blue},${this.alpha})`;\n};\n\n/**\n * Creates a string containing CSS hex string color value for this color.\n *\n * @returns {String} The CSS hex string equivalent of this color.\n */\nColor.prototype.toCssHexString = function () {\n  let r = Color.floatToByte(this.red).toString(16);\n  if (r.length < 2) {\n    r = `0${r}`;\n  }\n  let g = Color.floatToByte(this.green).toString(16);\n  if (g.length < 2) {\n    g = `0${g}`;\n  }\n  let b = Color.floatToByte(this.blue).toString(16);\n  if (b.length < 2) {\n    b = `0${b}`;\n  }\n  if (this.alpha < 1) {\n    let hexAlpha = Color.floatToByte(this.alpha).toString(16);\n    if (hexAlpha.length < 2) {\n      hexAlpha = `0${hexAlpha}`;\n    }\n    return `#${r}${g}${b}${hexAlpha}`;\n  }\n  return `#${r}${g}${b}`;\n};\n\n/**\n * Converts this color to an array of red, green, blue, and alpha values\n * that are in the range of 0 to 255.\n *\n * @param {Number[]} [result] The array to store the result in, if undefined a new instance will be created.\n * @returns {Number[]} The modified result parameter or a new instance if result was undefined.\n */\nColor.prototype.toBytes = function (result) {\n  const red = Color.floatToByte(this.red);\n  const green = Color.floatToByte(this.green);\n  const blue = Color.floatToByte(this.blue);\n  const alpha = Color.floatToByte(this.alpha);\n\n  if (!defined(result)) {\n    return [red, green, blue, alpha];\n  }\n  result[0] = red;\n  result[1] = green;\n  result[2] = blue;\n  result[3] = alpha;\n  return result;\n};\n\n/**\n * Converts this color to a single numeric unsigned 32-bit RGBA value, using the endianness\n * of the system.\n *\n * @returns {Number} A single numeric unsigned 32-bit RGBA value.\n *\n *\n * @example\n * const rgba = Cesium.Color.BLUE.toRgba();\n *\n * @see Color.fromRgba\n */\nColor.prototype.toRgba = function () {\n  // scratchUint32Array and scratchUint8Array share an underlying array buffer\n  scratchUint8Array[0] = Color.floatToByte(this.red);\n  scratchUint8Array[1] = Color.floatToByte(this.green);\n  scratchUint8Array[2] = Color.floatToByte(this.blue);\n  scratchUint8Array[3] = Color.floatToByte(this.alpha);\n  return scratchUint32Array[0];\n};\n\n/**\n * Brightens this color by the provided magnitude.\n *\n * @param {Number} magnitude A positive number indicating the amount to brighten.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n *\n * @example\n * const brightBlue = Cesium.Color.BLUE.brighten(0.5, new Cesium.Color());\n */\nColor.prototype.brighten = function (magnitude, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"magnitude\", magnitude);\n  Check.typeOf.number.greaterThanOrEquals(\"magnitude\", magnitude, 0.0);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  magnitude = 1.0 - magnitude;\n  result.red = 1.0 - (1.0 - this.red) * magnitude;\n  result.green = 1.0 - (1.0 - this.green) * magnitude;\n  result.blue = 1.0 - (1.0 - this.blue) * magnitude;\n  result.alpha = this.alpha;\n  return result;\n};\n\n/**\n * Darkens this color by the provided magnitude.\n *\n * @param {Number} magnitude A positive number indicating the amount to darken.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n *\n * @example\n * const darkBlue = Cesium.Color.BLUE.darken(0.5, new Cesium.Color());\n */\nColor.prototype.darken = function (magnitude, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"magnitude\", magnitude);\n  Check.typeOf.number.greaterThanOrEquals(\"magnitude\", magnitude, 0.0);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  magnitude = 1.0 - magnitude;\n  result.red = this.red * magnitude;\n  result.green = this.green * magnitude;\n  result.blue = this.blue * magnitude;\n  result.alpha = this.alpha;\n  return result;\n};\n\n/**\n * Creates a new Color that has the same red, green, and blue components\n * as this Color, but with the specified alpha value.\n *\n * @param {Number} alpha The new alpha component.\n * @param {Color} [result] The object onto which to store the result.\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n *\n * @example const translucentRed = Cesium.Color.RED.withAlpha(0.9);\n */\nColor.prototype.withAlpha = function (alpha, result) {\n  return Color.fromAlpha(this, alpha, result);\n};\n\n/**\n * Computes the componentwise sum of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.add = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red + right.red;\n  result.green = left.green + right.green;\n  result.blue = left.blue + right.blue;\n  result.alpha = left.alpha + right.alpha;\n  return result;\n};\n\n/**\n * Computes the componentwise difference of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.subtract = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red - right.red;\n  result.green = left.green - right.green;\n  result.blue = left.blue - right.blue;\n  result.alpha = left.alpha - right.alpha;\n  return result;\n};\n\n/**\n * Computes the componentwise product of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.multiply = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red * right.red;\n  result.green = left.green * right.green;\n  result.blue = left.blue * right.blue;\n  result.alpha = left.alpha * right.alpha;\n  return result;\n};\n\n/**\n * Computes the componentwise quotient of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.divide = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red / right.red;\n  result.green = left.green / right.green;\n  result.blue = left.blue / right.blue;\n  result.alpha = left.alpha / right.alpha;\n  return result;\n};\n\n/**\n * Computes the componentwise modulus of two Colors.\n *\n * @param {Color} left The first Color.\n * @param {Color} right The second Color.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.mod = function (left, right, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"left\", left);\n  Check.typeOf.object(\"right\", right);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = left.red % right.red;\n  result.green = left.green % right.green;\n  result.blue = left.blue % right.blue;\n  result.alpha = left.alpha % right.alpha;\n  return result;\n};\n\n/**\n * Computes the linear interpolation or extrapolation at t between the provided colors.\n *\n * @param {Color} start The color corresponding to t at 0.0.\n * @param {Color} end The color corresponding to t at 1.0.\n * @param {Number} t The point along t at which to interpolate.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.lerp = function (start, end, t, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"start\", start);\n  Check.typeOf.object(\"end\", end);\n  Check.typeOf.number(\"t\", t);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = CesiumMath.lerp(start.red, end.red, t);\n  result.green = CesiumMath.lerp(start.green, end.green, t);\n  result.blue = CesiumMath.lerp(start.blue, end.blue, t);\n  result.alpha = CesiumMath.lerp(start.alpha, end.alpha, t);\n  return result;\n};\n\n/**\n * Multiplies the provided Color componentwise by the provided scalar.\n *\n * @param {Color} color The Color to be scaled.\n * @param {Number} scalar The scalar to multiply with.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.multiplyByScalar = function (color, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"color\", color);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = color.red * scalar;\n  result.green = color.green * scalar;\n  result.blue = color.blue * scalar;\n  result.alpha = color.alpha * scalar;\n  return result;\n};\n\n/**\n * Divides the provided Color componentwise by the provided scalar.\n *\n * @param {Color} color The Color to be divided.\n * @param {Number} scalar The scalar to divide with.\n * @param {Color} result The object onto which to store the result.\n * @returns {Color} The modified result parameter.\n */\nColor.divideByScalar = function (color, scalar, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"color\", color);\n  Check.typeOf.number(\"scalar\", scalar);\n  Check.typeOf.object(\"result\", result);\n  //>>includeEnd('debug');\n\n  result.red = color.red / scalar;\n  result.green = color.green / scalar;\n  result.blue = color.blue / scalar;\n  result.alpha = color.alpha / scalar;\n  return result;\n};\n\n/**\n * An immutable Color instance initialized to CSS color #F0F8FF\n * <span class=\"colorSwath\" style=\"background: #F0F8FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ALICEBLUE = Object.freeze(Color.fromCssColorString(\"#F0F8FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FAEBD7\n * <span class=\"colorSwath\" style=\"background: #FAEBD7;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ANTIQUEWHITE = Object.freeze(Color.fromCssColorString(\"#FAEBD7\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FFFF\n * <span class=\"colorSwath\" style=\"background: #00FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.AQUA = Object.freeze(Color.fromCssColorString(\"#00FFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #7FFFD4\n * <span class=\"colorSwath\" style=\"background: #7FFFD4;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.AQUAMARINE = Object.freeze(Color.fromCssColorString(\"#7FFFD4\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F0FFFF\n * <span class=\"colorSwath\" style=\"background: #F0FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.AZURE = Object.freeze(Color.fromCssColorString(\"#F0FFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F5F5DC\n * <span class=\"colorSwath\" style=\"background: #F5F5DC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BEIGE = Object.freeze(Color.fromCssColorString(\"#F5F5DC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFE4C4\n * <span class=\"colorSwath\" style=\"background: #FFE4C4;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BISQUE = Object.freeze(Color.fromCssColorString(\"#FFE4C4\"));\n\n/**\n * An immutable Color instance initialized to CSS color #000000\n * <span class=\"colorSwath\" style=\"background: #000000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BLACK = Object.freeze(Color.fromCssColorString(\"#000000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFEBCD\n * <span class=\"colorSwath\" style=\"background: #FFEBCD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BLANCHEDALMOND = Object.freeze(Color.fromCssColorString(\"#FFEBCD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #0000FF\n * <span class=\"colorSwath\" style=\"background: #0000FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BLUE = Object.freeze(Color.fromCssColorString(\"#0000FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8A2BE2\n * <span class=\"colorSwath\" style=\"background: #8A2BE2;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BLUEVIOLET = Object.freeze(Color.fromCssColorString(\"#8A2BE2\"));\n\n/**\n * An immutable Color instance initialized to CSS color #A52A2A\n * <span class=\"colorSwath\" style=\"background: #A52A2A;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BROWN = Object.freeze(Color.fromCssColorString(\"#A52A2A\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DEB887\n * <span class=\"colorSwath\" style=\"background: #DEB887;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.BURLYWOOD = Object.freeze(Color.fromCssColorString(\"#DEB887\"));\n\n/**\n * An immutable Color instance initialized to CSS color #5F9EA0\n * <span class=\"colorSwath\" style=\"background: #5F9EA0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CADETBLUE = Object.freeze(Color.fromCssColorString(\"#5F9EA0\"));\n/**\n * An immutable Color instance initialized to CSS color #7FFF00\n * <span class=\"colorSwath\" style=\"background: #7FFF00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CHARTREUSE = Object.freeze(Color.fromCssColorString(\"#7FFF00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D2691E\n * <span class=\"colorSwath\" style=\"background: #D2691E;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CHOCOLATE = Object.freeze(Color.fromCssColorString(\"#D2691E\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF7F50\n * <span class=\"colorSwath\" style=\"background: #FF7F50;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CORAL = Object.freeze(Color.fromCssColorString(\"#FF7F50\"));\n\n/**\n * An immutable Color instance initialized to CSS color #6495ED\n * <span class=\"colorSwath\" style=\"background: #6495ED;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CORNFLOWERBLUE = Object.freeze(Color.fromCssColorString(\"#6495ED\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFF8DC\n * <span class=\"colorSwath\" style=\"background: #FFF8DC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CORNSILK = Object.freeze(Color.fromCssColorString(\"#FFF8DC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DC143C\n * <span class=\"colorSwath\" style=\"background: #DC143C;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CRIMSON = Object.freeze(Color.fromCssColorString(\"#DC143C\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FFFF\n * <span class=\"colorSwath\" style=\"background: #00FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.CYAN = Object.freeze(Color.fromCssColorString(\"#00FFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00008B\n * <span class=\"colorSwath\" style=\"background: #00008B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKBLUE = Object.freeze(Color.fromCssColorString(\"#00008B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #008B8B\n * <span class=\"colorSwath\" style=\"background: #008B8B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKCYAN = Object.freeze(Color.fromCssColorString(\"#008B8B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #B8860B\n * <span class=\"colorSwath\" style=\"background: #B8860B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKGOLDENROD = Object.freeze(Color.fromCssColorString(\"#B8860B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #A9A9A9\n * <span class=\"colorSwath\" style=\"background: #A9A9A9;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKGRAY = Object.freeze(Color.fromCssColorString(\"#A9A9A9\"));\n\n/**\n * An immutable Color instance initialized to CSS color #006400\n * <span class=\"colorSwath\" style=\"background: #006400;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKGREEN = Object.freeze(Color.fromCssColorString(\"#006400\"));\n\n/**\n * An immutable Color instance initialized to CSS color #A9A9A9\n * <span class=\"colorSwath\" style=\"background: #A9A9A9;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKGREY = Color.DARKGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #BDB76B\n * <span class=\"colorSwath\" style=\"background: #BDB76B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKKHAKI = Object.freeze(Color.fromCssColorString(\"#BDB76B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8B008B\n * <span class=\"colorSwath\" style=\"background: #8B008B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKMAGENTA = Object.freeze(Color.fromCssColorString(\"#8B008B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #556B2F\n * <span class=\"colorSwath\" style=\"background: #556B2F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKOLIVEGREEN = Object.freeze(Color.fromCssColorString(\"#556B2F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF8C00\n * <span class=\"colorSwath\" style=\"background: #FF8C00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKORANGE = Object.freeze(Color.fromCssColorString(\"#FF8C00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #9932CC\n * <span class=\"colorSwath\" style=\"background: #9932CC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKORCHID = Object.freeze(Color.fromCssColorString(\"#9932CC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8B0000\n * <span class=\"colorSwath\" style=\"background: #8B0000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKRED = Object.freeze(Color.fromCssColorString(\"#8B0000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #E9967A\n * <span class=\"colorSwath\" style=\"background: #E9967A;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSALMON = Object.freeze(Color.fromCssColorString(\"#E9967A\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8FBC8F\n * <span class=\"colorSwath\" style=\"background: #8FBC8F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSEAGREEN = Object.freeze(Color.fromCssColorString(\"#8FBC8F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #483D8B\n * <span class=\"colorSwath\" style=\"background: #483D8B;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSLATEBLUE = Object.freeze(Color.fromCssColorString(\"#483D8B\"));\n\n/**\n * An immutable Color instance initialized to CSS color #2F4F4F\n * <span class=\"colorSwath\" style=\"background: #2F4F4F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSLATEGRAY = Object.freeze(Color.fromCssColorString(\"#2F4F4F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #2F4F4F\n * <span class=\"colorSwath\" style=\"background: #2F4F4F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKSLATEGREY = Color.DARKSLATEGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #00CED1\n * <span class=\"colorSwath\" style=\"background: #00CED1;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKTURQUOISE = Object.freeze(Color.fromCssColorString(\"#00CED1\"));\n\n/**\n * An immutable Color instance initialized to CSS color #9400D3\n * <span class=\"colorSwath\" style=\"background: #9400D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DARKVIOLET = Object.freeze(Color.fromCssColorString(\"#9400D3\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF1493\n * <span class=\"colorSwath\" style=\"background: #FF1493;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DEEPPINK = Object.freeze(Color.fromCssColorString(\"#FF1493\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00BFFF\n * <span class=\"colorSwath\" style=\"background: #00BFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DEEPSKYBLUE = Object.freeze(Color.fromCssColorString(\"#00BFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #696969\n * <span class=\"colorSwath\" style=\"background: #696969;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DIMGRAY = Object.freeze(Color.fromCssColorString(\"#696969\"));\n\n/**\n * An immutable Color instance initialized to CSS color #696969\n * <span class=\"colorSwath\" style=\"background: #696969;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DIMGREY = Color.DIMGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #1E90FF\n * <span class=\"colorSwath\" style=\"background: #1E90FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.DODGERBLUE = Object.freeze(Color.fromCssColorString(\"#1E90FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #B22222\n * <span class=\"colorSwath\" style=\"background: #B22222;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.FIREBRICK = Object.freeze(Color.fromCssColorString(\"#B22222\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFAF0\n * <span class=\"colorSwath\" style=\"background: #FFFAF0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.FLORALWHITE = Object.freeze(Color.fromCssColorString(\"#FFFAF0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #228B22\n * <span class=\"colorSwath\" style=\"background: #228B22;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.FORESTGREEN = Object.freeze(Color.fromCssColorString(\"#228B22\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF00FF\n * <span class=\"colorSwath\" style=\"background: #FF00FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.FUCHSIA = Object.freeze(Color.fromCssColorString(\"#FF00FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DCDCDC\n * <span class=\"colorSwath\" style=\"background: #DCDCDC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GAINSBORO = Object.freeze(Color.fromCssColorString(\"#DCDCDC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F8F8FF\n * <span class=\"colorSwath\" style=\"background: #F8F8FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GHOSTWHITE = Object.freeze(Color.fromCssColorString(\"#F8F8FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFD700\n * <span class=\"colorSwath\" style=\"background: #FFD700;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GOLD = Object.freeze(Color.fromCssColorString(\"#FFD700\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DAA520\n * <span class=\"colorSwath\" style=\"background: #DAA520;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GOLDENROD = Object.freeze(Color.fromCssColorString(\"#DAA520\"));\n\n/**\n * An immutable Color instance initialized to CSS color #808080\n * <span class=\"colorSwath\" style=\"background: #808080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GRAY = Object.freeze(Color.fromCssColorString(\"#808080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #008000\n * <span class=\"colorSwath\" style=\"background: #008000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GREEN = Object.freeze(Color.fromCssColorString(\"#008000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #ADFF2F\n * <span class=\"colorSwath\" style=\"background: #ADFF2F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GREENYELLOW = Object.freeze(Color.fromCssColorString(\"#ADFF2F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #808080\n * <span class=\"colorSwath\" style=\"background: #808080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.GREY = Color.GRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #F0FFF0\n * <span class=\"colorSwath\" style=\"background: #F0FFF0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.HONEYDEW = Object.freeze(Color.fromCssColorString(\"#F0FFF0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF69B4\n * <span class=\"colorSwath\" style=\"background: #FF69B4;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.HOTPINK = Object.freeze(Color.fromCssColorString(\"#FF69B4\"));\n\n/**\n * An immutable Color instance initialized to CSS color #CD5C5C\n * <span class=\"colorSwath\" style=\"background: #CD5C5C;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.INDIANRED = Object.freeze(Color.fromCssColorString(\"#CD5C5C\"));\n\n/**\n * An immutable Color instance initialized to CSS color #4B0082\n * <span class=\"colorSwath\" style=\"background: #4B0082;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.INDIGO = Object.freeze(Color.fromCssColorString(\"#4B0082\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFFF0\n * <span class=\"colorSwath\" style=\"background: #FFFFF0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.IVORY = Object.freeze(Color.fromCssColorString(\"#FFFFF0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F0E68C\n * <span class=\"colorSwath\" style=\"background: #F0E68C;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.KHAKI = Object.freeze(Color.fromCssColorString(\"#F0E68C\"));\n\n/**\n * An immutable Color instance initialized to CSS color #E6E6FA\n * <span class=\"colorSwath\" style=\"background: #E6E6FA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LAVENDER = Object.freeze(Color.fromCssColorString(\"#E6E6FA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFF0F5\n * <span class=\"colorSwath\" style=\"background: #FFF0F5;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LAVENDAR_BLUSH = Object.freeze(Color.fromCssColorString(\"#FFF0F5\"));\n\n/**\n * An immutable Color instance initialized to CSS color #7CFC00\n * <span class=\"colorSwath\" style=\"background: #7CFC00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LAWNGREEN = Object.freeze(Color.fromCssColorString(\"#7CFC00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFACD\n * <span class=\"colorSwath\" style=\"background: #FFFACD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LEMONCHIFFON = Object.freeze(Color.fromCssColorString(\"#FFFACD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #ADD8E6\n * <span class=\"colorSwath\" style=\"background: #ADD8E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTBLUE = Object.freeze(Color.fromCssColorString(\"#ADD8E6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F08080\n * <span class=\"colorSwath\" style=\"background: #F08080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTCORAL = Object.freeze(Color.fromCssColorString(\"#F08080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #E0FFFF\n * <span class=\"colorSwath\" style=\"background: #E0FFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTCYAN = Object.freeze(Color.fromCssColorString(\"#E0FFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FAFAD2\n * <span class=\"colorSwath\" style=\"background: #FAFAD2;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTGOLDENRODYELLOW = Object.freeze(Color.fromCssColorString(\"#FAFAD2\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D3D3D3\n * <span class=\"colorSwath\" style=\"background: #D3D3D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTGRAY = Object.freeze(Color.fromCssColorString(\"#D3D3D3\"));\n\n/**\n * An immutable Color instance initialized to CSS color #90EE90\n * <span class=\"colorSwath\" style=\"background: #90EE90;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTGREEN = Object.freeze(Color.fromCssColorString(\"#90EE90\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D3D3D3\n * <span class=\"colorSwath\" style=\"background: #D3D3D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTGREY = Color.LIGHTGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #FFB6C1\n * <span class=\"colorSwath\" style=\"background: #FFB6C1;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTPINK = Object.freeze(Color.fromCssColorString(\"#FFB6C1\"));\n\n/**\n * An immutable Color instance initialized to CSS color #20B2AA\n * <span class=\"colorSwath\" style=\"background: #20B2AA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSEAGREEN = Object.freeze(Color.fromCssColorString(\"#20B2AA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #87CEFA\n * <span class=\"colorSwath\" style=\"background: #87CEFA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSKYBLUE = Object.freeze(Color.fromCssColorString(\"#87CEFA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #778899\n * <span class=\"colorSwath\" style=\"background: #778899;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSLATEGRAY = Object.freeze(Color.fromCssColorString(\"#778899\"));\n\n/**\n * An immutable Color instance initialized to CSS color #778899\n * <span class=\"colorSwath\" style=\"background: #778899;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSLATEGREY = Color.LIGHTSLATEGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #B0C4DE\n * <span class=\"colorSwath\" style=\"background: #B0C4DE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTSTEELBLUE = Object.freeze(Color.fromCssColorString(\"#B0C4DE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFFE0\n * <span class=\"colorSwath\" style=\"background: #FFFFE0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIGHTYELLOW = Object.freeze(Color.fromCssColorString(\"#FFFFE0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FF00\n * <span class=\"colorSwath\" style=\"background: #00FF00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIME = Object.freeze(Color.fromCssColorString(\"#00FF00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #32CD32\n * <span class=\"colorSwath\" style=\"background: #32CD32;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LIMEGREEN = Object.freeze(Color.fromCssColorString(\"#32CD32\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FAF0E6\n * <span class=\"colorSwath\" style=\"background: #FAF0E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.LINEN = Object.freeze(Color.fromCssColorString(\"#FAF0E6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF00FF\n * <span class=\"colorSwath\" style=\"background: #FF00FF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MAGENTA = Object.freeze(Color.fromCssColorString(\"#FF00FF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #800000\n * <span class=\"colorSwath\" style=\"background: #800000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MAROON = Object.freeze(Color.fromCssColorString(\"#800000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #66CDAA\n * <span class=\"colorSwath\" style=\"background: #66CDAA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMAQUAMARINE = Object.freeze(Color.fromCssColorString(\"#66CDAA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #0000CD\n * <span class=\"colorSwath\" style=\"background: #0000CD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMBLUE = Object.freeze(Color.fromCssColorString(\"#0000CD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #BA55D3\n * <span class=\"colorSwath\" style=\"background: #BA55D3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMORCHID = Object.freeze(Color.fromCssColorString(\"#BA55D3\"));\n\n/**\n * An immutable Color instance initialized to CSS color #9370DB\n * <span class=\"colorSwath\" style=\"background: #9370DB;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMPURPLE = Object.freeze(Color.fromCssColorString(\"#9370DB\"));\n\n/**\n * An immutable Color instance initialized to CSS color #3CB371\n * <span class=\"colorSwath\" style=\"background: #3CB371;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMSEAGREEN = Object.freeze(Color.fromCssColorString(\"#3CB371\"));\n\n/**\n * An immutable Color instance initialized to CSS color #7B68EE\n * <span class=\"colorSwath\" style=\"background: #7B68EE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMSLATEBLUE = Object.freeze(Color.fromCssColorString(\"#7B68EE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FA9A\n * <span class=\"colorSwath\" style=\"background: #00FA9A;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMSPRINGGREEN = Object.freeze(Color.fromCssColorString(\"#00FA9A\"));\n\n/**\n * An immutable Color instance initialized to CSS color #48D1CC\n * <span class=\"colorSwath\" style=\"background: #48D1CC;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMTURQUOISE = Object.freeze(Color.fromCssColorString(\"#48D1CC\"));\n\n/**\n * An immutable Color instance initialized to CSS color #C71585\n * <span class=\"colorSwath\" style=\"background: #C71585;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MEDIUMVIOLETRED = Object.freeze(Color.fromCssColorString(\"#C71585\"));\n\n/**\n * An immutable Color instance initialized to CSS color #191970\n * <span class=\"colorSwath\" style=\"background: #191970;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MIDNIGHTBLUE = Object.freeze(Color.fromCssColorString(\"#191970\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F5FFFA\n * <span class=\"colorSwath\" style=\"background: #F5FFFA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MINTCREAM = Object.freeze(Color.fromCssColorString(\"#F5FFFA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFE4E1\n * <span class=\"colorSwath\" style=\"background: #FFE4E1;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MISTYROSE = Object.freeze(Color.fromCssColorString(\"#FFE4E1\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFE4B5\n * <span class=\"colorSwath\" style=\"background: #FFE4B5;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.MOCCASIN = Object.freeze(Color.fromCssColorString(\"#FFE4B5\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFDEAD\n * <span class=\"colorSwath\" style=\"background: #FFDEAD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.NAVAJOWHITE = Object.freeze(Color.fromCssColorString(\"#FFDEAD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #000080\n * <span class=\"colorSwath\" style=\"background: #000080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.NAVY = Object.freeze(Color.fromCssColorString(\"#000080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FDF5E6\n * <span class=\"colorSwath\" style=\"background: #FDF5E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.OLDLACE = Object.freeze(Color.fromCssColorString(\"#FDF5E6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #808000\n * <span class=\"colorSwath\" style=\"background: #808000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.OLIVE = Object.freeze(Color.fromCssColorString(\"#808000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #6B8E23\n * <span class=\"colorSwath\" style=\"background: #6B8E23;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.OLIVEDRAB = Object.freeze(Color.fromCssColorString(\"#6B8E23\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFA500\n * <span class=\"colorSwath\" style=\"background: #FFA500;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ORANGE = Object.freeze(Color.fromCssColorString(\"#FFA500\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF4500\n * <span class=\"colorSwath\" style=\"background: #FF4500;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ORANGERED = Object.freeze(Color.fromCssColorString(\"#FF4500\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DA70D6\n * <span class=\"colorSwath\" style=\"background: #DA70D6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ORCHID = Object.freeze(Color.fromCssColorString(\"#DA70D6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #EEE8AA\n * <span class=\"colorSwath\" style=\"background: #EEE8AA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PALEGOLDENROD = Object.freeze(Color.fromCssColorString(\"#EEE8AA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #98FB98\n * <span class=\"colorSwath\" style=\"background: #98FB98;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PALEGREEN = Object.freeze(Color.fromCssColorString(\"#98FB98\"));\n\n/**\n * An immutable Color instance initialized to CSS color #AFEEEE\n * <span class=\"colorSwath\" style=\"background: #AFEEEE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PALETURQUOISE = Object.freeze(Color.fromCssColorString(\"#AFEEEE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DB7093\n * <span class=\"colorSwath\" style=\"background: #DB7093;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PALEVIOLETRED = Object.freeze(Color.fromCssColorString(\"#DB7093\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFEFD5\n * <span class=\"colorSwath\" style=\"background: #FFEFD5;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PAPAYAWHIP = Object.freeze(Color.fromCssColorString(\"#FFEFD5\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFDAB9\n * <span class=\"colorSwath\" style=\"background: #FFDAB9;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PEACHPUFF = Object.freeze(Color.fromCssColorString(\"#FFDAB9\"));\n\n/**\n * An immutable Color instance initialized to CSS color #CD853F\n * <span class=\"colorSwath\" style=\"background: #CD853F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PERU = Object.freeze(Color.fromCssColorString(\"#CD853F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFC0CB\n * <span class=\"colorSwath\" style=\"background: #FFC0CB;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PINK = Object.freeze(Color.fromCssColorString(\"#FFC0CB\"));\n\n/**\n * An immutable Color instance initialized to CSS color #DDA0DD\n * <span class=\"colorSwath\" style=\"background: #DDA0DD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PLUM = Object.freeze(Color.fromCssColorString(\"#DDA0DD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #B0E0E6\n * <span class=\"colorSwath\" style=\"background: #B0E0E6;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.POWDERBLUE = Object.freeze(Color.fromCssColorString(\"#B0E0E6\"));\n\n/**\n * An immutable Color instance initialized to CSS color #800080\n * <span class=\"colorSwath\" style=\"background: #800080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.PURPLE = Object.freeze(Color.fromCssColorString(\"#800080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF0000\n * <span class=\"colorSwath\" style=\"background: #FF0000;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.RED = Object.freeze(Color.fromCssColorString(\"#FF0000\"));\n\n/**\n * An immutable Color instance initialized to CSS color #BC8F8F\n * <span class=\"colorSwath\" style=\"background: #BC8F8F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ROSYBROWN = Object.freeze(Color.fromCssColorString(\"#BC8F8F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #4169E1\n * <span class=\"colorSwath\" style=\"background: #4169E1;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.ROYALBLUE = Object.freeze(Color.fromCssColorString(\"#4169E1\"));\n\n/**\n * An immutable Color instance initialized to CSS color #8B4513\n * <span class=\"colorSwath\" style=\"background: #8B4513;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SADDLEBROWN = Object.freeze(Color.fromCssColorString(\"#8B4513\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FA8072\n * <span class=\"colorSwath\" style=\"background: #FA8072;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SALMON = Object.freeze(Color.fromCssColorString(\"#FA8072\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F4A460\n * <span class=\"colorSwath\" style=\"background: #F4A460;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SANDYBROWN = Object.freeze(Color.fromCssColorString(\"#F4A460\"));\n\n/**\n * An immutable Color instance initialized to CSS color #2E8B57\n * <span class=\"colorSwath\" style=\"background: #2E8B57;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SEAGREEN = Object.freeze(Color.fromCssColorString(\"#2E8B57\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFF5EE\n * <span class=\"colorSwath\" style=\"background: #FFF5EE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SEASHELL = Object.freeze(Color.fromCssColorString(\"#FFF5EE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #A0522D\n * <span class=\"colorSwath\" style=\"background: #A0522D;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SIENNA = Object.freeze(Color.fromCssColorString(\"#A0522D\"));\n\n/**\n * An immutable Color instance initialized to CSS color #C0C0C0\n * <span class=\"colorSwath\" style=\"background: #C0C0C0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SILVER = Object.freeze(Color.fromCssColorString(\"#C0C0C0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #87CEEB\n * <span class=\"colorSwath\" style=\"background: #87CEEB;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SKYBLUE = Object.freeze(Color.fromCssColorString(\"#87CEEB\"));\n\n/**\n * An immutable Color instance initialized to CSS color #6A5ACD\n * <span class=\"colorSwath\" style=\"background: #6A5ACD;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SLATEBLUE = Object.freeze(Color.fromCssColorString(\"#6A5ACD\"));\n\n/**\n * An immutable Color instance initialized to CSS color #708090\n * <span class=\"colorSwath\" style=\"background: #708090;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SLATEGRAY = Object.freeze(Color.fromCssColorString(\"#708090\"));\n\n/**\n * An immutable Color instance initialized to CSS color #708090\n * <span class=\"colorSwath\" style=\"background: #708090;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SLATEGREY = Color.SLATEGRAY;\n\n/**\n * An immutable Color instance initialized to CSS color #FFFAFA\n * <span class=\"colorSwath\" style=\"background: #FFFAFA;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SNOW = Object.freeze(Color.fromCssColorString(\"#FFFAFA\"));\n\n/**\n * An immutable Color instance initialized to CSS color #00FF7F\n * <span class=\"colorSwath\" style=\"background: #00FF7F;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.SPRINGGREEN = Object.freeze(Color.fromCssColorString(\"#00FF7F\"));\n\n/**\n * An immutable Color instance initialized to CSS color #4682B4\n * <span class=\"colorSwath\" style=\"background: #4682B4;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.STEELBLUE = Object.freeze(Color.fromCssColorString(\"#4682B4\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D2B48C\n * <span class=\"colorSwath\" style=\"background: #D2B48C;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TAN = Object.freeze(Color.fromCssColorString(\"#D2B48C\"));\n\n/**\n * An immutable Color instance initialized to CSS color #008080\n * <span class=\"colorSwath\" style=\"background: #008080;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TEAL = Object.freeze(Color.fromCssColorString(\"#008080\"));\n\n/**\n * An immutable Color instance initialized to CSS color #D8BFD8\n * <span class=\"colorSwath\" style=\"background: #D8BFD8;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.THISTLE = Object.freeze(Color.fromCssColorString(\"#D8BFD8\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FF6347\n * <span class=\"colorSwath\" style=\"background: #FF6347;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TOMATO = Object.freeze(Color.fromCssColorString(\"#FF6347\"));\n\n/**\n * An immutable Color instance initialized to CSS color #40E0D0\n * <span class=\"colorSwath\" style=\"background: #40E0D0;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TURQUOISE = Object.freeze(Color.fromCssColorString(\"#40E0D0\"));\n\n/**\n * An immutable Color instance initialized to CSS color #EE82EE\n * <span class=\"colorSwath\" style=\"background: #EE82EE;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.VIOLET = Object.freeze(Color.fromCssColorString(\"#EE82EE\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F5DEB3\n * <span class=\"colorSwath\" style=\"background: #F5DEB3;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.WHEAT = Object.freeze(Color.fromCssColorString(\"#F5DEB3\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFFFF\n * <span class=\"colorSwath\" style=\"background: #FFFFFF;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.WHITE = Object.freeze(Color.fromCssColorString(\"#FFFFFF\"));\n\n/**\n * An immutable Color instance initialized to CSS color #F5F5F5\n * <span class=\"colorSwath\" style=\"background: #F5F5F5;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.WHITESMOKE = Object.freeze(Color.fromCssColorString(\"#F5F5F5\"));\n\n/**\n * An immutable Color instance initialized to CSS color #FFFF00\n * <span class=\"colorSwath\" style=\"background: #FFFF00;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.YELLOW = Object.freeze(Color.fromCssColorString(\"#FFFF00\"));\n\n/**\n * An immutable Color instance initialized to CSS color #9ACD32\n * <span class=\"colorSwath\" style=\"background: #9ACD32;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.YELLOWGREEN = Object.freeze(Color.fromCssColorString(\"#9ACD32\"));\n\n/**\n * An immutable Color instance initialized to CSS transparent.\n * <span class=\"colorSwath\" style=\"background: transparent;\"></span>\n *\n * @constant\n * @type {Color}\n */\nColor.TRANSPARENT = Object.freeze(new Color(0, 0, 0, 0));\nexport default Color;\n","import Color from \"./Color.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Value and type information for per-instance geometry color.\n *\n * @alias ColorGeometryInstanceAttribute\n * @constructor\n *\n * @param {Number} [red=1.0] The red component.\n * @param {Number} [green=1.0] The green component.\n * @param {Number} [blue=1.0] The blue component.\n * @param {Number} [alpha=1.0] The alpha component.\n *\n *\n * @example\n * const instance = new Cesium.GeometryInstance({\n *   geometry : Cesium.BoxGeometry.fromDimensions({\n *     dimensions : new Cesium.Cartesian3(1000000.0, 1000000.0, 500000.0)\n *   }),\n *   modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n *     Cesium.Cartesian3.fromDegrees(0.0, 0.0)), new Cesium.Cartesian3(0.0, 0.0, 1000000.0), new Cesium.Matrix4()),\n *   id : 'box',\n *   attributes : {\n *     color : new Cesium.ColorGeometryInstanceAttribute(red, green, blue, alpha)\n *   }\n * });\n *\n * @see GeometryInstance\n * @see GeometryInstanceAttribute\n */\nfunction ColorGeometryInstanceAttribute(red, green, blue, alpha) {\n  red = defaultValue(red, 1.0);\n  green = defaultValue(green, 1.0);\n  blue = defaultValue(blue, 1.0);\n  alpha = defaultValue(alpha, 1.0);\n\n  /**\n   * The values for the attributes stored in a typed array.\n   *\n   * @type Uint8Array\n   *\n   * @default [255, 255, 255, 255]\n   */\n  this.value = new Uint8Array([\n    Color.floatToByte(red),\n    Color.floatToByte(green),\n    Color.floatToByte(blue),\n    Color.floatToByte(alpha),\n  ]);\n}\n\nObject.defineProperties(ColorGeometryInstanceAttribute.prototype, {\n  /**\n   * The datatype of each component in the attribute, e.g., individual elements in\n   * {@link ColorGeometryInstanceAttribute#value}.\n   *\n   * @memberof ColorGeometryInstanceAttribute.prototype\n   *\n   * @type {ComponentDatatype}\n   * @readonly\n   *\n   * @default {@link ComponentDatatype.UNSIGNED_BYTE}\n   */\n  componentDatatype: {\n    get: function () {\n      return ComponentDatatype.UNSIGNED_BYTE;\n    },\n  },\n\n  /**\n   * The number of components in the attributes, i.e., {@link ColorGeometryInstanceAttribute#value}.\n   *\n   * @memberof ColorGeometryInstanceAttribute.prototype\n   *\n   * @type {Number}\n   * @readonly\n   *\n   * @default 4\n   */\n  componentsPerAttribute: {\n    get: function () {\n      return 4;\n    },\n  },\n\n  /**\n   * When <code>true</code> and <code>componentDatatype</code> is an integer format,\n   * indicate that the components should be mapped to the range [0, 1] (unsigned)\n   * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n   *\n   * @memberof ColorGeometryInstanceAttribute.prototype\n   *\n   * @type {Boolean}\n   * @readonly\n   *\n   * @default true\n   */\n  normalize: {\n    get: function () {\n      return true;\n    },\n  },\n});\n\n/**\n * Creates a new {@link ColorGeometryInstanceAttribute} instance given the provided {@link Color}.\n *\n * @param {Color} color The color.\n * @returns {ColorGeometryInstanceAttribute} The new {@link ColorGeometryInstanceAttribute} instance.\n *\n * @example\n * const instance = new Cesium.GeometryInstance({\n *   geometry : geometry,\n *   attributes : {\n *     color : Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.CORNFLOWERBLUE),\n *   }\n * });\n */\nColorGeometryInstanceAttribute.fromColor = function (color) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required.\");\n  }\n  //>>includeEnd('debug');\n\n  return new ColorGeometryInstanceAttribute(\n    color.red,\n    color.green,\n    color.blue,\n    color.alpha\n  );\n};\n\n/**\n * Converts a color to a typed array that can be used to assign a color attribute.\n *\n * @param {Color} color The color.\n * @param {Uint8Array} [result] The array to store the result in, if undefined a new instance will be created.\n *\n * @returns {Uint8Array} The modified result parameter or a new instance if result was undefined.\n *\n * @example\n * const attributes = primitive.getGeometryInstanceAttributes('an id');\n * attributes.color = Cesium.ColorGeometryInstanceAttribute.toValue(Cesium.Color.AQUA, attributes.color);\n */\nColorGeometryInstanceAttribute.toValue = function (color, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    return new Uint8Array(color.toBytes());\n  }\n  return color.toBytes(result);\n};\n\n/**\n * Compares the provided ColorGeometryInstanceAttributes and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {ColorGeometryInstanceAttribute} [left] The first ColorGeometryInstanceAttribute.\n * @param {ColorGeometryInstanceAttribute} [right] The second ColorGeometryInstanceAttribute.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nColorGeometryInstanceAttribute.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      left.value[0] === right.value[0] &&\n      left.value[1] === right.value[1] &&\n      left.value[2] === right.value[2] &&\n      left.value[3] === right.value[3])\n  );\n};\nexport default ColorGeometryInstanceAttribute;\n","import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport WebGLConstants from \"./WebGLConstants.js\";\n\n/**\n * WebGL component datatypes.  Components are intrinsics,\n * which form attributes, which form vertices.\n *\n * @enum {Number}\n */\nconst ComponentDatatype = {\n  /**\n   * 8-bit signed byte corresponding to <code>gl.BYTE</code> and the type\n   * of an element in <code>Int8Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  BYTE: WebGLConstants.BYTE,\n\n  /**\n   * 8-bit unsigned byte corresponding to <code>UNSIGNED_BYTE</code> and the type\n   * of an element in <code>Uint8Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  UNSIGNED_BYTE: WebGLConstants.UNSIGNED_BYTE,\n\n  /**\n   * 16-bit signed short corresponding to <code>SHORT</code> and the type\n   * of an element in <code>Int16Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  SHORT: WebGLConstants.SHORT,\n\n  /**\n   * 16-bit unsigned short corresponding to <code>UNSIGNED_SHORT</code> and the type\n   * of an element in <code>Uint16Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  UNSIGNED_SHORT: WebGLConstants.UNSIGNED_SHORT,\n\n  /**\n   * 32-bit signed int corresponding to <code>INT</code> and the type\n   * of an element in <code>Int32Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {Number}\n   * @constant\n   */\n  INT: WebGLConstants.INT,\n\n  /**\n   * 32-bit unsigned int corresponding to <code>UNSIGNED_INT</code> and the type\n   * of an element in <code>Uint32Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {Number}\n   * @constant\n   */\n  UNSIGNED_INT: WebGLConstants.UNSIGNED_INT,\n\n  /**\n   * 32-bit floating-point corresponding to <code>FLOAT</code> and the type\n   * of an element in <code>Float32Array</code>.\n   *\n   * @type {Number}\n   * @constant\n   */\n  FLOAT: WebGLConstants.FLOAT,\n\n  /**\n   * 64-bit floating-point corresponding to <code>gl.DOUBLE</code> (in Desktop OpenGL;\n   * this is not supported in WebGL, and is emulated in Cesium via {@link GeometryPipeline.encodeAttribute})\n   * and the type of an element in <code>Float64Array</code>.\n   *\n   * @memberOf ComponentDatatype\n   *\n   * @type {Number}\n   * @constant\n   * @default 0x140A\n   */\n  DOUBLE: WebGLConstants.DOUBLE,\n};\n\n/**\n * Returns the size, in bytes, of the corresponding datatype.\n *\n * @param {ComponentDatatype} componentDatatype The component datatype to get the size of.\n * @returns {Number} The size in bytes.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n *\n * @example\n * // Returns Int8Array.BYTES_PER_ELEMENT\n * const size = Cesium.ComponentDatatype.getSizeInBytes(Cesium.ComponentDatatype.BYTE);\n */\nComponentDatatype.getSizeInBytes = function (componentDatatype) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"value is required.\");\n  }\n  //>>includeEnd('debug');\n\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return Int8Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return Uint8Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.SHORT:\n      return Int16Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return Uint16Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.INT:\n      return Int32Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.UNSIGNED_INT:\n      return Uint32Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.FLOAT:\n      return Float32Array.BYTES_PER_ELEMENT;\n    case ComponentDatatype.DOUBLE:\n      return Float64Array.BYTES_PER_ELEMENT;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Gets the {@link ComponentDatatype} for the provided TypedArray instance.\n *\n * @param {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} array The typed array.\n * @returns {ComponentDatatype} The ComponentDatatype for the provided array, or undefined if the array is not a TypedArray.\n */\nComponentDatatype.fromTypedArray = function (array) {\n  if (array instanceof Int8Array) {\n    return ComponentDatatype.BYTE;\n  }\n  if (array instanceof Uint8Array) {\n    return ComponentDatatype.UNSIGNED_BYTE;\n  }\n  if (array instanceof Int16Array) {\n    return ComponentDatatype.SHORT;\n  }\n  if (array instanceof Uint16Array) {\n    return ComponentDatatype.UNSIGNED_SHORT;\n  }\n  if (array instanceof Int32Array) {\n    return ComponentDatatype.INT;\n  }\n  if (array instanceof Uint32Array) {\n    return ComponentDatatype.UNSIGNED_INT;\n  }\n  if (array instanceof Float32Array) {\n    return ComponentDatatype.FLOAT;\n  }\n  if (array instanceof Float64Array) {\n    return ComponentDatatype.DOUBLE;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  throw new DeveloperError(\n    \"array must be an Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, or Float64Array.\"\n  );\n  //>>includeEnd('debug');\n};\n\n/**\n * Validates that the provided component datatype is a valid {@link ComponentDatatype}\n *\n * @param {ComponentDatatype} componentDatatype The component datatype to validate.\n * @returns {Boolean} <code>true</code> if the provided component datatype is a valid value; otherwise, <code>false</code>.\n *\n * @example\n * if (!Cesium.ComponentDatatype.validate(componentDatatype)) {\n *   throw new Cesium.DeveloperError('componentDatatype must be a valid value.');\n * }\n */\nComponentDatatype.validate = function (componentDatatype) {\n  return (\n    defined(componentDatatype) &&\n    (componentDatatype === ComponentDatatype.BYTE ||\n      componentDatatype === ComponentDatatype.UNSIGNED_BYTE ||\n      componentDatatype === ComponentDatatype.SHORT ||\n      componentDatatype === ComponentDatatype.UNSIGNED_SHORT ||\n      componentDatatype === ComponentDatatype.INT ||\n      componentDatatype === ComponentDatatype.UNSIGNED_INT ||\n      componentDatatype === ComponentDatatype.FLOAT ||\n      componentDatatype === ComponentDatatype.DOUBLE)\n  );\n};\n\n/**\n * Creates a typed array corresponding to component data type.\n *\n * @param {ComponentDatatype} componentDatatype The component data type.\n * @param {Number|Array} valuesOrLength The length of the array to create or an array.\n * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} A typed array.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n *\n * @example\n * // creates a Float32Array with length of 100\n * const typedArray = Cesium.ComponentDatatype.createTypedArray(Cesium.ComponentDatatype.FLOAT, 100);\n */\nComponentDatatype.createTypedArray = function (\n  componentDatatype,\n  valuesOrLength\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"componentDatatype is required.\");\n  }\n  if (!defined(valuesOrLength)) {\n    throw new DeveloperError(\"valuesOrLength is required.\");\n  }\n  //>>includeEnd('debug');\n\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return new Int8Array(valuesOrLength);\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return new Uint8Array(valuesOrLength);\n    case ComponentDatatype.SHORT:\n      return new Int16Array(valuesOrLength);\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return new Uint16Array(valuesOrLength);\n    case ComponentDatatype.INT:\n      return new Int32Array(valuesOrLength);\n    case ComponentDatatype.UNSIGNED_INT:\n      return new Uint32Array(valuesOrLength);\n    case ComponentDatatype.FLOAT:\n      return new Float32Array(valuesOrLength);\n    case ComponentDatatype.DOUBLE:\n      return new Float64Array(valuesOrLength);\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Creates a typed view of an array of bytes.\n *\n * @param {ComponentDatatype} componentDatatype The type of the view to create.\n * @param {ArrayBuffer} buffer The buffer storage to use for the view.\n * @param {Number} [byteOffset] The offset, in bytes, to the first element in the view.\n * @param {Number} [length] The number of elements in the view.\n * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} A typed array view of the buffer.\n *\n * @exception {DeveloperError} componentDatatype is not a valid value.\n */\nComponentDatatype.createArrayBufferView = function (\n  componentDatatype,\n  buffer,\n  byteOffset,\n  length\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(componentDatatype)) {\n    throw new DeveloperError(\"componentDatatype is required.\");\n  }\n  if (!defined(buffer)) {\n    throw new DeveloperError(\"buffer is required.\");\n  }\n  //>>includeEnd('debug');\n\n  byteOffset = defaultValue(byteOffset, 0);\n  length = defaultValue(\n    length,\n    (buffer.byteLength - byteOffset) /\n      ComponentDatatype.getSizeInBytes(componentDatatype)\n  );\n\n  switch (componentDatatype) {\n    case ComponentDatatype.BYTE:\n      return new Int8Array(buffer, byteOffset, length);\n    case ComponentDatatype.UNSIGNED_BYTE:\n      return new Uint8Array(buffer, byteOffset, length);\n    case ComponentDatatype.SHORT:\n      return new Int16Array(buffer, byteOffset, length);\n    case ComponentDatatype.UNSIGNED_SHORT:\n      return new Uint16Array(buffer, byteOffset, length);\n    case ComponentDatatype.INT:\n      return new Int32Array(buffer, byteOffset, length);\n    case ComponentDatatype.UNSIGNED_INT:\n      return new Uint32Array(buffer, byteOffset, length);\n    case ComponentDatatype.FLOAT:\n      return new Float32Array(buffer, byteOffset, length);\n    case ComponentDatatype.DOUBLE:\n      return new Float64Array(buffer, byteOffset, length);\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"componentDatatype is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\n\n/**\n * Get the ComponentDatatype from its name.\n *\n * @param {String} name The name of the ComponentDatatype.\n * @returns {ComponentDatatype} The ComponentDatatype.\n *\n * @exception {DeveloperError} name is not a valid value.\n */\nComponentDatatype.fromName = function (name) {\n  switch (name) {\n    case \"BYTE\":\n      return ComponentDatatype.BYTE;\n    case \"UNSIGNED_BYTE\":\n      return ComponentDatatype.UNSIGNED_BYTE;\n    case \"SHORT\":\n      return ComponentDatatype.SHORT;\n    case \"UNSIGNED_SHORT\":\n      return ComponentDatatype.UNSIGNED_SHORT;\n    case \"INT\":\n      return ComponentDatatype.INT;\n    case \"UNSIGNED_INT\":\n      return ComponentDatatype.UNSIGNED_INT;\n    case \"FLOAT\":\n      return ComponentDatatype.FLOAT;\n    case \"DOUBLE\":\n      return ComponentDatatype.DOUBLE;\n    //>>includeStart('debug', pragmas.debug);\n    default:\n      throw new DeveloperError(\"name is not a valid value.\");\n    //>>includeEnd('debug');\n  }\n};\nexport default Object.freeze(ComponentDatatype);\n","import defined from \"./defined.js\";\n\n/**\n * Describes a compressed texture and contains a compressed texture buffer.\n * @alias CompressedTextureBuffer\n * @constructor\n *\n * @param {PixelFormat} internalFormat The pixel format of the compressed texture.\n * @param {PixelDatatype} pixelDatatype The pixel datatype of the compressed texture.\n * @param {Number} width The width of the texture.\n * @param {Number} height The height of the texture.\n * @param {Uint8Array} buffer The compressed texture buffer.\n */\nfunction CompressedTextureBuffer(\n  internalFormat,\n  pixelDatatype,\n  width,\n  height,\n  buffer\n) {\n  this._format = internalFormat;\n  this._datatype = pixelDatatype;\n  this._width = width;\n  this._height = height;\n  this._buffer = buffer;\n}\n\nObject.defineProperties(CompressedTextureBuffer.prototype, {\n  /**\n   * The format of the compressed texture.\n   * @type PixelFormat\n   * @readonly\n   * @memberof CompressedTextureBuffer.prototype\n   */\n  internalFormat: {\n    get: function () {\n      return this._format;\n    },\n  },\n  /**\n   * The datatype of the compressed texture.\n   * @type PixelDatatype\n   * @readonly\n   * @memberof CompressedTextureBuffer.prototype\n   */\n  pixelDatatype: {\n    get: function () {\n      return this._datatype;\n    },\n  },\n  /**\n   * The width of the texture.\n   * @type Number\n   * @readonly\n   * @memberof CompressedTextureBuffer.prototype\n   */\n  width: {\n    get: function () {\n      return this._width;\n    },\n  },\n  /**\n   * The height of the texture.\n   * @type Number\n   * @readonly\n   * @memberof CompressedTextureBuffer.prototype\n   */\n  height: {\n    get: function () {\n      return this._height;\n    },\n  },\n  /**\n   * The compressed texture buffer.\n   * @type Uint8Array\n   * @readonly\n   * @memberof CompressedTextureBuffer.prototype\n   */\n  bufferView: {\n    get: function () {\n      return this._buffer;\n    },\n  },\n});\n\n/**\n * Creates a shallow clone of a compressed texture buffer.\n *\n * @param {CompressedTextureBuffer} object The compressed texture buffer to be cloned.\n * @return {CompressedTextureBuffer} A shallow clone of the compressed texture buffer.\n */\nCompressedTextureBuffer.clone = function (object) {\n  if (!defined(object)) {\n    return undefined;\n  }\n\n  return new CompressedTextureBuffer(\n    object._format,\n    object._datatype,\n    object._width,\n    object._height,\n    object._buffer\n  );\n};\n\n/**\n * Creates a shallow clone of this compressed texture buffer.\n *\n * @return {CompressedTextureBuffer} A shallow clone of the compressed texture buffer.\n */\nCompressedTextureBuffer.prototype.clone = function () {\n  return CompressedTextureBuffer.clone(this);\n};\nexport default CompressedTextureBuffer;\n","import Check from \"./Check.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Spline from \"./Spline.js\";\n\n/**\n * A spline that evaluates to a constant value. Although this follows the {@link Spline} interface,\n * it does not maintain an internal array of times since its value never changes.\n *\n * @alias ConstantSpline\n * @constructor\n *\n * @param {Number|Cartesian3|Quaternion} value The constant value that the spline evaluates to.\n *\n * @example\n * const position = new Cesium.Cartesian3(1.0, 2.0, 3.0);\n * const spline = new Cesium.ConstantSpline(position);\n *\n * const p0 = spline.evaluate(0.0);\n *\n * @see LinearSpline\n * @see HermiteSpline\n * @see CatmullRomSpline\n * @see QuaternionSpline\n * @see MorphWeightSpline\n */\nfunction ConstantSpline(value) {\n  this._value = value;\n  this._valueType = Spline.getPointType(value);\n}\n\nObject.defineProperties(ConstantSpline.prototype, {\n  /**\n   * The constant value that the spline evaluates to.\n   *\n   * @memberof ConstantSpline.prototype\n   *\n   * @type {Number|Cartesian3|Quaternion}\n   * @readonly\n   */\n  value: {\n    get: function () {\n      return this._value;\n    },\n  },\n});\n\n/**\n * Finds an index <code>i</code> in <code>times</code> such that the parameter\n * <code>time</code> is in the interval <code>[times[i], times[i + 1]]</code>.\n *\n * Since a constant spline has no internal times array, this will throw an error.\n * @function\n *\n * @param {Number} time The time.\n *\n * @exception {DeveloperError} findTimeInterval cannot be called on a ConstantSpline.\n */\nConstantSpline.prototype.findTimeInterval = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  throw new DeveloperError(\n    \"findTimeInterval cannot be called on a ConstantSpline.\"\n  );\n  //>>includeEnd('debug');\n};\n\n/**\n * Wraps the given time to the period covered by the spline.\n * @function\n *\n * @param {Number} time The time.\n * @return {Number} The time, wrapped around to the updated animation.\n */\nConstantSpline.prototype.wrapTime = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"time\", time);\n  //>>includeEnd('debug');\n\n  return 0.0;\n};\n\n/**\n * Clamps the given time to the period covered by the spline.\n * @function\n *\n * @param {Number} time The time.\n * @return {Number} The time, clamped to the animation period.\n */\nConstantSpline.prototype.clampTime = function (time) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"time\", time);\n  //>>includeEnd('debug');\n\n  return 0.0;\n};\n\n/**\n * Evaluates the curve at a given time.\n * @function\n *\n * @param {Number} time The time at which to evaluate the curve.\n * @param {Cartesian3|Quaternion} [result] The object onto which to store the result.\n * @returns {Number|Cartesian3|Quaternion} The modified result parameter or the value that the constant spline represents.\n */\nConstantSpline.prototype.evaluate = function (time, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"time\", time);\n  //>>includeEnd('debug');\n\n  const value = this._value;\n  const ValueType = this._valueType;\n\n  if (ValueType === Number) {\n    return value;\n  }\n\n  return ValueType.clone(value, result);\n};\n\nexport default ConstantSpline;\n","import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CoplanarPolygonGeometryLibrary from \"./CoplanarPolygonGeometryLibrary.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryInstance from \"./GeometryInstance.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport Quaternion from \"./Quaternion.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\nconst scratchPosition = new Cartesian3();\nconst scratchBR = new BoundingRectangle();\nconst stScratch = new Cartesian2();\nconst textureCoordinatesOrigin = new Cartesian2();\nconst scratchNormal = new Cartesian3();\nconst scratchTangent = new Cartesian3();\nconst scratchBitangent = new Cartesian3();\nconst centerScratch = new Cartesian3();\nconst axis1Scratch = new Cartesian3();\nconst axis2Scratch = new Cartesian3();\nconst quaternionScratch = new Quaternion();\nconst textureMatrixScratch = new Matrix3();\nconst tangentRotationScratch = new Matrix3();\nconst surfaceNormalScratch = new Cartesian3();\n\nfunction createGeometryFromPolygon(\n  polygon,\n  vertexFormat,\n  boundingRectangle,\n  stRotation,\n  hardcodedTextureCoordinates,\n  projectPointTo2D,\n  normal,\n  tangent,\n  bitangent\n) {\n  const positions = polygon.positions;\n  let indices = PolygonPipeline.triangulate(polygon.positions2D, polygon.holes);\n\n  /* If polygon is completely unrenderable, just use the first three vertices */\n  if (indices.length < 3) {\n    indices = [0, 1, 2];\n  }\n\n  const newIndices = IndexDatatype.createTypedArray(\n    positions.length,\n    indices.length\n  );\n  newIndices.set(indices);\n\n  let textureMatrix = textureMatrixScratch;\n  if (stRotation !== 0.0) {\n    let rotation = Quaternion.fromAxisAngle(\n      normal,\n      stRotation,\n      quaternionScratch\n    );\n    textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n    if (vertexFormat.tangent || vertexFormat.bitangent) {\n      rotation = Quaternion.fromAxisAngle(\n        normal,\n        -stRotation,\n        quaternionScratch\n      );\n      const tangentRotation = Matrix3.fromQuaternion(\n        rotation,\n        tangentRotationScratch\n      );\n\n      tangent = Cartesian3.normalize(\n        Matrix3.multiplyByVector(tangentRotation, tangent, tangent),\n        tangent\n      );\n      if (vertexFormat.bitangent) {\n        bitangent = Cartesian3.normalize(\n          Cartesian3.cross(normal, tangent, bitangent),\n          bitangent\n        );\n      }\n    }\n  } else {\n    textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n  }\n\n  const stOrigin = textureCoordinatesOrigin;\n  if (vertexFormat.st) {\n    stOrigin.x = boundingRectangle.x;\n    stOrigin.y = boundingRectangle.y;\n  }\n\n  const length = positions.length;\n  const size = length * 3;\n  const flatPositions = new Float64Array(size);\n  const normals = vertexFormat.normal ? new Float32Array(size) : undefined;\n  const tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\n  const bitangents = vertexFormat.bitangent\n    ? new Float32Array(size)\n    : undefined;\n  const textureCoordinates = vertexFormat.st\n    ? new Float32Array(length * 2)\n    : undefined;\n\n  let positionIndex = 0;\n  let normalIndex = 0;\n  let bitangentIndex = 0;\n  let tangentIndex = 0;\n  let stIndex = 0;\n\n  for (let i = 0; i < length; i++) {\n    const position = positions[i];\n    flatPositions[positionIndex++] = position.x;\n    flatPositions[positionIndex++] = position.y;\n    flatPositions[positionIndex++] = position.z;\n\n    if (vertexFormat.st) {\n      if (\n        defined(hardcodedTextureCoordinates) &&\n        hardcodedTextureCoordinates.positions.length === length\n      ) {\n        textureCoordinates[stIndex++] =\n          hardcodedTextureCoordinates.positions[i].x;\n        textureCoordinates[stIndex++] =\n          hardcodedTextureCoordinates.positions[i].y;\n      } else {\n        const p = Matrix3.multiplyByVector(\n          textureMatrix,\n          position,\n          scratchPosition\n        );\n        const st = projectPointTo2D(p, stScratch);\n        Cartesian2.subtract(st, stOrigin, st);\n\n        const stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\n        const sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\n        textureCoordinates[stIndex++] = stx;\n        textureCoordinates[stIndex++] = sty;\n      }\n    }\n\n    if (vertexFormat.normal) {\n      normals[normalIndex++] = normal.x;\n      normals[normalIndex++] = normal.y;\n      normals[normalIndex++] = normal.z;\n    }\n\n    if (vertexFormat.tangent) {\n      tangents[tangentIndex++] = tangent.x;\n      tangents[tangentIndex++] = tangent.y;\n      tangents[tangentIndex++] = tangent.z;\n    }\n\n    if (vertexFormat.bitangent) {\n      bitangents[bitangentIndex++] = bitangent.x;\n      bitangents[bitangentIndex++] = bitangent.y;\n      bitangents[bitangentIndex++] = bitangent.z;\n    }\n  }\n\n  const attributes = new GeometryAttributes();\n\n  if (vertexFormat.position) {\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: flatPositions,\n    });\n  }\n\n  if (vertexFormat.normal) {\n    attributes.normal = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: normals,\n    });\n  }\n\n  if (vertexFormat.tangent) {\n    attributes.tangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: tangents,\n    });\n  }\n\n  if (vertexFormat.bitangent) {\n    attributes.bitangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: bitangents,\n    });\n  }\n\n  if (vertexFormat.st) {\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: textureCoordinates,\n    });\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: newIndices,\n    primitiveType: PrimitiveType.TRIANGLES,\n  });\n}\n\n/**\n * A description of a polygon composed of arbitrary coplanar positions.\n *\n * @alias CoplanarPolygonGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {PolygonHierarchy} [options.textureCoordinates] Texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points.\n *\n * @example\n * const polygonGeometry = new Cesium.CoplanarPolygonGeometry({\n *  polygonHierarchy: new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArrayHeights([\n *      -90.0, 30.0, 0.0,\n *      -90.0, 30.0, 300000.0,\n *      -80.0, 30.0, 300000.0,\n *      -80.0, 30.0, 0.0\n *   ]))\n * });\n *\n */\nfunction CoplanarPolygonGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const polygonHierarchy = options.polygonHierarchy;\n  const textureCoordinates = options.textureCoordinates;\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.polygonHierarchy\", polygonHierarchy);\n  //>>includeEnd('debug');\n\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\n  this._polygonHierarchy = polygonHierarchy;\n  this._stRotation = defaultValue(options.stRotation, 0.0);\n  this._ellipsoid = Ellipsoid.clone(\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\n  );\n  this._workerName = \"createCoplanarPolygonGeometry\";\n  this._textureCoordinates = textureCoordinates;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    PolygonGeometryLibrary.computeHierarchyPackedLength(\n      polygonHierarchy,\n      Cartesian3\n    ) +\n    VertexFormat.packedLength +\n    Ellipsoid.packedLength +\n    (defined(textureCoordinates)\n      ? PolygonGeometryLibrary.computeHierarchyPackedLength(\n          textureCoordinates,\n          Cartesian2\n        )\n      : 1) +\n    2;\n}\n\n/**\n * A description of a coplanar polygon from an array of positions.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {PolygonHierarchy} [options.textureCoordinates] Texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points.\n * @returns {CoplanarPolygonGeometry}\n *\n * @example\n * // create a polygon from points\n * const polygon = Cesium.CoplanarPolygonGeometry.fromPositions({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0,\n *     -75.0, 30.0,\n *     -70.0, 30.0,\n *     -68.0, 40.0\n *   ])\n * });\n * const geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n *\n * @see PolygonGeometry#createGeometry\n */\nCoplanarPolygonGeometry.fromPositions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.positions\", options.positions);\n  //>>includeEnd('debug');\n\n  const newOptions = {\n    polygonHierarchy: {\n      positions: options.positions,\n    },\n    vertexFormat: options.vertexFormat,\n    stRotation: options.stRotation,\n    ellipsoid: options.ellipsoid,\n    textureCoordinates: options.textureCoordinates,\n  };\n  return new CoplanarPolygonGeometry(newOptions);\n};\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CoplanarPolygonGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCoplanarPolygonGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n    value._polygonHierarchy,\n    array,\n    startingIndex,\n    Cartesian3\n  );\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._stRotation;\n  if (defined(value._textureCoordinates)) {\n    startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n      value._textureCoordinates,\n      array,\n      startingIndex,\n      Cartesian2\n    );\n  } else {\n    array[startingIndex++] = -1.0;\n  }\n  array[startingIndex++] = value.packedLength;\n\n  return array;\n};\n\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nconst scratchVertexFormat = new VertexFormat();\nconst scratchOptions = {\n  polygonHierarchy: {},\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CoplanarPolygonGeometry} [result] The object into which to store the result.\n * @returns {CoplanarPolygonGeometry} The modified result parameter or a new CoplanarPolygonGeometry instance if one was not provided.\n */\nCoplanarPolygonGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  const polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(\n    array,\n    startingIndex,\n    Cartesian3\n  );\n  startingIndex = polygonHierarchy.startingIndex;\n  delete polygonHierarchy.startingIndex;\n\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  const vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  const stRotation = array[startingIndex++];\n  const textureCoordinates =\n    array[startingIndex] === -1.0\n      ? undefined\n      : PolygonGeometryLibrary.unpackPolygonHierarchy(\n          array,\n          startingIndex,\n          Cartesian2\n        );\n  if (defined(textureCoordinates)) {\n    startingIndex = textureCoordinates.startingIndex;\n    delete textureCoordinates.startingIndex;\n  } else {\n    startingIndex++;\n  }\n  const packedLength = array[startingIndex++];\n\n  if (!defined(result)) {\n    result = new CoplanarPolygonGeometry(scratchOptions);\n  }\n\n  result._polygonHierarchy = polygonHierarchy;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._stRotation = stRotation;\n  result._textureCoordinates = textureCoordinates;\n  result.packedLength = packedLength;\n\n  return result;\n};\n\n/**\n * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\n *\n * @param {CoplanarPolygonGeometry} polygonGeometry A description of the polygon.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCoplanarPolygonGeometry.createGeometry = function (polygonGeometry) {\n  const vertexFormat = polygonGeometry._vertexFormat;\n  const polygonHierarchy = polygonGeometry._polygonHierarchy;\n  const stRotation = polygonGeometry._stRotation;\n  const textureCoordinates = polygonGeometry._textureCoordinates;\n  const hasTextureCoordinates = defined(textureCoordinates);\n\n  let outerPositions = polygonHierarchy.positions;\n  outerPositions = arrayRemoveDuplicates(\n    outerPositions,\n    Cartesian3.equalsEpsilon,\n    true\n  );\n  if (outerPositions.length < 3) {\n    return;\n  }\n\n  let normal = scratchNormal;\n  let tangent = scratchTangent;\n  let bitangent = scratchBitangent;\n  let axis1 = axis1Scratch;\n  const axis2 = axis2Scratch;\n\n  const validGeometry = CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments(\n    outerPositions,\n    centerScratch,\n    axis1,\n    axis2\n  );\n  if (!validGeometry) {\n    return undefined;\n  }\n\n  normal = Cartesian3.cross(axis1, axis2, normal);\n  normal = Cartesian3.normalize(normal, normal);\n\n  if (\n    !Cartesian3.equalsEpsilon(\n      centerScratch,\n      Cartesian3.ZERO,\n      CesiumMath.EPSILON6\n    )\n  ) {\n    const surfaceNormal = polygonGeometry._ellipsoid.geodeticSurfaceNormal(\n      centerScratch,\n      surfaceNormalScratch\n    );\n    if (Cartesian3.dot(normal, surfaceNormal) < 0) {\n      normal = Cartesian3.negate(normal, normal);\n      axis1 = Cartesian3.negate(axis1, axis1);\n    }\n  }\n\n  const projectPoints = CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction(\n    centerScratch,\n    axis1,\n    axis2\n  );\n  const projectPoint = CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction(\n    centerScratch,\n    axis1,\n    axis2\n  );\n\n  if (vertexFormat.tangent) {\n    tangent = Cartesian3.clone(axis1, tangent);\n  }\n  if (vertexFormat.bitangent) {\n    bitangent = Cartesian3.clone(axis2, bitangent);\n  }\n\n  const results = PolygonGeometryLibrary.polygonsFromHierarchy(\n    polygonHierarchy,\n    hasTextureCoordinates,\n    projectPoints,\n    false\n  );\n  const hierarchy = results.hierarchy;\n  const polygons = results.polygons;\n\n  const dummyFunction = function (identity) {\n    return identity;\n  };\n\n  const textureCoordinatePolygons = hasTextureCoordinates\n    ? PolygonGeometryLibrary.polygonsFromHierarchy(\n        textureCoordinates,\n        true,\n        dummyFunction,\n        false\n      ).polygons\n    : undefined;\n\n  if (hierarchy.length === 0) {\n    return;\n  }\n  outerPositions = hierarchy[0].outerRing;\n\n  const boundingSphere = BoundingSphere.fromPoints(outerPositions);\n  const boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(\n    normal,\n    projectPoint,\n    outerPositions,\n    stRotation,\n    scratchBR\n  );\n\n  const geometries = [];\n  for (let i = 0; i < polygons.length; i++) {\n    const geometryInstance = new GeometryInstance({\n      geometry: createGeometryFromPolygon(\n        polygons[i],\n        vertexFormat,\n        boundingRectangle,\n        stRotation,\n        hasTextureCoordinates ? textureCoordinatePolygons[i] : undefined,\n        projectPoint,\n        normal,\n        tangent,\n        bitangent\n      ),\n    });\n\n    geometries.push(geometryInstance);\n  }\n\n  const geometry = GeometryPipeline.combineInstances(geometries)[0];\n  geometry.attributes.position.values = new Float64Array(\n    geometry.attributes.position.values\n  );\n  geometry.indices = IndexDatatype.createTypedArray(\n    geometry.attributes.position.values.length / 3,\n    geometry.indices\n  );\n\n  const attributes = geometry.attributes;\n  if (!vertexFormat.position) {\n    delete attributes.position;\n  }\n  return new Geometry({\n    attributes: attributes,\n    indices: geometry.indices,\n    primitiveType: geometry.primitiveType,\n    boundingSphere: boundingSphere,\n  });\n};\nexport default CoplanarPolygonGeometry;\n","import Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport OrientedBoundingBox from \"./OrientedBoundingBox.js\";\n\n/**\n * @private\n */\nconst CoplanarPolygonGeometryLibrary = {};\n\nconst scratchIntersectionPoint = new Cartesian3();\nconst scratchXAxis = new Cartesian3();\nconst scratchYAxis = new Cartesian3();\nconst scratchZAxis = new Cartesian3();\nconst obbScratch = new OrientedBoundingBox();\n\nCoplanarPolygonGeometryLibrary.validOutline = function (positions) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"positions\", positions);\n  //>>includeEnd('debug');\n\n  const orientedBoundingBox = OrientedBoundingBox.fromPoints(\n    positions,\n    obbScratch\n  );\n  const halfAxes = orientedBoundingBox.halfAxes;\n  const xAxis = Matrix3.getColumn(halfAxes, 0, scratchXAxis);\n  const yAxis = Matrix3.getColumn(halfAxes, 1, scratchYAxis);\n  const zAxis = Matrix3.getColumn(halfAxes, 2, scratchZAxis);\n\n  const xMag = Cartesian3.magnitude(xAxis);\n  const yMag = Cartesian3.magnitude(yAxis);\n  const zMag = Cartesian3.magnitude(zAxis);\n\n  // If all the points are on a line return undefined because we can't draw a polygon\n  return !(\n    (xMag === 0 && (yMag === 0 || zMag === 0)) ||\n    (yMag === 0 && zMag === 0)\n  );\n};\n\n// call after removeDuplicates\nCoplanarPolygonGeometryLibrary.computeProjectTo2DArguments = function (\n  positions,\n  centerResult,\n  planeAxis1Result,\n  planeAxis2Result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"positions\", positions);\n  Check.defined(\"centerResult\", centerResult);\n  Check.defined(\"planeAxis1Result\", planeAxis1Result);\n  Check.defined(\"planeAxis2Result\", planeAxis2Result);\n  //>>includeEnd('debug');\n\n  const orientedBoundingBox = OrientedBoundingBox.fromPoints(\n    positions,\n    obbScratch\n  );\n  const halfAxes = orientedBoundingBox.halfAxes;\n  const xAxis = Matrix3.getColumn(halfAxes, 0, scratchXAxis);\n  const yAxis = Matrix3.getColumn(halfAxes, 1, scratchYAxis);\n  const zAxis = Matrix3.getColumn(halfAxes, 2, scratchZAxis);\n\n  const xMag = Cartesian3.magnitude(xAxis);\n  const yMag = Cartesian3.magnitude(yAxis);\n  const zMag = Cartesian3.magnitude(zAxis);\n  const min = Math.min(xMag, yMag, zMag);\n\n  // If all the points are on a line return undefined because we can't draw a polygon\n  if (\n    (xMag === 0 && (yMag === 0 || zMag === 0)) ||\n    (yMag === 0 && zMag === 0)\n  ) {\n    return false;\n  }\n\n  let planeAxis1;\n  let planeAxis2;\n\n  if (min === yMag || min === zMag) {\n    planeAxis1 = xAxis;\n  }\n  if (min === xMag) {\n    planeAxis1 = yAxis;\n  } else if (min === zMag) {\n    planeAxis2 = yAxis;\n  }\n  if (min === xMag || min === yMag) {\n    planeAxis2 = zAxis;\n  }\n\n  Cartesian3.normalize(planeAxis1, planeAxis1Result);\n  Cartesian3.normalize(planeAxis2, planeAxis2Result);\n  Cartesian3.clone(orientedBoundingBox.center, centerResult);\n  return true;\n};\n\nfunction projectTo2D(position, center, axis1, axis2, result) {\n  const v = Cartesian3.subtract(position, center, scratchIntersectionPoint);\n  const x = Cartesian3.dot(axis1, v);\n  const y = Cartesian3.dot(axis2, v);\n\n  return Cartesian2.fromElements(x, y, result);\n}\n\nCoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction = function (\n  center,\n  axis1,\n  axis2\n) {\n  return function (positions) {\n    const positionResults = new Array(positions.length);\n    for (let i = 0; i < positions.length; i++) {\n      positionResults[i] = projectTo2D(positions[i], center, axis1, axis2);\n    }\n\n    return positionResults;\n  };\n};\n\nCoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction = function (\n  center,\n  axis1,\n  axis2\n) {\n  return function (position, result) {\n    return projectTo2D(position, center, axis1, axis2, result);\n  };\n};\nexport default CoplanarPolygonGeometryLibrary;\n","import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CoplanarPolygonGeometryLibrary from \"./CoplanarPolygonGeometryLibrary.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryInstance from \"./GeometryInstance.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\n\nfunction createGeometryFromPositions(positions) {\n  const length = positions.length;\n  const flatPositions = new Float64Array(length * 3);\n  const indices = IndexDatatype.createTypedArray(length, length * 2);\n\n  let positionIndex = 0;\n  let index = 0;\n\n  for (let i = 0; i < length; i++) {\n    const position = positions[i];\n    flatPositions[positionIndex++] = position.x;\n    flatPositions[positionIndex++] = position.y;\n    flatPositions[positionIndex++] = position.z;\n\n    indices[index++] = i;\n    indices[index++] = (i + 1) % length;\n  }\n\n  const attributes = new GeometryAttributes({\n    position: new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: flatPositions,\n    }),\n  });\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.LINES,\n  });\n}\n\n/**\n * A description of the outline of a polygon composed of arbitrary coplanar positions.\n *\n * @alias CoplanarPolygonOutlineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n *\n * @see CoplanarPolygonOutlineGeometry.createGeometry\n *\n * @example\n * const polygonOutline = new Cesium.CoplanarPolygonOutlineGeometry({\n *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n *      -90.0, 30.0, 0.0,\n *      -90.0, 30.0, 1000.0,\n *      -80.0, 30.0, 1000.0,\n *      -80.0, 30.0, 0.0\n *   ])\n * });\n * const geometry = Cesium.CoplanarPolygonOutlineGeometry.createGeometry(polygonOutline);\n */\nfunction CoplanarPolygonOutlineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const polygonHierarchy = options.polygonHierarchy;\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.polygonHierarchy\", polygonHierarchy);\n  //>>includeEnd('debug');\n\n  this._polygonHierarchy = polygonHierarchy;\n  this._workerName = \"createCoplanarPolygonOutlineGeometry\";\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    PolygonGeometryLibrary.computeHierarchyPackedLength(\n      polygonHierarchy,\n      Cartesian3\n    ) + 1;\n}\n\n/**\n * A description of a coplanar polygon outline from an array of positions.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n * @returns {CoplanarPolygonOutlineGeometry}\n */\nCoplanarPolygonOutlineGeometry.fromPositions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.positions\", options.positions);\n  //>>includeEnd('debug');\n\n  const newOptions = {\n    polygonHierarchy: {\n      positions: options.positions,\n    },\n  };\n  return new CoplanarPolygonOutlineGeometry(newOptions);\n};\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CoplanarPolygonOutlineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCoplanarPolygonOutlineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n    value._polygonHierarchy,\n    array,\n    startingIndex,\n    Cartesian3\n  );\n\n  array[startingIndex] = value.packedLength;\n\n  return array;\n};\n\nconst scratchOptions = {\n  polygonHierarchy: {},\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CoplanarPolygonOutlineGeometry} [result] The object into which to store the result.\n * @returns {CoplanarPolygonOutlineGeometry} The modified result parameter or a new CoplanarPolygonOutlineGeometry instance if one was not provided.\n */\nCoplanarPolygonOutlineGeometry.unpack = function (\n  array,\n  startingIndex,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  const polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(\n    array,\n    startingIndex,\n    Cartesian3\n  );\n  startingIndex = polygonHierarchy.startingIndex;\n  delete polygonHierarchy.startingIndex;\n  const packedLength = array[startingIndex];\n\n  if (!defined(result)) {\n    result = new CoplanarPolygonOutlineGeometry(scratchOptions);\n  }\n\n  result._polygonHierarchy = polygonHierarchy;\n  result.packedLength = packedLength;\n\n  return result;\n};\n\n/**\n * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\n *\n * @param {CoplanarPolygonOutlineGeometry} polygonGeometry A description of the polygon.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCoplanarPolygonOutlineGeometry.createGeometry = function (polygonGeometry) {\n  const polygonHierarchy = polygonGeometry._polygonHierarchy;\n\n  let outerPositions = polygonHierarchy.positions;\n  outerPositions = arrayRemoveDuplicates(\n    outerPositions,\n    Cartesian3.equalsEpsilon,\n    true\n  );\n  if (outerPositions.length < 3) {\n    return;\n  }\n  const isValid = CoplanarPolygonGeometryLibrary.validOutline(outerPositions);\n  if (!isValid) {\n    return undefined;\n  }\n\n  const polygons = PolygonGeometryLibrary.polygonOutlinesFromHierarchy(\n    polygonHierarchy,\n    false\n  );\n\n  if (polygons.length === 0) {\n    return undefined;\n  }\n\n  const geometries = [];\n\n  for (let i = 0; i < polygons.length; i++) {\n    const geometryInstance = new GeometryInstance({\n      geometry: createGeometryFromPositions(polygons[i]),\n    });\n    geometries.push(geometryInstance);\n  }\n\n  const geometry = GeometryPipeline.combineInstances(geometries)[0];\n  const boundingSphere = BoundingSphere.fromPoints(polygonHierarchy.positions);\n\n  return new Geometry({\n    attributes: geometry.attributes,\n    indices: geometry.indices,\n    primitiveType: geometry.primitiveType,\n    boundingSphere: boundingSphere,\n  });\n};\nexport default CoplanarPolygonOutlineGeometry;\n"],"names":["ArcGISTiledElevationTerrainProvider","options","defined","url","DeveloperError","this","_resource","undefined","_credit","_tilingScheme","_levelZeroMaximumGeometricError","_maxLevel","_terrainDataStructure","_ready","_width","_height","_encoding","token","_hasAvailability","_tilesAvailable","_tilesAvailablityLoaded","_availableCache","that","ellipsoid","defaultValue","Ellipsoid","_readyPromise","Promise","resolve","then","resource","Resource","appendForwardSlash","getDerivedResource","queryParameters","f","fetchJson","metadata","copyrightText","Credit","spatialReference","wkid","latestWkid","extent","tilingSchemeOptions","rectangle","Rectangle","xmin","ymin","xmax","ymax","GeographicTilingScheme","reject","RuntimeError","rectangleSouthwestInMeters","Cartesian2","rectangleNortheastInMeters","WebMercatorTilingScheme","tileInfo","rows","cols","format","HeightmapEncoding","_lodCount","lods","length","capabilities","indexOf","TileAvailability","addAvailableTileRange","getNumberOfXTilesAtLevel","getNumberOfYTilesAtLevel","TerrainProvider","bandCount","elementMultiplier","lowestEncodedHeight","minValues","highestEncodedHeight","maxValues","catch","error","message","TileProviderError","_errorEvent","Event","isTileAvailable","level","x","y","tilesAvailablityLoaded","tilesAvailable","findRange","origin","width","height","data","endCol","endRow","value","endingIndices","range","startX","startY","endX","endY","corner","doneX","doneY","push","col","requestAvailability","xOffset","Math","floor","yOffset","dim","min","availableCache","request","Request","throttle","throttleByServer","type","RequestType","promise","result","available","ranges","every","val","positions","pop","concat","computeAvailability","i","finally","Object","defineProperties","prototype","errorEvent","get","credit","ready","tilingScheme","readyPromise","hasWaterMask","hasVertexNormals","availability","requestTileGeometry","tileResource","hasAvailability","availabilityRequest","availabilityPromise","availabilityResult","fetchArrayBuffer","all","HeightmapTerrainData","buffer","childTileMask","computeChildMaskForTile","structure","encoding","state","RequestState","cancel","deferred","getLevelMaximumGeometricError","getTileDataAvailable","loadTileDataAvailability","BingMapsGeocoderService","key","_key","culture","geocode","query","Check","fetchJsonp","resourceSets","resources","map","bbox","south","west","north","east","displayName","name","destination","scratchTimeVec","Cartesian4","scratchTemp0","Cartesian3","scratchTemp1","firstTangentScratch","lastTangentScratch","CatmullRomSpline","points","times","firstTangent","lastTangent","n","_times","_points","_firstTangent","_lastTangent","_evaluateFunction","spline","t0","invSpan","p0","p1","time","u","_lastTimeIndex","findTimeInterval","timeVec","p2","p3","coefs","z","w","Matrix4","HermiteSpline","catmullRomCoefficientMatrix","createEvaluateFunction","Spline","wrapTime","clampTime","evaluate","CircleGeometry","radius","ellipseGeometryOptions","center","semiMajorAxis","semiMinorAxis","extrudedHeight","granularity","vertexFormat","stRotation","shadowVolume","_ellipseGeometry","EllipseGeometry","_workerName","packedLength","pack","array","startingIndex","scratchEllipseGeometry","scratchOptions","VertexFormat","unpack","ellipseGeometry","_center","_ellipsoid","_extrudedHeight","_granularity","_vertexFormat","_stRotation","_shadowVolume","_semiMajorAxis","_semiMinorAxis","createGeometry","circleGeometry","createShadowVolume","minHeightFunc","maxHeightFunc","minHeight","maxHeight","textureCoordinateRotationPoints","CircleOutlineGeometry","numberOfVerticalLines","EllipseOutlineGeometry","_numberOfVerticalLines","VERSION","scratchDiagonalCartesianNE","scratchDiagonalCartesianSW","scratchDiagonalCartographic","scratchCenterCartesian","scratchSurfaceCartesian","scratchBoundingSphere","scratchCorners","scratchTileXY","ApproximateTerrainHeights","getTileXYLevel","lastLevelX","lastLevelY","currentX","currentY","maxLevel","_terrainHeightsMaxLevel","failed","j","positionToTileXY","initialize","initPromise","_initPromise","json","_terrainHeights","getMinimumMaximumHeights","xyLevel","minTerrainHeight","_defaultMinTerrainHeight","maxTerrainHeight","_defaultMaxTerrainHeight","heights","cartographicToCartesian","surfacePosition","scaleToGeodeticSurface","distance","max","minimumTerrainHeight","maximumTerrainHeight","getBoundingSphere","initialized","freeze","NONE","GEODESIC","RHUMB","AssociativeArray","_array","_hash","values","contains","set","remove","hasValue","splice","removeAll","RIGHT_SHIFT","AttributeCompression","vector","rangeMax","magSquared","abs","octEncodeInRange","octEncodeScratch","uint8ForceArray","Uint8Array","forceUint8","octEncodeToCartesian4","octDecodeInRange","oldVX","octDecode","octDecodeFromCartesian4","encoded","xOct16","yOct16","octPackFloat","scratchEncodeCart2","zigZagDecode","octEncodeFloat","octEncode","octDecodeFloat","temp","octPack","v1","v2","v3","encoded1","encoded2","encoded3","octUnpack","packed","encodedFloat1","encodedFloat2","compressTextureCoordinates","textureCoordinates","decompressTextureCoordinates","compressed","xZeroTo4095","zigZagDeltaDecode","uBuffer","vBuffer","heightBuffer","count","v","dequantize","typedArray","componentDatatype","componentsPerAttribute","divisor","dequantizedTypedArray","Float32Array","index","decodeRGB565","expectedLength","normalize5","red","green","blue","offset","AxisAlignedBoundingBox","minimum","maximum","fromCorners","fromPoints","minimumX","minimumY","minimumZ","maximumX","maximumY","maximumZ","p","clone","box","equals","left","right","intersectScratch","intersectPlane","plane","h","normal","e","s","BoundingRectangle","defaultProjection","fromRectangleLowerLeft","fromRectangleUpperRight","fromRectangle","projection","lowerLeft","project","upperRight","union","lowerLeftX","lowerLeftY","upperRightX","upperRightY","expand","point","intersect","leftX","leftY","rightX","rightY","BoundingSphere","fromPointsXMin","fromPointsYMin","fromPointsZMin","fromPointsXMax","fromPointsYMax","fromPointsZMax","fromPointsCurrentPos","fromPointsScratch","fromPointsRitterCenter","fromPointsMinBoxPt","fromPointsMaxBoxPt","fromPointsNaiveCenterScratch","volumeConstant","currentPos","xMin","yMin","zMin","xMax","yMax","zMax","numPositions","xSpan","ySpan","zSpan","diameter1","diameter2","maxSpan","ritterCenter","radiusSquared","ritterRadius","sqrt","minBoxPt","maxBoxPt","naiveCenter","naiveRadius","r","oldCenterToPointSquared","oldCenterToPoint","oldToNew","fromRectangle2DLowerLeft","fromRectangle2DUpperRight","fromRectangle2DSouthwest","fromRectangle2DNortheast","fromRectangle2D","fromRectangleWithHeights2D","minimumHeight","maximumHeight","elevation","fromRectangle3DScratch","fromRectangle3D","surfaceHeight","fromVertices","stride","numElements","fromEncodedCartesianVertices","positionsHigh","positionsLow","fromCornerPoints","oppositeCorner","fromEllipsoid","maximumRadius","fromBoundingSpheresScratch","fromBoundingSpheres","boundingSpheres","tmp","fromOrientedBoundingBoxScratchU","fromOrientedBoundingBoxScratchV","fromOrientedBoundingBoxScratchW","fromOrientedBoundingBox","orientedBoundingBox","halfAxes","scratchFromTransformationCenter","scratchFromTransformationScale","fromTransformation","transformation","scale","sphere","unionScratch","unionScratchCenter","leftCenter","leftRadius","rightCenter","rightRadius","toRightCenter","centerSeparation","halfDistanceBetweenTangentPoints","expandScratch","distanceToPlane","transform","distanceSquaredToScratch","distanceSquaredTo","cartesian","diff","transformWithoutScale","scratchCartesian3","computePlaneDistances","position","direction","toCenter","mag","start","stop","projectTo2DNormalScratch","projectTo2DEastScratch","projectTo2DNorthScratch","projectTo2DWestScratch","projectTo2DSouthScratch","projectTo2DCartographicScratch","projectTo2DPositionsScratch","Array","projectTo2DProjection","projectTo2D","geodeticSurfaceNormal","cartographic","cartesianToCartographic","isOccluded","occluder","isBoundingSphereVisible","volume","diffScratch","BoxGeometry","offsetAttribute","_minimum","_maximum","_offsetAttribute","fromDimensions","dimensions","fromAxisAlignedBoundingBox","boundingBox","scratchMin","scratchMax","scratchVertexFormat","unitBoxGeometry","boxGeometry","attributes","indices","st","tangent","bitangent","Float64Array","normals","texCoords","tangents","bitangents","Uint16Array","applyOffset","offsetValue","primitiveType","boundingSphere","getUnitBox","BoxOutlineGeometry","_min","_max","fromElements","fromCartesian3","fromCartesian4","packArray","resultLength","isArray","unpackArray","fromArray","maximumComponent","minimumComponent","minimumByComponent","first","second","maximumByComponent","clamp","magnitudeSquared","magnitude","distanceScratch","subtract","distanceSquared","normalize","isNaN","dot","cross","multiplyComponents","divideComponents","add","multiplyByScalar","scalar","divideByScalar","negate","lerpScratch","lerp","end","t","angleBetweenScratch","angleBetweenScratch2","angleBetween","mostOrthogonalAxisScratch","mostOrthogonalAxis","UNIT_X","UNIT_Y","equalsArray","equalsEpsilon","relativeEpsilon","absoluteEpsilon","ZERO","ONE","toString","fromSpherical","spherical","clock","cone","radial","sin","cos","cosine","sine","atan2","UNIT_Z","projectVector","a","b","leftZ","rightZ","midpoint","fromDegrees","longitude","latitude","fromRadians","scratchN","scratchK","wgs84RadiiSquared","radiiSquared","cosLatitude","gamma","fromDegreesArray","coordinates","fromRadiansArray","fromDegreesArrayHeights","fromRadiansArrayHeights","fromColor","color","alpha","UNIT_W","scratchF32Array","scratchU8Array","testU32","Uint32Array","littleEndian","packFloat","unpackFloat","packedFloat","Cartographic","cartesianToCartographicN","cartesianToCartographicP","cartesianToCartographicH","wgs84OneOverRadii","wgs84OneOverRadiiSquared","wgs84CenterToleranceSquared","fromCartesian","oneOverRadii","oneOverRadiiSquared","centerToleranceSquared","_centerToleranceSquared","asin","toCartesian","epsilon","CartographicGeocoderService","splitQuery","match","coordTest","splitCoord","test","LayerInformation","layer","version","isHeightmap","tileUrlTemplates","hasMetadata","availabilityLevels","availabilityTilesLoaded","littleEndianExtensionSize","availabilityPromiseCache","CesiumTerrainProvider","_heightmapWidth","_heightmapStructure","_hasWaterMask","_hasVertexNormals","_requestVertexNormals","requestVertexNormals","_requestWaterMask","requestWaterMask","_requestMetadata","requestMetadata","_availability","_tileCredits","lastResource","layerJsonResource","metadataError","layers","_layers","attribution","overallAvailability","overallMaxZoom","parseMetadataSuccess","requestLayerJson","tiles","heightScale","heightOffset","elementsPerHeight","isBigEndian","maxZoom","maxzoom","numberOfLevelZeroTilesX","numberOfLevelZeroTilesY","scheme","_scheme","extensions","metadataAvailability","availableTiles","rangesAtLevel","yTiles","rangeIndex","yStart","yEnd","_hasMetadata","parentUrl","parentMetadata","parseMetadataFailure","metadataSuccess","levelRanges","layerJsonCredit","metadataFailure","statusCode","tilejson","credits","QuantizedMeshExtensionIds","getRequestHeader","extensionsList","Accept","join","provider","layerToUse","urlTemplates","terrainY","extensionList","headers","_ionEndpoint","externalType","templateValues","byteLength","waterMask","createHeightmapTerrainData","pos","cartesian3Length","BYTES_PER_ELEMENT","boundingSphereLength","cartesian3Elements","encodedVertexLength","bytesPerIndex","triangleLength","view","DataView","getFloat64","getFloat32","horizonOcclusionPoint","vertexCount","getUint32","encodedVertexBuffer","subarray","triangleCount","highest","code","westVertexCount","westIndices","southVertexCount","southIndices","eastVertexCount","eastIndices","northVertexCount","northIndices","encodedNormalBuffer","waterMaskBuffer","extensionId","getUint8","extensionLength","stringLength","availableLevel","skirtHeight","tileXYToRectangle","quantizedVertices","encodedNormals","westSkirtHeight","southSkirtHeight","eastSkirtHeight","northSkirtHeight","createQuantizedMeshTerrainData","getAvailabilityTile","parentLevel","checkLayer","topLayer","cacheKey","deleteFromCache","tile","requestPromise","layerCount","_maximumLevel","layerResult","_getAvailabilityTile","getFailedTypeErrorMessage","actual","expected","typeOf","getUndefinedErrorMessage","func","string","number","lessThan","limit","lessThanOrEquals","greaterThan","greaterThanOrEquals","object","bool","bigint","name1","name2","test1","test2","Clock","currentTime","startTime","stopTime","clockRange","canAnimate","onTick","onStop","_currentTime","_multiplier","_clockStep","_shouldAnimate","_lastSystemTime","multiplier","shouldAnimate","clockStep","tick","currentSystemTime","milliseconds","raiseEvent","UNBOUNDED","CLAMPED","LOOP_STOP","TICK_DEPENDENT","SYSTEM_CLOCK_MULTIPLIER","SYSTEM_CLOCK","hue2rgb","m1","m2","Color","scratchArrayBuffer","scratchUint32Array","scratchUint8Array","fromBytes","byteToFloat","fromAlpha","ArrayBuffer","fromRgba","rgba","fromHsl","hue","saturation","lightness","fromRandom","minimumRed","maximumRed","minimumGreen","maximumGreen","minimumBlue","maximumBlue","minimumAlpha","maximumAlpha","rgbaMatcher","rrggbbaaMatcher","rgbParenthesesMatcher","hslParenthesesMatcher","fromCssColorString","namedColor","replace","toUpperCase","matches","exec","parseInt","parseFloat","substr","floatToByte","other","toCssColorString","toCssHexString","g","hexAlpha","toBytes","toRgba","brighten","darken","withAlpha","multiply","divide","mod","ALICEBLUE","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREEN","DARKGREY","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREEN","GREENYELLOW","GREY","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDAR_BLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREEN","LIGHTGREY","LIGHTPINK","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN","TRANSPARENT","ColorGeometryInstanceAttribute","toValue","ComponentDatatype","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","DOUBLE","Int8Array","Int16Array","Int32Array","valuesOrLength","byteOffset","getSizeInBytes","CompressedTextureBuffer","internalFormat","pixelDatatype","_format","_datatype","_buffer","bufferView","ConstantSpline","_value","_valueType","ValueType","Number","scratchPosition","scratchBR","stScratch","textureCoordinatesOrigin","scratchNormal","scratchTangent","scratchBitangent","centerScratch","axis1Scratch","axis2Scratch","quaternionScratch","textureMatrixScratch","tangentRotationScratch","surfaceNormalScratch","createGeometryFromPolygon","polygon","boundingRectangle","hardcodedTextureCoordinates","projectPointTo2D","positions2D","holes","newIndices","textureMatrix","rotation","tangentRotation","stOrigin","size","flatPositions","positionIndex","normalIndex","bitangentIndex","tangentIndex","stIndex","stx","sty","CoplanarPolygonGeometry","polygonHierarchy","_polygonHierarchy","_textureCoordinates","fromPositions","scratchEllipsoid","polygonGeometry","hasTextureCoordinates","outerPositions","axis1","axis2","surfaceNormal","projectPoints","projectPoint","results","hierarchy","polygons","textureCoordinatePolygons","identity","outerRing","geometries","geometryInstance","geometry","CoplanarPolygonGeometryLibrary","scratchIntersectionPoint","scratchXAxis","scratchYAxis","scratchZAxis","obbScratch","validOutline","xAxis","yAxis","zAxis","xMag","yMag","zMag","computeProjectTo2DArguments","centerResult","planeAxis1Result","planeAxis2Result","planeAxis1","planeAxis2","createProjectPointsTo2DFunction","positionResults","createProjectPointTo2DFunction","createGeometryFromPositions","CoplanarPolygonOutlineGeometry"],"sourceRoot":""}