{"version":3,"file":"js/vender~c77ffe38.6e105f33.js","mappings":"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","sources":["webpack:///../../../node_modules/@babylonjs/core/Bones/bone.js","webpack:///../../../node_modules/@babylonjs/core/Bones/boneIKController.js","webpack:///../../../node_modules/@babylonjs/core/Bones/boneLookController.js","webpack:///../../../node_modules/@babylonjs/core/Bones/skeleton.js","webpack:///../../../node_modules/@babylonjs/core/Buffers/buffer.js","webpack:///../../../node_modules/@babylonjs/core/Buffers/dataBuffer.js","webpack:///../../../node_modules/@babylonjs/core/Buffers/storageBuffer.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/BaseCameraMouseWheelInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/BaseCameraPointersInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/arcRotateCameraGamepadInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/arcRotateCameraKeyboardMoveInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/arcRotateCameraMouseWheelInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/arcRotateCameraPointersInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/freeCameraDeviceOrientationInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/freeCameraGamepadInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/freeCameraKeyboardMoveInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/freeCameraMouseInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/freeCameraMouseWheelInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/freeCameraTouchInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/RigModes/vrRigMode.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/RigModes/webVRRigMode.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/VR/vrCameraMetrics.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/VR/vrDeviceOrientationFreeCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/VR/vrExperienceHelper.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/VR/webVRCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/arcRotateCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/arcRotateCameraInputsManager.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/camera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/cameraInputsManager.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/deviceOrientationCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/freeCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/freeCameraInputsManager.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/arcRotateCameraVRDeviceOrientationInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/flyCameraKeyboardInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/flyCameraMouseInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/followCameraKeyboardMoveInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/followCameraMouseWheelInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/followCameraPointersInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Inputs/freeCameraVirtualJoystickInput.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/flyCameraInputsManager.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/flyCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/followCameraInputsManager.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/followCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/gamepadCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/RigModes/stereoscopicAnaglyphRigMode.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Stereoscopic/anaglyphArcRotateCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Stereoscopic/anaglyphFreeCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Stereoscopic/anaglyphGamepadCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Stereoscopic/anaglyphUniversalCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/RigModes/stereoscopicRigMode.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Stereoscopic/stereoscopicArcRotateCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Stereoscopic/stereoscopicFreeCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Stereoscopic/stereoscopicGamepadCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Stereoscopic/stereoscopicUniversalCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/Stereoscopic/stereoscopicScreenUniversalCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/virtualJoysticksCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/VR/vrDeviceOrientationArcRotateCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/VR/vrDeviceOrientationGamepadCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/targetCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/touchCamera.js","webpack:///../../../node_modules/@babylonjs/core/Cameras/universalCamera.js","webpack:///../../../node_modules/@babylonjs/core/Collisions/collider.js","webpack:///../../../node_modules/@babylonjs/core/Collisions/collisionCoordinator.js","webpack:///../../../node_modules/@babylonjs/core/Collisions/intersectionInfo.js","webpack:///../../../node_modules/@babylonjs/core/Collisions/meshCollisionData.js","webpack:///../../../node_modules/@babylonjs/core/Collisions/pickingInfo.js","webpack:///../../../node_modules/@babylonjs/core/Compat/compatibilityOptions.js","webpack:///../../../node_modules/@babylonjs/core/Compute/computeEffect.js","webpack:///../../../node_modules/@babylonjs/core/Compute/computeShader.js","webpack:///../../../node_modules/@babylonjs/core/Culling/boundingBox.js","webpack:///../../../node_modules/@babylonjs/core/Culling/boundingInfo.js","webpack:///../../../node_modules/@babylonjs/core/Culling/boundingSphere.js","webpack:///../../../node_modules/@babylonjs/core/Culling/Octrees/octreeBlock.js","webpack:///../../../node_modules/@babylonjs/core/Culling/Octrees/octree.js","webpack:///../../../node_modules/@babylonjs/core/Culling/Octrees/octreeSceneComponent.js","webpack:///../../../node_modules/@babylonjs/core/Culling/ray.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { Vector3, Quaternion, Matrix, TmpVectors } from \"../Maths/math.vector.js\";\nimport { ArrayTools } from \"../Misc/arrayTools.js\";\nimport { Node } from \"../node.js\";\nimport { Space } from \"../Maths/math.axis.js\";\n/**\n * Class used to store bone information\n * @see https://doc.babylonjs.com/how_to/how_to_use_bones_and_skeletons\n */\nvar Bone = /** @class */ (function (_super) {\n    __extends(Bone, _super);\n    /**\n     * Create a new bone\n     * @param name defines the bone name\n     * @param skeleton defines the parent skeleton\n     * @param parentBone defines the parent (can be null if the bone is the root)\n     * @param localMatrix defines the local matrix\n     * @param restPose defines the rest pose matrix\n     * @param baseMatrix defines the base matrix\n     * @param index defines index of the bone in the hierarchy\n     */\n    function Bone(\n    /**\n     * defines the bone name\n     */\n    name, skeleton, parentBone, localMatrix, restPose, baseMatrix, index) {\n        if (parentBone === void 0) { parentBone = null; }\n        if (localMatrix === void 0) { localMatrix = null; }\n        if (restPose === void 0) { restPose = null; }\n        if (baseMatrix === void 0) { baseMatrix = null; }\n        if (index === void 0) { index = null; }\n        var _this = _super.call(this, name, skeleton.getScene()) || this;\n        _this.name = name;\n        /**\n         * Gets the list of child bones\n         */\n        _this.children = new Array();\n        /** Gets the animations associated with this bone */\n        _this.animations = new Array();\n        /**\n         * @hidden Internal only\n         * Set this value to map this bone to a different index in the transform matrices\n         * Set this value to -1 to exclude the bone from the transform matrices\n         */\n        _this._index = null;\n        _this._absoluteTransform = new Matrix();\n        _this._invertedAbsoluteTransform = new Matrix();\n        _this._scalingDeterminant = 1;\n        _this._worldTransform = new Matrix();\n        _this._needToDecompose = true;\n        _this._needToCompose = false;\n        /** @hidden */\n        _this._linkedTransformNode = null;\n        /** @hidden */\n        _this._waitingTransformNodeId = null;\n        _this._skeleton = skeleton;\n        _this._localMatrix = localMatrix ? localMatrix.clone() : Matrix.Identity();\n        _this._restPose = restPose ? restPose : _this._localMatrix.clone();\n        _this._baseMatrix = baseMatrix ? baseMatrix : _this._localMatrix.clone();\n        _this._index = index;\n        skeleton.bones.push(_this);\n        _this.setParent(parentBone, false);\n        if (baseMatrix || localMatrix) {\n            _this._updateDifferenceMatrix();\n        }\n        return _this;\n    }\n    Object.defineProperty(Bone.prototype, \"_matrix\", {\n        /** @hidden */\n        get: function () {\n            this._compose();\n            return this._localMatrix;\n        },\n        /** @hidden */\n        set: function (value) {\n            this._needToCompose = false; // in case there was a pending compose\n            // skip if the matrices are the same\n            if (value.updateFlag === this._localMatrix.updateFlag) {\n                return;\n            }\n            this._localMatrix.copyFrom(value);\n            this._markAsDirtyAndDecompose();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the current object class name.\n     * @return the class name\n     */\n    Bone.prototype.getClassName = function () {\n        return \"Bone\";\n    };\n    // Members\n    /**\n     * Gets the parent skeleton\n     * @returns a skeleton\n     */\n    Bone.prototype.getSkeleton = function () {\n        return this._skeleton;\n    };\n    Object.defineProperty(Bone.prototype, \"parent\", {\n        get: function () {\n            return this._parentNode;\n        },\n        set: function (newParent) {\n            this.setParent(newParent);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets parent bone\n     * @returns a bone or null if the bone is the root of the bone hierarchy\n     */\n    Bone.prototype.getParent = function () {\n        return this.parent;\n    };\n    /**\n     * Returns an array containing the root bones\n     * @returns an array containing the root bones\n     */\n    Bone.prototype.getChildren = function () {\n        return this.children;\n    };\n    /**\n     * Gets the node index in matrix array generated for rendering\n     * @returns the node index\n     */\n    Bone.prototype.getIndex = function () {\n        return this._index === null ? this.getSkeleton().bones.indexOf(this) : this._index;\n    };\n    /**\n     * Sets the parent bone\n     * @param parent defines the parent (can be null if the bone is the root)\n     * @param updateDifferenceMatrix defines if the difference matrix must be updated\n     */\n    Bone.prototype.setParent = function (parent, updateDifferenceMatrix) {\n        if (updateDifferenceMatrix === void 0) { updateDifferenceMatrix = true; }\n        if (this.parent === parent) {\n            return;\n        }\n        if (this.parent) {\n            var index = this.parent.children.indexOf(this);\n            if (index !== -1) {\n                this.parent.children.splice(index, 1);\n            }\n        }\n        this._parentNode = parent;\n        if (this.parent) {\n            this.parent.children.push(this);\n        }\n        if (updateDifferenceMatrix) {\n            this._updateDifferenceMatrix();\n        }\n        this.markAsDirty();\n    };\n    /**\n     * Gets the local matrix\n     * @returns a matrix\n     */\n    Bone.prototype.getLocalMatrix = function () {\n        this._compose();\n        return this._localMatrix;\n    };\n    /**\n     * Gets the base matrix (initial matrix which remains unchanged)\n     * @returns the base matrix (as known as bind pose matrix)\n     */\n    Bone.prototype.getBaseMatrix = function () {\n        return this._baseMatrix;\n    };\n    /**\n     * Gets the rest pose matrix\n     * @returns a matrix\n     */\n    Bone.prototype.getRestPose = function () {\n        return this._restPose;\n    };\n    /**\n     * Sets the rest pose matrix\n     * @param matrix the local-space rest pose to set for this bone\n     */\n    Bone.prototype.setRestPose = function (matrix) {\n        this._restPose.copyFrom(matrix);\n    };\n    /**\n     * Gets the bind pose matrix\n     * @returns the bind pose matrix\n     * @deprecated Please use getBaseMatrix instead\n     */\n    Bone.prototype.getBindPose = function () {\n        return this._baseMatrix;\n    };\n    /**\n     * Sets the bind pose matrix\n     * @param matrix the local-space bind pose to set for this bone\n     * @deprecated Please use updateMatrix instead\n     */\n    Bone.prototype.setBindPose = function (matrix) {\n        this.updateMatrix(matrix);\n    };\n    /**\n     * Gets a matrix used to store world matrix (ie. the matrix sent to shaders)\n     */\n    Bone.prototype.getWorldMatrix = function () {\n        return this._worldTransform;\n    };\n    /**\n     * Sets the local matrix to rest pose matrix\n     */\n    Bone.prototype.returnToRest = function () {\n        var _a;\n        if (this._linkedTransformNode) {\n            var localScaling = TmpVectors.Vector3[0];\n            var localRotation = TmpVectors.Quaternion[0];\n            var localPosition = TmpVectors.Vector3[1];\n            this.getRestPose().decompose(localScaling, localRotation, localPosition);\n            this._linkedTransformNode.position.copyFrom(localPosition);\n            this._linkedTransformNode.rotationQuaternion = (_a = this._linkedTransformNode.rotationQuaternion) !== null && _a !== void 0 ? _a : Quaternion.Identity();\n            this._linkedTransformNode.rotationQuaternion.copyFrom(localRotation);\n            this._linkedTransformNode.scaling.copyFrom(localScaling);\n        }\n        else {\n            this._matrix = this._restPose;\n        }\n    };\n    /**\n     * Gets the inverse of the absolute transform matrix.\n     * This matrix will be multiplied by local matrix to get the difference matrix (ie. the difference between original state and current state)\n     * @returns a matrix\n     */\n    Bone.prototype.getInvertedAbsoluteTransform = function () {\n        return this._invertedAbsoluteTransform;\n    };\n    /**\n     * Gets the absolute transform matrix (ie base matrix * parent world matrix)\n     * @returns a matrix\n     */\n    Bone.prototype.getAbsoluteTransform = function () {\n        return this._absoluteTransform;\n    };\n    /**\n     * Links with the given transform node.\n     * The local matrix of this bone is copied from the transform node every frame.\n     * @param transformNode defines the transform node to link to\n     */\n    Bone.prototype.linkTransformNode = function (transformNode) {\n        if (this._linkedTransformNode) {\n            this._skeleton._numBonesWithLinkedTransformNode--;\n        }\n        this._linkedTransformNode = transformNode;\n        if (this._linkedTransformNode) {\n            this._skeleton._numBonesWithLinkedTransformNode++;\n        }\n    };\n    // Properties (matches TransformNode properties)\n    /**\n     * Gets the node used to drive the bone's transformation\n     * @returns a transform node or null\n     */\n    Bone.prototype.getTransformNode = function () {\n        return this._linkedTransformNode;\n    };\n    Object.defineProperty(Bone.prototype, \"position\", {\n        /** Gets or sets current position (in local space) */\n        get: function () {\n            this._decompose();\n            return this._localPosition;\n        },\n        set: function (newPosition) {\n            this._decompose();\n            this._localPosition.copyFrom(newPosition);\n            this._markAsDirtyAndCompose();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Bone.prototype, \"rotation\", {\n        /** Gets or sets current rotation (in local space) */\n        get: function () {\n            return this.getRotation();\n        },\n        set: function (newRotation) {\n            this.setRotation(newRotation);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Bone.prototype, \"rotationQuaternion\", {\n        /** Gets or sets current rotation quaternion (in local space) */\n        get: function () {\n            this._decompose();\n            return this._localRotation;\n        },\n        set: function (newRotation) {\n            this.setRotationQuaternion(newRotation);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Bone.prototype, \"scaling\", {\n        /** Gets or sets current scaling (in local space) */\n        get: function () {\n            return this.getScale();\n        },\n        set: function (newScaling) {\n            this.setScale(newScaling);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Bone.prototype, \"animationPropertiesOverride\", {\n        /**\n         * Gets the animation properties override\n         */\n        get: function () {\n            return this._skeleton.animationPropertiesOverride;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // Methods\n    Bone.prototype._decompose = function () {\n        if (!this._needToDecompose) {\n            return;\n        }\n        this._needToDecompose = false;\n        if (!this._localScaling) {\n            this._localScaling = Vector3.Zero();\n            this._localRotation = Quaternion.Zero();\n            this._localPosition = Vector3.Zero();\n        }\n        this._localMatrix.decompose(this._localScaling, this._localRotation, this._localPosition);\n    };\n    Bone.prototype._compose = function () {\n        if (!this._needToCompose) {\n            return;\n        }\n        if (!this._localScaling) {\n            this._needToCompose = false;\n            return;\n        }\n        this._needToCompose = false;\n        Matrix.ComposeToRef(this._localScaling, this._localRotation, this._localPosition, this._localMatrix);\n    };\n    /**\n     * Update the base and local matrices\n     * @param matrix defines the new base or local matrix\n     * @param updateDifferenceMatrix defines if the difference matrix must be updated\n     * @param updateLocalMatrix defines if the local matrix should be updated\n     */\n    Bone.prototype.updateMatrix = function (matrix, updateDifferenceMatrix, updateLocalMatrix) {\n        if (updateDifferenceMatrix === void 0) { updateDifferenceMatrix = true; }\n        if (updateLocalMatrix === void 0) { updateLocalMatrix = true; }\n        this._baseMatrix.copyFrom(matrix);\n        if (updateDifferenceMatrix) {\n            this._updateDifferenceMatrix();\n        }\n        if (updateLocalMatrix) {\n            this._matrix = matrix;\n        }\n        else {\n            this.markAsDirty();\n        }\n    };\n    /**\n     * @param rootMatrix\n     * @param updateChildren\n     * @hidden\n     */\n    Bone.prototype._updateDifferenceMatrix = function (rootMatrix, updateChildren) {\n        if (updateChildren === void 0) { updateChildren = true; }\n        if (!rootMatrix) {\n            rootMatrix = this._baseMatrix;\n        }\n        if (this.parent) {\n            rootMatrix.multiplyToRef(this.parent._absoluteTransform, this._absoluteTransform);\n        }\n        else {\n            this._absoluteTransform.copyFrom(rootMatrix);\n        }\n        this._absoluteTransform.invertToRef(this._invertedAbsoluteTransform);\n        if (updateChildren) {\n            for (var index = 0; index < this.children.length; index++) {\n                this.children[index]._updateDifferenceMatrix();\n            }\n        }\n        this._scalingDeterminant = this._absoluteTransform.determinant() < 0 ? -1 : 1;\n    };\n    /**\n     * Flag the bone as dirty (Forcing it to update everything)\n     * @returns this bone\n     */\n    Bone.prototype.markAsDirty = function () {\n        this._currentRenderId++;\n        this._childUpdateId++;\n        this._skeleton._markAsDirty();\n        return this;\n    };\n    /** @hidden */\n    Bone.prototype._markAsDirtyAndCompose = function () {\n        this.markAsDirty();\n        this._needToCompose = true;\n    };\n    Bone.prototype._markAsDirtyAndDecompose = function () {\n        this.markAsDirty();\n        this._needToDecompose = true;\n    };\n    /**\n     * Translate the bone in local or world space\n     * @param vec The amount to translate the bone\n     * @param space The space that the translation is in\n     * @param tNode The TransformNode that this bone is attached to. This is only used in world space\n     */\n    Bone.prototype.translate = function (vec, space, tNode) {\n        if (space === void 0) { space = Space.LOCAL; }\n        var lm = this.getLocalMatrix();\n        if (space == Space.LOCAL) {\n            lm.addAtIndex(12, vec.x);\n            lm.addAtIndex(13, vec.y);\n            lm.addAtIndex(14, vec.z);\n        }\n        else {\n            var wm = null;\n            //tNode.getWorldMatrix() needs to be called before skeleton.computeAbsoluteTransforms()\n            if (tNode) {\n                wm = tNode.getWorldMatrix();\n            }\n            this._skeleton.computeAbsoluteTransforms();\n            var tmat = Bone._TmpMats[0];\n            var tvec = Bone._TmpVecs[0];\n            if (this.parent) {\n                if (tNode && wm) {\n                    tmat.copyFrom(this.parent.getAbsoluteTransform());\n                    tmat.multiplyToRef(wm, tmat);\n                }\n                else {\n                    tmat.copyFrom(this.parent.getAbsoluteTransform());\n                }\n            }\n            else {\n                Matrix.IdentityToRef(tmat);\n            }\n            tmat.setTranslationFromFloats(0, 0, 0);\n            tmat.invert();\n            Vector3.TransformCoordinatesToRef(vec, tmat, tvec);\n            lm.addAtIndex(12, tvec.x);\n            lm.addAtIndex(13, tvec.y);\n            lm.addAtIndex(14, tvec.z);\n        }\n        this._markAsDirtyAndDecompose();\n    };\n    /**\n     * Set the position of the bone in local or world space\n     * @param position The position to set the bone\n     * @param space The space that the position is in\n     * @param tNode The TransformNode that this bone is attached to.  This is only used in world space\n     */\n    Bone.prototype.setPosition = function (position, space, tNode) {\n        if (space === void 0) { space = Space.LOCAL; }\n        var lm = this.getLocalMatrix();\n        if (space == Space.LOCAL) {\n            lm.setTranslationFromFloats(position.x, position.y, position.z);\n        }\n        else {\n            var wm = null;\n            //tNode.getWorldMatrix() needs to be called before skeleton.computeAbsoluteTransforms()\n            if (tNode) {\n                wm = tNode.getWorldMatrix();\n            }\n            this._skeleton.computeAbsoluteTransforms();\n            var tmat = Bone._TmpMats[0];\n            var vec = Bone._TmpVecs[0];\n            if (this.parent) {\n                if (tNode && wm) {\n                    tmat.copyFrom(this.parent.getAbsoluteTransform());\n                    tmat.multiplyToRef(wm, tmat);\n                }\n                else {\n                    tmat.copyFrom(this.parent.getAbsoluteTransform());\n                }\n                tmat.invert();\n            }\n            else {\n                Matrix.IdentityToRef(tmat);\n            }\n            Vector3.TransformCoordinatesToRef(position, tmat, vec);\n            lm.setTranslationFromFloats(vec.x, vec.y, vec.z);\n        }\n        this._markAsDirtyAndDecompose();\n    };\n    /**\n     * Set the absolute position of the bone (world space)\n     * @param position The position to set the bone\n     * @param tNode The TransformNode that this bone is attached to\n     */\n    Bone.prototype.setAbsolutePosition = function (position, tNode) {\n        this.setPosition(position, Space.WORLD, tNode);\n    };\n    /**\n     * Scale the bone on the x, y and z axes (in local space)\n     * @param x The amount to scale the bone on the x axis\n     * @param y The amount to scale the bone on the y axis\n     * @param z The amount to scale the bone on the z axis\n     * @param scaleChildren sets this to true if children of the bone should be scaled as well (false by default)\n     */\n    Bone.prototype.scale = function (x, y, z, scaleChildren) {\n        if (scaleChildren === void 0) { scaleChildren = false; }\n        var locMat = this.getLocalMatrix();\n        // Apply new scaling on top of current local matrix\n        var scaleMat = Bone._TmpMats[0];\n        Matrix.ScalingToRef(x, y, z, scaleMat);\n        scaleMat.multiplyToRef(locMat, locMat);\n        // Invert scaling matrix and apply the inverse to all children\n        scaleMat.invert();\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            var cm = child.getLocalMatrix();\n            cm.multiplyToRef(scaleMat, cm);\n            cm.multiplyAtIndex(12, x);\n            cm.multiplyAtIndex(13, y);\n            cm.multiplyAtIndex(14, z);\n            child._markAsDirtyAndDecompose();\n        }\n        this._markAsDirtyAndDecompose();\n        if (scaleChildren) {\n            for (var _b = 0, _c = this.children; _b < _c.length; _b++) {\n                var child = _c[_b];\n                child.scale(x, y, z, scaleChildren);\n            }\n        }\n    };\n    /**\n     * Set the bone scaling in local space\n     * @param scale defines the scaling vector\n     */\n    Bone.prototype.setScale = function (scale) {\n        this._decompose();\n        this._localScaling.copyFrom(scale);\n        this._markAsDirtyAndCompose();\n    };\n    /**\n     * Gets the current scaling in local space\n     * @returns the current scaling vector\n     */\n    Bone.prototype.getScale = function () {\n        this._decompose();\n        return this._localScaling;\n    };\n    /**\n     * Gets the current scaling in local space and stores it in a target vector\n     * @param result defines the target vector\n     */\n    Bone.prototype.getScaleToRef = function (result) {\n        this._decompose();\n        result.copyFrom(this._localScaling);\n    };\n    /**\n     * Set the yaw, pitch, and roll of the bone in local or world space\n     * @param yaw The rotation of the bone on the y axis\n     * @param pitch The rotation of the bone on the x axis\n     * @param roll The rotation of the bone on the z axis\n     * @param space The space that the axes of rotation are in\n     * @param tNode The TransformNode that this bone is attached to.  This is only used in world space\n     */\n    Bone.prototype.setYawPitchRoll = function (yaw, pitch, roll, space, tNode) {\n        if (space === void 0) { space = Space.LOCAL; }\n        if (space === Space.LOCAL) {\n            var quat = Bone._TmpQuat;\n            Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, quat);\n            this.setRotationQuaternion(quat, space, tNode);\n            return;\n        }\n        var rotMatInv = Bone._TmpMats[0];\n        if (!this._getNegativeRotationToRef(rotMatInv, tNode)) {\n            return;\n        }\n        var rotMat = Bone._TmpMats[1];\n        Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, rotMat);\n        rotMatInv.multiplyToRef(rotMat, rotMat);\n        this._rotateWithMatrix(rotMat, space, tNode);\n    };\n    /**\n     * Add a rotation to the bone on an axis in local or world space\n     * @param axis The axis to rotate the bone on\n     * @param amount The amount to rotate the bone\n     * @param space The space that the axis is in\n     * @param tNode The TransformNode that this bone is attached to. This is only used in world space\n     */\n    Bone.prototype.rotate = function (axis, amount, space, tNode) {\n        if (space === void 0) { space = Space.LOCAL; }\n        var rmat = Bone._TmpMats[0];\n        rmat.setTranslationFromFloats(0, 0, 0);\n        Matrix.RotationAxisToRef(axis, amount, rmat);\n        this._rotateWithMatrix(rmat, space, tNode);\n    };\n    /**\n     * Set the rotation of the bone to a particular axis angle in local or world space\n     * @param axis The axis to rotate the bone on\n     * @param angle The angle that the bone should be rotated to\n     * @param space The space that the axis is in\n     * @param tNode The TransformNode that this bone is attached to.  This is only used in world space\n     */\n    Bone.prototype.setAxisAngle = function (axis, angle, space, tNode) {\n        if (space === void 0) { space = Space.LOCAL; }\n        if (space === Space.LOCAL) {\n            var quat = Bone._TmpQuat;\n            Quaternion.RotationAxisToRef(axis, angle, quat);\n            this.setRotationQuaternion(quat, space, tNode);\n            return;\n        }\n        var rotMatInv = Bone._TmpMats[0];\n        if (!this._getNegativeRotationToRef(rotMatInv, tNode)) {\n            return;\n        }\n        var rotMat = Bone._TmpMats[1];\n        Matrix.RotationAxisToRef(axis, angle, rotMat);\n        rotMatInv.multiplyToRef(rotMat, rotMat);\n        this._rotateWithMatrix(rotMat, space, tNode);\n    };\n    /**\n     * Set the euler rotation of the bone in local or world space\n     * @param rotation The euler rotation that the bone should be set to\n     * @param space The space that the rotation is in\n     * @param tNode The TransformNode that this bone is attached to. This is only used in world space\n     */\n    Bone.prototype.setRotation = function (rotation, space, tNode) {\n        if (space === void 0) { space = Space.LOCAL; }\n        this.setYawPitchRoll(rotation.y, rotation.x, rotation.z, space, tNode);\n    };\n    /**\n     * Set the quaternion rotation of the bone in local or world space\n     * @param quat The quaternion rotation that the bone should be set to\n     * @param space The space that the rotation is in\n     * @param tNode The TransformNode that this bone is attached to. This is only used in world space\n     */\n    Bone.prototype.setRotationQuaternion = function (quat, space, tNode) {\n        if (space === void 0) { space = Space.LOCAL; }\n        if (space === Space.LOCAL) {\n            this._decompose();\n            this._localRotation.copyFrom(quat);\n            this._markAsDirtyAndCompose();\n            return;\n        }\n        var rotMatInv = Bone._TmpMats[0];\n        if (!this._getNegativeRotationToRef(rotMatInv, tNode)) {\n            return;\n        }\n        var rotMat = Bone._TmpMats[1];\n        Matrix.FromQuaternionToRef(quat, rotMat);\n        rotMatInv.multiplyToRef(rotMat, rotMat);\n        this._rotateWithMatrix(rotMat, space, tNode);\n    };\n    /**\n     * Set the rotation matrix of the bone in local or world space\n     * @param rotMat The rotation matrix that the bone should be set to\n     * @param space The space that the rotation is in\n     * @param tNode The TransformNode that this bone is attached to. This is only used in world space\n     */\n    Bone.prototype.setRotationMatrix = function (rotMat, space, tNode) {\n        if (space === void 0) { space = Space.LOCAL; }\n        if (space === Space.LOCAL) {\n            var quat = Bone._TmpQuat;\n            Quaternion.FromRotationMatrixToRef(rotMat, quat);\n            this.setRotationQuaternion(quat, space, tNode);\n            return;\n        }\n        var rotMatInv = Bone._TmpMats[0];\n        if (!this._getNegativeRotationToRef(rotMatInv, tNode)) {\n            return;\n        }\n        var rotMat2 = Bone._TmpMats[1];\n        rotMat2.copyFrom(rotMat);\n        rotMatInv.multiplyToRef(rotMat, rotMat2);\n        this._rotateWithMatrix(rotMat2, space, tNode);\n    };\n    Bone.prototype._rotateWithMatrix = function (rmat, space, tNode) {\n        if (space === void 0) { space = Space.LOCAL; }\n        var lmat = this.getLocalMatrix();\n        var lx = lmat.m[12];\n        var ly = lmat.m[13];\n        var lz = lmat.m[14];\n        var parent = this.getParent();\n        var parentScale = Bone._TmpMats[3];\n        var parentScaleInv = Bone._TmpMats[4];\n        if (parent && space == Space.WORLD) {\n            if (tNode) {\n                parentScale.copyFrom(tNode.getWorldMatrix());\n                parent.getAbsoluteTransform().multiplyToRef(parentScale, parentScale);\n            }\n            else {\n                parentScale.copyFrom(parent.getAbsoluteTransform());\n            }\n            parentScaleInv.copyFrom(parentScale);\n            parentScaleInv.invert();\n            lmat.multiplyToRef(parentScale, lmat);\n            lmat.multiplyToRef(rmat, lmat);\n            lmat.multiplyToRef(parentScaleInv, lmat);\n        }\n        else {\n            if (space == Space.WORLD && tNode) {\n                parentScale.copyFrom(tNode.getWorldMatrix());\n                parentScaleInv.copyFrom(parentScale);\n                parentScaleInv.invert();\n                lmat.multiplyToRef(parentScale, lmat);\n                lmat.multiplyToRef(rmat, lmat);\n                lmat.multiplyToRef(parentScaleInv, lmat);\n            }\n            else {\n                lmat.multiplyToRef(rmat, lmat);\n            }\n        }\n        lmat.setTranslationFromFloats(lx, ly, lz);\n        this.computeAbsoluteTransforms();\n        this._markAsDirtyAndDecompose();\n    };\n    Bone.prototype._getNegativeRotationToRef = function (rotMatInv, tNode) {\n        var scaleMatrix = Bone._TmpMats[2];\n        rotMatInv.copyFrom(this.getAbsoluteTransform());\n        if (tNode) {\n            rotMatInv.multiplyToRef(tNode.getWorldMatrix(), rotMatInv);\n            Matrix.ScalingToRef(tNode.scaling.x, tNode.scaling.y, tNode.scaling.z, scaleMatrix);\n        }\n        else {\n            Matrix.IdentityToRef(scaleMatrix);\n        }\n        rotMatInv.invert();\n        if (isNaN(rotMatInv.m[0])) {\n            // Matrix failed to invert.\n            // This can happen if scale is zero for example.\n            return false;\n        }\n        scaleMatrix.multiplyAtIndex(0, this._scalingDeterminant);\n        rotMatInv.multiplyToRef(scaleMatrix, rotMatInv);\n        return true;\n    };\n    /**\n     * Get the position of the bone in local or world space\n     * @param space The space that the returned position is in\n     * @param tNode The TransformNode that this bone is attached to. This is only used in world space\n     * @returns The position of the bone\n     */\n    Bone.prototype.getPosition = function (space, tNode) {\n        if (space === void 0) { space = Space.LOCAL; }\n        if (tNode === void 0) { tNode = null; }\n        var pos = Vector3.Zero();\n        this.getPositionToRef(space, tNode, pos);\n        return pos;\n    };\n    /**\n     * Copy the position of the bone to a vector3 in local or world space\n     * @param space The space that the returned position is in\n     * @param tNode The TransformNode that this bone is attached to. This is only used in world space\n     * @param result The vector3 to copy the position to\n     */\n    Bone.prototype.getPositionToRef = function (space, tNode, result) {\n        if (space === void 0) { space = Space.LOCAL; }\n        if (space == Space.LOCAL) {\n            var lm = this.getLocalMatrix();\n            result.x = lm.m[12];\n            result.y = lm.m[13];\n            result.z = lm.m[14];\n        }\n        else {\n            var wm = null;\n            //tNode.getWorldMatrix() needs to be called before skeleton.computeAbsoluteTransforms()\n            if (tNode) {\n                wm = tNode.getWorldMatrix();\n            }\n            this._skeleton.computeAbsoluteTransforms();\n            var tmat = Bone._TmpMats[0];\n            if (tNode && wm) {\n                tmat.copyFrom(this.getAbsoluteTransform());\n                tmat.multiplyToRef(wm, tmat);\n            }\n            else {\n                tmat = this.getAbsoluteTransform();\n            }\n            result.x = tmat.m[12];\n            result.y = tmat.m[13];\n            result.z = tmat.m[14];\n        }\n    };\n    /**\n     * Get the absolute position of the bone (world space)\n     * @param tNode The TransformNode that this bone is attached to\n     * @returns The absolute position of the bone\n     */\n    Bone.prototype.getAbsolutePosition = function (tNode) {\n        if (tNode === void 0) { tNode = null; }\n        var pos = Vector3.Zero();\n        this.getPositionToRef(Space.WORLD, tNode, pos);\n        return pos;\n    };\n    /**\n     * Copy the absolute position of the bone (world space) to the result param\n     * @param tNode The TransformNode that this bone is attached to\n     * @param result The vector3 to copy the absolute position to\n     */\n    Bone.prototype.getAbsolutePositionToRef = function (tNode, result) {\n        this.getPositionToRef(Space.WORLD, tNode, result);\n    };\n    /**\n     * Compute the absolute transforms of this bone and its children\n     */\n    Bone.prototype.computeAbsoluteTransforms = function () {\n        this._compose();\n        if (this.parent) {\n            this._localMatrix.multiplyToRef(this.parent._absoluteTransform, this._absoluteTransform);\n        }\n        else {\n            this._absoluteTransform.copyFrom(this._localMatrix);\n            var poseMatrix = this._skeleton.getPoseMatrix();\n            if (poseMatrix) {\n                this._absoluteTransform.multiplyToRef(poseMatrix, this._absoluteTransform);\n            }\n        }\n        var children = this.children;\n        var len = children.length;\n        for (var i = 0; i < len; i++) {\n            children[i].computeAbsoluteTransforms();\n        }\n    };\n    /**\n     * Get the world direction from an axis that is in the local space of the bone\n     * @param localAxis The local direction that is used to compute the world direction\n     * @param tNode The TransformNode that this bone is attached to\n     * @returns The world direction\n     */\n    Bone.prototype.getDirection = function (localAxis, tNode) {\n        if (tNode === void 0) { tNode = null; }\n        var result = Vector3.Zero();\n        this.getDirectionToRef(localAxis, tNode, result);\n        return result;\n    };\n    /**\n     * Copy the world direction to a vector3 from an axis that is in the local space of the bone\n     * @param localAxis The local direction that is used to compute the world direction\n     * @param tNode The TransformNode that this bone is attached to\n     * @param result The vector3 that the world direction will be copied to\n     */\n    Bone.prototype.getDirectionToRef = function (localAxis, tNode, result) {\n        if (tNode === void 0) { tNode = null; }\n        var wm = null;\n        //tNode.getWorldMatrix() needs to be called before skeleton.computeAbsoluteTransforms()\n        if (tNode) {\n            wm = tNode.getWorldMatrix();\n        }\n        this._skeleton.computeAbsoluteTransforms();\n        var mat = Bone._TmpMats[0];\n        mat.copyFrom(this.getAbsoluteTransform());\n        if (tNode && wm) {\n            mat.multiplyToRef(wm, mat);\n        }\n        Vector3.TransformNormalToRef(localAxis, mat, result);\n        result.normalize();\n    };\n    /**\n     * Get the euler rotation of the bone in local or world space\n     * @param space The space that the rotation should be in\n     * @param tNode The TransformNode that this bone is attached to.  This is only used in world space\n     * @returns The euler rotation\n     */\n    Bone.prototype.getRotation = function (space, tNode) {\n        if (space === void 0) { space = Space.LOCAL; }\n        if (tNode === void 0) { tNode = null; }\n        var result = Vector3.Zero();\n        this.getRotationToRef(space, tNode, result);\n        return result;\n    };\n    /**\n     * Copy the euler rotation of the bone to a vector3.  The rotation can be in either local or world space\n     * @param space The space that the rotation should be in\n     * @param tNode The TransformNode that this bone is attached to.  This is only used in world space\n     * @param result The vector3 that the rotation should be copied to\n     */\n    Bone.prototype.getRotationToRef = function (space, tNode, result) {\n        if (space === void 0) { space = Space.LOCAL; }\n        if (tNode === void 0) { tNode = null; }\n        var quat = Bone._TmpQuat;\n        this.getRotationQuaternionToRef(space, tNode, quat);\n        quat.toEulerAnglesToRef(result);\n    };\n    /**\n     * Get the quaternion rotation of the bone in either local or world space\n     * @param space The space that the rotation should be in\n     * @param tNode The TransformNode that this bone is attached to.  This is only used in world space\n     * @returns The quaternion rotation\n     */\n    Bone.prototype.getRotationQuaternion = function (space, tNode) {\n        if (space === void 0) { space = Space.LOCAL; }\n        if (tNode === void 0) { tNode = null; }\n        var result = Quaternion.Identity();\n        this.getRotationQuaternionToRef(space, tNode, result);\n        return result;\n    };\n    /**\n     * Copy the quaternion rotation of the bone to a quaternion.  The rotation can be in either local or world space\n     * @param space The space that the rotation should be in\n     * @param tNode The TransformNode that this bone is attached to.  This is only used in world space\n     * @param result The quaternion that the rotation should be copied to\n     */\n    Bone.prototype.getRotationQuaternionToRef = function (space, tNode, result) {\n        if (space === void 0) { space = Space.LOCAL; }\n        if (tNode === void 0) { tNode = null; }\n        if (space == Space.LOCAL) {\n            this._decompose();\n            result.copyFrom(this._localRotation);\n        }\n        else {\n            var mat = Bone._TmpMats[0];\n            var amat = this.getAbsoluteTransform();\n            if (tNode) {\n                amat.multiplyToRef(tNode.getWorldMatrix(), mat);\n            }\n            else {\n                mat.copyFrom(amat);\n            }\n            mat.multiplyAtIndex(0, this._scalingDeterminant);\n            mat.multiplyAtIndex(1, this._scalingDeterminant);\n            mat.multiplyAtIndex(2, this._scalingDeterminant);\n            mat.decompose(undefined, result, undefined);\n        }\n    };\n    /**\n     * Get the rotation matrix of the bone in local or world space\n     * @param space The space that the rotation should be in\n     * @param tNode The TransformNode that this bone is attached to.  This is only used in world space\n     * @returns The rotation matrix\n     */\n    Bone.prototype.getRotationMatrix = function (space, tNode) {\n        if (space === void 0) { space = Space.LOCAL; }\n        var result = Matrix.Identity();\n        this.getRotationMatrixToRef(space, tNode, result);\n        return result;\n    };\n    /**\n     * Copy the rotation matrix of the bone to a matrix.  The rotation can be in either local or world space\n     * @param space The space that the rotation should be in\n     * @param tNode The TransformNode that this bone is attached to.  This is only used in world space\n     * @param result The quaternion that the rotation should be copied to\n     */\n    Bone.prototype.getRotationMatrixToRef = function (space, tNode, result) {\n        if (space === void 0) { space = Space.LOCAL; }\n        if (space == Space.LOCAL) {\n            this.getLocalMatrix().getRotationMatrixToRef(result);\n        }\n        else {\n            var mat = Bone._TmpMats[0];\n            var amat = this.getAbsoluteTransform();\n            if (tNode) {\n                amat.multiplyToRef(tNode.getWorldMatrix(), mat);\n            }\n            else {\n                mat.copyFrom(amat);\n            }\n            mat.multiplyAtIndex(0, this._scalingDeterminant);\n            mat.multiplyAtIndex(1, this._scalingDeterminant);\n            mat.multiplyAtIndex(2, this._scalingDeterminant);\n            mat.getRotationMatrixToRef(result);\n        }\n    };\n    /**\n     * Get the world position of a point that is in the local space of the bone\n     * @param position The local position\n     * @param tNode The TransformNode that this bone is attached to\n     * @returns The world position\n     */\n    Bone.prototype.getAbsolutePositionFromLocal = function (position, tNode) {\n        if (tNode === void 0) { tNode = null; }\n        var result = Vector3.Zero();\n        this.getAbsolutePositionFromLocalToRef(position, tNode, result);\n        return result;\n    };\n    /**\n     * Get the world position of a point that is in the local space of the bone and copy it to the result param\n     * @param position The local position\n     * @param tNode The TransformNode that this bone is attached to\n     * @param result The vector3 that the world position should be copied to\n     */\n    Bone.prototype.getAbsolutePositionFromLocalToRef = function (position, tNode, result) {\n        if (tNode === void 0) { tNode = null; }\n        var wm = null;\n        //tNode.getWorldMatrix() needs to be called before skeleton.computeAbsoluteTransforms()\n        if (tNode) {\n            wm = tNode.getWorldMatrix();\n        }\n        this._skeleton.computeAbsoluteTransforms();\n        var tmat = Bone._TmpMats[0];\n        if (tNode && wm) {\n            tmat.copyFrom(this.getAbsoluteTransform());\n            tmat.multiplyToRef(wm, tmat);\n        }\n        else {\n            tmat = this.getAbsoluteTransform();\n        }\n        Vector3.TransformCoordinatesToRef(position, tmat, result);\n    };\n    /**\n     * Get the local position of a point that is in world space\n     * @param position The world position\n     * @param tNode The TransformNode that this bone is attached to\n     * @returns The local position\n     */\n    Bone.prototype.getLocalPositionFromAbsolute = function (position, tNode) {\n        if (tNode === void 0) { tNode = null; }\n        var result = Vector3.Zero();\n        this.getLocalPositionFromAbsoluteToRef(position, tNode, result);\n        return result;\n    };\n    /**\n     * Get the local position of a point that is in world space and copy it to the result param\n     * @param position The world position\n     * @param tNode The TransformNode that this bone is attached to\n     * @param result The vector3 that the local position should be copied to\n     */\n    Bone.prototype.getLocalPositionFromAbsoluteToRef = function (position, tNode, result) {\n        if (tNode === void 0) { tNode = null; }\n        var wm = null;\n        //tNode.getWorldMatrix() needs to be called before skeleton.computeAbsoluteTransforms()\n        if (tNode) {\n            wm = tNode.getWorldMatrix();\n        }\n        this._skeleton.computeAbsoluteTransforms();\n        var tmat = Bone._TmpMats[0];\n        tmat.copyFrom(this.getAbsoluteTransform());\n        if (tNode && wm) {\n            tmat.multiplyToRef(wm, tmat);\n        }\n        tmat.invert();\n        Vector3.TransformCoordinatesToRef(position, tmat, result);\n    };\n    /**\n     * Set the current local matrix as the restPose for this bone.\n     */\n    Bone.prototype.setCurrentPoseAsRest = function () {\n        this.setRestPose(this.getLocalMatrix());\n    };\n    Bone._TmpVecs = ArrayTools.BuildArray(2, Vector3.Zero);\n    Bone._TmpQuat = Quaternion.Identity();\n    Bone._TmpMats = ArrayTools.BuildArray(5, Matrix.Identity);\n    return Bone;\n}(Node));\nexport { Bone };\n//# sourceMappingURL=bone.js.map","import { Vector3, Quaternion, Matrix } from \"../Maths/math.vector.js\";\nimport { Space } from \"../Maths/math.axis.js\";\n/**\n * Class used to apply inverse kinematics to bones\n * @see https://doc.babylonjs.com/how_to/how_to_use_bones_and_skeletons#boneikcontroller\n */\nvar BoneIKController = /** @class */ (function () {\n    /**\n     * Creates a new BoneIKController\n     * @param mesh defines the TransformNode to control\n     * @param bone defines the bone to control\n     * @param options defines options to set up the controller\n     * @param options.targetMesh\n     * @param options.poleTargetMesh\n     * @param options.poleTargetBone\n     * @param options.poleTargetLocalOffset\n     * @param options.poleAngle\n     * @param options.bendAxis\n     * @param options.maxAngle\n     * @param options.slerpAmount\n     */\n    function BoneIKController(mesh, bone, options) {\n        /**\n         * Gets or sets the target position\n         */\n        this.targetPosition = Vector3.Zero();\n        /**\n         * Gets or sets the pole target position\n         */\n        this.poleTargetPosition = Vector3.Zero();\n        /**\n         * Gets or sets the pole target local offset\n         */\n        this.poleTargetLocalOffset = Vector3.Zero();\n        /**\n         * Gets or sets the pole angle\n         */\n        this.poleAngle = 0;\n        /**\n         * The amount to slerp (spherical linear interpolation) to the target.  Set this to a value between 0 and 1 (a value of 1 disables slerp)\n         */\n        this.slerpAmount = 1;\n        this._bone1Quat = Quaternion.Identity();\n        this._bone1Mat = Matrix.Identity();\n        this._bone2Ang = Math.PI;\n        this._maxAngle = Math.PI;\n        this._rightHandedSystem = false;\n        this._bendAxis = Vector3.Right();\n        this._slerping = false;\n        this._adjustRoll = 0;\n        this._bone2 = bone;\n        this._bone1 = bone.getParent();\n        if (!this._bone1) {\n            return;\n        }\n        this.mesh = mesh;\n        var bonePos = bone.getPosition();\n        if (bone.getAbsoluteTransform().determinant() > 0) {\n            this._rightHandedSystem = true;\n            this._bendAxis.x = 0;\n            this._bendAxis.y = 0;\n            this._bendAxis.z = -1;\n            if (bonePos.x > bonePos.y && bonePos.x > bonePos.z) {\n                this._adjustRoll = Math.PI * 0.5;\n                this._bendAxis.z = 1;\n            }\n        }\n        if (this._bone1.length) {\n            var boneScale1 = this._bone1.getScale();\n            var boneScale2 = this._bone2.getScale();\n            this._bone1Length = this._bone1.length * boneScale1.y * this.mesh.scaling.y;\n            this._bone2Length = this._bone2.length * boneScale2.y * this.mesh.scaling.y;\n        }\n        else if (this._bone1.children[0]) {\n            mesh.computeWorldMatrix(true);\n            var pos1 = this._bone2.children[0].getAbsolutePosition(mesh);\n            var pos2 = this._bone2.getAbsolutePosition(mesh);\n            var pos3 = this._bone1.getAbsolutePosition(mesh);\n            this._bone1Length = Vector3.Distance(pos1, pos2);\n            this._bone2Length = Vector3.Distance(pos2, pos3);\n        }\n        this._bone1.getRotationMatrixToRef(Space.WORLD, mesh, this._bone1Mat);\n        this.maxAngle = Math.PI;\n        if (options) {\n            if (options.targetMesh) {\n                this.targetMesh = options.targetMesh;\n                this.targetMesh.computeWorldMatrix(true);\n            }\n            if (options.poleTargetMesh) {\n                this.poleTargetMesh = options.poleTargetMesh;\n                this.poleTargetMesh.computeWorldMatrix(true);\n            }\n            else if (options.poleTargetBone) {\n                this.poleTargetBone = options.poleTargetBone;\n            }\n            else if (this._bone1.getParent()) {\n                this.poleTargetBone = this._bone1.getParent();\n            }\n            if (options.poleTargetLocalOffset) {\n                this.poleTargetLocalOffset.copyFrom(options.poleTargetLocalOffset);\n            }\n            if (options.poleAngle) {\n                this.poleAngle = options.poleAngle;\n            }\n            if (options.bendAxis) {\n                this._bendAxis.copyFrom(options.bendAxis);\n            }\n            if (options.maxAngle) {\n                this.maxAngle = options.maxAngle;\n            }\n            if (options.slerpAmount) {\n                this.slerpAmount = options.slerpAmount;\n            }\n        }\n    }\n    Object.defineProperty(BoneIKController.prototype, \"maxAngle\", {\n        /**\n         * Gets or sets maximum allowed angle\n         */\n        get: function () {\n            return this._maxAngle;\n        },\n        set: function (value) {\n            this._setMaxAngle(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BoneIKController.prototype._setMaxAngle = function (ang) {\n        if (ang < 0) {\n            ang = 0;\n        }\n        if (ang > Math.PI || ang == undefined) {\n            ang = Math.PI;\n        }\n        this._maxAngle = ang;\n        var a = this._bone1Length;\n        var b = this._bone2Length;\n        this._maxReach = Math.sqrt(a * a + b * b - 2 * a * b * Math.cos(ang));\n    };\n    /**\n     * Force the controller to update the bones\n     */\n    BoneIKController.prototype.update = function () {\n        var bone1 = this._bone1;\n        if (!bone1) {\n            return;\n        }\n        var target = this.targetPosition;\n        var poleTarget = this.poleTargetPosition;\n        var mat1 = BoneIKController._TmpMats[0];\n        var mat2 = BoneIKController._TmpMats[1];\n        if (this.targetMesh) {\n            target.copyFrom(this.targetMesh.getAbsolutePosition());\n        }\n        if (this.poleTargetBone) {\n            this.poleTargetBone.getAbsolutePositionFromLocalToRef(this.poleTargetLocalOffset, this.mesh, poleTarget);\n        }\n        else if (this.poleTargetMesh) {\n            Vector3.TransformCoordinatesToRef(this.poleTargetLocalOffset, this.poleTargetMesh.getWorldMatrix(), poleTarget);\n        }\n        var bonePos = BoneIKController._TmpVecs[0];\n        var zaxis = BoneIKController._TmpVecs[1];\n        var xaxis = BoneIKController._TmpVecs[2];\n        var yaxis = BoneIKController._TmpVecs[3];\n        var upAxis = BoneIKController._TmpVecs[4];\n        var tmpQuat = BoneIKController._TmpQuat;\n        bone1.getAbsolutePositionToRef(this.mesh, bonePos);\n        poleTarget.subtractToRef(bonePos, upAxis);\n        if (upAxis.x == 0 && upAxis.y == 0 && upAxis.z == 0) {\n            upAxis.y = 1;\n        }\n        else {\n            upAxis.normalize();\n        }\n        target.subtractToRef(bonePos, yaxis);\n        yaxis.normalize();\n        Vector3.CrossToRef(yaxis, upAxis, zaxis);\n        zaxis.normalize();\n        Vector3.CrossToRef(yaxis, zaxis, xaxis);\n        xaxis.normalize();\n        Matrix.FromXYZAxesToRef(xaxis, yaxis, zaxis, mat1);\n        var a = this._bone1Length;\n        var b = this._bone2Length;\n        var c = Vector3.Distance(bonePos, target);\n        if (this._maxReach > 0) {\n            c = Math.min(this._maxReach, c);\n        }\n        var acosa = (b * b + c * c - a * a) / (2 * b * c);\n        var acosb = (c * c + a * a - b * b) / (2 * c * a);\n        if (acosa > 1) {\n            acosa = 1;\n        }\n        if (acosb > 1) {\n            acosb = 1;\n        }\n        if (acosa < -1) {\n            acosa = -1;\n        }\n        if (acosb < -1) {\n            acosb = -1;\n        }\n        var angA = Math.acos(acosa);\n        var angB = Math.acos(acosb);\n        var angC = -angA - angB;\n        if (this._rightHandedSystem) {\n            Matrix.RotationYawPitchRollToRef(0, 0, this._adjustRoll, mat2);\n            mat2.multiplyToRef(mat1, mat1);\n            Matrix.RotationAxisToRef(this._bendAxis, angB, mat2);\n            mat2.multiplyToRef(mat1, mat1);\n        }\n        else {\n            var _tmpVec = BoneIKController._TmpVecs[5];\n            _tmpVec.copyFrom(this._bendAxis);\n            _tmpVec.x *= -1;\n            Matrix.RotationAxisToRef(_tmpVec, -angB, mat2);\n            mat2.multiplyToRef(mat1, mat1);\n        }\n        if (this.poleAngle) {\n            Matrix.RotationAxisToRef(yaxis, this.poleAngle, mat2);\n            mat1.multiplyToRef(mat2, mat1);\n        }\n        if (this._bone1) {\n            if (this.slerpAmount < 1) {\n                if (!this._slerping) {\n                    Quaternion.FromRotationMatrixToRef(this._bone1Mat, this._bone1Quat);\n                }\n                Quaternion.FromRotationMatrixToRef(mat1, tmpQuat);\n                Quaternion.SlerpToRef(this._bone1Quat, tmpQuat, this.slerpAmount, this._bone1Quat);\n                angC = this._bone2Ang * (1.0 - this.slerpAmount) + angC * this.slerpAmount;\n                this._bone1.setRotationQuaternion(this._bone1Quat, Space.WORLD, this.mesh);\n                this._slerping = true;\n            }\n            else {\n                this._bone1.setRotationMatrix(mat1, Space.WORLD, this.mesh);\n                this._bone1Mat.copyFrom(mat1);\n                this._slerping = false;\n            }\n            this._updateLinkedTransformRotation(this._bone1);\n        }\n        this._bone2.setAxisAngle(this._bendAxis, angC, Space.LOCAL);\n        this._updateLinkedTransformRotation(this._bone2);\n        this._bone2Ang = angC;\n    };\n    BoneIKController.prototype._updateLinkedTransformRotation = function (bone) {\n        if (bone._linkedTransformNode) {\n            if (!bone._linkedTransformNode.rotationQuaternion) {\n                bone._linkedTransformNode.rotationQuaternion = new Quaternion();\n            }\n            bone.getRotationQuaternionToRef(Space.LOCAL, null, bone._linkedTransformNode.rotationQuaternion);\n        }\n    };\n    BoneIKController._TmpVecs = [Vector3.Zero(), Vector3.Zero(), Vector3.Zero(), Vector3.Zero(), Vector3.Zero(), Vector3.Zero()];\n    BoneIKController._TmpQuat = Quaternion.Identity();\n    BoneIKController._TmpMats = [Matrix.Identity(), Matrix.Identity()];\n    return BoneIKController;\n}());\nexport { BoneIKController };\n//# sourceMappingURL=boneIKController.js.map","import { ArrayTools } from \"../Misc/arrayTools.js\";\nimport { Vector3, Quaternion, Matrix } from \"../Maths/math.vector.js\";\nimport { Space, Axis } from \"../Maths/math.axis.js\";\n/**\n * Class used to make a bone look toward a point in space\n * @see https://doc.babylonjs.com/how_to/how_to_use_bones_and_skeletons#bonelookcontroller\n */\nvar BoneLookController = /** @class */ (function () {\n    /**\n     * Create a BoneLookController\n     * @param mesh the TransformNode that the bone belongs to\n     * @param bone the bone that will be looking to the target\n     * @param target the target Vector3 to look at\n     * @param options optional settings:\n     * * maxYaw: the maximum angle the bone will yaw to\n     * * minYaw: the minimum angle the bone will yaw to\n     * * maxPitch: the maximum angle the bone will pitch to\n     * * minPitch: the minimum angle the bone will yaw to\n     * * slerpAmount: set the between 0 and 1 to make the bone slerp to the target.\n     * * upAxis: the up axis of the coordinate system\n     * * upAxisSpace: the space that the up axis is in - Space.BONE, Space.LOCAL (default), or Space.WORLD.\n     * * yawAxis: set yawAxis if the bone does not yaw on the y axis\n     * * pitchAxis: set pitchAxis if the bone does not pitch on the x axis\n     * * adjustYaw: used to make an adjustment to the yaw of the bone\n     * * adjustPitch: used to make an adjustment to the pitch of the bone\n     * * adjustRoll: used to make an adjustment to the roll of the bone\n     * @param options.maxYaw\n     * @param options.minYaw\n     * @param options.maxPitch\n     * @param options.minPitch\n     * @param options.slerpAmount\n     * @param options.upAxis\n     * @param options.upAxisSpace\n     * @param options.yawAxis\n     * @param options.pitchAxis\n     * @param options.adjustYaw\n     * @param options.adjustPitch\n     * @param options.adjustRoll\n     **/\n    function BoneLookController(mesh, bone, target, options) {\n        /**\n         * The up axis of the coordinate system that is used when the bone is rotated\n         */\n        this.upAxis = Vector3.Up();\n        /**\n         * The space that the up axis is in - Space.BONE, Space.LOCAL (default), or Space.WORLD\n         */\n        this.upAxisSpace = Space.LOCAL;\n        /**\n         * Used to make an adjustment to the yaw of the bone\n         */\n        this.adjustYaw = 0;\n        /**\n         * Used to make an adjustment to the pitch of the bone\n         */\n        this.adjustPitch = 0;\n        /**\n         * Used to make an adjustment to the roll of the bone\n         */\n        this.adjustRoll = 0;\n        /**\n         * The amount to slerp (spherical linear interpolation) to the target.  Set this to a value between 0 and 1 (a value of 1 disables slerp)\n         */\n        this.slerpAmount = 1;\n        this._boneQuat = Quaternion.Identity();\n        this._slerping = false;\n        this._firstFrameSkipped = false;\n        this._fowardAxis = Vector3.Forward();\n        this.mesh = mesh;\n        this.bone = bone;\n        this.target = target;\n        if (options) {\n            if (options.adjustYaw) {\n                this.adjustYaw = options.adjustYaw;\n            }\n            if (options.adjustPitch) {\n                this.adjustPitch = options.adjustPitch;\n            }\n            if (options.adjustRoll) {\n                this.adjustRoll = options.adjustRoll;\n            }\n            if (options.maxYaw != null) {\n                this.maxYaw = options.maxYaw;\n            }\n            else {\n                this.maxYaw = Math.PI;\n            }\n            if (options.minYaw != null) {\n                this.minYaw = options.minYaw;\n            }\n            else {\n                this.minYaw = -Math.PI;\n            }\n            if (options.maxPitch != null) {\n                this.maxPitch = options.maxPitch;\n            }\n            else {\n                this.maxPitch = Math.PI;\n            }\n            if (options.minPitch != null) {\n                this.minPitch = options.minPitch;\n            }\n            else {\n                this.minPitch = -Math.PI;\n            }\n            if (options.slerpAmount != null) {\n                this.slerpAmount = options.slerpAmount;\n            }\n            if (options.upAxis != null) {\n                this.upAxis = options.upAxis;\n            }\n            if (options.upAxisSpace != null) {\n                this.upAxisSpace = options.upAxisSpace;\n            }\n            if (options.yawAxis != null || options.pitchAxis != null) {\n                var newYawAxis = Axis.Y;\n                var newPitchAxis = Axis.X;\n                if (options.yawAxis != null) {\n                    newYawAxis = options.yawAxis.clone();\n                    newYawAxis.normalize();\n                }\n                if (options.pitchAxis != null) {\n                    newPitchAxis = options.pitchAxis.clone();\n                    newPitchAxis.normalize();\n                }\n                var newRollAxis = Vector3.Cross(newPitchAxis, newYawAxis);\n                this._transformYawPitch = Matrix.Identity();\n                Matrix.FromXYZAxesToRef(newPitchAxis, newYawAxis, newRollAxis, this._transformYawPitch);\n                this._transformYawPitchInv = this._transformYawPitch.clone();\n                this._transformYawPitch.invert();\n            }\n        }\n        if (!bone.getParent() && this.upAxisSpace == Space.BONE) {\n            this.upAxisSpace = Space.LOCAL;\n        }\n    }\n    Object.defineProperty(BoneLookController.prototype, \"minYaw\", {\n        /**\n         * Gets or sets the minimum yaw angle that the bone can look to\n         */\n        get: function () {\n            return this._minYaw;\n        },\n        set: function (value) {\n            this._minYaw = value;\n            this._minYawSin = Math.sin(value);\n            this._minYawCos = Math.cos(value);\n            if (this._maxYaw != null) {\n                this._midYawConstraint = this._getAngleDiff(this._minYaw, this._maxYaw) * 0.5 + this._minYaw;\n                this._yawRange = this._maxYaw - this._minYaw;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BoneLookController.prototype, \"maxYaw\", {\n        /**\n         * Gets or sets the maximum yaw angle that the bone can look to\n         */\n        get: function () {\n            return this._maxYaw;\n        },\n        set: function (value) {\n            this._maxYaw = value;\n            this._maxYawSin = Math.sin(value);\n            this._maxYawCos = Math.cos(value);\n            if (this._minYaw != null) {\n                this._midYawConstraint = this._getAngleDiff(this._minYaw, this._maxYaw) * 0.5 + this._minYaw;\n                this._yawRange = this._maxYaw - this._minYaw;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BoneLookController.prototype, \"minPitch\", {\n        /**\n         * Gets or sets the minimum pitch angle that the bone can look to\n         */\n        get: function () {\n            return this._minPitch;\n        },\n        set: function (value) {\n            this._minPitch = value;\n            this._minPitchTan = Math.tan(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BoneLookController.prototype, \"maxPitch\", {\n        /**\n         * Gets or sets the maximum pitch angle that the bone can look to\n         */\n        get: function () {\n            return this._maxPitch;\n        },\n        set: function (value) {\n            this._maxPitch = value;\n            this._maxPitchTan = Math.tan(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Update the bone to look at the target.  This should be called before the scene is rendered (use scene.registerBeforeRender())\n     */\n    BoneLookController.prototype.update = function () {\n        //skip the first frame when slerping so that the TransformNode rotation is correct\n        if (this.slerpAmount < 1 && !this._firstFrameSkipped) {\n            this._firstFrameSkipped = true;\n            return;\n        }\n        var bone = this.bone;\n        var bonePos = BoneLookController._TmpVecs[0];\n        bone.getAbsolutePositionToRef(this.mesh, bonePos);\n        var target = this.target;\n        var _tmpMat1 = BoneLookController._TmpMats[0];\n        var _tmpMat2 = BoneLookController._TmpMats[1];\n        var mesh = this.mesh;\n        var parentBone = bone.getParent();\n        var upAxis = BoneLookController._TmpVecs[1];\n        upAxis.copyFrom(this.upAxis);\n        if (this.upAxisSpace == Space.BONE && parentBone) {\n            if (this._transformYawPitch) {\n                Vector3.TransformCoordinatesToRef(upAxis, this._transformYawPitchInv, upAxis);\n            }\n            parentBone.getDirectionToRef(upAxis, this.mesh, upAxis);\n        }\n        else if (this.upAxisSpace == Space.LOCAL) {\n            mesh.getDirectionToRef(upAxis, upAxis);\n            if (mesh.scaling.x != 1 || mesh.scaling.y != 1 || mesh.scaling.z != 1) {\n                upAxis.normalize();\n            }\n        }\n        var checkYaw = false;\n        var checkPitch = false;\n        if (this._maxYaw != Math.PI || this._minYaw != -Math.PI) {\n            checkYaw = true;\n        }\n        if (this._maxPitch != Math.PI || this._minPitch != -Math.PI) {\n            checkPitch = true;\n        }\n        if (checkYaw || checkPitch) {\n            var spaceMat = BoneLookController._TmpMats[2];\n            var spaceMatInv = BoneLookController._TmpMats[3];\n            if (this.upAxisSpace == Space.BONE && upAxis.y == 1 && parentBone) {\n                parentBone.getRotationMatrixToRef(Space.WORLD, this.mesh, spaceMat);\n            }\n            else if (this.upAxisSpace == Space.LOCAL && upAxis.y == 1 && !parentBone) {\n                spaceMat.copyFrom(mesh.getWorldMatrix());\n            }\n            else {\n                var forwardAxis = BoneLookController._TmpVecs[2];\n                forwardAxis.copyFrom(this._fowardAxis);\n                if (this._transformYawPitch) {\n                    Vector3.TransformCoordinatesToRef(forwardAxis, this._transformYawPitchInv, forwardAxis);\n                }\n                if (parentBone) {\n                    parentBone.getDirectionToRef(forwardAxis, this.mesh, forwardAxis);\n                }\n                else {\n                    mesh.getDirectionToRef(forwardAxis, forwardAxis);\n                }\n                var rightAxis = Vector3.Cross(upAxis, forwardAxis);\n                rightAxis.normalize();\n                forwardAxis = Vector3.Cross(rightAxis, upAxis);\n                Matrix.FromXYZAxesToRef(rightAxis, upAxis, forwardAxis, spaceMat);\n            }\n            spaceMat.invertToRef(spaceMatInv);\n            var xzlen = null;\n            if (checkPitch) {\n                var localTarget = BoneLookController._TmpVecs[3];\n                target.subtractToRef(bonePos, localTarget);\n                Vector3.TransformCoordinatesToRef(localTarget, spaceMatInv, localTarget);\n                xzlen = Math.sqrt(localTarget.x * localTarget.x + localTarget.z * localTarget.z);\n                var pitch = Math.atan2(localTarget.y, xzlen);\n                var newPitch = pitch;\n                if (pitch > this._maxPitch) {\n                    localTarget.y = this._maxPitchTan * xzlen;\n                    newPitch = this._maxPitch;\n                }\n                else if (pitch < this._minPitch) {\n                    localTarget.y = this._minPitchTan * xzlen;\n                    newPitch = this._minPitch;\n                }\n                if (pitch != newPitch) {\n                    Vector3.TransformCoordinatesToRef(localTarget, spaceMat, localTarget);\n                    localTarget.addInPlace(bonePos);\n                    target = localTarget;\n                }\n            }\n            if (checkYaw) {\n                var localTarget = BoneLookController._TmpVecs[4];\n                target.subtractToRef(bonePos, localTarget);\n                Vector3.TransformCoordinatesToRef(localTarget, spaceMatInv, localTarget);\n                var yaw = Math.atan2(localTarget.x, localTarget.z);\n                var newYaw = yaw;\n                if (yaw > this._maxYaw || yaw < this._minYaw) {\n                    if (xzlen == null) {\n                        xzlen = Math.sqrt(localTarget.x * localTarget.x + localTarget.z * localTarget.z);\n                    }\n                    if (this._yawRange > Math.PI) {\n                        if (this._isAngleBetween(yaw, this._maxYaw, this._midYawConstraint)) {\n                            localTarget.z = this._maxYawCos * xzlen;\n                            localTarget.x = this._maxYawSin * xzlen;\n                            newYaw = this._maxYaw;\n                        }\n                        else if (this._isAngleBetween(yaw, this._midYawConstraint, this._minYaw)) {\n                            localTarget.z = this._minYawCos * xzlen;\n                            localTarget.x = this._minYawSin * xzlen;\n                            newYaw = this._minYaw;\n                        }\n                    }\n                    else {\n                        if (yaw > this._maxYaw) {\n                            localTarget.z = this._maxYawCos * xzlen;\n                            localTarget.x = this._maxYawSin * xzlen;\n                            newYaw = this._maxYaw;\n                        }\n                        else if (yaw < this._minYaw) {\n                            localTarget.z = this._minYawCos * xzlen;\n                            localTarget.x = this._minYawSin * xzlen;\n                            newYaw = this._minYaw;\n                        }\n                    }\n                }\n                if (this._slerping && this._yawRange > Math.PI) {\n                    //are we going to be crossing into the min/max region?\n                    var boneFwd = BoneLookController._TmpVecs[8];\n                    boneFwd.copyFrom(Axis.Z);\n                    if (this._transformYawPitch) {\n                        Vector3.TransformCoordinatesToRef(boneFwd, this._transformYawPitchInv, boneFwd);\n                    }\n                    var boneRotMat = BoneLookController._TmpMats[4];\n                    this._boneQuat.toRotationMatrix(boneRotMat);\n                    this.mesh.getWorldMatrix().multiplyToRef(boneRotMat, boneRotMat);\n                    Vector3.TransformCoordinatesToRef(boneFwd, boneRotMat, boneFwd);\n                    Vector3.TransformCoordinatesToRef(boneFwd, spaceMatInv, boneFwd);\n                    var boneYaw = Math.atan2(boneFwd.x, boneFwd.z);\n                    var angBtwTar = this._getAngleBetween(boneYaw, yaw);\n                    var angBtwMidYaw = this._getAngleBetween(boneYaw, this._midYawConstraint);\n                    if (angBtwTar > angBtwMidYaw) {\n                        if (xzlen == null) {\n                            xzlen = Math.sqrt(localTarget.x * localTarget.x + localTarget.z * localTarget.z);\n                        }\n                        var angBtwMax = this._getAngleBetween(boneYaw, this._maxYaw);\n                        var angBtwMin = this._getAngleBetween(boneYaw, this._minYaw);\n                        if (angBtwMin < angBtwMax) {\n                            newYaw = boneYaw + Math.PI * 0.75;\n                            localTarget.z = Math.cos(newYaw) * xzlen;\n                            localTarget.x = Math.sin(newYaw) * xzlen;\n                        }\n                        else {\n                            newYaw = boneYaw - Math.PI * 0.75;\n                            localTarget.z = Math.cos(newYaw) * xzlen;\n                            localTarget.x = Math.sin(newYaw) * xzlen;\n                        }\n                    }\n                }\n                if (yaw != newYaw) {\n                    Vector3.TransformCoordinatesToRef(localTarget, spaceMat, localTarget);\n                    localTarget.addInPlace(bonePos);\n                    target = localTarget;\n                }\n            }\n        }\n        var zaxis = BoneLookController._TmpVecs[5];\n        var xaxis = BoneLookController._TmpVecs[6];\n        var yaxis = BoneLookController._TmpVecs[7];\n        var tmpQuat = BoneLookController._TmpQuat;\n        target.subtractToRef(bonePos, zaxis);\n        zaxis.normalize();\n        Vector3.CrossToRef(upAxis, zaxis, xaxis);\n        xaxis.normalize();\n        Vector3.CrossToRef(zaxis, xaxis, yaxis);\n        yaxis.normalize();\n        Matrix.FromXYZAxesToRef(xaxis, yaxis, zaxis, _tmpMat1);\n        if (xaxis.x === 0 && xaxis.y === 0 && xaxis.z === 0) {\n            return;\n        }\n        if (yaxis.x === 0 && yaxis.y === 0 && yaxis.z === 0) {\n            return;\n        }\n        if (zaxis.x === 0 && zaxis.y === 0 && zaxis.z === 0) {\n            return;\n        }\n        if (this.adjustYaw || this.adjustPitch || this.adjustRoll) {\n            Matrix.RotationYawPitchRollToRef(this.adjustYaw, this.adjustPitch, this.adjustRoll, _tmpMat2);\n            _tmpMat2.multiplyToRef(_tmpMat1, _tmpMat1);\n        }\n        if (this.slerpAmount < 1) {\n            if (!this._slerping) {\n                this.bone.getRotationQuaternionToRef(Space.WORLD, this.mesh, this._boneQuat);\n            }\n            if (this._transformYawPitch) {\n                this._transformYawPitch.multiplyToRef(_tmpMat1, _tmpMat1);\n            }\n            Quaternion.FromRotationMatrixToRef(_tmpMat1, tmpQuat);\n            Quaternion.SlerpToRef(this._boneQuat, tmpQuat, this.slerpAmount, this._boneQuat);\n            this.bone.setRotationQuaternion(this._boneQuat, Space.WORLD, this.mesh);\n            this._slerping = true;\n        }\n        else {\n            if (this._transformYawPitch) {\n                this._transformYawPitch.multiplyToRef(_tmpMat1, _tmpMat1);\n            }\n            this.bone.setRotationMatrix(_tmpMat1, Space.WORLD, this.mesh);\n            this._slerping = false;\n        }\n        this._updateLinkedTransformRotation();\n    };\n    BoneLookController.prototype._getAngleDiff = function (ang1, ang2) {\n        var angDiff = ang2 - ang1;\n        angDiff %= Math.PI * 2;\n        if (angDiff > Math.PI) {\n            angDiff -= Math.PI * 2;\n        }\n        else if (angDiff < -Math.PI) {\n            angDiff += Math.PI * 2;\n        }\n        return angDiff;\n    };\n    BoneLookController.prototype._getAngleBetween = function (ang1, ang2) {\n        ang1 %= 2 * Math.PI;\n        ang1 = ang1 < 0 ? ang1 + 2 * Math.PI : ang1;\n        ang2 %= 2 * Math.PI;\n        ang2 = ang2 < 0 ? ang2 + 2 * Math.PI : ang2;\n        var ab = 0;\n        if (ang1 < ang2) {\n            ab = ang2 - ang1;\n        }\n        else {\n            ab = ang1 - ang2;\n        }\n        if (ab > Math.PI) {\n            ab = Math.PI * 2 - ab;\n        }\n        return ab;\n    };\n    BoneLookController.prototype._isAngleBetween = function (ang, ang1, ang2) {\n        ang %= 2 * Math.PI;\n        ang = ang < 0 ? ang + 2 * Math.PI : ang;\n        ang1 %= 2 * Math.PI;\n        ang1 = ang1 < 0 ? ang1 + 2 * Math.PI : ang1;\n        ang2 %= 2 * Math.PI;\n        ang2 = ang2 < 0 ? ang2 + 2 * Math.PI : ang2;\n        if (ang1 < ang2) {\n            if (ang > ang1 && ang < ang2) {\n                return true;\n            }\n        }\n        else {\n            if (ang > ang2 && ang < ang1) {\n                return true;\n            }\n        }\n        return false;\n    };\n    BoneLookController.prototype._updateLinkedTransformRotation = function () {\n        var bone = this.bone;\n        if (bone._linkedTransformNode) {\n            if (!bone._linkedTransformNode.rotationQuaternion) {\n                bone._linkedTransformNode.rotationQuaternion = new Quaternion();\n            }\n            bone.getRotationQuaternionToRef(Space.LOCAL, null, bone._linkedTransformNode.rotationQuaternion);\n        }\n    };\n    BoneLookController._TmpVecs = ArrayTools.BuildArray(10, Vector3.Zero);\n    BoneLookController._TmpQuat = Quaternion.Identity();\n    BoneLookController._TmpMats = ArrayTools.BuildArray(5, Matrix.Identity);\n    return BoneLookController;\n}());\nexport { BoneLookController };\n//# sourceMappingURL=boneLookController.js.map","import { Bone } from \"./bone.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector3, Matrix, TmpVectors } from \"../Maths/math.vector.js\";\nimport { RawTexture } from \"../Materials/Textures/rawTexture.js\";\nimport { Animation } from \"../Animations/animation.js\";\nimport { AnimationRange } from \"../Animations/animationRange.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n\nimport { Logger } from \"../Misc/logger.js\";\nimport { DeepCopier } from \"../Misc/deepCopier.js\";\n/**\n * Class used to handle skinning animations\n * @see https://doc.babylonjs.com/how_to/how_to_use_bones_and_skeletons\n */\nvar Skeleton = /** @class */ (function () {\n    /**\n     * Creates a new skeleton\n     * @param name defines the skeleton name\n     * @param id defines the skeleton Id\n     * @param scene defines the hosting scene\n     */\n    function Skeleton(\n    /** defines the skeleton name */\n    name, \n    /** defines the skeleton Id */\n    id, scene) {\n        this.name = name;\n        this.id = id;\n        /**\n         * Defines the list of child bones\n         */\n        this.bones = new Array();\n        /**\n         * Defines a boolean indicating if the root matrix is provided by meshes or by the current skeleton (this is the default value)\n         */\n        this.needInitialSkinMatrix = false;\n        this._isDirty = true;\n        this._meshesWithPoseMatrix = new Array();\n        this._identity = Matrix.Identity();\n        this._ranges = {};\n        this._lastAbsoluteTransformsUpdateId = -1;\n        this._canUseTextureForBones = false;\n        this._uniqueId = 0;\n        /** @hidden */\n        this._numBonesWithLinkedTransformNode = 0;\n        /** @hidden */\n        this._hasWaitingData = null;\n        /** @hidden */\n        this._parentContainer = null;\n        /**\n         * Specifies if the skeleton should be serialized\n         */\n        this.doNotSerialize = false;\n        this._useTextureToStoreBoneMatrices = true;\n        this._animationPropertiesOverride = null;\n        // Events\n        /**\n         * An observable triggered before computing the skeleton's matrices\n         */\n        this.onBeforeComputeObservable = new Observable();\n        this.bones = [];\n        this._scene = scene || EngineStore.LastCreatedScene;\n        this._uniqueId = this._scene.getUniqueId();\n        this._scene.addSkeleton(this);\n        //make sure it will recalculate the matrix next time prepare is called.\n        this._isDirty = true;\n        var engineCaps = this._scene.getEngine().getCaps();\n        this._canUseTextureForBones = engineCaps.textureFloat && engineCaps.maxVertexTextureImageUnits > 0;\n    }\n    Object.defineProperty(Skeleton.prototype, \"useTextureToStoreBoneMatrices\", {\n        /**\n         * Gets or sets a boolean indicating that bone matrices should be stored as a texture instead of using shader uniforms (default is true).\n         * Please note that this option is not available if the hardware does not support it\n         */\n        get: function () {\n            return this._useTextureToStoreBoneMatrices;\n        },\n        set: function (value) {\n            this._useTextureToStoreBoneMatrices = value;\n            this._markAsDirty();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Skeleton.prototype, \"animationPropertiesOverride\", {\n        /**\n         * Gets or sets the animation properties override\n         */\n        get: function () {\n            if (!this._animationPropertiesOverride) {\n                return this._scene.animationPropertiesOverride;\n            }\n            return this._animationPropertiesOverride;\n        },\n        set: function (value) {\n            this._animationPropertiesOverride = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Skeleton.prototype, \"isUsingTextureForMatrices\", {\n        /**\n         * Gets a boolean indicating that the skeleton effectively stores matrices into a texture\n         */\n        get: function () {\n            return this.useTextureToStoreBoneMatrices && this._canUseTextureForBones;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Skeleton.prototype, \"uniqueId\", {\n        /**\n         * Gets the unique ID of this skeleton\n         */\n        get: function () {\n            return this._uniqueId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the current object class name.\n     * @return the class name\n     */\n    Skeleton.prototype.getClassName = function () {\n        return \"Skeleton\";\n    };\n    /**\n     * Returns an array containing the root bones\n     * @returns an array containing the root bones\n     */\n    Skeleton.prototype.getChildren = function () {\n        return this.bones.filter(function (b) { return !b.getParent(); });\n    };\n    // Members\n    /**\n     * Gets the list of transform matrices to send to shaders (one matrix per bone)\n     * @param mesh defines the mesh to use to get the root matrix (if needInitialSkinMatrix === true)\n     * @returns a Float32Array containing matrices data\n     */\n    Skeleton.prototype.getTransformMatrices = function (mesh) {\n        if (this.needInitialSkinMatrix) {\n            if (!mesh._bonesTransformMatrices) {\n                this.prepare();\n            }\n            return mesh._bonesTransformMatrices;\n        }\n        if (!this._transformMatrices) {\n            this.prepare();\n        }\n        return this._transformMatrices;\n    };\n    /**\n     * Gets the list of transform matrices to send to shaders inside a texture (one matrix per bone)\n     * @param mesh defines the mesh to use to get the root matrix (if needInitialSkinMatrix === true)\n     * @returns a raw texture containing the data\n     */\n    Skeleton.prototype.getTransformMatrixTexture = function (mesh) {\n        if (this.needInitialSkinMatrix && mesh._transformMatrixTexture) {\n            return mesh._transformMatrixTexture;\n        }\n        return this._transformMatrixTexture;\n    };\n    /**\n     * Gets the current hosting scene\n     * @returns a scene object\n     */\n    Skeleton.prototype.getScene = function () {\n        return this._scene;\n    };\n    // Methods\n    /**\n     * Gets a string representing the current skeleton data\n     * @param fullDetails defines a boolean indicating if we want a verbose version\n     * @returns a string representing the current skeleton data\n     */\n    Skeleton.prototype.toString = function (fullDetails) {\n        var ret = \"Name: \".concat(this.name, \", nBones: \").concat(this.bones.length);\n        ret += \", nAnimationRanges: \".concat(this._ranges ? Object.keys(this._ranges).length : \"none\");\n        if (fullDetails) {\n            ret += \", Ranges: {\";\n            var first = true;\n            for (var name_1 in this._ranges) {\n                if (first) {\n                    ret += \", \";\n                    first = false;\n                }\n                ret += name_1;\n            }\n            ret += \"}\";\n        }\n        return ret;\n    };\n    /**\n     * Get bone's index searching by name\n     * @param name defines bone's name to search for\n     * @return the indice of the bone. Returns -1 if not found\n     */\n    Skeleton.prototype.getBoneIndexByName = function (name) {\n        for (var boneIndex = 0, cache = this.bones.length; boneIndex < cache; boneIndex++) {\n            if (this.bones[boneIndex].name === name) {\n                return boneIndex;\n            }\n        }\n        return -1;\n    };\n    /**\n     * Create a new animation range\n     * @param name defines the name of the range\n     * @param from defines the start key\n     * @param to defines the end key\n     */\n    Skeleton.prototype.createAnimationRange = function (name, from, to) {\n        // check name not already in use\n        if (!this._ranges[name]) {\n            this._ranges[name] = new AnimationRange(name, from, to);\n            for (var i = 0, nBones = this.bones.length; i < nBones; i++) {\n                if (this.bones[i].animations[0]) {\n                    this.bones[i].animations[0].createRange(name, from, to);\n                }\n            }\n        }\n    };\n    /**\n     * Delete a specific animation range\n     * @param name defines the name of the range\n     * @param deleteFrames defines if frames must be removed as well\n     */\n    Skeleton.prototype.deleteAnimationRange = function (name, deleteFrames) {\n        if (deleteFrames === void 0) { deleteFrames = true; }\n        for (var i = 0, nBones = this.bones.length; i < nBones; i++) {\n            if (this.bones[i].animations[0]) {\n                this.bones[i].animations[0].deleteRange(name, deleteFrames);\n            }\n        }\n        this._ranges[name] = null; // said much faster than 'delete this._range[name]'\n    };\n    /**\n     * Gets a specific animation range\n     * @param name defines the name of the range to look for\n     * @returns the requested animation range or null if not found\n     */\n    Skeleton.prototype.getAnimationRange = function (name) {\n        return this._ranges[name] || null;\n    };\n    /**\n     * Gets the list of all animation ranges defined on this skeleton\n     * @returns an array\n     */\n    Skeleton.prototype.getAnimationRanges = function () {\n        var animationRanges = [];\n        var name;\n        for (name in this._ranges) {\n            animationRanges.push(this._ranges[name]);\n        }\n        return animationRanges;\n    };\n    /**\n     * Copy animation range from a source skeleton.\n     * This is not for a complete retargeting, only between very similar skeleton's with only possible bone length differences\n     * @param source defines the source skeleton\n     * @param name defines the name of the range to copy\n     * @param rescaleAsRequired defines if rescaling must be applied if required\n     * @returns true if operation was successful\n     */\n    Skeleton.prototype.copyAnimationRange = function (source, name, rescaleAsRequired) {\n        if (rescaleAsRequired === void 0) { rescaleAsRequired = false; }\n        if (this._ranges[name] || !source.getAnimationRange(name)) {\n            return false;\n        }\n        var ret = true;\n        var frameOffset = this._getHighestAnimationFrame() + 1;\n        // make a dictionary of source skeleton's bones, so exact same order or doubly nested loop is not required\n        var boneDict = {};\n        var sourceBones = source.bones;\n        var nBones;\n        var i;\n        for (i = 0, nBones = sourceBones.length; i < nBones; i++) {\n            boneDict[sourceBones[i].name] = sourceBones[i];\n        }\n        if (this.bones.length !== sourceBones.length) {\n            Logger.Warn(\"copyAnimationRange: this rig has \".concat(this.bones.length, \" bones, while source as \").concat(sourceBones.length));\n            ret = false;\n        }\n        var skelDimensionsRatio = rescaleAsRequired && this.dimensionsAtRest && source.dimensionsAtRest ? this.dimensionsAtRest.divide(source.dimensionsAtRest) : null;\n        for (i = 0, nBones = this.bones.length; i < nBones; i++) {\n            var boneName = this.bones[i].name;\n            var sourceBone = boneDict[boneName];\n            if (sourceBone) {\n                ret = ret && this.bones[i].copyAnimationRange(sourceBone, name, frameOffset, rescaleAsRequired, skelDimensionsRatio);\n            }\n            else {\n                Logger.Warn(\"copyAnimationRange: not same rig, missing source bone \" + boneName);\n                ret = false;\n            }\n        }\n        // do not call createAnimationRange(), since it also is done to bones, which was already done\n        var range = source.getAnimationRange(name);\n        if (range) {\n            this._ranges[name] = new AnimationRange(name, range.from + frameOffset, range.to + frameOffset);\n        }\n        return ret;\n    };\n    /**\n     * Forces the skeleton to go to rest pose\n     */\n    Skeleton.prototype.returnToRest = function () {\n        for (var _i = 0, _a = this.bones; _i < _a.length; _i++) {\n            var bone = _a[_i];\n            if (bone._index !== -1) {\n                bone.returnToRest();\n            }\n        }\n    };\n    Skeleton.prototype._getHighestAnimationFrame = function () {\n        var ret = 0;\n        for (var i = 0, nBones = this.bones.length; i < nBones; i++) {\n            if (this.bones[i].animations[0]) {\n                var highest = this.bones[i].animations[0].getHighestFrame();\n                if (ret < highest) {\n                    ret = highest;\n                }\n            }\n        }\n        return ret;\n    };\n    /**\n     * Begin a specific animation range\n     * @param name defines the name of the range to start\n     * @param loop defines if looping must be turned on (false by default)\n     * @param speedRatio defines the speed ratio to apply (1 by default)\n     * @param onAnimationEnd defines a callback which will be called when animation will end\n     * @returns a new animatable\n     */\n    Skeleton.prototype.beginAnimation = function (name, loop, speedRatio, onAnimationEnd) {\n        var range = this.getAnimationRange(name);\n        if (!range) {\n            return null;\n        }\n        return this._scene.beginAnimation(this, range.from, range.to, loop, speedRatio, onAnimationEnd);\n    };\n    /**\n     * Convert the keyframes for a range of animation on a skeleton to be relative to a given reference frame.\n     * @param skeleton defines the Skeleton containing the animation range to convert\n     * @param referenceFrame defines the frame that keyframes in the range will be relative to\n     * @param range defines the name of the AnimationRange belonging to the Skeleton to convert\n     * @returns the original skeleton\n     */\n    Skeleton.MakeAnimationAdditive = function (skeleton, referenceFrame, range) {\n        if (referenceFrame === void 0) { referenceFrame = 0; }\n        var rangeValue = skeleton.getAnimationRange(range);\n        // We can't make a range additive if it doesn't exist\n        if (!rangeValue) {\n            return null;\n        }\n        // Find any current scene-level animatable belonging to the target that matches the range\n        var sceneAnimatables = skeleton._scene.getAllAnimatablesByTarget(skeleton);\n        var rangeAnimatable = null;\n        for (var index = 0; index < sceneAnimatables.length; index++) {\n            var sceneAnimatable = sceneAnimatables[index];\n            if (sceneAnimatable.fromFrame === (rangeValue === null || rangeValue === void 0 ? void 0 : rangeValue.from) && sceneAnimatable.toFrame === (rangeValue === null || rangeValue === void 0 ? void 0 : rangeValue.to)) {\n                rangeAnimatable = sceneAnimatable;\n                break;\n            }\n        }\n        // Convert the animations belonging to the skeleton to additive keyframes\n        var animatables = skeleton.getAnimatables();\n        for (var index = 0; index < animatables.length; index++) {\n            var animatable = animatables[index];\n            var animations = animatable.animations;\n            if (!animations) {\n                continue;\n            }\n            for (var animIndex = 0; animIndex < animations.length; animIndex++) {\n                Animation.MakeAnimationAdditive(animations[animIndex], referenceFrame, range);\n            }\n        }\n        // Mark the scene-level animatable as additive\n        if (rangeAnimatable) {\n            rangeAnimatable.isAdditive = true;\n        }\n        return skeleton;\n    };\n    /** @hidden */\n    Skeleton.prototype._markAsDirty = function () {\n        this._isDirty = true;\n    };\n    /**\n     * @param mesh\n     * @hidden\n     */\n    Skeleton.prototype._registerMeshWithPoseMatrix = function (mesh) {\n        this._meshesWithPoseMatrix.push(mesh);\n    };\n    /**\n     * @param mesh\n     * @hidden\n     */\n    Skeleton.prototype._unregisterMeshWithPoseMatrix = function (mesh) {\n        var index = this._meshesWithPoseMatrix.indexOf(mesh);\n        if (index > -1) {\n            this._meshesWithPoseMatrix.splice(index, 1);\n        }\n    };\n    Skeleton.prototype._computeTransformMatrices = function (targetMatrix, initialSkinMatrix) {\n        this.onBeforeComputeObservable.notifyObservers(this);\n        for (var index = 0; index < this.bones.length; index++) {\n            var bone = this.bones[index];\n            bone._childUpdateId++;\n            var parentBone = bone.getParent();\n            if (parentBone) {\n                bone.getLocalMatrix().multiplyToRef(parentBone.getWorldMatrix(), bone.getWorldMatrix());\n            }\n            else {\n                if (initialSkinMatrix) {\n                    bone.getLocalMatrix().multiplyToRef(initialSkinMatrix, bone.getWorldMatrix());\n                }\n                else {\n                    bone.getWorldMatrix().copyFrom(bone.getLocalMatrix());\n                }\n            }\n            if (bone._index !== -1) {\n                var mappedIndex = bone._index === null ? index : bone._index;\n                bone.getInvertedAbsoluteTransform().multiplyToArray(bone.getWorldMatrix(), targetMatrix, mappedIndex * 16);\n            }\n        }\n        this._identity.copyToArray(targetMatrix, this.bones.length * 16);\n    };\n    /**\n     * Build all resources required to render a skeleton\n     */\n    Skeleton.prototype.prepare = function () {\n        // Update the local matrix of bones with linked transform nodes.\n        if (this._numBonesWithLinkedTransformNode > 0) {\n            for (var _i = 0, _a = this.bones; _i < _a.length; _i++) {\n                var bone = _a[_i];\n                if (bone._linkedTransformNode) {\n                    // Computing the world matrix also computes the local matrix.\n                    bone._linkedTransformNode.computeWorldMatrix();\n                    bone._matrix = bone._linkedTransformNode._localMatrix;\n                }\n            }\n        }\n        if (this.needInitialSkinMatrix) {\n            for (var _b = 0, _c = this._meshesWithPoseMatrix; _b < _c.length; _b++) {\n                var mesh = _c[_b];\n                var poseMatrix = mesh.getPoseMatrix();\n                var needsUpdate = this._isDirty;\n                if (!mesh._bonesTransformMatrices || mesh._bonesTransformMatrices.length !== 16 * (this.bones.length + 1)) {\n                    mesh._bonesTransformMatrices = new Float32Array(16 * (this.bones.length + 1));\n                    needsUpdate = true;\n                }\n                if (!needsUpdate) {\n                    continue;\n                }\n                if (this._synchronizedWithMesh !== mesh) {\n                    this._synchronizedWithMesh = mesh;\n                    // Prepare bones\n                    for (var _d = 0, _e = this.bones; _d < _e.length; _d++) {\n                        var bone = _e[_d];\n                        if (!bone.getParent()) {\n                            var matrix = bone.getBaseMatrix();\n                            matrix.multiplyToRef(poseMatrix, TmpVectors.Matrix[1]);\n                            bone._updateDifferenceMatrix(TmpVectors.Matrix[1]);\n                        }\n                    }\n                    if (this.isUsingTextureForMatrices) {\n                        var textureWidth = (this.bones.length + 1) * 4;\n                        if (!mesh._transformMatrixTexture || mesh._transformMatrixTexture.getSize().width !== textureWidth) {\n                            if (mesh._transformMatrixTexture) {\n                                mesh._transformMatrixTexture.dispose();\n                            }\n                            mesh._transformMatrixTexture = RawTexture.CreateRGBATexture(mesh._bonesTransformMatrices, (this.bones.length + 1) * 4, 1, this._scene, false, false, 1, 1);\n                        }\n                    }\n                }\n                this._computeTransformMatrices(mesh._bonesTransformMatrices, poseMatrix);\n                if (this.isUsingTextureForMatrices && mesh._transformMatrixTexture) {\n                    mesh._transformMatrixTexture.update(mesh._bonesTransformMatrices);\n                }\n            }\n        }\n        else {\n            if (!this._isDirty) {\n                return;\n            }\n            if (!this._transformMatrices || this._transformMatrices.length !== 16 * (this.bones.length + 1)) {\n                this._transformMatrices = new Float32Array(16 * (this.bones.length + 1));\n                if (this.isUsingTextureForMatrices) {\n                    if (this._transformMatrixTexture) {\n                        this._transformMatrixTexture.dispose();\n                    }\n                    this._transformMatrixTexture = RawTexture.CreateRGBATexture(this._transformMatrices, (this.bones.length + 1) * 4, 1, this._scene, false, false, 1, 1);\n                }\n            }\n            this._computeTransformMatrices(this._transformMatrices, null);\n            if (this.isUsingTextureForMatrices && this._transformMatrixTexture) {\n                this._transformMatrixTexture.update(this._transformMatrices);\n            }\n        }\n        this._isDirty = false;\n    };\n    /**\n     * Gets the list of animatables currently running for this skeleton\n     * @returns an array of animatables\n     */\n    Skeleton.prototype.getAnimatables = function () {\n        if (!this._animatables || this._animatables.length !== this.bones.length) {\n            this._animatables = [];\n            for (var index = 0; index < this.bones.length; index++) {\n                this._animatables.push(this.bones[index]);\n            }\n        }\n        return this._animatables;\n    };\n    /**\n     * Clone the current skeleton\n     * @param name defines the name of the new skeleton\n     * @param id defines the id of the new skeleton\n     * @returns the new skeleton\n     */\n    Skeleton.prototype.clone = function (name, id) {\n        var result = new Skeleton(name, id || name, this._scene);\n        result.needInitialSkinMatrix = this.needInitialSkinMatrix;\n        for (var index = 0; index < this.bones.length; index++) {\n            var source = this.bones[index];\n            var parentBone = null;\n            var parent_1 = source.getParent();\n            if (parent_1) {\n                var parentIndex = this.bones.indexOf(parent_1);\n                parentBone = result.bones[parentIndex];\n            }\n            var bone = new Bone(source.name, result, parentBone, source.getBaseMatrix().clone(), source.getRestPose().clone());\n            bone._index = source._index;\n            if (source._linkedTransformNode) {\n                bone.linkTransformNode(source._linkedTransformNode);\n            }\n            DeepCopier.DeepCopy(source.animations, bone.animations);\n        }\n        if (this._ranges) {\n            result._ranges = {};\n            for (var rangeName in this._ranges) {\n                var range = this._ranges[rangeName];\n                if (range) {\n                    result._ranges[rangeName] = range.clone();\n                }\n            }\n        }\n        this._isDirty = true;\n        return result;\n    };\n    /**\n     * Enable animation blending for this skeleton\n     * @param blendingSpeed defines the blending speed to apply\n     * @see https://doc.babylonjs.com/babylon101/animations#animation-blending\n     */\n    Skeleton.prototype.enableBlending = function (blendingSpeed) {\n        if (blendingSpeed === void 0) { blendingSpeed = 0.01; }\n        this.bones.forEach(function (bone) {\n            bone.animations.forEach(function (animation) {\n                animation.enableBlending = true;\n                animation.blendingSpeed = blendingSpeed;\n            });\n        });\n    };\n    /**\n     * Releases all resources associated with the current skeleton\n     */\n    Skeleton.prototype.dispose = function () {\n        this._meshesWithPoseMatrix = [];\n        // Animations\n        this.getScene().stopAnimation(this);\n        // Remove from scene\n        this.getScene().removeSkeleton(this);\n        if (this._parentContainer) {\n            var index = this._parentContainer.skeletons.indexOf(this);\n            if (index > -1) {\n                this._parentContainer.skeletons.splice(index, 1);\n            }\n            this._parentContainer = null;\n        }\n        if (this._transformMatrixTexture) {\n            this._transformMatrixTexture.dispose();\n            this._transformMatrixTexture = null;\n        }\n    };\n    /**\n     * Serialize the skeleton in a JSON object\n     * @returns a JSON object\n     */\n    Skeleton.prototype.serialize = function () {\n        var _a;\n        var serializationObject = {};\n        serializationObject.name = this.name;\n        serializationObject.id = this.id;\n        if (this.dimensionsAtRest) {\n            serializationObject.dimensionsAtRest = this.dimensionsAtRest.asArray();\n        }\n        serializationObject.bones = [];\n        serializationObject.needInitialSkinMatrix = this.needInitialSkinMatrix;\n        for (var index = 0; index < this.bones.length; index++) {\n            var bone = this.bones[index];\n            var parent_2 = bone.getParent();\n            var serializedBone = {\n                parentBoneIndex: parent_2 ? this.bones.indexOf(parent_2) : -1,\n                index: bone.getIndex(),\n                name: bone.name,\n                id: bone.id,\n                matrix: bone.getBaseMatrix().toArray(),\n                rest: bone.getRestPose().toArray(),\n                linkedTransformNodeId: (_a = bone.getTransformNode()) === null || _a === void 0 ? void 0 : _a.id,\n            };\n            serializationObject.bones.push(serializedBone);\n            if (bone.length) {\n                serializedBone.length = bone.length;\n            }\n            if (bone.metadata) {\n                serializedBone.metadata = bone.metadata;\n            }\n            if (bone.animations && bone.animations.length > 0) {\n                serializedBone.animation = bone.animations[0].serialize();\n            }\n            serializationObject.ranges = [];\n            for (var name_2 in this._ranges) {\n                var source = this._ranges[name_2];\n                if (!source) {\n                    continue;\n                }\n                var range = {};\n                range.name = name_2;\n                range.from = source.from;\n                range.to = source.to;\n                serializationObject.ranges.push(range);\n            }\n        }\n        return serializationObject;\n    };\n    /**\n     * Creates a new skeleton from serialized data\n     * @param parsedSkeleton defines the serialized data\n     * @param scene defines the hosting scene\n     * @returns a new skeleton\n     */\n    Skeleton.Parse = function (parsedSkeleton, scene) {\n        var skeleton = new Skeleton(parsedSkeleton.name, parsedSkeleton.id, scene);\n        if (parsedSkeleton.dimensionsAtRest) {\n            skeleton.dimensionsAtRest = Vector3.FromArray(parsedSkeleton.dimensionsAtRest);\n        }\n        skeleton.needInitialSkinMatrix = parsedSkeleton.needInitialSkinMatrix;\n        var index;\n        for (index = 0; index < parsedSkeleton.bones.length; index++) {\n            var parsedBone = parsedSkeleton.bones[index];\n            var parsedBoneIndex = parsedSkeleton.bones[index].index;\n            var parentBone = null;\n            if (parsedBone.parentBoneIndex > -1) {\n                parentBone = skeleton.bones[parsedBone.parentBoneIndex];\n            }\n            var rest = parsedBone.rest ? Matrix.FromArray(parsedBone.rest) : null;\n            var bone = new Bone(parsedBone.name, skeleton, parentBone, Matrix.FromArray(parsedBone.matrix), rest, null, parsedBoneIndex);\n            if (parsedBone.id !== undefined && parsedBone.id !== null) {\n                bone.id = parsedBone.id;\n            }\n            if (parsedBone.length) {\n                bone.length = parsedBone.length;\n            }\n            if (parsedBone.metadata) {\n                bone.metadata = parsedBone.metadata;\n            }\n            if (parsedBone.animation) {\n                bone.animations.push(Animation.Parse(parsedBone.animation));\n            }\n            if (parsedBone.linkedTransformNodeId !== undefined && parsedBone.linkedTransformNodeId !== null) {\n                skeleton._hasWaitingData = true;\n                bone._waitingTransformNodeId = parsedBone.linkedTransformNodeId;\n            }\n        }\n        // placed after bones, so createAnimationRange can cascade down\n        if (parsedSkeleton.ranges) {\n            for (index = 0; index < parsedSkeleton.ranges.length; index++) {\n                var data = parsedSkeleton.ranges[index];\n                skeleton.createAnimationRange(data.name, data.from, data.to);\n            }\n        }\n        return skeleton;\n    };\n    /**\n     * Compute all node absolute transforms\n     * @param forceUpdate defines if computation must be done even if cache is up to date\n     */\n    Skeleton.prototype.computeAbsoluteTransforms = function (forceUpdate) {\n        if (forceUpdate === void 0) { forceUpdate = false; }\n        var renderId = this._scene.getRenderId();\n        if (this._lastAbsoluteTransformsUpdateId != renderId || forceUpdate) {\n            this.bones[0].computeAbsoluteTransforms();\n            this._lastAbsoluteTransformsUpdateId = renderId;\n        }\n    };\n    /**\n     * Gets the root pose matrix\n     * @returns a matrix\n     */\n    Skeleton.prototype.getPoseMatrix = function () {\n        var poseMatrix = null;\n        if (this._meshesWithPoseMatrix.length > 0) {\n            poseMatrix = this._meshesWithPoseMatrix[0].getPoseMatrix();\n        }\n        return poseMatrix;\n    };\n    /**\n     * Sorts bones per internal index\n     */\n    Skeleton.prototype.sortBones = function () {\n        var bones = new Array();\n        var visited = new Array(this.bones.length);\n        for (var index = 0; index < this.bones.length; index++) {\n            this._sortBones(index, bones, visited);\n        }\n        this.bones = bones;\n    };\n    Skeleton.prototype._sortBones = function (index, bones, visited) {\n        if (visited[index]) {\n            return;\n        }\n        visited[index] = true;\n        var bone = this.bones[index];\n        if (!bone)\n            return;\n        if (bone._index === undefined) {\n            bone._index = index;\n        }\n        var parentBone = bone.getParent();\n        if (parentBone) {\n            this._sortBones(this.bones.indexOf(parentBone), bones, visited);\n        }\n        bones.push(bone);\n    };\n    /**\n     * Set the current local matrix as the restPose for all bones in the skeleton.\n     */\n    Skeleton.prototype.setCurrentPoseAsRest = function () {\n        this.bones.forEach(function (b) {\n            b.setCurrentPoseAsRest();\n        });\n    };\n    return Skeleton;\n}());\nexport { Skeleton };\n//# sourceMappingURL=skeleton.js.map","import { DataBuffer } from \"./dataBuffer.js\";\n/**\n * Class used to store data that will be store in GPU memory\n */\nvar Buffer = /** @class */ (function () {\n    /**\n     * Constructor\n     * @param engine the engine\n     * @param data the data to use for this buffer\n     * @param updatable whether the data is updatable\n     * @param stride the stride (optional)\n     * @param postponeInternalCreation whether to postpone creating the internal WebGL buffer (optional)\n     * @param instanced whether the buffer is instanced (optional)\n     * @param useBytes set to true if the stride in in bytes (optional)\n     * @param divisor sets an optional divisor for instances (1 by default)\n     */\n    function Buffer(engine, data, updatable, stride, postponeInternalCreation, instanced, useBytes, divisor) {\n        if (stride === void 0) { stride = 0; }\n        if (postponeInternalCreation === void 0) { postponeInternalCreation = false; }\n        if (instanced === void 0) { instanced = false; }\n        if (useBytes === void 0) { useBytes = false; }\n        this._isAlreadyOwned = false;\n        if (engine.getScene) {\n            // old versions of VertexBuffer accepted 'mesh' instead of 'engine'\n            this._engine = engine.getScene().getEngine();\n        }\n        else {\n            this._engine = engine;\n        }\n        this._updatable = updatable;\n        this._instanced = instanced;\n        this._divisor = divisor || 1;\n        if (data instanceof DataBuffer) {\n            this._data = null;\n            this._buffer = data;\n        }\n        else {\n            this._data = data;\n            this._buffer = null;\n        }\n        this.byteStride = useBytes ? stride : stride * Float32Array.BYTES_PER_ELEMENT;\n        if (!postponeInternalCreation) {\n            // by default\n            this.create();\n        }\n    }\n    /**\n     * Create a new VertexBuffer based on the current buffer\n     * @param kind defines the vertex buffer kind (position, normal, etc.)\n     * @param offset defines offset in the buffer (0 by default)\n     * @param size defines the size in floats of attributes (position is 3 for instance)\n     * @param stride defines the stride size in floats in the buffer (the offset to apply to reach next value when data is interleaved)\n     * @param instanced defines if the vertex buffer contains indexed data\n     * @param useBytes defines if the offset and stride are in bytes     *\n     * @param divisor sets an optional divisor for instances (1 by default)\n     * @returns the new vertex buffer\n     */\n    Buffer.prototype.createVertexBuffer = function (kind, offset, size, stride, instanced, useBytes, divisor) {\n        if (useBytes === void 0) { useBytes = false; }\n        var byteOffset = useBytes ? offset : offset * Float32Array.BYTES_PER_ELEMENT;\n        var byteStride = stride ? (useBytes ? stride : stride * Float32Array.BYTES_PER_ELEMENT) : this.byteStride;\n        // a lot of these parameters are ignored as they are overridden by the buffer\n        return new VertexBuffer(this._engine, this, kind, this._updatable, true, byteStride, instanced === undefined ? this._instanced : instanced, byteOffset, size, undefined, undefined, true, this._divisor || divisor);\n    };\n    // Properties\n    /**\n     * Gets a boolean indicating if the Buffer is updatable?\n     * @returns true if the buffer is updatable\n     */\n    Buffer.prototype.isUpdatable = function () {\n        return this._updatable;\n    };\n    /**\n     * Gets current buffer's data\n     * @returns a DataArray or null\n     */\n    Buffer.prototype.getData = function () {\n        return this._data;\n    };\n    /**\n     * Gets underlying native buffer\n     * @returns underlying native buffer\n     */\n    Buffer.prototype.getBuffer = function () {\n        return this._buffer;\n    };\n    /**\n     * Gets the stride in float32 units (i.e. byte stride / 4).\n     * May not be an integer if the byte stride is not divisible by 4.\n     * @returns the stride in float32 units\n     * @deprecated Please use byteStride instead.\n     */\n    Buffer.prototype.getStrideSize = function () {\n        return this.byteStride / Float32Array.BYTES_PER_ELEMENT;\n    };\n    // Methods\n    /**\n     * Store data into the buffer. Creates the buffer if not used already.\n     * If the buffer was already used, it will be updated only if it is updatable, otherwise it will do nothing.\n     * @param data defines the data to store\n     */\n    Buffer.prototype.create = function (data) {\n        if (data === void 0) { data = null; }\n        if (!data && this._buffer) {\n            return; // nothing to do\n        }\n        data = data || this._data;\n        if (!data) {\n            return;\n        }\n        if (!this._buffer) {\n            // create buffer\n            if (this._updatable) {\n                this._buffer = this._engine.createDynamicVertexBuffer(data);\n                this._data = data;\n            }\n            else {\n                this._buffer = this._engine.createVertexBuffer(data);\n            }\n        }\n        else if (this._updatable) {\n            // update buffer\n            this._engine.updateDynamicVertexBuffer(this._buffer, data);\n            this._data = data;\n        }\n    };\n    /** @hidden */\n    Buffer.prototype._rebuild = function () {\n        this._buffer = null;\n        this.create(this._data);\n    };\n    /**\n     * Update current buffer data\n     * @param data defines the data to store\n     */\n    Buffer.prototype.update = function (data) {\n        this.create(data);\n    };\n    /**\n     * Updates the data directly.\n     * @param data the new data\n     * @param offset the new offset\n     * @param vertexCount the vertex count (optional)\n     * @param useBytes set to true if the offset is in bytes\n     */\n    Buffer.prototype.updateDirectly = function (data, offset, vertexCount, useBytes) {\n        if (useBytes === void 0) { useBytes = false; }\n        if (!this._buffer) {\n            return;\n        }\n        if (this._updatable) {\n            // update buffer\n            this._engine.updateDynamicVertexBuffer(this._buffer, data, useBytes ? offset : offset * Float32Array.BYTES_PER_ELEMENT, vertexCount ? vertexCount * this.byteStride : undefined);\n            if (offset === 0 && vertexCount === undefined) {\n                // Keep the data if we easily can\n                this._data = data;\n            }\n            else {\n                this._data = null;\n            }\n        }\n    };\n    /** @hidden */\n    Buffer.prototype._increaseReferences = function () {\n        if (!this._buffer) {\n            return;\n        }\n        if (!this._isAlreadyOwned) {\n            this._isAlreadyOwned = true;\n            return;\n        }\n        this._buffer.references++;\n    };\n    /**\n     * Release all resources\n     */\n    Buffer.prototype.dispose = function () {\n        if (!this._buffer) {\n            return;\n        }\n        if (this._engine._releaseBuffer(this._buffer)) {\n            this._buffer = null;\n            this._data = null;\n        }\n    };\n    return Buffer;\n}());\nexport { Buffer };\n/**\n * Specialized buffer used to store vertex data\n */\nvar VertexBuffer = /** @class */ (function () {\n    /**\n     * Constructor\n     * @param engine the engine\n     * @param data the data to use for this vertex buffer\n     * @param kind the vertex buffer kind\n     * @param updatable whether the data is updatable\n     * @param postponeInternalCreation whether to postpone creating the internal WebGL buffer (optional)\n     * @param stride the stride (optional)\n     * @param instanced whether the buffer is instanced (optional)\n     * @param offset the offset of the data (optional)\n     * @param size the number of components (optional)\n     * @param type the type of the component (optional)\n     * @param normalized whether the data contains normalized data (optional)\n     * @param useBytes set to true if stride and offset are in bytes (optional)\n     * @param divisor defines the instance divisor to use (1 by default)\n     * @param takeBufferOwnership defines if the buffer should be released when the vertex buffer is disposed\n     */\n    function VertexBuffer(engine, data, kind, updatable, postponeInternalCreation, stride, instanced, offset, size, type, normalized, useBytes, divisor, takeBufferOwnership) {\n        if (normalized === void 0) { normalized = false; }\n        if (useBytes === void 0) { useBytes = false; }\n        if (divisor === void 0) { divisor = 1; }\n        if (takeBufferOwnership === void 0) { takeBufferOwnership = false; }\n        if (data instanceof Buffer) {\n            this._buffer = data;\n            this._ownsBuffer = takeBufferOwnership;\n        }\n        else {\n            this._buffer = new Buffer(engine, data, updatable, stride, postponeInternalCreation, instanced, useBytes);\n            this._ownsBuffer = true;\n        }\n        this.uniqueId = VertexBuffer._Counter++;\n        this._kind = kind;\n        if (type == undefined) {\n            var data_1 = this.getData();\n            this.type = VertexBuffer.FLOAT;\n            if (data_1 instanceof Int8Array) {\n                this.type = VertexBuffer.BYTE;\n            }\n            else if (data_1 instanceof Uint8Array) {\n                this.type = VertexBuffer.UNSIGNED_BYTE;\n            }\n            else if (data_1 instanceof Int16Array) {\n                this.type = VertexBuffer.SHORT;\n            }\n            else if (data_1 instanceof Uint16Array) {\n                this.type = VertexBuffer.UNSIGNED_SHORT;\n            }\n            else if (data_1 instanceof Int32Array) {\n                this.type = VertexBuffer.INT;\n            }\n            else if (data_1 instanceof Uint32Array) {\n                this.type = VertexBuffer.UNSIGNED_INT;\n            }\n        }\n        else {\n            this.type = type;\n        }\n        var typeByteLength = VertexBuffer.GetTypeByteLength(this.type);\n        if (useBytes) {\n            this._size = size || (stride ? stride / typeByteLength : VertexBuffer.DeduceStride(kind));\n            this.byteStride = stride || this._buffer.byteStride || this._size * typeByteLength;\n            this.byteOffset = offset || 0;\n        }\n        else {\n            this._size = size || stride || VertexBuffer.DeduceStride(kind);\n            this.byteStride = stride ? stride * typeByteLength : this._buffer.byteStride || this._size * typeByteLength;\n            this.byteOffset = (offset || 0) * typeByteLength;\n        }\n        this.normalized = normalized;\n        this._instanced = instanced !== undefined ? instanced : false;\n        this._instanceDivisor = instanced ? divisor : 0;\n        this._computeHashCode();\n    }\n    Object.defineProperty(VertexBuffer.prototype, \"instanceDivisor\", {\n        /**\n         * Gets or sets the instance divisor when in instanced mode\n         */\n        get: function () {\n            return this._instanceDivisor;\n        },\n        set: function (value) {\n            this._instanceDivisor = value;\n            if (value == 0) {\n                this._instanced = false;\n            }\n            else {\n                this._instanced = true;\n            }\n            this._computeHashCode();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    VertexBuffer.prototype._computeHashCode = function () {\n        // note: cast to any because the property is declared readonly\n        this.hashCode =\n            ((this.type - 5120) << 0) +\n                ((this.normalized ? 1 : 0) << 3) +\n                (this._size << 4) +\n                ((this._instanced ? 1 : 0) << 6) +\n                /* keep 5 bits free */\n                (this.byteStride << 12);\n    };\n    /** @hidden */\n    VertexBuffer.prototype._rebuild = function () {\n        if (!this._buffer) {\n            return;\n        }\n        this._buffer._rebuild();\n    };\n    /**\n     * Returns the kind of the VertexBuffer (string)\n     * @returns a string\n     */\n    VertexBuffer.prototype.getKind = function () {\n        return this._kind;\n    };\n    // Properties\n    /**\n     * Gets a boolean indicating if the VertexBuffer is updatable?\n     * @returns true if the buffer is updatable\n     */\n    VertexBuffer.prototype.isUpdatable = function () {\n        return this._buffer.isUpdatable();\n    };\n    /**\n     * Gets current buffer's data\n     * @returns a DataArray or null\n     */\n    VertexBuffer.prototype.getData = function () {\n        return this._buffer.getData();\n    };\n    /**\n     * Gets current buffer's data as a float array. Float data is constructed if the vertex buffer data cannot be returned directly.\n     * @param totalVertices number of vertices in the buffer to take into account\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\n     * @returns a float array containing vertex data\n     */\n    VertexBuffer.prototype.getFloatData = function (totalVertices, forceCopy) {\n        var data = this.getData();\n        if (!data) {\n            return null;\n        }\n        var tightlyPackedByteStride = this.getSize() * VertexBuffer.GetTypeByteLength(this.type);\n        var count = totalVertices * this.getSize();\n        if (this.type !== VertexBuffer.FLOAT || this.byteStride !== tightlyPackedByteStride) {\n            var copy_1 = new Float32Array(count);\n            this.forEach(count, function (value, index) { return (copy_1[index] = value); });\n            return copy_1;\n        }\n        if (!(data instanceof Array || data instanceof Float32Array) || this.byteOffset !== 0 || data.length !== count) {\n            if (data instanceof Array) {\n                var offset = this.byteOffset / 4;\n                return data.slice(offset, offset + count);\n            }\n            else if (data instanceof ArrayBuffer) {\n                return new Float32Array(data, this.byteOffset, count);\n            }\n            else {\n                var offset = data.byteOffset + this.byteOffset;\n                if (forceCopy) {\n                    var result = new Float32Array(count);\n                    var source = new Float32Array(data.buffer, offset, count);\n                    result.set(source);\n                    return result;\n                }\n                // Protect against bad data\n                var remainder = offset % 4;\n                if (remainder) {\n                    offset = Math.max(0, offset - remainder);\n                }\n                return new Float32Array(data.buffer, offset, count);\n            }\n        }\n        if (forceCopy) {\n            return data.slice();\n        }\n        return data;\n    };\n    /**\n     * Gets underlying native buffer\n     * @returns underlying native buffer\n     */\n    VertexBuffer.prototype.getBuffer = function () {\n        return this._buffer.getBuffer();\n    };\n    /**\n     * Gets the stride in float32 units (i.e. byte stride / 4).\n     * May not be an integer if the byte stride is not divisible by 4.\n     * @returns the stride in float32 units\n     * @deprecated Please use byteStride instead.\n     */\n    VertexBuffer.prototype.getStrideSize = function () {\n        return this.byteStride / VertexBuffer.GetTypeByteLength(this.type);\n    };\n    /**\n     * Returns the offset as a multiple of the type byte length.\n     * @returns the offset in bytes\n     * @deprecated Please use byteOffset instead.\n     */\n    VertexBuffer.prototype.getOffset = function () {\n        return this.byteOffset / VertexBuffer.GetTypeByteLength(this.type);\n    };\n    /**\n     * Returns the number of components or the byte size per vertex attribute\n     * @param sizeInBytes If true, returns the size in bytes or else the size in number of components of the vertex attribute (default: false)\n     * @returns the number of components\n     */\n    VertexBuffer.prototype.getSize = function (sizeInBytes) {\n        if (sizeInBytes === void 0) { sizeInBytes = false; }\n        return sizeInBytes ? this._size * VertexBuffer.GetTypeByteLength(this.type) : this._size;\n    };\n    /**\n     * Gets a boolean indicating is the internal buffer of the VertexBuffer is instanced\n     * @returns true if this buffer is instanced\n     */\n    VertexBuffer.prototype.getIsInstanced = function () {\n        return this._instanced;\n    };\n    /**\n     * Returns the instancing divisor, zero for non-instanced (integer).\n     * @returns a number\n     */\n    VertexBuffer.prototype.getInstanceDivisor = function () {\n        return this._instanceDivisor;\n    };\n    // Methods\n    /**\n     * Store data into the buffer. If the buffer was already used it will be either recreated or updated depending on isUpdatable property\n     * @param data defines the data to store\n     */\n    VertexBuffer.prototype.create = function (data) {\n        this._buffer.create(data);\n    };\n    /**\n     * Updates the underlying buffer according to the passed numeric array or Float32Array.\n     * This function will create a new buffer if the current one is not updatable\n     * @param data defines the data to store\n     */\n    VertexBuffer.prototype.update = function (data) {\n        this._buffer.update(data);\n    };\n    /**\n     * Updates directly the underlying WebGLBuffer according to the passed numeric array or Float32Array.\n     * Returns the directly updated WebGLBuffer.\n     * @param data the new data\n     * @param offset the new offset\n     * @param useBytes set to true if the offset is in bytes\n     */\n    VertexBuffer.prototype.updateDirectly = function (data, offset, useBytes) {\n        if (useBytes === void 0) { useBytes = false; }\n        this._buffer.updateDirectly(data, offset, undefined, useBytes);\n    };\n    /**\n     * Disposes the VertexBuffer and the underlying WebGLBuffer.\n     */\n    VertexBuffer.prototype.dispose = function () {\n        if (this._ownsBuffer) {\n            this._buffer.dispose();\n        }\n    };\n    /**\n     * Enumerates each value of this vertex buffer as numbers.\n     * @param count the number of values to enumerate\n     * @param callback the callback function called for each value\n     */\n    VertexBuffer.prototype.forEach = function (count, callback) {\n        VertexBuffer.ForEach(this._buffer.getData(), this.byteOffset, this.byteStride, this._size, this.type, count, this.normalized, callback);\n    };\n    /**\n     * Deduces the stride given a kind.\n     * @param kind The kind string to deduce\n     * @returns The deduced stride\n     */\n    VertexBuffer.DeduceStride = function (kind) {\n        switch (kind) {\n            case VertexBuffer.UVKind:\n            case VertexBuffer.UV2Kind:\n            case VertexBuffer.UV3Kind:\n            case VertexBuffer.UV4Kind:\n            case VertexBuffer.UV5Kind:\n            case VertexBuffer.UV6Kind:\n                return 2;\n            case VertexBuffer.NormalKind:\n            case VertexBuffer.PositionKind:\n                return 3;\n            case VertexBuffer.ColorKind:\n            case VertexBuffer.MatricesIndicesKind:\n            case VertexBuffer.MatricesIndicesExtraKind:\n            case VertexBuffer.MatricesWeightsKind:\n            case VertexBuffer.MatricesWeightsExtraKind:\n            case VertexBuffer.TangentKind:\n                return 4;\n            default:\n                throw new Error(\"Invalid kind '\" + kind + \"'\");\n        }\n    };\n    /**\n     * Gets the byte length of the given type.\n     * @param type the type\n     * @returns the number of bytes\n     */\n    VertexBuffer.GetTypeByteLength = function (type) {\n        switch (type) {\n            case VertexBuffer.BYTE:\n            case VertexBuffer.UNSIGNED_BYTE:\n                return 1;\n            case VertexBuffer.SHORT:\n            case VertexBuffer.UNSIGNED_SHORT:\n                return 2;\n            case VertexBuffer.INT:\n            case VertexBuffer.UNSIGNED_INT:\n            case VertexBuffer.FLOAT:\n                return 4;\n            default:\n                throw new Error(\"Invalid type '\".concat(type, \"'\"));\n        }\n    };\n    /**\n     * Enumerates each value of the given parameters as numbers.\n     * @param data the data to enumerate\n     * @param byteOffset the byte offset of the data\n     * @param byteStride the byte stride of the data\n     * @param componentCount the number of components per element\n     * @param componentType the type of the component\n     * @param count the number of values to enumerate\n     * @param normalized whether the data is normalized\n     * @param callback the callback function called for each value\n     */\n    VertexBuffer.ForEach = function (data, byteOffset, byteStride, componentCount, componentType, count, normalized, callback) {\n        if (data instanceof Array) {\n            var offset = byteOffset / 4;\n            var stride = byteStride / 4;\n            for (var index = 0; index < count; index += componentCount) {\n                for (var componentIndex = 0; componentIndex < componentCount; componentIndex++) {\n                    callback(data[offset + componentIndex], index + componentIndex);\n                }\n                offset += stride;\n            }\n        }\n        else {\n            var dataView = data instanceof ArrayBuffer ? new DataView(data) : new DataView(data.buffer, data.byteOffset, data.byteLength);\n            var componentByteLength = VertexBuffer.GetTypeByteLength(componentType);\n            for (var index = 0; index < count; index += componentCount) {\n                var componentByteOffset = byteOffset;\n                for (var componentIndex = 0; componentIndex < componentCount; componentIndex++) {\n                    var value = VertexBuffer._GetFloatValue(dataView, componentType, componentByteOffset, normalized);\n                    callback(value, index + componentIndex);\n                    componentByteOffset += componentByteLength;\n                }\n                byteOffset += byteStride;\n            }\n        }\n    };\n    VertexBuffer._GetFloatValue = function (dataView, type, byteOffset, normalized) {\n        switch (type) {\n            case VertexBuffer.BYTE: {\n                var value = dataView.getInt8(byteOffset);\n                if (normalized) {\n                    value = Math.max(value / 127, -1);\n                }\n                return value;\n            }\n            case VertexBuffer.UNSIGNED_BYTE: {\n                var value = dataView.getUint8(byteOffset);\n                if (normalized) {\n                    value = value / 255;\n                }\n                return value;\n            }\n            case VertexBuffer.SHORT: {\n                var value = dataView.getInt16(byteOffset, true);\n                if (normalized) {\n                    value = Math.max(value / 32767, -1);\n                }\n                return value;\n            }\n            case VertexBuffer.UNSIGNED_SHORT: {\n                var value = dataView.getUint16(byteOffset, true);\n                if (normalized) {\n                    value = value / 65535;\n                }\n                return value;\n            }\n            case VertexBuffer.INT: {\n                return dataView.getInt32(byteOffset, true);\n            }\n            case VertexBuffer.UNSIGNED_INT: {\n                return dataView.getUint32(byteOffset, true);\n            }\n            case VertexBuffer.FLOAT: {\n                return dataView.getFloat32(byteOffset, true);\n            }\n            default: {\n                throw new Error(\"Invalid component type \".concat(type));\n            }\n        }\n    };\n    VertexBuffer._Counter = 0;\n    /**\n     * The byte type.\n     */\n    VertexBuffer.BYTE = 5120;\n    /**\n     * The unsigned byte type.\n     */\n    VertexBuffer.UNSIGNED_BYTE = 5121;\n    /**\n     * The short type.\n     */\n    VertexBuffer.SHORT = 5122;\n    /**\n     * The unsigned short type.\n     */\n    VertexBuffer.UNSIGNED_SHORT = 5123;\n    /**\n     * The integer type.\n     */\n    VertexBuffer.INT = 5124;\n    /**\n     * The unsigned integer type.\n     */\n    VertexBuffer.UNSIGNED_INT = 5125;\n    /**\n     * The float type.\n     */\n    VertexBuffer.FLOAT = 5126;\n    // Enums\n    /**\n     * Positions\n     */\n    VertexBuffer.PositionKind = \"position\";\n    /**\n     * Normals\n     */\n    VertexBuffer.NormalKind = \"normal\";\n    /**\n     * Tangents\n     */\n    VertexBuffer.TangentKind = \"tangent\";\n    /**\n     * Texture coordinates\n     */\n    VertexBuffer.UVKind = \"uv\";\n    /**\n     * Texture coordinates 2\n     */\n    VertexBuffer.UV2Kind = \"uv2\";\n    /**\n     * Texture coordinates 3\n     */\n    VertexBuffer.UV3Kind = \"uv3\";\n    /**\n     * Texture coordinates 4\n     */\n    VertexBuffer.UV4Kind = \"uv4\";\n    /**\n     * Texture coordinates 5\n     */\n    VertexBuffer.UV5Kind = \"uv5\";\n    /**\n     * Texture coordinates 6\n     */\n    VertexBuffer.UV6Kind = \"uv6\";\n    /**\n     * Colors\n     */\n    VertexBuffer.ColorKind = \"color\";\n    /**\n     * Instance Colors\n     */\n    VertexBuffer.ColorInstanceKind = \"instanceColor\";\n    /**\n     * Matrix indices (for bones)\n     */\n    VertexBuffer.MatricesIndicesKind = \"matricesIndices\";\n    /**\n     * Matrix weights (for bones)\n     */\n    VertexBuffer.MatricesWeightsKind = \"matricesWeights\";\n    /**\n     * Additional matrix indices (for bones)\n     */\n    VertexBuffer.MatricesIndicesExtraKind = \"matricesIndicesExtra\";\n    /**\n     * Additional matrix weights (for bones)\n     */\n    VertexBuffer.MatricesWeightsExtraKind = \"matricesWeightsExtra\";\n    return VertexBuffer;\n}());\nexport { VertexBuffer };\n//# sourceMappingURL=buffer.js.map","/**\n * Class used to store gfx data (like WebGLBuffer)\n */\nvar DataBuffer = /** @class */ (function () {\n    /**\n     * Constructs the buffer\n     */\n    function DataBuffer() {\n        /**\n         * Gets or sets the number of objects referencing this buffer\n         */\n        this.references = 0;\n        /** Gets or sets the size of the underlying buffer */\n        this.capacity = 0;\n        /**\n         * Gets or sets a boolean indicating if the buffer contains 32bits indices\n         */\n        this.is32Bits = false;\n        this.uniqueId = DataBuffer._Counter++;\n    }\n    Object.defineProperty(DataBuffer.prototype, \"underlyingResource\", {\n        /**\n         * Gets the underlying buffer\n         */\n        get: function () {\n            return null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    DataBuffer._Counter = 0;\n    return DataBuffer;\n}());\nexport { DataBuffer };\n//# sourceMappingURL=dataBuffer.js.map","\n/**\n * This class is a small wrapper around a native buffer that can be read and/or written\n */\nvar StorageBuffer = /** @class */ (function () {\n    /**\n     * Creates a new storage buffer instance\n     * @param engine The engine the buffer will be created inside\n     * @param size The size of the buffer in bytes\n     * @param creationFlags flags to use when creating the buffer (see undefined). The BUFFER_CREATIONFLAG_STORAGE flag will be automatically added.\n     */\n    function StorageBuffer(engine, size, creationFlags) {\n        if (creationFlags === void 0) { creationFlags = 3; }\n        this._engine = engine;\n        this._engine._storageBuffers.push(this);\n        this._create(size, creationFlags);\n    }\n    StorageBuffer.prototype._create = function (size, creationFlags) {\n        this._bufferSize = size;\n        this._creationFlags = creationFlags;\n        this._buffer = this._engine.createStorageBuffer(size, creationFlags);\n    };\n    /** @hidden */\n    StorageBuffer.prototype._rebuild = function () {\n        this._create(this._bufferSize, this._creationFlags);\n    };\n    /**\n     * Gets underlying native buffer\n     * @returns underlying native buffer\n     */\n    StorageBuffer.prototype.getBuffer = function () {\n        return this._buffer;\n    };\n    /**\n     * Updates the storage buffer\n     * @param data the data used to update the storage buffer\n     * @param byteOffset the byte offset of the data (optional)\n     * @param byteLength the byte length of the data (optional)\n     */\n    StorageBuffer.prototype.update = function (data, byteOffset, byteLength) {\n        if (!this._buffer) {\n            return;\n        }\n        this._engine.updateStorageBuffer(this._buffer, data, byteOffset, byteLength);\n    };\n    /**\n     * Reads data from the storage buffer\n     * @param offset The offset in the storage buffer to start reading from (default: 0)\n     * @param size  The number of bytes to read from the storage buffer (default: capacity of the buffer)\n     * @param buffer The buffer to write the data we have read from the storage buffer to (optional)\n     * @returns If not undefined, returns the (promise) buffer (as provided by the 4th parameter) filled with the data, else it returns a (promise) Uint8Array with the data read from the storage buffer\n     */\n    StorageBuffer.prototype.read = function (offset, size, buffer) {\n        return this._engine.readFromStorageBuffer(this._buffer, offset, size, buffer);\n    };\n    /**\n     * Disposes the storage buffer\n     */\n    StorageBuffer.prototype.dispose = function () {\n        var storageBuffers = this._engine._storageBuffers;\n        var index = storageBuffers.indexOf(this);\n        if (index !== -1) {\n            storageBuffers[index] = storageBuffers[storageBuffers.length - 1];\n            storageBuffers.pop();\n        }\n        this._engine._releaseBuffer(this._buffer);\n        this._buffer = null;\n    };\n    return StorageBuffer;\n}());\nexport { StorageBuffer };\n//# sourceMappingURL=storageBuffer.js.map","import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { EventConstants } from \"../../Events/deviceInputEvents.js\";\n/**\n * Base class for mouse wheel input..\n * See FollowCameraMouseWheelInput in src/Cameras/Inputs/freeCameraMouseWheelInput.ts\n * for example usage.\n */\nvar BaseCameraMouseWheelInput = /** @class */ (function () {\n    function BaseCameraMouseWheelInput() {\n        /**\n         * How fast is the camera moves in relation to X axis mouseWheel events.\n         * Use negative value to reverse direction.\n         */\n        this.wheelPrecisionX = 3.0;\n        /**\n         * How fast is the camera moves in relation to Y axis mouseWheel events.\n         * Use negative value to reverse direction.\n         */\n        this.wheelPrecisionY = 3.0;\n        /**\n         * How fast is the camera moves in relation to Z axis mouseWheel events.\n         * Use negative value to reverse direction.\n         */\n        this.wheelPrecisionZ = 3.0;\n        /**\n         * Observable for when a mouse wheel move event occurs.\n         */\n        this.onChangedObservable = new Observable();\n        /**\n         * Incremental value of multiple mouse wheel movements of the X axis.\n         * Should be zero-ed when read.\n         */\n        this._wheelDeltaX = 0;\n        /**\n         * Incremental value of multiple mouse wheel movements of the Y axis.\n         * Should be zero-ed when read.\n         */\n        this._wheelDeltaY = 0;\n        /**\n         * Incremental value of multiple mouse wheel movements of the Z axis.\n         * Should be zero-ed when read.\n         */\n        this._wheelDeltaZ = 0;\n        /**\n         * Firefox uses a different scheme to report scroll distances to other\n         * browsers. Rather than use complicated methods to calculate the exact\n         * multiple we need to apply, let's just cheat and use a constant.\n         * https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode\n         * https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n         */\n        this._ffMultiplier = 12;\n        /**\n         * Different event attributes for wheel data fall into a few set ranges.\n         * Some relevant but dated date here:\n         * https://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\n         */\n        this._normalize = 120;\n    }\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     * @param noPreventDefault Defines whether event caught by the controls\n     *   should call preventdefault().\n     *   (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    BaseCameraMouseWheelInput.prototype.attachControl = function (noPreventDefault) {\n        var _this = this;\n        // eslint-disable-next-line prefer-rest-params\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        this._wheel = function (pointer) {\n            // sanity check - this should be a PointerWheel event.\n            if (pointer.type !== PointerEventTypes.POINTERWHEEL) {\n                return;\n            }\n            var event = pointer.event;\n            var platformScale = event.deltaMode === EventConstants.DOM_DELTA_LINE ? _this._ffMultiplier : 1; // If this happens to be set to DOM_DELTA_LINE, adjust accordingly\n            if (event.deltaY !== undefined) {\n                // Most recent browsers versions have delta properties.\n                // Firefox >= v17  (Has WebGL >= v4)\n                // Chrome >=  v31  (Has WebGL >= v8)\n                // Edge >=    v12  (Has WebGl >= v12)\n                // https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent\n                _this._wheelDeltaX += (_this.wheelPrecisionX * platformScale * event.deltaX) / _this._normalize;\n                _this._wheelDeltaY -= (_this.wheelPrecisionY * platformScale * event.deltaY) / _this._normalize;\n                _this._wheelDeltaZ += (_this.wheelPrecisionZ * platformScale * event.deltaZ) / _this._normalize;\n            }\n            else if (event.wheelDeltaY !== undefined) {\n                // Unsure whether these catch anything more. Documentation\n                // online is contradictory.\n                _this._wheelDeltaX += (_this.wheelPrecisionX * platformScale * event.wheelDeltaX) / _this._normalize;\n                _this._wheelDeltaY -= (_this.wheelPrecisionY * platformScale * event.wheelDeltaY) / _this._normalize;\n                _this._wheelDeltaZ += (_this.wheelPrecisionZ * platformScale * event.wheelDeltaZ) / _this._normalize;\n            }\n            else if (event.wheelDelta) {\n                // IE >= v9   (Has WebGL >= v11)\n                // Maybe others?\n                _this._wheelDeltaY -= (_this.wheelPrecisionY * event.wheelDelta) / _this._normalize;\n            }\n            if (event.preventDefault) {\n                if (!noPreventDefault) {\n                    event.preventDefault();\n                }\n            }\n        };\n        this._observer = this.camera.getScene().onPointerObservable.add(this._wheel, PointerEventTypes.POINTERWHEEL);\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    BaseCameraMouseWheelInput.prototype.detachControl = function () {\n        if (this._observer) {\n            this.camera.getScene().onPointerObservable.remove(this._observer);\n            this._observer = null;\n            this._wheel = null;\n        }\n        if (this.onChangedObservable) {\n            this.onChangedObservable.clear();\n        }\n    };\n    /**\n     * Called for each rendered frame.\n     */\n    BaseCameraMouseWheelInput.prototype.checkInputs = function () {\n        this.onChangedObservable.notifyObservers({\n            wheelDeltaX: this._wheelDeltaX,\n            wheelDeltaY: this._wheelDeltaY,\n            wheelDeltaZ: this._wheelDeltaZ,\n        });\n        // Clear deltas.\n        this._wheelDeltaX = 0;\n        this._wheelDeltaY = 0;\n        this._wheelDeltaZ = 0;\n    };\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    BaseCameraMouseWheelInput.prototype.getClassName = function () {\n        return \"BaseCameraMouseWheelInput\";\n    };\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input friendly name\n     */\n    BaseCameraMouseWheelInput.prototype.getSimpleName = function () {\n        return \"mousewheel\";\n    };\n    __decorate([\n        serialize()\n    ], BaseCameraMouseWheelInput.prototype, \"wheelPrecisionX\", void 0);\n    __decorate([\n        serialize()\n    ], BaseCameraMouseWheelInput.prototype, \"wheelPrecisionY\", void 0);\n    __decorate([\n        serialize()\n    ], BaseCameraMouseWheelInput.prototype, \"wheelPrecisionZ\", void 0);\n    return BaseCameraMouseWheelInput;\n}());\nexport { BaseCameraMouseWheelInput };\n//# sourceMappingURL=BaseCameraMouseWheelInput.js.map","import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents.js\";\n/**\n * Base class for Camera Pointer Inputs.\n * See FollowCameraPointersInput in src/Cameras/Inputs/followCameraPointersInput.ts\n * for example usage.\n */\nvar BaseCameraPointersInput = /** @class */ (function () {\n    function BaseCameraPointersInput() {\n        this._currentActiveButton = -1;\n        /**\n         * Defines the buttons associated with the input to handle camera move.\n         */\n        this.buttons = [0, 1, 2];\n    }\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    BaseCameraPointersInput.prototype.attachControl = function (noPreventDefault) {\n        var _this = this;\n        // eslint-disable-next-line prefer-rest-params\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        var engine = this.camera.getEngine();\n        var element = engine.getInputElement();\n        var previousPinchSquaredDistance = 0;\n        var previousMultiTouchPanPosition = null;\n        this._pointA = null;\n        this._pointB = null;\n        this._altKey = false;\n        this._ctrlKey = false;\n        this._metaKey = false;\n        this._shiftKey = false;\n        this._buttonsPressed = 0;\n        this._pointerInput = function (p) {\n            var evt = p.event;\n            var isTouch = evt.pointerType === \"touch\";\n            if (engine.isInVRExclusivePointerMode) {\n                return;\n            }\n            if (p.type !== PointerEventTypes.POINTERMOVE && _this.buttons.indexOf(evt.button) === -1) {\n                return;\n            }\n            var srcElement = (evt.srcElement || evt.target);\n            _this._altKey = evt.altKey;\n            _this._ctrlKey = evt.ctrlKey;\n            _this._metaKey = evt.metaKey;\n            _this._shiftKey = evt.shiftKey;\n            _this._buttonsPressed = evt.buttons;\n            if (engine.isPointerLock) {\n                var offsetX = evt.movementX || evt.mozMovementX || evt.webkitMovementX || evt.msMovementX || 0;\n                var offsetY = evt.movementY || evt.mozMovementY || evt.webkitMovementY || evt.msMovementY || 0;\n                _this.onTouch(null, offsetX, offsetY);\n                _this._pointA = null;\n                _this._pointB = null;\n            }\n            else if (p.type === PointerEventTypes.POINTERDOWN && (_this._currentActiveButton === -1 || isTouch)) {\n                try {\n                    srcElement === null || srcElement === void 0 ? void 0 : srcElement.setPointerCapture(evt.pointerId);\n                }\n                catch (e) {\n                    //Nothing to do with the error. Execution will continue.\n                }\n                if (_this._pointA === null) {\n                    _this._pointA = {\n                        x: evt.clientX,\n                        y: evt.clientY,\n                        pointerId: evt.pointerId,\n                        type: evt.pointerType,\n                    };\n                }\n                else if (_this._pointB === null) {\n                    _this._pointB = {\n                        x: evt.clientX,\n                        y: evt.clientY,\n                        pointerId: evt.pointerId,\n                        type: evt.pointerType,\n                    };\n                }\n                if (_this._currentActiveButton === -1 && !isTouch) {\n                    _this._currentActiveButton = evt.button;\n                }\n                _this.onButtonDown(evt);\n                if (!noPreventDefault) {\n                    evt.preventDefault();\n                    element && element.focus();\n                }\n            }\n            else if (p.type === PointerEventTypes.POINTERDOUBLETAP) {\n                _this.onDoubleTap(evt.pointerType);\n            }\n            else if (p.type === PointerEventTypes.POINTERUP && (_this._currentActiveButton === evt.button || isTouch)) {\n                try {\n                    srcElement === null || srcElement === void 0 ? void 0 : srcElement.releasePointerCapture(evt.pointerId);\n                }\n                catch (e) {\n                    //Nothing to do with the error.\n                }\n                if (!isTouch) {\n                    _this._pointB = null; // Mouse and pen are mono pointer\n                }\n                //would be better to use pointers.remove(evt.pointerId) for multitouch gestures,\n                //but emptying completely pointers collection is required to fix a bug on iPhone :\n                //when changing orientation while pinching camera,\n                //one pointer stay pressed forever if we don't release all pointers\n                //will be ok to put back pointers.remove(evt.pointerId); when iPhone bug corrected\n                if (engine._badOS) {\n                    _this._pointA = _this._pointB = null;\n                }\n                else {\n                    //only remove the impacted pointer in case of multitouch allowing on most\n                    //platforms switching from rotate to zoom and pan seamlessly.\n                    if (_this._pointB && _this._pointA && _this._pointA.pointerId == evt.pointerId) {\n                        _this._pointA = _this._pointB;\n                        _this._pointB = null;\n                    }\n                    else if (_this._pointA && _this._pointB && _this._pointB.pointerId == evt.pointerId) {\n                        _this._pointB = null;\n                    }\n                    else {\n                        _this._pointA = _this._pointB = null;\n                    }\n                }\n                if (previousPinchSquaredDistance !== 0 || previousMultiTouchPanPosition) {\n                    // Previous pinch data is populated but a button has been lifted\n                    // so pinch has ended.\n                    _this.onMultiTouch(_this._pointA, _this._pointB, previousPinchSquaredDistance, 0, // pinchSquaredDistance\n                    previousMultiTouchPanPosition, null // multiTouchPanPosition\n                    );\n                    previousPinchSquaredDistance = 0;\n                    previousMultiTouchPanPosition = null;\n                }\n                _this._currentActiveButton = -1;\n                _this.onButtonUp(evt);\n                if (!noPreventDefault) {\n                    evt.preventDefault();\n                }\n            }\n            else if (p.type === PointerEventTypes.POINTERMOVE) {\n                if (!noPreventDefault) {\n                    evt.preventDefault();\n                }\n                // One button down\n                if (_this._pointA && _this._pointB === null) {\n                    var offsetX = evt.clientX - _this._pointA.x;\n                    var offsetY = evt.clientY - _this._pointA.y;\n                    _this.onTouch(_this._pointA, offsetX, offsetY);\n                    _this._pointA.x = evt.clientX;\n                    _this._pointA.y = evt.clientY;\n                }\n                // Two buttons down: pinch\n                else if (_this._pointA && _this._pointB) {\n                    var ed = _this._pointA.pointerId === evt.pointerId ? _this._pointA : _this._pointB;\n                    ed.x = evt.clientX;\n                    ed.y = evt.clientY;\n                    var distX = _this._pointA.x - _this._pointB.x;\n                    var distY = _this._pointA.y - _this._pointB.y;\n                    var pinchSquaredDistance = distX * distX + distY * distY;\n                    var multiTouchPanPosition = {\n                        x: (_this._pointA.x + _this._pointB.x) / 2,\n                        y: (_this._pointA.y + _this._pointB.y) / 2,\n                        pointerId: evt.pointerId,\n                        type: p.type,\n                    };\n                    _this.onMultiTouch(_this._pointA, _this._pointB, previousPinchSquaredDistance, pinchSquaredDistance, previousMultiTouchPanPosition, multiTouchPanPosition);\n                    previousMultiTouchPanPosition = multiTouchPanPosition;\n                    previousPinchSquaredDistance = pinchSquaredDistance;\n                }\n            }\n        };\n        this._observer = this.camera\n            .getScene()\n            .onPointerObservable.add(this._pointerInput, PointerEventTypes.POINTERDOWN | PointerEventTypes.POINTERUP | PointerEventTypes.POINTERMOVE | PointerEventTypes.POINTERDOUBLETAP);\n        this._onLostFocus = function () {\n            _this._pointA = _this._pointB = null;\n            previousPinchSquaredDistance = 0;\n            previousMultiTouchPanPosition = null;\n            _this.onLostFocus();\n        };\n        this._contextMenuBind = this.onContextMenu.bind(this);\n        element && element.addEventListener(\"contextmenu\", this._contextMenuBind, false);\n        var hostWindow = this.camera.getScene().getEngine().getHostWindow();\n        if (hostWindow) {\n            Tools.RegisterTopRootEvents(hostWindow, [{ name: \"blur\", handler: this._onLostFocus }]);\n        }\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    BaseCameraPointersInput.prototype.detachControl = function () {\n        if (this._onLostFocus) {\n            var hostWindow = this.camera.getScene().getEngine().getHostWindow();\n            if (hostWindow) {\n                Tools.UnregisterTopRootEvents(hostWindow, [{ name: \"blur\", handler: this._onLostFocus }]);\n            }\n        }\n        if (this._observer) {\n            this.camera.getScene().onPointerObservable.remove(this._observer);\n            this._observer = null;\n            if (this._contextMenuBind) {\n                var inputElement = this.camera.getScene().getEngine().getInputElement();\n                inputElement && inputElement.removeEventListener(\"contextmenu\", this._contextMenuBind);\n            }\n            this._onLostFocus = null;\n        }\n        this._altKey = false;\n        this._ctrlKey = false;\n        this._metaKey = false;\n        this._shiftKey = false;\n        this._buttonsPressed = 0;\n        this._currentActiveButton = -1;\n    };\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    BaseCameraPointersInput.prototype.getClassName = function () {\n        return \"BaseCameraPointersInput\";\n    };\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input friendly name\n     */\n    BaseCameraPointersInput.prototype.getSimpleName = function () {\n        return \"pointers\";\n    };\n    /**\n     * Called on pointer POINTERDOUBLETAP event.\n     * Override this method to provide functionality on POINTERDOUBLETAP event.\n     * @param type\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    BaseCameraPointersInput.prototype.onDoubleTap = function (type) { };\n    /**\n     * Called on pointer POINTERMOVE event if only a single touch is active.\n     * Override this method to provide functionality.\n     * @param point\n     * @param offsetX\n     * @param offsetY\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    BaseCameraPointersInput.prototype.onTouch = function (point, offsetX, offsetY) { };\n    /**\n     * Called on pointer POINTERMOVE event if multiple touches are active.\n     * Override this method to provide functionality.\n     * @param _pointA\n     * @param _pointB\n     * @param previousPinchSquaredDistance\n     * @param pinchSquaredDistance\n     * @param previousMultiTouchPanPosition\n     * @param multiTouchPanPosition\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    BaseCameraPointersInput.prototype.onMultiTouch = function (_pointA, _pointB, previousPinchSquaredDistance, pinchSquaredDistance, previousMultiTouchPanPosition, multiTouchPanPosition) { };\n    /**\n     * Called on JS contextmenu event.\n     * Override this method to provide functionality.\n     * @param evt\n     */\n    BaseCameraPointersInput.prototype.onContextMenu = function (evt) {\n        evt.preventDefault();\n    };\n    /**\n     * Called each time a new POINTERDOWN event occurs. Ie, for each button\n     * press.\n     * Override this method to provide functionality.\n     * @param evt\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    BaseCameraPointersInput.prototype.onButtonDown = function (evt) { };\n    /**\n     * Called each time a new POINTERUP event occurs. Ie, for each button\n     * release.\n     * Override this method to provide functionality.\n     * @param evt\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    BaseCameraPointersInput.prototype.onButtonUp = function (evt) { };\n    /**\n     * Called when window becomes inactive.\n     * Override this method to provide functionality.\n     */\n    BaseCameraPointersInput.prototype.onLostFocus = function () { };\n    __decorate([\n        serialize()\n    ], BaseCameraPointersInput.prototype, \"buttons\", void 0);\n    return BaseCameraPointersInput;\n}());\nexport { BaseCameraPointersInput };\n//# sourceMappingURL=BaseCameraPointersInput.js.map","import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { Gamepad } from \"../../Gamepads/gamepad.js\";\n/**\n * Manage the gamepad inputs to control an arc rotate camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar ArcRotateCameraGamepadInput = /** @class */ (function () {\n    function ArcRotateCameraGamepadInput() {\n        /**\n         * Defines the gamepad rotation sensibility.\n         * This is the threshold from when rotation starts to be accounted for to prevent jittering.\n         */\n        this.gamepadRotationSensibility = 80;\n        /**\n         * Defines the gamepad move sensibility.\n         * This is the threshold from when moving starts to be accounted for for to prevent jittering.\n         */\n        this.gamepadMoveSensibility = 40;\n        this._yAxisScale = 1.0;\n    }\n    Object.defineProperty(ArcRotateCameraGamepadInput.prototype, \"invertYAxis\", {\n        /**\n         * Gets or sets a boolean indicating that Yaxis (for right stick) should be inverted\n         */\n        get: function () {\n            return this._yAxisScale !== 1.0;\n        },\n        set: function (value) {\n            this._yAxisScale = value ? -1.0 : 1.0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     */\n    ArcRotateCameraGamepadInput.prototype.attachControl = function () {\n        var _this = this;\n        var manager = this.camera.getScene().gamepadManager;\n        this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add(function (gamepad) {\n            if (gamepad.type !== Gamepad.POSE_ENABLED) {\n                // prioritize XBOX gamepads.\n                if (!_this.gamepad || gamepad.type === Gamepad.XBOX) {\n                    _this.gamepad = gamepad;\n                }\n            }\n        });\n        this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add(function (gamepad) {\n            if (_this.gamepad === gamepad) {\n                _this.gamepad = null;\n            }\n        });\n        this.gamepad = manager.getGamepadByType(Gamepad.XBOX);\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    ArcRotateCameraGamepadInput.prototype.detachControl = function () {\n        this.camera.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\n        this.camera.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\n        this.gamepad = null;\n    };\n    /**\n     * Update the current camera state depending on the inputs that have been used this frame.\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n     */\n    ArcRotateCameraGamepadInput.prototype.checkInputs = function () {\n        if (this.gamepad) {\n            var camera = this.camera;\n            var rsValues = this.gamepad.rightStick;\n            if (rsValues) {\n                if (rsValues.x != 0) {\n                    var normalizedRX = rsValues.x / this.gamepadRotationSensibility;\n                    if (normalizedRX != 0 && Math.abs(normalizedRX) > 0.005) {\n                        camera.inertialAlphaOffset += normalizedRX;\n                    }\n                }\n                if (rsValues.y != 0) {\n                    var normalizedRY = (rsValues.y / this.gamepadRotationSensibility) * this._yAxisScale;\n                    if (normalizedRY != 0 && Math.abs(normalizedRY) > 0.005) {\n                        camera.inertialBetaOffset += normalizedRY;\n                    }\n                }\n            }\n            var lsValues = this.gamepad.leftStick;\n            if (lsValues && lsValues.y != 0) {\n                var normalizedLY = lsValues.y / this.gamepadMoveSensibility;\n                if (normalizedLY != 0 && Math.abs(normalizedLY) > 0.005) {\n                    this.camera.inertialRadiusOffset -= normalizedLY;\n                }\n            }\n        }\n    };\n    /**\n     * Gets the class name of the current intput.\n     * @returns the class name\n     */\n    ArcRotateCameraGamepadInput.prototype.getClassName = function () {\n        return \"ArcRotateCameraGamepadInput\";\n    };\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input friendly name\n     */\n    ArcRotateCameraGamepadInput.prototype.getSimpleName = function () {\n        return \"gamepad\";\n    };\n    __decorate([\n        serialize()\n    ], ArcRotateCameraGamepadInput.prototype, \"gamepadRotationSensibility\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraGamepadInput.prototype, \"gamepadMoveSensibility\", void 0);\n    return ArcRotateCameraGamepadInput;\n}());\nexport { ArcRotateCameraGamepadInput };\nCameraInputTypes[\"ArcRotateCameraGamepadInput\"] = ArcRotateCameraGamepadInput;\n//# sourceMappingURL=arcRotateCameraGamepadInput.js.map","import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Manage the keyboard inputs to control the movement of an arc rotate camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar ArcRotateCameraKeyboardMoveInput = /** @class */ (function () {\n    function ArcRotateCameraKeyboardMoveInput() {\n        /**\n         * Defines the list of key codes associated with the up action (increase alpha)\n         */\n        this.keysUp = [38];\n        /**\n         * Defines the list of key codes associated with the down action (decrease alpha)\n         */\n        this.keysDown = [40];\n        /**\n         * Defines the list of key codes associated with the left action (increase beta)\n         */\n        this.keysLeft = [37];\n        /**\n         * Defines the list of key codes associated with the right action (decrease beta)\n         */\n        this.keysRight = [39];\n        /**\n         * Defines the list of key codes associated with the reset action.\n         * Those keys reset the camera to its last stored state (with the method camera.storeState())\n         */\n        this.keysReset = [220];\n        /**\n         * Defines the panning sensibility of the inputs.\n         * (How fast is the camera panning)\n         */\n        this.panningSensibility = 50.0;\n        /**\n         * Defines the zooming sensibility of the inputs.\n         * (How fast is the camera zooming)\n         */\n        this.zoomingSensibility = 25.0;\n        /**\n         * Defines whether maintaining the alt key down switch the movement mode from\n         * orientation to zoom.\n         */\n        this.useAltToZoom = true;\n        /**\n         * Rotation speed of the camera\n         */\n        this.angularSpeed = 0.01;\n        this._keys = new Array();\n    }\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    ArcRotateCameraKeyboardMoveInput.prototype.attachControl = function (noPreventDefault) {\n        var _this = this;\n        // was there a second variable defined?\n        // eslint-disable-next-line prefer-rest-params\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        if (this._onCanvasBlurObserver) {\n            return;\n        }\n        this._scene = this.camera.getScene();\n        this._engine = this._scene.getEngine();\n        this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(function () {\n            _this._keys = [];\n        });\n        this._onKeyboardObserver = this._scene.onKeyboardObservable.add(function (info) {\n            var evt = info.event;\n            if (!evt.metaKey) {\n                if (info.type === KeyboardEventTypes.KEYDOWN) {\n                    _this._ctrlPressed = evt.ctrlKey;\n                    _this._altPressed = evt.altKey;\n                    if (_this.keysUp.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysDown.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysLeft.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysRight.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysReset.indexOf(evt.keyCode) !== -1) {\n                        var index = _this._keys.indexOf(evt.keyCode);\n                        if (index === -1) {\n                            _this._keys.push(evt.keyCode);\n                        }\n                        if (evt.preventDefault) {\n                            if (!noPreventDefault) {\n                                evt.preventDefault();\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (_this.keysUp.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysDown.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysLeft.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysRight.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysReset.indexOf(evt.keyCode) !== -1) {\n                        var index = _this._keys.indexOf(evt.keyCode);\n                        if (index >= 0) {\n                            _this._keys.splice(index, 1);\n                        }\n                        if (evt.preventDefault) {\n                            if (!noPreventDefault) {\n                                evt.preventDefault();\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    ArcRotateCameraKeyboardMoveInput.prototype.detachControl = function () {\n        if (this._scene) {\n            if (this._onKeyboardObserver) {\n                this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n            }\n            if (this._onCanvasBlurObserver) {\n                this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n            }\n            this._onKeyboardObserver = null;\n            this._onCanvasBlurObserver = null;\n        }\n        this._keys = [];\n    };\n    /**\n     * Update the current camera state depending on the inputs that have been used this frame.\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n     */\n    ArcRotateCameraKeyboardMoveInput.prototype.checkInputs = function () {\n        if (this._onKeyboardObserver) {\n            var camera = this.camera;\n            for (var index = 0; index < this._keys.length; index++) {\n                var keyCode = this._keys[index];\n                if (this.keysLeft.indexOf(keyCode) !== -1) {\n                    if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n                        camera.inertialPanningX -= 1 / this.panningSensibility;\n                    }\n                    else {\n                        camera.inertialAlphaOffset -= this.angularSpeed;\n                    }\n                }\n                else if (this.keysUp.indexOf(keyCode) !== -1) {\n                    if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n                        camera.inertialPanningY += 1 / this.panningSensibility;\n                    }\n                    else if (this._altPressed && this.useAltToZoom) {\n                        camera.inertialRadiusOffset += 1 / this.zoomingSensibility;\n                    }\n                    else {\n                        camera.inertialBetaOffset -= this.angularSpeed;\n                    }\n                }\n                else if (this.keysRight.indexOf(keyCode) !== -1) {\n                    if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n                        camera.inertialPanningX += 1 / this.panningSensibility;\n                    }\n                    else {\n                        camera.inertialAlphaOffset += this.angularSpeed;\n                    }\n                }\n                else if (this.keysDown.indexOf(keyCode) !== -1) {\n                    if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n                        camera.inertialPanningY -= 1 / this.panningSensibility;\n                    }\n                    else if (this._altPressed && this.useAltToZoom) {\n                        camera.inertialRadiusOffset -= 1 / this.zoomingSensibility;\n                    }\n                    else {\n                        camera.inertialBetaOffset += this.angularSpeed;\n                    }\n                }\n                else if (this.keysReset.indexOf(keyCode) !== -1) {\n                    if (camera.useInputToRestoreState) {\n                        camera.restoreState();\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    ArcRotateCameraKeyboardMoveInput.prototype.getClassName = function () {\n        return \"ArcRotateCameraKeyboardMoveInput\";\n    };\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input friendly name\n     */\n    ArcRotateCameraKeyboardMoveInput.prototype.getSimpleName = function () {\n        return \"keyboard\";\n    };\n    __decorate([\n        serialize()\n    ], ArcRotateCameraKeyboardMoveInput.prototype, \"keysUp\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraKeyboardMoveInput.prototype, \"keysDown\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraKeyboardMoveInput.prototype, \"keysLeft\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraKeyboardMoveInput.prototype, \"keysRight\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraKeyboardMoveInput.prototype, \"keysReset\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraKeyboardMoveInput.prototype, \"panningSensibility\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraKeyboardMoveInput.prototype, \"zoomingSensibility\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraKeyboardMoveInput.prototype, \"useAltToZoom\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraKeyboardMoveInput.prototype, \"angularSpeed\", void 0);\n    return ArcRotateCameraKeyboardMoveInput;\n}());\nexport { ArcRotateCameraKeyboardMoveInput };\nCameraInputTypes[\"ArcRotateCameraKeyboardMoveInput\"] = ArcRotateCameraKeyboardMoveInput;\n//# sourceMappingURL=arcRotateCameraKeyboardMoveInput.js.map","import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { Plane } from \"../../Maths/math.plane.js\";\nimport { Vector3, Matrix, TmpVectors } from \"../../Maths/math.vector.js\";\nimport { Epsilon } from \"../../Maths/math.constants.js\";\nimport { EventConstants } from \"../../Events/deviceInputEvents.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\n/**\n * Firefox uses a different scheme to report scroll distances to other\n * browsers. Rather than use complicated methods to calculate the exact\n * multiple we need to apply, let's just cheat and use a constant.\n * https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode\n * https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n */\nvar ffMultiplier = 40;\n/**\n * Manage the mouse wheel inputs to control an arc rotate camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar ArcRotateCameraMouseWheelInput = /** @class */ (function () {\n    function ArcRotateCameraMouseWheelInput() {\n        /**\n         * Gets or Set the mouse wheel precision or how fast is the camera zooming.\n         */\n        this.wheelPrecision = 3.0;\n        /**\n         * Gets or Set the boolean value that controls whether or not the mouse wheel\n         * zooms to the location of the mouse pointer or not.  The default is false.\n         */\n        this.zoomToMouseLocation = false;\n        /**\n         * wheelDeltaPercentage will be used instead of wheelPrecision if different from 0.\n         * It defines the percentage of current camera.radius to use as delta when wheel is used.\n         */\n        this.wheelDeltaPercentage = 0;\n        /**\n         * If set, this function will be used to set the radius delta that will be added to the current camera radius\n         */\n        this.customComputeDeltaFromMouseWheel = null;\n        this._inertialPanning = Vector3.Zero();\n    }\n    ArcRotateCameraMouseWheelInput.prototype._computeDeltaFromMouseWheelLegacyEvent = function (mouseWheelDelta, radius) {\n        var delta = 0;\n        var wheelDelta = mouseWheelDelta * 0.01 * this.wheelDeltaPercentage * radius;\n        if (mouseWheelDelta > 0) {\n            delta = wheelDelta / (1.0 + this.wheelDeltaPercentage);\n        }\n        else {\n            delta = wheelDelta * (1.0 + this.wheelDeltaPercentage);\n        }\n        return delta;\n    };\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    ArcRotateCameraMouseWheelInput.prototype.attachControl = function (noPreventDefault) {\n        var _this = this;\n        // was there a second variable defined?\n        // eslint-disable-next-line prefer-rest-params\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        this._wheel = function (p) {\n            //sanity check - this should be a PointerWheel event.\n            if (p.type !== PointerEventTypes.POINTERWHEEL) {\n                return;\n            }\n            var event = p.event;\n            var delta = 0;\n            var mouseWheelLegacyEvent = event;\n            var wheelDelta = 0;\n            var platformScale = event.deltaMode === EventConstants.DOM_DELTA_LINE ? ffMultiplier : 1; // If this happens to be set to DOM_DELTA_LINE, adjust accordingly\n            if (event.deltaY !== undefined) {\n                wheelDelta = -(event.deltaY * platformScale);\n            }\n            else if (event.wheelDeltaY !== undefined) {\n                wheelDelta = -(event.wheelDeltaY * platformScale);\n            }\n            else {\n                wheelDelta = mouseWheelLegacyEvent.wheelDelta;\n            }\n            if (_this.customComputeDeltaFromMouseWheel) {\n                delta = _this.customComputeDeltaFromMouseWheel(wheelDelta, _this, event);\n            }\n            else {\n                if (_this.wheelDeltaPercentage) {\n                    delta = _this._computeDeltaFromMouseWheelLegacyEvent(wheelDelta, _this.camera.radius);\n                    // If zooming in, estimate the target radius and use that to compute the delta for inertia\n                    // this will stop multiple scroll events zooming in from adding too much inertia\n                    if (delta > 0) {\n                        var estimatedTargetRadius = _this.camera.radius;\n                        var targetInertia = _this.camera.inertialRadiusOffset + delta;\n                        for (var i = 0; i < 20 && Math.abs(targetInertia) > 0.001; i++) {\n                            estimatedTargetRadius -= targetInertia;\n                            targetInertia *= _this.camera.inertia;\n                        }\n                        estimatedTargetRadius = Scalar.Clamp(estimatedTargetRadius, 0, Number.MAX_VALUE);\n                        delta = _this._computeDeltaFromMouseWheelLegacyEvent(wheelDelta, estimatedTargetRadius);\n                    }\n                }\n                else {\n                    delta = wheelDelta / (_this.wheelPrecision * 40);\n                }\n            }\n            if (delta) {\n                if (_this.zoomToMouseLocation && _this._hitPlane) {\n                    _this._zoomToMouse(delta);\n                }\n                else {\n                    _this.camera.inertialRadiusOffset += delta;\n                }\n            }\n            if (event.preventDefault) {\n                if (!noPreventDefault) {\n                    event.preventDefault();\n                }\n            }\n        };\n        this._observer = this.camera.getScene().onPointerObservable.add(this._wheel, PointerEventTypes.POINTERWHEEL);\n        if (this.zoomToMouseLocation) {\n            this._inertialPanning.setAll(0);\n        }\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    ArcRotateCameraMouseWheelInput.prototype.detachControl = function () {\n        if (this._observer) {\n            this.camera.getScene().onPointerObservable.remove(this._observer);\n            this._observer = null;\n            this._wheel = null;\n        }\n    };\n    /**\n     * Update the current camera state depending on the inputs that have been used this frame.\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n     */\n    ArcRotateCameraMouseWheelInput.prototype.checkInputs = function () {\n        if (!this.zoomToMouseLocation) {\n            return;\n        }\n        var camera = this.camera;\n        var motion = 0.0 + camera.inertialAlphaOffset + camera.inertialBetaOffset + camera.inertialRadiusOffset;\n        if (motion) {\n            // if zooming is still happening as a result of inertia, then we also need to update\n            // the hit plane.\n            this._updateHitPlane();\n            // Note we cannot  use arcRotateCamera.inertialPlanning here because arcRotateCamera panning\n            // uses a different panningInertia which could cause this panning to get out of sync with\n            // the zooming, and for this to work they must be exactly in sync.\n            camera.target.addInPlace(this._inertialPanning);\n            this._inertialPanning.scaleInPlace(camera.inertia);\n            this._zeroIfClose(this._inertialPanning);\n        }\n    };\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    ArcRotateCameraMouseWheelInput.prototype.getClassName = function () {\n        return \"ArcRotateCameraMouseWheelInput\";\n    };\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input friendly name\n     */\n    ArcRotateCameraMouseWheelInput.prototype.getSimpleName = function () {\n        return \"mousewheel\";\n    };\n    ArcRotateCameraMouseWheelInput.prototype._updateHitPlane = function () {\n        var camera = this.camera;\n        var direction = camera.target.subtract(camera.position);\n        this._hitPlane = Plane.FromPositionAndNormal(camera.target, direction);\n    };\n    // Get position on the hit plane\n    ArcRotateCameraMouseWheelInput.prototype._getPosition = function () {\n        var _a;\n        var camera = this.camera;\n        var scene = camera.getScene();\n        // since the _hitPlane is always updated to be orthogonal to the camera position vector\n        // we don't have to worry about this ray shooting off to infinity. This ray creates\n        // a vector defining where we want to zoom to.\n        var ray = scene.createPickingRay(scene.pointerX, scene.pointerY, Matrix.Identity(), camera, false);\n        var distance = 0;\n        if (this._hitPlane) {\n            distance = (_a = ray.intersectsPlane(this._hitPlane)) !== null && _a !== void 0 ? _a : 0;\n        }\n        // not using this ray again, so modifying its vectors here is fine\n        return ray.origin.addInPlace(ray.direction.scaleInPlace(distance));\n    };\n    ArcRotateCameraMouseWheelInput.prototype._zoomToMouse = function (delta) {\n        var _a, _b;\n        var camera = this.camera;\n        var inertiaComp = 1 - camera.inertia;\n        if (camera.lowerRadiusLimit) {\n            var lowerLimit = (_a = camera.lowerRadiusLimit) !== null && _a !== void 0 ? _a : 0;\n            if (camera.radius - (camera.inertialRadiusOffset + delta) / inertiaComp < lowerLimit) {\n                delta = (camera.radius - lowerLimit) * inertiaComp - camera.inertialRadiusOffset;\n            }\n        }\n        if (camera.upperRadiusLimit) {\n            var upperLimit = (_b = camera.upperRadiusLimit) !== null && _b !== void 0 ? _b : 0;\n            if (camera.radius - (camera.inertialRadiusOffset + delta) / inertiaComp > upperLimit) {\n                delta = (camera.radius - upperLimit) * inertiaComp - camera.inertialRadiusOffset;\n            }\n        }\n        var zoomDistance = delta / inertiaComp;\n        var ratio = zoomDistance / camera.radius;\n        var vec = this._getPosition();\n        // Now this vector tells us how much we also need to pan the camera\n        // so the targeted mouse location becomes the center of zooming.\n        var directionToZoomLocation = TmpVectors.Vector3[6];\n        vec.subtractToRef(camera.target, directionToZoomLocation);\n        directionToZoomLocation.scaleInPlace(ratio);\n        directionToZoomLocation.scaleInPlace(inertiaComp);\n        this._inertialPanning.addInPlace(directionToZoomLocation);\n        camera.inertialRadiusOffset += delta;\n    };\n    // Sets x y or z of passed in vector to zero if less than Epsilon.\n    ArcRotateCameraMouseWheelInput.prototype._zeroIfClose = function (vec) {\n        if (Math.abs(vec.x) < Epsilon) {\n            vec.x = 0;\n        }\n        if (Math.abs(vec.y) < Epsilon) {\n            vec.y = 0;\n        }\n        if (Math.abs(vec.z) < Epsilon) {\n            vec.z = 0;\n        }\n    };\n    __decorate([\n        serialize()\n    ], ArcRotateCameraMouseWheelInput.prototype, \"wheelPrecision\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraMouseWheelInput.prototype, \"zoomToMouseLocation\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraMouseWheelInput.prototype, \"wheelDeltaPercentage\", void 0);\n    return ArcRotateCameraMouseWheelInput;\n}());\nexport { ArcRotateCameraMouseWheelInput };\nCameraInputTypes[\"ArcRotateCameraMouseWheelInput\"] = ArcRotateCameraMouseWheelInput;\n//# sourceMappingURL=arcRotateCameraMouseWheelInput.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { BaseCameraPointersInput } from \"../../Cameras/Inputs/BaseCameraPointersInput.js\";\n/**\n * Manage the pointers inputs to control an arc rotate camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar ArcRotateCameraPointersInput = /** @class */ (function (_super) {\n    __extends(ArcRotateCameraPointersInput, _super);\n    function ArcRotateCameraPointersInput() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Defines the buttons associated with the input to handle camera move.\n         */\n        _this.buttons = [0, 1, 2];\n        /**\n         * Defines the pointer angular sensibility  along the X axis or how fast is\n         * the camera rotating.\n         */\n        _this.angularSensibilityX = 1000.0;\n        /**\n         * Defines the pointer angular sensibility along the Y axis or how fast is\n         * the camera rotating.\n         */\n        _this.angularSensibilityY = 1000.0;\n        /**\n         * Defines the pointer pinch precision or how fast is the camera zooming.\n         */\n        _this.pinchPrecision = 12.0;\n        /**\n         * pinchDeltaPercentage will be used instead of pinchPrecision if different\n         * from 0.\n         * It defines the percentage of current camera.radius to use as delta when\n         * pinch zoom is used.\n         */\n        _this.pinchDeltaPercentage = 0;\n        /**\n         * When useNaturalPinchZoom is true, multi touch zoom will zoom in such\n         * that any object in the plane at the camera's target point will scale\n         * perfectly with finger motion.\n         * Overrides pinchDeltaPercentage and pinchPrecision.\n         */\n        _this.useNaturalPinchZoom = false;\n        /**\n         * Defines whether zoom (2 fingers pinch) is enabled through multitouch\n         */\n        _this.pinchZoom = true;\n        /**\n         * Defines the pointer panning sensibility or how fast is the camera moving.\n         */\n        _this.panningSensibility = 1000.0;\n        /**\n         * Defines whether panning (2 fingers swipe) is enabled through multitouch.\n         */\n        _this.multiTouchPanning = true;\n        /**\n         * Defines whether panning is enabled for both pan (2 fingers swipe) and\n         * zoom (pinch) through multitouch.\n         */\n        _this.multiTouchPanAndZoom = true;\n        /**\n         * Revers pinch action direction.\n         */\n        _this.pinchInwards = true;\n        _this._isPanClick = false;\n        _this._twoFingerActivityCount = 0;\n        _this._isPinching = false;\n        return _this;\n    }\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    ArcRotateCameraPointersInput.prototype.getClassName = function () {\n        return \"ArcRotateCameraPointersInput\";\n    };\n    /**\n     * Move camera from multi touch panning positions.\n     * @param previousMultiTouchPanPosition\n     * @param multiTouchPanPosition\n     */\n    ArcRotateCameraPointersInput.prototype._computeMultiTouchPanning = function (previousMultiTouchPanPosition, multiTouchPanPosition) {\n        if (this.panningSensibility !== 0 && previousMultiTouchPanPosition && multiTouchPanPosition) {\n            var moveDeltaX = multiTouchPanPosition.x - previousMultiTouchPanPosition.x;\n            var moveDeltaY = multiTouchPanPosition.y - previousMultiTouchPanPosition.y;\n            this.camera.inertialPanningX += -moveDeltaX / this.panningSensibility;\n            this.camera.inertialPanningY += moveDeltaY / this.panningSensibility;\n        }\n    };\n    /**\n     * Move camera from pinch zoom distances.\n     * @param previousPinchSquaredDistance\n     * @param pinchSquaredDistance\n     */\n    ArcRotateCameraPointersInput.prototype._computePinchZoom = function (previousPinchSquaredDistance, pinchSquaredDistance) {\n        var radius = this.camera.radius || ArcRotateCameraPointersInput.MinimumRadiusForPinch;\n        if (this.useNaturalPinchZoom) {\n            this.camera.radius = (radius * Math.sqrt(previousPinchSquaredDistance)) / Math.sqrt(pinchSquaredDistance);\n        }\n        else if (this.pinchDeltaPercentage) {\n            this.camera.inertialRadiusOffset += (pinchSquaredDistance - previousPinchSquaredDistance) * 0.001 * radius * this.pinchDeltaPercentage;\n        }\n        else {\n            this.camera.inertialRadiusOffset +=\n                (pinchSquaredDistance - previousPinchSquaredDistance) /\n                    ((this.pinchPrecision * (this.pinchInwards ? 1 : -1) * (this.angularSensibilityX + this.angularSensibilityY)) / 2);\n        }\n    };\n    /**\n     * Called on pointer POINTERMOVE event if only a single touch is active.\n     * @param point\n     * @param offsetX\n     * @param offsetY\n     */\n    ArcRotateCameraPointersInput.prototype.onTouch = function (point, offsetX, offsetY) {\n        if (this.panningSensibility !== 0 && ((this._ctrlKey && this.camera._useCtrlForPanning) || this._isPanClick)) {\n            this.camera.inertialPanningX += -offsetX / this.panningSensibility;\n            this.camera.inertialPanningY += offsetY / this.panningSensibility;\n        }\n        else {\n            this.camera.inertialAlphaOffset -= offsetX / this.angularSensibilityX;\n            this.camera.inertialBetaOffset -= offsetY / this.angularSensibilityY;\n        }\n    };\n    /**\n     * Called on pointer POINTERDOUBLETAP event.\n     */\n    ArcRotateCameraPointersInput.prototype.onDoubleTap = function () {\n        if (this.camera.useInputToRestoreState) {\n            this.camera.restoreState();\n        }\n    };\n    /**\n     * Called on pointer POINTERMOVE event if multiple touches are active.\n     * @param pointA\n     * @param pointB\n     * @param previousPinchSquaredDistance\n     * @param pinchSquaredDistance\n     * @param previousMultiTouchPanPosition\n     * @param multiTouchPanPosition\n     */\n    ArcRotateCameraPointersInput.prototype.onMultiTouch = function (pointA, pointB, previousPinchSquaredDistance, pinchSquaredDistance, previousMultiTouchPanPosition, multiTouchPanPosition) {\n        if (previousPinchSquaredDistance === 0 && previousMultiTouchPanPosition === null) {\n            // First time this method is called for new pinch.\n            // Next time this is called there will be a\n            // previousPinchSquaredDistance and pinchSquaredDistance to compare.\n            return;\n        }\n        if (pinchSquaredDistance === 0 && multiTouchPanPosition === null) {\n            // Last time this method is called at the end of a pinch.\n            return;\n        }\n        // Zoom and panning enabled together\n        if (this.multiTouchPanAndZoom) {\n            this._computePinchZoom(previousPinchSquaredDistance, pinchSquaredDistance);\n            this._computeMultiTouchPanning(previousMultiTouchPanPosition, multiTouchPanPosition);\n            // Zoom and panning enabled but only one at a time\n        }\n        else if (this.multiTouchPanning && this.pinchZoom) {\n            this._twoFingerActivityCount++;\n            if (this._isPinching ||\n                (this._twoFingerActivityCount < 20 && Math.abs(Math.sqrt(pinchSquaredDistance) - Math.sqrt(previousPinchSquaredDistance)) > this.camera.pinchToPanMaxDistance)) {\n                // Since pinch has not been active long, assume we intend to zoom.\n                this._computePinchZoom(previousPinchSquaredDistance, pinchSquaredDistance);\n                // Since we are pinching, remain pinching on next iteration.\n                this._isPinching = true;\n            }\n            else {\n                // Pause between pinch starting and moving implies not a zoom event. Pan instead.\n                this._computeMultiTouchPanning(previousMultiTouchPanPosition, multiTouchPanPosition);\n            }\n            // Panning enabled, zoom disabled\n        }\n        else if (this.multiTouchPanning) {\n            this._computeMultiTouchPanning(previousMultiTouchPanPosition, multiTouchPanPosition);\n            // Zoom enabled, panning disabled\n        }\n        else if (this.pinchZoom) {\n            this._computePinchZoom(previousPinchSquaredDistance, pinchSquaredDistance);\n        }\n    };\n    /**\n     * Called each time a new POINTERDOWN event occurs. Ie, for each button\n     * press.\n     * @param evt\n     */\n    ArcRotateCameraPointersInput.prototype.onButtonDown = function (evt) {\n        this._isPanClick = evt.button === this.camera._panningMouseButton;\n    };\n    /**\n     * Called each time a new POINTERUP event occurs. Ie, for each button\n     * release.\n     */\n    ArcRotateCameraPointersInput.prototype.onButtonUp = function () {\n        this._twoFingerActivityCount = 0;\n        this._isPinching = false;\n    };\n    /**\n     * Called when window becomes inactive.\n     */\n    ArcRotateCameraPointersInput.prototype.onLostFocus = function () {\n        this._isPanClick = false;\n        this._twoFingerActivityCount = 0;\n        this._isPinching = false;\n    };\n    /**\n     * The minimum radius used for pinch, to avoid radius lock at 0\n     */\n    ArcRotateCameraPointersInput.MinimumRadiusForPinch = 0.001;\n    __decorate([\n        serialize()\n    ], ArcRotateCameraPointersInput.prototype, \"buttons\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraPointersInput.prototype, \"angularSensibilityX\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraPointersInput.prototype, \"angularSensibilityY\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraPointersInput.prototype, \"pinchPrecision\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraPointersInput.prototype, \"pinchDeltaPercentage\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraPointersInput.prototype, \"useNaturalPinchZoom\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraPointersInput.prototype, \"pinchZoom\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraPointersInput.prototype, \"panningSensibility\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraPointersInput.prototype, \"multiTouchPanning\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCameraPointersInput.prototype, \"multiTouchPanAndZoom\", void 0);\n    return ArcRotateCameraPointersInput;\n}(BaseCameraPointersInput));\nexport { ArcRotateCameraPointersInput };\nCameraInputTypes[\"ArcRotateCameraPointersInput\"] = ArcRotateCameraPointersInput;\n//# sourceMappingURL=arcRotateCameraPointersInput.js.map","import { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { Quaternion } from \"../../Maths/math.vector.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { FreeCameraInputsManager } from \"../../Cameras/freeCameraInputsManager.js\";\nimport { Observable } from \"../../Misc/observable.js\";\n/**\n * Add orientation input support to the input manager.\n * @returns the current input manager\n */\nFreeCameraInputsManager.prototype.addDeviceOrientation = function () {\n    if (!this._deviceOrientationInput) {\n        this._deviceOrientationInput = new FreeCameraDeviceOrientationInput();\n        this.add(this._deviceOrientationInput);\n    }\n    return this;\n};\n/**\n * Takes information about the orientation of the device as reported by the deviceorientation event to orient the camera.\n * Screen rotation is taken into account.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar FreeCameraDeviceOrientationInput = /** @class */ (function () {\n    /**\n     * Instantiates a new input\n     * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n     */\n    function FreeCameraDeviceOrientationInput() {\n        var _this = this;\n        this._screenOrientationAngle = 0;\n        this._screenQuaternion = new Quaternion();\n        this._alpha = 0;\n        this._beta = 0;\n        this._gamma = 0;\n        /**\n         * @hidden\n         */\n        this._onDeviceOrientationChangedObservable = new Observable();\n        this._orientationChanged = function () {\n            _this._screenOrientationAngle =\n                window.orientation !== undefined\n                    ? +window.orientation\n                    : window.screen.orientation && window.screen.orientation[\"angle\"]\n                        ? window.screen.orientation.angle\n                        : 0;\n            _this._screenOrientationAngle = -Tools.ToRadians(_this._screenOrientationAngle / 2);\n            _this._screenQuaternion.copyFromFloats(0, Math.sin(_this._screenOrientationAngle), 0, Math.cos(_this._screenOrientationAngle));\n        };\n        this._deviceOrientation = function (evt) {\n            _this._alpha = evt.alpha !== null ? evt.alpha : 0;\n            _this._beta = evt.beta !== null ? evt.beta : 0;\n            _this._gamma = evt.gamma !== null ? evt.gamma : 0;\n            if (evt.alpha !== null) {\n                _this._onDeviceOrientationChangedObservable.notifyObservers();\n            }\n        };\n        this._constantTranform = new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5));\n        this._orientationChanged();\n    }\n    /**\n     * Can be used to detect if a device orientation sensor is available on a device\n     * @param timeout amount of time in milliseconds to wait for a response from the sensor (default: infinite)\n     * @returns a promise that will resolve on orientation change\n     */\n    FreeCameraDeviceOrientationInput.WaitForOrientationChangeAsync = function (timeout) {\n        return new Promise(function (res, rej) {\n            var gotValue = false;\n            var eventHandler = function () {\n                window.removeEventListener(\"deviceorientation\", eventHandler);\n                gotValue = true;\n                res();\n            };\n            // If timeout is populated reject the promise\n            if (timeout) {\n                setTimeout(function () {\n                    if (!gotValue) {\n                        window.removeEventListener(\"deviceorientation\", eventHandler);\n                        rej(\"WaitForOrientationChangeAsync timed out\");\n                    }\n                }, timeout);\n            }\n            if (typeof DeviceOrientationEvent !== \"undefined\" && typeof DeviceOrientationEvent.requestPermission === \"function\") {\n                DeviceOrientationEvent\n                    .requestPermission()\n                    .then(function (response) {\n                    if (response == \"granted\") {\n                        window.addEventListener(\"deviceorientation\", eventHandler);\n                    }\n                    else {\n                        Tools.Warn(\"Permission not granted.\");\n                    }\n                })\n                    .catch(function (error) {\n                    Tools.Error(error);\n                });\n            }\n            else {\n                window.addEventListener(\"deviceorientation\", eventHandler);\n            }\n        });\n    };\n    Object.defineProperty(FreeCameraDeviceOrientationInput.prototype, \"camera\", {\n        /**\n         * Define the camera controlled by the input.\n         */\n        get: function () {\n            return this._camera;\n        },\n        set: function (camera) {\n            var _this = this;\n            this._camera = camera;\n            if (this._camera != null && !this._camera.rotationQuaternion) {\n                this._camera.rotationQuaternion = new Quaternion();\n            }\n            if (this._camera) {\n                this._camera.onDisposeObservable.add(function () {\n                    _this._onDeviceOrientationChangedObservable.clear();\n                });\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     */\n    FreeCameraDeviceOrientationInput.prototype.attachControl = function () {\n        var _this = this;\n        var hostWindow = this.camera.getScene().getEngine().getHostWindow();\n        if (hostWindow) {\n            var eventHandler_1 = function () {\n                hostWindow.addEventListener(\"orientationchange\", _this._orientationChanged);\n                hostWindow.addEventListener(\"deviceorientation\", _this._deviceOrientation);\n                //In certain cases, the attach control is called AFTER orientation was changed,\n                //So this is needed.\n                _this._orientationChanged();\n            };\n            if (typeof DeviceOrientationEvent !== \"undefined\" && typeof DeviceOrientationEvent.requestPermission === \"function\") {\n                DeviceOrientationEvent\n                    .requestPermission()\n                    .then(function (response) {\n                    if (response === \"granted\") {\n                        eventHandler_1();\n                    }\n                    else {\n                        Tools.Warn(\"Permission not granted.\");\n                    }\n                })\n                    .catch(function (error) {\n                    Tools.Error(error);\n                });\n            }\n            else {\n                eventHandler_1();\n            }\n        }\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    FreeCameraDeviceOrientationInput.prototype.detachControl = function () {\n        window.removeEventListener(\"orientationchange\", this._orientationChanged);\n        window.removeEventListener(\"deviceorientation\", this._deviceOrientation);\n        this._alpha = 0;\n    };\n    /**\n     * Update the current camera state depending on the inputs that have been used this frame.\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n     */\n    FreeCameraDeviceOrientationInput.prototype.checkInputs = function () {\n        //if no device orientation provided, don't update the rotation.\n        //Only testing against alpha under the assumption thatnorientation will never be so exact when set.\n        if (!this._alpha) {\n            return;\n        }\n        Quaternion.RotationYawPitchRollToRef(Tools.ToRadians(this._alpha), Tools.ToRadians(this._beta), -Tools.ToRadians(this._gamma), this.camera.rotationQuaternion);\n        this._camera.rotationQuaternion.multiplyInPlace(this._screenQuaternion);\n        this._camera.rotationQuaternion.multiplyInPlace(this._constantTranform);\n        //Mirror on XY Plane\n        this._camera.rotationQuaternion.z *= -1;\n        this._camera.rotationQuaternion.w *= -1;\n    };\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    FreeCameraDeviceOrientationInput.prototype.getClassName = function () {\n        return \"FreeCameraDeviceOrientationInput\";\n    };\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input friendly name\n     */\n    FreeCameraDeviceOrientationInput.prototype.getSimpleName = function () {\n        return \"deviceOrientation\";\n    };\n    return FreeCameraDeviceOrientationInput;\n}());\nexport { FreeCameraDeviceOrientationInput };\nCameraInputTypes[\"FreeCameraDeviceOrientationInput\"] = FreeCameraDeviceOrientationInput;\n//# sourceMappingURL=freeCameraDeviceOrientationInput.js.map","import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector.js\";\nimport { Gamepad } from \"../../Gamepads/gamepad.js\";\n/**\n * Manage the gamepad inputs to control a free camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar FreeCameraGamepadInput = /** @class */ (function () {\n    function FreeCameraGamepadInput() {\n        /**\n         * Defines the gamepad rotation sensibility.\n         * This is the threshold from when rotation starts to be accounted for to prevent jittering.\n         */\n        this.gamepadAngularSensibility = 200;\n        /**\n         * Defines the gamepad move sensibility.\n         * This is the threshold from when moving starts to be accounted for for to prevent jittering.\n         */\n        this.gamepadMoveSensibility = 40;\n        /**\n         * Defines the minimum value at which any analog stick input is ignored.\n         * Note: This value should only be a value between 0 and 1.\n         */\n        this.deadzoneDelta = 0.1;\n        this._yAxisScale = 1.0;\n        this._cameraTransform = Matrix.Identity();\n        this._deltaTransform = Vector3.Zero();\n        this._vector3 = Vector3.Zero();\n        this._vector2 = Vector2.Zero();\n    }\n    Object.defineProperty(FreeCameraGamepadInput.prototype, \"invertYAxis\", {\n        /**\n         * Gets or sets a boolean indicating that Yaxis (for right stick) should be inverted\n         */\n        get: function () {\n            return this._yAxisScale !== 1.0;\n        },\n        set: function (value) {\n            this._yAxisScale = value ? -1.0 : 1.0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     */\n    FreeCameraGamepadInput.prototype.attachControl = function () {\n        var _this = this;\n        var manager = this.camera.getScene().gamepadManager;\n        this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add(function (gamepad) {\n            if (gamepad.type !== Gamepad.POSE_ENABLED) {\n                // prioritize XBOX gamepads.\n                if (!_this.gamepad || gamepad.type === Gamepad.XBOX) {\n                    _this.gamepad = gamepad;\n                }\n            }\n        });\n        this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add(function (gamepad) {\n            if (_this.gamepad === gamepad) {\n                _this.gamepad = null;\n            }\n        });\n        // check if there are already other controllers connected\n        this.gamepad = manager.getGamepadByType(Gamepad.XBOX);\n        // if no xbox controller was found, but there are gamepad controllers, take the first one\n        if (!this.gamepad && manager.gamepads.length) {\n            this.gamepad = manager.gamepads[0];\n        }\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    FreeCameraGamepadInput.prototype.detachControl = function () {\n        this.camera.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\n        this.camera.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\n        this.gamepad = null;\n    };\n    /**\n     * Update the current camera state depending on the inputs that have been used this frame.\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n     */\n    FreeCameraGamepadInput.prototype.checkInputs = function () {\n        if (this.gamepad && this.gamepad.leftStick) {\n            var camera = this.camera;\n            var lsValues = this.gamepad.leftStick;\n            if (this.gamepadMoveSensibility !== 0) {\n                lsValues.x = Math.abs(lsValues.x) > this.deadzoneDelta ? lsValues.x / this.gamepadMoveSensibility : 0;\n                lsValues.y = Math.abs(lsValues.y) > this.deadzoneDelta ? lsValues.y / this.gamepadMoveSensibility : 0;\n            }\n            var rsValues = this.gamepad.rightStick;\n            if (rsValues && this.gamepadAngularSensibility !== 0) {\n                rsValues.x = Math.abs(rsValues.x) > this.deadzoneDelta ? rsValues.x / this.gamepadAngularSensibility : 0;\n                rsValues.y = (Math.abs(rsValues.y) > this.deadzoneDelta ? rsValues.y / this.gamepadAngularSensibility : 0) * this._yAxisScale;\n            }\n            else {\n                rsValues = { x: 0, y: 0 };\n            }\n            if (!camera.rotationQuaternion) {\n                Matrix.RotationYawPitchRollToRef(camera.rotation.y, camera.rotation.x, 0, this._cameraTransform);\n            }\n            else {\n                camera.rotationQuaternion.toRotationMatrix(this._cameraTransform);\n            }\n            var speed = camera._computeLocalCameraSpeed() * 50.0;\n            this._vector3.copyFromFloats(lsValues.x * speed, 0, -lsValues.y * speed);\n            Vector3.TransformCoordinatesToRef(this._vector3, this._cameraTransform, this._deltaTransform);\n            camera.cameraDirection.addInPlace(this._deltaTransform);\n            this._vector2.copyFromFloats(rsValues.y, rsValues.x);\n            camera.cameraRotation.addInPlace(this._vector2);\n        }\n    };\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    FreeCameraGamepadInput.prototype.getClassName = function () {\n        return \"FreeCameraGamepadInput\";\n    };\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input friendly name\n     */\n    FreeCameraGamepadInput.prototype.getSimpleName = function () {\n        return \"gamepad\";\n    };\n    __decorate([\n        serialize()\n    ], FreeCameraGamepadInput.prototype, \"gamepadAngularSensibility\", void 0);\n    __decorate([\n        serialize()\n    ], FreeCameraGamepadInput.prototype, \"gamepadMoveSensibility\", void 0);\n    return FreeCameraGamepadInput;\n}());\nexport { FreeCameraGamepadInput };\nCameraInputTypes[\"FreeCameraGamepadInput\"] = FreeCameraGamepadInput;\n//# sourceMappingURL=freeCameraGamepadInput.js.map","import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Manage the keyboard inputs to control the movement of a free camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar FreeCameraKeyboardMoveInput = /** @class */ (function () {\n    function FreeCameraKeyboardMoveInput() {\n        /**\n         * Gets or Set the list of keyboard keys used to control the forward move of the camera.\n         */\n        this.keysUp = [38];\n        /**\n         * Gets or Set the list of keyboard keys used to control the upward move of the camera.\n         */\n        this.keysUpward = [33];\n        /**\n         * Gets or Set the list of keyboard keys used to control the backward move of the camera.\n         */\n        this.keysDown = [40];\n        /**\n         * Gets or Set the list of keyboard keys used to control the downward move of the camera.\n         */\n        this.keysDownward = [34];\n        /**\n         * Gets or Set the list of keyboard keys used to control the left strafe move of the camera.\n         */\n        this.keysLeft = [37];\n        /**\n         * Gets or Set the list of keyboard keys used to control the right strafe move of the camera.\n         */\n        this.keysRight = [39];\n        /**\n         * Defines the pointer angular sensibility  along the X and Y axis or how fast is the camera rotating.\n         */\n        this.rotationSpeed = 0.5;\n        /**\n         * Gets or Set the list of keyboard keys used to control the left rotation move of the camera.\n         */\n        this.keysRotateLeft = [];\n        /**\n         * Gets or Set the list of keyboard keys used to control the right rotation move of the camera.\n         */\n        this.keysRotateRight = [];\n        this._keys = new Array();\n    }\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    FreeCameraKeyboardMoveInput.prototype.attachControl = function (noPreventDefault) {\n        var _this = this;\n        // eslint-disable-next-line prefer-rest-params\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        if (this._onCanvasBlurObserver) {\n            return;\n        }\n        this._scene = this.camera.getScene();\n        this._engine = this._scene.getEngine();\n        this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(function () {\n            _this._keys = [];\n        });\n        this._onKeyboardObserver = this._scene.onKeyboardObservable.add(function (info) {\n            var evt = info.event;\n            if (!evt.metaKey) {\n                if (info.type === KeyboardEventTypes.KEYDOWN) {\n                    if (_this.keysUp.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysDown.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysLeft.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysRight.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysUpward.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysDownward.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysRotateLeft.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysRotateRight.indexOf(evt.keyCode) !== -1) {\n                        var index = _this._keys.indexOf(evt.keyCode);\n                        if (index === -1) {\n                            _this._keys.push(evt.keyCode);\n                        }\n                        if (!noPreventDefault) {\n                            evt.preventDefault();\n                        }\n                    }\n                }\n                else {\n                    if (_this.keysUp.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysDown.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysLeft.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysRight.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysUpward.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysDownward.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysRotateLeft.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysRotateRight.indexOf(evt.keyCode) !== -1) {\n                        var index = _this._keys.indexOf(evt.keyCode);\n                        if (index >= 0) {\n                            _this._keys.splice(index, 1);\n                        }\n                        if (!noPreventDefault) {\n                            evt.preventDefault();\n                        }\n                    }\n                }\n            }\n        });\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    FreeCameraKeyboardMoveInput.prototype.detachControl = function () {\n        if (this._scene) {\n            if (this._onKeyboardObserver) {\n                this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n            }\n            if (this._onCanvasBlurObserver) {\n                this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n            }\n            this._onKeyboardObserver = null;\n            this._onCanvasBlurObserver = null;\n        }\n        this._keys = [];\n    };\n    /**\n     * Update the current camera state depending on the inputs that have been used this frame.\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n     */\n    FreeCameraKeyboardMoveInput.prototype.checkInputs = function () {\n        if (this._onKeyboardObserver) {\n            var camera = this.camera;\n            // Keyboard\n            for (var index = 0; index < this._keys.length; index++) {\n                var keyCode = this._keys[index];\n                var speed = camera._computeLocalCameraSpeed();\n                if (this.keysLeft.indexOf(keyCode) !== -1) {\n                    camera._localDirection.copyFromFloats(-speed, 0, 0);\n                }\n                else if (this.keysUp.indexOf(keyCode) !== -1) {\n                    camera._localDirection.copyFromFloats(0, 0, speed);\n                }\n                else if (this.keysRight.indexOf(keyCode) !== -1) {\n                    camera._localDirection.copyFromFloats(speed, 0, 0);\n                }\n                else if (this.keysDown.indexOf(keyCode) !== -1) {\n                    camera._localDirection.copyFromFloats(0, 0, -speed);\n                }\n                else if (this.keysUpward.indexOf(keyCode) !== -1) {\n                    camera._localDirection.copyFromFloats(0, speed, 0);\n                }\n                else if (this.keysDownward.indexOf(keyCode) !== -1) {\n                    camera._localDirection.copyFromFloats(0, -speed, 0);\n                }\n                else if (this.keysRotateLeft.indexOf(keyCode) !== -1) {\n                    camera._localDirection.copyFromFloats(0, 0, 0);\n                    camera.cameraRotation.y -= this._getLocalRotation();\n                }\n                else if (this.keysRotateRight.indexOf(keyCode) !== -1) {\n                    camera._localDirection.copyFromFloats(0, 0, 0);\n                    camera.cameraRotation.y += this._getLocalRotation();\n                }\n                if (camera.getScene().useRightHandedSystem) {\n                    camera._localDirection.z *= -1;\n                }\n                camera.getViewMatrix().invertToRef(camera._cameraTransformMatrix);\n                Vector3.TransformNormalToRef(camera._localDirection, camera._cameraTransformMatrix, camera._transformedDirection);\n                camera.cameraDirection.addInPlace(camera._transformedDirection);\n            }\n        }\n    };\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    FreeCameraKeyboardMoveInput.prototype.getClassName = function () {\n        return \"FreeCameraKeyboardMoveInput\";\n    };\n    /** @hidden */\n    FreeCameraKeyboardMoveInput.prototype._onLostFocus = function () {\n        this._keys = [];\n    };\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input friendly name\n     */\n    FreeCameraKeyboardMoveInput.prototype.getSimpleName = function () {\n        return \"keyboard\";\n    };\n    FreeCameraKeyboardMoveInput.prototype._getLocalRotation = function () {\n        var rotation = (this.rotationSpeed * this._engine.getDeltaTime()) / 1000;\n        if (this.camera.getScene().useRightHandedSystem) {\n            rotation *= -1;\n        }\n        if (this.camera.parent && this.camera.parent._getWorldMatrixDeterminant() < 0) {\n            rotation *= -1;\n        }\n        return rotation;\n    };\n    __decorate([\n        serialize()\n    ], FreeCameraKeyboardMoveInput.prototype, \"keysUp\", void 0);\n    __decorate([\n        serialize()\n    ], FreeCameraKeyboardMoveInput.prototype, \"keysUpward\", void 0);\n    __decorate([\n        serialize()\n    ], FreeCameraKeyboardMoveInput.prototype, \"keysDown\", void 0);\n    __decorate([\n        serialize()\n    ], FreeCameraKeyboardMoveInput.prototype, \"keysDownward\", void 0);\n    __decorate([\n        serialize()\n    ], FreeCameraKeyboardMoveInput.prototype, \"keysLeft\", void 0);\n    __decorate([\n        serialize()\n    ], FreeCameraKeyboardMoveInput.prototype, \"keysRight\", void 0);\n    __decorate([\n        serialize()\n    ], FreeCameraKeyboardMoveInput.prototype, \"rotationSpeed\", void 0);\n    __decorate([\n        serialize()\n    ], FreeCameraKeyboardMoveInput.prototype, \"keysRotateLeft\", void 0);\n    __decorate([\n        serialize()\n    ], FreeCameraKeyboardMoveInput.prototype, \"keysRotateRight\", void 0);\n    return FreeCameraKeyboardMoveInput;\n}());\nexport { FreeCameraKeyboardMoveInput };\nCameraInputTypes[\"FreeCameraKeyboardMoveInput\"] = FreeCameraKeyboardMoveInput;\n//# sourceMappingURL=freeCameraKeyboardMoveInput.js.map","import { __decorate } from \"tslib\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Manage the mouse inputs to control the movement of a free camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar FreeCameraMouseInput = /** @class */ (function () {\n    /**\n     * Manage the mouse inputs to control the movement of a free camera.\n     * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n     * @param touchEnabled Defines if touch is enabled or not\n     */\n    function FreeCameraMouseInput(\n    /**\n     * Define if touch is enabled in the mouse input\n     */\n    touchEnabled) {\n        if (touchEnabled === void 0) { touchEnabled = true; }\n        this.touchEnabled = touchEnabled;\n        /**\n         * Defines the buttons associated with the input to handle camera move.\n         */\n        this.buttons = [0, 1, 2];\n        /**\n         * Defines the pointer angular sensibility  along the X and Y axis or how fast is the camera rotating.\n         */\n        this.angularSensibility = 2000.0;\n        this._previousPosition = null;\n        /**\n         * Observable for when a pointer move event occurs containing the move offset\n         */\n        this.onPointerMovedObservable = new Observable();\n        /**\n         * @hidden\n         * If the camera should be rotated automatically based on pointer movement\n         */\n        this._allowCameraRotation = true;\n        this._currentActiveButton = -1;\n    }\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    FreeCameraMouseInput.prototype.attachControl = function (noPreventDefault) {\n        var _this = this;\n        // eslint-disable-next-line prefer-rest-params\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        var engine = this.camera.getEngine();\n        var element = engine.getInputElement();\n        if (!this._pointerInput) {\n            this._pointerInput = function (p) {\n                var evt = p.event;\n                var isTouch = evt.pointerType === \"touch\";\n                if (engine.isInVRExclusivePointerMode) {\n                    return;\n                }\n                if (!_this.touchEnabled && isTouch) {\n                    return;\n                }\n                if (p.type !== PointerEventTypes.POINTERMOVE && _this.buttons.indexOf(evt.button) === -1) {\n                    return;\n                }\n                var srcElement = (evt.srcElement || evt.target);\n                if (p.type === PointerEventTypes.POINTERDOWN && (_this._currentActiveButton === -1 || isTouch)) {\n                    try {\n                        srcElement === null || srcElement === void 0 ? void 0 : srcElement.setPointerCapture(evt.pointerId);\n                    }\n                    catch (e) {\n                        //Nothing to do with the error. Execution will continue.\n                    }\n                    if (_this._currentActiveButton === -1) {\n                        _this._currentActiveButton = evt.button;\n                    }\n                    _this._previousPosition = {\n                        x: evt.clientX,\n                        y: evt.clientY,\n                    };\n                    if (!noPreventDefault) {\n                        evt.preventDefault();\n                        element && element.focus();\n                    }\n                    // This is required to move while pointer button is down\n                    if (engine.isPointerLock && _this._onMouseMove) {\n                        _this._onMouseMove(p.event);\n                    }\n                }\n                else if (p.type === PointerEventTypes.POINTERUP && (_this._currentActiveButton === evt.button || isTouch)) {\n                    try {\n                        srcElement === null || srcElement === void 0 ? void 0 : srcElement.releasePointerCapture(evt.pointerId);\n                    }\n                    catch (e) {\n                        //Nothing to do with the error.\n                    }\n                    _this._currentActiveButton = -1;\n                    _this._previousPosition = null;\n                    if (!noPreventDefault) {\n                        evt.preventDefault();\n                    }\n                }\n                else if (p.type === PointerEventTypes.POINTERMOVE) {\n                    if (engine.isPointerLock && _this._onMouseMove) {\n                        _this._onMouseMove(p.event);\n                    }\n                    else if (_this._previousPosition) {\n                        var offsetX = evt.clientX - _this._previousPosition.x;\n                        var offsetY = evt.clientY - _this._previousPosition.y;\n                        if (_this.camera.getScene().useRightHandedSystem) {\n                            offsetX *= -1;\n                        }\n                        if (_this.camera.parent && _this.camera.parent._getWorldMatrixDeterminant() < 0) {\n                            offsetX *= -1;\n                        }\n                        if (_this._allowCameraRotation) {\n                            _this.camera.cameraRotation.y += offsetX / _this.angularSensibility;\n                            _this.camera.cameraRotation.x += offsetY / _this.angularSensibility;\n                        }\n                        _this.onPointerMovedObservable.notifyObservers({ offsetX: offsetX, offsetY: offsetY });\n                        _this._previousPosition = {\n                            x: evt.clientX,\n                            y: evt.clientY,\n                        };\n                        if (!noPreventDefault) {\n                            evt.preventDefault();\n                        }\n                    }\n                }\n            };\n        }\n        this._onMouseMove = function (evt) {\n            if (!engine.isPointerLock) {\n                return;\n            }\n            if (engine.isInVRExclusivePointerMode) {\n                return;\n            }\n            var offsetX = evt.movementX || evt.mozMovementX || evt.webkitMovementX || evt.msMovementX || 0;\n            if (_this.camera.getScene().useRightHandedSystem) {\n                offsetX *= -1;\n            }\n            if (_this.camera.parent && _this.camera.parent._getWorldMatrixDeterminant() < 0) {\n                offsetX *= -1;\n            }\n            _this.camera.cameraRotation.y += offsetX / _this.angularSensibility;\n            var offsetY = evt.movementY || evt.mozMovementY || evt.webkitMovementY || evt.msMovementY || 0;\n            _this.camera.cameraRotation.x += offsetY / _this.angularSensibility;\n            _this._previousPosition = null;\n            if (!noPreventDefault) {\n                evt.preventDefault();\n            }\n        };\n        this._observer = this.camera\n            .getScene()\n            .onPointerObservable.add(this._pointerInput, PointerEventTypes.POINTERDOWN | PointerEventTypes.POINTERUP | PointerEventTypes.POINTERMOVE);\n        if (element) {\n            this._contextMenuBind = this.onContextMenu.bind(this);\n            element.addEventListener(\"contextmenu\", this._contextMenuBind, false); // TODO: We need to figure out how to handle this for Native\n        }\n    };\n    /**\n     * Called on JS contextmenu event.\n     * Override this method to provide functionality.\n     * @param evt\n     */\n    FreeCameraMouseInput.prototype.onContextMenu = function (evt) {\n        evt.preventDefault();\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    FreeCameraMouseInput.prototype.detachControl = function () {\n        if (this._observer) {\n            this.camera.getScene().onPointerObservable.remove(this._observer);\n            if (this._contextMenuBind) {\n                var engine = this.camera.getEngine();\n                var element = engine.getInputElement();\n                element && element.removeEventListener(\"contextmenu\", this._contextMenuBind);\n            }\n            if (this.onPointerMovedObservable) {\n                this.onPointerMovedObservable.clear();\n            }\n            this._observer = null;\n            this._onMouseMove = null;\n            this._previousPosition = null;\n        }\n        this._currentActiveButton = -1;\n    };\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    FreeCameraMouseInput.prototype.getClassName = function () {\n        return \"FreeCameraMouseInput\";\n    };\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input friendly name\n     */\n    FreeCameraMouseInput.prototype.getSimpleName = function () {\n        return \"mouse\";\n    };\n    __decorate([\n        serialize()\n    ], FreeCameraMouseInput.prototype, \"buttons\", void 0);\n    __decorate([\n        serialize()\n    ], FreeCameraMouseInput.prototype, \"angularSensibility\", void 0);\n    return FreeCameraMouseInput;\n}());\nexport { FreeCameraMouseInput };\nCameraInputTypes[\"FreeCameraMouseInput\"] = FreeCameraMouseInput;\n//# sourceMappingURL=freeCameraMouseInput.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { BaseCameraMouseWheelInput } from \"../../Cameras/Inputs/BaseCameraMouseWheelInput.js\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { Coordinate } from \"../../Maths/math.axis.js\";\n// eslint-disable-next-line @typescript-eslint/naming-convention\nvar _CameraProperty;\n(function (_CameraProperty) {\n    _CameraProperty[_CameraProperty[\"MoveRelative\"] = 0] = \"MoveRelative\";\n    _CameraProperty[_CameraProperty[\"RotateRelative\"] = 1] = \"RotateRelative\";\n    _CameraProperty[_CameraProperty[\"MoveScene\"] = 2] = \"MoveScene\";\n})(_CameraProperty || (_CameraProperty = {}));\n/**\n * Manage the mouse wheel inputs to control a free camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar FreeCameraMouseWheelInput = /** @class */ (function (_super) {\n    __extends(FreeCameraMouseWheelInput, _super);\n    function FreeCameraMouseWheelInput() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._moveRelative = Vector3.Zero();\n        _this._rotateRelative = Vector3.Zero();\n        _this._moveScene = Vector3.Zero();\n        /**\n         * These are set to the desired default behaviour.\n         */\n        _this._wheelXAction = _CameraProperty.MoveRelative;\n        _this._wheelXActionCoordinate = Coordinate.X;\n        _this._wheelYAction = _CameraProperty.MoveRelative;\n        _this._wheelYActionCoordinate = Coordinate.Z;\n        _this._wheelZAction = null;\n        _this._wheelZActionCoordinate = null;\n        return _this;\n    }\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    FreeCameraMouseWheelInput.prototype.getClassName = function () {\n        return \"FreeCameraMouseWheelInput\";\n    };\n    Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelXMoveRelative\", {\n        /**\n         * Get the configured movement axis (relative to camera's orientation) the\n         * mouse wheel's X axis controls.\n         * @returns The configured axis or null if none.\n         */\n        get: function () {\n            if (this._wheelXAction !== _CameraProperty.MoveRelative) {\n                return null;\n            }\n            return this._wheelXActionCoordinate;\n        },\n        /**\n         * Set which movement axis (relative to camera's orientation) the mouse\n         * wheel's X axis controls.\n         * @param axis The axis to be moved. Set null to clear.\n         */\n        set: function (axis) {\n            if (axis === null && this._wheelXAction !== _CameraProperty.MoveRelative) {\n                // Attempting to clear different _wheelXAction.\n                return;\n            }\n            this._wheelXAction = _CameraProperty.MoveRelative;\n            this._wheelXActionCoordinate = axis;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelYMoveRelative\", {\n        /**\n         * Get the configured movement axis (relative to camera's orientation) the\n         * mouse wheel's Y axis controls.\n         * @returns The configured axis or null if none.\n         */\n        get: function () {\n            if (this._wheelYAction !== _CameraProperty.MoveRelative) {\n                return null;\n            }\n            return this._wheelYActionCoordinate;\n        },\n        /**\n         * Set which movement axis (relative to camera's orientation) the mouse\n         * wheel's Y axis controls.\n         * @param axis The axis to be moved. Set null to clear.\n         */\n        set: function (axis) {\n            if (axis === null && this._wheelYAction !== _CameraProperty.MoveRelative) {\n                // Attempting to clear different _wheelYAction.\n                return;\n            }\n            this._wheelYAction = _CameraProperty.MoveRelative;\n            this._wheelYActionCoordinate = axis;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelZMoveRelative\", {\n        /**\n         * Get the configured movement axis (relative to camera's orientation) the\n         * mouse wheel's Z axis controls.\n         * @returns The configured axis or null if none.\n         */\n        get: function () {\n            if (this._wheelZAction !== _CameraProperty.MoveRelative) {\n                return null;\n            }\n            return this._wheelZActionCoordinate;\n        },\n        /**\n         * Set which movement axis (relative to camera's orientation) the mouse\n         * wheel's Z axis controls.\n         * @param axis The axis to be moved. Set null to clear.\n         */\n        set: function (axis) {\n            if (axis === null && this._wheelZAction !== _CameraProperty.MoveRelative) {\n                // Attempting to clear different _wheelZAction.\n                return;\n            }\n            this._wheelZAction = _CameraProperty.MoveRelative;\n            this._wheelZActionCoordinate = axis;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelXRotateRelative\", {\n        /**\n         * Get the configured rotation axis (relative to camera's orientation) the\n         * mouse wheel's X axis controls.\n         * @returns The configured axis or null if none.\n         */\n        get: function () {\n            if (this._wheelXAction !== _CameraProperty.RotateRelative) {\n                return null;\n            }\n            return this._wheelXActionCoordinate;\n        },\n        /**\n         * Set which rotation axis (relative to camera's orientation) the mouse\n         * wheel's X axis controls.\n         * @param axis The axis to be moved. Set null to clear.\n         */\n        set: function (axis) {\n            if (axis === null && this._wheelXAction !== _CameraProperty.RotateRelative) {\n                // Attempting to clear different _wheelXAction.\n                return;\n            }\n            this._wheelXAction = _CameraProperty.RotateRelative;\n            this._wheelXActionCoordinate = axis;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelYRotateRelative\", {\n        /**\n         * Get the configured rotation axis (relative to camera's orientation) the\n         * mouse wheel's Y axis controls.\n         * @returns The configured axis or null if none.\n         */\n        get: function () {\n            if (this._wheelYAction !== _CameraProperty.RotateRelative) {\n                return null;\n            }\n            return this._wheelYActionCoordinate;\n        },\n        /**\n         * Set which rotation axis (relative to camera's orientation) the mouse\n         * wheel's Y axis controls.\n         * @param axis The axis to be moved. Set null to clear.\n         */\n        set: function (axis) {\n            if (axis === null && this._wheelYAction !== _CameraProperty.RotateRelative) {\n                // Attempting to clear different _wheelYAction.\n                return;\n            }\n            this._wheelYAction = _CameraProperty.RotateRelative;\n            this._wheelYActionCoordinate = axis;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelZRotateRelative\", {\n        /**\n         * Get the configured rotation axis (relative to camera's orientation) the\n         * mouse wheel's Z axis controls.\n         * @returns The configured axis or null if none.\n         */\n        get: function () {\n            if (this._wheelZAction !== _CameraProperty.RotateRelative) {\n                return null;\n            }\n            return this._wheelZActionCoordinate;\n        },\n        /**\n         * Set which rotation axis (relative to camera's orientation) the mouse\n         * wheel's Z axis controls.\n         * @param axis The axis to be moved. Set null to clear.\n         */\n        set: function (axis) {\n            if (axis === null && this._wheelZAction !== _CameraProperty.RotateRelative) {\n                // Attempting to clear different _wheelZAction.\n                return;\n            }\n            this._wheelZAction = _CameraProperty.RotateRelative;\n            this._wheelZActionCoordinate = axis;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelXMoveScene\", {\n        /**\n         * Get the configured movement axis (relative to the scene) the mouse wheel's\n         * X axis controls.\n         * @returns The configured axis or null if none.\n         */\n        get: function () {\n            if (this._wheelXAction !== _CameraProperty.MoveScene) {\n                return null;\n            }\n            return this._wheelXActionCoordinate;\n        },\n        /**\n         * Set which movement axis (relative to the scene) the mouse wheel's X axis\n         * controls.\n         * @param axis The axis to be moved. Set null to clear.\n         */\n        set: function (axis) {\n            if (axis === null && this._wheelXAction !== _CameraProperty.MoveScene) {\n                // Attempting to clear different _wheelXAction.\n                return;\n            }\n            this._wheelXAction = _CameraProperty.MoveScene;\n            this._wheelXActionCoordinate = axis;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelYMoveScene\", {\n        /**\n         * Get the configured movement axis (relative to the scene) the mouse wheel's\n         * Y axis controls.\n         * @returns The configured axis or null if none.\n         */\n        get: function () {\n            if (this._wheelYAction !== _CameraProperty.MoveScene) {\n                return null;\n            }\n            return this._wheelYActionCoordinate;\n        },\n        /**\n         * Set which movement axis (relative to the scene) the mouse wheel's Y axis\n         * controls.\n         * @param axis The axis to be moved. Set null to clear.\n         */\n        set: function (axis) {\n            if (axis === null && this._wheelYAction !== _CameraProperty.MoveScene) {\n                // Attempting to clear different _wheelYAction.\n                return;\n            }\n            this._wheelYAction = _CameraProperty.MoveScene;\n            this._wheelYActionCoordinate = axis;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelZMoveScene\", {\n        /**\n         * Get the configured movement axis (relative to the scene) the mouse wheel's\n         * Z axis controls.\n         * @returns The configured axis or null if none.\n         */\n        get: function () {\n            if (this._wheelZAction !== _CameraProperty.MoveScene) {\n                return null;\n            }\n            return this._wheelZActionCoordinate;\n        },\n        /**\n         * Set which movement axis (relative to the scene) the mouse wheel's Z axis\n         * controls.\n         * @param axis The axis to be moved. Set null to clear.\n         */\n        set: function (axis) {\n            if (axis === null && this._wheelZAction !== _CameraProperty.MoveScene) {\n                // Attempting to clear different _wheelZAction.\n                return;\n            }\n            this._wheelZAction = _CameraProperty.MoveScene;\n            this._wheelZActionCoordinate = axis;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Called for each rendered frame.\n     */\n    FreeCameraMouseWheelInput.prototype.checkInputs = function () {\n        if (this._wheelDeltaX === 0 && this._wheelDeltaY === 0 && this._wheelDeltaZ == 0) {\n            return;\n        }\n        // Clear the camera properties that we might be updating.\n        this._moveRelative.setAll(0);\n        this._rotateRelative.setAll(0);\n        this._moveScene.setAll(0);\n        // Set the camera properties that are to be updated.\n        this._updateCamera();\n        if (this.camera.getScene().useRightHandedSystem) {\n            // TODO: Does this need done for worldUpdate too?\n            this._moveRelative.z *= -1;\n        }\n        // Convert updates relative to camera to world position update.\n        var cameraTransformMatrix = Matrix.Zero();\n        this.camera.getViewMatrix().invertToRef(cameraTransformMatrix);\n        var transformedDirection = Vector3.Zero();\n        Vector3.TransformNormalToRef(this._moveRelative, cameraTransformMatrix, transformedDirection);\n        // Apply updates to camera position.\n        this.camera.cameraRotation.x += this._rotateRelative.x / 200;\n        this.camera.cameraRotation.y += this._rotateRelative.y / 200;\n        this.camera.cameraDirection.addInPlace(transformedDirection);\n        this.camera.cameraDirection.addInPlace(this._moveScene);\n        // Call the base class implementation to handle observers and do cleanup.\n        _super.prototype.checkInputs.call(this);\n    };\n    /**\n     * Update the camera according to any configured properties for the 3\n     * mouse-wheel axis.\n     */\n    FreeCameraMouseWheelInput.prototype._updateCamera = function () {\n        // Do the camera updates for each of the 3 touch-wheel axis.\n        this._updateCameraProperty(this._wheelDeltaX, this._wheelXAction, this._wheelXActionCoordinate);\n        this._updateCameraProperty(this._wheelDeltaY, this._wheelYAction, this._wheelYActionCoordinate);\n        this._updateCameraProperty(this._wheelDeltaZ, this._wheelZAction, this._wheelZActionCoordinate);\n    };\n    /**\n     * Update one property of the camera.\n     * @param value\n     * @param cameraProperty\n     * @param coordinate\n     */\n    FreeCameraMouseWheelInput.prototype._updateCameraProperty = function (\n    /* Mouse-wheel delta. */\n    value, \n    /* Camera property to be changed. */\n    cameraProperty, \n    /* Axis of Camera property to be changed. */\n    coordinate) {\n        if (value === 0) {\n            // Mouse wheel has not moved.\n            return;\n        }\n        if (cameraProperty === null || coordinate === null) {\n            // Mouse wheel axis not configured.\n            return;\n        }\n        var action = null;\n        switch (cameraProperty) {\n            case _CameraProperty.MoveRelative:\n                action = this._moveRelative;\n                break;\n            case _CameraProperty.RotateRelative:\n                action = this._rotateRelative;\n                break;\n            case _CameraProperty.MoveScene:\n                action = this._moveScene;\n                break;\n        }\n        switch (coordinate) {\n            case Coordinate.X:\n                action.set(value, 0, 0);\n                break;\n            case Coordinate.Y:\n                action.set(0, value, 0);\n                break;\n            case Coordinate.Z:\n                action.set(0, 0, value);\n                break;\n        }\n    };\n    __decorate([\n        serialize()\n    ], FreeCameraMouseWheelInput.prototype, \"wheelXMoveRelative\", null);\n    __decorate([\n        serialize()\n    ], FreeCameraMouseWheelInput.prototype, \"wheelYMoveRelative\", null);\n    __decorate([\n        serialize()\n    ], FreeCameraMouseWheelInput.prototype, \"wheelZMoveRelative\", null);\n    __decorate([\n        serialize()\n    ], FreeCameraMouseWheelInput.prototype, \"wheelXRotateRelative\", null);\n    __decorate([\n        serialize()\n    ], FreeCameraMouseWheelInput.prototype, \"wheelYRotateRelative\", null);\n    __decorate([\n        serialize()\n    ], FreeCameraMouseWheelInput.prototype, \"wheelZRotateRelative\", null);\n    __decorate([\n        serialize()\n    ], FreeCameraMouseWheelInput.prototype, \"wheelXMoveScene\", null);\n    __decorate([\n        serialize()\n    ], FreeCameraMouseWheelInput.prototype, \"wheelYMoveScene\", null);\n    __decorate([\n        serialize()\n    ], FreeCameraMouseWheelInput.prototype, \"wheelZMoveScene\", null);\n    return FreeCameraMouseWheelInput;\n}(BaseCameraMouseWheelInput));\nexport { FreeCameraMouseWheelInput };\nCameraInputTypes[\"FreeCameraMouseWheelInput\"] = FreeCameraMouseWheelInput;\n//# sourceMappingURL=freeCameraMouseWheelInput.js.map","import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents.js\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Manage the touch inputs to control the movement of a free camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar FreeCameraTouchInput = /** @class */ (function () {\n    /**\n     * Manage the touch inputs to control the movement of a free camera.\n     * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n     * @param allowMouse Defines if mouse events can be treated as touch events\n     */\n    function FreeCameraTouchInput(\n    /**\n     * Define if mouse events can be treated as touch events\n     */\n    allowMouse) {\n        if (allowMouse === void 0) { allowMouse = false; }\n        this.allowMouse = allowMouse;\n        /**\n         * Defines the touch sensibility for rotation.\n         * The lower the faster.\n         */\n        this.touchAngularSensibility = 200000.0;\n        /**\n         * Defines the touch sensibility for move.\n         * The lower the faster.\n         */\n        this.touchMoveSensibility = 250.0;\n        /**\n         * Swap touch actions so that one touch is used for rotation and multiple for movement\n         */\n        this.singleFingerRotate = false;\n        this._offsetX = null;\n        this._offsetY = null;\n        this._pointerPressed = new Array();\n        this._isSafari = Tools.IsSafari();\n    }\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    FreeCameraTouchInput.prototype.attachControl = function (noPreventDefault) {\n        var _this = this;\n        // eslint-disable-next-line prefer-rest-params\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        var previousPosition = null;\n        if (this._pointerInput === undefined) {\n            this._onLostFocus = function () {\n                _this._offsetX = null;\n                _this._offsetY = null;\n            };\n            this._pointerInput = function (p) {\n                var evt = p.event;\n                var isMouseEvent = evt.pointerType === \"mouse\" || (_this._isSafari && typeof evt.pointerType === \"undefined\");\n                if (!_this.allowMouse && isMouseEvent) {\n                    return;\n                }\n                if (p.type === PointerEventTypes.POINTERDOWN) {\n                    if (!noPreventDefault) {\n                        evt.preventDefault();\n                    }\n                    _this._pointerPressed.push(evt.pointerId);\n                    if (_this._pointerPressed.length !== 1) {\n                        return;\n                    }\n                    previousPosition = {\n                        x: evt.clientX,\n                        y: evt.clientY,\n                    };\n                }\n                else if (p.type === PointerEventTypes.POINTERUP) {\n                    if (!noPreventDefault) {\n                        evt.preventDefault();\n                    }\n                    var index = _this._pointerPressed.indexOf(evt.pointerId);\n                    if (index === -1) {\n                        return;\n                    }\n                    _this._pointerPressed.splice(index, 1);\n                    if (index != 0) {\n                        return;\n                    }\n                    previousPosition = null;\n                    _this._offsetX = null;\n                    _this._offsetY = null;\n                }\n                else if (p.type === PointerEventTypes.POINTERMOVE) {\n                    if (!noPreventDefault) {\n                        evt.preventDefault();\n                    }\n                    if (!previousPosition) {\n                        return;\n                    }\n                    var index = _this._pointerPressed.indexOf(evt.pointerId);\n                    if (index != 0) {\n                        return;\n                    }\n                    _this._offsetX = evt.clientX - previousPosition.x;\n                    _this._offsetY = -(evt.clientY - previousPosition.y);\n                }\n            };\n        }\n        this._observer = this.camera\n            .getScene()\n            .onPointerObservable.add(this._pointerInput, PointerEventTypes.POINTERDOWN | PointerEventTypes.POINTERUP | PointerEventTypes.POINTERMOVE);\n        if (this._onLostFocus) {\n            var engine = this.camera.getEngine();\n            var element = engine.getInputElement();\n            element && element.addEventListener(\"blur\", this._onLostFocus);\n        }\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    FreeCameraTouchInput.prototype.detachControl = function () {\n        if (this._pointerInput) {\n            if (this._observer) {\n                this.camera.getScene().onPointerObservable.remove(this._observer);\n                this._observer = null;\n            }\n            if (this._onLostFocus) {\n                var engine = this.camera.getEngine();\n                var element = engine.getInputElement();\n                element && element.removeEventListener(\"blur\", this._onLostFocus);\n                this._onLostFocus = null;\n            }\n            this._pointerPressed = [];\n            this._offsetX = null;\n            this._offsetY = null;\n        }\n    };\n    /**\n     * Update the current camera state depending on the inputs that have been used this frame.\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n     */\n    FreeCameraTouchInput.prototype.checkInputs = function () {\n        if (this._offsetX === null || this._offsetY === null) {\n            return;\n        }\n        if (this._offsetX === 0 && this._offsetY === 0) {\n            return;\n        }\n        var camera = this.camera;\n        camera.cameraRotation.y = this._offsetX / this.touchAngularSensibility;\n        var rotateCamera = (this.singleFingerRotate && this._pointerPressed.length === 1) || (!this.singleFingerRotate && this._pointerPressed.length > 1);\n        if (rotateCamera) {\n            camera.cameraRotation.x = -this._offsetY / this.touchAngularSensibility;\n        }\n        else {\n            var speed = camera._computeLocalCameraSpeed();\n            var direction = new Vector3(0, 0, this.touchMoveSensibility !== 0 ? (speed * this._offsetY) / this.touchMoveSensibility : 0);\n            Matrix.RotationYawPitchRollToRef(camera.rotation.y, camera.rotation.x, 0, camera._cameraRotationMatrix);\n            camera.cameraDirection.addInPlace(Vector3.TransformCoordinates(direction, camera._cameraRotationMatrix));\n        }\n    };\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    FreeCameraTouchInput.prototype.getClassName = function () {\n        return \"FreeCameraTouchInput\";\n    };\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input friendly name\n     */\n    FreeCameraTouchInput.prototype.getSimpleName = function () {\n        return \"touch\";\n    };\n    __decorate([\n        serialize()\n    ], FreeCameraTouchInput.prototype, \"touchAngularSensibility\", void 0);\n    __decorate([\n        serialize()\n    ], FreeCameraTouchInput.prototype, \"touchMoveSensibility\", void 0);\n    return FreeCameraTouchInput;\n}());\nexport { FreeCameraTouchInput };\nCameraInputTypes[\"FreeCameraTouchInput\"] = FreeCameraTouchInput;\n//# sourceMappingURL=freeCameraTouchInput.js.map","import { Matrix } from \"../../Maths/math.vector.js\";\nimport { VRDistortionCorrectionPostProcess } from \"../../PostProcesses/vrDistortionCorrectionPostProcess.js\";\nimport { VRMultiviewToSingleviewPostProcess } from \"../../PostProcesses/vrMultiviewToSingleviewPostProcess.js\";\nimport { VRCameraMetrics } from \"../VR/vrCameraMetrics.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { Viewport } from \"../../Maths/math.viewport.js\";\n/**\n * @param camera\n * @param rigParams\n * @hidden\n */\nexport function setVRRigMode(camera, rigParams) {\n    var metrics = rigParams.vrCameraMetrics || VRCameraMetrics.GetDefault();\n    camera._rigCameras[0]._cameraRigParams.vrMetrics = metrics;\n    camera._rigCameras[0].viewport = new Viewport(0, 0, 0.5, 1.0);\n    camera._rigCameras[0]._cameraRigParams.vrWorkMatrix = new Matrix();\n    camera._rigCameras[0]._cameraRigParams.vrHMatrix = metrics.leftHMatrix;\n    camera._rigCameras[0]._cameraRigParams.vrPreViewMatrix = metrics.leftPreViewMatrix;\n    camera._rigCameras[0].getProjectionMatrix = camera._rigCameras[0]._getVRProjectionMatrix;\n    camera._rigCameras[1]._cameraRigParams.vrMetrics = metrics;\n    camera._rigCameras[1].viewport = new Viewport(0.5, 0, 0.5, 1.0);\n    camera._rigCameras[1]._cameraRigParams.vrWorkMatrix = new Matrix();\n    camera._rigCameras[1]._cameraRigParams.vrHMatrix = metrics.rightHMatrix;\n    camera._rigCameras[1]._cameraRigParams.vrPreViewMatrix = metrics.rightPreViewMatrix;\n    camera._rigCameras[1].getProjectionMatrix = camera._rigCameras[1]._getVRProjectionMatrix;\n    // For multiview on a webVR camera\n    // First multiview will be rendered to camera._multiviewTexture\n    // Then this postprocess will run on each eye to copy the right texture to each eye\n    if (metrics.multiviewEnabled) {\n        if (!camera.getScene().getEngine().getCaps().multiview) {\n            Logger.Warn(\"Multiview is not supported, falling back to standard rendering\");\n            metrics.multiviewEnabled = false;\n        }\n        else {\n            camera._useMultiviewToSingleView = true;\n            camera._rigPostProcess = new VRMultiviewToSingleviewPostProcess(\"VRMultiviewToSingleview\", camera, metrics.postProcessScaleFactor);\n        }\n    }\n    if (metrics.compensateDistortion) {\n        camera._rigCameras[0]._rigPostProcess = new VRDistortionCorrectionPostProcess(\"VR_Distort_Compensation_Left\", camera._rigCameras[0], false, metrics);\n        camera._rigCameras[1]._rigPostProcess = new VRDistortionCorrectionPostProcess(\"VR_Distort_Compensation_Right\", camera._rigCameras[1], true, metrics);\n    }\n}\n//# sourceMappingURL=vrRigMode.js.map","import { Matrix } from \"../../Maths/math.vector.js\";\nimport { Viewport } from \"../../Maths/math.viewport.js\";\n/**\n * @param camera\n * @param rigParams\n * @hidden\n */\nexport function setWebVRRigMode(camera, rigParams) {\n    if (rigParams.vrDisplay) {\n        var leftEye = rigParams.vrDisplay.getEyeParameters(\"left\");\n        var rightEye = rigParams.vrDisplay.getEyeParameters(\"right\");\n        //Left eye\n        camera._rigCameras[0].viewport = new Viewport(0, 0, 0.5, 1.0);\n        camera._rigCameras[0].setCameraRigParameter(\"left\", true);\n        //leaving this for future reference\n        camera._rigCameras[0].setCameraRigParameter(\"specs\", rigParams.specs);\n        camera._rigCameras[0].setCameraRigParameter(\"eyeParameters\", leftEye);\n        camera._rigCameras[0].setCameraRigParameter(\"frameData\", rigParams.frameData);\n        camera._rigCameras[0].setCameraRigParameter(\"parentCamera\", rigParams.parentCamera);\n        camera._rigCameras[0]._cameraRigParams.vrWorkMatrix = new Matrix();\n        camera._rigCameras[0].getProjectionMatrix = camera._getWebVRProjectionMatrix;\n        camera._rigCameras[0].parent = camera;\n        camera._rigCameras[0]._getViewMatrix = camera._getWebVRViewMatrix;\n        //Right eye\n        camera._rigCameras[1].viewport = new Viewport(0.5, 0, 0.5, 1.0);\n        camera._rigCameras[1].setCameraRigParameter(\"eyeParameters\", rightEye);\n        camera._rigCameras[1].setCameraRigParameter(\"specs\", rigParams.specs);\n        camera._rigCameras[1].setCameraRigParameter(\"frameData\", rigParams.frameData);\n        camera._rigCameras[1].setCameraRigParameter(\"parentCamera\", rigParams.parentCamera);\n        camera._rigCameras[1]._cameraRigParams.vrWorkMatrix = new Matrix();\n        camera._rigCameras[1].getProjectionMatrix = camera._getWebVRProjectionMatrix;\n        camera._rigCameras[1].parent = camera;\n        camera._rigCameras[1]._getViewMatrix = camera._getWebVRViewMatrix;\n    }\n}\n//# sourceMappingURL=webVRRigMode.js.map","import { Matrix } from \"../../Maths/math.vector.js\";\n/**\n * This represents all the required metrics to create a VR camera.\n * @see https://doc.babylonjs.com/babylon101/cameras#device-orientation-camera\n */\nvar VRCameraMetrics = /** @class */ (function () {\n    function VRCameraMetrics() {\n        /**\n         * Define if the current vr camera should compensate the distortion of the lens or not.\n         */\n        this.compensateDistortion = true;\n        /**\n         * Defines if multiview should be enabled when rendering (Default: false)\n         */\n        this.multiviewEnabled = false;\n    }\n    Object.defineProperty(VRCameraMetrics.prototype, \"aspectRatio\", {\n        /**\n         * Gets the rendering aspect ratio based on the provided resolutions.\n         */\n        get: function () {\n            return this.hResolution / (2 * this.vResolution);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRCameraMetrics.prototype, \"aspectRatioFov\", {\n        /**\n         * Gets the aspect ratio based on the FOV, scale factors, and real screen sizes.\n         */\n        get: function () {\n            return 2 * Math.atan((this.postProcessScaleFactor * this.vScreenSize) / (2 * this.eyeToScreenDistance));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRCameraMetrics.prototype, \"leftHMatrix\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var meters = this.hScreenSize / 4 - this.lensSeparationDistance / 2;\n            var h = (4 * meters) / this.hScreenSize;\n            return Matrix.Translation(h, 0, 0);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRCameraMetrics.prototype, \"rightHMatrix\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var meters = this.hScreenSize / 4 - this.lensSeparationDistance / 2;\n            var h = (4 * meters) / this.hScreenSize;\n            return Matrix.Translation(-h, 0, 0);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRCameraMetrics.prototype, \"leftPreViewMatrix\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return Matrix.Translation(0.5 * this.interpupillaryDistance, 0, 0);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRCameraMetrics.prototype, \"rightPreViewMatrix\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return Matrix.Translation(-0.5 * this.interpupillaryDistance, 0, 0);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get the default VRMetrics based on the most generic setup.\n     * @returns the default vr metrics\n     */\n    VRCameraMetrics.GetDefault = function () {\n        var result = new VRCameraMetrics();\n        result.hResolution = 1280;\n        result.vResolution = 800;\n        result.hScreenSize = 0.149759993;\n        result.vScreenSize = 0.0935999975;\n        result.vScreenCenter = 0.0467999987;\n        result.eyeToScreenDistance = 0.0410000011;\n        result.lensSeparationDistance = 0.063500002;\n        result.interpupillaryDistance = 0.064000003;\n        result.distortionK = [1.0, 0.219999999, 0.239999995, 0.0];\n        result.chromaAbCorrection = [0.995999992, -0.00400000019, 1.01400006, 0.0];\n        result.postProcessScaleFactor = 1.714605507808412;\n        result.lensCenterOffset = 0.151976421;\n        return result;\n    };\n    return VRCameraMetrics;\n}());\nexport { VRCameraMetrics };\n//# sourceMappingURL=vrCameraMetrics.js.map","import { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera.js\";\nimport { DeviceOrientationCamera } from \"../../Cameras/deviceOrientationCamera.js\";\nimport { VRCameraMetrics } from \"./vrCameraMetrics.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setVRRigMode } from \"../RigModes/vrRigMode.js\";\nNode.AddNodeConstructor(\"VRDeviceOrientationFreeCamera\", function (name, scene) {\n    return function () { return new VRDeviceOrientationFreeCamera(name, Vector3.Zero(), scene); };\n});\n/**\n * Camera used to simulate VR rendering (based on FreeCamera)\n * @see https://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras\n */\nvar VRDeviceOrientationFreeCamera = /** @class */ (function (_super) {\n    __extends(VRDeviceOrientationFreeCamera, _super);\n    /**\n     * Creates a new VRDeviceOrientationFreeCamera\n     * @param name defines camera name\n     * @param position defines the start position of the camera\n     * @param scene defines the scene the camera belongs to\n     * @param compensateDistortion defines if the camera needs to compensate the lens distortion\n     * @param vrCameraMetrics defines the vr metrics associated to the camera\n     */\n    function VRDeviceOrientationFreeCamera(name, position, scene, compensateDistortion, vrCameraMetrics) {\n        if (compensateDistortion === void 0) { compensateDistortion = true; }\n        if (vrCameraMetrics === void 0) { vrCameraMetrics = VRCameraMetrics.GetDefault(); }\n        var _this = _super.call(this, name, position, scene) || this;\n        _this._setRigMode = setVRRigMode.bind(null, _this);\n        vrCameraMetrics.compensateDistortion = compensateDistortion;\n        _this.setCameraRigMode(Camera.RIG_MODE_VR, { vrCameraMetrics: vrCameraMetrics });\n        return _this;\n    }\n    /**\n     * Gets camera class name\n     * @returns VRDeviceOrientationFreeCamera\n     */\n    VRDeviceOrientationFreeCamera.prototype.getClassName = function () {\n        return \"VRDeviceOrientationFreeCamera\";\n    };\n    return VRDeviceOrientationFreeCamera;\n}(DeviceOrientationCamera));\nexport { VRDeviceOrientationFreeCamera };\n//# sourceMappingURL=vrDeviceOrientationFreeCamera.js.map","import { __extends } from \"tslib\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { FreeCamera } from \"../../Cameras/freeCamera.js\";\nimport { TargetCamera } from \"../../Cameras/targetCamera.js\";\nimport { DeviceOrientationCamera } from \"../../Cameras/deviceOrientationCamera.js\";\nimport { VRDeviceOrientationFreeCamera } from \"../../Cameras/VR/vrDeviceOrientationFreeCamera.js\";\nimport { WebVRFreeCamera } from \"../../Cameras/VR/webVRCamera.js\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents.js\";\nimport { Quaternion, Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { Color3, Color4 } from \"../../Maths/math.color.js\";\nimport { Gamepad } from \"../../Gamepads/gamepad.js\";\nimport { PoseEnabledController, PoseEnabledControllerType } from \"../../Gamepads/Controllers/poseEnabledController.js\";\nimport { WebVRController } from \"../../Gamepads/Controllers/webVRController.js\";\nimport { Xbox360Button } from \"../../Gamepads/xboxGamepad.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { Ray } from \"../../Culling/ray.js\";\nimport { ImageProcessingConfiguration } from \"../../Materials/imageProcessingConfiguration.js\";\nimport { StandardMaterial } from \"../../Materials/standardMaterial.js\";\nimport { DynamicTexture } from \"../../Materials/Textures/dynamicTexture.js\";\nimport { ImageProcessingPostProcess } from \"../../PostProcesses/imageProcessingPostProcess.js\";\nimport { SineEase, EasingFunction, CircleEase } from \"../../Animations/easing.js\";\nimport { Animation } from \"../../Animations/animation.js\";\nimport { VRCameraMetrics } from \"../../Cameras/VR/vrCameraMetrics.js\";\nimport \"../../Gamepads/gamepadSceneComponent.js\";\nimport \"../../Animations/animatable.js\";\nimport { Axis } from \"../../Maths/math.axis.js\";\nimport { WebXRSessionManager } from \"../../XR/webXRSessionManager.js\";\nimport { WebXRState } from \"../../XR/webXRTypes.js\";\nimport { CreateCylinder } from \"../../Meshes/Builders/cylinderBuilder.js\";\nimport { CreateTorus } from \"../../Meshes/Builders/torusBuilder.js\";\nimport { CreateGround } from \"../../Meshes/Builders/groundBuilder.js\";\nvar VRExperienceHelperGazer = /** @class */ (function () {\n    function VRExperienceHelperGazer(scene, gazeTrackerToClone) {\n        if (gazeTrackerToClone === void 0) { gazeTrackerToClone = null; }\n        this.scene = scene;\n        /** @hidden */\n        this._pointerDownOnMeshAsked = false;\n        /** @hidden */\n        this._isActionableMesh = false;\n        /** @hidden */\n        this._teleportationRequestInitiated = false;\n        /** @hidden */\n        this._teleportationBackRequestInitiated = false;\n        /** @hidden */\n        this._rotationRightAsked = false;\n        /** @hidden */\n        this._rotationLeftAsked = false;\n        /** @hidden */\n        this._dpadPressed = true;\n        /** @hidden */\n        this._activePointer = false;\n        this._id = VRExperienceHelperGazer._IdCounter++;\n        // Gaze tracker\n        if (!gazeTrackerToClone) {\n            this._gazeTracker = CreateTorus(\"gazeTracker\", {\n                diameter: 0.0035,\n                thickness: 0.0025,\n                tessellation: 20,\n                updatable: false,\n            }, scene);\n            this._gazeTracker.bakeCurrentTransformIntoVertices();\n            this._gazeTracker.isPickable = false;\n            this._gazeTracker.isVisible = false;\n            var targetMat = new StandardMaterial(\"targetMat\", scene);\n            targetMat.specularColor = Color3.Black();\n            targetMat.emissiveColor = new Color3(0.7, 0.7, 0.7);\n            targetMat.backFaceCulling = false;\n            this._gazeTracker.material = targetMat;\n        }\n        else {\n            this._gazeTracker = gazeTrackerToClone.clone(\"gazeTracker\");\n        }\n    }\n    /**\n     * @param length\n     * @hidden\n     */\n    VRExperienceHelperGazer.prototype._getForwardRay = function (length) {\n        return new Ray(Vector3.Zero(), new Vector3(0, 0, length));\n    };\n    /** @hidden */\n    VRExperienceHelperGazer.prototype._selectionPointerDown = function () {\n        this._pointerDownOnMeshAsked = true;\n        if (this._currentHit) {\n            this.scene.simulatePointerDown(this._currentHit, { pointerId: this._id });\n        }\n    };\n    /** @hidden */\n    VRExperienceHelperGazer.prototype._selectionPointerUp = function () {\n        if (this._currentHit) {\n            this.scene.simulatePointerUp(this._currentHit, { pointerId: this._id });\n        }\n        this._pointerDownOnMeshAsked = false;\n    };\n    /** @hidden */\n    VRExperienceHelperGazer.prototype._activatePointer = function () {\n        this._activePointer = true;\n    };\n    /** @hidden */\n    VRExperienceHelperGazer.prototype._deactivatePointer = function () {\n        this._activePointer = false;\n    };\n    /**\n     * @param distance\n     * @hidden\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    VRExperienceHelperGazer.prototype._updatePointerDistance = function (distance) {\n        if (distance === void 0) { distance = 100; }\n    };\n    VRExperienceHelperGazer.prototype.dispose = function () {\n        this._interactionsEnabled = false;\n        this._teleportationEnabled = false;\n        if (this._gazeTracker) {\n            this._gazeTracker.dispose();\n        }\n    };\n    VRExperienceHelperGazer._IdCounter = 0;\n    return VRExperienceHelperGazer;\n}());\nvar VRExperienceHelperControllerGazer = /** @class */ (function (_super) {\n    __extends(VRExperienceHelperControllerGazer, _super);\n    function VRExperienceHelperControllerGazer(webVRController, scene, gazeTrackerToClone) {\n        var _this = _super.call(this, scene, gazeTrackerToClone) || this;\n        _this.webVRController = webVRController;\n        // Laser pointer\n        _this._laserPointer = CreateCylinder(\"laserPointer\", {\n            updatable: false,\n            height: 1,\n            diameterTop: 0.004,\n            diameterBottom: 0.0002,\n            tessellation: 20,\n            subdivisions: 1,\n        }, scene);\n        var laserPointerMaterial = new StandardMaterial(\"laserPointerMat\", scene);\n        laserPointerMaterial.emissiveColor = new Color3(0.7, 0.7, 0.7);\n        laserPointerMaterial.alpha = 0.6;\n        _this._laserPointer.material = laserPointerMaterial;\n        _this._laserPointer.rotation.x = Math.PI / 2;\n        _this._laserPointer.position.z = -0.5;\n        _this._laserPointer.isVisible = false;\n        _this._laserPointer.isPickable = false;\n        if (!webVRController.mesh) {\n            // Create an empty mesh that is used prior to loading the high quality model\n            var preloadMesh = new Mesh(\"preloadControllerMesh\", scene);\n            var preloadPointerPose = new Mesh(PoseEnabledController.POINTING_POSE, scene);\n            preloadPointerPose.rotation.x = -0.7;\n            preloadMesh.addChild(preloadPointerPose);\n            webVRController.attachToMesh(preloadMesh);\n        }\n        _this._setLaserPointerParent(webVRController.mesh);\n        _this._meshAttachedObserver = webVRController._meshAttachedObservable.add(function (mesh) {\n            _this._setLaserPointerParent(mesh);\n        });\n        return _this;\n    }\n    VRExperienceHelperControllerGazer.prototype._getForwardRay = function (length) {\n        return this.webVRController.getForwardRay(length);\n    };\n    /** @hidden */\n    VRExperienceHelperControllerGazer.prototype._activatePointer = function () {\n        _super.prototype._activatePointer.call(this);\n        this._laserPointer.isVisible = true;\n    };\n    /** @hidden */\n    VRExperienceHelperControllerGazer.prototype._deactivatePointer = function () {\n        _super.prototype._deactivatePointer.call(this);\n        this._laserPointer.isVisible = false;\n    };\n    /**\n     * @param color\n     * @hidden\n     */\n    VRExperienceHelperControllerGazer.prototype._setLaserPointerColor = function (color) {\n        this._laserPointer.material.emissiveColor = color;\n    };\n    /**\n     * @param disabled\n     * @hidden\n     */\n    VRExperienceHelperControllerGazer.prototype._setLaserPointerLightingDisabled = function (disabled) {\n        this._laserPointer.material.disableLighting = disabled;\n    };\n    /**\n     * @param mesh\n     * @hidden\n     */\n    VRExperienceHelperControllerGazer.prototype._setLaserPointerParent = function (mesh) {\n        var makeNotPick = function (root) {\n            root.isPickable = false;\n            root.getChildMeshes().forEach(function (c) {\n                makeNotPick(c);\n            });\n        };\n        makeNotPick(mesh);\n        var meshChildren = mesh.getChildren(undefined, false);\n        var laserParent = mesh;\n        this.webVRController._pointingPoseNode = null;\n        for (var i = 0; i < meshChildren.length; i++) {\n            if (meshChildren[i].name && meshChildren[i].name.indexOf(PoseEnabledController.POINTING_POSE) >= 0) {\n                laserParent = meshChildren[i];\n                this.webVRController._pointingPoseNode = laserParent;\n                break;\n            }\n        }\n        this._laserPointer.parent = laserParent;\n    };\n    VRExperienceHelperControllerGazer.prototype._updatePointerDistance = function (distance) {\n        if (distance === void 0) { distance = 100; }\n        this._laserPointer.scaling.y = distance;\n        this._laserPointer.position.z = -distance / 2;\n    };\n    VRExperienceHelperControllerGazer.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._laserPointer.dispose();\n        if (this._meshAttachedObserver) {\n            this.webVRController._meshAttachedObservable.remove(this._meshAttachedObserver);\n        }\n    };\n    return VRExperienceHelperControllerGazer;\n}(VRExperienceHelperGazer));\nvar VRExperienceHelperCameraGazer = /** @class */ (function (_super) {\n    __extends(VRExperienceHelperCameraGazer, _super);\n    function VRExperienceHelperCameraGazer(_getCamera, scene) {\n        var _this = _super.call(this, scene) || this;\n        _this._getCamera = _getCamera;\n        return _this;\n    }\n    VRExperienceHelperCameraGazer.prototype._getForwardRay = function (length) {\n        var camera = this._getCamera();\n        if (camera) {\n            return camera.getForwardRay(length);\n        }\n        else {\n            return new Ray(Vector3.Zero(), Vector3.Forward());\n        }\n    };\n    return VRExperienceHelperCameraGazer;\n}(VRExperienceHelperGazer));\n/**\n * Event containing information after VR has been entered\n */\nvar OnAfterEnteringVRObservableEvent = /** @class */ (function () {\n    function OnAfterEnteringVRObservableEvent() {\n    }\n    return OnAfterEnteringVRObservableEvent;\n}());\nexport { OnAfterEnteringVRObservableEvent };\n/**\n * Helps to quickly add VR support to an existing scene.\n * See https://doc.babylonjs.com/divingDeeper/cameras/webVRHelper\n * @deprecated\n */\nvar VRExperienceHelper = /** @class */ (function () {\n    /**\n     * Instantiates a VRExperienceHelper.\n     * Helps to quickly add VR support to an existing scene.\n     * @param scene The scene the VRExperienceHelper belongs to.\n     * @param webVROptions Options to modify the vr experience helper's behavior.\n     */\n    function VRExperienceHelper(scene, \n    /** Options to modify the vr experience helper's behavior. */\n    webVROptions) {\n        if (webVROptions === void 0) { webVROptions = {}; }\n        var _this = this;\n        this.webVROptions = webVROptions;\n        // Can the system support WebVR, even if a headset isn't plugged in?\n        this._webVRsupported = false;\n        // If WebVR is supported, is a headset plugged in and are we ready to present?\n        this._webVRready = false;\n        // Are we waiting for the requestPresent callback to complete?\n        this._webVRrequesting = false;\n        // Are we presenting to the headset right now? (this is the vrDevice state)\n        this._webVRpresenting = false;\n        // Are we presenting in the fullscreen fallback?\n        this._fullscreenVRpresenting = false;\n        /**\n         * Gets or sets a boolean indicating that gaze can be enabled even if pointer lock is not engage (useful on iOS where fullscreen mode and pointer lock are not supported)\n         */\n        this.enableGazeEvenWhenNoPointerLock = false;\n        /**\n         * Gets or sets a boolean indicating that the VREXperienceHelper will exit VR if double tap is detected\n         */\n        this.exitVROnDoubleTap = true;\n        /**\n         * Observable raised right before entering VR.\n         */\n        this.onEnteringVRObservable = new Observable();\n        /**\n         * Observable raised when entering VR has completed.\n         */\n        this.onAfterEnteringVRObservable = new Observable();\n        /**\n         * Observable raised when exiting VR.\n         */\n        this.onExitingVRObservable = new Observable();\n        /**\n         * Observable raised when controller mesh is loaded.\n         */\n        this.onControllerMeshLoadedObservable = new Observable();\n        this._useCustomVRButton = false;\n        this._teleportationRequested = false;\n        this._teleportActive = false;\n        this._floorMeshesCollection = [];\n        this._teleportationMode = VRExperienceHelper.TELEPORTATIONMODE_CONSTANTTIME;\n        this._teleportationTime = 122;\n        this._teleportationSpeed = 20;\n        this._rotationAllowed = true;\n        this._teleportBackwardsVector = new Vector3(0, -1, -1);\n        this._isDefaultTeleportationTarget = true;\n        this._teleportationFillColor = \"#444444\";\n        this._teleportationBorderColor = \"#FFFFFF\";\n        this._rotationAngle = 0;\n        this._haloCenter = new Vector3(0, 0, 0);\n        this._padSensibilityUp = 0.65;\n        this._padSensibilityDown = 0.35;\n        this._leftController = null;\n        this._rightController = null;\n        this._gazeColor = new Color3(0.7, 0.7, 0.7);\n        this._laserColor = new Color3(0.7, 0.7, 0.7);\n        this._pickedLaserColor = new Color3(0.2, 0.2, 1);\n        this._pickedGazeColor = new Color3(0, 0, 1);\n        /**\n         * Observable raised when a new mesh is selected based on meshSelectionPredicate\n         */\n        this.onNewMeshSelected = new Observable();\n        /**\n         * Observable raised when a new mesh is selected based on meshSelectionPredicate.\n         * This observable will provide the mesh and the controller used to select the mesh\n         */\n        this.onMeshSelectedWithController = new Observable();\n        /**\n         * Observable raised when a new mesh is picked based on meshSelectionPredicate\n         */\n        this.onNewMeshPicked = new Observable();\n        /**\n         * Observable raised before camera teleportation\n         */\n        this.onBeforeCameraTeleport = new Observable();\n        /**\n         *  Observable raised after camera teleportation\n         */\n        this.onAfterCameraTeleport = new Observable();\n        /**\n         * Observable raised when current selected mesh gets unselected\n         */\n        this.onSelectedMeshUnselected = new Observable();\n        /**\n         * Set teleportation enabled. If set to false camera teleportation will be disabled but camera rotation will be kept.\n         */\n        this.teleportationEnabled = true;\n        this._teleportationInitialized = false;\n        this._interactionsEnabled = false;\n        this._interactionsRequested = false;\n        this._displayGaze = true;\n        this._displayLaserPointer = true;\n        /**\n         * If the gaze trackers scale should be updated to be constant size when pointing at near/far meshes\n         */\n        this.updateGazeTrackerScale = true;\n        /**\n         * If the gaze trackers color should be updated when selecting meshes\n         */\n        this.updateGazeTrackerColor = true;\n        /**\n         * If the controller laser color should be updated when selecting meshes\n         */\n        this.updateControllerLaserColor = true;\n        /**\n         * Defines whether or not Pointer lock should be requested when switching to\n         * full screen.\n         */\n        this.requestPointerLockOnFullScreen = true;\n        /**\n         * Was the XR test done already. If this is true AND this.xr exists, xr is initialized.\n         * If this is true and no this.xr, xr exists but is not supported, using WebVR.\n         */\n        this.xrTestDone = false;\n        this._onResize = function () {\n            _this._moveButtonToBottomRight();\n            if (_this._fullscreenVRpresenting && _this._webVRready) {\n                _this.exitVR();\n            }\n        };\n        this._onFullscreenChange = function () {\n            var anyDoc = document;\n            if (anyDoc.fullscreen !== undefined) {\n                _this._fullscreenVRpresenting = document.fullscreen;\n            }\n            else if (anyDoc.mozFullScreen !== undefined) {\n                _this._fullscreenVRpresenting = anyDoc.mozFullScreen;\n            }\n            else if (anyDoc.webkitIsFullScreen !== undefined) {\n                _this._fullscreenVRpresenting = anyDoc.webkitIsFullScreen;\n            }\n            else if (anyDoc.msIsFullScreen !== undefined) {\n                _this._fullscreenVRpresenting = anyDoc.msIsFullScreen;\n            }\n            else if (document.msFullscreenElement !== undefined) {\n                _this._fullscreenVRpresenting = document.msFullscreenElement;\n            }\n            if (!_this._fullscreenVRpresenting && _this._inputElement) {\n                _this.exitVR();\n                if (!_this._useCustomVRButton && _this._btnVR) {\n                    _this._btnVR.style.top = _this._inputElement.offsetTop + _this._inputElement.offsetHeight - 70 + \"px\";\n                    _this._btnVR.style.left = _this._inputElement.offsetLeft + _this._inputElement.offsetWidth - 100 + \"px\";\n                    // make sure the button is visible after setting its position\n                    _this._updateButtonVisibility();\n                }\n            }\n        };\n        this._cachedAngularSensibility = { angularSensibilityX: null, angularSensibilityY: null, angularSensibility: null };\n        this._beforeRender = function () {\n            if (_this._leftController && _this._leftController._activePointer) {\n                _this._castRayAndSelectObject(_this._leftController);\n            }\n            if (_this._rightController && _this._rightController._activePointer) {\n                _this._castRayAndSelectObject(_this._rightController);\n            }\n            if (_this._noControllerIsActive && (_this._scene.getEngine().isPointerLock || _this.enableGazeEvenWhenNoPointerLock)) {\n                _this._castRayAndSelectObject(_this._cameraGazer);\n            }\n            else {\n                _this._cameraGazer._gazeTracker.isVisible = false;\n            }\n        };\n        this._onNewGamepadConnected = function (gamepad) {\n            if (gamepad.type !== Gamepad.POSE_ENABLED) {\n                if (gamepad.leftStick) {\n                    gamepad.onleftstickchanged(function (stickValues) {\n                        if (_this._teleportationInitialized && _this.teleportationEnabled) {\n                            // Listening to classic/xbox gamepad only if no VR controller is active\n                            if ((!_this._leftController && !_this._rightController) ||\n                                (_this._leftController && !_this._leftController._activePointer && _this._rightController && !_this._rightController._activePointer)) {\n                                _this._checkTeleportWithRay(stickValues, _this._cameraGazer);\n                                _this._checkTeleportBackwards(stickValues, _this._cameraGazer);\n                            }\n                        }\n                    });\n                }\n                if (gamepad.rightStick) {\n                    gamepad.onrightstickchanged(function (stickValues) {\n                        if (_this._teleportationInitialized) {\n                            _this._checkRotate(stickValues, _this._cameraGazer);\n                        }\n                    });\n                }\n                if (gamepad.type === Gamepad.XBOX) {\n                    gamepad.onbuttondown(function (buttonPressed) {\n                        if (_this._interactionsEnabled && buttonPressed === Xbox360Button.A) {\n                            _this._cameraGazer._selectionPointerDown();\n                        }\n                    });\n                    gamepad.onbuttonup(function (buttonPressed) {\n                        if (_this._interactionsEnabled && buttonPressed === Xbox360Button.A) {\n                            _this._cameraGazer._selectionPointerUp();\n                        }\n                    });\n                }\n            }\n            else {\n                var webVRController = gamepad;\n                var controller = new VRExperienceHelperControllerGazer(webVRController, _this._scene, _this._cameraGazer._gazeTracker);\n                if (webVRController.hand === \"right\" || (_this._leftController && _this._leftController.webVRController != webVRController)) {\n                    _this._rightController = controller;\n                }\n                else {\n                    _this._leftController = controller;\n                }\n                _this._tryEnableInteractionOnController(controller);\n            }\n        };\n        // This only succeeds if the controller's mesh exists for the controller so this must be called whenever new controller is connected or when mesh is loaded\n        this._tryEnableInteractionOnController = function (controller) {\n            if (_this._interactionsRequested && !controller._interactionsEnabled) {\n                _this._enableInteractionOnController(controller);\n            }\n            if (_this._teleportationRequested && !controller._teleportationEnabled) {\n                _this._enableTeleportationOnController(controller);\n            }\n        };\n        this._onNewGamepadDisconnected = function (gamepad) {\n            if (gamepad instanceof WebVRController) {\n                if (gamepad.hand === \"left\" && _this._leftController != null) {\n                    _this._leftController.dispose();\n                    _this._leftController = null;\n                }\n                if (gamepad.hand === \"right\" && _this._rightController != null) {\n                    _this._rightController.dispose();\n                    _this._rightController = null;\n                }\n            }\n        };\n        this._workingVector = Vector3.Zero();\n        this._workingQuaternion = Quaternion.Identity();\n        this._workingMatrix = Matrix.Identity();\n        Logger.Warn(\"WebVR is deprecated. Please avoid using this experience helper and use the WebXR experience helper instead\");\n        this._scene = scene;\n        this._inputElement = scene.getEngine().getInputElement();\n        // check for VR support:\n        var vrSupported = \"getVRDisplays\" in navigator;\n        // no VR support? force XR but only when it is not set because web vr can work without the getVRDisplays\n        if (!vrSupported && webVROptions.useXR === undefined) {\n            webVROptions.useXR = true;\n        }\n        // Parse options\n        if (webVROptions.createFallbackVRDeviceOrientationFreeCamera === undefined) {\n            webVROptions.createFallbackVRDeviceOrientationFreeCamera = true;\n        }\n        if (webVROptions.createDeviceOrientationCamera === undefined) {\n            webVROptions.createDeviceOrientationCamera = true;\n        }\n        if (webVROptions.laserToggle === undefined) {\n            webVROptions.laserToggle = true;\n        }\n        if (webVROptions.defaultHeight === undefined) {\n            webVROptions.defaultHeight = 1.7;\n        }\n        if (webVROptions.useCustomVRButton) {\n            this._useCustomVRButton = true;\n            if (webVROptions.customVRButton) {\n                this._btnVR = webVROptions.customVRButton;\n            }\n        }\n        if (webVROptions.rayLength) {\n            this._rayLength = webVROptions.rayLength;\n        }\n        this._defaultHeight = webVROptions.defaultHeight;\n        if (webVROptions.positionScale) {\n            this._rayLength *= webVROptions.positionScale;\n            this._defaultHeight *= webVROptions.positionScale;\n        }\n        this._hasEnteredVR = false;\n        // Set position\n        if (this._scene.activeCamera) {\n            this._position = this._scene.activeCamera.position.clone();\n        }\n        else {\n            this._position = new Vector3(0, this._defaultHeight, 0);\n        }\n        // Set non-vr camera\n        if (webVROptions.createDeviceOrientationCamera || !this._scene.activeCamera) {\n            this._deviceOrientationCamera = new DeviceOrientationCamera(\"deviceOrientationVRHelper\", this._position.clone(), scene);\n            // Copy data from existing camera\n            if (this._scene.activeCamera) {\n                this._deviceOrientationCamera.minZ = this._scene.activeCamera.minZ;\n                this._deviceOrientationCamera.maxZ = this._scene.activeCamera.maxZ;\n                // Set rotation from previous camera\n                if (this._scene.activeCamera instanceof TargetCamera && this._scene.activeCamera.rotation) {\n                    var targetCamera = this._scene.activeCamera;\n                    if (targetCamera.rotationQuaternion) {\n                        this._deviceOrientationCamera.rotationQuaternion.copyFrom(targetCamera.rotationQuaternion);\n                    }\n                    else {\n                        this._deviceOrientationCamera.rotationQuaternion.copyFrom(Quaternion.RotationYawPitchRoll(targetCamera.rotation.y, targetCamera.rotation.x, targetCamera.rotation.z));\n                    }\n                    this._deviceOrientationCamera.rotation = targetCamera.rotation.clone();\n                }\n            }\n            this._scene.activeCamera = this._deviceOrientationCamera;\n            if (this._inputElement) {\n                this._scene.activeCamera.attachControl();\n            }\n        }\n        else {\n            this._existingCamera = this._scene.activeCamera;\n        }\n        if (this.webVROptions.useXR && navigator.xr) {\n            // force-check XR session support\n            WebXRSessionManager.IsSessionSupportedAsync(\"immersive-vr\").then(function (supported) {\n                if (supported) {\n                    Logger.Log(\"Using WebXR. It is recommended to use the WebXRDefaultExperience directly\");\n                    // it is possible to use XR, let's do it!\n                    scene\n                        .createDefaultXRExperienceAsync({\n                        floorMeshes: webVROptions.floorMeshes || [],\n                    })\n                        .then(function (xr) {\n                        _this.xr = xr;\n                        // connect observables\n                        _this.xrTestDone = true;\n                        _this._cameraGazer = new VRExperienceHelperCameraGazer(function () {\n                            return _this.xr.baseExperience.camera;\n                        }, scene);\n                        _this.xr.baseExperience.onStateChangedObservable.add(function (state) {\n                            // support for entering / exiting\n                            switch (state) {\n                                case WebXRState.ENTERING_XR:\n                                    _this.onEnteringVRObservable.notifyObservers(_this);\n                                    if (!_this._interactionsEnabled) {\n                                        _this.xr.pointerSelection.detach();\n                                    }\n                                    _this.xr.pointerSelection.displayLaserPointer = _this._displayLaserPointer;\n                                    break;\n                                case WebXRState.EXITING_XR:\n                                    _this.onExitingVRObservable.notifyObservers(_this);\n                                    // resize to update width and height when exiting vr exits fullscreen\n                                    _this._scene.getEngine().resize();\n                                    break;\n                                case WebXRState.IN_XR:\n                                    _this._hasEnteredVR = true;\n                                    break;\n                                case WebXRState.NOT_IN_XR:\n                                    _this._hasEnteredVR = false;\n                                    break;\n                            }\n                        });\n                    });\n                }\n                else {\n                    // XR not supported (thou exists), continue WebVR init\n                    _this._completeVRInit(scene, webVROptions);\n                }\n            });\n        }\n        else {\n            // no XR, continue init synchronous\n            this._completeVRInit(scene, webVROptions);\n        }\n    }\n    Object.defineProperty(VRExperienceHelper.prototype, \"onEnteringVR\", {\n        /** Return this.onEnteringVRObservable\n         * Note: This one is for backward compatibility. Please use onEnteringVRObservable directly\n         */\n        get: function () {\n            return this.onEnteringVRObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRExperienceHelper.prototype, \"onExitingVR\", {\n        /** Return this.onExitingVRObservable\n         * Note: This one is for backward compatibility. Please use onExitingVRObservable directly\n         */\n        get: function () {\n            return this.onExitingVRObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRExperienceHelper.prototype, \"onControllerMeshLoaded\", {\n        /** Return this.onControllerMeshLoadedObservable\n         * Note: This one is for backward compatibility. Please use onControllerMeshLoadedObservable directly\n         */\n        get: function () {\n            return this.onControllerMeshLoadedObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRExperienceHelper.prototype, \"teleportationTarget\", {\n        /**\n         * The mesh used to display where the user is going to teleport.\n         */\n        get: function () {\n            return this._teleportationTarget;\n        },\n        /**\n         * Sets the mesh to be used to display where the user is going to teleport.\n         */\n        set: function (value) {\n            if (value) {\n                value.name = \"teleportationTarget\";\n                this._isDefaultTeleportationTarget = false;\n                this._teleportationTarget = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRExperienceHelper.prototype, \"gazeTrackerMesh\", {\n        /**\n         * The mesh used to display where the user is selecting, this mesh will be cloned and set as the gazeTracker for the left and right controller\n         * when set bakeCurrentTransformIntoVertices will be called on the mesh.\n         * See https://doc.babylonjs.com/resources/baking_transformations\n         */\n        get: function () {\n            return this._cameraGazer._gazeTracker;\n        },\n        set: function (value) {\n            if (value) {\n                // Dispose of existing meshes\n                if (this._cameraGazer._gazeTracker) {\n                    this._cameraGazer._gazeTracker.dispose();\n                }\n                if (this._leftController && this._leftController._gazeTracker) {\n                    this._leftController._gazeTracker.dispose();\n                }\n                if (this._rightController && this._rightController._gazeTracker) {\n                    this._rightController._gazeTracker.dispose();\n                }\n                // Set and create gaze trackers on head and controllers\n                this._cameraGazer._gazeTracker = value;\n                this._cameraGazer._gazeTracker.bakeCurrentTransformIntoVertices();\n                this._cameraGazer._gazeTracker.isPickable = false;\n                this._cameraGazer._gazeTracker.isVisible = false;\n                this._cameraGazer._gazeTracker.name = \"gazeTracker\";\n                if (this._leftController) {\n                    this._leftController._gazeTracker = this._cameraGazer._gazeTracker.clone(\"gazeTracker\");\n                }\n                if (this._rightController) {\n                    this._rightController._gazeTracker = this._cameraGazer._gazeTracker.clone(\"gazeTracker\");\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRExperienceHelper.prototype, \"leftControllerGazeTrackerMesh\", {\n        /**\n         * The gaze tracking mesh corresponding to the left controller\n         */\n        get: function () {\n            if (this._leftController) {\n                return this._leftController._gazeTracker;\n            }\n            return null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRExperienceHelper.prototype, \"rightControllerGazeTrackerMesh\", {\n        /**\n         * The gaze tracking mesh corresponding to the right controller\n         */\n        get: function () {\n            if (this._rightController) {\n                return this._rightController._gazeTracker;\n            }\n            return null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRExperienceHelper.prototype, \"displayGaze\", {\n        /**\n         * If the ray of the gaze should be displayed.\n         */\n        get: function () {\n            return this._displayGaze;\n        },\n        /**\n         * Sets if the ray of the gaze should be displayed.\n         */\n        set: function (value) {\n            this._displayGaze = value;\n            if (!value) {\n                this._cameraGazer._gazeTracker.isVisible = false;\n                if (this._leftController) {\n                    this._leftController._gazeTracker.isVisible = false;\n                }\n                if (this._rightController) {\n                    this._rightController._gazeTracker.isVisible = false;\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRExperienceHelper.prototype, \"displayLaserPointer\", {\n        /**\n         * If the ray of the LaserPointer should be displayed.\n         */\n        get: function () {\n            return this._displayLaserPointer;\n        },\n        /**\n         * Sets if the ray of the LaserPointer should be displayed.\n         */\n        set: function (value) {\n            this._displayLaserPointer = value;\n            if (!value) {\n                if (this._rightController) {\n                    this._rightController._deactivatePointer();\n                    this._rightController._gazeTracker.isVisible = false;\n                }\n                if (this._leftController) {\n                    this._leftController._deactivatePointer();\n                    this._leftController._gazeTracker.isVisible = false;\n                }\n            }\n            else {\n                if (this._rightController) {\n                    this._rightController._activatePointer();\n                }\n                if (this._leftController) {\n                    this._leftController._activatePointer();\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRExperienceHelper.prototype, \"deviceOrientationCamera\", {\n        /**\n         * The deviceOrientationCamera used as the camera when not in VR.\n         */\n        get: function () {\n            return this._deviceOrientationCamera;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRExperienceHelper.prototype, \"currentVRCamera\", {\n        /**\n         * Based on the current WebVR support, returns the current VR camera used.\n         */\n        get: function () {\n            if (this._webVRready) {\n                return this._webVRCamera;\n            }\n            else {\n                return this._scene.activeCamera;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRExperienceHelper.prototype, \"webVRCamera\", {\n        /**\n         * The webVRCamera which is used when in VR.\n         */\n        get: function () {\n            return this._webVRCamera;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRExperienceHelper.prototype, \"vrDeviceOrientationCamera\", {\n        /**\n         * The deviceOrientationCamera that is used as a fallback when vr device is not connected.\n         */\n        get: function () {\n            return this._vrDeviceOrientationCamera;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRExperienceHelper.prototype, \"vrButton\", {\n        /**\n         * The html button that is used to trigger entering into VR.\n         */\n        get: function () {\n            return this._btnVR;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VRExperienceHelper.prototype, \"_teleportationRequestInitiated\", {\n        get: function () {\n            var result = this._cameraGazer._teleportationRequestInitiated ||\n                (this._leftController !== null && this._leftController._teleportationRequestInitiated) ||\n                (this._rightController !== null && this._rightController._teleportationRequestInitiated);\n            return result;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    VRExperienceHelper.prototype._completeVRInit = function (scene, webVROptions) {\n        var _this = this;\n        this.xrTestDone = true;\n        // Create VR cameras\n        if (webVROptions.createFallbackVRDeviceOrientationFreeCamera) {\n            if (webVROptions.useMultiview) {\n                if (!webVROptions.vrDeviceOrientationCameraMetrics) {\n                    webVROptions.vrDeviceOrientationCameraMetrics = VRCameraMetrics.GetDefault();\n                }\n                webVROptions.vrDeviceOrientationCameraMetrics.multiviewEnabled = true;\n            }\n            this._vrDeviceOrientationCamera = new VRDeviceOrientationFreeCamera(\"VRDeviceOrientationVRHelper\", this._position, this._scene, true, webVROptions.vrDeviceOrientationCameraMetrics);\n            this._vrDeviceOrientationCamera.angularSensibility = Number.MAX_VALUE;\n        }\n        this._webVRCamera = new WebVRFreeCamera(\"WebVRHelper\", this._position, this._scene, webVROptions);\n        this._webVRCamera.useStandingMatrix();\n        this._cameraGazer = new VRExperienceHelperCameraGazer(function () {\n            return _this.currentVRCamera;\n        }, scene);\n        // Create default button\n        if (!this._useCustomVRButton) {\n            this._btnVR = document.createElement(\"BUTTON\");\n            this._btnVR.className = \"babylonVRicon\";\n            this._btnVR.id = \"babylonVRiconbtn\";\n            this._btnVR.title = \"Click to switch to VR\";\n            var url = !window.SVGSVGElement\n                ? \"https://cdn.babylonjs.com/Assets/vrButton.png\"\n                : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%222048%22%20height%3D%221152%22%20viewBox%3D%220%200%202048%201152%22%20version%3D%221.1%22%3E%3Cpath%20transform%3D%22rotate%28180%201024%2C576.0000000000001%29%22%20d%3D%22m1109%2C896q17%2C0%2030%2C-12t13%2C-30t-12.5%2C-30.5t-30.5%2C-12.5l-170%2C0q-18%2C0%20-30.5%2C12.5t-12.5%2C30.5t13%2C30t30%2C12l170%2C0zm-85%2C256q59%2C0%20132.5%2C-1.5t154.5%2C-5.5t164.5%2C-11.5t163%2C-20t150%2C-30t124.5%2C-41.5q23%2C-11%2042%2C-24t38%2C-30q27%2C-25%2041%2C-61.5t14%2C-72.5l0%2C-257q0%2C-123%20-47%2C-232t-128%2C-190t-190%2C-128t-232%2C-47l-81%2C0q-37%2C0%20-68.5%2C14t-60.5%2C34.5t-55.5%2C45t-53%2C45t-53%2C34.5t-55.5%2C14t-55.5%2C-14t-53%2C-34.5t-53%2C-45t-55.5%2C-45t-60.5%2C-34.5t-68.5%2C-14l-81%2C0q-123%2C0%20-232%2C47t-190%2C128t-128%2C190t-47%2C232l0%2C257q0%2C68%2038%2C115t97%2C73q54%2C24%20124.5%2C41.5t150%2C30t163%2C20t164.5%2C11.5t154.5%2C5.5t132.5%2C1.5zm939%2C-298q0%2C39%20-24.5%2C67t-58.5%2C42q-54%2C23%20-122%2C39.5t-143.5%2C28t-155.5%2C19t-157%2C11t-148.5%2C5t-129.5%2C1.5q-59%2C0%20-130%2C-1.5t-148%2C-5t-157%2C-11t-155.5%2C-19t-143.5%2C-28t-122%2C-39.5q-34%2C-14%20-58.5%2C-42t-24.5%2C-67l0%2C-257q0%2C-106%2040.5%2C-199t110%2C-162.5t162.5%2C-109.5t199%2C-40l81%2C0q27%2C0%2052%2C14t50%2C34.5t51%2C44.5t55.5%2C44.5t63.5%2C34.5t74%2C14t74%2C-14t63.5%2C-34.5t55.5%2C-44.5t51%2C-44.5t50%2C-34.5t52%2C-14l14%2C0q37%2C0%2070%2C0.5t64.5%2C4.5t63.5%2C12t68%2C23q71%2C30%20128.5%2C78.5t98.5%2C110t63.5%2C133.5t22.5%2C149l0%2C257z%22%20fill%3D%22white%22%20/%3E%3C/svg%3E%0A\";\n            var css = \".babylonVRicon { position: absolute; right: 20px; height: 50px; width: 80px; background-color: rgba(51,51,51,0.7); background-image: url(\" +\n                url +\n                \"); background-size: 80%; background-repeat:no-repeat; background-position: center; border: none; outline: none; transition: transform 0.125s ease-out } .babylonVRicon:hover { transform: scale(1.05) } .babylonVRicon:active {background-color: rgba(51,51,51,1) } .babylonVRicon:focus {background-color: rgba(51,51,51,1) }\";\n            css += \".babylonVRicon.vrdisplaypresenting { display: none; }\";\n            // TODO: Add user feedback so that they know what state the VRDisplay is in (disconnected, connected, entering-VR)\n            // css += \".babylonVRicon.vrdisplaysupported { }\";\n            // css += \".babylonVRicon.vrdisplayready { }\";\n            // css += \".babylonVRicon.vrdisplayrequesting { }\";\n            var style = document.createElement(\"style\");\n            style.appendChild(document.createTextNode(css));\n            document.getElementsByTagName(\"head\")[0].appendChild(style);\n            this._moveButtonToBottomRight();\n        }\n        // VR button click event\n        if (this._btnVR) {\n            this._btnVR.addEventListener(\"click\", function () {\n                if (!_this.isInVRMode) {\n                    _this.enterVR();\n                }\n                else {\n                    _this._scene.getEngine().disableVR();\n                }\n            });\n        }\n        // Window events\n        var hostWindow = this._scene.getEngine().getHostWindow();\n        if (!hostWindow) {\n            return;\n        }\n        hostWindow.addEventListener(\"resize\", this._onResize);\n        document.addEventListener(\"fullscreenchange\", this._onFullscreenChange, false);\n        document.addEventListener(\"mozfullscreenchange\", this._onFullscreenChange, false);\n        document.addEventListener(\"webkitfullscreenchange\", this._onFullscreenChange, false);\n        document.addEventListener(\"msfullscreenchange\", this._onFullscreenChange, false);\n        document.onmsfullscreenchange = this._onFullscreenChange;\n        // Display vr button when headset is connected\n        if (webVROptions.createFallbackVRDeviceOrientationFreeCamera) {\n            this._displayVRButton();\n        }\n        else {\n            this._scene.getEngine().onVRDisplayChangedObservable.add(function (e) {\n                if (e.vrDisplay) {\n                    _this._displayVRButton();\n                }\n            });\n        }\n        // Exiting VR mode using 'ESC' key on desktop\n        this._onKeyDown = function (event) {\n            if (event.keyCode === 27 && _this.isInVRMode) {\n                _this.exitVR();\n            }\n        };\n        document.addEventListener(\"keydown\", this._onKeyDown);\n        // Exiting VR mode double tapping the touch screen\n        this._scene.onPrePointerObservable.add(function () {\n            if (_this._hasEnteredVR && _this.exitVROnDoubleTap) {\n                _this.exitVR();\n                if (_this._fullscreenVRpresenting) {\n                    _this._scene.getEngine().exitFullscreen();\n                }\n            }\n        }, PointerEventTypes.POINTERDOUBLETAP, false);\n        // Listen for WebVR display changes\n        this._onVRDisplayChangedBind = function (eventArgs) { return _this._onVRDisplayChanged(eventArgs); };\n        this._onVrDisplayPresentChangeBind = function () { return _this._onVrDisplayPresentChange(); };\n        this._onVRRequestPresentStart = function () {\n            _this._webVRrequesting = true;\n            _this._updateButtonVisibility();\n        };\n        this._onVRRequestPresentComplete = function () {\n            _this._webVRrequesting = false;\n            _this._updateButtonVisibility();\n        };\n        scene.getEngine().onVRDisplayChangedObservable.add(this._onVRDisplayChangedBind);\n        scene.getEngine().onVRRequestPresentStart.add(this._onVRRequestPresentStart);\n        scene.getEngine().onVRRequestPresentComplete.add(this._onVRRequestPresentComplete);\n        hostWindow.addEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChangeBind);\n        scene.onDisposeObservable.add(function () {\n            _this.dispose();\n        });\n        // Gamepad connection events\n        this._webVRCamera.onControllerMeshLoadedObservable.add(function (webVRController) { return _this._onDefaultMeshLoaded(webVRController); });\n        this._scene.gamepadManager.onGamepadConnectedObservable.add(this._onNewGamepadConnected);\n        this._scene.gamepadManager.onGamepadDisconnectedObservable.add(this._onNewGamepadDisconnected);\n        this._updateButtonVisibility();\n        //create easing functions\n        this._circleEase = new CircleEase();\n        this._circleEase.setEasingMode(EasingFunction.EASINGMODE_EASEINOUT);\n        this._teleportationEasing = this._circleEase;\n        // Allow clicking in the vrDeviceOrientationCamera\n        scene.onPointerObservable.add(function (e) {\n            if (_this._interactionsEnabled) {\n                if (scene.activeCamera === _this.vrDeviceOrientationCamera && e.event.pointerType === \"mouse\") {\n                    if (e.type === PointerEventTypes.POINTERDOWN) {\n                        _this._cameraGazer._selectionPointerDown();\n                    }\n                    else if (e.type === PointerEventTypes.POINTERUP) {\n                        _this._cameraGazer._selectionPointerUp();\n                    }\n                }\n            }\n        });\n        if (this.webVROptions.floorMeshes) {\n            this.enableTeleportation({ floorMeshes: this.webVROptions.floorMeshes });\n        }\n    };\n    // Raised when one of the controller has loaded successfully its associated default mesh\n    VRExperienceHelper.prototype._onDefaultMeshLoaded = function (webVRController) {\n        if (this._leftController && this._leftController.webVRController == webVRController) {\n            if (webVRController.mesh) {\n                this._leftController._setLaserPointerParent(webVRController.mesh);\n            }\n        }\n        if (this._rightController && this._rightController.webVRController == webVRController) {\n            if (webVRController.mesh) {\n                this._rightController._setLaserPointerParent(webVRController.mesh);\n            }\n        }\n        try {\n            this.onControllerMeshLoadedObservable.notifyObservers(webVRController);\n        }\n        catch (err) {\n            Logger.Warn(\"Error in your custom logic onControllerMeshLoaded: \" + err);\n        }\n    };\n    Object.defineProperty(VRExperienceHelper.prototype, \"isInVRMode\", {\n        /**\n         * Gets a value indicating if we are currently in VR mode.\n         */\n        get: function () {\n            return (this.xr && this.webVROptions.useXR && this.xr.baseExperience.state === WebXRState.IN_XR) || this._webVRpresenting || this._fullscreenVRpresenting;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    VRExperienceHelper.prototype._onVrDisplayPresentChange = function () {\n        var vrDisplay = this._scene.getEngine().getVRDevice();\n        if (vrDisplay) {\n            var wasPresenting = this._webVRpresenting;\n            this._webVRpresenting = vrDisplay.isPresenting;\n            if (wasPresenting && !this._webVRpresenting) {\n                this.exitVR();\n            }\n        }\n        else {\n            Logger.Warn(\"Detected VRDisplayPresentChange on an unknown VRDisplay. Did you can enterVR on the vrExperienceHelper?\");\n        }\n        this._updateButtonVisibility();\n    };\n    VRExperienceHelper.prototype._onVRDisplayChanged = function (eventArgs) {\n        this._webVRsupported = eventArgs.vrSupported;\n        this._webVRready = !!eventArgs.vrDisplay;\n        this._webVRpresenting = eventArgs.vrDisplay && eventArgs.vrDisplay.isPresenting;\n        this._updateButtonVisibility();\n    };\n    VRExperienceHelper.prototype._moveButtonToBottomRight = function () {\n        if (this._inputElement && !this._useCustomVRButton && this._btnVR) {\n            var rect = this._inputElement.getBoundingClientRect();\n            this._btnVR.style.top = rect.top + rect.height - 70 + \"px\";\n            this._btnVR.style.left = rect.left + rect.width - 100 + \"px\";\n        }\n    };\n    VRExperienceHelper.prototype._displayVRButton = function () {\n        if (!this._useCustomVRButton && !this._btnVRDisplayed && this._btnVR) {\n            document.body.appendChild(this._btnVR);\n            this._btnVRDisplayed = true;\n        }\n    };\n    VRExperienceHelper.prototype._updateButtonVisibility = function () {\n        if (!this._btnVR || this._useCustomVRButton) {\n            return;\n        }\n        this._btnVR.className = \"babylonVRicon\";\n        if (this.isInVRMode) {\n            this._btnVR.className += \" vrdisplaypresenting\";\n        }\n        else {\n            if (this._webVRready) {\n                this._btnVR.className += \" vrdisplayready\";\n            }\n            if (this._webVRsupported) {\n                this._btnVR.className += \" vrdisplaysupported\";\n            }\n            if (this._webVRrequesting) {\n                this._btnVR.className += \" vrdisplayrequesting\";\n            }\n        }\n    };\n    /**\n     * Attempt to enter VR. If a headset is connected and ready, will request present on that.\n     * Otherwise, will use the fullscreen API.\n     */\n    VRExperienceHelper.prototype.enterVR = function () {\n        var _this = this;\n        if (this.xr) {\n            this.xr.baseExperience.enterXRAsync(\"immersive-vr\", \"local-floor\", this.xr.renderTarget);\n            return;\n        }\n        if (this.onEnteringVRObservable) {\n            try {\n                this.onEnteringVRObservable.notifyObservers(this);\n            }\n            catch (err) {\n                Logger.Warn(\"Error in your custom logic onEnteringVR: \" + err);\n            }\n        }\n        if (this._scene.activeCamera) {\n            this._position = this._scene.activeCamera.position.clone();\n            if (this.vrDeviceOrientationCamera) {\n                this.vrDeviceOrientationCamera.rotation = Quaternion.FromRotationMatrix(this._scene.activeCamera.getWorldMatrix().getRotationMatrix()).toEulerAngles();\n                this.vrDeviceOrientationCamera.angularSensibility = 2000;\n            }\n            if (this.webVRCamera) {\n                var currentYRotation = this.webVRCamera.deviceRotationQuaternion.toEulerAngles().y;\n                var desiredYRotation = Quaternion.FromRotationMatrix(this._scene.activeCamera.getWorldMatrix().getRotationMatrix()).toEulerAngles().y;\n                var delta = desiredYRotation - currentYRotation;\n                var currentGlobalRotation = this.webVRCamera.rotationQuaternion.toEulerAngles().y;\n                this.webVRCamera.rotationQuaternion = Quaternion.FromEulerAngles(0, currentGlobalRotation + delta, 0);\n            }\n            // make sure that we return to the last active camera\n            this._existingCamera = this._scene.activeCamera;\n            // Remove and cache angular sensability to avoid camera rotation when in VR\n            if (this._existingCamera.angularSensibilityX) {\n                this._cachedAngularSensibility.angularSensibilityX = this._existingCamera.angularSensibilityX;\n                this._existingCamera.angularSensibilityX = Number.MAX_VALUE;\n            }\n            if (this._existingCamera.angularSensibilityY) {\n                this._cachedAngularSensibility.angularSensibilityY = this._existingCamera.angularSensibilityY;\n                this._existingCamera.angularSensibilityY = Number.MAX_VALUE;\n            }\n            if (this._existingCamera.angularSensibility) {\n                this._cachedAngularSensibility.angularSensibility = this._existingCamera.angularSensibility;\n                this._existingCamera.angularSensibility = Number.MAX_VALUE;\n            }\n        }\n        if (this._webVRrequesting) {\n            return;\n        }\n        // If WebVR is supported and a headset is connected\n        if (this._webVRready) {\n            if (!this._webVRpresenting) {\n                this._scene.getEngine().onVRRequestPresentComplete.addOnce(function (result) {\n                    _this.onAfterEnteringVRObservable.notifyObservers({ success: result });\n                });\n                this._webVRCamera.position = this._position;\n                this._scene.activeCamera = this._webVRCamera;\n            }\n        }\n        else if (this._vrDeviceOrientationCamera) {\n            this._vrDeviceOrientationCamera.position = this._position;\n            if (this._scene.activeCamera) {\n                this._vrDeviceOrientationCamera.minZ = this._scene.activeCamera.minZ;\n            }\n            this._scene.activeCamera = this._vrDeviceOrientationCamera;\n            this._scene.getEngine().enterFullscreen(this.requestPointerLockOnFullScreen);\n            this._updateButtonVisibility();\n            this._vrDeviceOrientationCamera.onViewMatrixChangedObservable.addOnce(function () {\n                _this.onAfterEnteringVRObservable.notifyObservers({ success: true });\n            });\n        }\n        if (this._scene.activeCamera && this._inputElement) {\n            this._scene.activeCamera.attachControl();\n        }\n        if (this._interactionsEnabled) {\n            this._scene.registerBeforeRender(this._beforeRender);\n        }\n        if (this._displayLaserPointer) {\n            [this._leftController, this._rightController].forEach(function (controller) {\n                if (controller) {\n                    controller._activatePointer();\n                }\n            });\n        }\n        this._hasEnteredVR = true;\n    };\n    /**\n     * Attempt to exit VR, or fullscreen.\n     */\n    VRExperienceHelper.prototype.exitVR = function () {\n        if (this.xr) {\n            this.xr.baseExperience.exitXRAsync();\n            return;\n        }\n        if (this._hasEnteredVR) {\n            if (this.onExitingVRObservable) {\n                try {\n                    this.onExitingVRObservable.notifyObservers(this);\n                }\n                catch (err) {\n                    Logger.Warn(\"Error in your custom logic onExitingVR: \" + err);\n                }\n            }\n            if (this._webVRpresenting) {\n                this._scene.getEngine().disableVR();\n            }\n            if (this._scene.activeCamera) {\n                this._position = this._scene.activeCamera.position.clone();\n            }\n            if (this.vrDeviceOrientationCamera) {\n                this.vrDeviceOrientationCamera.angularSensibility = Number.MAX_VALUE;\n            }\n            if (this._deviceOrientationCamera) {\n                this._deviceOrientationCamera.position = this._position;\n                this._scene.activeCamera = this._deviceOrientationCamera;\n                // Restore angular sensibility\n                if (this._cachedAngularSensibility.angularSensibilityX) {\n                    this._deviceOrientationCamera.angularSensibilityX = this._cachedAngularSensibility.angularSensibilityX;\n                    this._cachedAngularSensibility.angularSensibilityX = null;\n                }\n                if (this._cachedAngularSensibility.angularSensibilityY) {\n                    this._deviceOrientationCamera.angularSensibilityY = this._cachedAngularSensibility.angularSensibilityY;\n                    this._cachedAngularSensibility.angularSensibilityY = null;\n                }\n                if (this._cachedAngularSensibility.angularSensibility) {\n                    this._deviceOrientationCamera.angularSensibility = this._cachedAngularSensibility.angularSensibility;\n                    this._cachedAngularSensibility.angularSensibility = null;\n                }\n            }\n            else if (this._existingCamera) {\n                this._existingCamera.position = this._position;\n                this._scene.activeCamera = this._existingCamera;\n                if (this._inputElement) {\n                    this._scene.activeCamera.attachControl();\n                }\n                // Restore angular sensibility\n                if (this._cachedAngularSensibility.angularSensibilityX) {\n                    this._existingCamera.angularSensibilityX = this._cachedAngularSensibility.angularSensibilityX;\n                    this._cachedAngularSensibility.angularSensibilityX = null;\n                }\n                if (this._cachedAngularSensibility.angularSensibilityY) {\n                    this._existingCamera.angularSensibilityY = this._cachedAngularSensibility.angularSensibilityY;\n                    this._cachedAngularSensibility.angularSensibilityY = null;\n                }\n                if (this._cachedAngularSensibility.angularSensibility) {\n                    this._existingCamera.angularSensibility = this._cachedAngularSensibility.angularSensibility;\n                    this._cachedAngularSensibility.angularSensibility = null;\n                }\n            }\n            this._updateButtonVisibility();\n            if (this._interactionsEnabled) {\n                this._scene.unregisterBeforeRender(this._beforeRender);\n                this._cameraGazer._gazeTracker.isVisible = false;\n                if (this._leftController) {\n                    this._leftController._gazeTracker.isVisible = false;\n                }\n                if (this._rightController) {\n                    this._rightController._gazeTracker.isVisible = false;\n                }\n            }\n            // resize to update width and height when exiting vr exits fullscreen\n            this._scene.getEngine().resize();\n            [this._leftController, this._rightController].forEach(function (controller) {\n                if (controller) {\n                    controller._deactivatePointer();\n                }\n            });\n            this._hasEnteredVR = false;\n            // Update engine state to re enable non-vr camera input\n            var engine = this._scene.getEngine();\n            if (engine._onVrDisplayPresentChange) {\n                engine._onVrDisplayPresentChange();\n            }\n        }\n    };\n    Object.defineProperty(VRExperienceHelper.prototype, \"position\", {\n        /**\n         * The position of the vr experience helper.\n         */\n        get: function () {\n            return this._position;\n        },\n        /**\n         * Sets the position of the vr experience helper.\n         */\n        set: function (value) {\n            this._position = value;\n            if (this._scene.activeCamera) {\n                this._scene.activeCamera.position = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Enables controllers and user interactions such as selecting and object or clicking on an object.\n     */\n    VRExperienceHelper.prototype.enableInteractions = function () {\n        var _this = this;\n        if (!this._interactionsEnabled) {\n            this._interactionsRequested = true;\n            // in XR it is enabled by default, but just to make sure, re-attach\n            if (this.xr) {\n                if (this.xr.baseExperience.state === WebXRState.IN_XR) {\n                    this.xr.pointerSelection.attach();\n                }\n                return;\n            }\n            if (this._leftController) {\n                this._enableInteractionOnController(this._leftController);\n            }\n            if (this._rightController) {\n                this._enableInteractionOnController(this._rightController);\n            }\n            this.raySelectionPredicate = function (mesh) {\n                return mesh.isVisible && (mesh.isPickable || mesh.name === _this._floorMeshName);\n            };\n            this.meshSelectionPredicate = function () {\n                return true;\n            };\n            this._raySelectionPredicate = function (mesh) {\n                if (_this._isTeleportationFloor(mesh) ||\n                    (mesh.name.indexOf(\"gazeTracker\") === -1 && mesh.name.indexOf(\"teleportationTarget\") === -1 && mesh.name.indexOf(\"torusTeleportation\") === -1)) {\n                    return _this.raySelectionPredicate(mesh);\n                }\n                return false;\n            };\n            this._interactionsEnabled = true;\n        }\n    };\n    Object.defineProperty(VRExperienceHelper.prototype, \"_noControllerIsActive\", {\n        get: function () {\n            return !(this._leftController && this._leftController._activePointer) && !(this._rightController && this._rightController._activePointer);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    VRExperienceHelper.prototype._isTeleportationFloor = function (mesh) {\n        for (var i = 0; i < this._floorMeshesCollection.length; i++) {\n            if (this._floorMeshesCollection[i].id === mesh.id) {\n                return true;\n            }\n        }\n        if (this._floorMeshName && mesh.name === this._floorMeshName) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Adds a floor mesh to be used for teleportation.\n     * @param floorMesh the mesh to be used for teleportation.\n     */\n    VRExperienceHelper.prototype.addFloorMesh = function (floorMesh) {\n        if (!this._floorMeshesCollection) {\n            return;\n        }\n        if (this._floorMeshesCollection.indexOf(floorMesh) > -1) {\n            return;\n        }\n        this._floorMeshesCollection.push(floorMesh);\n    };\n    /**\n     * Removes a floor mesh from being used for teleportation.\n     * @param floorMesh the mesh to be removed.\n     */\n    VRExperienceHelper.prototype.removeFloorMesh = function (floorMesh) {\n        if (!this._floorMeshesCollection) {\n            return;\n        }\n        var meshIndex = this._floorMeshesCollection.indexOf(floorMesh);\n        if (meshIndex !== -1) {\n            this._floorMeshesCollection.splice(meshIndex, 1);\n        }\n    };\n    /**\n     * Enables interactions and teleportation using the VR controllers and gaze.\n     * @param vrTeleportationOptions options to modify teleportation behavior.\n     */\n    VRExperienceHelper.prototype.enableTeleportation = function (vrTeleportationOptions) {\n        var _this = this;\n        if (vrTeleportationOptions === void 0) { vrTeleportationOptions = {}; }\n        if (!this._teleportationInitialized) {\n            this._teleportationRequested = true;\n            this.enableInteractions();\n            if (this.webVROptions.useXR && (vrTeleportationOptions.floorMeshes || vrTeleportationOptions.floorMeshName)) {\n                var floorMeshes = vrTeleportationOptions.floorMeshes || [];\n                if (!floorMeshes.length) {\n                    var floorMesh = this._scene.getMeshByName(vrTeleportationOptions.floorMeshName);\n                    if (floorMesh) {\n                        floorMeshes.push(floorMesh);\n                    }\n                }\n                if (this.xr) {\n                    floorMeshes.forEach(function (mesh) {\n                        _this.xr.teleportation.addFloorMesh(mesh);\n                    });\n                    if (!this.xr.teleportation.attached) {\n                        this.xr.teleportation.attach();\n                    }\n                    return;\n                }\n                else if (!this.xrTestDone) {\n                    var waitForXr_1 = function () {\n                        if (_this.xrTestDone) {\n                            _this._scene.unregisterBeforeRender(waitForXr_1);\n                            if (_this.xr) {\n                                if (!_this.xr.teleportation.attached) {\n                                    _this.xr.teleportation.attach();\n                                }\n                            }\n                            else {\n                                _this.enableTeleportation(vrTeleportationOptions);\n                            }\n                        }\n                    };\n                    this._scene.registerBeforeRender(waitForXr_1);\n                    return;\n                }\n            }\n            if (vrTeleportationOptions.floorMeshName) {\n                this._floorMeshName = vrTeleportationOptions.floorMeshName;\n            }\n            if (vrTeleportationOptions.floorMeshes) {\n                this._floorMeshesCollection = vrTeleportationOptions.floorMeshes;\n            }\n            if (vrTeleportationOptions.teleportationMode) {\n                this._teleportationMode = vrTeleportationOptions.teleportationMode;\n            }\n            if (vrTeleportationOptions.teleportationTime && vrTeleportationOptions.teleportationTime > 0) {\n                this._teleportationTime = vrTeleportationOptions.teleportationTime;\n            }\n            if (vrTeleportationOptions.teleportationSpeed && vrTeleportationOptions.teleportationSpeed > 0) {\n                this._teleportationSpeed = vrTeleportationOptions.teleportationSpeed;\n            }\n            if (vrTeleportationOptions.easingFunction !== undefined) {\n                this._teleportationEasing = vrTeleportationOptions.easingFunction;\n            }\n            if (this._leftController != null) {\n                this._enableTeleportationOnController(this._leftController);\n            }\n            if (this._rightController != null) {\n                this._enableTeleportationOnController(this._rightController);\n            }\n            // Creates an image processing post process for the vignette not relying\n            // on the main scene configuration for image processing to reduce setup and spaces\n            // (gamma/linear) conflicts.\n            var imageProcessingConfiguration = new ImageProcessingConfiguration();\n            imageProcessingConfiguration.vignetteColor = new Color4(0, 0, 0, 0);\n            imageProcessingConfiguration.vignetteEnabled = true;\n            this._postProcessMove = new ImageProcessingPostProcess(\"postProcessMove\", 1.0, this._webVRCamera, undefined, undefined, undefined, undefined, imageProcessingConfiguration);\n            this._webVRCamera.detachPostProcess(this._postProcessMove);\n            this._teleportationInitialized = true;\n            if (this._isDefaultTeleportationTarget) {\n                this._createTeleportationCircles();\n                this._teleportationTarget.scaling.scaleInPlace(this._webVRCamera.deviceScaleFactor);\n            }\n        }\n    };\n    VRExperienceHelper.prototype._enableInteractionOnController = function (controller) {\n        var _this = this;\n        var controllerMesh = controller.webVRController.mesh;\n        if (controllerMesh) {\n            controller._interactionsEnabled = true;\n            if (this.isInVRMode && this._displayLaserPointer) {\n                controller._activatePointer();\n            }\n            if (this.webVROptions.laserToggle) {\n                controller.webVRController.onMainButtonStateChangedObservable.add(function (stateObject) {\n                    // Enabling / disabling laserPointer\n                    if (_this._displayLaserPointer && stateObject.value === 1) {\n                        if (controller._activePointer) {\n                            controller._deactivatePointer();\n                        }\n                        else {\n                            controller._activatePointer();\n                        }\n                        if (_this.displayGaze) {\n                            controller._gazeTracker.isVisible = controller._activePointer;\n                        }\n                    }\n                });\n            }\n            controller.webVRController.onTriggerStateChangedObservable.add(function (stateObject) {\n                var gazer = controller;\n                if (_this._noControllerIsActive) {\n                    gazer = _this._cameraGazer;\n                }\n                if (!gazer._pointerDownOnMeshAsked) {\n                    if (stateObject.value > _this._padSensibilityUp) {\n                        gazer._selectionPointerDown();\n                    }\n                }\n                else if (stateObject.value < _this._padSensibilityDown) {\n                    gazer._selectionPointerUp();\n                }\n            });\n        }\n    };\n    VRExperienceHelper.prototype._checkTeleportWithRay = function (stateObject, gazer) {\n        // Dont teleport if another gaze already requested teleportation\n        if (this._teleportationRequestInitiated && !gazer._teleportationRequestInitiated) {\n            return;\n        }\n        if (!gazer._teleportationRequestInitiated) {\n            if (stateObject.y < -this._padSensibilityUp && gazer._dpadPressed) {\n                gazer._activatePointer();\n                gazer._teleportationRequestInitiated = true;\n            }\n        }\n        else {\n            // Listening to the proper controller values changes to confirm teleportation\n            if (Math.sqrt(stateObject.y * stateObject.y + stateObject.x * stateObject.x) < this._padSensibilityDown) {\n                if (this._teleportActive) {\n                    this.teleportCamera(this._haloCenter);\n                }\n                gazer._teleportationRequestInitiated = false;\n            }\n        }\n    };\n    VRExperienceHelper.prototype._checkRotate = function (stateObject, gazer) {\n        // Only rotate when user is not currently selecting a teleportation location\n        if (gazer._teleportationRequestInitiated) {\n            return;\n        }\n        if (!gazer._rotationLeftAsked) {\n            if (stateObject.x < -this._padSensibilityUp && gazer._dpadPressed) {\n                gazer._rotationLeftAsked = true;\n                if (this._rotationAllowed) {\n                    this._rotateCamera(false);\n                }\n            }\n        }\n        else {\n            if (stateObject.x > -this._padSensibilityDown) {\n                gazer._rotationLeftAsked = false;\n            }\n        }\n        if (!gazer._rotationRightAsked) {\n            if (stateObject.x > this._padSensibilityUp && gazer._dpadPressed) {\n                gazer._rotationRightAsked = true;\n                if (this._rotationAllowed) {\n                    this._rotateCamera(true);\n                }\n            }\n        }\n        else {\n            if (stateObject.x < this._padSensibilityDown) {\n                gazer._rotationRightAsked = false;\n            }\n        }\n    };\n    VRExperienceHelper.prototype._checkTeleportBackwards = function (stateObject, gazer) {\n        // Only teleport backwards when user is not currently selecting a teleportation location\n        if (gazer._teleportationRequestInitiated) {\n            return;\n        }\n        // Teleport backwards\n        if (stateObject.y > this._padSensibilityUp && gazer._dpadPressed) {\n            if (!gazer._teleportationBackRequestInitiated) {\n                if (!this.currentVRCamera) {\n                    return;\n                }\n                // Get rotation and position of the current camera\n                var rotation = Quaternion.FromRotationMatrix(this.currentVRCamera.getWorldMatrix().getRotationMatrix());\n                var position = this.currentVRCamera.position;\n                // If the camera has device position, use that instead\n                if (this.currentVRCamera.devicePosition && this.currentVRCamera.deviceRotationQuaternion) {\n                    rotation = this.currentVRCamera.deviceRotationQuaternion;\n                    position = this.currentVRCamera.devicePosition;\n                }\n                // Get matrix with only the y rotation of the device rotation\n                rotation.toEulerAnglesToRef(this._workingVector);\n                this._workingVector.z = 0;\n                this._workingVector.x = 0;\n                Quaternion.RotationYawPitchRollToRef(this._workingVector.y, this._workingVector.x, this._workingVector.z, this._workingQuaternion);\n                this._workingQuaternion.toRotationMatrix(this._workingMatrix);\n                // Rotate backwards ray by device rotation to cast at the ground behind the user\n                Vector3.TransformCoordinatesToRef(this._teleportBackwardsVector, this._workingMatrix, this._workingVector);\n                // Teleport if ray hit the ground and is not to far away eg. backwards off a cliff\n                var ray = new Ray(position, this._workingVector);\n                var hit = this._scene.pickWithRay(ray, this._raySelectionPredicate);\n                if (hit && hit.pickedPoint && hit.pickedMesh && this._isTeleportationFloor(hit.pickedMesh) && hit.distance < 5) {\n                    this.teleportCamera(hit.pickedPoint);\n                }\n                gazer._teleportationBackRequestInitiated = true;\n            }\n        }\n        else {\n            gazer._teleportationBackRequestInitiated = false;\n        }\n    };\n    VRExperienceHelper.prototype._enableTeleportationOnController = function (controller) {\n        var _this = this;\n        var controllerMesh = controller.webVRController.mesh;\n        if (controllerMesh) {\n            if (!controller._interactionsEnabled) {\n                this._enableInteractionOnController(controller);\n            }\n            controller._interactionsEnabled = true;\n            controller._teleportationEnabled = true;\n            if (controller.webVRController.controllerType === PoseEnabledControllerType.VIVE) {\n                controller._dpadPressed = false;\n                controller.webVRController.onPadStateChangedObservable.add(function (stateObject) {\n                    controller._dpadPressed = stateObject.pressed;\n                    if (!controller._dpadPressed) {\n                        controller._rotationLeftAsked = false;\n                        controller._rotationRightAsked = false;\n                        controller._teleportationBackRequestInitiated = false;\n                    }\n                });\n            }\n            controller.webVRController.onPadValuesChangedObservable.add(function (stateObject) {\n                if (_this.teleportationEnabled) {\n                    _this._checkTeleportBackwards(stateObject, controller);\n                    _this._checkTeleportWithRay(stateObject, controller);\n                }\n                _this._checkRotate(stateObject, controller);\n            });\n        }\n    };\n    VRExperienceHelper.prototype._createTeleportationCircles = function () {\n        this._teleportationTarget = CreateGround(\"teleportationTarget\", { width: 2, height: 2, subdivisions: 2 }, this._scene);\n        this._teleportationTarget.isPickable = false;\n        var length = 512;\n        var dynamicTexture = new DynamicTexture(\"DynamicTexture\", length, this._scene, true);\n        dynamicTexture.hasAlpha = true;\n        var context = dynamicTexture.getContext();\n        var centerX = length / 2;\n        var centerY = length / 2;\n        var radius = 200;\n        context.beginPath();\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n        context.fillStyle = this._teleportationFillColor;\n        context.fill();\n        context.lineWidth = 10;\n        context.strokeStyle = this._teleportationBorderColor;\n        context.stroke();\n        context.closePath();\n        dynamicTexture.update();\n        var teleportationCircleMaterial = new StandardMaterial(\"TextPlaneMaterial\", this._scene);\n        teleportationCircleMaterial.diffuseTexture = dynamicTexture;\n        this._teleportationTarget.material = teleportationCircleMaterial;\n        var torus = CreateTorus(\"torusTeleportation\", {\n            diameter: 0.75,\n            thickness: 0.1,\n            tessellation: 25,\n            updatable: false,\n        }, this._scene);\n        torus.isPickable = false;\n        torus.parent = this._teleportationTarget;\n        var animationInnerCircle = new Animation(\"animationInnerCircle\", \"position.y\", 30, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\n        var keys = [];\n        keys.push({\n            frame: 0,\n            value: 0,\n        });\n        keys.push({\n            frame: 30,\n            value: 0.4,\n        });\n        keys.push({\n            frame: 60,\n            value: 0,\n        });\n        animationInnerCircle.setKeys(keys);\n        var easingFunction = new SineEase();\n        easingFunction.setEasingMode(EasingFunction.EASINGMODE_EASEINOUT);\n        animationInnerCircle.setEasingFunction(easingFunction);\n        torus.animations = [];\n        torus.animations.push(animationInnerCircle);\n        this._scene.beginAnimation(torus, 0, 60, true);\n        this._hideTeleportationTarget();\n    };\n    VRExperienceHelper.prototype._displayTeleportationTarget = function () {\n        this._teleportActive = true;\n        if (this._teleportationInitialized) {\n            this._teleportationTarget.isVisible = true;\n            if (this._isDefaultTeleportationTarget) {\n                this._teleportationTarget.getChildren()[0].isVisible = true;\n            }\n        }\n    };\n    VRExperienceHelper.prototype._hideTeleportationTarget = function () {\n        this._teleportActive = false;\n        if (this._teleportationInitialized) {\n            this._teleportationTarget.isVisible = false;\n            if (this._isDefaultTeleportationTarget) {\n                this._teleportationTarget.getChildren()[0].isVisible = false;\n            }\n        }\n    };\n    VRExperienceHelper.prototype._rotateCamera = function (right) {\n        var _this = this;\n        if (!(this.currentVRCamera instanceof FreeCamera)) {\n            return;\n        }\n        if (right) {\n            this._rotationAngle++;\n        }\n        else {\n            this._rotationAngle--;\n        }\n        this.currentVRCamera.animations = [];\n        var target = Quaternion.FromRotationMatrix(Matrix.RotationY((Math.PI / 4) * this._rotationAngle));\n        var animationRotation = new Animation(\"animationRotation\", \"rotationQuaternion\", 90, Animation.ANIMATIONTYPE_QUATERNION, Animation.ANIMATIONLOOPMODE_CONSTANT);\n        var animationRotationKeys = [];\n        animationRotationKeys.push({\n            frame: 0,\n            value: this.currentVRCamera.rotationQuaternion,\n        });\n        animationRotationKeys.push({\n            frame: 6,\n            value: target,\n        });\n        animationRotation.setKeys(animationRotationKeys);\n        animationRotation.setEasingFunction(this._circleEase);\n        this.currentVRCamera.animations.push(animationRotation);\n        this._postProcessMove.animations = [];\n        var animationPP = new Animation(\"animationPP\", \"vignetteWeight\", 90, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\n        var vignetteWeightKeys = [];\n        vignetteWeightKeys.push({\n            frame: 0,\n            value: 0,\n        });\n        vignetteWeightKeys.push({\n            frame: 3,\n            value: 4,\n        });\n        vignetteWeightKeys.push({\n            frame: 6,\n            value: 0,\n        });\n        animationPP.setKeys(vignetteWeightKeys);\n        animationPP.setEasingFunction(this._circleEase);\n        this._postProcessMove.animations.push(animationPP);\n        var animationPP2 = new Animation(\"animationPP2\", \"vignetteStretch\", 90, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\n        var vignetteStretchKeys = [];\n        vignetteStretchKeys.push({\n            frame: 0,\n            value: 0,\n        });\n        vignetteStretchKeys.push({\n            frame: 3,\n            value: 10,\n        });\n        vignetteStretchKeys.push({\n            frame: 6,\n            value: 0,\n        });\n        animationPP2.setKeys(vignetteStretchKeys);\n        animationPP2.setEasingFunction(this._circleEase);\n        this._postProcessMove.animations.push(animationPP2);\n        this._postProcessMove.imageProcessingConfiguration.vignetteWeight = 0;\n        this._postProcessMove.imageProcessingConfiguration.vignetteStretch = 0;\n        this._postProcessMove.samples = 4;\n        this._webVRCamera.attachPostProcess(this._postProcessMove);\n        this._scene.beginAnimation(this._postProcessMove, 0, 6, false, 1, function () {\n            _this._webVRCamera.detachPostProcess(_this._postProcessMove);\n        });\n        this._scene.beginAnimation(this.currentVRCamera, 0, 6, false, 1);\n    };\n    VRExperienceHelper.prototype._moveTeleportationSelectorTo = function (hit, gazer, ray) {\n        if (hit.pickedPoint) {\n            if (gazer._teleportationRequestInitiated) {\n                this._displayTeleportationTarget();\n                this._haloCenter.copyFrom(hit.pickedPoint);\n                this._teleportationTarget.position.copyFrom(hit.pickedPoint);\n            }\n            var pickNormal = this._convertNormalToDirectionOfRay(hit.getNormal(true, false), ray);\n            if (pickNormal) {\n                var axis1 = Vector3.Cross(Axis.Y, pickNormal);\n                var axis2 = Vector3.Cross(pickNormal, axis1);\n                Vector3.RotationFromAxisToRef(axis2, pickNormal, axis1, this._teleportationTarget.rotation);\n            }\n            this._teleportationTarget.position.y += 0.1;\n        }\n    };\n    /**\n     * Teleports the users feet to the desired location\n     * @param location The location where the user's feet should be placed\n     */\n    VRExperienceHelper.prototype.teleportCamera = function (location) {\n        var _this = this;\n        if (!(this.currentVRCamera instanceof FreeCamera)) {\n            return;\n        }\n        // Teleport the hmd to where the user is looking by moving the anchor to where they are looking minus the\n        // offset of the headset from the anchor.\n        if (this.webVRCamera.leftCamera) {\n            this._workingVector.copyFrom(this.webVRCamera.leftCamera.globalPosition);\n            this._workingVector.subtractInPlace(this.webVRCamera.position);\n            location.subtractToRef(this._workingVector, this._workingVector);\n        }\n        else {\n            this._workingVector.copyFrom(location);\n        }\n        // Add height to account for user's height offset\n        if (this.isInVRMode) {\n            this._workingVector.y += this.webVRCamera.deviceDistanceToRoomGround() * this._webVRCamera.deviceScaleFactor;\n        }\n        else {\n            this._workingVector.y += this._defaultHeight;\n        }\n        this.onBeforeCameraTeleport.notifyObservers(this._workingVector);\n        // Animations FPS\n        var FPS = 90;\n        var speedRatio, lastFrame;\n        if (this._teleportationMode == VRExperienceHelper.TELEPORTATIONMODE_CONSTANTSPEED) {\n            lastFrame = FPS;\n            var dist = Vector3.Distance(this.currentVRCamera.position, this._workingVector);\n            speedRatio = this._teleportationSpeed / dist;\n        }\n        else {\n            // teleportationMode is TELEPORTATIONMODE_CONSTANTTIME\n            lastFrame = Math.round((this._teleportationTime * FPS) / 1000);\n            speedRatio = 1;\n        }\n        // Create animation from the camera's position to the new location\n        this.currentVRCamera.animations = [];\n        var animationCameraTeleportation = new Animation(\"animationCameraTeleportation\", \"position\", FPS, Animation.ANIMATIONTYPE_VECTOR3, Animation.ANIMATIONLOOPMODE_CONSTANT);\n        var animationCameraTeleportationKeys = [\n            {\n                frame: 0,\n                value: this.currentVRCamera.position,\n            },\n            {\n                frame: lastFrame,\n                value: this._workingVector,\n            },\n        ];\n        animationCameraTeleportation.setKeys(animationCameraTeleportationKeys);\n        animationCameraTeleportation.setEasingFunction(this._teleportationEasing);\n        this.currentVRCamera.animations.push(animationCameraTeleportation);\n        this._postProcessMove.animations = [];\n        // Calculate the mid frame for vignette animations\n        var midFrame = Math.round(lastFrame / 2);\n        var animationPP = new Animation(\"animationPP\", \"vignetteWeight\", FPS, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\n        var vignetteWeightKeys = [];\n        vignetteWeightKeys.push({\n            frame: 0,\n            value: 0,\n        });\n        vignetteWeightKeys.push({\n            frame: midFrame,\n            value: 8,\n        });\n        vignetteWeightKeys.push({\n            frame: lastFrame,\n            value: 0,\n        });\n        animationPP.setKeys(vignetteWeightKeys);\n        this._postProcessMove.animations.push(animationPP);\n        var animationPP2 = new Animation(\"animationPP2\", \"vignetteStretch\", FPS, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\n        var vignetteStretchKeys = [];\n        vignetteStretchKeys.push({\n            frame: 0,\n            value: 0,\n        });\n        vignetteStretchKeys.push({\n            frame: midFrame,\n            value: 10,\n        });\n        vignetteStretchKeys.push({\n            frame: lastFrame,\n            value: 0,\n        });\n        animationPP2.setKeys(vignetteStretchKeys);\n        this._postProcessMove.animations.push(animationPP2);\n        this._postProcessMove.imageProcessingConfiguration.vignetteWeight = 0;\n        this._postProcessMove.imageProcessingConfiguration.vignetteStretch = 0;\n        this._webVRCamera.attachPostProcess(this._postProcessMove);\n        this._scene.beginAnimation(this._postProcessMove, 0, lastFrame, false, speedRatio, function () {\n            _this._webVRCamera.detachPostProcess(_this._postProcessMove);\n        });\n        this._scene.beginAnimation(this.currentVRCamera, 0, lastFrame, false, speedRatio, function () {\n            _this.onAfterCameraTeleport.notifyObservers(_this._workingVector);\n        });\n        this._hideTeleportationTarget();\n    };\n    VRExperienceHelper.prototype._convertNormalToDirectionOfRay = function (normal, ray) {\n        if (normal) {\n            var angle = Math.acos(Vector3.Dot(normal, ray.direction));\n            if (angle < Math.PI / 2) {\n                normal.scaleInPlace(-1);\n            }\n        }\n        return normal;\n    };\n    VRExperienceHelper.prototype._castRayAndSelectObject = function (gazer) {\n        if (!(this.currentVRCamera instanceof FreeCamera)) {\n            return;\n        }\n        var ray = gazer._getForwardRay(this._rayLength);\n        var hit = this._scene.pickWithRay(ray, this._raySelectionPredicate);\n        if (hit) {\n            this._scene.simulatePointerMove(hit, { pointerId: gazer._id });\n        }\n        gazer._currentHit = hit;\n        // Moving the gazeTracker on the mesh face targetted\n        if (hit && hit.pickedPoint) {\n            if (this._displayGaze) {\n                var multiplier = 1;\n                gazer._gazeTracker.isVisible = true;\n                if (gazer._isActionableMesh) {\n                    multiplier = 3;\n                }\n                if (this.updateGazeTrackerScale) {\n                    gazer._gazeTracker.scaling.x = hit.distance * multiplier;\n                    gazer._gazeTracker.scaling.y = hit.distance * multiplier;\n                    gazer._gazeTracker.scaling.z = hit.distance * multiplier;\n                }\n                var pickNormal = this._convertNormalToDirectionOfRay(hit.getNormal(), ray);\n                // To avoid z-fighting\n                var deltaFighting = 0.002;\n                if (pickNormal) {\n                    var axis1 = Vector3.Cross(Axis.Y, pickNormal);\n                    var axis2 = Vector3.Cross(pickNormal, axis1);\n                    Vector3.RotationFromAxisToRef(axis2, pickNormal, axis1, gazer._gazeTracker.rotation);\n                }\n                gazer._gazeTracker.position.copyFrom(hit.pickedPoint);\n                if (gazer._gazeTracker.position.x < 0) {\n                    gazer._gazeTracker.position.x += deltaFighting;\n                }\n                else {\n                    gazer._gazeTracker.position.x -= deltaFighting;\n                }\n                if (gazer._gazeTracker.position.y < 0) {\n                    gazer._gazeTracker.position.y += deltaFighting;\n                }\n                else {\n                    gazer._gazeTracker.position.y -= deltaFighting;\n                }\n                if (gazer._gazeTracker.position.z < 0) {\n                    gazer._gazeTracker.position.z += deltaFighting;\n                }\n                else {\n                    gazer._gazeTracker.position.z -= deltaFighting;\n                }\n            }\n            // Changing the size of the laser pointer based on the distance from the targetted point\n            gazer._updatePointerDistance(hit.distance);\n        }\n        else {\n            gazer._updatePointerDistance();\n            gazer._gazeTracker.isVisible = false;\n        }\n        if (hit && hit.pickedMesh) {\n            // The object selected is the floor, we're in a teleportation scenario\n            if (this._teleportationInitialized && this._isTeleportationFloor(hit.pickedMesh) && hit.pickedPoint) {\n                // Moving the teleportation area to this targetted point\n                //Raise onSelectedMeshUnselected observable if ray collided floor mesh/meshes and a non floor mesh was previously selected\n                if (gazer._currentMeshSelected && !this._isTeleportationFloor(gazer._currentMeshSelected)) {\n                    this._notifySelectedMeshUnselected(gazer._currentMeshSelected);\n                }\n                gazer._currentMeshSelected = null;\n                if (gazer._teleportationRequestInitiated) {\n                    this._moveTeleportationSelectorTo(hit, gazer, ray);\n                }\n                return;\n            }\n            // If not, we're in a selection scenario\n            //this._teleportationAllowed = false;\n            if (hit.pickedMesh !== gazer._currentMeshSelected) {\n                if (this.meshSelectionPredicate(hit.pickedMesh)) {\n                    this.onNewMeshPicked.notifyObservers(hit);\n                    gazer._currentMeshSelected = hit.pickedMesh;\n                    if (hit.pickedMesh.isPickable && hit.pickedMesh.actionManager) {\n                        this.changeGazeColor(this._pickedGazeColor);\n                        this.changeLaserColor(this._pickedLaserColor);\n                        gazer._isActionableMesh = true;\n                    }\n                    else {\n                        this.changeGazeColor(this._gazeColor);\n                        this.changeLaserColor(this._laserColor);\n                        gazer._isActionableMesh = false;\n                    }\n                    try {\n                        this.onNewMeshSelected.notifyObservers(hit.pickedMesh);\n                        var gazerAsControllerGazer = gazer;\n                        if (gazerAsControllerGazer.webVRController) {\n                            this.onMeshSelectedWithController.notifyObservers({ mesh: hit.pickedMesh, controller: gazerAsControllerGazer.webVRController });\n                        }\n                    }\n                    catch (err) {\n                        Logger.Warn(\"Error while raising onNewMeshSelected or onMeshSelectedWithController: \" + err);\n                    }\n                }\n                else {\n                    this._notifySelectedMeshUnselected(gazer._currentMeshSelected);\n                    gazer._currentMeshSelected = null;\n                    this.changeGazeColor(this._gazeColor);\n                    this.changeLaserColor(this._laserColor);\n                }\n            }\n        }\n        else {\n            this._notifySelectedMeshUnselected(gazer._currentMeshSelected);\n            gazer._currentMeshSelected = null;\n            //this._teleportationAllowed = false;\n            this.changeGazeColor(this._gazeColor);\n            this.changeLaserColor(this._laserColor);\n        }\n    };\n    VRExperienceHelper.prototype._notifySelectedMeshUnselected = function (mesh) {\n        if (mesh) {\n            this.onSelectedMeshUnselected.notifyObservers(mesh);\n        }\n    };\n    /**\n     * Permanently set new colors for the laser pointer\n     * @param color the new laser color\n     * @param pickedColor the new laser color when picked mesh detected\n     */\n    VRExperienceHelper.prototype.setLaserColor = function (color, pickedColor) {\n        if (pickedColor === void 0) { pickedColor = this._pickedLaserColor; }\n        this._laserColor = color;\n        this._pickedLaserColor = pickedColor;\n    };\n    /**\n     * Set lighting enabled / disabled on the laser pointer of both controllers\n     * @param enabled should the lighting be enabled on the laser pointer\n     */\n    VRExperienceHelper.prototype.setLaserLightingState = function (enabled) {\n        if (enabled === void 0) { enabled = true; }\n        if (this._leftController) {\n            this._leftController._setLaserPointerLightingDisabled(!enabled);\n        }\n        if (this._rightController) {\n            this._rightController._setLaserPointerLightingDisabled(!enabled);\n        }\n    };\n    /**\n     * Permanently set new colors for the gaze pointer\n     * @param color the new gaze color\n     * @param pickedColor the new gaze color when picked mesh detected\n     */\n    VRExperienceHelper.prototype.setGazeColor = function (color, pickedColor) {\n        if (pickedColor === void 0) { pickedColor = this._pickedGazeColor; }\n        this._gazeColor = color;\n        this._pickedGazeColor = pickedColor;\n    };\n    /**\n     * Sets the color of the laser ray from the vr controllers.\n     * @param color new color for the ray.\n     */\n    VRExperienceHelper.prototype.changeLaserColor = function (color) {\n        if (!this.updateControllerLaserColor) {\n            return;\n        }\n        if (this._leftController) {\n            this._leftController._setLaserPointerColor(color);\n        }\n        if (this._rightController) {\n            this._rightController._setLaserPointerColor(color);\n        }\n    };\n    /**\n     * Sets the color of the ray from the vr headsets gaze.\n     * @param color new color for the ray.\n     */\n    VRExperienceHelper.prototype.changeGazeColor = function (color) {\n        if (!this.updateGazeTrackerColor) {\n            return;\n        }\n        if (!this._cameraGazer._gazeTracker.material) {\n            return;\n        }\n        this._cameraGazer._gazeTracker.material.emissiveColor = color;\n        if (this._leftController) {\n            this._leftController._gazeTracker.material.emissiveColor = color;\n        }\n        if (this._rightController) {\n            this._rightController._gazeTracker.material.emissiveColor = color;\n        }\n    };\n    /**\n     * Exits VR and disposes of the vr experience helper\n     */\n    VRExperienceHelper.prototype.dispose = function () {\n        if (this.isInVRMode) {\n            this.exitVR();\n        }\n        if (this._postProcessMove) {\n            this._postProcessMove.dispose();\n        }\n        if (this._webVRCamera) {\n            this._webVRCamera.dispose();\n        }\n        if (this._vrDeviceOrientationCamera) {\n            this._vrDeviceOrientationCamera.dispose();\n        }\n        if (!this._useCustomVRButton && this._btnVR && this._btnVR.parentNode) {\n            document.body.removeChild(this._btnVR);\n        }\n        if (this._deviceOrientationCamera && this._scene.activeCamera != this._deviceOrientationCamera) {\n            this._deviceOrientationCamera.dispose();\n        }\n        if (this._cameraGazer) {\n            this._cameraGazer.dispose();\n        }\n        if (this._leftController) {\n            this._leftController.dispose();\n        }\n        if (this._rightController) {\n            this._rightController.dispose();\n        }\n        if (this._teleportationTarget) {\n            this._teleportationTarget.dispose();\n        }\n        if (this.xr) {\n            this.xr.dispose();\n        }\n        this._floorMeshesCollection = [];\n        document.removeEventListener(\"keydown\", this._onKeyDown);\n        window.removeEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChangeBind);\n        window.removeEventListener(\"resize\", this._onResize);\n        document.removeEventListener(\"fullscreenchange\", this._onFullscreenChange);\n        document.removeEventListener(\"mozfullscreenchange\", this._onFullscreenChange);\n        document.removeEventListener(\"webkitfullscreenchange\", this._onFullscreenChange);\n        document.removeEventListener(\"msfullscreenchange\", this._onFullscreenChange);\n        document.onmsfullscreenchange = null;\n        this._scene.getEngine().onVRDisplayChangedObservable.removeCallback(this._onVRDisplayChangedBind);\n        this._scene.getEngine().onVRRequestPresentStart.removeCallback(this._onVRRequestPresentStart);\n        this._scene.getEngine().onVRRequestPresentComplete.removeCallback(this._onVRRequestPresentComplete);\n        this._scene.gamepadManager.onGamepadConnectedObservable.removeCallback(this._onNewGamepadConnected);\n        this._scene.gamepadManager.onGamepadDisconnectedObservable.removeCallback(this._onNewGamepadDisconnected);\n        this._scene.unregisterBeforeRender(this._beforeRender);\n    };\n    /**\n     * Gets the name of the VRExperienceHelper class\n     * @returns \"VRExperienceHelper\"\n     */\n    VRExperienceHelper.prototype.getClassName = function () {\n        return \"VRExperienceHelper\";\n    };\n    /**\n     * Time Constant Teleportation Mode\n     */\n    VRExperienceHelper.TELEPORTATIONMODE_CONSTANTTIME = 0;\n    /**\n     * Speed Constant Teleportation Mode\n     */\n    VRExperienceHelper.TELEPORTATIONMODE_CONSTANTSPEED = 1;\n    return VRExperienceHelper;\n}());\nexport { VRExperienceHelper };\n//# sourceMappingURL=vrExperienceHelper.js.map","import { __extends } from \"tslib\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { FreeCamera } from \"../../Cameras/freeCamera.js\";\nimport { Camera } from \"../../Cameras/camera.js\";\nimport { Quaternion, Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { Gamepad } from \"../../Gamepads/gamepad.js\";\nimport { PoseEnabledControllerType } from \"../../Gamepads/Controllers/poseEnabledController.js\";\nimport { Node } from \"../../node.js\";\nimport { HemisphericLight } from \"../../Lights/hemisphericLight.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { VRMultiviewToSingleviewPostProcess } from \"../../PostProcesses/vrMultiviewToSingleviewPostProcess.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { setWebVRRigMode } from \"../RigModes/webVRRigMode.js\";\n// Side effect import to add webvr support to engine\nimport \"../../Engines/Extensions/engine.webVR.js\";\nNode.AddNodeConstructor(\"WebVRFreeCamera\", function (name, scene) {\n    return function () { return new WebVRFreeCamera(name, Vector3.Zero(), scene); };\n});\nNode.AddNodeConstructor(\"WebVRGamepadCamera\", function (name, scene) {\n    return function () { return new WebVRFreeCamera(name, Vector3.Zero(), scene); };\n});\n/**\n * This represents a WebVR camera.\n * The WebVR camera is Babylon's simple interface to interaction with Windows Mixed Reality, HTC Vive and Oculus Rift.\n * @deprecated Use WebXR instead - https://doc.babylonjs.com/divingDeeper/webXR\n * @example https://doc.babylonjs.com/how_to/webvr_camera\n */\nvar WebVRFreeCamera = /** @class */ (function (_super) {\n    __extends(WebVRFreeCamera, _super);\n    /**\n     * Instantiates a WebVRFreeCamera.\n     * @param name The name of the WebVRFreeCamera\n     * @param position The starting anchor position for the camera\n     * @param scene The scene the camera belongs to\n     * @param _webVROptions a set of customizable options for the webVRCamera\n     */\n    function WebVRFreeCamera(name, position, scene, _webVROptions) {\n        if (_webVROptions === void 0) { _webVROptions = {}; }\n        var _this = _super.call(this, name, position, scene) || this;\n        _this._webVROptions = _webVROptions;\n        /**\n         * @hidden\n         * The vrDisplay tied to the camera. See https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay\n         */\n        _this._vrDevice = null;\n        /**\n         * The rawPose of the vrDevice.\n         */\n        _this.rawPose = null;\n        _this._specsVersion = \"1.1\";\n        _this._attached = false;\n        _this._descendants = [];\n        // Represents device position and rotation in room space. Should only be used to help calculate babylon space values\n        _this._deviceRoomPosition = Vector3.Zero();\n        /** @hidden */\n        _this._deviceRoomRotationQuaternion = Quaternion.Identity();\n        _this._standingMatrix = null;\n        /**\n         * Represents device position in babylon space.\n         */\n        _this.devicePosition = Vector3.Zero();\n        /**\n         * Represents device rotation in babylon space.\n         */\n        _this.deviceRotationQuaternion = Quaternion.Identity();\n        /**\n         * The scale of the device to be used when translating from device space to babylon space.\n         */\n        _this.deviceScaleFactor = 1;\n        _this._deviceToWorld = Matrix.Identity();\n        _this._worldToDevice = Matrix.Identity();\n        /**\n         * References to the webVR controllers for the vrDevice.\n         */\n        _this.controllers = [];\n        /**\n         * Emits an event when a controller is attached.\n         */\n        _this.onControllersAttachedObservable = new Observable();\n        /**\n         * Emits an event when a controller's mesh has been loaded;\n         */\n        _this.onControllerMeshLoadedObservable = new Observable();\n        /**\n         * Emits an event when the HMD's pose has been updated.\n         */\n        _this.onPoseUpdatedFromDeviceObservable = new Observable();\n        _this._poseSet = false;\n        /**\n         * If the rig cameras be used as parent instead of this camera.\n         */\n        _this.rigParenting = true;\n        _this._defaultHeight = undefined;\n        _this._setRigMode = setWebVRRigMode.bind(null, _this);\n        _this._detachIfAttached = function () {\n            var vrDisplay = _this.getEngine().getVRDevice();\n            if (vrDisplay && !vrDisplay.isPresenting) {\n                _this.detachControl();\n            }\n        };\n        _this._workingVector = Vector3.Zero();\n        _this._oneVector = Vector3.One();\n        _this._workingMatrix = Matrix.Identity();\n        _this._tmpMatrix = new Matrix();\n        _this._cache.position = Vector3.Zero();\n        if (_webVROptions.defaultHeight) {\n            _this._defaultHeight = _webVROptions.defaultHeight;\n            _this.position.y = _this._defaultHeight;\n        }\n        _this.minZ = 0.1;\n        //legacy support - the compensation boolean was removed.\n        if (arguments.length === 5) {\n            // eslint-disable-next-line prefer-rest-params\n            _this._webVROptions = arguments[4];\n        }\n        // default webVR options\n        if (_this._webVROptions.trackPosition == undefined) {\n            _this._webVROptions.trackPosition = true;\n        }\n        if (_this._webVROptions.controllerMeshes == undefined) {\n            _this._webVROptions.controllerMeshes = true;\n        }\n        if (_this._webVROptions.defaultLightingOnControllers == undefined) {\n            _this._webVROptions.defaultLightingOnControllers = true;\n        }\n        _this.rotationQuaternion = new Quaternion();\n        if (_this._webVROptions && _this._webVROptions.positionScale) {\n            _this.deviceScaleFactor = _this._webVROptions.positionScale;\n        }\n        //enable VR\n        var engine = _this.getEngine();\n        _this._onVREnabled = function (success) {\n            if (success) {\n                _this.initControllers();\n            }\n        };\n        engine.onVRRequestPresentComplete.add(_this._onVREnabled);\n        engine.initWebVR().add(function (event) {\n            if (!event.vrDisplay || _this._vrDevice === event.vrDisplay) {\n                return;\n            }\n            _this._vrDevice = event.vrDisplay;\n            //reset the rig parameters.\n            _this.setCameraRigMode(Camera.RIG_MODE_WEBVR, { parentCamera: _this, vrDisplay: _this._vrDevice, frameData: _this._frameData, specs: _this._specsVersion });\n            if (_this._attached) {\n                _this.getEngine().enableVR(_this._webVROptions);\n            }\n        });\n        if (typeof VRFrameData !== \"undefined\") {\n            _this._frameData = new VRFrameData();\n        }\n        if (_webVROptions.useMultiview) {\n            if (!_this.getScene().getEngine().getCaps().multiview) {\n                Logger.Warn(\"Multiview is not supported, falling back to standard rendering\");\n                _this._useMultiviewToSingleView = false;\n            }\n            else {\n                _this._useMultiviewToSingleView = true;\n                _this._rigPostProcess = new VRMultiviewToSingleviewPostProcess(\"VRMultiviewToSingleview\", _this, 1.0);\n            }\n        }\n        /**\n         * The idea behind the following lines:\n         * objects that have the camera as parent should actually have the rig cameras as a parent.\n         * BUT, each of those cameras has a different view matrix, which means that if we set the parent to the first rig camera,\n         * the second will not show it correctly.\n         *\n         * To solve this - each object that has the camera as parent will be added to a protected array.\n         * When the rig camera renders, it will take this array and set all of those to be its children.\n         * This way, the right camera will be used as a parent, and the mesh will be rendered correctly.\n         * Amazing!\n         */\n        _this.getScene().onBeforeCameraRenderObservable.add(function (camera) {\n            if (camera.parent === _this && _this.rigParenting) {\n                _this._descendants = _this.getDescendants(true, function (n) {\n                    // don't take the cameras or the controllers!\n                    var isController = _this.controllers.some(function (controller) {\n                        return controller._mesh === n;\n                    });\n                    var isRigCamera = _this._rigCameras.indexOf(n) !== -1;\n                    return !isController && !isRigCamera;\n                });\n                _this._descendants.forEach(function (node) {\n                    node.parent = camera;\n                });\n            }\n        });\n        _this.getScene().onAfterCameraRenderObservable.add(function (camera) {\n            if (camera.parent === _this && _this.rigParenting) {\n                _this._descendants.forEach(function (node) {\n                    node.parent = _this;\n                });\n            }\n        });\n        return _this;\n    }\n    /**\n     * Gets the device distance from the ground in meters.\n     * @returns the distance in meters from the vrDevice to ground in device space. If standing matrix is not supported for the vrDevice 0 is returned.\n     */\n    WebVRFreeCamera.prototype.deviceDistanceToRoomGround = function () {\n        if (this._standingMatrix) {\n            // Add standing matrix offset to get real offset from ground in room\n            this._standingMatrix.getTranslationToRef(this._workingVector);\n            return this._deviceRoomPosition.y + this._workingVector.y;\n        }\n        //If VRDisplay does not inform stage parameters and no default height is set we fallback to zero.\n        return this._defaultHeight || 0;\n    };\n    /**\n     * Enables the standing matrix when supported. This can be used to position the user's view the correct height from the ground.\n     * @param callback will be called when the standing matrix is set. Callback parameter is if the standing matrix is supported.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    WebVRFreeCamera.prototype.useStandingMatrix = function (callback) {\n        var _this = this;\n        if (callback === void 0) { callback = function (bool) { }; }\n        // Use standing matrix if available\n        this.getEngine()\n            .initWebVRAsync()\n            .then(function (result) {\n            if (!result.vrDisplay || !result.vrDisplay.stageParameters || !result.vrDisplay.stageParameters.sittingToStandingTransform || !_this._webVROptions.trackPosition) {\n                callback(false);\n            }\n            else {\n                _this._standingMatrix = new Matrix();\n                Matrix.FromFloat32ArrayToRefScaled(result.vrDisplay.stageParameters.sittingToStandingTransform, 0, 1, _this._standingMatrix);\n                if (!_this.getScene().useRightHandedSystem) {\n                    if (_this._standingMatrix) {\n                        _this._standingMatrix.toggleModelMatrixHandInPlace();\n                    }\n                }\n                callback(true);\n            }\n        });\n    };\n    /**\n     * Enables the standing matrix when supported. This can be used to position the user's view the correct height from the ground.\n     * @returns A promise with a boolean set to if the standing matrix is supported.\n     */\n    WebVRFreeCamera.prototype.useStandingMatrixAsync = function () {\n        var _this = this;\n        return new Promise(function (res) {\n            _this.useStandingMatrix(function (supported) {\n                res(supported);\n            });\n        });\n    };\n    /**\n     * Disposes the camera\n     */\n    WebVRFreeCamera.prototype.dispose = function () {\n        this._detachIfAttached();\n        this.getEngine().onVRRequestPresentComplete.removeCallback(this._onVREnabled);\n        if (this._updateCacheWhenTrackingDisabledObserver) {\n            this._scene.onBeforeRenderObservable.remove(this._updateCacheWhenTrackingDisabledObserver);\n        }\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Gets a vrController by name.\n     * @param name The name of the controller to retrieve\n     * @returns the controller matching the name specified or null if not found\n     */\n    WebVRFreeCamera.prototype.getControllerByName = function (name) {\n        for (var _i = 0, _a = this.controllers; _i < _a.length; _i++) {\n            var gp = _a[_i];\n            if (gp.hand === name) {\n                return gp;\n            }\n        }\n        return null;\n    };\n    Object.defineProperty(WebVRFreeCamera.prototype, \"leftController\", {\n        /**\n         * The controller corresponding to the users left hand.\n         */\n        get: function () {\n            if (!this._leftController) {\n                this._leftController = this.getControllerByName(\"left\");\n            }\n            return this._leftController;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(WebVRFreeCamera.prototype, \"rightController\", {\n        /**\n         * The controller corresponding to the users right hand.\n         */\n        get: function () {\n            if (!this._rightController) {\n                this._rightController = this.getControllerByName(\"right\");\n            }\n            return this._rightController;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Casts a ray forward from the vrCamera's gaze.\n     * @param length Length of the ray (default: 100)\n     * @returns the ray corresponding to the gaze\n     */\n    WebVRFreeCamera.prototype.getForwardRay = function (length) {\n        if (length === void 0) { length = 100; }\n        if (this.leftCamera) {\n            // Use left eye to avoid computation to compute center on every call\n            return _super.prototype.getForwardRay.call(this, length, this.leftCamera.getWorldMatrix(), this.leftCamera.globalPosition); // Need the actual rendered camera\n        }\n        else {\n            return _super.prototype.getForwardRay.call(this, length);\n        }\n    };\n    /**\n     * @hidden\n     * Updates the camera based on device's frame data\n     */\n    WebVRFreeCamera.prototype._checkInputs = function () {\n        if (this._vrDevice && this._vrDevice.isPresenting) {\n            this._vrDevice.getFrameData(this._frameData);\n            this.updateFromDevice(this._frameData.pose);\n        }\n        _super.prototype._checkInputs.call(this);\n    };\n    /**\n     * Updates the poseControlled values based on the input device pose.\n     * @param poseData Pose coming from the device\n     */\n    WebVRFreeCamera.prototype.updateFromDevice = function (poseData) {\n        if (poseData && poseData.orientation && poseData.orientation.length === 4) {\n            this.rawPose = poseData;\n            this._deviceRoomRotationQuaternion.copyFromFloats(poseData.orientation[0], poseData.orientation[1], -poseData.orientation[2], -poseData.orientation[3]);\n            if (this.getScene().useRightHandedSystem) {\n                this._deviceRoomRotationQuaternion.z *= -1;\n                this._deviceRoomRotationQuaternion.w *= -1;\n            }\n            if (this._webVROptions.trackPosition && this.rawPose.position) {\n                this._deviceRoomPosition.copyFromFloats(this.rawPose.position[0], this.rawPose.position[1], -this.rawPose.position[2]);\n                if (this.getScene().useRightHandedSystem) {\n                    this._deviceRoomPosition.z *= -1;\n                }\n            }\n            this._poseSet = true;\n        }\n    };\n    /**\n     * WebVR's attach control will start broadcasting frames to the device.\n     * Note that in certain browsers (chrome for example) this function must be called\n     * within a user-interaction callback. Example:\n     * <pre> scene.onPointerDown = function() { camera.attachControl(canvas); }</pre>\n     *\n     * @param noPreventDefault prevent the default html element operation when attaching the vrDevice\n     */\n    WebVRFreeCamera.prototype.attachControl = function (noPreventDefault) {\n        // eslint-disable-next-line prefer-rest-params\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        _super.prototype.attachControl.call(this, noPreventDefault);\n        this._attached = true;\n        noPreventDefault = Camera.ForceAttachControlToAlwaysPreventDefault ? false : noPreventDefault;\n        if (this._vrDevice) {\n            this.getEngine().enableVR(this._webVROptions);\n        }\n        var hostWindow = this._scene.getEngine().getHostWindow();\n        if (hostWindow) {\n            hostWindow.addEventListener(\"vrdisplaypresentchange\", this._detachIfAttached);\n        }\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    WebVRFreeCamera.prototype.detachControl = function () {\n        this.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\n        this.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\n        _super.prototype.detachControl.call(this);\n        this._attached = false;\n        this.getEngine().disableVR();\n        window.removeEventListener(\"vrdisplaypresentchange\", this._detachIfAttached);\n    };\n    /**\n     * @returns the name of this class\n     */\n    WebVRFreeCamera.prototype.getClassName = function () {\n        return \"WebVRFreeCamera\";\n    };\n    /**\n     * Calls resetPose on the vrDisplay\n     * See: https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/resetPose\n     */\n    WebVRFreeCamera.prototype.resetToCurrentRotation = function () {\n        //uses the vrDisplay's \"resetPose()\".\n        //pitch and roll won't be affected.\n        this._vrDevice.resetPose();\n    };\n    /**\n     * @hidden\n     * Updates the rig cameras (left and right eye)\n     */\n    WebVRFreeCamera.prototype._updateRigCameras = function () {\n        var camLeft = this._rigCameras[0];\n        var camRight = this._rigCameras[1];\n        camLeft.rotationQuaternion.copyFrom(this._deviceRoomRotationQuaternion);\n        camRight.rotationQuaternion.copyFrom(this._deviceRoomRotationQuaternion);\n        camLeft.position.copyFrom(this._deviceRoomPosition);\n        camRight.position.copyFrom(this._deviceRoomPosition);\n    };\n    // Remove translation from 6dof headset if trackposition is set to false\n    WebVRFreeCamera.prototype._correctPositionIfNotTrackPosition = function (matrix, isViewMatrix) {\n        if (isViewMatrix === void 0) { isViewMatrix = false; }\n        if (this.rawPose && this.rawPose.position && !this._webVROptions.trackPosition) {\n            Matrix.TranslationToRef(this.rawPose.position[0], this.rawPose.position[1], -this.rawPose.position[2], this._tmpMatrix);\n            if (!isViewMatrix) {\n                this._tmpMatrix.invert();\n            }\n            this._tmpMatrix.multiplyToRef(matrix, matrix);\n        }\n    };\n    /**\n     * @hidden\n     * Updates the cached values of the camera\n     * @param ignoreParentClass ignores updating the parent class's cache (default: false)\n     */\n    WebVRFreeCamera.prototype._updateCache = function (ignoreParentClass) {\n        var _this = this;\n        if (!this.rotationQuaternion.equals(this._cache.rotationQuaternion) || !this.position.equals(this._cache.position)) {\n            // Update to ensure devicePosition is up to date with most recent _deviceRoomPosition\n            if (!this._updateCacheCalled) {\n                // make sure it is only called once per loop. this.update() might cause an infinite loop.\n                this._updateCacheCalled = true;\n                this.update();\n            }\n            // Set working vector to the device position in room space rotated by the new rotation\n            this.rotationQuaternion.toRotationMatrix(this._workingMatrix);\n            Vector3.TransformCoordinatesToRef(this._deviceRoomPosition, this._workingMatrix, this._workingVector);\n            // Subtract this vector from the current device position in world to get the translation for the device world matrix\n            this.devicePosition.subtractToRef(this._workingVector, this._workingVector);\n            Matrix.ComposeToRef(this._oneVector, this.rotationQuaternion, this._workingVector, this._deviceToWorld);\n            // Add translation from anchor position\n            this._deviceToWorld.getTranslationToRef(this._workingVector);\n            this._workingVector.addInPlace(this.position);\n            this._workingVector.subtractInPlace(this._cache.position);\n            this._deviceToWorld.setTranslation(this._workingVector);\n            // Set an inverted matrix to be used when updating the camera\n            this._deviceToWorld.invertToRef(this._worldToDevice);\n            // Update the gamepad to ensure the mesh is updated on the same frame as camera\n            this.controllers.forEach(function (controller) {\n                controller._deviceToWorld.copyFrom(_this._deviceToWorld);\n                _this._correctPositionIfNotTrackPosition(controller._deviceToWorld);\n                controller.update();\n            });\n        }\n        if (!ignoreParentClass) {\n            _super.prototype._updateCache.call(this);\n        }\n        this._updateCacheCalled = false;\n    };\n    /**\n     * @hidden\n     * Get current device position in babylon world\n     */\n    WebVRFreeCamera.prototype._computeDevicePosition = function () {\n        Vector3.TransformCoordinatesToRef(this._deviceRoomPosition, this._deviceToWorld, this.devicePosition);\n    };\n    /**\n     * Updates the current device position and rotation in the babylon world\n     */\n    WebVRFreeCamera.prototype.update = function () {\n        this._computeDevicePosition();\n        // Get current device rotation in babylon world\n        Matrix.FromQuaternionToRef(this._deviceRoomRotationQuaternion, this._workingMatrix);\n        this._workingMatrix.multiplyToRef(this._deviceToWorld, this._workingMatrix);\n        Quaternion.FromRotationMatrixToRef(this._workingMatrix, this.deviceRotationQuaternion);\n        if (this._poseSet) {\n            this.onPoseUpdatedFromDeviceObservable.notifyObservers(null);\n        }\n        _super.prototype.update.call(this);\n    };\n    /**\n     * @hidden\n     * Gets the view matrix of this camera (Always set to identity as left and right eye cameras contain the actual view matrix)\n     * @returns an identity matrix\n     */\n    WebVRFreeCamera.prototype._getViewMatrix = function () {\n        return Matrix.Identity();\n    };\n    /**\n     * This function is called by the two RIG cameras.\n     * 'this' is the left or right camera (and NOT (!!!) the WebVRFreeCamera instance)\n     * @hidden\n     */\n    WebVRFreeCamera.prototype._getWebVRViewMatrix = function () {\n        // Update the parent camera prior to using a child camera to avoid desynchronization\n        var parentCamera = this._cameraRigParams[\"parentCamera\"];\n        parentCamera._updateCache();\n        //WebVR 1.1\n        var viewArray = this._cameraRigParams[\"left\"] ? this._cameraRigParams[\"frameData\"].leftViewMatrix : this._cameraRigParams[\"frameData\"].rightViewMatrix;\n        Matrix.FromArrayToRef(viewArray, 0, this._webvrViewMatrix);\n        if (!this.getScene().useRightHandedSystem) {\n            this._webvrViewMatrix.toggleModelMatrixHandInPlace();\n        }\n        // update the camera rotation matrix\n        this._webvrViewMatrix.getRotationMatrixToRef(this._cameraRotationMatrix);\n        Vector3.TransformCoordinatesToRef(this._referencePoint, this._cameraRotationMatrix, this._transformedReferencePoint);\n        // Computing target and final matrix\n        this.position.addToRef(this._transformedReferencePoint, this._currentTarget);\n        // should the view matrix be updated with scale and position offset?\n        if (parentCamera.deviceScaleFactor !== 1) {\n            this._webvrViewMatrix.invert();\n            // scale the position, if set\n            if (parentCamera.deviceScaleFactor) {\n                this._webvrViewMatrix.multiplyAtIndex(12, parentCamera.deviceScaleFactor);\n                this._webvrViewMatrix.multiplyAtIndex(13, parentCamera.deviceScaleFactor);\n                this._webvrViewMatrix.multiplyAtIndex(14, parentCamera.deviceScaleFactor);\n            }\n            this._webvrViewMatrix.invert();\n        }\n        // Remove translation from 6dof headset if trackposition is set to false\n        parentCamera._correctPositionIfNotTrackPosition(this._webvrViewMatrix, true);\n        parentCamera._worldToDevice.multiplyToRef(this._webvrViewMatrix, this._webvrViewMatrix);\n        // Compute global position\n        this._workingMatrix = this._workingMatrix || Matrix.Identity();\n        this._webvrViewMatrix.invertToRef(this._workingMatrix);\n        this._workingMatrix.multiplyToRef(parentCamera.getWorldMatrix(), this._workingMatrix);\n        this._workingMatrix.getTranslationToRef(this._globalPosition);\n        this._markSyncedWithParent();\n        return this._webvrViewMatrix;\n    };\n    /** @hidden */\n    WebVRFreeCamera.prototype._getWebVRProjectionMatrix = function () {\n        var parentCamera = this.parent;\n        parentCamera._vrDevice.depthNear = parentCamera.minZ;\n        parentCamera._vrDevice.depthFar = parentCamera.maxZ;\n        var projectionArray = this._cameraRigParams[\"left\"] ? this._cameraRigParams[\"frameData\"].leftProjectionMatrix : this._cameraRigParams[\"frameData\"].rightProjectionMatrix;\n        Matrix.FromArrayToRef(projectionArray, 0, this._projectionMatrix);\n        //babylon compatible matrix\n        if (!this.getScene().useRightHandedSystem) {\n            this._projectionMatrix.toggleProjectionMatrixHandInPlace();\n        }\n        return this._projectionMatrix;\n    };\n    /**\n     * Initializes the controllers and their meshes\n     */\n    WebVRFreeCamera.prototype.initControllers = function () {\n        var _this = this;\n        this.controllers = [];\n        var manager = this.getScene().gamepadManager;\n        this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add(function (gamepad) {\n            if (gamepad.type === Gamepad.POSE_ENABLED) {\n                var webVrController = gamepad;\n                if (webVrController.defaultModel) {\n                    webVrController.defaultModel.setEnabled(false);\n                }\n                if (webVrController.hand === \"right\") {\n                    _this._rightController = null;\n                }\n                if (webVrController.hand === \"left\") {\n                    _this._leftController = null;\n                }\n                var controllerIndex = _this.controllers.indexOf(webVrController);\n                if (controllerIndex !== -1) {\n                    _this.controllers.splice(controllerIndex, 1);\n                }\n            }\n        });\n        this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add(function (gamepad) {\n            if (gamepad.type === Gamepad.POSE_ENABLED) {\n                var webVrController_1 = gamepad;\n                if (!_this._webVROptions.trackPosition) {\n                    webVrController_1._disableTrackPosition(new Vector3(webVrController_1.hand == \"left\" ? -0.15 : 0.15, -0.5, 0.25));\n                    // Cache must be updated before rendering controllers to avoid them being one frame behind\n                    if (!_this._updateCacheWhenTrackingDisabledObserver) {\n                        _this._updateCacheWhenTrackingDisabledObserver = _this._scene.onBeforeRenderObservable.add(function () {\n                            _this._updateCache();\n                        });\n                    }\n                }\n                webVrController_1.deviceScaleFactor = _this.deviceScaleFactor;\n                webVrController_1._deviceToWorld.copyFrom(_this._deviceToWorld);\n                _this._correctPositionIfNotTrackPosition(webVrController_1._deviceToWorld);\n                if (_this._webVROptions.controllerMeshes) {\n                    if (webVrController_1.defaultModel) {\n                        webVrController_1.defaultModel.setEnabled(true);\n                    }\n                    else {\n                        // Load the meshes\n                        webVrController_1.initControllerMesh(_this.getScene(), function (loadedMesh) {\n                            loadedMesh.scaling.scaleInPlace(_this.deviceScaleFactor);\n                            _this.onControllerMeshLoadedObservable.notifyObservers(webVrController_1);\n                            if (_this._webVROptions.defaultLightingOnControllers) {\n                                if (!_this._lightOnControllers) {\n                                    _this._lightOnControllers = new HemisphericLight(\"vrControllersLight\", new Vector3(0, 1, 0), _this.getScene());\n                                }\n                                var activateLightOnSubMeshes_1 = function (mesh, light) {\n                                    var children = mesh.getChildren();\n                                    if (children && children.length !== 0) {\n                                        children.forEach(function (mesh) {\n                                            light.includedOnlyMeshes.push(mesh);\n                                            activateLightOnSubMeshes_1(mesh, light);\n                                        });\n                                    }\n                                };\n                                _this._lightOnControllers.includedOnlyMeshes.push(loadedMesh);\n                                activateLightOnSubMeshes_1(loadedMesh, _this._lightOnControllers);\n                            }\n                        });\n                    }\n                }\n                webVrController_1.attachToPoseControlledCamera(_this);\n                // since this is async - sanity check. Is the controller already stored?\n                if (_this.controllers.indexOf(webVrController_1) === -1) {\n                    //add to the controllers array\n                    _this.controllers.push(webVrController_1);\n                    // Forced to add some control code for Vive as it doesn't always fill properly the \"hand\" property\n                    // Sometimes, both controllers are set correctly (left and right), sometimes none, sometimes only one of them...\n                    // So we're overriding setting left & right manually to be sure\n                    var firstViveWandDetected = false;\n                    for (var i = 0; i < _this.controllers.length; i++) {\n                        if (_this.controllers[i].controllerType === PoseEnabledControllerType.VIVE) {\n                            if (!firstViveWandDetected) {\n                                firstViveWandDetected = true;\n                                _this.controllers[i].hand = \"left\";\n                            }\n                            else {\n                                _this.controllers[i].hand = \"right\";\n                            }\n                        }\n                    }\n                    //did we find enough controllers? Great! let the developer know.\n                    if (_this.controllers.length >= 2) {\n                        _this.onControllersAttachedObservable.notifyObservers(_this.controllers);\n                    }\n                }\n            }\n        });\n    };\n    return WebVRFreeCamera;\n}(FreeCamera));\nexport { WebVRFreeCamera };\n//# sourceMappingURL=webVRCamera.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize, serializeAsVector3, serializeAsMeshReference, serializeAsVector2 } from \"../Misc/decorators.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Matrix, Vector3, Vector2 } from \"../Maths/math.vector.js\";\nimport { Node } from \"../node.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { AutoRotationBehavior } from \"../Behaviors/Cameras/autoRotationBehavior.js\";\nimport { BouncingBehavior } from \"../Behaviors/Cameras/bouncingBehavior.js\";\nimport { FramingBehavior } from \"../Behaviors/Cameras/framingBehavior.js\";\nimport { Camera } from \"./camera.js\";\nimport { TargetCamera } from \"./targetCamera.js\";\nimport { ArcRotateCameraInputsManager } from \"../Cameras/arcRotateCameraInputsManager.js\";\nimport { Epsilon } from \"../Maths/math.constants.js\";\nimport { Tools } from \"../Misc/tools.js\";\nNode.AddNodeConstructor(\"ArcRotateCamera\", function (name, scene) {\n    return function () { return new ArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), scene); };\n});\n/**\n * This represents an orbital type of camera.\n *\n * This camera always points towards a given target position and can be rotated around that target with the target as the centre of rotation. It can be controlled with cursors and mouse, or with touch events.\n * Think of this camera as one orbiting its target position, or more imaginatively as a spy satellite orbiting the earth. Its position relative to the target (earth) can be set by three parameters, alpha (radians) the longitudinal rotation, beta (radians) the latitudinal rotation and radius the distance from the target position.\n * @see https://doc.babylonjs.com/babylon101/cameras#arc-rotate-camera\n */\nvar ArcRotateCamera = /** @class */ (function (_super) {\n    __extends(ArcRotateCamera, _super);\n    /**\n     * Instantiates a new ArcRotateCamera in a given scene\n     * @param name Defines the name of the camera\n     * @param alpha Defines the camera rotation along the longitudinal axis\n     * @param beta Defines the camera rotation along the latitudinal axis\n     * @param radius Defines the camera distance from its target\n     * @param target Defines the camera target\n     * @param scene Defines the scene the camera belongs to\n     * @param setActiveOnSceneIfNoneActive Defines whether the camera should be marked as active if not other active cameras have been defined\n     */\n    function ArcRotateCamera(name, alpha, beta, radius, target, scene, setActiveOnSceneIfNoneActive) {\n        if (setActiveOnSceneIfNoneActive === void 0) { setActiveOnSceneIfNoneActive = true; }\n        var _this = _super.call(this, name, Vector3.Zero(), scene, setActiveOnSceneIfNoneActive) || this;\n        /**\n         * Current inertia value on the longitudinal axis.\n         * The bigger this number the longer it will take for the camera to stop.\n         */\n        _this.inertialAlphaOffset = 0;\n        /**\n         * Current inertia value on the latitudinal axis.\n         * The bigger this number the longer it will take for the camera to stop.\n         */\n        _this.inertialBetaOffset = 0;\n        /**\n         * Current inertia value on the radius axis.\n         * The bigger this number the longer it will take for the camera to stop.\n         */\n        _this.inertialRadiusOffset = 0;\n        /**\n         * Minimum allowed angle on the longitudinal axis.\n         * This can help limiting how the Camera is able to move in the scene.\n         */\n        _this.lowerAlphaLimit = null;\n        /**\n         * Maximum allowed angle on the longitudinal axis.\n         * This can help limiting how the Camera is able to move in the scene.\n         */\n        _this.upperAlphaLimit = null;\n        /**\n         * Minimum allowed angle on the latitudinal axis.\n         * This can help limiting how the Camera is able to move in the scene.\n         */\n        _this.lowerBetaLimit = 0.01;\n        /**\n         * Maximum allowed angle on the latitudinal axis.\n         * This can help limiting how the Camera is able to move in the scene.\n         */\n        _this.upperBetaLimit = Math.PI - 0.01;\n        /**\n         * Minimum allowed distance of the camera to the target (The camera can not get closer).\n         * This can help limiting how the Camera is able to move in the scene.\n         */\n        _this.lowerRadiusLimit = null;\n        /**\n         * Maximum allowed distance of the camera to the target (The camera can not get further).\n         * This can help limiting how the Camera is able to move in the scene.\n         */\n        _this.upperRadiusLimit = null;\n        /**\n         * Defines the current inertia value used during panning of the camera along the X axis.\n         */\n        _this.inertialPanningX = 0;\n        /**\n         * Defines the current inertia value used during panning of the camera along the Y axis.\n         */\n        _this.inertialPanningY = 0;\n        /**\n         * Defines the distance used to consider the camera in pan mode vs pinch/zoom.\n         * Basically if your fingers moves away from more than this distance you will be considered\n         * in pinch mode.\n         */\n        _this.pinchToPanMaxDistance = 20;\n        /**\n         * Defines the maximum distance the camera can pan.\n         * This could help keeping the camera always in your scene.\n         */\n        _this.panningDistanceLimit = null;\n        /**\n         * Defines the target of the camera before panning.\n         */\n        _this.panningOriginTarget = Vector3.Zero();\n        /**\n         * Defines the value of the inertia used during panning.\n         * 0 would mean stop inertia and one would mean no deceleration at all.\n         */\n        _this.panningInertia = 0.9;\n        //-- end properties for backward compatibility for inputs\n        /**\n         * Defines how much the radius should be scaled while zooming on a particular mesh (through the zoomOn function)\n         */\n        _this.zoomOnFactor = 1;\n        /**\n         * Defines a screen offset for the camera position.\n         */\n        _this.targetScreenOffset = Vector2.Zero();\n        /**\n         * Allows the camera to be completely reversed.\n         * If false the camera can not arrive upside down.\n         */\n        _this.allowUpsideDown = true;\n        /**\n         * Define if double tap/click is used to restore the previously saved state of the camera.\n         */\n        _this.useInputToRestoreState = true;\n        /** @hidden */\n        _this._viewMatrix = new Matrix();\n        /**\n         * Defines the allowed panning axis.\n         */\n        _this.panningAxis = new Vector3(1, 1, 0);\n        _this._transformedDirection = new Vector3();\n        /**\n         * Defines if camera will eliminate transform on y axis.\n         */\n        _this.mapPanning = false;\n        /**\n         * Observable triggered when the mesh target has been changed on the camera.\n         */\n        _this.onMeshTargetChangedObservable = new Observable();\n        /**\n         * Defines whether the camera should check collision with the objects oh the scene.\n         * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity#how-can-i-do-this\n         */\n        _this.checkCollisions = false;\n        /**\n         * Defines the collision radius of the camera.\n         * This simulates a sphere around the camera.\n         * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity#arcrotatecamera\n         */\n        _this.collisionRadius = new Vector3(0.5, 0.5, 0.5);\n        _this._previousPosition = Vector3.Zero();\n        _this._collisionVelocity = Vector3.Zero();\n        _this._newPosition = Vector3.Zero();\n        _this._computationVector = Vector3.Zero();\n        _this._onCollisionPositionChange = function (collisionId, newPosition, collidedMesh) {\n            if (collidedMesh === void 0) { collidedMesh = null; }\n            if (!collidedMesh) {\n                _this._previousPosition.copyFrom(_this._position);\n            }\n            else {\n                _this.setPosition(newPosition);\n                if (_this.onCollide) {\n                    _this.onCollide(collidedMesh);\n                }\n            }\n            // Recompute because of constraints\n            var cosa = Math.cos(_this.alpha);\n            var sina = Math.sin(_this.alpha);\n            var cosb = Math.cos(_this.beta);\n            var sinb = Math.sin(_this.beta);\n            if (sinb === 0) {\n                sinb = 0.0001;\n            }\n            var target = _this._getTargetPosition();\n            _this._computationVector.copyFromFloats(_this.radius * cosa * sinb, _this.radius * cosb, _this.radius * sina * sinb);\n            target.addToRef(_this._computationVector, _this._newPosition);\n            _this._position.copyFrom(_this._newPosition);\n            var up = _this.upVector;\n            if (_this.allowUpsideDown && _this.beta < 0) {\n                up = up.clone();\n                up = up.negate();\n            }\n            _this._computeViewMatrix(_this._position, target, up);\n            _this._viewMatrix.addAtIndex(12, _this.targetScreenOffset.x);\n            _this._viewMatrix.addAtIndex(13, _this.targetScreenOffset.y);\n            _this._collisionTriggered = false;\n        };\n        _this._target = Vector3.Zero();\n        if (target) {\n            _this.setTarget(target);\n        }\n        _this.alpha = alpha;\n        _this.beta = beta;\n        _this.radius = radius;\n        _this.getViewMatrix();\n        _this.inputs = new ArcRotateCameraInputsManager(_this);\n        _this.inputs.addKeyboard().addMouseWheel().addPointers();\n        return _this;\n    }\n    Object.defineProperty(ArcRotateCamera.prototype, \"target\", {\n        /**\n         * Defines the target point of the camera.\n         * The camera looks towards it from the radius distance.\n         */\n        get: function () {\n            return this._target;\n        },\n        set: function (value) {\n            this.setTarget(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"targetHost\", {\n        /**\n         * Defines the target mesh of the camera.\n         * The camera looks towards it from the radius distance.\n         * Please note that setting a target host will disable panning.\n         */\n        get: function () {\n            return this._targetHost;\n        },\n        set: function (value) {\n            if (value) {\n                this.setTarget(value);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Return the current target position of the camera. This value is expressed in local space.\n     * @returns the target position\n     */\n    ArcRotateCamera.prototype.getTarget = function () {\n        return this.target;\n    };\n    Object.defineProperty(ArcRotateCamera.prototype, \"position\", {\n        /**\n         * Define the current local position of the camera in the scene\n         */\n        get: function () {\n            return this._position;\n        },\n        set: function (newPosition) {\n            this.setPosition(newPosition);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"upVector\", {\n        get: function () {\n            return this._upVector;\n        },\n        /**\n         * The vector the camera should consider as up. (default is Vector3(0, 1, 0) as returned by Vector3.Up())\n         * Setting this will copy the given vector to the camera's upVector, and set rotation matrices to and from Y up.\n         * DO NOT set the up vector using copyFrom or copyFromFloats, as this bypasses setting the above matrices.\n         */\n        set: function (vec) {\n            if (!this._upToYMatrix) {\n                this._yToUpMatrix = new Matrix();\n                this._upToYMatrix = new Matrix();\n                this._upVector = Vector3.Zero();\n            }\n            vec.normalize();\n            this._upVector.copyFrom(vec);\n            this.setMatUp();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Sets the Y-up to camera up-vector rotation matrix, and the up-vector to Y-up rotation matrix.\n     */\n    ArcRotateCamera.prototype.setMatUp = function () {\n        // from y-up to custom-up (used in _getViewMatrix)\n        Matrix.RotationAlignToRef(Vector3.UpReadOnly, this._upVector, this._yToUpMatrix);\n        // from custom-up to y-up (used in rebuildAnglesAndRadius)\n        Matrix.RotationAlignToRef(this._upVector, Vector3.UpReadOnly, this._upToYMatrix);\n    };\n    Object.defineProperty(ArcRotateCamera.prototype, \"angularSensibilityX\", {\n        //-- begin properties for backward compatibility for inputs\n        /**\n         * Gets or Set the pointer angular sensibility  along the X axis or how fast is the camera rotating.\n         */\n        get: function () {\n            var pointers = this.inputs.attached[\"pointers\"];\n            if (pointers) {\n                return pointers.angularSensibilityX;\n            }\n            return 0;\n        },\n        set: function (value) {\n            var pointers = this.inputs.attached[\"pointers\"];\n            if (pointers) {\n                pointers.angularSensibilityX = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"angularSensibilityY\", {\n        /**\n         * Gets or Set the pointer angular sensibility along the Y axis or how fast is the camera rotating.\n         */\n        get: function () {\n            var pointers = this.inputs.attached[\"pointers\"];\n            if (pointers) {\n                return pointers.angularSensibilityY;\n            }\n            return 0;\n        },\n        set: function (value) {\n            var pointers = this.inputs.attached[\"pointers\"];\n            if (pointers) {\n                pointers.angularSensibilityY = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"pinchPrecision\", {\n        /**\n         * Gets or Set the pointer pinch precision or how fast is the camera zooming.\n         */\n        get: function () {\n            var pointers = this.inputs.attached[\"pointers\"];\n            if (pointers) {\n                return pointers.pinchPrecision;\n            }\n            return 0;\n        },\n        set: function (value) {\n            var pointers = this.inputs.attached[\"pointers\"];\n            if (pointers) {\n                pointers.pinchPrecision = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"pinchDeltaPercentage\", {\n        /**\n         * Gets or Set the pointer pinch delta percentage or how fast is the camera zooming.\n         * It will be used instead of pinchDeltaPrecision if different from 0.\n         * It defines the percentage of current camera.radius to use as delta when pinch zoom is used.\n         */\n        get: function () {\n            var pointers = this.inputs.attached[\"pointers\"];\n            if (pointers) {\n                return pointers.pinchDeltaPercentage;\n            }\n            return 0;\n        },\n        set: function (value) {\n            var pointers = this.inputs.attached[\"pointers\"];\n            if (pointers) {\n                pointers.pinchDeltaPercentage = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"useNaturalPinchZoom\", {\n        /**\n         * Gets or Set the pointer use natural pinch zoom to override the pinch precision\n         * and pinch delta percentage.\n         * When useNaturalPinchZoom is true, multi touch zoom will zoom in such\n         * that any object in the plane at the camera's target point will scale\n         * perfectly with finger motion.\n         */\n        get: function () {\n            var pointers = this.inputs.attached[\"pointers\"];\n            if (pointers) {\n                return pointers.useNaturalPinchZoom;\n            }\n            return false;\n        },\n        set: function (value) {\n            var pointers = this.inputs.attached[\"pointers\"];\n            if (pointers) {\n                pointers.useNaturalPinchZoom = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"panningSensibility\", {\n        /**\n         * Gets or Set the pointer panning sensibility or how fast is the camera moving.\n         */\n        get: function () {\n            var pointers = this.inputs.attached[\"pointers\"];\n            if (pointers) {\n                return pointers.panningSensibility;\n            }\n            return 0;\n        },\n        set: function (value) {\n            var pointers = this.inputs.attached[\"pointers\"];\n            if (pointers) {\n                pointers.panningSensibility = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"keysUp\", {\n        /**\n         * Gets or Set the list of keyboard keys used to control beta angle in a positive direction.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysUp;\n            }\n            return [];\n        },\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysUp = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"keysDown\", {\n        /**\n         * Gets or Set the list of keyboard keys used to control beta angle in a negative direction.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysDown;\n            }\n            return [];\n        },\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysDown = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"keysLeft\", {\n        /**\n         * Gets or Set the list of keyboard keys used to control alpha angle in a negative direction.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysLeft;\n            }\n            return [];\n        },\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysLeft = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"keysRight\", {\n        /**\n         * Gets or Set the list of keyboard keys used to control alpha angle in a positive direction.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysRight;\n            }\n            return [];\n        },\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysRight = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"wheelPrecision\", {\n        /**\n         * Gets or Set the mouse wheel precision or how fast is the camera zooming.\n         */\n        get: function () {\n            var mousewheel = this.inputs.attached[\"mousewheel\"];\n            if (mousewheel) {\n                return mousewheel.wheelPrecision;\n            }\n            return 0;\n        },\n        set: function (value) {\n            var mousewheel = this.inputs.attached[\"mousewheel\"];\n            if (mousewheel) {\n                mousewheel.wheelPrecision = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"zoomToMouseLocation\", {\n        /**\n         * Gets or Set the boolean value that controls whether or not the mouse wheel\n         * zooms to the location of the mouse pointer or not.  The default is false.\n         */\n        get: function () {\n            var mousewheel = this.inputs.attached[\"mousewheel\"];\n            if (mousewheel) {\n                return mousewheel.zoomToMouseLocation;\n            }\n            return false;\n        },\n        set: function (value) {\n            var mousewheel = this.inputs.attached[\"mousewheel\"];\n            if (mousewheel) {\n                mousewheel.zoomToMouseLocation = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"wheelDeltaPercentage\", {\n        /**\n         * Gets or Set the mouse wheel delta percentage or how fast is the camera zooming.\n         * It will be used instead of pinchDeltaPrecision if different from 0.\n         * It defines the percentage of current camera.radius to use as delta when pinch zoom is used.\n         */\n        get: function () {\n            var mousewheel = this.inputs.attached[\"mousewheel\"];\n            if (mousewheel) {\n                return mousewheel.wheelDeltaPercentage;\n            }\n            return 0;\n        },\n        set: function (value) {\n            var mousewheel = this.inputs.attached[\"mousewheel\"];\n            if (mousewheel) {\n                mousewheel.wheelDeltaPercentage = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"bouncingBehavior\", {\n        /**\n         * Gets the bouncing behavior of the camera if it has been enabled.\n         * @see https://doc.babylonjs.com/how_to/camera_behaviors#bouncing-behavior\n         */\n        get: function () {\n            return this._bouncingBehavior;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"useBouncingBehavior\", {\n        /**\n         * Defines if the bouncing behavior of the camera is enabled on the camera.\n         * @see https://doc.babylonjs.com/how_to/camera_behaviors#bouncing-behavior\n         */\n        get: function () {\n            return this._bouncingBehavior != null;\n        },\n        set: function (value) {\n            if (value === this.useBouncingBehavior) {\n                return;\n            }\n            if (value) {\n                this._bouncingBehavior = new BouncingBehavior();\n                this.addBehavior(this._bouncingBehavior);\n            }\n            else if (this._bouncingBehavior) {\n                this.removeBehavior(this._bouncingBehavior);\n                this._bouncingBehavior = null;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"framingBehavior\", {\n        /**\n         * Gets the framing behavior of the camera if it has been enabled.\n         * @see https://doc.babylonjs.com/how_to/camera_behaviors#framing-behavior\n         */\n        get: function () {\n            return this._framingBehavior;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"useFramingBehavior\", {\n        /**\n         * Defines if the framing behavior of the camera is enabled on the camera.\n         * @see https://doc.babylonjs.com/how_to/camera_behaviors#framing-behavior\n         */\n        get: function () {\n            return this._framingBehavior != null;\n        },\n        set: function (value) {\n            if (value === this.useFramingBehavior) {\n                return;\n            }\n            if (value) {\n                this._framingBehavior = new FramingBehavior();\n                this.addBehavior(this._framingBehavior);\n            }\n            else if (this._framingBehavior) {\n                this.removeBehavior(this._framingBehavior);\n                this._framingBehavior = null;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"autoRotationBehavior\", {\n        /**\n         * Gets the auto rotation behavior of the camera if it has been enabled.\n         * @see https://doc.babylonjs.com/how_to/camera_behaviors#autorotation-behavior\n         */\n        get: function () {\n            return this._autoRotationBehavior;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ArcRotateCamera.prototype, \"useAutoRotationBehavior\", {\n        /**\n         * Defines if the auto rotation behavior of the camera is enabled on the camera.\n         * @see https://doc.babylonjs.com/how_to/camera_behaviors#autorotation-behavior\n         */\n        get: function () {\n            return this._autoRotationBehavior != null;\n        },\n        set: function (value) {\n            if (value === this.useAutoRotationBehavior) {\n                return;\n            }\n            if (value) {\n                this._autoRotationBehavior = new AutoRotationBehavior();\n                this.addBehavior(this._autoRotationBehavior);\n            }\n            else if (this._autoRotationBehavior) {\n                this.removeBehavior(this._autoRotationBehavior);\n                this._autoRotationBehavior = null;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // Cache\n    /** @hidden */\n    ArcRotateCamera.prototype._initCache = function () {\n        _super.prototype._initCache.call(this);\n        this._cache._target = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this._cache.alpha = undefined;\n        this._cache.beta = undefined;\n        this._cache.radius = undefined;\n        this._cache.targetScreenOffset = Vector2.Zero();\n    };\n    /**\n     * @param ignoreParentClass\n     * @hidden\n     */\n    ArcRotateCamera.prototype._updateCache = function (ignoreParentClass) {\n        if (!ignoreParentClass) {\n            _super.prototype._updateCache.call(this);\n        }\n        this._cache._target.copyFrom(this._getTargetPosition());\n        this._cache.alpha = this.alpha;\n        this._cache.beta = this.beta;\n        this._cache.radius = this.radius;\n        this._cache.targetScreenOffset.copyFrom(this.targetScreenOffset);\n    };\n    ArcRotateCamera.prototype._getTargetPosition = function () {\n        if (this._targetHost && this._targetHost.getAbsolutePosition) {\n            var pos = this._targetHost.getAbsolutePosition();\n            if (this._targetBoundingCenter) {\n                pos.addToRef(this._targetBoundingCenter, this._target);\n            }\n            else {\n                this._target.copyFrom(pos);\n            }\n        }\n        var lockedTargetPosition = this._getLockedTargetPosition();\n        if (lockedTargetPosition) {\n            return lockedTargetPosition;\n        }\n        return this._target;\n    };\n    /**\n     * Stores the current state of the camera (alpha, beta, radius and target)\n     * @returns the camera itself\n     */\n    ArcRotateCamera.prototype.storeState = function () {\n        this._storedAlpha = this.alpha;\n        this._storedBeta = this.beta;\n        this._storedRadius = this.radius;\n        this._storedTarget = this._getTargetPosition().clone();\n        this._storedTargetScreenOffset = this.targetScreenOffset.clone();\n        return _super.prototype.storeState.call(this);\n    };\n    /**\n     * @hidden\n     * Restored camera state. You must call storeState() first\n     */\n    ArcRotateCamera.prototype._restoreStateValues = function () {\n        if (!_super.prototype._restoreStateValues.call(this)) {\n            return false;\n        }\n        this.setTarget(this._storedTarget.clone());\n        this.alpha = this._storedAlpha;\n        this.beta = this._storedBeta;\n        this.radius = this._storedRadius;\n        this.targetScreenOffset = this._storedTargetScreenOffset.clone();\n        this.inertialAlphaOffset = 0;\n        this.inertialBetaOffset = 0;\n        this.inertialRadiusOffset = 0;\n        this.inertialPanningX = 0;\n        this.inertialPanningY = 0;\n        return true;\n    };\n    // Synchronized\n    /** @hidden */\n    ArcRotateCamera.prototype._isSynchronizedViewMatrix = function () {\n        if (!_super.prototype._isSynchronizedViewMatrix.call(this)) {\n            return false;\n        }\n        return (this._cache._target.equals(this._getTargetPosition()) &&\n            this._cache.alpha === this.alpha &&\n            this._cache.beta === this.beta &&\n            this._cache.radius === this.radius &&\n            this._cache.targetScreenOffset.equals(this.targetScreenOffset));\n    };\n    /**\n     * Attached controls to the current camera.\n     * @param ignored defines an ignored parameter kept for backward compatibility.\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     * @param useCtrlForPanning  Defines whether ctrl is used for panning within the controls\n     * @param panningMouseButton Defines whether panning is allowed through mouse click button\n     */\n    ArcRotateCamera.prototype.attachControl = function (ignored, noPreventDefault, useCtrlForPanning, panningMouseButton) {\n        var _this = this;\n        if (useCtrlForPanning === void 0) { useCtrlForPanning = true; }\n        if (panningMouseButton === void 0) { panningMouseButton = 2; }\n        // eslint-disable-next-line prefer-rest-params\n        var args = arguments;\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(args);\n        this._useCtrlForPanning = useCtrlForPanning;\n        this._panningMouseButton = panningMouseButton;\n        // backwards compatibility\n        if (typeof args[0] === \"boolean\") {\n            if (args.length > 1) {\n                this._useCtrlForPanning = args[1];\n            }\n            if (args.length > 2) {\n                this._panningMouseButton = args[2];\n            }\n        }\n        this.inputs.attachElement(noPreventDefault);\n        this._reset = function () {\n            _this.inertialAlphaOffset = 0;\n            _this.inertialBetaOffset = 0;\n            _this.inertialRadiusOffset = 0;\n            _this.inertialPanningX = 0;\n            _this.inertialPanningY = 0;\n        };\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    ArcRotateCamera.prototype.detachControl = function () {\n        this.inputs.detachElement();\n        if (this._reset) {\n            this._reset();\n        }\n    };\n    /** @hidden */\n    ArcRotateCamera.prototype._checkInputs = function () {\n        //if (async) collision inspection was triggered, don't update the camera's position - until the collision callback was called.\n        if (this._collisionTriggered) {\n            return;\n        }\n        this.inputs.checkInputs();\n        // Inertia\n        if (this.inertialAlphaOffset !== 0 || this.inertialBetaOffset !== 0 || this.inertialRadiusOffset !== 0) {\n            var inertialAlphaOffset = this.inertialAlphaOffset;\n            if (this.beta <= 0) {\n                inertialAlphaOffset *= -1;\n            }\n            if (this.getScene().useRightHandedSystem) {\n                inertialAlphaOffset *= -1;\n            }\n            if (this.parent && this.parent._getWorldMatrixDeterminant() < 0) {\n                inertialAlphaOffset *= -1;\n            }\n            this.alpha += inertialAlphaOffset;\n            this.beta += this.inertialBetaOffset;\n            this.radius -= this.inertialRadiusOffset;\n            this.inertialAlphaOffset *= this.inertia;\n            this.inertialBetaOffset *= this.inertia;\n            this.inertialRadiusOffset *= this.inertia;\n            if (Math.abs(this.inertialAlphaOffset) < Epsilon) {\n                this.inertialAlphaOffset = 0;\n            }\n            if (Math.abs(this.inertialBetaOffset) < Epsilon) {\n                this.inertialBetaOffset = 0;\n            }\n            if (Math.abs(this.inertialRadiusOffset) < this.speed * Epsilon) {\n                this.inertialRadiusOffset = 0;\n            }\n        }\n        // Panning inertia\n        if (this.inertialPanningX !== 0 || this.inertialPanningY !== 0) {\n            var localDirection = new Vector3(this.inertialPanningX, this.inertialPanningY, this.inertialPanningY);\n            this._viewMatrix.invertToRef(this._cameraTransformMatrix);\n            localDirection.multiplyInPlace(this.panningAxis);\n            Vector3.TransformNormalToRef(localDirection, this._cameraTransformMatrix, this._transformedDirection);\n            // Eliminate y if mapPanning is enabled\n            if (this.mapPanning || !this.panningAxis.y) {\n                this._transformedDirection.y = 0;\n            }\n            if (!this._targetHost) {\n                if (this.panningDistanceLimit) {\n                    this._transformedDirection.addInPlace(this._target);\n                    var distanceSquared = Vector3.DistanceSquared(this._transformedDirection, this.panningOriginTarget);\n                    if (distanceSquared <= this.panningDistanceLimit * this.panningDistanceLimit) {\n                        this._target.copyFrom(this._transformedDirection);\n                    }\n                }\n                else {\n                    this._target.addInPlace(this._transformedDirection);\n                }\n            }\n            this.inertialPanningX *= this.panningInertia;\n            this.inertialPanningY *= this.panningInertia;\n            if (Math.abs(this.inertialPanningX) < this.speed * Epsilon) {\n                this.inertialPanningX = 0;\n            }\n            if (Math.abs(this.inertialPanningY) < this.speed * Epsilon) {\n                this.inertialPanningY = 0;\n            }\n        }\n        // Limits\n        this._checkLimits();\n        _super.prototype._checkInputs.call(this);\n    };\n    ArcRotateCamera.prototype._checkLimits = function () {\n        if (this.lowerBetaLimit === null || this.lowerBetaLimit === undefined) {\n            if (this.allowUpsideDown && this.beta > Math.PI) {\n                this.beta = this.beta - 2 * Math.PI;\n            }\n        }\n        else {\n            if (this.beta < this.lowerBetaLimit) {\n                this.beta = this.lowerBetaLimit;\n            }\n        }\n        if (this.upperBetaLimit === null || this.upperBetaLimit === undefined) {\n            if (this.allowUpsideDown && this.beta < -Math.PI) {\n                this.beta = this.beta + 2 * Math.PI;\n            }\n        }\n        else {\n            if (this.beta > this.upperBetaLimit) {\n                this.beta = this.upperBetaLimit;\n            }\n        }\n        if (this.lowerAlphaLimit !== null && this.alpha < this.lowerAlphaLimit) {\n            this.alpha = this.lowerAlphaLimit;\n        }\n        if (this.upperAlphaLimit !== null && this.alpha > this.upperAlphaLimit) {\n            this.alpha = this.upperAlphaLimit;\n        }\n        if (this.lowerRadiusLimit !== null && this.radius < this.lowerRadiusLimit) {\n            this.radius = this.lowerRadiusLimit;\n            this.inertialRadiusOffset = 0;\n        }\n        if (this.upperRadiusLimit !== null && this.radius > this.upperRadiusLimit) {\n            this.radius = this.upperRadiusLimit;\n            this.inertialRadiusOffset = 0;\n        }\n    };\n    /**\n     * Rebuilds angles (alpha, beta) and radius from the give position and target\n     */\n    ArcRotateCamera.prototype.rebuildAnglesAndRadius = function () {\n        this._position.subtractToRef(this._getTargetPosition(), this._computationVector);\n        // need to rotate to Y up equivalent if up vector not Axis.Y\n        if (this._upVector.x !== 0 || this._upVector.y !== 1.0 || this._upVector.z !== 0) {\n            Vector3.TransformCoordinatesToRef(this._computationVector, this._upToYMatrix, this._computationVector);\n        }\n        this.radius = this._computationVector.length();\n        if (this.radius === 0) {\n            this.radius = 0.0001; // Just to avoid division by zero\n        }\n        // Alpha\n        var previousAlpha = this.alpha;\n        if (this._computationVector.x === 0 && this._computationVector.z === 0) {\n            this.alpha = Math.PI / 2; // avoid division by zero when looking along up axis, and set to acos(0)\n        }\n        else {\n            this.alpha = Math.acos(this._computationVector.x / Math.sqrt(Math.pow(this._computationVector.x, 2) + Math.pow(this._computationVector.z, 2)));\n        }\n        if (this._computationVector.z < 0) {\n            this.alpha = 2 * Math.PI - this.alpha;\n        }\n        // Calculate the number of revolutions between the new and old alpha values.\n        var alphaCorrectionTurns = Math.round((previousAlpha - this.alpha) / (2.0 * Math.PI));\n        // Adjust alpha so that its numerical representation is the closest one to the old value.\n        this.alpha += alphaCorrectionTurns * 2.0 * Math.PI;\n        // Beta\n        this.beta = Math.acos(this._computationVector.y / this.radius);\n        this._checkLimits();\n    };\n    /**\n     * Use a position to define the current camera related information like alpha, beta and radius\n     * @param position Defines the position to set the camera at\n     */\n    ArcRotateCamera.prototype.setPosition = function (position) {\n        if (this._position.equals(position)) {\n            return;\n        }\n        this._position.copyFrom(position);\n        this.rebuildAnglesAndRadius();\n    };\n    /**\n     * Defines the target the camera should look at.\n     * This will automatically adapt alpha beta and radius to fit within the new target.\n     * Please note that setting a target as a mesh will disable panning.\n     * @param target Defines the new target as a Vector or a mesh\n     * @param toBoundingCenter In case of a mesh target, defines whether to target the mesh position or its bounding information center\n     * @param allowSamePosition If false, prevents reapplying the new computed position if it is identical to the current one (optim)\n     * @param cloneAlphaBetaRadius If true, replicate the current setup (alpha, beta, radius) on the new target\n     */\n    ArcRotateCamera.prototype.setTarget = function (target, toBoundingCenter, allowSamePosition, cloneAlphaBetaRadius) {\n        var _a;\n        if (toBoundingCenter === void 0) { toBoundingCenter = false; }\n        if (allowSamePosition === void 0) { allowSamePosition = false; }\n        if (cloneAlphaBetaRadius === void 0) { cloneAlphaBetaRadius = false; }\n        cloneAlphaBetaRadius = (_a = this.overrideCloneAlphaBetaRadius) !== null && _a !== void 0 ? _a : cloneAlphaBetaRadius;\n        if (target.getBoundingInfo) {\n            if (toBoundingCenter) {\n                this._targetBoundingCenter = target.getBoundingInfo().boundingBox.centerWorld.clone();\n            }\n            else {\n                this._targetBoundingCenter = null;\n            }\n            target.computeWorldMatrix();\n            this._targetHost = target;\n            this._target = this._getTargetPosition();\n            this.onMeshTargetChangedObservable.notifyObservers(this._targetHost);\n        }\n        else {\n            var newTarget = target;\n            var currentTarget = this._getTargetPosition();\n            if (currentTarget && !allowSamePosition && currentTarget.equals(newTarget)) {\n                return;\n            }\n            this._targetHost = null;\n            this._target = newTarget;\n            this._targetBoundingCenter = null;\n            this.onMeshTargetChangedObservable.notifyObservers(null);\n        }\n        if (!cloneAlphaBetaRadius) {\n            this.rebuildAnglesAndRadius();\n        }\n    };\n    /** @hidden */\n    ArcRotateCamera.prototype._getViewMatrix = function () {\n        // Compute\n        var cosa = Math.cos(this.alpha);\n        var sina = Math.sin(this.alpha);\n        var cosb = Math.cos(this.beta);\n        var sinb = Math.sin(this.beta);\n        if (sinb === 0) {\n            sinb = 0.0001;\n        }\n        if (this.radius === 0) {\n            this.radius = 0.0001; // Just to avoid division by zero\n        }\n        var target = this._getTargetPosition();\n        this._computationVector.copyFromFloats(this.radius * cosa * sinb, this.radius * cosb, this.radius * sina * sinb);\n        // Rotate according to up vector\n        if (this._upVector.x !== 0 || this._upVector.y !== 1.0 || this._upVector.z !== 0) {\n            Vector3.TransformCoordinatesToRef(this._computationVector, this._yToUpMatrix, this._computationVector);\n        }\n        target.addToRef(this._computationVector, this._newPosition);\n        if (this.getScene().collisionsEnabled && this.checkCollisions) {\n            var coordinator = this.getScene().collisionCoordinator;\n            if (!this._collider) {\n                this._collider = coordinator.createCollider();\n            }\n            this._collider._radius = this.collisionRadius;\n            this._newPosition.subtractToRef(this._position, this._collisionVelocity);\n            this._collisionTriggered = true;\n            coordinator.getNewPosition(this._position, this._collisionVelocity, this._collider, 3, null, this._onCollisionPositionChange, this.uniqueId);\n        }\n        else {\n            this._position.copyFrom(this._newPosition);\n            var up = this.upVector;\n            if (this.allowUpsideDown && sinb < 0) {\n                up = up.negate();\n            }\n            this._computeViewMatrix(this._position, target, up);\n            this._viewMatrix.addAtIndex(12, this.targetScreenOffset.x);\n            this._viewMatrix.addAtIndex(13, this.targetScreenOffset.y);\n        }\n        this._currentTarget = target;\n        return this._viewMatrix;\n    };\n    /**\n     * Zooms on a mesh to be at the min distance where we could see it fully in the current viewport.\n     * @param meshes Defines the mesh to zoom on\n     * @param doNotUpdateMaxZ Defines whether or not maxZ should be updated whilst zooming on the mesh (this can happen if the mesh is big and the maxradius pretty small for instance)\n     */\n    ArcRotateCamera.prototype.zoomOn = function (meshes, doNotUpdateMaxZ) {\n        if (doNotUpdateMaxZ === void 0) { doNotUpdateMaxZ = false; }\n        meshes = meshes || this.getScene().meshes;\n        var minMaxVector = Mesh.MinMax(meshes);\n        var distance = Vector3.Distance(minMaxVector.min, minMaxVector.max);\n        this.radius = distance * this.zoomOnFactor;\n        this.focusOn({ min: minMaxVector.min, max: minMaxVector.max, distance: distance }, doNotUpdateMaxZ);\n    };\n    /**\n     * Focus on a mesh or a bounding box. This adapts the target and maxRadius if necessary but does not update the current radius.\n     * The target will be changed but the radius\n     * @param meshesOrMinMaxVectorAndDistance Defines the mesh or bounding info to focus on\n     * @param doNotUpdateMaxZ Defines whether or not maxZ should be updated whilst zooming on the mesh (this can happen if the mesh is big and the maxradius pretty small for instance)\n     */\n    ArcRotateCamera.prototype.focusOn = function (meshesOrMinMaxVectorAndDistance, doNotUpdateMaxZ) {\n        if (doNotUpdateMaxZ === void 0) { doNotUpdateMaxZ = false; }\n        var meshesOrMinMaxVector;\n        var distance;\n        if (meshesOrMinMaxVectorAndDistance.min === undefined) {\n            // meshes\n            var meshes = meshesOrMinMaxVectorAndDistance || this.getScene().meshes;\n            meshesOrMinMaxVector = Mesh.MinMax(meshes);\n            distance = Vector3.Distance(meshesOrMinMaxVector.min, meshesOrMinMaxVector.max);\n        }\n        else {\n            //minMaxVector and distance\n            var minMaxVectorAndDistance = meshesOrMinMaxVectorAndDistance;\n            meshesOrMinMaxVector = minMaxVectorAndDistance;\n            distance = minMaxVectorAndDistance.distance;\n        }\n        this._target = Mesh.Center(meshesOrMinMaxVector);\n        if (!doNotUpdateMaxZ) {\n            this.maxZ = distance * 2;\n        }\n    };\n    /**\n     * @override\n     * Override Camera.createRigCamera\n     */\n    ArcRotateCamera.prototype.createRigCamera = function (name, cameraIndex) {\n        var alphaShift = 0;\n        switch (this.cameraRigMode) {\n            case Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH:\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL:\n            case Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER:\n            case Camera.RIG_MODE_STEREOSCOPIC_INTERLACED:\n            case Camera.RIG_MODE_VR:\n                alphaShift = this._cameraRigParams.stereoHalfAngle * (cameraIndex === 0 ? 1 : -1);\n                break;\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED:\n                alphaShift = this._cameraRigParams.stereoHalfAngle * (cameraIndex === 0 ? -1 : 1);\n                break;\n        }\n        var rigCam = new ArcRotateCamera(name, this.alpha + alphaShift, this.beta, this.radius, this._target, this.getScene());\n        rigCam._cameraRigParams = {};\n        rigCam.isRigCamera = true;\n        rigCam.rigParent = this;\n        rigCam.upVector = this.upVector;\n        return rigCam;\n    };\n    /**\n     * @hidden\n     * @override\n     * Override Camera._updateRigCameras\n     */\n    ArcRotateCamera.prototype._updateRigCameras = function () {\n        var camLeft = this._rigCameras[0];\n        var camRight = this._rigCameras[1];\n        camLeft.beta = camRight.beta = this.beta;\n        switch (this.cameraRigMode) {\n            case Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH:\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL:\n            case Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER:\n            case Camera.RIG_MODE_STEREOSCOPIC_INTERLACED:\n            case Camera.RIG_MODE_VR:\n                camLeft.alpha = this.alpha - this._cameraRigParams.stereoHalfAngle;\n                camRight.alpha = this.alpha + this._cameraRigParams.stereoHalfAngle;\n                break;\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED:\n                camLeft.alpha = this.alpha + this._cameraRigParams.stereoHalfAngle;\n                camRight.alpha = this.alpha - this._cameraRigParams.stereoHalfAngle;\n                break;\n        }\n        _super.prototype._updateRigCameras.call(this);\n    };\n    /**\n     * Destroy the camera and release the current resources hold by it.\n     */\n    ArcRotateCamera.prototype.dispose = function () {\n        this.inputs.clear();\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Gets the current object class name.\n     * @return the class name\n     */\n    ArcRotateCamera.prototype.getClassName = function () {\n        return \"ArcRotateCamera\";\n    };\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"alpha\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"beta\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"radius\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"overrideCloneAlphaBetaRadius\", void 0);\n    __decorate([\n        serializeAsVector3(\"target\")\n    ], ArcRotateCamera.prototype, \"_target\", void 0);\n    __decorate([\n        serializeAsMeshReference(\"targetHost\")\n    ], ArcRotateCamera.prototype, \"_targetHost\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"inertialAlphaOffset\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"inertialBetaOffset\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"inertialRadiusOffset\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"lowerAlphaLimit\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"upperAlphaLimit\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"lowerBetaLimit\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"upperBetaLimit\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"lowerRadiusLimit\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"upperRadiusLimit\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"inertialPanningX\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"inertialPanningY\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"pinchToPanMaxDistance\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"panningDistanceLimit\", void 0);\n    __decorate([\n        serializeAsVector3()\n    ], ArcRotateCamera.prototype, \"panningOriginTarget\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"panningInertia\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"zoomToMouseLocation\", null);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"zoomOnFactor\", void 0);\n    __decorate([\n        serializeAsVector2()\n    ], ArcRotateCamera.prototype, \"targetScreenOffset\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"allowUpsideDown\", void 0);\n    __decorate([\n        serialize()\n    ], ArcRotateCamera.prototype, \"useInputToRestoreState\", void 0);\n    return ArcRotateCamera;\n}(TargetCamera));\nexport { ArcRotateCamera };\n//# sourceMappingURL=arcRotateCamera.js.map","import { __extends } from \"tslib\";\nimport { ArcRotateCameraPointersInput } from \"../Cameras/Inputs/arcRotateCameraPointersInput.js\";\nimport { ArcRotateCameraKeyboardMoveInput } from \"../Cameras/Inputs/arcRotateCameraKeyboardMoveInput.js\";\nimport { ArcRotateCameraMouseWheelInput } from \"../Cameras/Inputs/arcRotateCameraMouseWheelInput.js\";\nimport { CameraInputsManager } from \"../Cameras/cameraInputsManager.js\";\n/**\n * Default Inputs manager for the ArcRotateCamera.\n * It groups all the default supported inputs for ease of use.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar ArcRotateCameraInputsManager = /** @class */ (function (_super) {\n    __extends(ArcRotateCameraInputsManager, _super);\n    /**\n     * Instantiates a new ArcRotateCameraInputsManager.\n     * @param camera Defines the camera the inputs belong to\n     */\n    function ArcRotateCameraInputsManager(camera) {\n        return _super.call(this, camera) || this;\n    }\n    /**\n     * Add mouse wheel input support to the input manager.\n     * @returns the current input manager\n     */\n    ArcRotateCameraInputsManager.prototype.addMouseWheel = function () {\n        this.add(new ArcRotateCameraMouseWheelInput());\n        return this;\n    };\n    /**\n     * Add pointers input support to the input manager.\n     * @returns the current input manager\n     */\n    ArcRotateCameraInputsManager.prototype.addPointers = function () {\n        this.add(new ArcRotateCameraPointersInput());\n        return this;\n    };\n    /**\n     * Add keyboard input support to the input manager.\n     * @returns the current input manager\n     */\n    ArcRotateCameraInputsManager.prototype.addKeyboard = function () {\n        this.add(new ArcRotateCameraKeyboardMoveInput());\n        return this;\n    };\n    return ArcRotateCameraInputsManager;\n}(CameraInputsManager));\nexport { ArcRotateCameraInputsManager };\n//# sourceMappingURL=arcRotateCameraInputsManager.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize, SerializationHelper, serializeAsVector3 } from \"../Misc/decorators.js\";\nimport { SmartArray } from \"../Misc/smartArray.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Matrix, Vector3, Quaternion } from \"../Maths/math.vector.js\";\nimport { Node } from \"../node.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { GetClass } from \"../Misc/typeStore.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\nimport { Viewport } from \"../Maths/math.viewport.js\";\nimport { Frustum } from \"../Maths/math.frustum.js\";\n\n/**\n * This is the base class of all the camera used in the application.\n * @see https://doc.babylonjs.com/features/cameras\n */\nvar Camera = /** @class */ (function (_super) {\n    __extends(Camera, _super);\n    /**\n     * Instantiates a new camera object.\n     * This should not be used directly but through the inherited cameras: ArcRotate, Free...\n     * @see https://doc.babylonjs.com/features/cameras\n     * @param name Defines the name of the camera in the scene\n     * @param position Defines the position of the camera\n     * @param scene Defines the scene the camera belongs too\n     * @param setActiveOnSceneIfNoneActive Defines if the camera should be set as active after creation if no other camera have been defined in the scene\n     */\n    function Camera(name, position, scene, setActiveOnSceneIfNoneActive) {\n        if (setActiveOnSceneIfNoneActive === void 0) { setActiveOnSceneIfNoneActive = true; }\n        var _this = _super.call(this, name, scene) || this;\n        /** @hidden */\n        _this._position = Vector3.Zero();\n        _this._upVector = Vector3.Up();\n        /**\n         * Define the current limit on the left side for an orthographic camera\n         * In scene unit\n         */\n        _this.orthoLeft = null;\n        /**\n         * Define the current limit on the right side for an orthographic camera\n         * In scene unit\n         */\n        _this.orthoRight = null;\n        /**\n         * Define the current limit on the bottom side for an orthographic camera\n         * In scene unit\n         */\n        _this.orthoBottom = null;\n        /**\n         * Define the current limit on the top side for an orthographic camera\n         * In scene unit\n         */\n        _this.orthoTop = null;\n        /**\n         * Field Of View is set in Radians. (default is 0.8)\n         */\n        _this.fov = 0.8;\n        /**\n         * Projection plane tilt around the X axis (horizontal), set in Radians. (default is 0)\n         * Can be used to make vertical lines in world space actually vertical on the screen.\n         * See https://forum.babylonjs.com/t/add-vertical-shift-to-3ds-max-exporter-babylon-cameras/17480\n         */\n        _this.projectionPlaneTilt = 0;\n        /**\n         * Define the minimum distance the camera can see from.\n         * This is important to note that the depth buffer are not infinite and the closer it starts\n         * the more your scene might encounter depth fighting issue.\n         */\n        _this.minZ = 1;\n        /**\n         * Define the maximum distance the camera can see to.\n         * This is important to note that the depth buffer are not infinite and the further it end\n         * the more your scene might encounter depth fighting issue.\n         */\n        _this.maxZ = 10000.0;\n        /**\n         * Define the default inertia of the camera.\n         * This helps giving a smooth feeling to the camera movement.\n         */\n        _this.inertia = 0.9;\n        /**\n         * Define the mode of the camera (Camera.PERSPECTIVE_CAMERA or Camera.ORTHOGRAPHIC_CAMERA)\n         */\n        _this.mode = Camera.PERSPECTIVE_CAMERA;\n        /**\n         * Define whether the camera is intermediate.\n         * This is useful to not present the output directly to the screen in case of rig without post process for instance\n         */\n        _this.isIntermediate = false;\n        /**\n         * Define the viewport of the camera.\n         * This correspond to the portion of the screen the camera will render to in normalized 0 to 1 unit.\n         */\n        _this.viewport = new Viewport(0, 0, 1.0, 1.0);\n        /**\n         * Restricts the camera to viewing objects with the same layerMask.\n         * A camera with a layerMask of 1 will render mesh.layerMask & camera.layerMask!== 0\n         */\n        _this.layerMask = 0x0fffffff;\n        /**\n         * fovMode sets the camera frustum bounds to the viewport bounds. (default is FOVMODE_VERTICAL_FIXED)\n         */\n        _this.fovMode = Camera.FOVMODE_VERTICAL_FIXED;\n        /**\n         * Rig mode of the camera.\n         * This is useful to create the camera with two \"eyes\" instead of one to create VR or stereoscopic scenes.\n         * This is normally controlled byt the camera themselves as internal use.\n         */\n        _this.cameraRigMode = Camera.RIG_MODE_NONE;\n        /**\n         * Defines the list of custom render target which are rendered to and then used as the input to this camera's render. Eg. display another camera view on a TV in the main scene\n         * This is pretty helpful if you wish to make a camera render to a texture you could reuse somewhere\n         * else in the scene. (Eg. security camera)\n         *\n         * To change the final output target of the camera, camera.outputRenderTarget should be used instead (eg. webXR renders to a render target corresponding to an HMD)\n         */\n        _this.customRenderTargets = new Array();\n        /**\n         * When set, the camera will render to this render target instead of the default canvas\n         *\n         * If the desire is to use the output of a camera as a texture in the scene consider using camera.customRenderTargets instead\n         */\n        _this.outputRenderTarget = null;\n        /**\n         * Observable triggered when the camera view matrix has changed.\n         */\n        _this.onViewMatrixChangedObservable = new Observable();\n        /**\n         * Observable triggered when the camera Projection matrix has changed.\n         */\n        _this.onProjectionMatrixChangedObservable = new Observable();\n        /**\n         * Observable triggered when the inputs have been processed.\n         */\n        _this.onAfterCheckInputsObservable = new Observable();\n        /**\n         * Observable triggered when reset has been called and applied to the camera.\n         */\n        _this.onRestoreStateObservable = new Observable();\n        /**\n         * Is this camera a part of a rig system?\n         */\n        _this.isRigCamera = false;\n        /** @hidden */\n        _this._rigCameras = new Array();\n        _this._webvrViewMatrix = Matrix.Identity();\n        /** @hidden */\n        _this._skipRendering = false;\n        /** @hidden */\n        _this._projectionMatrix = new Matrix();\n        /** @hidden */\n        _this._postProcesses = new Array();\n        /** @hidden */\n        _this._activeMeshes = new SmartArray(256);\n        _this._globalPosition = Vector3.Zero();\n        /** @hidden */\n        _this._computedViewMatrix = Matrix.Identity();\n        _this._doNotComputeProjectionMatrix = false;\n        _this._transformMatrix = Matrix.Zero();\n        _this._refreshFrustumPlanes = true;\n        _this._absoluteRotation = Quaternion.Identity();\n        /** @hidden */\n        _this._isCamera = true;\n        /** @hidden */\n        _this._isLeftCamera = false;\n        /** @hidden */\n        _this._isRightCamera = false;\n        _this.getScene().addCamera(_this);\n        if (setActiveOnSceneIfNoneActive && !_this.getScene().activeCamera) {\n            _this.getScene().activeCamera = _this;\n        }\n        _this.position = position;\n        _this.renderPassId = _this.getScene().getEngine().createRenderPassId(\"Camera \".concat(name));\n        return _this;\n    }\n    Object.defineProperty(Camera.prototype, \"position\", {\n        /**\n         * Define the current local position of the camera in the scene\n         */\n        get: function () {\n            return this._position;\n        },\n        set: function (newPosition) {\n            this._position = newPosition;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Camera.prototype, \"upVector\", {\n        get: function () {\n            return this._upVector;\n        },\n        /**\n         * The vector the camera should consider as up.\n         * (default is Vector3(0, 1, 0) aka Vector3.Up())\n         */\n        set: function (vec) {\n            this._upVector = vec;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Camera.prototype, \"screenArea\", {\n        /**\n         * The screen area in scene units squared\n         */\n        get: function () {\n            var _a, _b, _c, _d;\n            var x = 0;\n            var y = 0;\n            if (this.mode === Camera.PERSPECTIVE_CAMERA) {\n                if (this.fovMode === Camera.FOVMODE_VERTICAL_FIXED) {\n                    y = this.minZ * 2 * Math.tan(this.fov / 2);\n                    x = this.getEngine().getAspectRatio(this) * y;\n                }\n                else {\n                    x = this.minZ * 2 * Math.tan(this.fov / 2);\n                    y = x / this.getEngine().getAspectRatio(this);\n                }\n            }\n            else {\n                var halfWidth = this.getEngine().getRenderWidth() / 2.0;\n                var halfHeight = this.getEngine().getRenderHeight() / 2.0;\n                x = ((_a = this.orthoRight) !== null && _a !== void 0 ? _a : halfWidth) - ((_b = this.orthoLeft) !== null && _b !== void 0 ? _b : -halfWidth);\n                y = ((_c = this.orthoTop) !== null && _c !== void 0 ? _c : halfHeight) - ((_d = this.orthoBottom) !== null && _d !== void 0 ? _d : -halfHeight);\n            }\n            return x * y;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Store current camera state (fov, position, etc..)\n     * @returns the camera\n     */\n    Camera.prototype.storeState = function () {\n        this._stateStored = true;\n        this._storedFov = this.fov;\n        return this;\n    };\n    /**\n     * Restores the camera state values if it has been stored. You must call storeState() first\n     */\n    Camera.prototype._restoreStateValues = function () {\n        if (!this._stateStored) {\n            return false;\n        }\n        this.fov = this._storedFov;\n        return true;\n    };\n    /**\n     * Restored camera state. You must call storeState() first.\n     * @returns true if restored and false otherwise\n     */\n    Camera.prototype.restoreState = function () {\n        if (this._restoreStateValues()) {\n            this.onRestoreStateObservable.notifyObservers(this);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Gets the class name of the camera.\n     * @returns the class name\n     */\n    Camera.prototype.getClassName = function () {\n        return \"Camera\";\n    };\n    /**\n     * Gets a string representation of the camera useful for debug purpose.\n     * @param fullDetails Defines that a more verbose level of logging is required\n     * @returns the string representation\n     */\n    Camera.prototype.toString = function (fullDetails) {\n        var ret = \"Name: \" + this.name;\n        ret += \", type: \" + this.getClassName();\n        if (this.animations) {\n            for (var i = 0; i < this.animations.length; i++) {\n                ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\n            }\n        }\n        return ret;\n    };\n    /**\n     * Automatically tilts the projection plane, using `projectionPlaneTilt`, to correct the perspective effect on vertical lines.\n     */\n    Camera.prototype.applyVerticalCorrection = function () {\n        var rot = this.absoluteRotation.toEulerAngles();\n        this.projectionPlaneTilt = this._scene.useRightHandedSystem ? -rot.x : rot.x;\n    };\n    Object.defineProperty(Camera.prototype, \"globalPosition\", {\n        /**\n         * Gets the current world space position of the camera.\n         */\n        get: function () {\n            return this._globalPosition;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the list of active meshes this frame (meshes no culled or excluded by lod s in the frame)\n     * @returns the active meshe list\n     */\n    Camera.prototype.getActiveMeshes = function () {\n        return this._activeMeshes;\n    };\n    /**\n     * Check whether a mesh is part of the current active mesh list of the camera\n     * @param mesh Defines the mesh to check\n     * @returns true if active, false otherwise\n     */\n    Camera.prototype.isActiveMesh = function (mesh) {\n        return this._activeMeshes.indexOf(mesh) !== -1;\n    };\n    /**\n     * Is this camera ready to be used/rendered\n     * @param completeCheck defines if a complete check (including post processes) has to be done (false by default)\n     * @return true if the camera is ready\n     */\n    Camera.prototype.isReady = function (completeCheck) {\n        if (completeCheck === void 0) { completeCheck = false; }\n        if (completeCheck) {\n            for (var _i = 0, _a = this._postProcesses; _i < _a.length; _i++) {\n                var pp = _a[_i];\n                if (pp && !pp.isReady()) {\n                    return false;\n                }\n            }\n        }\n        return _super.prototype.isReady.call(this, completeCheck);\n    };\n    /** @hidden */\n    Camera.prototype._initCache = function () {\n        _super.prototype._initCache.call(this);\n        this._cache.position = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this._cache.upVector = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this._cache.mode = undefined;\n        this._cache.minZ = undefined;\n        this._cache.maxZ = undefined;\n        this._cache.fov = undefined;\n        this._cache.fovMode = undefined;\n        this._cache.aspectRatio = undefined;\n        this._cache.orthoLeft = undefined;\n        this._cache.orthoRight = undefined;\n        this._cache.orthoBottom = undefined;\n        this._cache.orthoTop = undefined;\n        this._cache.renderWidth = undefined;\n        this._cache.renderHeight = undefined;\n    };\n    /**\n     * @param ignoreParentClass\n     * @hidden\n     */\n    Camera.prototype._updateCache = function (ignoreParentClass) {\n        if (!ignoreParentClass) {\n            _super.prototype._updateCache.call(this);\n        }\n        this._cache.position.copyFrom(this.position);\n        this._cache.upVector.copyFrom(this.upVector);\n    };\n    /** @hidden */\n    Camera.prototype._isSynchronized = function () {\n        return this._isSynchronizedViewMatrix() && this._isSynchronizedProjectionMatrix();\n    };\n    /** @hidden */\n    Camera.prototype._isSynchronizedViewMatrix = function () {\n        if (!_super.prototype._isSynchronized.call(this)) {\n            return false;\n        }\n        return this._cache.position.equals(this.position) && this._cache.upVector.equals(this.upVector) && this.isSynchronizedWithParent();\n    };\n    /** @hidden */\n    Camera.prototype._isSynchronizedProjectionMatrix = function () {\n        var check = this._cache.mode === this.mode && this._cache.minZ === this.minZ && this._cache.maxZ === this.maxZ;\n        if (!check) {\n            return false;\n        }\n        var engine = this.getEngine();\n        if (this.mode === Camera.PERSPECTIVE_CAMERA) {\n            check =\n                this._cache.fov === this.fov &&\n                    this._cache.fovMode === this.fovMode &&\n                    this._cache.aspectRatio === engine.getAspectRatio(this) &&\n                    this._cache.projectionPlaneTilt === this.projectionPlaneTilt;\n        }\n        else {\n            check =\n                this._cache.orthoLeft === this.orthoLeft &&\n                    this._cache.orthoRight === this.orthoRight &&\n                    this._cache.orthoBottom === this.orthoBottom &&\n                    this._cache.orthoTop === this.orthoTop &&\n                    this._cache.renderWidth === engine.getRenderWidth() &&\n                    this._cache.renderHeight === engine.getRenderHeight();\n        }\n        return check;\n    };\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     * This function is here because typescript removes the typing of the last function.\n     * @param _ignored defines an ignored parameter kept for backward compatibility.\n     * @param _noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    Camera.prototype.attachControl = function (_ignored, _noPreventDefault) { };\n    /**\n     * Detach the current controls from the specified dom element.\n     * This function is here because typescript removes the typing of the last function.\n     * @param _ignored defines an ignored parameter kept for backward compatibility.\n     */\n    Camera.prototype.detachControl = function (_ignored) { };\n    /**\n     * Update the camera state according to the different inputs gathered during the frame.\n     */\n    Camera.prototype.update = function () {\n        this._checkInputs();\n        if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\n            this._updateRigCameras();\n        }\n    };\n    /** @hidden */\n    Camera.prototype._checkInputs = function () {\n        this.onAfterCheckInputsObservable.notifyObservers(this);\n    };\n    Object.defineProperty(Camera.prototype, \"rigCameras\", {\n        /** @hidden */\n        get: function () {\n            return this._rigCameras;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Camera.prototype, \"rigPostProcess\", {\n        /**\n         * Gets the post process used by the rig cameras\n         */\n        get: function () {\n            return this._rigPostProcess;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Internal, gets the first post process.\n     * @returns the first post process to be run on this camera.\n     */\n    Camera.prototype._getFirstPostProcess = function () {\n        for (var ppIndex = 0; ppIndex < this._postProcesses.length; ppIndex++) {\n            if (this._postProcesses[ppIndex] !== null) {\n                return this._postProcesses[ppIndex];\n            }\n        }\n        return null;\n    };\n    Camera.prototype._cascadePostProcessesToRigCams = function () {\n        // invalidate framebuffer\n        var firstPostProcess = this._getFirstPostProcess();\n        if (firstPostProcess) {\n            firstPostProcess.markTextureDirty();\n        }\n        // glue the rigPostProcess to the end of the user postprocesses & assign to each sub-camera\n        for (var i = 0, len = this._rigCameras.length; i < len; i++) {\n            var cam = this._rigCameras[i];\n            var rigPostProcess = cam._rigPostProcess;\n            // for VR rig, there does not have to be a post process\n            if (rigPostProcess) {\n                var isPass = rigPostProcess.getEffectName() === \"pass\";\n                if (isPass) {\n                    // any rig which has a PassPostProcess for rig[0], cannot be isIntermediate when there are also user postProcesses\n                    cam.isIntermediate = this._postProcesses.length === 0;\n                }\n                cam._postProcesses = this._postProcesses.slice(0).concat(rigPostProcess);\n                rigPostProcess.markTextureDirty();\n            }\n            else {\n                cam._postProcesses = this._postProcesses.slice(0);\n            }\n        }\n    };\n    /**\n     * Attach a post process to the camera.\n     * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#attach-postprocess\n     * @param postProcess The post process to attach to the camera\n     * @param insertAt The position of the post process in case several of them are in use in the scene\n     * @returns the position the post process has been inserted at\n     */\n    Camera.prototype.attachPostProcess = function (postProcess, insertAt) {\n        if (insertAt === void 0) { insertAt = null; }\n        if (!postProcess.isReusable() && this._postProcesses.indexOf(postProcess) > -1) {\n            Logger.Error(\"You're trying to reuse a post process not defined as reusable.\");\n            return 0;\n        }\n        if (insertAt == null || insertAt < 0) {\n            this._postProcesses.push(postProcess);\n        }\n        else if (this._postProcesses[insertAt] === null) {\n            this._postProcesses[insertAt] = postProcess;\n        }\n        else {\n            this._postProcesses.splice(insertAt, 0, postProcess);\n        }\n        this._cascadePostProcessesToRigCams(); // also ensures framebuffer invalidated\n        // Update prePass\n        if (this._scene.prePassRenderer) {\n            this._scene.prePassRenderer.markAsDirty();\n        }\n        return this._postProcesses.indexOf(postProcess);\n    };\n    /**\n     * Detach a post process to the camera.\n     * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#attach-postprocess\n     * @param postProcess The post process to detach from the camera\n     */\n    Camera.prototype.detachPostProcess = function (postProcess) {\n        var idx = this._postProcesses.indexOf(postProcess);\n        if (idx !== -1) {\n            this._postProcesses[idx] = null;\n        }\n        // Update prePass\n        if (this._scene.prePassRenderer) {\n            this._scene.prePassRenderer.markAsDirty();\n        }\n        this._cascadePostProcessesToRigCams(); // also ensures framebuffer invalidated\n    };\n    /**\n     * Gets the current world matrix of the camera\n     */\n    Camera.prototype.getWorldMatrix = function () {\n        if (this._isSynchronizedViewMatrix()) {\n            return this._worldMatrix;\n        }\n        // Getting the the view matrix will also compute the world matrix.\n        this.getViewMatrix();\n        return this._worldMatrix;\n    };\n    /** @hidden */\n    Camera.prototype._getViewMatrix = function () {\n        return Matrix.Identity();\n    };\n    /**\n     * Gets the current view matrix of the camera.\n     * @param force forces the camera to recompute the matrix without looking at the cached state\n     * @returns the view matrix\n     */\n    Camera.prototype.getViewMatrix = function (force) {\n        if (!force && this._isSynchronizedViewMatrix()) {\n            return this._computedViewMatrix;\n        }\n        this.updateCache();\n        this._computedViewMatrix = this._getViewMatrix();\n        this._currentRenderId = this.getScene().getRenderId();\n        this._childUpdateId++;\n        this._refreshFrustumPlanes = true;\n        if (this._cameraRigParams && this._cameraRigParams.vrPreViewMatrix) {\n            this._computedViewMatrix.multiplyToRef(this._cameraRigParams.vrPreViewMatrix, this._computedViewMatrix);\n        }\n        // Notify parent camera if rig camera is changed\n        if (this.parent && this.parent.onViewMatrixChangedObservable) {\n            this.parent.onViewMatrixChangedObservable.notifyObservers(this.parent);\n        }\n        this.onViewMatrixChangedObservable.notifyObservers(this);\n        this._computedViewMatrix.invertToRef(this._worldMatrix);\n        return this._computedViewMatrix;\n    };\n    /**\n     * Freeze the projection matrix.\n     * It will prevent the cache check of the camera projection compute and can speed up perf\n     * if no parameter of the camera are meant to change\n     * @param projection Defines manually a projection if necessary\n     */\n    Camera.prototype.freezeProjectionMatrix = function (projection) {\n        this._doNotComputeProjectionMatrix = true;\n        if (projection !== undefined) {\n            this._projectionMatrix = projection;\n        }\n    };\n    /**\n     * Unfreeze the projection matrix if it has previously been freezed by freezeProjectionMatrix.\n     */\n    Camera.prototype.unfreezeProjectionMatrix = function () {\n        this._doNotComputeProjectionMatrix = false;\n    };\n    /**\n     * Gets the current projection matrix of the camera.\n     * @param force forces the camera to recompute the matrix without looking at the cached state\n     * @returns the projection matrix\n     */\n    Camera.prototype.getProjectionMatrix = function (force) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (this._doNotComputeProjectionMatrix || (!force && this._isSynchronizedProjectionMatrix())) {\n            return this._projectionMatrix;\n        }\n        // Cache\n        this._cache.mode = this.mode;\n        this._cache.minZ = this.minZ;\n        this._cache.maxZ = this.maxZ;\n        // Matrix\n        this._refreshFrustumPlanes = true;\n        var engine = this.getEngine();\n        var scene = this.getScene();\n        if (this.mode === Camera.PERSPECTIVE_CAMERA) {\n            this._cache.fov = this.fov;\n            this._cache.fovMode = this.fovMode;\n            this._cache.aspectRatio = engine.getAspectRatio(this);\n            this._cache.projectionPlaneTilt = this.projectionPlaneTilt;\n            if (this.minZ <= 0) {\n                this.minZ = 0.1;\n            }\n            var reverseDepth = engine.useReverseDepthBuffer;\n            var getProjectionMatrix = void 0;\n            if (scene.useRightHandedSystem) {\n                getProjectionMatrix = Matrix.PerspectiveFovRHToRef;\n            }\n            else {\n                getProjectionMatrix = Matrix.PerspectiveFovLHToRef;\n            }\n            getProjectionMatrix(this.fov, engine.getAspectRatio(this), reverseDepth ? this.maxZ : this.minZ, reverseDepth ? this.minZ : this.maxZ, this._projectionMatrix, this.fovMode === Camera.FOVMODE_VERTICAL_FIXED, engine.isNDCHalfZRange, this.projectionPlaneTilt, engine.useReverseDepthBuffer);\n        }\n        else {\n            var halfWidth = engine.getRenderWidth() / 2.0;\n            var halfHeight = engine.getRenderHeight() / 2.0;\n            if (scene.useRightHandedSystem) {\n                Matrix.OrthoOffCenterRHToRef((_a = this.orthoLeft) !== null && _a !== void 0 ? _a : -halfWidth, (_b = this.orthoRight) !== null && _b !== void 0 ? _b : halfWidth, (_c = this.orthoBottom) !== null && _c !== void 0 ? _c : -halfHeight, (_d = this.orthoTop) !== null && _d !== void 0 ? _d : halfHeight, this.minZ, this.maxZ, this._projectionMatrix, engine.isNDCHalfZRange);\n            }\n            else {\n                Matrix.OrthoOffCenterLHToRef((_e = this.orthoLeft) !== null && _e !== void 0 ? _e : -halfWidth, (_f = this.orthoRight) !== null && _f !== void 0 ? _f : halfWidth, (_g = this.orthoBottom) !== null && _g !== void 0 ? _g : -halfHeight, (_h = this.orthoTop) !== null && _h !== void 0 ? _h : halfHeight, this.minZ, this.maxZ, this._projectionMatrix, engine.isNDCHalfZRange);\n            }\n            this._cache.orthoLeft = this.orthoLeft;\n            this._cache.orthoRight = this.orthoRight;\n            this._cache.orthoBottom = this.orthoBottom;\n            this._cache.orthoTop = this.orthoTop;\n            this._cache.renderWidth = engine.getRenderWidth();\n            this._cache.renderHeight = engine.getRenderHeight();\n        }\n        this.onProjectionMatrixChangedObservable.notifyObservers(this);\n        return this._projectionMatrix;\n    };\n    /**\n     * Gets the transformation matrix (ie. the multiplication of view by projection matrices)\n     * @returns a Matrix\n     */\n    Camera.prototype.getTransformationMatrix = function () {\n        this._computedViewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix);\n        return this._transformMatrix;\n    };\n    Camera.prototype._updateFrustumPlanes = function () {\n        if (!this._refreshFrustumPlanes) {\n            return;\n        }\n        this.getTransformationMatrix();\n        if (!this._frustumPlanes) {\n            this._frustumPlanes = Frustum.GetPlanes(this._transformMatrix);\n        }\n        else {\n            Frustum.GetPlanesToRef(this._transformMatrix, this._frustumPlanes);\n        }\n        this._refreshFrustumPlanes = false;\n    };\n    /**\n     * Checks if a cullable object (mesh...) is in the camera frustum\n     * This checks the bounding box center. See isCompletelyInFrustum for a full bounding check\n     * @param target The object to check\n     * @param checkRigCameras If the rig cameras should be checked (eg. with webVR camera both eyes should be checked) (Default: false)\n     * @returns true if the object is in frustum otherwise false\n     */\n    Camera.prototype.isInFrustum = function (target, checkRigCameras) {\n        if (checkRigCameras === void 0) { checkRigCameras = false; }\n        this._updateFrustumPlanes();\n        if (checkRigCameras && this.rigCameras.length > 0) {\n            var result_1 = false;\n            this.rigCameras.forEach(function (cam) {\n                cam._updateFrustumPlanes();\n                result_1 = result_1 || target.isInFrustum(cam._frustumPlanes);\n            });\n            return result_1;\n        }\n        else {\n            return target.isInFrustum(this._frustumPlanes);\n        }\n    };\n    /**\n     * Checks if a cullable object (mesh...) is in the camera frustum\n     * Unlike isInFrustum this checks the full bounding box\n     * @param target The object to check\n     * @returns true if the object is in frustum otherwise false\n     */\n    Camera.prototype.isCompletelyInFrustum = function (target) {\n        this._updateFrustumPlanes();\n        return target.isCompletelyInFrustum(this._frustumPlanes);\n    };\n    /**\n     * Gets a ray in the forward direction from the camera.\n     * @param length Defines the length of the ray to create\n     * @param transform Defines the transform to apply to the ray, by default the world matrix is used to create a workd space ray\n     * @param origin Defines the start point of the ray which defaults to the camera position\n     * @returns the forward ray\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Camera.prototype.getForwardRay = function (length, transform, origin) {\n        if (length === void 0) { length = 100; }\n        throw _WarnImport(\"Ray\");\n    };\n    /**\n     * Gets a ray in the forward direction from the camera.\n     * @param refRay the ray to (re)use when setting the values\n     * @param length Defines the length of the ray to create\n     * @param transform Defines the transform to apply to the ray, by default the world matrx is used to create a workd space ray\n     * @param origin Defines the start point of the ray which defaults to the camera position\n     * @returns the forward ray\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Camera.prototype.getForwardRayToRef = function (refRay, length, transform, origin) {\n        if (length === void 0) { length = 100; }\n        throw _WarnImport(\"Ray\");\n    };\n    /**\n     * Releases resources associated with this node.\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\n     */\n    Camera.prototype.dispose = function (doNotRecurse, disposeMaterialAndTextures) {\n        if (disposeMaterialAndTextures === void 0) { disposeMaterialAndTextures = false; }\n        // Observables\n        this.onViewMatrixChangedObservable.clear();\n        this.onProjectionMatrixChangedObservable.clear();\n        this.onAfterCheckInputsObservable.clear();\n        this.onRestoreStateObservable.clear();\n        // Inputs\n        if (this.inputs) {\n            this.inputs.clear();\n        }\n        // Animations\n        this.getScene().stopAnimation(this);\n        // Remove from scene\n        this.getScene().removeCamera(this);\n        while (this._rigCameras.length > 0) {\n            var camera = this._rigCameras.pop();\n            if (camera) {\n                camera.dispose();\n            }\n        }\n        if (this._parentContainer) {\n            var index = this._parentContainer.cameras.indexOf(this);\n            if (index > -1) {\n                this._parentContainer.cameras.splice(index, 1);\n            }\n            this._parentContainer = null;\n        }\n        // Postprocesses\n        if (this._rigPostProcess) {\n            this._rigPostProcess.dispose(this);\n            this._rigPostProcess = null;\n            this._postProcesses = [];\n        }\n        else if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\n            this._rigPostProcess = null;\n            this._postProcesses = [];\n        }\n        else {\n            var i_1 = this._postProcesses.length;\n            while (--i_1 >= 0) {\n                var postProcess = this._postProcesses[i_1];\n                if (postProcess) {\n                    postProcess.dispose(this);\n                }\n            }\n        }\n        // Render targets\n        var i = this.customRenderTargets.length;\n        while (--i >= 0) {\n            this.customRenderTargets[i].dispose();\n        }\n        this.customRenderTargets = [];\n        // Active Meshes\n        this._activeMeshes.dispose();\n        this.getScene().getEngine().releaseRenderPassId(this.renderPassId);\n        _super.prototype.dispose.call(this, doNotRecurse, disposeMaterialAndTextures);\n    };\n    Object.defineProperty(Camera.prototype, \"isLeftCamera\", {\n        /**\n         * Gets the left camera of a rig setup in case of Rigged Camera\n         */\n        get: function () {\n            return this._isLeftCamera;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Camera.prototype, \"isRightCamera\", {\n        /**\n         * Gets the right camera of a rig setup in case of Rigged Camera\n         */\n        get: function () {\n            return this._isRightCamera;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Camera.prototype, \"leftCamera\", {\n        /**\n         * Gets the left camera of a rig setup in case of Rigged Camera\n         */\n        get: function () {\n            if (this._rigCameras.length < 1) {\n                return null;\n            }\n            return this._rigCameras[0];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Camera.prototype, \"rightCamera\", {\n        /**\n         * Gets the right camera of a rig setup in case of Rigged Camera\n         */\n        get: function () {\n            if (this._rigCameras.length < 2) {\n                return null;\n            }\n            return this._rigCameras[1];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the left camera target of a rig setup in case of Rigged Camera\n     * @returns the target position\n     */\n    Camera.prototype.getLeftTarget = function () {\n        if (this._rigCameras.length < 1) {\n            return null;\n        }\n        return this._rigCameras[0].getTarget();\n    };\n    /**\n     * Gets the right camera target of a rig setup in case of Rigged Camera\n     * @returns the target position\n     */\n    Camera.prototype.getRightTarget = function () {\n        if (this._rigCameras.length < 2) {\n            return null;\n        }\n        return this._rigCameras[1].getTarget();\n    };\n    /**\n     * @param mode\n     * @param rigParams\n     * @hidden\n     */\n    Camera.prototype.setCameraRigMode = function (mode, rigParams) {\n        if (this.cameraRigMode === mode) {\n            return;\n        }\n        while (this._rigCameras.length > 0) {\n            var camera = this._rigCameras.pop();\n            if (camera) {\n                camera.dispose();\n            }\n        }\n        this.cameraRigMode = mode;\n        this._cameraRigParams = {};\n        //we have to implement stereo camera calcultating left and right viewpoints from interaxialDistance and target,\n        //not from a given angle as it is now, but until that complete code rewriting provisional stereoHalfAngle value is introduced\n        this._cameraRigParams.interaxialDistance = rigParams.interaxialDistance || 0.0637;\n        this._cameraRigParams.stereoHalfAngle = Tools.ToRadians(this._cameraRigParams.interaxialDistance / 0.0637);\n        // create the rig cameras, unless none\n        if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\n            var leftCamera = this.createRigCamera(this.name + \"_L\", 0);\n            if (leftCamera) {\n                leftCamera._isLeftCamera = true;\n            }\n            var rightCamera = this.createRigCamera(this.name + \"_R\", 1);\n            if (rightCamera) {\n                rightCamera._isRightCamera = true;\n            }\n            if (leftCamera && rightCamera) {\n                this._rigCameras.push(leftCamera);\n                this._rigCameras.push(rightCamera);\n            }\n        }\n        this._setRigMode(rigParams);\n        this._cascadePostProcessesToRigCams();\n        this.update();\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Camera.prototype._setRigMode = function (rigParams) {\n        // no-op\n    };\n    /** @hidden */\n    Camera.prototype._getVRProjectionMatrix = function () {\n        Matrix.PerspectiveFovLHToRef(this._cameraRigParams.vrMetrics.aspectRatioFov, this._cameraRigParams.vrMetrics.aspectRatio, this.minZ, this.maxZ, this._cameraRigParams.vrWorkMatrix, true, this.getEngine().isNDCHalfZRange);\n        this._cameraRigParams.vrWorkMatrix.multiplyToRef(this._cameraRigParams.vrHMatrix, this._projectionMatrix);\n        return this._projectionMatrix;\n    };\n    Camera.prototype._updateCameraRotationMatrix = function () {\n        //Here for WebVR\n    };\n    Camera.prototype._updateWebVRCameraRotationMatrix = function () {\n        //Here for WebVR\n    };\n    /**\n     * This function MUST be overwritten by the different WebVR cameras available.\n     * The context in which it is running is the RIG camera. So 'this' is the TargetCamera, left or right.\n     * @hidden\n     */\n    Camera.prototype._getWebVRProjectionMatrix = function () {\n        return Matrix.Identity();\n    };\n    /**\n     * This function MUST be overwritten by the different WebVR cameras available.\n     * The context in which it is running is the RIG camera. So 'this' is the TargetCamera, left or right.\n     * @hidden\n     */\n    Camera.prototype._getWebVRViewMatrix = function () {\n        return Matrix.Identity();\n    };\n    /**\n     * @param name\n     * @param value\n     * @hidden\n     */\n    Camera.prototype.setCameraRigParameter = function (name, value) {\n        if (!this._cameraRigParams) {\n            this._cameraRigParams = {};\n        }\n        this._cameraRigParams[name] = value;\n        //provisionnally:\n        if (name === \"interaxialDistance\") {\n            this._cameraRigParams.stereoHalfAngle = Tools.ToRadians(value / 0.0637);\n        }\n    };\n    /**\n     * needs to be overridden by children so sub has required properties to be copied\n     * @param name\n     * @param cameraIndex\n     * @hidden\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Camera.prototype.createRigCamera = function (name, cameraIndex) {\n        return null;\n    };\n    /**\n     * May need to be overridden by children\n     * @hidden\n     */\n    Camera.prototype._updateRigCameras = function () {\n        for (var i = 0; i < this._rigCameras.length; i++) {\n            this._rigCameras[i].minZ = this.minZ;\n            this._rigCameras[i].maxZ = this.maxZ;\n            this._rigCameras[i].fov = this.fov;\n            this._rigCameras[i].upVector.copyFrom(this.upVector);\n        }\n        // only update viewport when ANAGLYPH\n        if (this.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH) {\n            this._rigCameras[0].viewport = this._rigCameras[1].viewport = this.viewport;\n        }\n    };\n    /** @hidden */\n    Camera.prototype._setupInputs = function () { };\n    /**\n     * Serialiaze the camera setup to a json representation\n     * @returns the JSON representation\n     */\n    Camera.prototype.serialize = function () {\n        var serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.uniqueId = this.uniqueId;\n        // Type\n        serializationObject.type = this.getClassName();\n        // Parent\n        if (this.parent) {\n            serializationObject.parentId = this.parent.uniqueId;\n        }\n        if (this.inputs) {\n            this.inputs.serialize(serializationObject);\n        }\n        // Animations\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\n        serializationObject.ranges = this.serializeAnimationRanges();\n        serializationObject.isEnabled = this.isEnabled();\n        return serializationObject;\n    };\n    /**\n     * Clones the current camera.\n     * @param name The cloned camera name\n     * @param newParent The cloned camera's new parent (none by default)\n     * @returns the cloned camera\n     */\n    Camera.prototype.clone = function (name, newParent) {\n        if (newParent === void 0) { newParent = null; }\n        var camera = SerializationHelper.Clone(Camera.GetConstructorFromName(this.getClassName(), name, this.getScene(), this.interaxialDistance, this.isStereoscopicSideBySide), this);\n        camera.name = name;\n        camera.parent = newParent;\n        this.onClonedObservable.notifyObservers(camera);\n        return camera;\n    };\n    /**\n     * Gets the direction of the camera relative to a given local axis.\n     * @param localAxis Defines the reference axis to provide a relative direction.\n     * @return the direction\n     */\n    Camera.prototype.getDirection = function (localAxis) {\n        var result = Vector3.Zero();\n        this.getDirectionToRef(localAxis, result);\n        return result;\n    };\n    Object.defineProperty(Camera.prototype, \"absoluteRotation\", {\n        /**\n         * Returns the current camera absolute rotation\n         */\n        get: function () {\n            this.getWorldMatrix().decompose(undefined, this._absoluteRotation);\n            return this._absoluteRotation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the direction of the camera relative to a given local axis into a passed vector.\n     * @param localAxis Defines the reference axis to provide a relative direction.\n     * @param result Defines the vector to store the result in\n     */\n    Camera.prototype.getDirectionToRef = function (localAxis, result) {\n        Vector3.TransformNormalToRef(localAxis, this.getWorldMatrix(), result);\n    };\n    /**\n     * Gets a camera constructor for a given camera type\n     * @param type The type of the camera to construct (should be equal to one of the camera class name)\n     * @param name The name of the camera the result will be able to instantiate\n     * @param scene The scene the result will construct the camera in\n     * @param interaxial_distance In case of stereoscopic setup, the distance between both eyes\n     * @param isStereoscopicSideBySide In case of stereoscopic setup, should the sereo be side b side\n     * @returns a factory method to construct the camera\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Camera.GetConstructorFromName = function (type, name, scene, interaxial_distance, isStereoscopicSideBySide) {\n        if (interaxial_distance === void 0) { interaxial_distance = 0; }\n        if (isStereoscopicSideBySide === void 0) { isStereoscopicSideBySide = true; }\n        var constructorFunc = Node.Construct(type, name, scene, {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            interaxial_distance: interaxial_distance,\n            isStereoscopicSideBySide: isStereoscopicSideBySide,\n        });\n        if (constructorFunc) {\n            return constructorFunc;\n        }\n        // Default to universal camera\n        return function () { return Camera._CreateDefaultParsedCamera(name, scene); };\n    };\n    /**\n     * Compute the world  matrix of the camera.\n     * @returns the camera world matrix\n     */\n    Camera.prototype.computeWorldMatrix = function () {\n        return this.getWorldMatrix();\n    };\n    /**\n     * Parse a JSON and creates the camera from the parsed information\n     * @param parsedCamera The JSON to parse\n     * @param scene The scene to instantiate the camera in\n     * @returns the newly constructed camera\n     */\n    Camera.Parse = function (parsedCamera, scene) {\n        var type = parsedCamera.type;\n        var construct = Camera.GetConstructorFromName(type, parsedCamera.name, scene, parsedCamera.interaxial_distance, parsedCamera.isStereoscopicSideBySide);\n        var camera = SerializationHelper.Parse(construct, parsedCamera, scene);\n        // Parent\n        if (parsedCamera.parentId !== undefined) {\n            camera._waitingParentId = parsedCamera.parentId;\n        }\n        //If camera has an input manager, let it parse inputs settings\n        if (camera.inputs) {\n            camera.inputs.parse(parsedCamera);\n            camera._setupInputs();\n        }\n        if (parsedCamera.upVector) {\n            camera.upVector = Vector3.FromArray(parsedCamera.upVector); // need to force the upVector\n        }\n        if (camera.setPosition) {\n            // need to force position\n            camera.position.copyFromFloats(0, 0, 0);\n            camera.setPosition(Vector3.FromArray(parsedCamera.position));\n        }\n        // Target\n        if (parsedCamera.target) {\n            if (camera.setTarget) {\n                camera.setTarget(Vector3.FromArray(parsedCamera.target));\n            }\n        }\n        // Apply 3d rig, when found\n        if (parsedCamera.cameraRigMode) {\n            var rigParams = parsedCamera.interaxial_distance ? { interaxialDistance: parsedCamera.interaxial_distance } : {};\n            camera.setCameraRigMode(parsedCamera.cameraRigMode, rigParams);\n        }\n        // Animations\n        if (parsedCamera.animations) {\n            for (var animationIndex = 0; animationIndex < parsedCamera.animations.length; animationIndex++) {\n                var parsedAnimation = parsedCamera.animations[animationIndex];\n                var internalClass = GetClass(\"BABYLON.Animation\");\n                if (internalClass) {\n                    camera.animations.push(internalClass.Parse(parsedAnimation));\n                }\n            }\n            Node.ParseAnimationRanges(camera, parsedCamera, scene);\n        }\n        if (parsedCamera.autoAnimate) {\n            scene.beginAnimation(camera, parsedCamera.autoAnimateFrom, parsedCamera.autoAnimateTo, parsedCamera.autoAnimateLoop, parsedCamera.autoAnimateSpeed || 1.0);\n        }\n        // Check if isEnabled is defined to be back compatible with prior serialized versions.\n        if (parsedCamera.isEnabled !== undefined) {\n            camera.setEnabled(parsedCamera.isEnabled);\n        }\n        return camera;\n    };\n    /**\n     * @param name\n     * @param scene\n     * @hidden\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Camera._CreateDefaultParsedCamera = function (name, scene) {\n        throw _WarnImport(\"UniversalCamera\");\n    };\n    /**\n     * This is the default projection mode used by the cameras.\n     * It helps recreating a feeling of perspective and better appreciate depth.\n     * This is the best way to simulate real life cameras.\n     */\n    Camera.PERSPECTIVE_CAMERA = 0;\n    /**\n     * This helps creating camera with an orthographic mode.\n     * Orthographic is commonly used in engineering as a means to produce object specifications that communicate dimensions unambiguously, each line of 1 unit length (cm, meter..whatever) will appear to have the same length everywhere on the drawing. This allows the drafter to dimension only a subset of lines and let the reader know that other lines of that length on the drawing are also that length in reality. Every parallel line in the drawing is also parallel in the object.\n     */\n    Camera.ORTHOGRAPHIC_CAMERA = 1;\n    /**\n     * This is the default FOV mode for perspective cameras.\n     * This setting aligns the upper and lower bounds of the viewport to the upper and lower bounds of the camera frustum.\n     */\n    Camera.FOVMODE_VERTICAL_FIXED = 0;\n    /**\n     * This setting aligns the left and right bounds of the viewport to the left and right bounds of the camera frustum.\n     */\n    Camera.FOVMODE_HORIZONTAL_FIXED = 1;\n    /**\n     * This specifies there is no need for a camera rig.\n     * Basically only one eye is rendered corresponding to the camera.\n     */\n    Camera.RIG_MODE_NONE = 0;\n    /**\n     * Simulates a camera Rig with one blue eye and one red eye.\n     * This can be use with 3d blue and red glasses.\n     */\n    Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH = 10;\n    /**\n     * Defines that both eyes of the camera will be rendered side by side with a parallel target.\n     */\n    Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL = 11;\n    /**\n     * Defines that both eyes of the camera will be rendered side by side with a none parallel target.\n     */\n    Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED = 12;\n    /**\n     * Defines that both eyes of the camera will be rendered over under each other.\n     */\n    Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER = 13;\n    /**\n     * Defines that both eyes of the camera will be rendered on successive lines interlaced for passive 3d monitors.\n     */\n    Camera.RIG_MODE_STEREOSCOPIC_INTERLACED = 14;\n    /**\n     * Defines that both eyes of the camera should be renderered in a VR mode (carbox).\n     */\n    Camera.RIG_MODE_VR = 20;\n    /**\n     * Defines that both eyes of the camera should be renderered in a VR mode (webVR).\n     */\n    Camera.RIG_MODE_WEBVR = 21;\n    /**\n     * Custom rig mode allowing rig cameras to be populated manually with any number of cameras\n     */\n    Camera.RIG_MODE_CUSTOM = 22;\n    /**\n     * Defines if by default attaching controls should prevent the default javascript event to continue.\n     */\n    Camera.ForceAttachControlToAlwaysPreventDefault = false;\n    __decorate([\n        serializeAsVector3(\"position\")\n    ], Camera.prototype, \"_position\", void 0);\n    __decorate([\n        serializeAsVector3(\"upVector\")\n    ], Camera.prototype, \"_upVector\", void 0);\n    __decorate([\n        serialize()\n    ], Camera.prototype, \"orthoLeft\", void 0);\n    __decorate([\n        serialize()\n    ], Camera.prototype, \"orthoRight\", void 0);\n    __decorate([\n        serialize()\n    ], Camera.prototype, \"orthoBottom\", void 0);\n    __decorate([\n        serialize()\n    ], Camera.prototype, \"orthoTop\", void 0);\n    __decorate([\n        serialize()\n    ], Camera.prototype, \"fov\", void 0);\n    __decorate([\n        serialize()\n    ], Camera.prototype, \"projectionPlaneTilt\", void 0);\n    __decorate([\n        serialize()\n    ], Camera.prototype, \"minZ\", void 0);\n    __decorate([\n        serialize()\n    ], Camera.prototype, \"maxZ\", void 0);\n    __decorate([\n        serialize()\n    ], Camera.prototype, \"inertia\", void 0);\n    __decorate([\n        serialize()\n    ], Camera.prototype, \"mode\", void 0);\n    __decorate([\n        serialize()\n    ], Camera.prototype, \"layerMask\", void 0);\n    __decorate([\n        serialize()\n    ], Camera.prototype, \"fovMode\", void 0);\n    __decorate([\n        serialize()\n    ], Camera.prototype, \"cameraRigMode\", void 0);\n    __decorate([\n        serialize()\n    ], Camera.prototype, \"interaxialDistance\", void 0);\n    __decorate([\n        serialize()\n    ], Camera.prototype, \"isStereoscopicSideBySide\", void 0);\n    return Camera;\n}(Node));\nexport { Camera };\n//# sourceMappingURL=camera.js.map","import { Logger } from \"../Misc/logger.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\nimport { Camera } from \"./camera.js\";\n/**\n * @ignore\n * This is a list of all the different input types that are available in the application.\n * Fo instance: ArcRotateCameraGamepadInput...\n */\n// eslint-disable-next-line no-var, @typescript-eslint/naming-convention\nexport var CameraInputTypes = {};\n/**\n * This represents the input manager used within a camera.\n * It helps dealing with all the different kind of input attached to a camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar CameraInputsManager = /** @class */ (function () {\n    /**\n     * Instantiate a new Camera Input Manager.\n     * @param camera Defines the camera the input manager belongs to\n     */\n    function CameraInputsManager(camera) {\n        /**\n         * Defines the dom element the camera is collecting inputs from.\n         * This is null if the controls have not been attached.\n         */\n        this.attachedToElement = false;\n        this.attached = {};\n        this.camera = camera;\n        this.checkInputs = function () { };\n    }\n    /**\n     * Add an input method to a camera\n     * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n     * @param input camera input method\n     */\n    CameraInputsManager.prototype.add = function (input) {\n        var type = input.getSimpleName();\n        if (this.attached[type]) {\n            Logger.Warn(\"camera input of type \" + type + \" already exists on camera\");\n            return;\n        }\n        this.attached[type] = input;\n        input.camera = this.camera;\n        //for checkInputs, we are dynamically creating a function\n        //the goal is to avoid the performance penalty of looping for inputs in the render loop\n        if (input.checkInputs) {\n            this.checkInputs = this._addCheckInputs(input.checkInputs.bind(input));\n        }\n        if (this.attachedToElement) {\n            input.attachControl();\n        }\n    };\n    /**\n     * Remove a specific input method from a camera\n     * example: camera.inputs.remove(camera.inputs.attached.mouse);\n     * @param inputToRemove camera input method\n     */\n    CameraInputsManager.prototype.remove = function (inputToRemove) {\n        for (var cam in this.attached) {\n            var input = this.attached[cam];\n            if (input === inputToRemove) {\n                input.detachControl();\n                input.camera = null;\n                delete this.attached[cam];\n                this.rebuildInputCheck();\n            }\n        }\n    };\n    /**\n     * Remove a specific input type from a camera\n     * example: camera.inputs.remove(\"ArcRotateCameraGamepadInput\");\n     * @param inputType the type of the input to remove\n     */\n    CameraInputsManager.prototype.removeByType = function (inputType) {\n        for (var cam in this.attached) {\n            var input = this.attached[cam];\n            if (input.getClassName() === inputType) {\n                input.detachControl();\n                input.camera = null;\n                delete this.attached[cam];\n                this.rebuildInputCheck();\n            }\n        }\n    };\n    CameraInputsManager.prototype._addCheckInputs = function (fn) {\n        var current = this.checkInputs;\n        return function () {\n            current();\n            fn();\n        };\n    };\n    /**\n     * Attach the input controls to the currently attached dom element to listen the events from.\n     * @param input Defines the input to attach\n     */\n    CameraInputsManager.prototype.attachInput = function (input) {\n        if (this.attachedToElement) {\n            input.attachControl(this.noPreventDefault);\n        }\n    };\n    /**\n     * Attach the current manager inputs controls to a specific dom element to listen the events from.\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    CameraInputsManager.prototype.attachElement = function (noPreventDefault) {\n        if (noPreventDefault === void 0) { noPreventDefault = false; }\n        if (this.attachedToElement) {\n            return;\n        }\n        noPreventDefault = Camera.ForceAttachControlToAlwaysPreventDefault ? false : noPreventDefault;\n        this.attachedToElement = true;\n        this.noPreventDefault = noPreventDefault;\n        for (var cam in this.attached) {\n            this.attached[cam].attachControl(noPreventDefault);\n        }\n    };\n    /**\n     * Detach the current manager inputs controls from a specific dom element.\n     * @param disconnect Defines whether the input should be removed from the current list of attached inputs\n     */\n    CameraInputsManager.prototype.detachElement = function (disconnect) {\n        if (disconnect === void 0) { disconnect = false; }\n        for (var cam in this.attached) {\n            this.attached[cam].detachControl();\n            if (disconnect) {\n                this.attached[cam].camera = null;\n            }\n        }\n        this.attachedToElement = false;\n    };\n    /**\n     * Rebuild the dynamic inputCheck function from the current list of\n     * defined inputs in the manager.\n     */\n    CameraInputsManager.prototype.rebuildInputCheck = function () {\n        this.checkInputs = function () { };\n        for (var cam in this.attached) {\n            var input = this.attached[cam];\n            if (input.checkInputs) {\n                this.checkInputs = this._addCheckInputs(input.checkInputs.bind(input));\n            }\n        }\n    };\n    /**\n     * Remove all attached input methods from a camera\n     */\n    CameraInputsManager.prototype.clear = function () {\n        if (this.attachedToElement) {\n            this.detachElement(true);\n        }\n        this.attached = {};\n        this.attachedToElement = false;\n        this.checkInputs = function () { };\n    };\n    /**\n     * Serialize the current input manager attached to a camera.\n     * This ensures than once parsed,\n     * the input associated to the camera will be identical to the current ones\n     * @param serializedCamera Defines the camera serialization JSON the input serialization should write to\n     */\n    CameraInputsManager.prototype.serialize = function (serializedCamera) {\n        var inputs = {};\n        for (var cam in this.attached) {\n            var input = this.attached[cam];\n            var res = SerializationHelper.Serialize(input);\n            inputs[input.getClassName()] = res;\n        }\n        serializedCamera.inputsmgr = inputs;\n    };\n    /**\n     * Parses an input manager serialized JSON to restore the previous list of inputs\n     * and states associated to a camera.\n     * @param parsedCamera Defines the JSON to parse\n     */\n    CameraInputsManager.prototype.parse = function (parsedCamera) {\n        var parsedInputs = parsedCamera.inputsmgr;\n        if (parsedInputs) {\n            this.clear();\n            var _loop_1 = function (n) {\n                var construct = CameraInputTypes[n];\n                if (construct) {\n                    var parsedinput = parsedInputs[n];\n                    var input = SerializationHelper.Parse(function () {\n                        return new construct();\n                    }, parsedinput, null);\n                    this_1.add(input);\n                }\n            };\n            var this_1 = this;\n            for (var n in parsedInputs) {\n                _loop_1(n);\n            }\n        }\n        else {\n            var _loop_2 = function (n) {\n                var construct = CameraInputTypes[this_2.attached[n].getClassName()];\n                if (construct) {\n                    var input = SerializationHelper.Parse(function () {\n                        return new construct();\n                    }, parsedCamera, null);\n                    this_2.remove(this_2.attached[n]);\n                    this_2.add(input);\n                }\n            };\n            var this_2 = this;\n            //2016-03-08 this part is for managing backward compatibility\n            for (var n in this.attached) {\n                _loop_2(n);\n            }\n        }\n    };\n    return CameraInputsManager;\n}());\nexport { CameraInputsManager };\n//# sourceMappingURL=cameraInputsManager.js.map","import { __extends } from \"tslib\";\nimport { FreeCamera } from \"./freeCamera.js\";\nimport { Quaternion, Vector3 } from \"../Maths/math.vector.js\";\nimport { Node } from \"../node.js\";\nimport \"./Inputs/freeCameraDeviceOrientationInput.js\";\nimport { Axis } from \"../Maths/math.axis.js\";\nNode.AddNodeConstructor(\"DeviceOrientationCamera\", function (name, scene) {\n    return function () { return new DeviceOrientationCamera(name, Vector3.Zero(), scene); };\n});\n// We're mainly based on the logic defined into the FreeCamera code\n/**\n * This is a camera specifically designed to react to device orientation events such as a modern mobile device\n * being tilted forward or back and left or right.\n */\nvar DeviceOrientationCamera = /** @class */ (function (_super) {\n    __extends(DeviceOrientationCamera, _super);\n    /**\n     * Creates a new device orientation camera\n     * @param name The name of the camera\n     * @param position The start position camera\n     * @param scene The scene the camera belongs to\n     */\n    function DeviceOrientationCamera(name, position, scene) {\n        var _this = _super.call(this, name, position, scene) || this;\n        _this._tmpDragQuaternion = new Quaternion();\n        _this._disablePointerInputWhenUsingDeviceOrientation = true;\n        _this._dragFactor = 0;\n        _this._quaternionCache = new Quaternion();\n        _this.inputs.addDeviceOrientation();\n        // When the orientation sensor fires it's first event, disable mouse input\n        if (_this.inputs._deviceOrientationInput) {\n            _this.inputs._deviceOrientationInput._onDeviceOrientationChangedObservable.addOnce(function () {\n                if (_this._disablePointerInputWhenUsingDeviceOrientation) {\n                    if (_this.inputs._mouseInput) {\n                        _this.inputs._mouseInput._allowCameraRotation = false;\n                        _this.inputs._mouseInput.onPointerMovedObservable.add(function (e) {\n                            if (_this._dragFactor != 0) {\n                                if (!_this._initialQuaternion) {\n                                    _this._initialQuaternion = new Quaternion();\n                                }\n                                // Rotate the initial space around the y axis to allow users to \"turn around\" via touch/mouse\n                                Quaternion.FromEulerAnglesToRef(0, e.offsetX * _this._dragFactor, 0, _this._tmpDragQuaternion);\n                                _this._initialQuaternion.multiplyToRef(_this._tmpDragQuaternion, _this._initialQuaternion);\n                            }\n                        });\n                    }\n                }\n            });\n        }\n        return _this;\n    }\n    Object.defineProperty(DeviceOrientationCamera.prototype, \"disablePointerInputWhenUsingDeviceOrientation\", {\n        /**\n         * Gets or sets a boolean indicating that pointer input must be disabled on first orientation sensor update (Default: true)\n         */\n        get: function () {\n            return this._disablePointerInputWhenUsingDeviceOrientation;\n        },\n        set: function (value) {\n            this._disablePointerInputWhenUsingDeviceOrientation = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Enabled turning on the y axis when the orientation sensor is active\n     * @param dragFactor the factor that controls the turn speed (default: 1/300)\n     */\n    DeviceOrientationCamera.prototype.enableHorizontalDragging = function (dragFactor) {\n        if (dragFactor === void 0) { dragFactor = 1 / 300; }\n        this._dragFactor = dragFactor;\n    };\n    /**\n     * Gets the current instance class name (\"DeviceOrientationCamera\").\n     * This helps avoiding instanceof at run time.\n     * @returns the class name\n     */\n    DeviceOrientationCamera.prototype.getClassName = function () {\n        return \"DeviceOrientationCamera\";\n    };\n    /**\n     * @hidden\n     * Checks and applies the current values of the inputs to the camera. (Internal use only)\n     */\n    DeviceOrientationCamera.prototype._checkInputs = function () {\n        _super.prototype._checkInputs.call(this);\n        this._quaternionCache.copyFrom(this.rotationQuaternion);\n        if (this._initialQuaternion) {\n            this._initialQuaternion.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\n        }\n    };\n    /**\n     * Reset the camera to its default orientation on the specified axis only.\n     * @param axis The axis to reset\n     */\n    DeviceOrientationCamera.prototype.resetToCurrentRotation = function (axis) {\n        var _this = this;\n        if (axis === void 0) { axis = Axis.Y; }\n        //can only work if this camera has a rotation quaternion already.\n        if (!this.rotationQuaternion) {\n            return;\n        }\n        if (!this._initialQuaternion) {\n            this._initialQuaternion = new Quaternion();\n        }\n        this._initialQuaternion.copyFrom(this._quaternionCache || this.rotationQuaternion);\n        [\"x\", \"y\", \"z\"].forEach(function (axisName) {\n            if (!axis[axisName]) {\n                _this._initialQuaternion[axisName] = 0;\n            }\n            else {\n                _this._initialQuaternion[axisName] *= -1;\n            }\n        });\n        this._initialQuaternion.normalize();\n        //force rotation update\n        this._initialQuaternion.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\n    };\n    return DeviceOrientationCamera;\n}(FreeCamera));\nexport { DeviceOrientationCamera };\n//# sourceMappingURL=deviceOrientationCamera.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serializeAsVector3, serialize } from \"../Misc/decorators.js\";\nimport { Vector3, Vector2 } from \"../Maths/math.vector.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { TargetCamera } from \"./targetCamera.js\";\nimport { FreeCameraInputsManager } from \"./freeCameraInputsManager.js\";\nimport { Tools } from \"../Misc/tools.js\";\n/**\n * This represents a free type of camera. It can be useful in First Person Shooter game for instance.\n * Please consider using the new UniversalCamera instead as it adds more functionality like the gamepad.\n * @see https://doc.babylonjs.com/features/cameras#universal-camera\n */\nvar FreeCamera = /** @class */ (function (_super) {\n    __extends(FreeCamera, _super);\n    /**\n     * Instantiates a Free Camera.\n     * This represents a free type of camera. It can be useful in First Person Shooter game for instance.\n     * Please consider using the new UniversalCamera instead as it adds more functionality like touch to this camera.\n     * @see https://doc.babylonjs.com/features/cameras#universal-camera\n     * @param name Define the name of the camera in the scene\n     * @param position Define the start position of the camera in the scene\n     * @param scene Define the scene the camera belongs to\n     * @param setActiveOnSceneIfNoneActive Defines whether the camera should be marked as active if not other active cameras have been defined\n     */\n    function FreeCamera(name, position, scene, setActiveOnSceneIfNoneActive) {\n        if (setActiveOnSceneIfNoneActive === void 0) { setActiveOnSceneIfNoneActive = true; }\n        var _this = _super.call(this, name, position, scene, setActiveOnSceneIfNoneActive) || this;\n        /**\n         * Define the collision ellipsoid of the camera.\n         * This is helpful to simulate a camera body like the player body around the camera\n         * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity#arcrotatecamera\n         */\n        _this.ellipsoid = new Vector3(0.5, 1, 0.5);\n        /**\n         * Define an offset for the position of the ellipsoid around the camera.\n         * This can be helpful to determine the center of the body near the gravity center of the body\n         * instead of its head.\n         */\n        _this.ellipsoidOffset = new Vector3(0, 0, 0);\n        /**\n         * Enable or disable collisions of the camera with the rest of the scene objects.\n         */\n        _this.checkCollisions = false;\n        /**\n         * Enable or disable gravity on the camera.\n         */\n        _this.applyGravity = false;\n        _this._needMoveForGravity = false;\n        _this._oldPosition = Vector3.Zero();\n        _this._diffPosition = Vector3.Zero();\n        _this._newPosition = Vector3.Zero();\n        // Collisions\n        _this._collisionMask = -1;\n        _this._onCollisionPositionChange = function (collisionId, newPosition, collidedMesh) {\n            if (collidedMesh === void 0) { collidedMesh = null; }\n            var updatePosition = function (newPos) {\n                _this._newPosition.copyFrom(newPos);\n                _this._newPosition.subtractToRef(_this._oldPosition, _this._diffPosition);\n                if (_this._diffPosition.length() > Engine.CollisionsEpsilon) {\n                    _this.position.addInPlace(_this._diffPosition);\n                    if (_this.onCollide && collidedMesh) {\n                        _this.onCollide(collidedMesh);\n                    }\n                }\n            };\n            updatePosition(newPosition);\n        };\n        _this.inputs = new FreeCameraInputsManager(_this);\n        _this.inputs.addKeyboard().addMouse();\n        return _this;\n    }\n    Object.defineProperty(FreeCamera.prototype, \"angularSensibility\", {\n        /**\n         * Gets the input sensibility for a mouse input. (default is 2000.0)\n         * Higher values reduce sensitivity.\n         */\n        get: function () {\n            var mouse = this.inputs.attached[\"mouse\"];\n            if (mouse) {\n                return mouse.angularSensibility;\n            }\n            return 0;\n        },\n        /**\n         * Sets the input sensibility for a mouse input. (default is 2000.0)\n         * Higher values reduce sensitivity.\n         */\n        set: function (value) {\n            var mouse = this.inputs.attached[\"mouse\"];\n            if (mouse) {\n                mouse.angularSensibility = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FreeCamera.prototype, \"keysUp\", {\n        /**\n         * Gets or Set the list of keyboard keys used to control the forward move of the camera.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysUp;\n            }\n            return [];\n        },\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysUp = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FreeCamera.prototype, \"keysUpward\", {\n        /**\n         * Gets or Set the list of keyboard keys used to control the upward move of the camera.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysUpward;\n            }\n            return [];\n        },\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysUpward = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FreeCamera.prototype, \"keysDown\", {\n        /**\n         * Gets or Set the list of keyboard keys used to control the backward move of the camera.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysDown;\n            }\n            return [];\n        },\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysDown = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FreeCamera.prototype, \"keysDownward\", {\n        /**\n         * Gets or Set the list of keyboard keys used to control the downward move of the camera.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysDownward;\n            }\n            return [];\n        },\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysDownward = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FreeCamera.prototype, \"keysLeft\", {\n        /**\n         * Gets or Set the list of keyboard keys used to control the left strafe move of the camera.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysLeft;\n            }\n            return [];\n        },\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysLeft = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FreeCamera.prototype, \"keysRight\", {\n        /**\n         * Gets or Set the list of keyboard keys used to control the right strafe move of the camera.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysRight;\n            }\n            return [];\n        },\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysRight = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FreeCamera.prototype, \"keysRotateLeft\", {\n        /**\n         * Gets or Set the list of keyboard keys used to control the left rotation move of the camera.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysRotateLeft;\n            }\n            return [];\n        },\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysRotateLeft = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FreeCamera.prototype, \"keysRotateRight\", {\n        /**\n         * Gets or Set the list of keyboard keys used to control the right rotation move of the camera.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysRotateRight;\n            }\n            return [];\n        },\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysRotateRight = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Attached controls to the current camera.\n     * @param ignored defines an ignored parameter kept for backward compatibility.\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    FreeCamera.prototype.attachControl = function (ignored, noPreventDefault) {\n        // eslint-disable-next-line prefer-rest-params\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        this.inputs.attachElement(noPreventDefault);\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    FreeCamera.prototype.detachControl = function () {\n        this.inputs.detachElement();\n        this.cameraDirection = new Vector3(0, 0, 0);\n        this.cameraRotation = new Vector2(0, 0);\n    };\n    Object.defineProperty(FreeCamera.prototype, \"collisionMask\", {\n        /**\n         * Define a collision mask to limit the list of object the camera can collide with\n         */\n        get: function () {\n            return this._collisionMask;\n        },\n        set: function (mask) {\n            this._collisionMask = !isNaN(mask) ? mask : -1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @param displacement\n     * @hidden\n     */\n    FreeCamera.prototype._collideWithWorld = function (displacement) {\n        var globalPosition;\n        if (this.parent) {\n            globalPosition = Vector3.TransformCoordinates(this.position, this.parent.getWorldMatrix());\n        }\n        else {\n            globalPosition = this.position;\n        }\n        globalPosition.subtractFromFloatsToRef(0, this.ellipsoid.y, 0, this._oldPosition);\n        this._oldPosition.addInPlace(this.ellipsoidOffset);\n        var coordinator = this.getScene().collisionCoordinator;\n        if (!this._collider) {\n            this._collider = coordinator.createCollider();\n        }\n        this._collider._radius = this.ellipsoid;\n        this._collider.collisionMask = this._collisionMask;\n        //no need for clone, as long as gravity is not on.\n        var actualDisplacement = displacement;\n        //add gravity to the direction to prevent the dual-collision checking\n        if (this.applyGravity) {\n            //this prevents mending with cameraDirection, a global variable of the free camera class.\n            actualDisplacement = displacement.add(this.getScene().gravity);\n        }\n        coordinator.getNewPosition(this._oldPosition, actualDisplacement, this._collider, 3, null, this._onCollisionPositionChange, this.uniqueId);\n    };\n    /** @hidden */\n    FreeCamera.prototype._checkInputs = function () {\n        if (!this._localDirection) {\n            this._localDirection = Vector3.Zero();\n            this._transformedDirection = Vector3.Zero();\n        }\n        this.inputs.checkInputs();\n        _super.prototype._checkInputs.call(this);\n    };\n    /** @hidden */\n    FreeCamera.prototype._decideIfNeedsToMove = function () {\n        return this._needMoveForGravity || Math.abs(this.cameraDirection.x) > 0 || Math.abs(this.cameraDirection.y) > 0 || Math.abs(this.cameraDirection.z) > 0;\n    };\n    /** @hidden */\n    FreeCamera.prototype._updatePosition = function () {\n        if (this.checkCollisions && this.getScene().collisionsEnabled) {\n            this._collideWithWorld(this.cameraDirection);\n        }\n        else {\n            _super.prototype._updatePosition.call(this);\n        }\n    };\n    /**\n     * Destroy the camera and release the current resources hold by it.\n     */\n    FreeCamera.prototype.dispose = function () {\n        this.inputs.clear();\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Gets the current object class name.\n     * @return the class name\n     */\n    FreeCamera.prototype.getClassName = function () {\n        return \"FreeCamera\";\n    };\n    __decorate([\n        serializeAsVector3()\n    ], FreeCamera.prototype, \"ellipsoid\", void 0);\n    __decorate([\n        serializeAsVector3()\n    ], FreeCamera.prototype, \"ellipsoidOffset\", void 0);\n    __decorate([\n        serialize()\n    ], FreeCamera.prototype, \"checkCollisions\", void 0);\n    __decorate([\n        serialize()\n    ], FreeCamera.prototype, \"applyGravity\", void 0);\n    return FreeCamera;\n}(TargetCamera));\nexport { FreeCamera };\n//# sourceMappingURL=freeCamera.js.map","import { __extends } from \"tslib\";\nimport { CameraInputsManager } from \"./cameraInputsManager.js\";\nimport { FreeCameraKeyboardMoveInput } from \"../Cameras/Inputs/freeCameraKeyboardMoveInput.js\";\nimport { FreeCameraMouseInput } from \"../Cameras/Inputs/freeCameraMouseInput.js\";\nimport { FreeCameraMouseWheelInput } from \"../Cameras/Inputs/freeCameraMouseWheelInput.js\";\nimport { FreeCameraTouchInput } from \"../Cameras/Inputs/freeCameraTouchInput.js\";\n/**\n * Default Inputs manager for the FreeCamera.\n * It groups all the default supported inputs for ease of use.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar FreeCameraInputsManager = /** @class */ (function (_super) {\n    __extends(FreeCameraInputsManager, _super);\n    /**\n     * Instantiates a new FreeCameraInputsManager.\n     * @param camera Defines the camera the inputs belong to\n     */\n    function FreeCameraInputsManager(camera) {\n        var _this = _super.call(this, camera) || this;\n        /**\n         * @hidden\n         */\n        _this._mouseInput = null;\n        /**\n         * @hidden\n         */\n        _this._mouseWheelInput = null;\n        return _this;\n    }\n    /**\n     * Add keyboard input support to the input manager.\n     * @returns the current input manager\n     */\n    FreeCameraInputsManager.prototype.addKeyboard = function () {\n        this.add(new FreeCameraKeyboardMoveInput());\n        return this;\n    };\n    /**\n     * Add mouse input support to the input manager.\n     * @param touchEnabled if the FreeCameraMouseInput should support touch (default: true)\n     * @returns the current input manager\n     */\n    FreeCameraInputsManager.prototype.addMouse = function (touchEnabled) {\n        if (touchEnabled === void 0) { touchEnabled = true; }\n        if (!this._mouseInput) {\n            this._mouseInput = new FreeCameraMouseInput(touchEnabled);\n            this.add(this._mouseInput);\n        }\n        return this;\n    };\n    /**\n     * Removes the mouse input support from the manager\n     * @returns the current input manager\n     */\n    FreeCameraInputsManager.prototype.removeMouse = function () {\n        if (this._mouseInput) {\n            this.remove(this._mouseInput);\n        }\n        return this;\n    };\n    /**\n     * Add mouse wheel input support to the input manager.\n     * @returns the current input manager\n     */\n    FreeCameraInputsManager.prototype.addMouseWheel = function () {\n        if (!this._mouseWheelInput) {\n            this._mouseWheelInput = new FreeCameraMouseWheelInput();\n            this.add(this._mouseWheelInput);\n        }\n        return this;\n    };\n    /**\n     * Removes the mouse wheel input support from the manager\n     * @returns the current input manager\n     */\n    FreeCameraInputsManager.prototype.removeMouseWheel = function () {\n        if (this._mouseWheelInput) {\n            this.remove(this._mouseWheelInput);\n        }\n        return this;\n    };\n    /**\n     * Add touch input support to the input manager.\n     * @returns the current input manager\n     */\n    FreeCameraInputsManager.prototype.addTouch = function () {\n        this.add(new FreeCameraTouchInput());\n        return this;\n    };\n    /**\n     * Remove all attached input methods from a camera\n     */\n    FreeCameraInputsManager.prototype.clear = function () {\n        _super.prototype.clear.call(this);\n        this._mouseInput = null;\n    };\n    return FreeCameraInputsManager;\n}(CameraInputsManager));\nexport { FreeCameraInputsManager };\n//# sourceMappingURL=freeCameraInputsManager.js.map","import { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { ArcRotateCameraInputsManager } from \"../../Cameras/arcRotateCameraInputsManager.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Add orientation input support to the input manager.\n * @returns the current input manager\n */\nArcRotateCameraInputsManager.prototype.addVRDeviceOrientation = function () {\n    this.add(new ArcRotateCameraVRDeviceOrientationInput());\n    return this;\n};\n/**\n * Manage the device orientation inputs (gyroscope) to control an arc rotate camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar ArcRotateCameraVRDeviceOrientationInput = /** @class */ (function () {\n    /**\n     * Instantiate a new ArcRotateCameraVRDeviceOrientationInput.\n     */\n    function ArcRotateCameraVRDeviceOrientationInput() {\n        /**\n         * Defines a correction factor applied on the alpha value retrieved from the orientation events.\n         */\n        this.alphaCorrection = 1;\n        /**\n         * Defines a correction factor applied on the gamma value retrieved from the orientation events.\n         */\n        this.gammaCorrection = 1;\n        this._alpha = 0;\n        this._gamma = 0;\n        this._dirty = false;\n        this._deviceOrientationHandler = this._onOrientationEvent.bind(this);\n    }\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    ArcRotateCameraVRDeviceOrientationInput.prototype.attachControl = function (noPreventDefault) {\n        var _this = this;\n        // eslint-disable-next-line prefer-rest-params\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        this.camera.attachControl(noPreventDefault);\n        var hostWindow = this.camera.getScene().getEngine().getHostWindow();\n        if (hostWindow) {\n            // check iOS 13+ support\n            if (typeof DeviceOrientationEvent !== \"undefined\" && typeof DeviceOrientationEvent.requestPermission === \"function\") {\n                DeviceOrientationEvent\n                    .requestPermission()\n                    .then(function (response) {\n                    if (response === \"granted\") {\n                        hostWindow.addEventListener(\"deviceorientation\", _this._deviceOrientationHandler);\n                    }\n                    else {\n                        Tools.Warn(\"Permission not granted.\");\n                    }\n                })\n                    .catch(function (error) {\n                    Tools.Error(error);\n                });\n            }\n            else {\n                hostWindow.addEventListener(\"deviceorientation\", this._deviceOrientationHandler);\n            }\n        }\n    };\n    /**\n     * @param evt\n     * @hidden\n     */\n    ArcRotateCameraVRDeviceOrientationInput.prototype._onOrientationEvent = function (evt) {\n        if (evt.alpha !== null) {\n            this._alpha = (+evt.alpha | 0) * this.alphaCorrection;\n        }\n        if (evt.gamma !== null) {\n            this._gamma = (+evt.gamma | 0) * this.gammaCorrection;\n        }\n        this._dirty = true;\n    };\n    /**\n     * Update the current camera state depending on the inputs that have been used this frame.\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n     */\n    ArcRotateCameraVRDeviceOrientationInput.prototype.checkInputs = function () {\n        if (this._dirty) {\n            this._dirty = false;\n            if (this._gamma < 0) {\n                this._gamma = 180 + this._gamma;\n            }\n            this.camera.alpha = (((-this._alpha / 180.0) * Math.PI) % Math.PI) * 2;\n            this.camera.beta = (this._gamma / 180.0) * Math.PI;\n        }\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    ArcRotateCameraVRDeviceOrientationInput.prototype.detachControl = function () {\n        window.removeEventListener(\"deviceorientation\", this._deviceOrientationHandler);\n    };\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    ArcRotateCameraVRDeviceOrientationInput.prototype.getClassName = function () {\n        return \"ArcRotateCameraVRDeviceOrientationInput\";\n    };\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input friendly name\n     */\n    ArcRotateCameraVRDeviceOrientationInput.prototype.getSimpleName = function () {\n        return \"VRDeviceOrientation\";\n    };\n    return ArcRotateCameraVRDeviceOrientationInput;\n}());\nexport { ArcRotateCameraVRDeviceOrientationInput };\nCameraInputTypes[\"ArcRotateCameraVRDeviceOrientationInput\"] = ArcRotateCameraVRDeviceOrientationInput;\n//# sourceMappingURL=arcRotateCameraVRDeviceOrientationInput.js.map","import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Listen to keyboard events to control the camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar FlyCameraKeyboardInput = /** @class */ (function () {\n    function FlyCameraKeyboardInput() {\n        /**\n         * The list of keyboard keys used to control the forward move of the camera.\n         */\n        this.keysForward = [87];\n        /**\n         * The list of keyboard keys used to control the backward move of the camera.\n         */\n        this.keysBackward = [83];\n        /**\n         * The list of keyboard keys used to control the forward move of the camera.\n         */\n        this.keysUp = [69];\n        /**\n         * The list of keyboard keys used to control the backward move of the camera.\n         */\n        this.keysDown = [81];\n        /**\n         * The list of keyboard keys used to control the right strafe move of the camera.\n         */\n        this.keysRight = [68];\n        /**\n         * The list of keyboard keys used to control the left strafe move of the camera.\n         */\n        this.keysLeft = [65];\n        this._keys = new Array();\n    }\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    FlyCameraKeyboardInput.prototype.attachControl = function (noPreventDefault) {\n        var _this = this;\n        // eslint-disable-next-line prefer-rest-params\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        if (this._onCanvasBlurObserver) {\n            return;\n        }\n        this._scene = this.camera.getScene();\n        this._engine = this._scene.getEngine();\n        this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(function () {\n            _this._keys = [];\n        });\n        this._onKeyboardObserver = this._scene.onKeyboardObservable.add(function (info) {\n            var evt = info.event;\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\n                if (_this.keysForward.indexOf(evt.keyCode) !== -1 ||\n                    _this.keysBackward.indexOf(evt.keyCode) !== -1 ||\n                    _this.keysUp.indexOf(evt.keyCode) !== -1 ||\n                    _this.keysDown.indexOf(evt.keyCode) !== -1 ||\n                    _this.keysLeft.indexOf(evt.keyCode) !== -1 ||\n                    _this.keysRight.indexOf(evt.keyCode) !== -1) {\n                    var index = _this._keys.indexOf(evt.keyCode);\n                    if (index === -1) {\n                        _this._keys.push(evt.keyCode);\n                    }\n                    if (!noPreventDefault) {\n                        evt.preventDefault();\n                    }\n                }\n            }\n            else {\n                if (_this.keysForward.indexOf(evt.keyCode) !== -1 ||\n                    _this.keysBackward.indexOf(evt.keyCode) !== -1 ||\n                    _this.keysUp.indexOf(evt.keyCode) !== -1 ||\n                    _this.keysDown.indexOf(evt.keyCode) !== -1 ||\n                    _this.keysLeft.indexOf(evt.keyCode) !== -1 ||\n                    _this.keysRight.indexOf(evt.keyCode) !== -1) {\n                    var index = _this._keys.indexOf(evt.keyCode);\n                    if (index >= 0) {\n                        _this._keys.splice(index, 1);\n                    }\n                    if (!noPreventDefault) {\n                        evt.preventDefault();\n                    }\n                }\n            }\n        });\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    FlyCameraKeyboardInput.prototype.detachControl = function () {\n        if (this._scene) {\n            if (this._onKeyboardObserver) {\n                this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n            }\n            if (this._onCanvasBlurObserver) {\n                this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n            }\n            this._onKeyboardObserver = null;\n            this._onCanvasBlurObserver = null;\n        }\n        this._keys = [];\n    };\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    FlyCameraKeyboardInput.prototype.getClassName = function () {\n        return \"FlyCameraKeyboardInput\";\n    };\n    /**\n     * @hidden\n     */\n    FlyCameraKeyboardInput.prototype._onLostFocus = function () {\n        this._keys = [];\n    };\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input friendly name\n     */\n    FlyCameraKeyboardInput.prototype.getSimpleName = function () {\n        return \"keyboard\";\n    };\n    /**\n     * Update the current camera state depending on the inputs that have been used this frame.\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n     */\n    FlyCameraKeyboardInput.prototype.checkInputs = function () {\n        if (this._onKeyboardObserver) {\n            var camera = this.camera;\n            // Keyboard\n            for (var index = 0; index < this._keys.length; index++) {\n                var keyCode = this._keys[index];\n                var speed = camera._computeLocalCameraSpeed();\n                if (this.keysForward.indexOf(keyCode) !== -1) {\n                    camera._localDirection.copyFromFloats(0, 0, speed);\n                }\n                else if (this.keysBackward.indexOf(keyCode) !== -1) {\n                    camera._localDirection.copyFromFloats(0, 0, -speed);\n                }\n                else if (this.keysUp.indexOf(keyCode) !== -1) {\n                    camera._localDirection.copyFromFloats(0, speed, 0);\n                }\n                else if (this.keysDown.indexOf(keyCode) !== -1) {\n                    camera._localDirection.copyFromFloats(0, -speed, 0);\n                }\n                else if (this.keysRight.indexOf(keyCode) !== -1) {\n                    camera._localDirection.copyFromFloats(speed, 0, 0);\n                }\n                else if (this.keysLeft.indexOf(keyCode) !== -1) {\n                    camera._localDirection.copyFromFloats(-speed, 0, 0);\n                }\n                if (camera.getScene().useRightHandedSystem) {\n                    camera._localDirection.z *= -1;\n                }\n                camera.getViewMatrix().invertToRef(camera._cameraTransformMatrix);\n                Vector3.TransformNormalToRef(camera._localDirection, camera._cameraTransformMatrix, camera._transformedDirection);\n                camera.cameraDirection.addInPlace(camera._transformedDirection);\n            }\n        }\n    };\n    __decorate([\n        serialize()\n    ], FlyCameraKeyboardInput.prototype, \"keysForward\", void 0);\n    __decorate([\n        serialize()\n    ], FlyCameraKeyboardInput.prototype, \"keysBackward\", void 0);\n    __decorate([\n        serialize()\n    ], FlyCameraKeyboardInput.prototype, \"keysUp\", void 0);\n    __decorate([\n        serialize()\n    ], FlyCameraKeyboardInput.prototype, \"keysDown\", void 0);\n    __decorate([\n        serialize()\n    ], FlyCameraKeyboardInput.prototype, \"keysRight\", void 0);\n    __decorate([\n        serialize()\n    ], FlyCameraKeyboardInput.prototype, \"keysLeft\", void 0);\n    return FlyCameraKeyboardInput;\n}());\nexport { FlyCameraKeyboardInput };\nCameraInputTypes[\"FlyCameraKeyboardInput\"] = FlyCameraKeyboardInput;\n//# sourceMappingURL=flyCameraKeyboardInput.js.map","import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents.js\";\nimport { Quaternion } from \"../../Maths/math.vector.js\";\nimport { Axis } from \"../../Maths/math.axis.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Listen to mouse events to control the camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar FlyCameraMouseInput = /** @class */ (function () {\n    /**\n     * Listen to mouse events to control the camera.\n     * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n     */\n    function FlyCameraMouseInput() {\n        /**\n         * Defines the buttons associated with the input to handle camera rotation.\n         */\n        this.buttons = [0, 1, 2];\n        /**\n         * Assign buttons for Yaw control.\n         */\n        this.buttonsYaw = [-1, 0, 1];\n        /**\n         * Assign buttons for Pitch control.\n         */\n        this.buttonsPitch = [-1, 0, 1];\n        /**\n         * Assign buttons for Roll control.\n         */\n        this.buttonsRoll = [2];\n        /**\n         * Detect if any button is being pressed while mouse is moved.\n         * -1 = Mouse locked.\n         * 0 = Left button.\n         * 1 = Middle Button.\n         * 2 = Right Button.\n         */\n        this.activeButton = -1;\n        /**\n         * Defines the pointer's angular sensibility, to control the camera rotation speed.\n         * Higher values reduce its sensitivity.\n         */\n        this.angularSensibility = 1000.0;\n        this._previousPosition = null;\n    }\n    /**\n     * Attach the mouse control to the HTML DOM element.\n     * @param noPreventDefault Defines whether events caught by the controls should call preventdefault().\n     */\n    FlyCameraMouseInput.prototype.attachControl = function (noPreventDefault) {\n        var _this = this;\n        // eslint-disable-next-line prefer-rest-params\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        this._noPreventDefault = noPreventDefault;\n        this._observer = this.camera.getScene().onPointerObservable.add(function (p) {\n            _this._pointerInput(p);\n        }, PointerEventTypes.POINTERDOWN | PointerEventTypes.POINTERUP | PointerEventTypes.POINTERMOVE);\n        // Correct Roll by rate, if enabled.\n        this._rollObserver = this.camera.getScene().onBeforeRenderObservable.add(function () {\n            if (_this.camera.rollCorrect) {\n                _this.camera.restoreRoll(_this.camera.rollCorrect);\n            }\n        });\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    FlyCameraMouseInput.prototype.detachControl = function () {\n        if (this._observer) {\n            this.camera.getScene().onPointerObservable.remove(this._observer);\n            this.camera.getScene().onBeforeRenderObservable.remove(this._rollObserver);\n            this._observer = null;\n            this._rollObserver = null;\n            this._previousPosition = null;\n            this._noPreventDefault = undefined;\n        }\n    };\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name.\n     */\n    FlyCameraMouseInput.prototype.getClassName = function () {\n        return \"FlyCameraMouseInput\";\n    };\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input's friendly name.\n     */\n    FlyCameraMouseInput.prototype.getSimpleName = function () {\n        return \"mouse\";\n    };\n    // Track mouse movement, when the pointer is not locked.\n    FlyCameraMouseInput.prototype._pointerInput = function (p) {\n        var e = p.event;\n        var camera = this.camera;\n        var engine = camera.getEngine();\n        if (engine.isInVRExclusivePointerMode) {\n            return;\n        }\n        if (!this.touchEnabled && e.pointerType === \"touch\") {\n            return;\n        }\n        // Mouse is moved but an unknown mouse button is pressed.\n        if (p.type !== PointerEventTypes.POINTERMOVE && this.buttons.indexOf(e.button) === -1) {\n            return;\n        }\n        var srcElement = (e.srcElement || e.target);\n        // Mouse down.\n        if (p.type === PointerEventTypes.POINTERDOWN) {\n            try {\n                srcElement === null || srcElement === void 0 ? void 0 : srcElement.setPointerCapture(e.pointerId);\n            }\n            catch (e) {\n                // Nothing to do with the error. Execution continues.\n            }\n            this._previousPosition = {\n                x: e.clientX,\n                y: e.clientY,\n            };\n            this.activeButton = e.button;\n            if (!this._noPreventDefault) {\n                e.preventDefault();\n                this._element.focus();\n            }\n            // This is required to move while pointer button is down\n            if (engine.isPointerLock) {\n                this._onMouseMove(p.event);\n            }\n        }\n        // Mouse up.\n        else if (p.type === PointerEventTypes.POINTERUP) {\n            try {\n                srcElement === null || srcElement === void 0 ? void 0 : srcElement.releasePointerCapture(e.pointerId);\n            }\n            catch (e) {\n                // Nothing to do with the error. Execution continues.\n            }\n            this.activeButton = -1;\n            this._previousPosition = null;\n            if (!this._noPreventDefault) {\n                e.preventDefault();\n            }\n        }\n        // Mouse move.\n        else if (p.type === PointerEventTypes.POINTERMOVE) {\n            if (!this._previousPosition) {\n                if (engine.isPointerLock) {\n                    this._onMouseMove(p.event);\n                }\n                return;\n            }\n            var offsetX = e.clientX - this._previousPosition.x;\n            var offsetY = e.clientY - this._previousPosition.y;\n            this._rotateCamera(offsetX, offsetY);\n            this._previousPosition = {\n                x: e.clientX,\n                y: e.clientY,\n            };\n            if (!this._noPreventDefault) {\n                e.preventDefault();\n            }\n        }\n    };\n    // Track mouse movement, when pointer is locked.\n    FlyCameraMouseInput.prototype._onMouseMove = function (e) {\n        var camera = this.camera;\n        var engine = camera.getEngine();\n        if (!engine.isPointerLock || engine.isInVRExclusivePointerMode) {\n            return;\n        }\n        var offsetX = e.movementX || e.mozMovementX || e.webkitMovementX || e.msMovementX || 0;\n        var offsetY = e.movementY || e.mozMovementY || e.webkitMovementY || e.msMovementY || 0;\n        this._rotateCamera(offsetX, offsetY);\n        this._previousPosition = null;\n        if (!this._noPreventDefault) {\n            e.preventDefault();\n        }\n    };\n    /**\n     * Rotate camera by mouse offset.\n     * @param offsetX\n     * @param offsetY\n     */\n    FlyCameraMouseInput.prototype._rotateCamera = function (offsetX, offsetY) {\n        var _this = this;\n        var camera = this.camera;\n        var scene = this.camera.getScene();\n        if (scene.useRightHandedSystem) {\n            offsetX *= -1;\n        }\n        if (camera.parent && camera.parent._getWorldMatrixDeterminant() < 0) {\n            offsetX *= -1;\n        }\n        var x = offsetX / this.angularSensibility;\n        var y = offsetY / this.angularSensibility;\n        // Initialize to current rotation.\n        var currentRotation = Quaternion.RotationYawPitchRoll(camera.rotation.y, camera.rotation.x, camera.rotation.z);\n        var rotationChange;\n        // Pitch.\n        if (this.buttonsPitch.some(function (v) {\n            return v === _this.activeButton;\n        })) {\n            // Apply change in Radians to vector Angle.\n            rotationChange = Quaternion.RotationAxis(Axis.X, y);\n            // Apply Pitch to quaternion.\n            currentRotation.multiplyInPlace(rotationChange);\n        }\n        // Yaw.\n        if (this.buttonsYaw.some(function (v) {\n            return v === _this.activeButton;\n        })) {\n            // Apply change in Radians to vector Angle.\n            rotationChange = Quaternion.RotationAxis(Axis.Y, x);\n            // Apply Yaw to quaternion.\n            currentRotation.multiplyInPlace(rotationChange);\n            // Add Roll, if banked turning is enabled, within Roll limit.\n            var limit = camera.bankedTurnLimit + camera._trackRoll; // Defaults to 90° plus manual roll.\n            if (camera.bankedTurn && -limit < camera.rotation.z && camera.rotation.z < limit) {\n                var bankingDelta = camera.bankedTurnMultiplier * -x;\n                // Apply change in Radians to vector Angle.\n                rotationChange = Quaternion.RotationAxis(Axis.Z, bankingDelta);\n                // Apply Yaw to quaternion.\n                currentRotation.multiplyInPlace(rotationChange);\n            }\n        }\n        // Roll.\n        if (this.buttonsRoll.some(function (v) {\n            return v === _this.activeButton;\n        })) {\n            // Apply change in Radians to vector Angle.\n            rotationChange = Quaternion.RotationAxis(Axis.Z, -x);\n            // Track Rolling.\n            camera._trackRoll -= x;\n            // Apply Pitch to quaternion.\n            currentRotation.multiplyInPlace(rotationChange);\n        }\n        // Apply rotationQuaternion to Euler camera.rotation.\n        currentRotation.toEulerAnglesToRef(camera.rotation);\n    };\n    __decorate([\n        serialize()\n    ], FlyCameraMouseInput.prototype, \"buttons\", void 0);\n    __decorate([\n        serialize()\n    ], FlyCameraMouseInput.prototype, \"angularSensibility\", void 0);\n    return FlyCameraMouseInput;\n}());\nexport { FlyCameraMouseInput };\nCameraInputTypes[\"FlyCameraMouseInput\"] = FlyCameraMouseInput;\n//# sourceMappingURL=flyCameraMouseInput.js.map","import { __decorate } from \"tslib\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Manage the keyboard inputs to control the movement of a follow camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar FollowCameraKeyboardMoveInput = /** @class */ (function () {\n    function FollowCameraKeyboardMoveInput() {\n        /**\n         * Defines the list of key codes associated with the up action (increase heightOffset)\n         */\n        this.keysHeightOffsetIncr = [38];\n        /**\n         * Defines the list of key codes associated with the down action (decrease heightOffset)\n         */\n        this.keysHeightOffsetDecr = [40];\n        /**\n         * Defines whether the Alt modifier key is required to move up/down (alter heightOffset)\n         */\n        this.keysHeightOffsetModifierAlt = false;\n        /**\n         * Defines whether the Ctrl modifier key is required to move up/down (alter heightOffset)\n         */\n        this.keysHeightOffsetModifierCtrl = false;\n        /**\n         * Defines whether the Shift modifier key is required to move up/down (alter heightOffset)\n         */\n        this.keysHeightOffsetModifierShift = false;\n        /**\n         * Defines the list of key codes associated with the left action (increase rotationOffset)\n         */\n        this.keysRotationOffsetIncr = [37];\n        /**\n         * Defines the list of key codes associated with the right action (decrease rotationOffset)\n         */\n        this.keysRotationOffsetDecr = [39];\n        /**\n         * Defines whether the Alt modifier key is required to move left/right (alter rotationOffset)\n         */\n        this.keysRotationOffsetModifierAlt = false;\n        /**\n         * Defines whether the Ctrl modifier key is required to move left/right (alter rotationOffset)\n         */\n        this.keysRotationOffsetModifierCtrl = false;\n        /**\n         * Defines whether the Shift modifier key is required to move left/right (alter rotationOffset)\n         */\n        this.keysRotationOffsetModifierShift = false;\n        /**\n         * Defines the list of key codes associated with the zoom-in action (decrease radius)\n         */\n        this.keysRadiusIncr = [40];\n        /**\n         * Defines the list of key codes associated with the zoom-out action (increase radius)\n         */\n        this.keysRadiusDecr = [38];\n        /**\n         * Defines whether the Alt modifier key is required to zoom in/out (alter radius value)\n         */\n        this.keysRadiusModifierAlt = true;\n        /**\n         * Defines whether the Ctrl modifier key is required to zoom in/out (alter radius value)\n         */\n        this.keysRadiusModifierCtrl = false;\n        /**\n         * Defines whether the Shift modifier key is required to zoom in/out (alter radius value)\n         */\n        this.keysRadiusModifierShift = false;\n        /**\n         * Defines the rate of change of heightOffset.\n         */\n        this.heightSensibility = 1;\n        /**\n         * Defines the rate of change of rotationOffset.\n         */\n        this.rotationSensibility = 1;\n        /**\n         * Defines the rate of change of radius.\n         */\n        this.radiusSensibility = 1;\n        this._keys = new Array();\n    }\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    FollowCameraKeyboardMoveInput.prototype.attachControl = function (noPreventDefault) {\n        var _this = this;\n        // eslint-disable-next-line prefer-rest-params\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        if (this._onCanvasBlurObserver) {\n            return;\n        }\n        this._scene = this.camera.getScene();\n        this._engine = this._scene.getEngine();\n        this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(function () {\n            _this._keys = [];\n        });\n        this._onKeyboardObserver = this._scene.onKeyboardObservable.add(function (info) {\n            var evt = info.event;\n            if (!evt.metaKey) {\n                if (info.type === KeyboardEventTypes.KEYDOWN) {\n                    _this._ctrlPressed = evt.ctrlKey;\n                    _this._altPressed = evt.altKey;\n                    _this._shiftPressed = evt.shiftKey;\n                    if (_this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysRadiusDecr.indexOf(evt.keyCode) !== -1) {\n                        var index = _this._keys.indexOf(evt.keyCode);\n                        if (index === -1) {\n                            _this._keys.push(evt.keyCode);\n                        }\n                        if (evt.preventDefault) {\n                            if (!noPreventDefault) {\n                                evt.preventDefault();\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (_this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 ||\n                        _this.keysRadiusDecr.indexOf(evt.keyCode) !== -1) {\n                        var index = _this._keys.indexOf(evt.keyCode);\n                        if (index >= 0) {\n                            _this._keys.splice(index, 1);\n                        }\n                        if (evt.preventDefault) {\n                            if (!noPreventDefault) {\n                                evt.preventDefault();\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    FollowCameraKeyboardMoveInput.prototype.detachControl = function () {\n        if (this._scene) {\n            if (this._onKeyboardObserver) {\n                this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n            }\n            if (this._onCanvasBlurObserver) {\n                this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n            }\n            this._onKeyboardObserver = null;\n            this._onCanvasBlurObserver = null;\n        }\n        this._keys = [];\n    };\n    /**\n     * Update the current camera state depending on the inputs that have been used this frame.\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n     */\n    FollowCameraKeyboardMoveInput.prototype.checkInputs = function () {\n        var _this = this;\n        if (this._onKeyboardObserver) {\n            this._keys.forEach(function (keyCode) {\n                if (_this.keysHeightOffsetIncr.indexOf(keyCode) !== -1 && _this._modifierHeightOffset()) {\n                    _this.camera.heightOffset += _this.heightSensibility;\n                }\n                else if (_this.keysHeightOffsetDecr.indexOf(keyCode) !== -1 && _this._modifierHeightOffset()) {\n                    _this.camera.heightOffset -= _this.heightSensibility;\n                }\n                else if (_this.keysRotationOffsetIncr.indexOf(keyCode) !== -1 && _this._modifierRotationOffset()) {\n                    _this.camera.rotationOffset += _this.rotationSensibility;\n                    _this.camera.rotationOffset %= 360;\n                }\n                else if (_this.keysRotationOffsetDecr.indexOf(keyCode) !== -1 && _this._modifierRotationOffset()) {\n                    _this.camera.rotationOffset -= _this.rotationSensibility;\n                    _this.camera.rotationOffset %= 360;\n                }\n                else if (_this.keysRadiusIncr.indexOf(keyCode) !== -1 && _this._modifierRadius()) {\n                    _this.camera.radius += _this.radiusSensibility;\n                }\n                else if (_this.keysRadiusDecr.indexOf(keyCode) !== -1 && _this._modifierRadius()) {\n                    _this.camera.radius -= _this.radiusSensibility;\n                }\n            });\n        }\n    };\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    FollowCameraKeyboardMoveInput.prototype.getClassName = function () {\n        return \"FollowCameraKeyboardMoveInput\";\n    };\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input friendly name\n     */\n    FollowCameraKeyboardMoveInput.prototype.getSimpleName = function () {\n        return \"keyboard\";\n    };\n    /**\n     * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\n     * allow modification of the heightOffset value.\n     */\n    FollowCameraKeyboardMoveInput.prototype._modifierHeightOffset = function () {\n        return (this.keysHeightOffsetModifierAlt === this._altPressed &&\n            this.keysHeightOffsetModifierCtrl === this._ctrlPressed &&\n            this.keysHeightOffsetModifierShift === this._shiftPressed);\n    };\n    /**\n     * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\n     * allow modification of the rotationOffset value.\n     */\n    FollowCameraKeyboardMoveInput.prototype._modifierRotationOffset = function () {\n        return (this.keysRotationOffsetModifierAlt === this._altPressed &&\n            this.keysRotationOffsetModifierCtrl === this._ctrlPressed &&\n            this.keysRotationOffsetModifierShift === this._shiftPressed);\n    };\n    /**\n     * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\n     * allow modification of the radius value.\n     */\n    FollowCameraKeyboardMoveInput.prototype._modifierRadius = function () {\n        return this.keysRadiusModifierAlt === this._altPressed && this.keysRadiusModifierCtrl === this._ctrlPressed && this.keysRadiusModifierShift === this._shiftPressed;\n    };\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetIncr\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetDecr\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetModifierAlt\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetModifierCtrl\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetModifierShift\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetIncr\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetDecr\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetModifierAlt\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetModifierCtrl\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetModifierShift\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusIncr\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusDecr\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusModifierAlt\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusModifierCtrl\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusModifierShift\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"heightSensibility\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"rotationSensibility\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraKeyboardMoveInput.prototype, \"radiusSensibility\", void 0);\n    return FollowCameraKeyboardMoveInput;\n}());\nexport { FollowCameraKeyboardMoveInput };\nCameraInputTypes[\"FollowCameraKeyboardMoveInput\"] = FollowCameraKeyboardMoveInput;\n//# sourceMappingURL=followCameraKeyboardMoveInput.js.map","import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Manage the mouse wheel inputs to control a follow camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar FollowCameraMouseWheelInput = /** @class */ (function () {\n    function FollowCameraMouseWheelInput() {\n        /**\n         * Moue wheel controls zoom. (Mouse wheel modifies camera.radius value.)\n         */\n        this.axisControlRadius = true;\n        /**\n         * Moue wheel controls height. (Mouse wheel modifies camera.heightOffset value.)\n         */\n        this.axisControlHeight = false;\n        /**\n         * Moue wheel controls angle. (Mouse wheel modifies camera.rotationOffset value.)\n         */\n        this.axisControlRotation = false;\n        /**\n         * Gets or Set the mouse wheel precision or how fast is the camera moves in\n         * relation to mouseWheel events.\n         */\n        this.wheelPrecision = 3.0;\n        /**\n         * wheelDeltaPercentage will be used instead of wheelPrecision if different from 0.\n         * It defines the percentage of current camera.radius to use as delta when wheel is used.\n         */\n        this.wheelDeltaPercentage = 0;\n    }\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    FollowCameraMouseWheelInput.prototype.attachControl = function (noPreventDefault) {\n        var _this = this;\n        // eslint-disable-next-line prefer-rest-params\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        this._wheel = function (p) {\n            // sanity check - this should be a PointerWheel event.\n            if (p.type !== PointerEventTypes.POINTERWHEEL) {\n                return;\n            }\n            var event = p.event;\n            var delta = 0;\n            // Chrome, Safari: event.deltaY\n            // IE: event.wheelDelta\n            // Firefox: event.detail (inverted)\n            var wheelDelta = Math.max(-1, Math.min(1, event.deltaY || event.wheelDelta || -event.detail));\n            if (_this.wheelDeltaPercentage) {\n                console.assert(_this.axisControlRadius + _this.axisControlHeight + _this.axisControlRotation <= 1, \"wheelDeltaPercentage only usable when mouse wheel \" +\n                    \"controls ONE axis. \" +\n                    \"Currently enabled: \" +\n                    \"axisControlRadius: \" +\n                    _this.axisControlRadius +\n                    \", axisControlHeightOffset: \" +\n                    _this.axisControlHeight +\n                    \", axisControlRotationOffset: \" +\n                    _this.axisControlRotation);\n                if (_this.axisControlRadius) {\n                    delta = wheelDelta * 0.01 * _this.wheelDeltaPercentage * _this.camera.radius;\n                }\n                else if (_this.axisControlHeight) {\n                    delta = wheelDelta * 0.01 * _this.wheelDeltaPercentage * _this.camera.heightOffset;\n                }\n                else if (_this.axisControlRotation) {\n                    delta = wheelDelta * 0.01 * _this.wheelDeltaPercentage * _this.camera.rotationOffset;\n                }\n            }\n            else {\n                delta = wheelDelta * _this.wheelPrecision;\n            }\n            if (delta) {\n                if (_this.axisControlRadius) {\n                    _this.camera.radius += delta;\n                }\n                else if (_this.axisControlHeight) {\n                    _this.camera.heightOffset -= delta;\n                }\n                else if (_this.axisControlRotation) {\n                    _this.camera.rotationOffset -= delta;\n                }\n            }\n            if (event.preventDefault) {\n                if (!noPreventDefault) {\n                    event.preventDefault();\n                }\n            }\n        };\n        this._observer = this.camera.getScene().onPointerObservable.add(this._wheel, PointerEventTypes.POINTERWHEEL);\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    FollowCameraMouseWheelInput.prototype.detachControl = function () {\n        if (this._observer) {\n            this.camera.getScene().onPointerObservable.remove(this._observer);\n            this._observer = null;\n            this._wheel = null;\n        }\n    };\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    FollowCameraMouseWheelInput.prototype.getClassName = function () {\n        return \"ArcRotateCameraMouseWheelInput\";\n    };\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input friendly name\n     */\n    FollowCameraMouseWheelInput.prototype.getSimpleName = function () {\n        return \"mousewheel\";\n    };\n    __decorate([\n        serialize()\n    ], FollowCameraMouseWheelInput.prototype, \"axisControlRadius\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraMouseWheelInput.prototype, \"axisControlHeight\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraMouseWheelInput.prototype, \"axisControlRotation\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraMouseWheelInput.prototype, \"wheelPrecision\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraMouseWheelInput.prototype, \"wheelDeltaPercentage\", void 0);\n    return FollowCameraMouseWheelInput;\n}());\nexport { FollowCameraMouseWheelInput };\nCameraInputTypes[\"FollowCameraMouseWheelInput\"] = FollowCameraMouseWheelInput;\n//# sourceMappingURL=followCameraMouseWheelInput.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { BaseCameraPointersInput } from \"../../Cameras/Inputs/BaseCameraPointersInput.js\";\n/**\n * Manage the pointers inputs to control an follow camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar FollowCameraPointersInput = /** @class */ (function (_super) {\n    __extends(FollowCameraPointersInput, _super);\n    function FollowCameraPointersInput() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Defines the pointer angular sensibility along the X axis or how fast is\n         * the camera rotating.\n         * A negative number will reverse the axis direction.\n         */\n        _this.angularSensibilityX = 1;\n        /**\n         * Defines the pointer angular sensibility along the Y axis or how fast is\n         * the camera rotating.\n         * A negative number will reverse the axis direction.\n         */\n        _this.angularSensibilityY = 1;\n        /**\n         * Defines the pointer pinch precision or how fast is the camera zooming.\n         * A negative number will reverse the axis direction.\n         */\n        _this.pinchPrecision = 10000.0;\n        /**\n         * pinchDeltaPercentage will be used instead of pinchPrecision if different\n         * from 0.\n         * It defines the percentage of current camera.radius to use as delta when\n         * pinch zoom is used.\n         */\n        _this.pinchDeltaPercentage = 0;\n        /**\n         * Pointer X axis controls zoom. (X axis modifies camera.radius value.)\n         */\n        _this.axisXControlRadius = false;\n        /**\n         * Pointer X axis controls height. (X axis modifies camera.heightOffset value.)\n         */\n        _this.axisXControlHeight = false;\n        /**\n         * Pointer X axis controls angle. (X axis modifies camera.rotationOffset value.)\n         */\n        _this.axisXControlRotation = true;\n        /**\n         * Pointer Y axis controls zoom. (Y axis modifies camera.radius value.)\n         */\n        _this.axisYControlRadius = false;\n        /**\n         * Pointer Y axis controls height. (Y axis modifies camera.heightOffset value.)\n         */\n        _this.axisYControlHeight = true;\n        /**\n         * Pointer Y axis controls angle. (Y axis modifies camera.rotationOffset value.)\n         */\n        _this.axisYControlRotation = false;\n        /**\n         * Pinch controls zoom. (Pinch modifies camera.radius value.)\n         */\n        _this.axisPinchControlRadius = true;\n        /**\n         * Pinch controls height. (Pinch modifies camera.heightOffset value.)\n         */\n        _this.axisPinchControlHeight = false;\n        /**\n         * Pinch controls angle. (Pinch modifies camera.rotationOffset value.)\n         */\n        _this.axisPinchControlRotation = false;\n        /**\n         * Log error messages if basic misconfiguration has occurred.\n         */\n        _this.warningEnable = true;\n        /* Check for obvious misconfiguration. */\n        _this._warningCounter = 0;\n        return _this;\n    }\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    FollowCameraPointersInput.prototype.getClassName = function () {\n        return \"FollowCameraPointersInput\";\n    };\n    FollowCameraPointersInput.prototype.onTouch = function (pointA, offsetX, offsetY) {\n        this._warning();\n        if (this.axisXControlRotation) {\n            this.camera.rotationOffset += offsetX / this.angularSensibilityX;\n        }\n        else if (this.axisYControlRotation) {\n            this.camera.rotationOffset += offsetY / this.angularSensibilityX;\n        }\n        if (this.axisXControlHeight) {\n            this.camera.heightOffset += offsetX / this.angularSensibilityY;\n        }\n        else if (this.axisYControlHeight) {\n            this.camera.heightOffset += offsetY / this.angularSensibilityY;\n        }\n        if (this.axisXControlRadius) {\n            this.camera.radius -= offsetX / this.angularSensibilityY;\n        }\n        else if (this.axisYControlRadius) {\n            this.camera.radius -= offsetY / this.angularSensibilityY;\n        }\n    };\n    FollowCameraPointersInput.prototype.onMultiTouch = function (pointA, pointB, previousPinchSquaredDistance, pinchSquaredDistance, previousMultiTouchPanPosition, multiTouchPanPosition) {\n        if (previousPinchSquaredDistance === 0 && previousMultiTouchPanPosition === null) {\n            // First time this method is called for new pinch.\n            // Next time this is called there will be a\n            // previousPinchSquaredDistance and pinchSquaredDistance to compare.\n            return;\n        }\n        if (pinchSquaredDistance === 0 && multiTouchPanPosition === null) {\n            // Last time this method is called at the end of a pinch.\n            return;\n        }\n        var pinchDelta = (pinchSquaredDistance - previousPinchSquaredDistance) / ((this.pinchPrecision * (this.angularSensibilityX + this.angularSensibilityY)) / 2);\n        if (this.pinchDeltaPercentage) {\n            pinchDelta *= 0.01 * this.pinchDeltaPercentage;\n            if (this.axisPinchControlRotation) {\n                this.camera.rotationOffset += pinchDelta * this.camera.rotationOffset;\n            }\n            if (this.axisPinchControlHeight) {\n                this.camera.heightOffset += pinchDelta * this.camera.heightOffset;\n            }\n            if (this.axisPinchControlRadius) {\n                this.camera.radius -= pinchDelta * this.camera.radius;\n            }\n        }\n        else {\n            if (this.axisPinchControlRotation) {\n                this.camera.rotationOffset += pinchDelta;\n            }\n            if (this.axisPinchControlHeight) {\n                this.camera.heightOffset += pinchDelta;\n            }\n            if (this.axisPinchControlRadius) {\n                this.camera.radius -= pinchDelta;\n            }\n        }\n    };\n    FollowCameraPointersInput.prototype._warning = function () {\n        if (!this.warningEnable || this._warningCounter++ % 100 !== 0) {\n            return;\n        }\n        var warn = \"It probably only makes sense to control ONE camera \" + \"property with each pointer axis. Set 'warningEnable = false' \" + \"if you are sure. Currently enabled: \";\n        console.assert(this.axisXControlRotation + this.axisXControlHeight + this.axisXControlRadius <= 1, warn + \"axisXControlRotation: \" + this.axisXControlRotation + \", axisXControlHeight: \" + this.axisXControlHeight + \", axisXControlRadius: \" + this.axisXControlRadius);\n        console.assert(this.axisYControlRotation + this.axisYControlHeight + this.axisYControlRadius <= 1, warn + \"axisYControlRotation: \" + this.axisYControlRotation + \", axisYControlHeight: \" + this.axisYControlHeight + \", axisYControlRadius: \" + this.axisYControlRadius);\n        console.assert(this.axisPinchControlRotation + this.axisPinchControlHeight + this.axisPinchControlRadius <= 1, warn +\n            \"axisPinchControlRotation: \" +\n            this.axisPinchControlRotation +\n            \", axisPinchControlHeight: \" +\n            this.axisPinchControlHeight +\n            \", axisPinchControlRadius: \" +\n            this.axisPinchControlRadius);\n    };\n    __decorate([\n        serialize()\n    ], FollowCameraPointersInput.prototype, \"angularSensibilityX\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraPointersInput.prototype, \"angularSensibilityY\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraPointersInput.prototype, \"pinchPrecision\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraPointersInput.prototype, \"pinchDeltaPercentage\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraPointersInput.prototype, \"axisXControlRadius\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraPointersInput.prototype, \"axisXControlHeight\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraPointersInput.prototype, \"axisXControlRotation\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraPointersInput.prototype, \"axisYControlRadius\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraPointersInput.prototype, \"axisYControlHeight\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraPointersInput.prototype, \"axisYControlRotation\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraPointersInput.prototype, \"axisPinchControlRadius\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraPointersInput.prototype, \"axisPinchControlHeight\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCameraPointersInput.prototype, \"axisPinchControlRotation\", void 0);\n    return FollowCameraPointersInput;\n}(BaseCameraPointersInput));\nexport { FollowCameraPointersInput };\nCameraInputTypes[\"FollowCameraPointersInput\"] = FollowCameraPointersInput;\n//# sourceMappingURL=followCameraPointersInput.js.map","import { VirtualJoystick, JoystickAxis } from \"../../Misc/virtualJoystick.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { FreeCameraInputsManager } from \"../../Cameras/freeCameraInputsManager.js\";\n/**\n * Add virtual joystick input support to the input manager.\n * @returns the current input manager\n */\nFreeCameraInputsManager.prototype.addVirtualJoystick = function () {\n    this.add(new FreeCameraVirtualJoystickInput());\n    return this;\n};\n/**\n * Manage the Virtual Joystick inputs to control the movement of a free camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar FreeCameraVirtualJoystickInput = /** @class */ (function () {\n    function FreeCameraVirtualJoystickInput() {\n    }\n    /**\n     * Gets the left stick of the virtual joystick.\n     * @returns The virtual Joystick\n     */\n    FreeCameraVirtualJoystickInput.prototype.getLeftJoystick = function () {\n        return this._leftjoystick;\n    };\n    /**\n     * Gets the right stick of the virtual joystick.\n     * @returns The virtual Joystick\n     */\n    FreeCameraVirtualJoystickInput.prototype.getRightJoystick = function () {\n        return this._rightjoystick;\n    };\n    /**\n     * Update the current camera state depending on the inputs that have been used this frame.\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n     */\n    FreeCameraVirtualJoystickInput.prototype.checkInputs = function () {\n        if (this._leftjoystick) {\n            var camera = this.camera;\n            var speed = camera._computeLocalCameraSpeed() * 50;\n            var cameraTransform = Matrix.RotationYawPitchRoll(camera.rotation.y, camera.rotation.x, 0);\n            var deltaTransform = Vector3.TransformCoordinates(new Vector3(this._leftjoystick.deltaPosition.x * speed, this._leftjoystick.deltaPosition.y * speed, this._leftjoystick.deltaPosition.z * speed), cameraTransform);\n            camera.cameraDirection = camera.cameraDirection.add(deltaTransform);\n            camera.cameraRotation = camera.cameraRotation.addVector3(this._rightjoystick.deltaPosition);\n            if (!this._leftjoystick.pressed) {\n                this._leftjoystick.deltaPosition = this._leftjoystick.deltaPosition.scale(0.9);\n            }\n            if (!this._rightjoystick.pressed) {\n                this._rightjoystick.deltaPosition = this._rightjoystick.deltaPosition.scale(0.9);\n            }\n        }\n    };\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     */\n    FreeCameraVirtualJoystickInput.prototype.attachControl = function () {\n        this._leftjoystick = new VirtualJoystick(true);\n        this._leftjoystick.setAxisForUpDown(JoystickAxis.Z);\n        this._leftjoystick.setAxisForLeftRight(JoystickAxis.X);\n        this._leftjoystick.setJoystickSensibility(0.15);\n        this._rightjoystick = new VirtualJoystick(false);\n        this._rightjoystick.setAxisForUpDown(JoystickAxis.X);\n        this._rightjoystick.setAxisForLeftRight(JoystickAxis.Y);\n        this._rightjoystick.reverseUpDown = true;\n        this._rightjoystick.setJoystickSensibility(0.05);\n        this._rightjoystick.setJoystickColor(\"yellow\");\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    FreeCameraVirtualJoystickInput.prototype.detachControl = function () {\n        this._leftjoystick.releaseCanvas();\n        this._rightjoystick.releaseCanvas();\n    };\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    FreeCameraVirtualJoystickInput.prototype.getClassName = function () {\n        return \"FreeCameraVirtualJoystickInput\";\n    };\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input friendly name\n     */\n    FreeCameraVirtualJoystickInput.prototype.getSimpleName = function () {\n        return \"virtualJoystick\";\n    };\n    return FreeCameraVirtualJoystickInput;\n}());\nexport { FreeCameraVirtualJoystickInput };\nCameraInputTypes[\"FreeCameraVirtualJoystickInput\"] = FreeCameraVirtualJoystickInput;\n//# sourceMappingURL=freeCameraVirtualJoystickInput.js.map","import { __extends } from \"tslib\";\nimport { CameraInputsManager } from \"./cameraInputsManager.js\";\nimport { FlyCameraMouseInput } from \"../Cameras/Inputs/flyCameraMouseInput.js\";\nimport { FlyCameraKeyboardInput } from \"../Cameras/Inputs/flyCameraKeyboardInput.js\";\n/**\n * Default Inputs manager for the FlyCamera.\n * It groups all the default supported inputs for ease of use.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar FlyCameraInputsManager = /** @class */ (function (_super) {\n    __extends(FlyCameraInputsManager, _super);\n    /**\n     * Instantiates a new FlyCameraInputsManager.\n     * @param camera Defines the camera the inputs belong to.\n     */\n    function FlyCameraInputsManager(camera) {\n        return _super.call(this, camera) || this;\n    }\n    /**\n     * Add keyboard input support to the input manager.\n     * @returns the new FlyCameraKeyboardMoveInput().\n     */\n    FlyCameraInputsManager.prototype.addKeyboard = function () {\n        this.add(new FlyCameraKeyboardInput());\n        return this;\n    };\n    /**\n     * Add mouse input support to the input manager.\n     * @returns the new FlyCameraMouseInput().\n     */\n    FlyCameraInputsManager.prototype.addMouse = function () {\n        this.add(new FlyCameraMouseInput());\n        return this;\n    };\n    return FlyCameraInputsManager;\n}(CameraInputsManager));\nexport { FlyCameraInputsManager };\n//# sourceMappingURL=flyCameraInputsManager.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize, serializeAsVector3 } from \"../Misc/decorators.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { TargetCamera } from \"./targetCamera.js\";\nimport { FlyCameraInputsManager } from \"./flyCameraInputsManager.js\";\nimport { Tools } from \"../Misc/tools.js\";\n/**\n * This is a flying camera, designed for 3D movement and rotation in all directions,\n * such as in a 3D Space Shooter or a Flight Simulator.\n */\nvar FlyCamera = /** @class */ (function (_super) {\n    __extends(FlyCamera, _super);\n    /**\n     * Instantiates a FlyCamera.\n     * This is a flying camera, designed for 3D movement and rotation in all directions,\n     * such as in a 3D Space Shooter or a Flight Simulator.\n     * @param name Define the name of the camera in the scene.\n     * @param position Define the starting position of the camera in the scene.\n     * @param scene Define the scene the camera belongs to.\n     * @param setActiveOnSceneIfNoneActive Defines whether the camera should be marked as active, if no other camera has been defined as active.\n     */\n    function FlyCamera(name, position, scene, setActiveOnSceneIfNoneActive) {\n        if (setActiveOnSceneIfNoneActive === void 0) { setActiveOnSceneIfNoneActive = true; }\n        var _this = _super.call(this, name, position, scene, setActiveOnSceneIfNoneActive) || this;\n        /**\n         * Define the collision ellipsoid of the camera.\n         * This is helpful for simulating a camera body, like a player's body.\n         * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity#arcrotatecamera\n         */\n        _this.ellipsoid = new Vector3(1, 1, 1);\n        /**\n         * Define an offset for the position of the ellipsoid around the camera.\n         * This can be helpful if the camera is attached away from the player's body center,\n         * such as at its head.\n         */\n        _this.ellipsoidOffset = new Vector3(0, 0, 0);\n        /**\n         * Enable or disable collisions of the camera with the rest of the scene objects.\n         */\n        _this.checkCollisions = false;\n        /**\n         * Enable or disable gravity on the camera.\n         */\n        _this.applyGravity = false;\n        /**\n         * Define the current direction the camera is moving to.\n         */\n        _this.cameraDirection = Vector3.Zero();\n        /**\n         * Track Roll to maintain the wanted Rolling when looking around.\n         */\n        _this._trackRoll = 0;\n        /**\n         * Slowly correct the Roll to its original value after a Pitch+Yaw rotation.\n         */\n        _this.rollCorrect = 100;\n        /**\n         * Mimic a banked turn, Rolling the camera when Yawing.\n         * It's recommended to use rollCorrect = 10 for faster banking correction.\n         */\n        _this.bankedTurn = false;\n        /**\n         * Limit in radians for how much Roll banking will add. (Default: 90°)\n         */\n        _this.bankedTurnLimit = Math.PI / 2;\n        /**\n         * Value of 0 disables the banked Roll.\n         * Value of 1 is equal to the Yaw angle in radians.\n         */\n        _this.bankedTurnMultiplier = 1;\n        _this._needMoveForGravity = false;\n        _this._oldPosition = Vector3.Zero();\n        _this._diffPosition = Vector3.Zero();\n        _this._newPosition = Vector3.Zero();\n        // Collisions.\n        _this._collisionMask = -1;\n        /**\n         * @param collisionId\n         * @param newPosition\n         * @param collidedMesh\n         * @hidden\n         */\n        _this._onCollisionPositionChange = function (collisionId, newPosition, collidedMesh) {\n            if (collidedMesh === void 0) { collidedMesh = null; }\n            var updatePosition = function (newPos) {\n                _this._newPosition.copyFrom(newPos);\n                _this._newPosition.subtractToRef(_this._oldPosition, _this._diffPosition);\n                if (_this._diffPosition.length() > Engine.CollisionsEpsilon) {\n                    _this.position.addInPlace(_this._diffPosition);\n                    if (_this.onCollide && collidedMesh) {\n                        _this.onCollide(collidedMesh);\n                    }\n                }\n            };\n            updatePosition(newPosition);\n        };\n        _this.inputs = new FlyCameraInputsManager(_this);\n        _this.inputs.addKeyboard().addMouse();\n        return _this;\n    }\n    Object.defineProperty(FlyCamera.prototype, \"angularSensibility\", {\n        /**\n         * Gets the input sensibility for mouse input.\n         * Higher values reduce sensitivity.\n         */\n        get: function () {\n            var mouse = this.inputs.attached[\"mouse\"];\n            if (mouse) {\n                return mouse.angularSensibility;\n            }\n            return 0;\n        },\n        /**\n         * Sets the input sensibility for a mouse input.\n         * Higher values reduce sensitivity.\n         */\n        set: function (value) {\n            var mouse = this.inputs.attached[\"mouse\"];\n            if (mouse) {\n                mouse.angularSensibility = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FlyCamera.prototype, \"keysForward\", {\n        /**\n         * Get the keys for camera movement forward.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysForward;\n            }\n            return [];\n        },\n        /**\n         * Set the keys for camera movement forward.\n         */\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysForward = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FlyCamera.prototype, \"keysBackward\", {\n        /**\n         * Get the keys for camera movement backward.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysBackward;\n            }\n            return [];\n        },\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysBackward = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FlyCamera.prototype, \"keysUp\", {\n        /**\n         * Get the keys for camera movement up.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysUp;\n            }\n            return [];\n        },\n        /**\n         * Set the keys for camera movement up.\n         */\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysUp = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FlyCamera.prototype, \"keysDown\", {\n        /**\n         * Get the keys for camera movement down.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysDown;\n            }\n            return [];\n        },\n        /**\n         * Set the keys for camera movement down.\n         */\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysDown = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FlyCamera.prototype, \"keysLeft\", {\n        /**\n         * Get the keys for camera movement left.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysLeft;\n            }\n            return [];\n        },\n        /**\n         * Set the keys for camera movement left.\n         */\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysLeft = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FlyCamera.prototype, \"keysRight\", {\n        /**\n         * Set the keys for camera movement right.\n         */\n        get: function () {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                return keyboard.keysRight;\n            }\n            return [];\n        },\n        /**\n         * Set the keys for camera movement right.\n         */\n        set: function (value) {\n            var keyboard = this.inputs.attached[\"keyboard\"];\n            if (keyboard) {\n                keyboard.keysRight = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Attached controls to the current camera.\n     * @param ignored defines an ignored parameter kept for backward compatibility.\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    FlyCamera.prototype.attachControl = function (ignored, noPreventDefault) {\n        // eslint-disable-next-line prefer-rest-params\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        this.inputs.attachElement(noPreventDefault);\n    };\n    /**\n     * Detach a control from the HTML DOM element.\n     * The camera will stop reacting to that input.\n     */\n    FlyCamera.prototype.detachControl = function () {\n        this.inputs.detachElement();\n        this.cameraDirection = new Vector3(0, 0, 0);\n    };\n    Object.defineProperty(FlyCamera.prototype, \"collisionMask\", {\n        /**\n         * Get the mask that the camera ignores in collision events.\n         */\n        get: function () {\n            return this._collisionMask;\n        },\n        /**\n         * Set the mask that the camera ignores in collision events.\n         */\n        set: function (mask) {\n            this._collisionMask = !isNaN(mask) ? mask : -1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @param displacement\n     * @hidden\n     */\n    FlyCamera.prototype._collideWithWorld = function (displacement) {\n        var globalPosition;\n        if (this.parent) {\n            globalPosition = Vector3.TransformCoordinates(this.position, this.parent.getWorldMatrix());\n        }\n        else {\n            globalPosition = this.position;\n        }\n        globalPosition.subtractFromFloatsToRef(0, this.ellipsoid.y, 0, this._oldPosition);\n        this._oldPosition.addInPlace(this.ellipsoidOffset);\n        var coordinator = this.getScene().collisionCoordinator;\n        if (!this._collider) {\n            this._collider = coordinator.createCollider();\n        }\n        this._collider._radius = this.ellipsoid;\n        this._collider.collisionMask = this._collisionMask;\n        // No need for clone, as long as gravity is not on.\n        var actualDisplacement = displacement;\n        // Add gravity to direction to prevent dual-collision checking.\n        if (this.applyGravity) {\n            // This prevents mending with cameraDirection, a global variable of the fly camera class.\n            actualDisplacement = displacement.add(this.getScene().gravity);\n        }\n        coordinator.getNewPosition(this._oldPosition, actualDisplacement, this._collider, 3, null, this._onCollisionPositionChange, this.uniqueId);\n    };\n    /** @hidden */\n    FlyCamera.prototype._checkInputs = function () {\n        if (!this._localDirection) {\n            this._localDirection = Vector3.Zero();\n            this._transformedDirection = Vector3.Zero();\n        }\n        this.inputs.checkInputs();\n        _super.prototype._checkInputs.call(this);\n    };\n    /** @hidden */\n    FlyCamera.prototype._decideIfNeedsToMove = function () {\n        return this._needMoveForGravity || Math.abs(this.cameraDirection.x) > 0 || Math.abs(this.cameraDirection.y) > 0 || Math.abs(this.cameraDirection.z) > 0;\n    };\n    /** @hidden */\n    FlyCamera.prototype._updatePosition = function () {\n        if (this.checkCollisions && this.getScene().collisionsEnabled) {\n            this._collideWithWorld(this.cameraDirection);\n        }\n        else {\n            _super.prototype._updatePosition.call(this);\n        }\n    };\n    /**\n     * Restore the Roll to its target value at the rate specified.\n     * @param rate - Higher means slower restoring.\n     * @hidden\n     */\n    FlyCamera.prototype.restoreRoll = function (rate) {\n        var limit = this._trackRoll; // Target Roll.\n        var z = this.rotation.z; // Current Roll.\n        var delta = limit - z; // Difference in Roll.\n        var minRad = 0.001; // Tenth of a radian is a barely noticable difference.\n        // If the difference is noticable, restore the Roll.\n        if (Math.abs(delta) >= minRad) {\n            // Change Z rotation towards the target Roll.\n            this.rotation.z += delta / rate;\n            // Match when near enough.\n            if (Math.abs(limit - this.rotation.z) <= minRad) {\n                this.rotation.z = limit;\n            }\n        }\n    };\n    /**\n     * Destroy the camera and release the current resources held by it.\n     */\n    FlyCamera.prototype.dispose = function () {\n        this.inputs.clear();\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Get the current object class name.\n     * @returns the class name.\n     */\n    FlyCamera.prototype.getClassName = function () {\n        return \"FlyCamera\";\n    };\n    __decorate([\n        serializeAsVector3()\n    ], FlyCamera.prototype, \"ellipsoid\", void 0);\n    __decorate([\n        serializeAsVector3()\n    ], FlyCamera.prototype, \"ellipsoidOffset\", void 0);\n    __decorate([\n        serialize()\n    ], FlyCamera.prototype, \"checkCollisions\", void 0);\n    __decorate([\n        serialize()\n    ], FlyCamera.prototype, \"applyGravity\", void 0);\n    return FlyCamera;\n}(TargetCamera));\nexport { FlyCamera };\n//# sourceMappingURL=flyCamera.js.map","import { __extends } from \"tslib\";\nimport { CameraInputsManager } from \"./cameraInputsManager.js\";\nimport { FollowCameraKeyboardMoveInput } from \"./Inputs/followCameraKeyboardMoveInput.js\";\nimport { FollowCameraMouseWheelInput } from \"./Inputs/followCameraMouseWheelInput.js\";\nimport { FollowCameraPointersInput } from \"./Inputs/followCameraPointersInput.js\";\n/**\n * Default Inputs manager for the FollowCamera.\n * It groups all the default supported inputs for ease of use.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nvar FollowCameraInputsManager = /** @class */ (function (_super) {\n    __extends(FollowCameraInputsManager, _super);\n    /**\n     * Instantiates a new FollowCameraInputsManager.\n     * @param camera Defines the camera the inputs belong to\n     */\n    function FollowCameraInputsManager(camera) {\n        return _super.call(this, camera) || this;\n    }\n    /**\n     * Add keyboard input support to the input manager.\n     * @returns the current input manager\n     */\n    FollowCameraInputsManager.prototype.addKeyboard = function () {\n        this.add(new FollowCameraKeyboardMoveInput());\n        return this;\n    };\n    /**\n     * Add mouse wheel input support to the input manager.\n     * @returns the current input manager\n     */\n    FollowCameraInputsManager.prototype.addMouseWheel = function () {\n        this.add(new FollowCameraMouseWheelInput());\n        return this;\n    };\n    /**\n     * Add pointers input support to the input manager.\n     * @returns the current input manager\n     */\n    FollowCameraInputsManager.prototype.addPointers = function () {\n        this.add(new FollowCameraPointersInput());\n        return this;\n    };\n    /**\n     * Add orientation input support to the input manager.\n     * @returns the current input manager\n     */\n    FollowCameraInputsManager.prototype.addVRDeviceOrientation = function () {\n        console.warn(\"DeviceOrientation support not yet implemented for FollowCamera.\");\n        return this;\n    };\n    return FollowCameraInputsManager;\n}(CameraInputsManager));\nexport { FollowCameraInputsManager };\n//# sourceMappingURL=followCameraInputsManager.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize, serializeAsMeshReference } from \"../Misc/decorators.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { TargetCamera } from \"./targetCamera.js\";\nimport { TmpVectors, Vector3 } from \"../Maths/math.vector.js\";\nimport { Node } from \"../node.js\";\nimport { FollowCameraInputsManager } from \"./followCameraInputsManager.js\";\nNode.AddNodeConstructor(\"FollowCamera\", function (name, scene) {\n    return function () { return new FollowCamera(name, Vector3.Zero(), scene); };\n});\nNode.AddNodeConstructor(\"ArcFollowCamera\", function (name, scene) {\n    return function () { return new ArcFollowCamera(name, 0, 0, 1.0, null, scene); };\n});\n/**\n * A follow camera takes a mesh as a target and follows it as it moves. Both a free camera version followCamera and\n * an arc rotate version arcFollowCamera are available.\n * @see https://doc.babylonjs.com/features/cameras#follow-camera\n */\nvar FollowCamera = /** @class */ (function (_super) {\n    __extends(FollowCamera, _super);\n    /**\n     * Instantiates the follow camera.\n     * @see https://doc.babylonjs.com/features/cameras#follow-camera\n     * @param name Define the name of the camera in the scene\n     * @param position Define the position of the camera\n     * @param scene Define the scene the camera belong to\n     * @param lockedTarget Define the target of the camera\n     */\n    function FollowCamera(name, position, scene, lockedTarget) {\n        if (lockedTarget === void 0) { lockedTarget = null; }\n        var _this = _super.call(this, name, position, scene) || this;\n        /**\n         * Distance the follow camera should follow an object at\n         */\n        _this.radius = 12;\n        /**\n         * Minimum allowed distance of the camera to the axis of rotation\n         * (The camera can not get closer).\n         * This can help limiting how the Camera is able to move in the scene.\n         */\n        _this.lowerRadiusLimit = null;\n        /**\n         * Maximum allowed distance of the camera to the axis of rotation\n         * (The camera can not get further).\n         * This can help limiting how the Camera is able to move in the scene.\n         */\n        _this.upperRadiusLimit = null;\n        /**\n         * Define a rotation offset between the camera and the object it follows\n         */\n        _this.rotationOffset = 0;\n        /**\n         * Minimum allowed angle to camera position relative to target object.\n         * This can help limiting how the Camera is able to move in the scene.\n         */\n        _this.lowerRotationOffsetLimit = null;\n        /**\n         * Maximum allowed angle to camera position relative to target object.\n         * This can help limiting how the Camera is able to move in the scene.\n         */\n        _this.upperRotationOffsetLimit = null;\n        /**\n         * Define a height offset between the camera and the object it follows.\n         * It can help following an object from the top (like a car chasing a plane)\n         */\n        _this.heightOffset = 4;\n        /**\n         * Minimum allowed height of camera position relative to target object.\n         * This can help limiting how the Camera is able to move in the scene.\n         */\n        _this.lowerHeightOffsetLimit = null;\n        /**\n         * Maximum allowed height of camera position relative to target object.\n         * This can help limiting how the Camera is able to move in the scene.\n         */\n        _this.upperHeightOffsetLimit = null;\n        /**\n         * Define how fast the camera can accelerate to follow it s target.\n         */\n        _this.cameraAcceleration = 0.05;\n        /**\n         * Define the speed limit of the camera following an object.\n         */\n        _this.maxCameraSpeed = 20;\n        _this.lockedTarget = lockedTarget;\n        _this.inputs = new FollowCameraInputsManager(_this);\n        _this.inputs.addKeyboard().addMouseWheel().addPointers();\n        return _this;\n        // Uncomment the following line when the relevant handlers have been implemented.\n        // this.inputs.addKeyboard().addMouseWheel().addPointers().addVRDeviceOrientation();\n    }\n    FollowCamera.prototype._follow = function (cameraTarget) {\n        if (!cameraTarget) {\n            return;\n        }\n        var rotMatrix = TmpVectors.Matrix[0];\n        cameraTarget.absoluteRotationQuaternion.toRotationMatrix(rotMatrix);\n        var yRotation = Math.atan2(rotMatrix.m[8], rotMatrix.m[10]);\n        var radians = Tools.ToRadians(this.rotationOffset) + yRotation;\n        var targetPosition = cameraTarget.getAbsolutePosition();\n        var targetX = targetPosition.x + Math.sin(radians) * this.radius;\n        var targetZ = targetPosition.z + Math.cos(radians) * this.radius;\n        var dx = targetX - this.position.x;\n        var dy = targetPosition.y + this.heightOffset - this.position.y;\n        var dz = targetZ - this.position.z;\n        var vx = dx * this.cameraAcceleration * 2; //this is set to .05\n        var vy = dy * this.cameraAcceleration;\n        var vz = dz * this.cameraAcceleration * 2;\n        if (vx > this.maxCameraSpeed || vx < -this.maxCameraSpeed) {\n            vx = vx < 1 ? -this.maxCameraSpeed : this.maxCameraSpeed;\n        }\n        if (vy > this.maxCameraSpeed || vy < -this.maxCameraSpeed) {\n            vy = vy < 1 ? -this.maxCameraSpeed : this.maxCameraSpeed;\n        }\n        if (vz > this.maxCameraSpeed || vz < -this.maxCameraSpeed) {\n            vz = vz < 1 ? -this.maxCameraSpeed : this.maxCameraSpeed;\n        }\n        this.position = new Vector3(this.position.x + vx, this.position.y + vy, this.position.z + vz);\n        this.setTarget(targetPosition);\n    };\n    /**\n     * Attached controls to the current camera.\n     * @param ignored defines an ignored parameter kept for backward compatibility.\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    FollowCamera.prototype.attachControl = function (ignored, noPreventDefault) {\n        // eslint-disable-next-line prefer-rest-params\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        this.inputs.attachElement(noPreventDefault);\n        this._reset = function () { };\n    };\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    FollowCamera.prototype.detachControl = function () {\n        this.inputs.detachElement();\n        if (this._reset) {\n            this._reset();\n        }\n    };\n    /** @hidden */\n    FollowCamera.prototype._checkInputs = function () {\n        this.inputs.checkInputs();\n        this._checkLimits();\n        _super.prototype._checkInputs.call(this);\n        if (this.lockedTarget) {\n            this._follow(this.lockedTarget);\n        }\n    };\n    FollowCamera.prototype._checkLimits = function () {\n        if (this.lowerRadiusLimit !== null && this.radius < this.lowerRadiusLimit) {\n            this.radius = this.lowerRadiusLimit;\n        }\n        if (this.upperRadiusLimit !== null && this.radius > this.upperRadiusLimit) {\n            this.radius = this.upperRadiusLimit;\n        }\n        if (this.lowerHeightOffsetLimit !== null && this.heightOffset < this.lowerHeightOffsetLimit) {\n            this.heightOffset = this.lowerHeightOffsetLimit;\n        }\n        if (this.upperHeightOffsetLimit !== null && this.heightOffset > this.upperHeightOffsetLimit) {\n            this.heightOffset = this.upperHeightOffsetLimit;\n        }\n        if (this.lowerRotationOffsetLimit !== null && this.rotationOffset < this.lowerRotationOffsetLimit) {\n            this.rotationOffset = this.lowerRotationOffsetLimit;\n        }\n        if (this.upperRotationOffsetLimit !== null && this.rotationOffset > this.upperRotationOffsetLimit) {\n            this.rotationOffset = this.upperRotationOffsetLimit;\n        }\n    };\n    /**\n     * Gets the camera class name.\n     * @returns the class name\n     */\n    FollowCamera.prototype.getClassName = function () {\n        return \"FollowCamera\";\n    };\n    __decorate([\n        serialize()\n    ], FollowCamera.prototype, \"radius\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCamera.prototype, \"lowerRadiusLimit\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCamera.prototype, \"upperRadiusLimit\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCamera.prototype, \"rotationOffset\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCamera.prototype, \"lowerRotationOffsetLimit\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCamera.prototype, \"upperRotationOffsetLimit\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCamera.prototype, \"heightOffset\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCamera.prototype, \"lowerHeightOffsetLimit\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCamera.prototype, \"upperHeightOffsetLimit\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCamera.prototype, \"cameraAcceleration\", void 0);\n    __decorate([\n        serialize()\n    ], FollowCamera.prototype, \"maxCameraSpeed\", void 0);\n    __decorate([\n        serializeAsMeshReference(\"lockedTargetId\")\n    ], FollowCamera.prototype, \"lockedTarget\", void 0);\n    return FollowCamera;\n}(TargetCamera));\nexport { FollowCamera };\n/**\n * Arc Rotate version of the follow camera.\n * It still follows a Defined mesh but in an Arc Rotate Camera fashion.\n * @see https://doc.babylonjs.com/features/cameras#follow-camera\n */\nvar ArcFollowCamera = /** @class */ (function (_super) {\n    __extends(ArcFollowCamera, _super);\n    /**\n     * Instantiates a new ArcFollowCamera\n     * @see https://doc.babylonjs.com/features/cameras#follow-camera\n     * @param name Define the name of the camera\n     * @param alpha Define the rotation angle of the camera around the longitudinal axis\n     * @param beta Define the rotation angle of the camera around the elevation axis\n     * @param radius Define the radius of the camera from its target point\n     * @param target Define the target of the camera\n     * @param scene Define the scene the camera belongs to\n     */\n    function ArcFollowCamera(name, \n    /** The longitudinal angle of the camera */\n    alpha, \n    /** The latitudinal angle of the camera */\n    beta, \n    /** The radius of the camera from its target */\n    radius, \n    /** Define the camera target (the mesh it should follow) */\n    target, scene) {\n        var _this = _super.call(this, name, Vector3.Zero(), scene) || this;\n        _this.alpha = alpha;\n        _this.beta = beta;\n        _this.radius = radius;\n        _this._cartesianCoordinates = Vector3.Zero();\n        _this.setMeshTarget(target);\n        return _this;\n    }\n    /**\n     * Sets the mesh to follow with this camera.\n     * @param target the target to follow\n     */\n    ArcFollowCamera.prototype.setMeshTarget = function (target) {\n        this._meshTarget = target;\n        this._follow();\n    };\n    ArcFollowCamera.prototype._follow = function () {\n        if (!this._meshTarget) {\n            return;\n        }\n        this._cartesianCoordinates.x = this.radius * Math.cos(this.alpha) * Math.cos(this.beta);\n        this._cartesianCoordinates.y = this.radius * Math.sin(this.beta);\n        this._cartesianCoordinates.z = this.radius * Math.sin(this.alpha) * Math.cos(this.beta);\n        var targetPosition = this._meshTarget.getAbsolutePosition();\n        this.position = targetPosition.add(this._cartesianCoordinates);\n        this.setTarget(targetPosition);\n    };\n    /** @hidden */\n    ArcFollowCamera.prototype._checkInputs = function () {\n        _super.prototype._checkInputs.call(this);\n        this._follow();\n    };\n    /**\n     * Returns the class name of the object.\n     * It is mostly used internally for serialization purposes.\n     */\n    ArcFollowCamera.prototype.getClassName = function () {\n        return \"ArcFollowCamera\";\n    };\n    return ArcFollowCamera;\n}(TargetCamera));\nexport { ArcFollowCamera };\n//# sourceMappingURL=followCamera.js.map","import { __extends } from \"tslib\";\nimport { UniversalCamera } from \"./universalCamera.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Node } from \"../node.js\";\nNode.AddNodeConstructor(\"GamepadCamera\", function (name, scene) {\n    return function () { return new GamepadCamera(name, Vector3.Zero(), scene); };\n});\n/**\n * This represents a FPS type of camera. This is only here for back compat purpose.\n * Please use the UniversalCamera instead as both are identical.\n * @see https://doc.babylonjs.com/features/cameras#universal-camera\n */\nvar GamepadCamera = /** @class */ (function (_super) {\n    __extends(GamepadCamera, _super);\n    /**\n     * Instantiates a new Gamepad Camera\n     * This represents a FPS type of camera. This is only here for back compat purpose.\n     * Please use the UniversalCamera instead as both are identical.\n     * @see https://doc.babylonjs.com/features/cameras#universal-camera\n     * @param name Define the name of the camera in the scene\n     * @param position Define the start position of the camera in the scene\n     * @param scene Define the scene the camera belongs to\n     */\n    function GamepadCamera(name, position, scene) {\n        return _super.call(this, name, position, scene) || this;\n    }\n    /**\n     * Gets the current object class name.\n     * @return the class name\n     */\n    GamepadCamera.prototype.getClassName = function () {\n        return \"GamepadCamera\";\n    };\n    return GamepadCamera;\n}(UniversalCamera));\nexport { GamepadCamera };\n//# sourceMappingURL=gamepadCamera.js.map","import { PassPostProcess } from \"../../PostProcesses/passPostProcess.js\";\nimport { AnaglyphPostProcess } from \"../../PostProcesses/anaglyphPostProcess.js\";\n/**\n * @param camera\n * @hidden\n */\nexport function setStereoscopicAnaglyphRigMode(camera) {\n    camera._rigCameras[0]._rigPostProcess = new PassPostProcess(camera.name + \"_passthru\", 1.0, camera._rigCameras[0]);\n    camera._rigCameras[1]._rigPostProcess = new AnaglyphPostProcess(camera.name + \"_anaglyph\", 1.0, camera._rigCameras);\n}\n//# sourceMappingURL=stereoscopicAnaglyphRigMode.js.map","import { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera.js\";\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setStereoscopicAnaglyphRigMode } from \"../RigModes/stereoscopicAnaglyphRigMode.js\";\nNode.AddNodeConstructor(\"AnaglyphArcRotateCamera\", function (name, scene, options) {\n    return function () { return new AnaglyphArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), options.interaxial_distance, scene); };\n});\n/**\n * Camera used to simulate anaglyphic rendering (based on ArcRotateCamera)\n * @see https://doc.babylonjs.com/features/cameras#anaglyph-cameras\n */\nvar AnaglyphArcRotateCamera = /** @class */ (function (_super) {\n    __extends(AnaglyphArcRotateCamera, _super);\n    /**\n     * Creates a new AnaglyphArcRotateCamera\n     * @param name defines camera name\n     * @param alpha defines alpha angle (in radians)\n     * @param beta defines beta angle (in radians)\n     * @param radius defines radius\n     * @param target defines camera target\n     * @param interaxialDistance defines distance between each color axis\n     * @param scene defines the hosting scene\n     */\n    function AnaglyphArcRotateCamera(name, alpha, beta, radius, target, interaxialDistance, scene) {\n        var _this = _super.call(this, name, alpha, beta, radius, target, scene) || this;\n        _this._setRigMode = setStereoscopicAnaglyphRigMode.bind(null, _this);\n        _this.interaxialDistance = interaxialDistance;\n        _this.setCameraRigMode(Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH, { interaxialDistance: interaxialDistance });\n        return _this;\n    }\n    /**\n     * Gets camera class name\n     * @returns AnaglyphArcRotateCamera\n     */\n    AnaglyphArcRotateCamera.prototype.getClassName = function () {\n        return \"AnaglyphArcRotateCamera\";\n    };\n    return AnaglyphArcRotateCamera;\n}(ArcRotateCamera));\nexport { AnaglyphArcRotateCamera };\n//# sourceMappingURL=anaglyphArcRotateCamera.js.map","import { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera.js\";\nimport { FreeCamera } from \"../../Cameras/freeCamera.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setStereoscopicAnaglyphRigMode } from \"../RigModes/stereoscopicAnaglyphRigMode.js\";\nNode.AddNodeConstructor(\"AnaglyphFreeCamera\", function (name, scene, options) {\n    return function () { return new AnaglyphFreeCamera(name, Vector3.Zero(), options.interaxial_distance, scene); };\n});\n/**\n * Camera used to simulate anaglyphic rendering (based on FreeCamera)\n * @see https://doc.babylonjs.com/features/cameras#anaglyph-cameras\n */\nvar AnaglyphFreeCamera = /** @class */ (function (_super) {\n    __extends(AnaglyphFreeCamera, _super);\n    /**\n     * Creates a new AnaglyphFreeCamera\n     * @param name defines camera name\n     * @param position defines initial position\n     * @param interaxialDistance defines distance between each color axis\n     * @param scene defines the hosting scene\n     */\n    function AnaglyphFreeCamera(name, position, interaxialDistance, scene) {\n        var _this = _super.call(this, name, position, scene) || this;\n        _this._setRigMode = setStereoscopicAnaglyphRigMode.bind(null, _this);\n        _this.interaxialDistance = interaxialDistance;\n        _this.setCameraRigMode(Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH, { interaxialDistance: interaxialDistance });\n        return _this;\n    }\n    /**\n     * Gets camera class name\n     * @returns AnaglyphFreeCamera\n     */\n    AnaglyphFreeCamera.prototype.getClassName = function () {\n        return \"AnaglyphFreeCamera\";\n    };\n    return AnaglyphFreeCamera;\n}(FreeCamera));\nexport { AnaglyphFreeCamera };\n//# sourceMappingURL=anaglyphFreeCamera.js.map","import { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera.js\";\nimport { GamepadCamera } from \"../../Cameras/gamepadCamera.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setStereoscopicAnaglyphRigMode } from \"../RigModes/stereoscopicAnaglyphRigMode.js\";\nNode.AddNodeConstructor(\"AnaglyphGamepadCamera\", function (name, scene, options) {\n    return function () { return new AnaglyphGamepadCamera(name, Vector3.Zero(), options.interaxial_distance, scene); };\n});\n/**\n * Camera used to simulate anaglyphic rendering (based on GamepadCamera)\n * @see https://doc.babylonjs.com/features/cameras#anaglyph-cameras\n */\nvar AnaglyphGamepadCamera = /** @class */ (function (_super) {\n    __extends(AnaglyphGamepadCamera, _super);\n    /**\n     * Creates a new AnaglyphGamepadCamera\n     * @param name defines camera name\n     * @param position defines initial position\n     * @param interaxialDistance defines distance between each color axis\n     * @param scene defines the hosting scene\n     */\n    function AnaglyphGamepadCamera(name, position, interaxialDistance, scene) {\n        var _this = _super.call(this, name, position, scene) || this;\n        _this._setRigMode = setStereoscopicAnaglyphRigMode.bind(null, _this);\n        _this.interaxialDistance = interaxialDistance;\n        _this.setCameraRigMode(Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH, { interaxialDistance: interaxialDistance });\n        return _this;\n    }\n    /**\n     * Gets camera class name\n     * @returns AnaglyphGamepadCamera\n     */\n    AnaglyphGamepadCamera.prototype.getClassName = function () {\n        return \"AnaglyphGamepadCamera\";\n    };\n    return AnaglyphGamepadCamera;\n}(GamepadCamera));\nexport { AnaglyphGamepadCamera };\n//# sourceMappingURL=anaglyphGamepadCamera.js.map","import { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera.js\";\nimport { UniversalCamera } from \"../../Cameras/universalCamera.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setStereoscopicAnaglyphRigMode } from \"../RigModes/stereoscopicAnaglyphRigMode.js\";\nNode.AddNodeConstructor(\"AnaglyphUniversalCamera\", function (name, scene, options) {\n    return function () { return new AnaglyphUniversalCamera(name, Vector3.Zero(), options.interaxial_distance, scene); };\n});\n/**\n * Camera used to simulate anaglyphic rendering (based on UniversalCamera)\n * @see https://doc.babylonjs.com/features/cameras#anaglyph-cameras\n */\nvar AnaglyphUniversalCamera = /** @class */ (function (_super) {\n    __extends(AnaglyphUniversalCamera, _super);\n    /**\n     * Creates a new AnaglyphUniversalCamera\n     * @param name defines camera name\n     * @param position defines initial position\n     * @param interaxialDistance defines distance between each color axis\n     * @param scene defines the hosting scene\n     */\n    function AnaglyphUniversalCamera(name, position, interaxialDistance, scene) {\n        var _this = _super.call(this, name, position, scene) || this;\n        _this._setRigMode = setStereoscopicAnaglyphRigMode.bind(null, _this);\n        _this.interaxialDistance = interaxialDistance;\n        _this.setCameraRigMode(Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH, { interaxialDistance: interaxialDistance });\n        return _this;\n    }\n    /**\n     * Gets camera class name\n     * @returns AnaglyphUniversalCamera\n     */\n    AnaglyphUniversalCamera.prototype.getClassName = function () {\n        return \"AnaglyphUniversalCamera\";\n    };\n    return AnaglyphUniversalCamera;\n}(UniversalCamera));\nexport { AnaglyphUniversalCamera };\n//# sourceMappingURL=anaglyphUniversalCamera.js.map","import { Camera } from \"../camera.js\";\nimport { Viewport } from \"../../Maths/math.viewport.js\";\nimport { PassPostProcess } from \"../../PostProcesses/passPostProcess.js\";\nimport { StereoscopicInterlacePostProcessI } from \"../../PostProcesses/stereoscopicInterlacePostProcess.js\";\n/**\n * @param camera\n * @hidden\n */\nexport function setStereoscopicRigMode(camera) {\n    var isStereoscopicHoriz = camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL || camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED;\n    var isCrossEye = camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED;\n    var isInterlaced = camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_INTERLACED;\n    // Use post-processors for interlacing\n    if (isInterlaced) {\n        camera._rigCameras[0]._rigPostProcess = new PassPostProcess(camera.name + \"_passthru\", 1.0, camera._rigCameras[0]);\n        camera._rigCameras[1]._rigPostProcess = new StereoscopicInterlacePostProcessI(camera.name + \"_stereoInterlace\", camera._rigCameras, false, true);\n    }\n    // Otherwise, create appropriate viewports\n    else {\n        camera._rigCameras[isCrossEye ? 1 : 0].viewport = new Viewport(0, 0, isStereoscopicHoriz ? 0.5 : 1.0, isStereoscopicHoriz ? 1.0 : 0.5);\n        camera._rigCameras[isCrossEye ? 0 : 1].viewport = new Viewport(isStereoscopicHoriz ? 0.5 : 0, isStereoscopicHoriz ? 0 : 0.5, isStereoscopicHoriz ? 0.5 : 1.0, isStereoscopicHoriz ? 1.0 : 0.5);\n    }\n}\n//# sourceMappingURL=stereoscopicRigMode.js.map","import { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera.js\";\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setStereoscopicRigMode } from \"../RigModes/stereoscopicRigMode.js\";\nNode.AddNodeConstructor(\"StereoscopicArcRotateCamera\", function (name, scene, options) {\n    return function () { return new StereoscopicArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), options.interaxial_distance, options.isStereoscopicSideBySide, scene); };\n});\n/**\n * Camera used to simulate stereoscopic rendering (based on ArcRotateCamera)\n * @see https://doc.babylonjs.com/features/cameras\n */\nvar StereoscopicArcRotateCamera = /** @class */ (function (_super) {\n    __extends(StereoscopicArcRotateCamera, _super);\n    /**\n     * Creates a new StereoscopicArcRotateCamera\n     * @param name defines camera name\n     * @param alpha defines alpha angle (in radians)\n     * @param beta defines beta angle (in radians)\n     * @param radius defines radius\n     * @param target defines camera target\n     * @param interaxialDistance defines distance between each color axis\n     * @param isStereoscopicSideBySide defines is stereoscopic is done side by side or over under\n     * @param scene defines the hosting scene\n     */\n    function StereoscopicArcRotateCamera(name, alpha, beta, radius, target, interaxialDistance, isStereoscopicSideBySide, scene) {\n        var _this = _super.call(this, name, alpha, beta, radius, target, scene) || this;\n        _this._setRigMode = setStereoscopicRigMode.bind(null, _this);\n        _this.interaxialDistance = interaxialDistance;\n        _this.isStereoscopicSideBySide = isStereoscopicSideBySide;\n        _this.setCameraRigMode(isStereoscopicSideBySide ? Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL : Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER, {\n            interaxialDistance: interaxialDistance,\n        });\n        return _this;\n    }\n    /**\n     * Gets camera class name\n     * @returns StereoscopicArcRotateCamera\n     */\n    StereoscopicArcRotateCamera.prototype.getClassName = function () {\n        return \"StereoscopicArcRotateCamera\";\n    };\n    return StereoscopicArcRotateCamera;\n}(ArcRotateCamera));\nexport { StereoscopicArcRotateCamera };\n//# sourceMappingURL=stereoscopicArcRotateCamera.js.map","import { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera.js\";\nimport { FreeCamera } from \"../../Cameras/freeCamera.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setStereoscopicRigMode } from \"../RigModes/stereoscopicRigMode.js\";\nNode.AddNodeConstructor(\"StereoscopicFreeCamera\", function (name, scene, options) {\n    return function () { return new StereoscopicFreeCamera(name, Vector3.Zero(), options.interaxial_distance, options.isStereoscopicSideBySide, scene); };\n});\n/**\n * Camera used to simulate stereoscopic rendering (based on FreeCamera)\n * @see https://doc.babylonjs.com/features/cameras\n */\nvar StereoscopicFreeCamera = /** @class */ (function (_super) {\n    __extends(StereoscopicFreeCamera, _super);\n    /**\n     * Creates a new StereoscopicFreeCamera\n     * @param name defines camera name\n     * @param position defines initial position\n     * @param interaxialDistance defines distance between each color axis\n     * @param isStereoscopicSideBySide defines is stereoscopic is done side by side or over under\n     * @param scene defines the hosting scene\n     */\n    function StereoscopicFreeCamera(name, position, interaxialDistance, isStereoscopicSideBySide, scene) {\n        var _this = _super.call(this, name, position, scene) || this;\n        _this._setRigMode = setStereoscopicRigMode.bind(null, _this);\n        _this.interaxialDistance = interaxialDistance;\n        _this.isStereoscopicSideBySide = isStereoscopicSideBySide;\n        _this.setCameraRigMode(isStereoscopicSideBySide ? Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL : Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER, {\n            interaxialDistance: interaxialDistance,\n        });\n        return _this;\n    }\n    /**\n     * Gets camera class name\n     * @returns StereoscopicFreeCamera\n     */\n    StereoscopicFreeCamera.prototype.getClassName = function () {\n        return \"StereoscopicFreeCamera\";\n    };\n    return StereoscopicFreeCamera;\n}(FreeCamera));\nexport { StereoscopicFreeCamera };\n//# sourceMappingURL=stereoscopicFreeCamera.js.map","import { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera.js\";\nimport { GamepadCamera } from \"../../Cameras/gamepadCamera.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setStereoscopicRigMode } from \"../RigModes/stereoscopicRigMode.js\";\nNode.AddNodeConstructor(\"StereoscopicGamepadCamera\", function (name, scene, options) {\n    return function () { return new StereoscopicGamepadCamera(name, Vector3.Zero(), options.interaxial_distance, options.isStereoscopicSideBySide, scene); };\n});\n/**\n * Camera used to simulate stereoscopic rendering (based on GamepadCamera)\n * @see https://doc.babylonjs.com/features/cameras\n */\nvar StereoscopicGamepadCamera = /** @class */ (function (_super) {\n    __extends(StereoscopicGamepadCamera, _super);\n    /**\n     * Creates a new StereoscopicGamepadCamera\n     * @param name defines camera name\n     * @param position defines initial position\n     * @param interaxialDistance defines distance between each color axis\n     * @param isStereoscopicSideBySide defines is stereoscopic is done side by side or over under\n     * @param scene defines the hosting scene\n     */\n    function StereoscopicGamepadCamera(name, position, interaxialDistance, isStereoscopicSideBySide, scene) {\n        var _this = _super.call(this, name, position, scene) || this;\n        _this._setRigMode = setStereoscopicRigMode.bind(null, _this);\n        _this.interaxialDistance = interaxialDistance;\n        _this.isStereoscopicSideBySide = isStereoscopicSideBySide;\n        _this.setCameraRigMode(isStereoscopicSideBySide ? Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL : Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER, {\n            interaxialDistance: interaxialDistance,\n        });\n        return _this;\n    }\n    /**\n     * Gets camera class name\n     * @returns StereoscopicGamepadCamera\n     */\n    StereoscopicGamepadCamera.prototype.getClassName = function () {\n        return \"StereoscopicGamepadCamera\";\n    };\n    return StereoscopicGamepadCamera;\n}(GamepadCamera));\nexport { StereoscopicGamepadCamera };\n//# sourceMappingURL=stereoscopicGamepadCamera.js.map","import { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera.js\";\nimport { UniversalCamera } from \"../../Cameras/universalCamera.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setStereoscopicRigMode } from \"../RigModes/stereoscopicRigMode.js\";\nNode.AddNodeConstructor(\"StereoscopicFreeCamera\", function (name, scene, options) {\n    return function () { return new StereoscopicUniversalCamera(name, Vector3.Zero(), options.interaxial_distance, options.isStereoscopicSideBySide, scene); };\n});\n/**\n * Camera used to simulate stereoscopic rendering (based on UniversalCamera)\n * @see https://doc.babylonjs.com/features/cameras\n */\nvar StereoscopicUniversalCamera = /** @class */ (function (_super) {\n    __extends(StereoscopicUniversalCamera, _super);\n    /**\n     * Creates a new StereoscopicUniversalCamera\n     * @param name defines camera name\n     * @param position defines initial position\n     * @param interaxialDistance defines distance between each color axis\n     * @param isStereoscopicSideBySide defines is stereoscopic is done side by side or over under\n     * @param scene defines the hosting scene\n     */\n    function StereoscopicUniversalCamera(name, position, interaxialDistance, isStereoscopicSideBySide, scene) {\n        var _this = _super.call(this, name, position, scene) || this;\n        _this._setRigMode = setStereoscopicRigMode.bind(null, _this);\n        _this.interaxialDistance = interaxialDistance;\n        _this.isStereoscopicSideBySide = isStereoscopicSideBySide;\n        _this.setCameraRigMode(isStereoscopicSideBySide ? Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL : Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER, {\n            interaxialDistance: interaxialDistance,\n        });\n        return _this;\n    }\n    /**\n     * Gets camera class name\n     * @returns StereoscopicUniversalCamera\n     */\n    StereoscopicUniversalCamera.prototype.getClassName = function () {\n        return \"StereoscopicUniversalCamera\";\n    };\n    return StereoscopicUniversalCamera;\n}(UniversalCamera));\nexport { StereoscopicUniversalCamera };\n//# sourceMappingURL=stereoscopicUniversalCamera.js.map","import { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera.js\";\nimport { UniversalCamera } from \"../../Cameras/universalCamera.js\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { TargetCamera } from \"../targetCamera.js\";\nimport { TransformNode } from \"../../Meshes/transformNode.js\";\nimport { Viewport } from \"../../Maths/math.viewport.js\";\n/**\n * Camera used to simulate stereoscopic rendering on real screens (based on UniversalCamera)\n * @see https://doc.babylonjs.com/features/cameras\n */\nvar StereoscopicScreenUniversalCamera = /** @class */ (function (_super) {\n    __extends(StereoscopicScreenUniversalCamera, _super);\n    /**\n     * Creates a new StereoscopicScreenUniversalCamera\n     * @param name defines camera name\n     * @param position defines initial position\n     * @param scene defines the hosting scene\n     * @param distanceToProjectionPlane defines distance between each color axis. The rig cameras will receive this as their negative z position!\n     * @param distanceBetweenEyes defines is stereoscopic is done side by side or over under\n     */\n    function StereoscopicScreenUniversalCamera(name, position, scene, distanceToProjectionPlane, distanceBetweenEyes) {\n        if (distanceToProjectionPlane === void 0) { distanceToProjectionPlane = 1; }\n        if (distanceBetweenEyes === void 0) { distanceBetweenEyes = 0.065; }\n        var _this = _super.call(this, name, position, scene) || this;\n        _this._distanceBetweenEyes = distanceBetweenEyes;\n        _this._distanceToProjectionPlane = distanceToProjectionPlane;\n        _this.setCameraRigMode(Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL, {\n            stereoHalfAngle: 0,\n        });\n        _this._cameraRigParams.stereoHalfAngle = 0;\n        _this._cameraRigParams.interaxialDistance = distanceBetweenEyes;\n        return _this;\n    }\n    Object.defineProperty(StereoscopicScreenUniversalCamera.prototype, \"distanceBetweenEyes\", {\n        /**\n         * distance between the eyes\n         */\n        get: function () {\n            return this._distanceBetweenEyes;\n        },\n        set: function (newValue) {\n            this._distanceBetweenEyes = newValue;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StereoscopicScreenUniversalCamera.prototype, \"distanceToProjectionPlane\", {\n        /**\n         * Distance to projection plane (should be the same units the like distance between the eyes)\n         */\n        get: function () {\n            return this._distanceToProjectionPlane;\n        },\n        set: function (newValue) {\n            this._distanceToProjectionPlane = newValue;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets camera class name\n     * @returns StereoscopicScreenUniversalCamera\n     */\n    StereoscopicScreenUniversalCamera.prototype.getClassName = function () {\n        return \"StereoscopicUniversalCamera\";\n    };\n    /**\n     * @param name\n     * @hidden\n     */\n    StereoscopicScreenUniversalCamera.prototype.createRigCamera = function (name) {\n        var camera = new TargetCamera(name, Vector3.Zero(), this.getScene());\n        var transform = new TransformNode(\"tm_\" + name, this.getScene());\n        camera.parent = transform;\n        transform.setPivotMatrix(Matrix.Identity(), false);\n        camera.isRigCamera = true;\n        camera.rigParent = this;\n        return camera;\n    };\n    /**\n     * @hidden\n     */\n    StereoscopicScreenUniversalCamera.prototype._updateRigCameras = function () {\n        for (var cameraIndex = 0; cameraIndex < this._rigCameras.length; cameraIndex++) {\n            var cam = this._rigCameras[cameraIndex];\n            cam.minZ = this.minZ;\n            cam.maxZ = this.maxZ;\n            cam.fov = this.fov;\n            cam.upVector.copyFrom(this.upVector);\n            if (cam.rotationQuaternion) {\n                cam.rotationQuaternion.copyFrom(this.rotationQuaternion);\n            }\n            else {\n                cam.rotation.copyFrom(this.rotation);\n            }\n            this._updateCamera(this._rigCameras[cameraIndex], cameraIndex);\n        }\n    };\n    StereoscopicScreenUniversalCamera.prototype._updateCamera = function (camera, cameraIndex) {\n        var b = this.distanceBetweenEyes / 2;\n        var z = b / this.distanceToProjectionPlane;\n        camera.position.copyFrom(this.position);\n        camera.position.addInPlaceFromFloats(cameraIndex === 0 ? -b : b, 0, -this._distanceToProjectionPlane);\n        var transform = camera.parent;\n        var m = transform.getPivotMatrix();\n        m.setTranslationFromFloats(cameraIndex === 0 ? b : -b, 0, 0);\n        m.setRowFromFloats(2, cameraIndex === 0 ? z : -z, 0, 1, 0);\n        transform.setPivotMatrix(m, false);\n    };\n    StereoscopicScreenUniversalCamera.prototype._setRigMode = function () {\n        this._rigCameras[0].viewport = new Viewport(0, 0, 0.5, 1);\n        this._rigCameras[1].viewport = new Viewport(0.5, 0, 0.5, 1.0);\n        for (var cameraIndex = 0; cameraIndex < this._rigCameras.length; cameraIndex++) {\n            this._updateCamera(this._rigCameras[cameraIndex], cameraIndex);\n        }\n    };\n    return StereoscopicScreenUniversalCamera;\n}(UniversalCamera));\nexport { StereoscopicScreenUniversalCamera };\n//# sourceMappingURL=stereoscopicScreenUniversalCamera.js.map","import { __extends } from \"tslib\";\nimport { FreeCamera } from \"./freeCamera.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Node } from \"../node.js\";\nimport \"./Inputs/freeCameraVirtualJoystickInput.js\";\nNode.AddNodeConstructor(\"VirtualJoysticksCamera\", function (name, scene) {\n    return function () { return new VirtualJoysticksCamera(name, Vector3.Zero(), scene); };\n});\n/**\n * This represents a free type of camera. It can be useful in First Person Shooter game for instance.\n * It is identical to the Free Camera and simply adds by default a virtual joystick.\n * Virtual Joysticks are on-screen 2D graphics that are used to control the camera or other scene items.\n * @see https://doc.babylonjs.com/features/cameras#virtual-joysticks-camera\n */\nvar VirtualJoysticksCamera = /** @class */ (function (_super) {\n    __extends(VirtualJoysticksCamera, _super);\n    /**\n     * Instantiates a VirtualJoysticksCamera. It can be useful in First Person Shooter game for instance.\n     * It is identical to the Free Camera and simply adds by default a virtual joystick.\n     * Virtual Joysticks are on-screen 2D graphics that are used to control the camera or other scene items.\n     * @see https://doc.babylonjs.com/features/cameras#virtual-joysticks-camera\n     * @param name Define the name of the camera in the scene\n     * @param position Define the start position of the camera in the scene\n     * @param scene Define the scene the camera belongs to\n     */\n    function VirtualJoysticksCamera(name, position, scene) {\n        var _this = _super.call(this, name, position, scene) || this;\n        _this.inputs.addVirtualJoystick();\n        return _this;\n    }\n    /**\n     * Gets the current object class name.\n     * @return the class name\n     */\n    VirtualJoysticksCamera.prototype.getClassName = function () {\n        return \"VirtualJoysticksCamera\";\n    };\n    return VirtualJoysticksCamera;\n}(FreeCamera));\nexport { VirtualJoysticksCamera };\n//# sourceMappingURL=virtualJoysticksCamera.js.map","import { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera.js\";\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera.js\";\nimport { VRCameraMetrics } from \"./vrCameraMetrics.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setVRRigMode } from \"../RigModes/vrRigMode.js\";\nimport \"../Inputs/arcRotateCameraVRDeviceOrientationInput.js\";\nNode.AddNodeConstructor(\"VRDeviceOrientationArcRotateCamera\", function (name, scene) {\n    return function () { return new VRDeviceOrientationArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), scene); };\n});\n/**\n * Camera used to simulate VR rendering (based on ArcRotateCamera)\n * @see https://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras\n */\nvar VRDeviceOrientationArcRotateCamera = /** @class */ (function (_super) {\n    __extends(VRDeviceOrientationArcRotateCamera, _super);\n    /**\n     * Creates a new VRDeviceOrientationArcRotateCamera\n     * @param name defines camera name\n     * @param alpha defines the camera rotation along the longitudinal axis\n     * @param beta defines the camera rotation along the latitudinal axis\n     * @param radius defines the camera distance from its target\n     * @param target defines the camera target\n     * @param scene defines the scene the camera belongs to\n     * @param compensateDistortion defines if the camera needs to compensate the lens distortion\n     * @param vrCameraMetrics defines the vr metrics associated to the camera\n     */\n    function VRDeviceOrientationArcRotateCamera(name, alpha, beta, radius, target, scene, compensateDistortion, vrCameraMetrics) {\n        if (compensateDistortion === void 0) { compensateDistortion = true; }\n        if (vrCameraMetrics === void 0) { vrCameraMetrics = VRCameraMetrics.GetDefault(); }\n        var _this = _super.call(this, name, alpha, beta, radius, target, scene) || this;\n        _this._setRigMode = setVRRigMode.bind(null, _this);\n        vrCameraMetrics.compensateDistortion = compensateDistortion;\n        _this.setCameraRigMode(Camera.RIG_MODE_VR, { vrCameraMetrics: vrCameraMetrics });\n        _this.inputs.addVRDeviceOrientation();\n        return _this;\n    }\n    /**\n     * Gets camera class name\n     * @returns VRDeviceOrientationArcRotateCamera\n     */\n    VRDeviceOrientationArcRotateCamera.prototype.getClassName = function () {\n        return \"VRDeviceOrientationArcRotateCamera\";\n    };\n    return VRDeviceOrientationArcRotateCamera;\n}(ArcRotateCamera));\nexport { VRDeviceOrientationArcRotateCamera };\n//# sourceMappingURL=vrDeviceOrientationArcRotateCamera.js.map","import { __extends } from \"tslib\";\nimport { VRDeviceOrientationFreeCamera } from \"./vrDeviceOrientationFreeCamera.js\";\nimport { VRCameraMetrics } from \"./vrCameraMetrics.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setVRRigMode } from \"../RigModes/vrRigMode.js\";\nimport \"../../Gamepads/gamepadSceneComponent.js\";\nNode.AddNodeConstructor(\"VRDeviceOrientationGamepadCamera\", function (name, scene) {\n    return function () { return new VRDeviceOrientationGamepadCamera(name, Vector3.Zero(), scene); };\n});\n/**\n * Camera used to simulate VR rendering (based on VRDeviceOrientationFreeCamera)\n * @see https://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras\n */\nvar VRDeviceOrientationGamepadCamera = /** @class */ (function (_super) {\n    __extends(VRDeviceOrientationGamepadCamera, _super);\n    /**\n     * Creates a new VRDeviceOrientationGamepadCamera\n     * @param name defines camera name\n     * @param position defines the start position of the camera\n     * @param scene defines the scene the camera belongs to\n     * @param compensateDistortion defines if the camera needs to compensate the lens distortion\n     * @param vrCameraMetrics defines the vr metrics associated to the camera\n     */\n    function VRDeviceOrientationGamepadCamera(name, position, scene, compensateDistortion, vrCameraMetrics) {\n        if (compensateDistortion === void 0) { compensateDistortion = true; }\n        if (vrCameraMetrics === void 0) { vrCameraMetrics = VRCameraMetrics.GetDefault(); }\n        var _this = _super.call(this, name, position, scene, compensateDistortion, vrCameraMetrics) || this;\n        _this._setRigMode = setVRRigMode.bind(null, _this);\n        _this.inputs.addGamepad();\n        return _this;\n    }\n    /**\n     * Gets camera class name\n     * @returns VRDeviceOrientationGamepadCamera\n     */\n    VRDeviceOrientationGamepadCamera.prototype.getClassName = function () {\n        return \"VRDeviceOrientationGamepadCamera\";\n    };\n    return VRDeviceOrientationGamepadCamera;\n}(VRDeviceOrientationFreeCamera));\nexport { VRDeviceOrientationGamepadCamera };\n//# sourceMappingURL=vrDeviceOrientationGamepadCamera.js.map","import { __decorate, __extends } from \"tslib\";\nimport { serialize, serializeAsVector3, serializeAsMeshReference } from \"../Misc/decorators.js\";\nimport { Camera } from \"./camera.js\";\nimport { Quaternion, Matrix, Vector3, Vector2, TmpVectors } from \"../Maths/math.vector.js\";\nimport { Epsilon } from \"../Maths/math.constants.js\";\nimport { Axis } from \"../Maths/math.axis.js\";\n/**\n * A target camera takes a mesh or position as a target and continues to look at it while it moves.\n * This is the base of the follow, arc rotate cameras and Free camera\n * @see https://doc.babylonjs.com/features/cameras\n */\nvar TargetCamera = /** @class */ (function (_super) {\n    __extends(TargetCamera, _super);\n    /**\n     * Instantiates a target camera that takes a mesh or position as a target and continues to look at it while it moves.\n     * This is the base of the follow, arc rotate cameras and Free camera\n     * @see https://doc.babylonjs.com/features/cameras\n     * @param name Defines the name of the camera in the scene\n     * @param position Defines the start position of the camera in the scene\n     * @param scene Defines the scene the camera belongs to\n     * @param setActiveOnSceneIfNoneActive Defines whether the camera should be marked as active if not other active cameras have been defined\n     */\n    function TargetCamera(name, position, scene, setActiveOnSceneIfNoneActive) {\n        if (setActiveOnSceneIfNoneActive === void 0) { setActiveOnSceneIfNoneActive = true; }\n        var _this = _super.call(this, name, position, scene, setActiveOnSceneIfNoneActive) || this;\n        _this._tmpUpVector = Vector3.Zero();\n        _this._tmpTargetVector = Vector3.Zero();\n        /**\n         * Define the current direction the camera is moving to\n         */\n        _this.cameraDirection = new Vector3(0, 0, 0);\n        /**\n         * Define the current rotation the camera is rotating to\n         */\n        _this.cameraRotation = new Vector2(0, 0);\n        /** Gets or sets a boolean indicating that the scaling of the parent hierarchy will not be taken in account by the camera */\n        _this.ignoreParentScaling = false;\n        /**\n         * When set, the up vector of the camera will be updated by the rotation of the camera\n         */\n        _this.updateUpVectorFromRotation = false;\n        _this._tmpQuaternion = new Quaternion();\n        /**\n         * Define the current rotation of the camera\n         */\n        _this.rotation = new Vector3(0, 0, 0);\n        /**\n         * Define the current speed of the camera\n         */\n        _this.speed = 2.0;\n        /**\n         * Add constraint to the camera to prevent it to move freely in all directions and\n         * around all axis.\n         */\n        _this.noRotationConstraint = false;\n        /**\n         * Reverses mouselook direction to 'natural' panning as opposed to traditional direct\n         * panning\n         */\n        _this.invertRotation = false;\n        /**\n         * Speed multiplier for inverse camera panning\n         */\n        _this.inverseRotationSpeed = 0.2;\n        /**\n         * Define the current target of the camera as an object or a position.\n         * Please note that locking a target will disable panning.\n         */\n        _this.lockedTarget = null;\n        /** @hidden */\n        _this._currentTarget = Vector3.Zero();\n        /** @hidden */\n        _this._initialFocalDistance = 1;\n        /** @hidden */\n        _this._viewMatrix = Matrix.Zero();\n        /** @hidden */\n        _this._camMatrix = Matrix.Zero();\n        /** @hidden */\n        _this._cameraTransformMatrix = Matrix.Zero();\n        /** @hidden */\n        _this._cameraRotationMatrix = Matrix.Zero();\n        /** @hidden */\n        _this._referencePoint = new Vector3(0, 0, 1);\n        /** @hidden */\n        _this._transformedReferencePoint = Vector3.Zero();\n        _this._defaultUp = Vector3.Up();\n        _this._cachedRotationZ = 0;\n        _this._cachedQuaternionRotationZ = 0;\n        return _this;\n    }\n    /**\n     * Gets the position in front of the camera at a given distance.\n     * @param distance The distance from the camera we want the position to be\n     * @returns the position\n     */\n    TargetCamera.prototype.getFrontPosition = function (distance) {\n        this.getWorldMatrix();\n        var direction = this.getTarget().subtract(this.position);\n        direction.normalize();\n        direction.scaleInPlace(distance);\n        return this.globalPosition.add(direction);\n    };\n    /** @hidden */\n    TargetCamera.prototype._getLockedTargetPosition = function () {\n        if (!this.lockedTarget) {\n            return null;\n        }\n        if (this.lockedTarget.absolutePosition) {\n            this.lockedTarget.computeWorldMatrix();\n        }\n        return this.lockedTarget.absolutePosition || this.lockedTarget;\n    };\n    /**\n     * Store current camera state of the camera (fov, position, rotation, etc..)\n     * @returns the camera\n     */\n    TargetCamera.prototype.storeState = function () {\n        this._storedPosition = this.position.clone();\n        this._storedRotation = this.rotation.clone();\n        if (this.rotationQuaternion) {\n            this._storedRotationQuaternion = this.rotationQuaternion.clone();\n        }\n        return _super.prototype.storeState.call(this);\n    };\n    /**\n     * Restored camera state. You must call storeState() first\n     * @returns whether it was successful or not\n     * @hidden\n     */\n    TargetCamera.prototype._restoreStateValues = function () {\n        if (!_super.prototype._restoreStateValues.call(this)) {\n            return false;\n        }\n        this.position = this._storedPosition.clone();\n        this.rotation = this._storedRotation.clone();\n        if (this.rotationQuaternion) {\n            this.rotationQuaternion = this._storedRotationQuaternion.clone();\n        }\n        this.cameraDirection.copyFromFloats(0, 0, 0);\n        this.cameraRotation.copyFromFloats(0, 0);\n        return true;\n    };\n    /** @hidden */\n    TargetCamera.prototype._initCache = function () {\n        _super.prototype._initCache.call(this);\n        this._cache.lockedTarget = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this._cache.rotation = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this._cache.rotationQuaternion = new Quaternion(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    };\n    /**\n     * @param ignoreParentClass\n     * @hidden\n     */\n    TargetCamera.prototype._updateCache = function (ignoreParentClass) {\n        if (!ignoreParentClass) {\n            _super.prototype._updateCache.call(this);\n        }\n        var lockedTargetPosition = this._getLockedTargetPosition();\n        if (!lockedTargetPosition) {\n            this._cache.lockedTarget = null;\n        }\n        else {\n            if (!this._cache.lockedTarget) {\n                this._cache.lockedTarget = lockedTargetPosition.clone();\n            }\n            else {\n                this._cache.lockedTarget.copyFrom(lockedTargetPosition);\n            }\n        }\n        this._cache.rotation.copyFrom(this.rotation);\n        if (this.rotationQuaternion) {\n            this._cache.rotationQuaternion.copyFrom(this.rotationQuaternion);\n        }\n    };\n    // Synchronized\n    /** @hidden */\n    TargetCamera.prototype._isSynchronizedViewMatrix = function () {\n        if (!_super.prototype._isSynchronizedViewMatrix.call(this)) {\n            return false;\n        }\n        var lockedTargetPosition = this._getLockedTargetPosition();\n        return ((this._cache.lockedTarget ? this._cache.lockedTarget.equals(lockedTargetPosition) : !lockedTargetPosition) &&\n            (this.rotationQuaternion ? this.rotationQuaternion.equals(this._cache.rotationQuaternion) : this._cache.rotation.equals(this.rotation)));\n    };\n    // Methods\n    /** @hidden */\n    TargetCamera.prototype._computeLocalCameraSpeed = function () {\n        var engine = this.getEngine();\n        return this.speed * Math.sqrt(engine.getDeltaTime() / (engine.getFps() * 100.0));\n    };\n    // Target\n    /**\n     * Defines the target the camera should look at.\n     * @param target Defines the new target as a Vector\n     */\n    TargetCamera.prototype.setTarget = function (target) {\n        this.upVector.normalize();\n        this._initialFocalDistance = target.subtract(this.position).length();\n        if (this.position.z === target.z) {\n            this.position.z += Epsilon;\n        }\n        this._referencePoint.normalize().scaleInPlace(this._initialFocalDistance);\n        Matrix.LookAtLHToRef(this.position, target, this._defaultUp, this._camMatrix);\n        this._camMatrix.invert();\n        this.rotation.x = Math.atan(this._camMatrix.m[6] / this._camMatrix.m[10]);\n        var vDir = target.subtract(this.position);\n        if (vDir.x >= 0.0) {\n            this.rotation.y = -Math.atan(vDir.z / vDir.x) + Math.PI / 2.0;\n        }\n        else {\n            this.rotation.y = -Math.atan(vDir.z / vDir.x) - Math.PI / 2.0;\n        }\n        this.rotation.z = 0;\n        if (isNaN(this.rotation.x)) {\n            this.rotation.x = 0;\n        }\n        if (isNaN(this.rotation.y)) {\n            this.rotation.y = 0;\n        }\n        if (isNaN(this.rotation.z)) {\n            this.rotation.z = 0;\n        }\n        if (this.rotationQuaternion) {\n            Quaternion.RotationYawPitchRollToRef(this.rotation.y, this.rotation.x, this.rotation.z, this.rotationQuaternion);\n        }\n    };\n    Object.defineProperty(TargetCamera.prototype, \"target\", {\n        /**\n         * Defines the target point of the camera.\n         * The camera looks towards it form the radius distance.\n         */\n        get: function () {\n            return this.getTarget();\n        },\n        set: function (value) {\n            this.setTarget(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Return the current target position of the camera. This value is expressed in local space.\n     * @returns the target position\n     */\n    TargetCamera.prototype.getTarget = function () {\n        return this._currentTarget;\n    };\n    /** @hidden */\n    TargetCamera.prototype._decideIfNeedsToMove = function () {\n        return Math.abs(this.cameraDirection.x) > 0 || Math.abs(this.cameraDirection.y) > 0 || Math.abs(this.cameraDirection.z) > 0;\n    };\n    /** @hidden */\n    TargetCamera.prototype._updatePosition = function () {\n        if (this.parent) {\n            this.parent.getWorldMatrix().invertToRef(TmpVectors.Matrix[0]);\n            Vector3.TransformNormalToRef(this.cameraDirection, TmpVectors.Matrix[0], TmpVectors.Vector3[0]);\n            this.position.addInPlace(TmpVectors.Vector3[0]);\n            return;\n        }\n        this.position.addInPlace(this.cameraDirection);\n    };\n    /** @hidden */\n    TargetCamera.prototype._checkInputs = function () {\n        var directionMultiplier = this.invertRotation ? -this.inverseRotationSpeed : 1.0;\n        var needToMove = this._decideIfNeedsToMove();\n        var needToRotate = Math.abs(this.cameraRotation.x) > 0 || Math.abs(this.cameraRotation.y) > 0;\n        // Move\n        if (needToMove) {\n            this._updatePosition();\n        }\n        // Rotate\n        if (needToRotate) {\n            //rotate, if quaternion is set and rotation was used\n            if (this.rotationQuaternion) {\n                this.rotationQuaternion.toEulerAnglesToRef(this.rotation);\n            }\n            this.rotation.x += this.cameraRotation.x * directionMultiplier;\n            this.rotation.y += this.cameraRotation.y * directionMultiplier;\n            // Apply constraints\n            if (!this.noRotationConstraint) {\n                var limit = 1.570796;\n                if (this.rotation.x > limit) {\n                    this.rotation.x = limit;\n                }\n                if (this.rotation.x < -limit) {\n                    this.rotation.x = -limit;\n                }\n            }\n            //rotate, if quaternion is set and rotation was used\n            if (this.rotationQuaternion) {\n                var len = this.rotation.lengthSquared();\n                if (len) {\n                    Quaternion.RotationYawPitchRollToRef(this.rotation.y, this.rotation.x, this.rotation.z, this.rotationQuaternion);\n                }\n            }\n        }\n        // Inertia\n        if (needToMove) {\n            if (Math.abs(this.cameraDirection.x) < this.speed * Epsilon) {\n                this.cameraDirection.x = 0;\n            }\n            if (Math.abs(this.cameraDirection.y) < this.speed * Epsilon) {\n                this.cameraDirection.y = 0;\n            }\n            if (Math.abs(this.cameraDirection.z) < this.speed * Epsilon) {\n                this.cameraDirection.z = 0;\n            }\n            this.cameraDirection.scaleInPlace(this.inertia);\n        }\n        if (needToRotate) {\n            if (Math.abs(this.cameraRotation.x) < this.speed * Epsilon) {\n                this.cameraRotation.x = 0;\n            }\n            if (Math.abs(this.cameraRotation.y) < this.speed * Epsilon) {\n                this.cameraRotation.y = 0;\n            }\n            this.cameraRotation.scaleInPlace(this.inertia);\n        }\n        _super.prototype._checkInputs.call(this);\n    };\n    TargetCamera.prototype._updateCameraRotationMatrix = function () {\n        if (this.rotationQuaternion) {\n            this.rotationQuaternion.toRotationMatrix(this._cameraRotationMatrix);\n        }\n        else {\n            Matrix.RotationYawPitchRollToRef(this.rotation.y, this.rotation.x, this.rotation.z, this._cameraRotationMatrix);\n        }\n    };\n    /**\n     * Update the up vector to apply the rotation of the camera (So if you changed the camera rotation.z this will let you update the up vector as well)\n     * @returns the current camera\n     */\n    TargetCamera.prototype._rotateUpVectorWithCameraRotationMatrix = function () {\n        Vector3.TransformNormalToRef(this._defaultUp, this._cameraRotationMatrix, this.upVector);\n        return this;\n    };\n    /** @hidden */\n    TargetCamera.prototype._getViewMatrix = function () {\n        if (this.lockedTarget) {\n            this.setTarget(this._getLockedTargetPosition());\n        }\n        // Compute\n        this._updateCameraRotationMatrix();\n        // Apply the changed rotation to the upVector\n        if (this.rotationQuaternion && this._cachedQuaternionRotationZ != this.rotationQuaternion.z) {\n            this._rotateUpVectorWithCameraRotationMatrix();\n            this._cachedQuaternionRotationZ = this.rotationQuaternion.z;\n        }\n        else if (this._cachedRotationZ !== this.rotation.z) {\n            this._rotateUpVectorWithCameraRotationMatrix();\n            this._cachedRotationZ = this.rotation.z;\n        }\n        Vector3.TransformCoordinatesToRef(this._referencePoint, this._cameraRotationMatrix, this._transformedReferencePoint);\n        // Computing target and final matrix\n        this.position.addToRef(this._transformedReferencePoint, this._currentTarget);\n        if (this.updateUpVectorFromRotation) {\n            if (this.rotationQuaternion) {\n                Axis.Y.rotateByQuaternionToRef(this.rotationQuaternion, this.upVector);\n            }\n            else {\n                Quaternion.FromEulerVectorToRef(this.rotation, this._tmpQuaternion);\n                Axis.Y.rotateByQuaternionToRef(this._tmpQuaternion, this.upVector);\n            }\n        }\n        this._computeViewMatrix(this.position, this._currentTarget, this.upVector);\n        return this._viewMatrix;\n    };\n    TargetCamera.prototype._computeViewMatrix = function (position, target, up) {\n        if (this.ignoreParentScaling) {\n            if (this.parent) {\n                var parentWorldMatrix = this.parent.getWorldMatrix();\n                Vector3.TransformCoordinatesToRef(position, parentWorldMatrix, this._globalPosition);\n                Vector3.TransformCoordinatesToRef(target, parentWorldMatrix, this._tmpTargetVector);\n                Vector3.TransformNormalToRef(up, parentWorldMatrix, this._tmpUpVector);\n                this._markSyncedWithParent();\n            }\n            else {\n                this._globalPosition.copyFrom(position);\n                this._tmpTargetVector.copyFrom(target);\n                this._tmpUpVector.copyFrom(up);\n            }\n            if (this.getScene().useRightHandedSystem) {\n                Matrix.LookAtRHToRef(this._globalPosition, this._tmpTargetVector, this._tmpUpVector, this._viewMatrix);\n            }\n            else {\n                Matrix.LookAtLHToRef(this._globalPosition, this._tmpTargetVector, this._tmpUpVector, this._viewMatrix);\n            }\n            return;\n        }\n        if (this.getScene().useRightHandedSystem) {\n            Matrix.LookAtRHToRef(position, target, up, this._viewMatrix);\n        }\n        else {\n            Matrix.LookAtLHToRef(position, target, up, this._viewMatrix);\n        }\n        if (this.parent) {\n            var parentWorldMatrix = this.parent.getWorldMatrix();\n            this._viewMatrix.invert();\n            this._viewMatrix.multiplyToRef(parentWorldMatrix, this._viewMatrix);\n            this._viewMatrix.getTranslationToRef(this._globalPosition);\n            this._viewMatrix.invert();\n            this._markSyncedWithParent();\n        }\n        else {\n            this._globalPosition.copyFrom(position);\n        }\n    };\n    /**\n     * @param name\n     * @param cameraIndex\n     * @hidden\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    TargetCamera.prototype.createRigCamera = function (name, cameraIndex) {\n        if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\n            var rigCamera = new TargetCamera(name, this.position.clone(), this.getScene());\n            rigCamera.isRigCamera = true;\n            rigCamera.rigParent = this;\n            if (this.cameraRigMode === Camera.RIG_MODE_VR || this.cameraRigMode === Camera.RIG_MODE_WEBVR) {\n                if (!this.rotationQuaternion) {\n                    this.rotationQuaternion = new Quaternion();\n                }\n                rigCamera._cameraRigParams = {};\n                rigCamera.rotationQuaternion = new Quaternion();\n            }\n            return rigCamera;\n        }\n        return null;\n    };\n    /**\n     * @hidden\n     */\n    TargetCamera.prototype._updateRigCameras = function () {\n        var camLeft = this._rigCameras[0];\n        var camRight = this._rigCameras[1];\n        this.computeWorldMatrix();\n        switch (this.cameraRigMode) {\n            case Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH:\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL:\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED:\n            case Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER:\n            case Camera.RIG_MODE_STEREOSCOPIC_INTERLACED: {\n                //provisionnaly using _cameraRigParams.stereoHalfAngle instead of calculations based on _cameraRigParams.interaxialDistance:\n                var leftSign = this.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED ? 1 : -1;\n                var rightSign = this.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED ? -1 : 1;\n                this._getRigCamPositionAndTarget(this._cameraRigParams.stereoHalfAngle * leftSign, camLeft);\n                this._getRigCamPositionAndTarget(this._cameraRigParams.stereoHalfAngle * rightSign, camRight);\n                break;\n            }\n            case Camera.RIG_MODE_VR:\n                if (camLeft.rotationQuaternion) {\n                    camLeft.rotationQuaternion.copyFrom(this.rotationQuaternion);\n                    camRight.rotationQuaternion.copyFrom(this.rotationQuaternion);\n                }\n                else {\n                    camLeft.rotation.copyFrom(this.rotation);\n                    camRight.rotation.copyFrom(this.rotation);\n                }\n                camLeft.position.copyFrom(this.position);\n                camRight.position.copyFrom(this.position);\n                break;\n        }\n        _super.prototype._updateRigCameras.call(this);\n    };\n    TargetCamera.prototype._getRigCamPositionAndTarget = function (halfSpace, rigCamera) {\n        var target = this.getTarget();\n        target.subtractToRef(this.position, TargetCamera._TargetFocalPoint);\n        TargetCamera._TargetFocalPoint.normalize().scaleInPlace(this._initialFocalDistance);\n        var newFocalTarget = TargetCamera._TargetFocalPoint.addInPlace(this.position);\n        Matrix.TranslationToRef(-newFocalTarget.x, -newFocalTarget.y, -newFocalTarget.z, TargetCamera._TargetTransformMatrix);\n        TargetCamera._TargetTransformMatrix.multiplyToRef(Matrix.RotationAxis(rigCamera.upVector, halfSpace), TargetCamera._RigCamTransformMatrix);\n        Matrix.TranslationToRef(newFocalTarget.x, newFocalTarget.y, newFocalTarget.z, TargetCamera._TargetTransformMatrix);\n        TargetCamera._RigCamTransformMatrix.multiplyToRef(TargetCamera._TargetTransformMatrix, TargetCamera._RigCamTransformMatrix);\n        Vector3.TransformCoordinatesToRef(this.position, TargetCamera._RigCamTransformMatrix, rigCamera.position);\n        rigCamera.setTarget(newFocalTarget);\n    };\n    /**\n     * Gets the current object class name.\n     * @return the class name\n     */\n    TargetCamera.prototype.getClassName = function () {\n        return \"TargetCamera\";\n    };\n    TargetCamera._RigCamTransformMatrix = new Matrix();\n    TargetCamera._TargetTransformMatrix = new Matrix();\n    TargetCamera._TargetFocalPoint = new Vector3();\n    __decorate([\n        serializeAsVector3()\n    ], TargetCamera.prototype, \"rotation\", void 0);\n    __decorate([\n        serialize()\n    ], TargetCamera.prototype, \"speed\", void 0);\n    __decorate([\n        serializeAsMeshReference(\"lockedTargetId\")\n    ], TargetCamera.prototype, \"lockedTarget\", void 0);\n    return TargetCamera;\n}(Camera));\nexport { TargetCamera };\n//# sourceMappingURL=targetCamera.js.map","import { __extends } from \"tslib\";\nimport { FreeCamera } from \"./freeCamera.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Node } from \"../node.js\";\nNode.AddNodeConstructor(\"TouchCamera\", function (name, scene) {\n    return function () { return new TouchCamera(name, Vector3.Zero(), scene); };\n});\n/**\n * This represents a FPS type of camera controlled by touch.\n * This is like a universal camera minus the Gamepad controls.\n * @see https://doc.babylonjs.com/features/cameras#universal-camera\n */\nvar TouchCamera = /** @class */ (function (_super) {\n    __extends(TouchCamera, _super);\n    /**\n     * Instantiates a new touch camera.\n     * This represents a FPS type of camera controlled by touch.\n     * This is like a universal camera minus the Gamepad controls.\n     * @see https://doc.babylonjs.com/features/cameras#universal-camera\n     * @param name Define the name of the camera in the scene\n     * @param position Define the start position of the camera in the scene\n     * @param scene Define the scene the camera belongs to\n     */\n    function TouchCamera(name, position, scene) {\n        var _this = _super.call(this, name, position, scene) || this;\n        _this.inputs.addTouch();\n        _this._setupInputs();\n        return _this;\n    }\n    Object.defineProperty(TouchCamera.prototype, \"touchAngularSensibility\", {\n        /**\n         * Defines the touch sensibility for rotation.\n         * The higher the faster.\n         */\n        get: function () {\n            var touch = this.inputs.attached[\"touch\"];\n            if (touch) {\n                return touch.touchAngularSensibility;\n            }\n            return 0;\n        },\n        set: function (value) {\n            var touch = this.inputs.attached[\"touch\"];\n            if (touch) {\n                touch.touchAngularSensibility = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TouchCamera.prototype, \"touchMoveSensibility\", {\n        /**\n         * Defines the touch sensibility for move.\n         * The higher the faster.\n         */\n        get: function () {\n            var touch = this.inputs.attached[\"touch\"];\n            if (touch) {\n                return touch.touchMoveSensibility;\n            }\n            return 0;\n        },\n        set: function (value) {\n            var touch = this.inputs.attached[\"touch\"];\n            if (touch) {\n                touch.touchMoveSensibility = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the current object class name.\n     * @return the class name\n     */\n    TouchCamera.prototype.getClassName = function () {\n        return \"TouchCamera\";\n    };\n    /** @hidden */\n    TouchCamera.prototype._setupInputs = function () {\n        var touch = this.inputs.attached[\"touch\"];\n        var mouse = this.inputs.attached[\"mouse\"];\n        if (mouse) {\n            mouse.touchEnabled = false;\n        }\n        else {\n            touch.allowMouse = true;\n        }\n    };\n    return TouchCamera;\n}(FreeCamera));\nexport { TouchCamera };\n//# sourceMappingURL=touchCamera.js.map","import { __extends } from \"tslib\";\nimport { TouchCamera } from \"./touchCamera.js\";\nimport { Node } from \"../node.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Camera } from \"./camera.js\";\nimport \"../Gamepads/gamepadSceneComponent.js\";\nNode.AddNodeConstructor(\"FreeCamera\", function (name, scene) {\n    // Forcing to use the Universal camera\n    return function () { return new UniversalCamera(name, Vector3.Zero(), scene); };\n});\n/**\n * The Universal Camera is the one to choose for first person shooter type games, and works with all the keyboard, mouse, touch and gamepads. This replaces the earlier Free Camera,\n * which still works and will still be found in many Playgrounds.\n * @see https://doc.babylonjs.com/features/cameras#universal-camera\n */\nvar UniversalCamera = /** @class */ (function (_super) {\n    __extends(UniversalCamera, _super);\n    /**\n     * The Universal Camera is the one to choose for first person shooter type games, and works with all the keyboard, mouse, touch and gamepads. This replaces the earlier Free Camera,\n     * which still works and will still be found in many Playgrounds.\n     * @see https://doc.babylonjs.com/features/cameras#universal-camera\n     * @param name Define the name of the camera in the scene\n     * @param position Define the start position of the camera in the scene\n     * @param scene Define the scene the camera belongs to\n     */\n    function UniversalCamera(name, position, scene) {\n        var _this = _super.call(this, name, position, scene) || this;\n        _this.inputs.addGamepad();\n        return _this;\n    }\n    Object.defineProperty(UniversalCamera.prototype, \"gamepadAngularSensibility\", {\n        /**\n         * Defines the gamepad rotation sensibility.\n         * This is the threshold from when rotation starts to be accounted for to prevent jittering.\n         */\n        get: function () {\n            var gamepad = this.inputs.attached[\"gamepad\"];\n            if (gamepad) {\n                return gamepad.gamepadAngularSensibility;\n            }\n            return 0;\n        },\n        set: function (value) {\n            var gamepad = this.inputs.attached[\"gamepad\"];\n            if (gamepad) {\n                gamepad.gamepadAngularSensibility = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(UniversalCamera.prototype, \"gamepadMoveSensibility\", {\n        /**\n         * Defines the gamepad move sensibility.\n         * This is the threshold from when moving starts to be accounted for to prevent jittering.\n         */\n        get: function () {\n            var gamepad = this.inputs.attached[\"gamepad\"];\n            if (gamepad) {\n                return gamepad.gamepadMoveSensibility;\n            }\n            return 0;\n        },\n        set: function (value) {\n            var gamepad = this.inputs.attached[\"gamepad\"];\n            if (gamepad) {\n                gamepad.gamepadMoveSensibility = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the current object class name.\n     * @return the class name\n     */\n    UniversalCamera.prototype.getClassName = function () {\n        return \"UniversalCamera\";\n    };\n    return UniversalCamera;\n}(TouchCamera));\nexport { UniversalCamera };\nCamera._CreateDefaultParsedCamera = function (name, scene) {\n    return new UniversalCamera(name, Vector3.Zero(), scene);\n};\n//# sourceMappingURL=universalCamera.js.map","import { Vector3 } from \"../Maths/math.vector.js\";\nimport { Plane } from \"../Maths/math.plane.js\";\nvar intersectBoxAASphere = function (boxMin, boxMax, sphereCenter, sphereRadius) {\n    if (boxMin.x > sphereCenter.x + sphereRadius) {\n        return false;\n    }\n    if (sphereCenter.x - sphereRadius > boxMax.x) {\n        return false;\n    }\n    if (boxMin.y > sphereCenter.y + sphereRadius) {\n        return false;\n    }\n    if (sphereCenter.y - sphereRadius > boxMax.y) {\n        return false;\n    }\n    if (boxMin.z > sphereCenter.z + sphereRadius) {\n        return false;\n    }\n    if (sphereCenter.z - sphereRadius > boxMax.z) {\n        return false;\n    }\n    return true;\n};\nvar getLowestRoot = (function () {\n    var result = { root: 0, found: false };\n    return function (a, b, c, maxR) {\n        result.root = 0;\n        result.found = false;\n        var determinant = b * b - 4.0 * a * c;\n        if (determinant < 0) {\n            return result;\n        }\n        var sqrtD = Math.sqrt(determinant);\n        var r1 = (-b - sqrtD) / (2.0 * a);\n        var r2 = (-b + sqrtD) / (2.0 * a);\n        if (r1 > r2) {\n            var temp = r2;\n            r2 = r1;\n            r1 = temp;\n        }\n        if (r1 > 0 && r1 < maxR) {\n            result.root = r1;\n            result.found = true;\n            return result;\n        }\n        if (r2 > 0 && r2 < maxR) {\n            result.root = r2;\n            result.found = true;\n            return result;\n        }\n        return result;\n    };\n})();\n/** @hidden */\nvar Collider = /** @class */ (function () {\n    function Collider() {\n        // Implementation of the \"Improved Collision detection and Response\" algorithm proposed by Kasper Fauerby\n        // https://www.peroxide.dk/papers/collision/collision.pdf\n        this._collisionPoint = Vector3.Zero();\n        this._planeIntersectionPoint = Vector3.Zero();\n        this._tempVector = Vector3.Zero();\n        this._tempVector2 = Vector3.Zero();\n        this._tempVector3 = Vector3.Zero();\n        this._tempVector4 = Vector3.Zero();\n        this._edge = Vector3.Zero();\n        this._baseToVertex = Vector3.Zero();\n        this._destinationPoint = Vector3.Zero();\n        this._slidePlaneNormal = Vector3.Zero();\n        this._displacementVector = Vector3.Zero();\n        /** @hidden */\n        this._radius = Vector3.One();\n        /** @hidden */\n        this._retry = 0;\n        /** @hidden */\n        this._basePointWorld = Vector3.Zero();\n        this._velocityWorld = Vector3.Zero();\n        this._normalizedVelocity = Vector3.Zero();\n        this._collisionMask = -1;\n    }\n    Object.defineProperty(Collider.prototype, \"collisionMask\", {\n        get: function () {\n            return this._collisionMask;\n        },\n        set: function (mask) {\n            this._collisionMask = !isNaN(mask) ? mask : -1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Collider.prototype, \"slidePlaneNormal\", {\n        /**\n         * Gets the plane normal used to compute the sliding response (in local space)\n         */\n        get: function () {\n            return this._slidePlaneNormal;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // Methods\n    /**\n     * @param source\n     * @param dir\n     * @param e\n     * @hidden\n     */\n    Collider.prototype._initialize = function (source, dir, e) {\n        this._velocity = dir;\n        this._velocitySquaredLength = this._velocity.lengthSquared();\n        var len = Math.sqrt(this._velocitySquaredLength);\n        if (len === 0 || len === 1.0) {\n            this._normalizedVelocity.copyFromFloats(dir._x, dir._y, dir._z);\n        }\n        else {\n            dir.scaleToRef(1.0 / len, this._normalizedVelocity);\n        }\n        this._basePoint = source;\n        source.multiplyToRef(this._radius, this._basePointWorld);\n        dir.multiplyToRef(this._radius, this._velocityWorld);\n        this._velocityWorldLength = this._velocityWorld.length();\n        this._epsilon = e;\n        this.collisionFound = false;\n    };\n    /**\n     * @param point\n     * @param pa\n     * @param pb\n     * @param pc\n     * @param n\n     * @hidden\n     */\n    Collider.prototype._checkPointInTriangle = function (point, pa, pb, pc, n) {\n        pa.subtractToRef(point, this._tempVector);\n        pb.subtractToRef(point, this._tempVector2);\n        Vector3.CrossToRef(this._tempVector, this._tempVector2, this._tempVector4);\n        var d = Vector3.Dot(this._tempVector4, n);\n        if (d < 0) {\n            return false;\n        }\n        pc.subtractToRef(point, this._tempVector3);\n        Vector3.CrossToRef(this._tempVector2, this._tempVector3, this._tempVector4);\n        d = Vector3.Dot(this._tempVector4, n);\n        if (d < 0) {\n            return false;\n        }\n        Vector3.CrossToRef(this._tempVector3, this._tempVector, this._tempVector4);\n        d = Vector3.Dot(this._tempVector4, n);\n        return d >= 0;\n    };\n    /**\n     * @param sphereCenter\n     * @param sphereRadius\n     * @param vecMin\n     * @param vecMax\n     * @hidden\n     */\n    Collider.prototype._canDoCollision = function (sphereCenter, sphereRadius, vecMin, vecMax) {\n        var distance = Vector3.Distance(this._basePointWorld, sphereCenter);\n        var max = Math.max(this._radius.x, this._radius.y, this._radius.z);\n        if (distance > this._velocityWorldLength + max + sphereRadius) {\n            return false;\n        }\n        if (!intersectBoxAASphere(vecMin, vecMax, this._basePointWorld, this._velocityWorldLength + max)) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * @param faceIndex\n     * @param trianglePlaneArray\n     * @param p1\n     * @param p2\n     * @param p3\n     * @param hasMaterial\n     * @param hostMesh\n     * @hidden\n     */\n    Collider.prototype._testTriangle = function (faceIndex, trianglePlaneArray, p1, p2, p3, hasMaterial, hostMesh) {\n        var t0;\n        var embeddedInPlane = false;\n        //defensive programming, actually not needed.\n        if (!trianglePlaneArray) {\n            trianglePlaneArray = [];\n        }\n        if (!trianglePlaneArray[faceIndex]) {\n            trianglePlaneArray[faceIndex] = new Plane(0, 0, 0, 0);\n            trianglePlaneArray[faceIndex].copyFromPoints(p1, p2, p3);\n        }\n        var trianglePlane = trianglePlaneArray[faceIndex];\n        if (!hasMaterial && !trianglePlane.isFrontFacingTo(this._normalizedVelocity, 0)) {\n            return;\n        }\n        var signedDistToTrianglePlane = trianglePlane.signedDistanceTo(this._basePoint);\n        var normalDotVelocity = Vector3.Dot(trianglePlane.normal, this._velocity);\n        // if DoubleSidedCheck is false(default), a double sided face will be consided 2 times.\n        // if true, it discard the faces having normal not facing velocity\n        if (Collider.DoubleSidedCheck && normalDotVelocity > 0.0001) {\n            return;\n        }\n        if (normalDotVelocity == 0) {\n            if (Math.abs(signedDistToTrianglePlane) >= 1.0) {\n                return;\n            }\n            embeddedInPlane = true;\n            t0 = 0;\n        }\n        else {\n            t0 = (-1.0 - signedDistToTrianglePlane) / normalDotVelocity;\n            var t1 = (1.0 - signedDistToTrianglePlane) / normalDotVelocity;\n            if (t0 > t1) {\n                var temp = t1;\n                t1 = t0;\n                t0 = temp;\n            }\n            if (t0 > 1.0 || t1 < 0.0) {\n                return;\n            }\n            if (t0 < 0) {\n                t0 = 0;\n            }\n            if (t0 > 1.0) {\n                t0 = 1.0;\n            }\n        }\n        this._collisionPoint.copyFromFloats(0, 0, 0);\n        var found = false;\n        var t = 1.0;\n        if (!embeddedInPlane) {\n            this._basePoint.subtractToRef(trianglePlane.normal, this._planeIntersectionPoint);\n            this._velocity.scaleToRef(t0, this._tempVector);\n            this._planeIntersectionPoint.addInPlace(this._tempVector);\n            if (this._checkPointInTriangle(this._planeIntersectionPoint, p1, p2, p3, trianglePlane.normal)) {\n                found = true;\n                t = t0;\n                this._collisionPoint.copyFrom(this._planeIntersectionPoint);\n            }\n        }\n        if (!found) {\n            var a = this._velocitySquaredLength;\n            this._basePoint.subtractToRef(p1, this._tempVector);\n            var b = 2.0 * Vector3.Dot(this._velocity, this._tempVector);\n            var c = this._tempVector.lengthSquared() - 1.0;\n            var lowestRoot = getLowestRoot(a, b, c, t);\n            if (lowestRoot.found) {\n                t = lowestRoot.root;\n                found = true;\n                this._collisionPoint.copyFrom(p1);\n            }\n            this._basePoint.subtractToRef(p2, this._tempVector);\n            b = 2.0 * Vector3.Dot(this._velocity, this._tempVector);\n            c = this._tempVector.lengthSquared() - 1.0;\n            lowestRoot = getLowestRoot(a, b, c, t);\n            if (lowestRoot.found) {\n                t = lowestRoot.root;\n                found = true;\n                this._collisionPoint.copyFrom(p2);\n            }\n            this._basePoint.subtractToRef(p3, this._tempVector);\n            b = 2.0 * Vector3.Dot(this._velocity, this._tempVector);\n            c = this._tempVector.lengthSquared() - 1.0;\n            lowestRoot = getLowestRoot(a, b, c, t);\n            if (lowestRoot.found) {\n                t = lowestRoot.root;\n                found = true;\n                this._collisionPoint.copyFrom(p3);\n            }\n            p2.subtractToRef(p1, this._edge);\n            p1.subtractToRef(this._basePoint, this._baseToVertex);\n            var edgeSquaredLength = this._edge.lengthSquared();\n            var edgeDotVelocity = Vector3.Dot(this._edge, this._velocity);\n            var edgeDotBaseToVertex = Vector3.Dot(this._edge, this._baseToVertex);\n            a = edgeSquaredLength * -this._velocitySquaredLength + edgeDotVelocity * edgeDotVelocity;\n            b = 2 * (edgeSquaredLength * Vector3.Dot(this._velocity, this._baseToVertex) - edgeDotVelocity * edgeDotBaseToVertex);\n            c = edgeSquaredLength * (1.0 - this._baseToVertex.lengthSquared()) + edgeDotBaseToVertex * edgeDotBaseToVertex;\n            lowestRoot = getLowestRoot(a, b, c, t);\n            if (lowestRoot.found) {\n                var f = (edgeDotVelocity * lowestRoot.root - edgeDotBaseToVertex) / edgeSquaredLength;\n                if (f >= 0.0 && f <= 1.0) {\n                    t = lowestRoot.root;\n                    found = true;\n                    this._edge.scaleInPlace(f);\n                    p1.addToRef(this._edge, this._collisionPoint);\n                }\n            }\n            p3.subtractToRef(p2, this._edge);\n            p2.subtractToRef(this._basePoint, this._baseToVertex);\n            edgeSquaredLength = this._edge.lengthSquared();\n            edgeDotVelocity = Vector3.Dot(this._edge, this._velocity);\n            edgeDotBaseToVertex = Vector3.Dot(this._edge, this._baseToVertex);\n            a = edgeSquaredLength * -this._velocitySquaredLength + edgeDotVelocity * edgeDotVelocity;\n            b = 2 * (edgeSquaredLength * Vector3.Dot(this._velocity, this._baseToVertex) - edgeDotVelocity * edgeDotBaseToVertex);\n            c = edgeSquaredLength * (1.0 - this._baseToVertex.lengthSquared()) + edgeDotBaseToVertex * edgeDotBaseToVertex;\n            lowestRoot = getLowestRoot(a, b, c, t);\n            if (lowestRoot.found) {\n                var f = (edgeDotVelocity * lowestRoot.root - edgeDotBaseToVertex) / edgeSquaredLength;\n                if (f >= 0.0 && f <= 1.0) {\n                    t = lowestRoot.root;\n                    found = true;\n                    this._edge.scaleInPlace(f);\n                    p2.addToRef(this._edge, this._collisionPoint);\n                }\n            }\n            p1.subtractToRef(p3, this._edge);\n            p3.subtractToRef(this._basePoint, this._baseToVertex);\n            edgeSquaredLength = this._edge.lengthSquared();\n            edgeDotVelocity = Vector3.Dot(this._edge, this._velocity);\n            edgeDotBaseToVertex = Vector3.Dot(this._edge, this._baseToVertex);\n            a = edgeSquaredLength * -this._velocitySquaredLength + edgeDotVelocity * edgeDotVelocity;\n            b = 2 * (edgeSquaredLength * Vector3.Dot(this._velocity, this._baseToVertex) - edgeDotVelocity * edgeDotBaseToVertex);\n            c = edgeSquaredLength * (1.0 - this._baseToVertex.lengthSquared()) + edgeDotBaseToVertex * edgeDotBaseToVertex;\n            lowestRoot = getLowestRoot(a, b, c, t);\n            if (lowestRoot.found) {\n                var f = (edgeDotVelocity * lowestRoot.root - edgeDotBaseToVertex) / edgeSquaredLength;\n                if (f >= 0.0 && f <= 1.0) {\n                    t = lowestRoot.root;\n                    found = true;\n                    this._edge.scaleInPlace(f);\n                    p3.addToRef(this._edge, this._collisionPoint);\n                }\n            }\n        }\n        if (found) {\n            var distToCollisionSquared = t * t * this._velocitySquaredLength;\n            if (!this.collisionFound || distToCollisionSquared < this._nearestDistanceSquared) {\n                // if collisionResponse is false, collision is not found but the collidedMesh is set anyway.\n                // onCollide observable are triggered if collideMesh is set\n                // this allow trigger volumes to be created.\n                if (hostMesh.collisionResponse) {\n                    if (!this.intersectionPoint) {\n                        this.intersectionPoint = this._collisionPoint.clone();\n                    }\n                    else {\n                        this.intersectionPoint.copyFrom(this._collisionPoint);\n                    }\n                    this._nearestDistanceSquared = distToCollisionSquared;\n                    this._nearestDistance = Math.sqrt(distToCollisionSquared);\n                    this.collisionFound = true;\n                }\n                this.collidedMesh = hostMesh;\n            }\n        }\n    };\n    /**\n     * @param trianglePlaneArray\n     * @param pts\n     * @param indices\n     * @param indexStart\n     * @param indexEnd\n     * @param decal\n     * @param hasMaterial\n     * @param hostMesh\n     * @param invertTriangles\n     * @param triangleStrip\n     * @hidden\n     */\n    Collider.prototype._collide = function (trianglePlaneArray, pts, indices, indexStart, indexEnd, decal, hasMaterial, hostMesh, invertTriangles, triangleStrip) {\n        if (triangleStrip === void 0) { triangleStrip = false; }\n        if (triangleStrip) {\n            if (!indices || indices.length === 0) {\n                for (var i = 0; i < pts.length - 2; i += 1) {\n                    var p1 = pts[i];\n                    var p2 = pts[i + 1];\n                    var p3 = pts[i + 2];\n                    // stay defensive and don't check against undefined positions.\n                    if (!p1 || !p2 || !p3) {\n                        continue;\n                    }\n                    // Handles strip faces one on two is reversed\n                    if ((invertTriangles ? 1 : 0) ^ i % 2) {\n                        this._testTriangle(i, trianglePlaneArray, p1, p2, p3, hasMaterial, hostMesh);\n                    }\n                    else {\n                        this._testTriangle(i, trianglePlaneArray, p2, p1, p3, hasMaterial, hostMesh);\n                    }\n                }\n            }\n            else {\n                for (var i = indexStart; i < indexEnd - 2; i += 1) {\n                    var indexA = indices[i];\n                    var indexB = indices[i + 1];\n                    var indexC = indices[i + 2];\n                    if (indexC === 0xffffffff) {\n                        i += 2;\n                        continue;\n                    }\n                    var p1 = pts[indexA];\n                    var p2 = pts[indexB];\n                    var p3 = pts[indexC];\n                    // stay defensive and don't check against undefined positions.\n                    if (!p1 || !p2 || !p3) {\n                        continue;\n                    }\n                    // Handles strip faces one on two is reversed\n                    if ((invertTriangles ? 1 : 0) ^ i % 2) {\n                        this._testTriangle(i, trianglePlaneArray, p1, p2, p3, hasMaterial, hostMesh);\n                    }\n                    else {\n                        this._testTriangle(i, trianglePlaneArray, p2, p1, p3, hasMaterial, hostMesh);\n                    }\n                }\n            }\n        }\n        else if (!indices || indices.length === 0) {\n            for (var i = 0; i < pts.length; i += 3) {\n                var p1 = pts[i];\n                var p2 = pts[i + 1];\n                var p3 = pts[i + 2];\n                if (invertTriangles) {\n                    this._testTriangle(i, trianglePlaneArray, p1, p2, p3, hasMaterial, hostMesh);\n                }\n                else {\n                    this._testTriangle(i, trianglePlaneArray, p3, p2, p1, hasMaterial, hostMesh);\n                }\n            }\n        }\n        else {\n            for (var i = indexStart; i < indexEnd; i += 3) {\n                var p1 = pts[indices[i] - decal];\n                var p2 = pts[indices[i + 1] - decal];\n                var p3 = pts[indices[i + 2] - decal];\n                if (invertTriangles) {\n                    this._testTriangle(i, trianglePlaneArray, p1, p2, p3, hasMaterial, hostMesh);\n                }\n                else {\n                    this._testTriangle(i, trianglePlaneArray, p3, p2, p1, hasMaterial, hostMesh);\n                }\n            }\n        }\n    };\n    /**\n     * @param pos\n     * @param vel\n     * @hidden\n     */\n    Collider.prototype._getResponse = function (pos, vel) {\n        pos.addToRef(vel, this._destinationPoint);\n        vel.scaleInPlace(this._nearestDistance / vel.length());\n        this._basePoint.addToRef(vel, pos);\n        pos.subtractToRef(this.intersectionPoint, this._slidePlaneNormal);\n        this._slidePlaneNormal.normalize();\n        this._slidePlaneNormal.scaleToRef(this._epsilon, this._displacementVector);\n        pos.addInPlace(this._displacementVector);\n        this.intersectionPoint.addInPlace(this._displacementVector);\n        this._slidePlaneNormal.scaleInPlace(Plane.SignedDistanceToPlaneFromPositionAndNormal(this.intersectionPoint, this._slidePlaneNormal, this._destinationPoint));\n        this._destinationPoint.subtractInPlace(this._slidePlaneNormal);\n        this._destinationPoint.subtractToRef(this.intersectionPoint, vel);\n    };\n    /**\n     * If true, it check for double sided faces and only returns 1 collision instead of 2\n     */\n    Collider.DoubleSidedCheck = false;\n    return Collider;\n}());\nexport { Collider };\n//# sourceMappingURL=collider.js.map","import { Scene } from \"../scene.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { Collider } from \"./collider.js\";\n/** @hidden */\nvar DefaultCollisionCoordinator = /** @class */ (function () {\n    function DefaultCollisionCoordinator() {\n        this._scaledPosition = Vector3.Zero();\n        this._scaledVelocity = Vector3.Zero();\n        this._finalPosition = Vector3.Zero();\n    }\n    DefaultCollisionCoordinator.prototype.getNewPosition = function (position, displacement, collider, maximumRetry, excludedMesh, onNewPosition, collisionIndex) {\n        position.divideToRef(collider._radius, this._scaledPosition);\n        displacement.divideToRef(collider._radius, this._scaledVelocity);\n        collider.collidedMesh = null;\n        collider._retry = 0;\n        collider._initialVelocity = this._scaledVelocity;\n        collider._initialPosition = this._scaledPosition;\n        this._collideWithWorld(this._scaledPosition, this._scaledVelocity, collider, maximumRetry, this._finalPosition, excludedMesh);\n        this._finalPosition.multiplyInPlace(collider._radius);\n        //run the callback\n        onNewPosition(collisionIndex, this._finalPosition, collider.collidedMesh);\n    };\n    DefaultCollisionCoordinator.prototype.createCollider = function () {\n        return new Collider();\n    };\n    DefaultCollisionCoordinator.prototype.init = function (scene) {\n        this._scene = scene;\n    };\n    DefaultCollisionCoordinator.prototype._collideWithWorld = function (position, velocity, collider, maximumRetry, finalPosition, excludedMesh) {\n        if (excludedMesh === void 0) { excludedMesh = null; }\n        var closeDistance = Engine.CollisionsEpsilon * 10.0;\n        if (collider._retry >= maximumRetry) {\n            finalPosition.copyFrom(position);\n            return;\n        }\n        // Check if this is a mesh else camera or -1\n        var collisionMask = excludedMesh ? excludedMesh.collisionMask : collider.collisionMask;\n        collider._initialize(position, velocity, closeDistance);\n        // Check if collision detection should happen against specified list of meshes or,\n        // if not specified, against all meshes in the scene\n        var meshes = (excludedMesh && excludedMesh.surroundingMeshes) || this._scene.meshes;\n        for (var index = 0; index < meshes.length; index++) {\n            var mesh = meshes[index];\n            if (mesh.isEnabled() && mesh.checkCollisions && mesh.subMeshes && mesh !== excludedMesh && (collisionMask & mesh.collisionGroup) !== 0) {\n                mesh._checkCollision(collider);\n            }\n        }\n        if (!collider.collisionFound) {\n            position.addToRef(velocity, finalPosition);\n            return;\n        }\n        if (velocity.x !== 0 || velocity.y !== 0 || velocity.z !== 0) {\n            collider._getResponse(position, velocity);\n        }\n        if (velocity.length() <= closeDistance) {\n            finalPosition.copyFrom(position);\n            return;\n        }\n        collider._retry++;\n        this._collideWithWorld(position, velocity, collider, maximumRetry, finalPosition, excludedMesh);\n    };\n    return DefaultCollisionCoordinator;\n}());\nexport { DefaultCollisionCoordinator };\nScene.CollisionCoordinatorFactory = function () {\n    return new DefaultCollisionCoordinator();\n};\n//# sourceMappingURL=collisionCoordinator.js.map","/**\n * @hidden\n */\nvar IntersectionInfo = /** @class */ (function () {\n    function IntersectionInfo(bu, bv, distance) {\n        this.bu = bu;\n        this.bv = bv;\n        this.distance = distance;\n        this.faceId = 0;\n        this.subMeshId = 0;\n    }\n    return IntersectionInfo;\n}());\nexport { IntersectionInfo };\n//# sourceMappingURL=intersectionInfo.js.map","import { Vector3 } from \"../Maths/math.vector.js\";\n/**\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nvar _MeshCollisionData = /** @class */ (function () {\n    function _MeshCollisionData() {\n        this._checkCollisions = false;\n        this._collisionMask = -1;\n        this._collisionGroup = -1;\n        this._surroundingMeshes = null;\n        this._collider = null;\n        this._oldPositionForCollisions = new Vector3(0, 0, 0);\n        this._diffPositionForCollisions = new Vector3(0, 0, 0);\n        this._collisionResponse = true;\n    }\n    return _MeshCollisionData;\n}());\nexport { _MeshCollisionData };\n//# sourceMappingURL=meshCollisionData.js.map","import { Vector3, Vector2, TmpVectors } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\n/**\n * Information about the result of picking within a scene\n * @see https://doc.babylonjs.com/divingDeeper/mesh/interactions/picking_collisions\n */\nvar PickingInfo = /** @class */ (function () {\n    function PickingInfo() {\n        /** @hidden */\n        this._pickingUnavailable = false;\n        /**\n         * If the pick collided with an object\n         */\n        this.hit = false;\n        /**\n         * Distance away where the pick collided\n         */\n        this.distance = 0;\n        /**\n         * The location of pick collision\n         */\n        this.pickedPoint = null;\n        /**\n         * The mesh corresponding the the pick collision\n         */\n        this.pickedMesh = null;\n        /** (See getTextureCoordinates) The barycentric U coordinate that is used when calculating the texture coordinates of the collision.*/\n        this.bu = 0;\n        /** (See getTextureCoordinates) The barycentric V coordinate that is used when calculating the texture coordinates of the collision.*/\n        this.bv = 0;\n        /** The index of the face on the mesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\n        this.faceId = -1;\n        /** The index of the face on the subMesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\n        this.subMeshFaceId = -1;\n        /** Id of the the submesh that was picked */\n        this.subMeshId = 0;\n        /** If a sprite was picked, this will be the sprite the pick collided with */\n        this.pickedSprite = null;\n        /** If we are picking a mesh with thin instance, this will give you the picked thin instance */\n        this.thinInstanceIndex = -1;\n        /**\n         * The ray that was used to perform the picking.\n         */\n        this.ray = null;\n        /**\n         * If a mesh was used to do the picking (eg. 6dof controller) as a \"near interaction\", this will be populated.\n         */\n        this.originMesh = null;\n        /**\n         * The aim-space transform of the input used for picking, if it is an XR input source.\n         */\n        this.aimTransform = null;\n        /**\n         * The grip-space transform of the input used for picking, if it is an XR input source.\n         * Some XR sources, such as input coming from head mounted displays, do not have this.\n         */\n        this.gripTransform = null;\n    }\n    /**\n     * Gets the normal corresponding to the face the pick collided with\n     * @param useWorldCoordinates If the resulting normal should be relative to the world (default: false)\n     * @param useVerticesNormals If the vertices normals should be used to calculate the normal instead of the normal map\n     * @returns The normal corresponding to the face the pick collided with\n     */\n    PickingInfo.prototype.getNormal = function (useWorldCoordinates, useVerticesNormals) {\n        if (useWorldCoordinates === void 0) { useWorldCoordinates = false; }\n        if (useVerticesNormals === void 0) { useVerticesNormals = true; }\n        if (!this.pickedMesh || !this.pickedMesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n            return null;\n        }\n        var indices = this.pickedMesh.getIndices();\n        if (!indices) {\n            return null;\n        }\n        var result;\n        if (useVerticesNormals) {\n            var normals = this.pickedMesh.getVerticesData(VertexBuffer.NormalKind);\n            var normal0 = Vector3.FromArray(normals, indices[this.faceId * 3] * 3);\n            var normal1 = Vector3.FromArray(normals, indices[this.faceId * 3 + 1] * 3);\n            var normal2 = Vector3.FromArray(normals, indices[this.faceId * 3 + 2] * 3);\n            normal0 = normal0.scale(this.bu);\n            normal1 = normal1.scale(this.bv);\n            normal2 = normal2.scale(1.0 - this.bu - this.bv);\n            result = new Vector3(normal0.x + normal1.x + normal2.x, normal0.y + normal1.y + normal2.y, normal0.z + normal1.z + normal2.z);\n        }\n        else {\n            var positions = this.pickedMesh.getVerticesData(VertexBuffer.PositionKind);\n            var vertex1 = Vector3.FromArray(positions, indices[this.faceId * 3] * 3);\n            var vertex2 = Vector3.FromArray(positions, indices[this.faceId * 3 + 1] * 3);\n            var vertex3 = Vector3.FromArray(positions, indices[this.faceId * 3 + 2] * 3);\n            var p1p2 = vertex1.subtract(vertex2);\n            var p3p2 = vertex3.subtract(vertex2);\n            result = Vector3.Cross(p1p2, p3p2);\n        }\n        if (useWorldCoordinates) {\n            var wm = this.pickedMesh.getWorldMatrix();\n            if (this.pickedMesh.nonUniformScaling) {\n                TmpVectors.Matrix[0].copyFrom(wm);\n                wm = TmpVectors.Matrix[0];\n                wm.setTranslationFromFloats(0, 0, 0);\n                wm.invert();\n                wm.transposeToRef(TmpVectors.Matrix[1]);\n                wm = TmpVectors.Matrix[1];\n            }\n            result = Vector3.TransformNormal(result, wm);\n        }\n        result.normalize();\n        return result;\n    };\n    /**\n     * Gets the texture coordinates of where the pick occurred\n     * @returns the vector containing the coordinates of the texture\n     */\n    PickingInfo.prototype.getTextureCoordinates = function () {\n        if (!this.pickedMesh || !this.pickedMesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\n            return null;\n        }\n        var indices = this.pickedMesh.getIndices();\n        if (!indices) {\n            return null;\n        }\n        var uvs = this.pickedMesh.getVerticesData(VertexBuffer.UVKind);\n        if (!uvs) {\n            return null;\n        }\n        var uv0 = Vector2.FromArray(uvs, indices[this.faceId * 3] * 2);\n        var uv1 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 1] * 2);\n        var uv2 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 2] * 2);\n        uv0 = uv0.scale(this.bu);\n        uv1 = uv1.scale(this.bv);\n        uv2 = uv2.scale(1.0 - this.bu - this.bv);\n        return new Vector2(uv0.x + uv1.x + uv2.x, uv0.y + uv1.y + uv2.y);\n    };\n    return PickingInfo;\n}());\nexport { PickingInfo };\n//# sourceMappingURL=pickingInfo.js.map","/**\n * Options used to control default behaviors regarding compatibility support\n */\nvar CompatibilityOptions = /** @class */ (function () {\n    function CompatibilityOptions() {\n    }\n    /**\n     * Defines if the system should use OpenGL convention for UVs when creating geometry or loading .babylon files (false by default)\n     */\n    CompatibilityOptions.UseOpenGLOrientationForUV = false;\n    return CompatibilityOptions;\n}());\nexport { CompatibilityOptions };\n//# sourceMappingURL=compatibilityOptions.js.map","import { Logger } from \"../Misc/logger.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { GetDOMTextContent, IsWindowObjectExist } from \"../Misc/domManagement.js\";\nimport { ShaderProcessor } from \"../Engines/Processors/shaderProcessor.js\";\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nimport { ShaderLanguage } from \"../Materials/shaderLanguage.js\";\n/**\n * Effect wrapping a compute shader and let execute (dispatch) the shader\n */\nvar ComputeEffect = /** @class */ (function () {\n    /**\n     * Creates a compute effect that can be used to execute a compute shader\n     * @param baseName Name of the effect\n     * @param options Set of all options to create the effect\n     * @param engine The engine the effect is created for\n     * @param key Effect Key identifying uniquely compiled shader variants\n     */\n    function ComputeEffect(baseName, options, engine, key) {\n        if (key === void 0) { key = \"\"; }\n        var _this = this;\n        var _a, _b;\n        /**\n         * Name of the effect.\n         */\n        this.name = null;\n        /**\n         * String container all the define statements that should be set on the shader.\n         */\n        this.defines = \"\";\n        /**\n         * Callback that will be called when the shader is compiled.\n         */\n        this.onCompiled = null;\n        /**\n         * Callback that will be called if an error occurs during shader compilation.\n         */\n        this.onError = null;\n        /**\n         * Unique ID of the effect.\n         */\n        this.uniqueId = 0;\n        /**\n         * Observable that will be called when the shader is compiled.\n         * It is recommended to use executeWhenCompile() or to make sure that scene.isReady() is called to get this observable raised.\n         */\n        this.onCompileObservable = new Observable();\n        /**\n         * Observable that will be called if an error occurs during shader compilation.\n         */\n        this.onErrorObservable = new Observable();\n        /**\n         * Observable that will be called when effect is bound.\n         */\n        this.onBindObservable = new Observable();\n        /**\n         * @hidden\n         * Specifies if the effect was previously ready\n         */\n        this._wasPreviouslyReady = false;\n        this._isReady = false;\n        this._compilationError = \"\";\n        /** @hidden */\n        this._key = \"\";\n        this._computeSourceCodeOverride = \"\";\n        /** @hidden */\n        this._pipelineContext = null;\n        /** @hidden */\n        this._computeSourceCode = \"\";\n        this._rawComputeSourceCode = \"\";\n        this._shaderLanguage = ShaderLanguage.WGSL;\n        this.name = baseName;\n        this._key = key;\n        this._engine = engine;\n        this.uniqueId = ComputeEffect._UniqueIdSeed++;\n        this.defines = (_a = options.defines) !== null && _a !== void 0 ? _a : \"\";\n        this.onError = options.onError;\n        this.onCompiled = options.onCompiled;\n        this._entryPoint = (_b = options.entryPoint) !== null && _b !== void 0 ? _b : \"main\";\n        this._shaderStore = ShaderStore.GetShadersStore(this._shaderLanguage);\n        this._shaderRepository = ShaderStore.GetShadersRepository(this._shaderLanguage);\n        this._includeShaderStore = ShaderStore.GetIncludesShadersStore(this._shaderLanguage);\n        var computeSource;\n        var hostDocument = IsWindowObjectExist() ? this._engine.getHostDocument() : null;\n        if (baseName.computeSource) {\n            computeSource = \"source:\" + baseName.computeSource;\n        }\n        else if (baseName.computeElement) {\n            computeSource = hostDocument ? hostDocument.getElementById(baseName.computeElement) : null;\n            if (!computeSource) {\n                computeSource = baseName.computeElement;\n            }\n        }\n        else {\n            computeSource = baseName.compute || baseName;\n        }\n        var processorOptions = {\n            defines: this.defines.split(\"\\n\"),\n            indexParameters: undefined,\n            isFragment: false,\n            shouldUseHighPrecisionShader: false,\n            processor: null,\n            supportsUniformBuffers: this._engine.supportsUniformBuffers,\n            shadersRepository: this._shaderRepository,\n            includesShadersStore: this._includeShaderStore,\n            version: (this._engine.version * 100).toString(),\n            platformName: this._engine.shaderPlatformName,\n            processingContext: null,\n            isNDCHalfZRange: this._engine.isNDCHalfZRange,\n            useReverseDepthBuffer: this._engine.useReverseDepthBuffer,\n        };\n        this._loadShader(computeSource, \"Compute\", \"\", function (computeCode) {\n            ShaderProcessor.Initialize(processorOptions);\n            ShaderProcessor.PreProcess(computeCode, processorOptions, function (migratedCommputeCode) {\n                _this._rawComputeSourceCode = computeCode;\n                if (options.processFinalCode) {\n                    migratedCommputeCode = options.processFinalCode(migratedCommputeCode);\n                }\n                var finalShaders = ShaderProcessor.Finalize(migratedCommputeCode, \"\", processorOptions);\n                _this._useFinalCode(finalShaders.vertexCode, baseName);\n            }, _this._engine);\n        });\n    }\n    ComputeEffect.prototype._useFinalCode = function (migratedCommputeCode, baseName) {\n        if (baseName) {\n            var compute = baseName.computeElement || baseName.compute || baseName.spectorName || baseName;\n            this._computeSourceCode = \"//#define SHADER_NAME compute:\" + compute + \"\\n\" + migratedCommputeCode;\n        }\n        else {\n            this._computeSourceCode = migratedCommputeCode;\n        }\n        this._prepareEffect();\n    };\n    Object.defineProperty(ComputeEffect.prototype, \"key\", {\n        /**\n         * Unique key for this effect\n         */\n        get: function () {\n            return this._key;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * If the effect has been compiled and prepared.\n     * @returns if the effect is compiled and prepared.\n     */\n    ComputeEffect.prototype.isReady = function () {\n        try {\n            return this._isReadyInternal();\n        }\n        catch (_a) {\n            return false;\n        }\n    };\n    ComputeEffect.prototype._isReadyInternal = function () {\n        if (this._isReady) {\n            return true;\n        }\n        if (this._pipelineContext) {\n            return this._pipelineContext.isReady;\n        }\n        return false;\n    };\n    /**\n     * The engine the effect was initialized with.\n     * @returns the engine.\n     */\n    ComputeEffect.prototype.getEngine = function () {\n        return this._engine;\n    };\n    /**\n     * The pipeline context for this effect\n     * @returns the associated pipeline context\n     */\n    ComputeEffect.prototype.getPipelineContext = function () {\n        return this._pipelineContext;\n    };\n    /**\n     * The error from the last compilation.\n     * @returns the error string.\n     */\n    ComputeEffect.prototype.getCompilationError = function () {\n        return this._compilationError;\n    };\n    /**\n     * Adds a callback to the onCompiled observable and call the callback immediately if already ready.\n     * @param func The callback to be used.\n     */\n    ComputeEffect.prototype.executeWhenCompiled = function (func) {\n        var _this = this;\n        if (this.isReady()) {\n            func(this);\n            return;\n        }\n        this.onCompileObservable.add(function (effect) {\n            func(effect);\n        });\n        if (!this._pipelineContext || this._pipelineContext.isAsync) {\n            setTimeout(function () {\n                _this._checkIsReady(null);\n            }, 16);\n        }\n    };\n    ComputeEffect.prototype._checkIsReady = function (previousPipelineContext) {\n        var _this = this;\n        try {\n            if (this._isReadyInternal()) {\n                return;\n            }\n        }\n        catch (e) {\n            this._processCompilationErrors(e, previousPipelineContext);\n            return;\n        }\n        setTimeout(function () {\n            _this._checkIsReady(previousPipelineContext);\n        }, 16);\n    };\n    ComputeEffect.prototype._loadShader = function (shader, key, optionalKey, callback) {\n        if (typeof HTMLElement !== \"undefined\") {\n            // DOM element ?\n            if (shader instanceof HTMLElement) {\n                var shaderCode = GetDOMTextContent(shader);\n                callback(shaderCode);\n                return;\n            }\n        }\n        // Direct source ?\n        if (shader.substr(0, 7) === \"source:\") {\n            callback(shader.substr(7));\n            return;\n        }\n        // Base64 encoded ?\n        if (shader.substr(0, 7) === \"base64:\") {\n            var shaderBinary = window.atob(shader.substr(7));\n            callback(shaderBinary);\n            return;\n        }\n        // Is in local store ?\n        if (this._shaderStore[shader + key + \"Shader\"]) {\n            callback(this._shaderStore[shader + key + \"Shader\"]);\n            return;\n        }\n        if (optionalKey && this._shaderStore[shader + optionalKey + \"Shader\"]) {\n            callback(this._shaderStore[shader + optionalKey + \"Shader\"]);\n            return;\n        }\n        var shaderUrl;\n        if (shader[0] === \".\" || shader[0] === \"/\" || shader.indexOf(\"http\") > -1) {\n            shaderUrl = shader;\n        }\n        else {\n            shaderUrl = this._shaderRepository + shader;\n        }\n        this._engine._loadFile(shaderUrl + \".\" + key.toLowerCase() + \".fx\", callback);\n    };\n    Object.defineProperty(ComputeEffect.prototype, \"computeSourceCode\", {\n        /**\n         * Gets the compute shader source code of this effect\n         */\n        get: function () {\n            var _a, _b;\n            return this._computeSourceCodeOverride ? this._computeSourceCodeOverride : (_b = (_a = this._pipelineContext) === null || _a === void 0 ? void 0 : _a._getComputeShaderCode()) !== null && _b !== void 0 ? _b : this._computeSourceCode;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ComputeEffect.prototype, \"rawComputeSourceCode\", {\n        /**\n         * Gets the compute shader source code before it has been processed by the preprocessor\n         */\n        get: function () {\n            return this._rawComputeSourceCode;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Prepares the effect\n     * @hidden\n     */\n    ComputeEffect.prototype._prepareEffect = function () {\n        var _this = this;\n        var defines = this.defines;\n        var previousPipelineContext = this._pipelineContext;\n        this._isReady = false;\n        try {\n            var engine = this._engine;\n            this._pipelineContext = engine.createComputePipelineContext();\n            this._pipelineContext._name = this._key;\n            engine._prepareComputePipelineContext(this._pipelineContext, this._computeSourceCodeOverride ? this._computeSourceCodeOverride : this._computeSourceCode, this._rawComputeSourceCode, this._computeSourceCodeOverride ? null : defines, this._entryPoint);\n            engine._executeWhenComputeStateIsCompiled(this._pipelineContext, function () {\n                _this._compilationError = \"\";\n                _this._isReady = true;\n                if (_this.onCompiled) {\n                    _this.onCompiled(_this);\n                }\n                _this.onCompileObservable.notifyObservers(_this);\n                _this.onCompileObservable.clear();\n                if (previousPipelineContext) {\n                    _this.getEngine()._deleteComputePipelineContext(previousPipelineContext);\n                }\n            });\n            if (this._pipelineContext.isAsync) {\n                this._checkIsReady(previousPipelineContext);\n            }\n        }\n        catch (e) {\n            this._processCompilationErrors(e, previousPipelineContext);\n        }\n    };\n    ComputeEffect.prototype._getShaderCodeAndErrorLine = function (code, error) {\n        var regexp = /COMPUTE SHADER ERROR: 0:(\\d+?):/;\n        var errorLine = null;\n        if (error && code) {\n            var res = error.match(regexp);\n            if (res && res.length === 2) {\n                var lineNumber = parseInt(res[1]);\n                var lines = code.split(\"\\n\", -1);\n                if (lines.length >= lineNumber) {\n                    errorLine = \"Offending line [\".concat(lineNumber, \"] in compute code: \").concat(lines[lineNumber - 1]);\n                }\n            }\n        }\n        return [code, errorLine];\n    };\n    ComputeEffect.prototype._processCompilationErrors = function (e, previousPipelineContext) {\n        var _a;\n        var _b;\n        if (previousPipelineContext === void 0) { previousPipelineContext = null; }\n        this._compilationError = e.message;\n        // Let's go through fallbacks then\n        Logger.Error(\"Unable to compile compute effect:\");\n        Logger.Error(\"Defines:\\r\\n\" + this.defines);\n        if (ComputeEffect.LogShaderCodeOnCompilationError) {\n            var lineErrorVertex = null, code = null;\n            if ((_b = this._pipelineContext) === null || _b === void 0 ? void 0 : _b._getComputeShaderCode()) {\n                _a = this._getShaderCodeAndErrorLine(this._pipelineContext._getComputeShaderCode(), this._compilationError), code = _a[0], lineErrorVertex = _a[1];\n                if (code) {\n                    Logger.Error(\"Compute code:\");\n                    Logger.Error(code);\n                }\n            }\n            if (lineErrorVertex) {\n                Logger.Error(lineErrorVertex);\n            }\n        }\n        Logger.Error(\"Error: \" + this._compilationError);\n        if (previousPipelineContext) {\n            this._pipelineContext = previousPipelineContext;\n            this._isReady = true;\n            if (this.onError) {\n                this.onError(this, this._compilationError);\n            }\n            this.onErrorObservable.notifyObservers(this);\n        }\n    };\n    /**\n     * Release all associated resources.\n     **/\n    ComputeEffect.prototype.dispose = function () {\n        if (this._pipelineContext) {\n            this._pipelineContext.dispose();\n        }\n        this._engine._releaseComputeEffect(this);\n    };\n    /**\n     * This function will add a new compute shader to the shader store\n     * @param name the name of the shader\n     * @param computeShader compute shader content\n     */\n    ComputeEffect.RegisterShader = function (name, computeShader) {\n        ShaderStore.GetShadersStore(ShaderLanguage.WGSL)[\"\".concat(name, \"ComputeShader\")] = computeShader;\n    };\n    ComputeEffect._UniqueIdSeed = 0;\n    /**\n     * Enable logging of the shader code when a compilation error occurs\n     */\n    ComputeEffect.LogShaderCodeOnCompilationError = true;\n    return ComputeEffect;\n}());\nexport { ComputeEffect };\n//# sourceMappingURL=computeEffect.js.map","import { __assign, __decorate } from \"tslib\";\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { ComputeBindingType } from \"../Engines/Extensions/engine.computeShader.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { UniqueIdGenerator } from \"../Misc/uniqueIdGenerator.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { TextureSampler } from \"../Materials/Textures/textureSampler.js\";\n/**\n * The ComputeShader object lets you execute a compute shader on your GPU (if supported by the engine)\n */\nvar ComputeShader = /** @class */ (function () {\n    /**\n     * Instantiates a new compute shader.\n     * @param name Defines the name of the compute shader in the scene\n     * @param engine Defines the engine the compute shader belongs to\n     * @param shaderPath Defines  the route to the shader code in one of three ways:\n     *  * object: { compute: \"custom\" }, used with ShaderStore.ShadersStoreWGSL[\"customComputeShader\"]\n     *  * object: { computeElement: \"HTMLElementId\" }, used with shader code in script tags\n     *  * object: { computeSource: \"compute shader code string\" using with string containing the shader code\n     *  * string: try first to find the code in ShaderStore.ShadersStoreWGSL[shaderPath + \"ComputeShader\"]. If not, assumes it is a file with name shaderPath.compute.fx in index.html folder.\n     * @param options Define the options used to create the shader\n     */\n    function ComputeShader(name, engine, shaderPath, options) {\n        if (options === void 0) { options = {}; }\n        this._bindings = {};\n        this._samplers = {};\n        this._contextIsDirty = false;\n        /**\n         * Callback triggered when the shader is compiled\n         */\n        this.onCompiled = null;\n        /**\n         * Callback triggered when an error occurs\n         */\n        this.onError = null;\n        this.name = name;\n        this._engine = engine;\n        this.uniqueId = UniqueIdGenerator.UniqueId;\n        if (!this._engine.getCaps().supportComputeShaders) {\n            Logger.Error(\"This engine does not support compute shaders!\");\n            return;\n        }\n        if (!options.bindingsMapping) {\n            Logger.Error(\"You must provide the binding mappings as browsers don't support reflection for wgsl shaders yet!\");\n            return;\n        }\n        this._context = engine.createComputeContext();\n        this._shaderPath = shaderPath;\n        this._options = __assign({ bindingsMapping: {}, defines: [] }, options);\n    }\n    Object.defineProperty(ComputeShader.prototype, \"options\", {\n        /**\n         * The options used to create the shader\n         */\n        get: function () {\n            return this._options;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ComputeShader.prototype, \"shaderPath\", {\n        /**\n         * The shaderPath used to create the shader\n         */\n        get: function () {\n            return this._shaderPath;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the current class name of the material e.g. \"ComputeShader\"\n     * Mainly use in serialization.\n     * @returns the class name\n     */\n    ComputeShader.prototype.getClassName = function () {\n        return \"ComputeShader\";\n    };\n    /**\n     * Binds a texture to the shader\n     * @param name Binding name of the texture\n     * @param texture Texture to bind\n     * @param bindSampler Bind the sampler corresponding to the texture (default: true). The sampler will be bound just before the binding index of the texture\n     */\n    ComputeShader.prototype.setTexture = function (name, texture, bindSampler) {\n        if (bindSampler === void 0) { bindSampler = true; }\n        var current = this._bindings[name];\n        this._bindings[name] = {\n            type: bindSampler ? ComputeBindingType.Texture : ComputeBindingType.TextureWithoutSampler,\n            object: texture,\n            indexInGroupEntries: current === null || current === void 0 ? void 0 : current.indexInGroupEntries,\n        };\n        this._contextIsDirty || (this._contextIsDirty = !current || current.object !== texture || current.type !== this._bindings[name].type);\n    };\n    /**\n     * Binds a storage texture to the shader\n     * @param name Binding name of the texture\n     * @param texture Texture to bind\n     */\n    ComputeShader.prototype.setStorageTexture = function (name, texture) {\n        var current = this._bindings[name];\n        this._contextIsDirty || (this._contextIsDirty = !current || current.object !== texture);\n        this._bindings[name] = {\n            type: ComputeBindingType.StorageTexture,\n            object: texture,\n            indexInGroupEntries: current === null || current === void 0 ? void 0 : current.indexInGroupEntries,\n        };\n    };\n    /**\n     * Binds a uniform buffer to the shader\n     * @param name Binding name of the buffer\n     * @param buffer Buffer to bind\n     */\n    ComputeShader.prototype.setUniformBuffer = function (name, buffer) {\n        var current = this._bindings[name];\n        this._contextIsDirty || (this._contextIsDirty = !current || current.object !== buffer);\n        this._bindings[name] = {\n            type: ComputeBindingType.UniformBuffer,\n            object: buffer,\n            indexInGroupEntries: current === null || current === void 0 ? void 0 : current.indexInGroupEntries,\n        };\n    };\n    /**\n     * Binds a storage buffer to the shader\n     * @param name Binding name of the buffer\n     * @param buffer Buffer to bind\n     */\n    ComputeShader.prototype.setStorageBuffer = function (name, buffer) {\n        var current = this._bindings[name];\n        this._contextIsDirty || (this._contextIsDirty = !current || current.object !== buffer);\n        this._bindings[name] = {\n            type: ComputeBindingType.StorageBuffer,\n            object: buffer,\n            indexInGroupEntries: current === null || current === void 0 ? void 0 : current.indexInGroupEntries,\n        };\n    };\n    /**\n     * Binds a texture sampler to the shader\n     * @param name Binding name of the sampler\n     * @param sampler Sampler to bind\n     */\n    ComputeShader.prototype.setTextureSampler = function (name, sampler) {\n        var current = this._bindings[name];\n        this._contextIsDirty || (this._contextIsDirty = !current || !sampler.compareSampler(current.object));\n        this._bindings[name] = {\n            type: ComputeBindingType.Sampler,\n            object: sampler,\n            indexInGroupEntries: current === null || current === void 0 ? void 0 : current.indexInGroupEntries,\n        };\n    };\n    /**\n     * Specifies that the compute shader is ready to be executed (the compute effect and all the resources are ready)\n     * @returns true if the compute shader is ready to be executed\n     */\n    ComputeShader.prototype.isReady = function () {\n        var effect = this._effect;\n        for (var key in this._bindings) {\n            var binding = this._bindings[key], type = binding.type, object = binding.object;\n            switch (type) {\n                case ComputeBindingType.Texture:\n                case ComputeBindingType.TextureWithoutSampler:\n                case ComputeBindingType.StorageTexture: {\n                    var texture = object;\n                    if (!texture.isReady()) {\n                        return false;\n                    }\n                    break;\n                }\n            }\n        }\n        var defines = [];\n        var shaderName = this._shaderPath;\n        if (this._options.defines) {\n            for (var index = 0; index < this._options.defines.length; index++) {\n                defines.push(this._options.defines[index]);\n            }\n        }\n        var join = defines.join(\"\\n\");\n        if (this._cachedDefines !== join) {\n            this._cachedDefines = join;\n            effect = this._engine.createComputeEffect(shaderName, {\n                defines: join,\n                entryPoint: this._options.entryPoint,\n                onCompiled: this.onCompiled,\n                onError: this.onError,\n            });\n            this._effect = effect;\n        }\n        if (!effect.isReady()) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Dispatches (executes) the compute shader\n     * @param x Number of workgroups to execute on the X dimension\n     * @param y Number of workgroups to execute on the Y dimension (default: 1)\n     * @param z Number of workgroups to execute on the Z dimension (default: 1)\n     * @returns True if the dispatch could be done, else false (meaning either the compute effect or at least one of the bound resources was not ready)\n     */\n    ComputeShader.prototype.dispatch = function (x, y, z) {\n        var _a;\n        if (!this.isReady()) {\n            return false;\n        }\n        // If the sampling parameters of a texture bound to the shader have changed, we must clear the compute context so that it is recreated with the updated values\n        for (var key in this._bindings) {\n            var binding = this._bindings[key];\n            // TODO: remove this when browsers support reflection for wgsl shaders\n            if (!this._options.bindingsMapping[key]) {\n                throw new Error(\"ComputeShader ('\" + this.name + \"'): No binding mapping has been provided for the property '\" + key + \"'\");\n            }\n            if (binding.type !== ComputeBindingType.Texture) {\n                continue;\n            }\n            var sampler = this._samplers[key];\n            var texture = binding.object;\n            if (!sampler || !texture._texture || !sampler.compareSampler(texture._texture)) {\n                this._samplers[key] = new TextureSampler().setParameters(texture.wrapU, texture.wrapV, texture.wrapR, texture.anisotropicFilteringLevel, texture._texture.samplingMode, (_a = texture._texture) === null || _a === void 0 ? void 0 : _a._comparisonFunction);\n                this._contextIsDirty = true;\n            }\n        }\n        if (this._contextIsDirty) {\n            this._contextIsDirty = false;\n            this._context.clear();\n        }\n        this._engine.computeDispatch(this._effect, this._context, this._bindings, x, y, z, this._options.bindingsMapping);\n        return true;\n    };\n    /**\n     * Waits for the compute shader to be ready and executes it\n     * @param x Number of workgroups to execute on the X dimension\n     * @param y Number of workgroups to execute on the Y dimension (default: 1)\n     * @param z Number of workgroups to execute on the Z dimension (default: 1)\n     * @param delay Delay between the retries while the shader is not ready (in milliseconds - 10 by default)\n     * @returns A promise that is resolved once the shader has been sent to the GPU. Note that it does not mean that the shader execution itself is finished!\n     */\n    ComputeShader.prototype.dispatchWhenReady = function (x, y, z, delay) {\n        var _this = this;\n        if (delay === void 0) { delay = 10; }\n        return new Promise(function (resolve) {\n            var check = function () {\n                if (!_this.dispatch(x, y, z)) {\n                    setTimeout(check, delay);\n                }\n                else {\n                    resolve();\n                }\n            };\n            check();\n        });\n    };\n    /**\n     * Serializes this compute shader in a JSON representation\n     * @returns the serialized compute shader object\n     */\n    ComputeShader.prototype.serialize = function () {\n        var serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.options = this._options;\n        serializationObject.shaderPath = this._shaderPath;\n        serializationObject.bindings = {};\n        serializationObject.textures = {};\n        for (var key in this._bindings) {\n            var binding = this._bindings[key];\n            var object = binding.object;\n            switch (binding.type) {\n                case ComputeBindingType.Texture:\n                case ComputeBindingType.TextureWithoutSampler:\n                case ComputeBindingType.StorageTexture: {\n                    var serializedData = object.serialize();\n                    if (serializedData) {\n                        serializationObject.textures[key] = serializedData;\n                        serializationObject.bindings[key] = {\n                            type: binding.type,\n                        };\n                    }\n                    break;\n                }\n                case ComputeBindingType.UniformBuffer: {\n                    break;\n                }\n            }\n        }\n        return serializationObject;\n    };\n    /**\n     * Creates a compute shader from parsed compute shader data\n     * @param source defines the JSON representation of the compute shader\n     * @param scene defines the hosting scene\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\n     * @returns a new compute shader\n     */\n    ComputeShader.Parse = function (source, scene, rootUrl) {\n        var compute = SerializationHelper.Parse(function () { return new ComputeShader(source.name, scene.getEngine(), source.shaderPath, source.options); }, source, scene, rootUrl);\n        for (var key in source.textures) {\n            var binding = source.bindings[key];\n            var texture = Texture.Parse(source.textures[key], scene, rootUrl);\n            if (binding.type === ComputeBindingType.Texture) {\n                compute.setTexture(key, texture);\n            }\n            else if (binding.type === ComputeBindingType.TextureWithoutSampler) {\n                compute.setTexture(key, texture, false);\n            }\n            else {\n                compute.setStorageTexture(key, texture);\n            }\n        }\n        return compute;\n    };\n    __decorate([\n        serialize()\n    ], ComputeShader.prototype, \"name\", void 0);\n    return ComputeShader;\n}());\nexport { ComputeShader };\nRegisterClass(\"BABYLON.ComputeShader\", ComputeShader);\n//# sourceMappingURL=computeShader.js.map","import { ArrayTools } from \"../Misc/arrayTools.js\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector.js\";\nimport { Epsilon } from \"../Maths/math.constants.js\";\n/**\n * Class used to store bounding box information\n */\nvar BoundingBox = /** @class */ (function () {\n    /**\n     * Creates a new bounding box\n     * @param min defines the minimum vector (in local space)\n     * @param max defines the maximum vector (in local space)\n     * @param worldMatrix defines the new world matrix\n     */\n    function BoundingBox(min, max, worldMatrix) {\n        /**\n         * Gets the 8 vectors representing the bounding box in local space\n         */\n        this.vectors = ArrayTools.BuildArray(8, Vector3.Zero);\n        /**\n         * Gets the center of the bounding box in local space\n         */\n        this.center = Vector3.Zero();\n        /**\n         * Gets the center of the bounding box in world space\n         */\n        this.centerWorld = Vector3.Zero();\n        /**\n         * Gets the extend size in local space\n         */\n        this.extendSize = Vector3.Zero();\n        /**\n         * Gets the extend size in world space\n         */\n        this.extendSizeWorld = Vector3.Zero();\n        /**\n         * Gets the OBB (object bounding box) directions\n         */\n        this.directions = ArrayTools.BuildArray(3, Vector3.Zero);\n        /**\n         * Gets the 8 vectors representing the bounding box in world space\n         */\n        this.vectorsWorld = ArrayTools.BuildArray(8, Vector3.Zero);\n        /**\n         * Gets the minimum vector in world space\n         */\n        this.minimumWorld = Vector3.Zero();\n        /**\n         * Gets the maximum vector in world space\n         */\n        this.maximumWorld = Vector3.Zero();\n        /**\n         * Gets the minimum vector in local space\n         */\n        this.minimum = Vector3.Zero();\n        /**\n         * Gets the maximum vector in local space\n         */\n        this.maximum = Vector3.Zero();\n        /** @hidden */\n        this._drawWrapperFront = null;\n        /** @hidden */\n        this._drawWrapperBack = null;\n        this.reConstruct(min, max, worldMatrix);\n    }\n    // Methods\n    /**\n     * Recreates the entire bounding box from scratch as if we call the constructor in place\n     * @param min defines the new minimum vector (in local space)\n     * @param max defines the new maximum vector (in local space)\n     * @param worldMatrix defines the new world matrix\n     */\n    BoundingBox.prototype.reConstruct = function (min, max, worldMatrix) {\n        var minX = min.x, minY = min.y, minZ = min.z, maxX = max.x, maxY = max.y, maxZ = max.z;\n        var vectors = this.vectors;\n        this.minimum.copyFromFloats(minX, minY, minZ);\n        this.maximum.copyFromFloats(maxX, maxY, maxZ);\n        vectors[0].copyFromFloats(minX, minY, minZ);\n        vectors[1].copyFromFloats(maxX, maxY, maxZ);\n        vectors[2].copyFromFloats(maxX, minY, minZ);\n        vectors[3].copyFromFloats(minX, maxY, minZ);\n        vectors[4].copyFromFloats(minX, minY, maxZ);\n        vectors[5].copyFromFloats(maxX, maxY, minZ);\n        vectors[6].copyFromFloats(minX, maxY, maxZ);\n        vectors[7].copyFromFloats(maxX, minY, maxZ);\n        // OBB\n        max.addToRef(min, this.center).scaleInPlace(0.5);\n        max.subtractToRef(min, this.extendSize).scaleInPlace(0.5);\n        this._worldMatrix = worldMatrix || Matrix.IdentityReadOnly;\n        this._update(this._worldMatrix);\n    };\n    /**\n     * Scale the current bounding box by applying a scale factor\n     * @param factor defines the scale factor to apply\n     * @returns the current bounding box\n     */\n    BoundingBox.prototype.scale = function (factor) {\n        var tmpVectors = BoundingBox._TmpVector3;\n        var diff = this.maximum.subtractToRef(this.minimum, tmpVectors[0]);\n        var len = diff.length();\n        diff.normalizeFromLength(len);\n        var distance = len * factor;\n        var newRadius = diff.scaleInPlace(distance * 0.5);\n        var min = this.center.subtractToRef(newRadius, tmpVectors[1]);\n        var max = this.center.addToRef(newRadius, tmpVectors[2]);\n        this.reConstruct(min, max, this._worldMatrix);\n        return this;\n    };\n    /**\n     * Gets the world matrix of the bounding box\n     * @returns a matrix\n     */\n    BoundingBox.prototype.getWorldMatrix = function () {\n        return this._worldMatrix;\n    };\n    /**\n     * @param world\n     * @hidden\n     */\n    BoundingBox.prototype._update = function (world) {\n        var minWorld = this.minimumWorld;\n        var maxWorld = this.maximumWorld;\n        var directions = this.directions;\n        var vectorsWorld = this.vectorsWorld;\n        var vectors = this.vectors;\n        if (!world.isIdentity()) {\n            minWorld.setAll(Number.MAX_VALUE);\n            maxWorld.setAll(-Number.MAX_VALUE);\n            for (var index = 0; index < 8; ++index) {\n                var v = vectorsWorld[index];\n                Vector3.TransformCoordinatesToRef(vectors[index], world, v);\n                minWorld.minimizeInPlace(v);\n                maxWorld.maximizeInPlace(v);\n            }\n            // Extend\n            maxWorld.subtractToRef(minWorld, this.extendSizeWorld).scaleInPlace(0.5);\n            maxWorld.addToRef(minWorld, this.centerWorld).scaleInPlace(0.5);\n        }\n        else {\n            minWorld.copyFrom(this.minimum);\n            maxWorld.copyFrom(this.maximum);\n            for (var index = 0; index < 8; ++index) {\n                vectorsWorld[index].copyFrom(vectors[index]);\n            }\n            // Extend\n            this.extendSizeWorld.copyFrom(this.extendSize);\n            this.centerWorld.copyFrom(this.center);\n        }\n        Vector3.FromArrayToRef(world.m, 0, directions[0]);\n        Vector3.FromArrayToRef(world.m, 4, directions[1]);\n        Vector3.FromArrayToRef(world.m, 8, directions[2]);\n        this._worldMatrix = world;\n    };\n    /**\n     * Tests if the bounding box is intersecting the frustum planes\n     * @param frustumPlanes defines the frustum planes to test\n     * @returns true if there is an intersection\n     */\n    BoundingBox.prototype.isInFrustum = function (frustumPlanes) {\n        return BoundingBox.IsInFrustum(this.vectorsWorld, frustumPlanes);\n    };\n    /**\n     * Tests if the bounding box is entirely inside the frustum planes\n     * @param frustumPlanes defines the frustum planes to test\n     * @returns true if there is an inclusion\n     */\n    BoundingBox.prototype.isCompletelyInFrustum = function (frustumPlanes) {\n        return BoundingBox.IsCompletelyInFrustum(this.vectorsWorld, frustumPlanes);\n    };\n    /**\n     * Tests if a point is inside the bounding box\n     * @param point defines the point to test\n     * @returns true if the point is inside the bounding box\n     */\n    BoundingBox.prototype.intersectsPoint = function (point) {\n        var min = this.minimumWorld;\n        var max = this.maximumWorld;\n        var minX = min.x, minY = min.y, minZ = min.z, maxX = max.x, maxY = max.y, maxZ = max.z;\n        var pointX = point.x, pointY = point.y, pointZ = point.z;\n        var delta = -Epsilon;\n        if (maxX - pointX < delta || delta > pointX - minX) {\n            return false;\n        }\n        if (maxY - pointY < delta || delta > pointY - minY) {\n            return false;\n        }\n        if (maxZ - pointZ < delta || delta > pointZ - minZ) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Tests if the bounding box intersects with a bounding sphere\n     * @param sphere defines the sphere to test\n     * @returns true if there is an intersection\n     */\n    BoundingBox.prototype.intersectsSphere = function (sphere) {\n        return BoundingBox.IntersectsSphere(this.minimumWorld, this.maximumWorld, sphere.centerWorld, sphere.radiusWorld);\n    };\n    /**\n     * Tests if the bounding box intersects with a box defined by a min and max vectors\n     * @param min defines the min vector to use\n     * @param max defines the max vector to use\n     * @returns true if there is an intersection\n     */\n    BoundingBox.prototype.intersectsMinMax = function (min, max) {\n        var myMin = this.minimumWorld;\n        var myMax = this.maximumWorld;\n        var myMinX = myMin.x, myMinY = myMin.y, myMinZ = myMin.z, myMaxX = myMax.x, myMaxY = myMax.y, myMaxZ = myMax.z;\n        var minX = min.x, minY = min.y, minZ = min.z, maxX = max.x, maxY = max.y, maxZ = max.z;\n        if (myMaxX < minX || myMinX > maxX) {\n            return false;\n        }\n        if (myMaxY < minY || myMinY > maxY) {\n            return false;\n        }\n        if (myMaxZ < minZ || myMinZ > maxZ) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Disposes the resources of the class\n     */\n    BoundingBox.prototype.dispose = function () {\n        var _a, _b;\n        (_a = this._drawWrapperFront) === null || _a === void 0 ? void 0 : _a.dispose();\n        (_b = this._drawWrapperBack) === null || _b === void 0 ? void 0 : _b.dispose();\n    };\n    // Statics\n    /**\n     * Tests if two bounding boxes are intersections\n     * @param box0 defines the first box to test\n     * @param box1 defines the second box to test\n     * @returns true if there is an intersection\n     */\n    BoundingBox.Intersects = function (box0, box1) {\n        return box0.intersectsMinMax(box1.minimumWorld, box1.maximumWorld);\n    };\n    /**\n     * Tests if a bounding box defines by a min/max vectors intersects a sphere\n     * @param minPoint defines the minimum vector of the bounding box\n     * @param maxPoint defines the maximum vector of the bounding box\n     * @param sphereCenter defines the sphere center\n     * @param sphereRadius defines the sphere radius\n     * @returns true if there is an intersection\n     */\n    BoundingBox.IntersectsSphere = function (minPoint, maxPoint, sphereCenter, sphereRadius) {\n        var vector = BoundingBox._TmpVector3[0];\n        Vector3.ClampToRef(sphereCenter, minPoint, maxPoint, vector);\n        var num = Vector3.DistanceSquared(sphereCenter, vector);\n        return num <= sphereRadius * sphereRadius;\n    };\n    /**\n     * Tests if a bounding box defined with 8 vectors is entirely inside frustum planes\n     * @param boundingVectors defines an array of 8 vectors representing a bounding box\n     * @param frustumPlanes defines the frustum planes to test\n     * @return true if there is an inclusion\n     */\n    BoundingBox.IsCompletelyInFrustum = function (boundingVectors, frustumPlanes) {\n        for (var p = 0; p < 6; ++p) {\n            var frustumPlane = frustumPlanes[p];\n            for (var i = 0; i < 8; ++i) {\n                if (frustumPlane.dotCoordinate(boundingVectors[i]) < 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    /**\n     * Tests if a bounding box defined with 8 vectors intersects frustum planes\n     * @param boundingVectors defines an array of 8 vectors representing a bounding box\n     * @param frustumPlanes defines the frustum planes to test\n     * @return true if there is an intersection\n     */\n    BoundingBox.IsInFrustum = function (boundingVectors, frustumPlanes) {\n        for (var p = 0; p < 6; ++p) {\n            var canReturnFalse = true;\n            var frustumPlane = frustumPlanes[p];\n            for (var i = 0; i < 8; ++i) {\n                if (frustumPlane.dotCoordinate(boundingVectors[i]) >= 0) {\n                    canReturnFalse = false;\n                    break;\n                }\n            }\n            if (canReturnFalse) {\n                return false;\n            }\n        }\n        return true;\n    };\n    BoundingBox._TmpVector3 = ArrayTools.BuildArray(3, Vector3.Zero);\n    return BoundingBox;\n}());\nexport { BoundingBox };\n//# sourceMappingURL=boundingBox.js.map","import { ArrayTools } from \"../Misc/arrayTools.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\n\nimport { BoundingBox } from \"./boundingBox.js\";\nimport { BoundingSphere } from \"./boundingSphere.js\";\nvar _result0 = { min: 0, max: 0 };\nvar _result1 = { min: 0, max: 0 };\nvar computeBoxExtents = function (axis, box, result) {\n    var p = Vector3.Dot(box.centerWorld, axis);\n    var r0 = Math.abs(Vector3.Dot(box.directions[0], axis)) * box.extendSize.x;\n    var r1 = Math.abs(Vector3.Dot(box.directions[1], axis)) * box.extendSize.y;\n    var r2 = Math.abs(Vector3.Dot(box.directions[2], axis)) * box.extendSize.z;\n    var r = r0 + r1 + r2;\n    result.min = p - r;\n    result.max = p + r;\n};\nvar axisOverlap = function (axis, box0, box1) {\n    computeBoxExtents(axis, box0, _result0);\n    computeBoxExtents(axis, box1, _result1);\n    return !(_result0.min > _result1.max || _result1.min > _result0.max);\n};\n/**\n * Info for a bounding data of a mesh\n */\nvar BoundingInfo = /** @class */ (function () {\n    /**\n     * Constructs bounding info\n     * @param minimum min vector of the bounding box/sphere\n     * @param maximum max vector of the bounding box/sphere\n     * @param worldMatrix defines the new world matrix\n     */\n    function BoundingInfo(minimum, maximum, worldMatrix) {\n        this._isLocked = false;\n        this.boundingBox = new BoundingBox(minimum, maximum, worldMatrix);\n        this.boundingSphere = new BoundingSphere(minimum, maximum, worldMatrix);\n    }\n    /**\n     * Recreates the entire bounding info from scratch as if we call the constructor in place\n     * @param min defines the new minimum vector (in local space)\n     * @param max defines the new maximum vector (in local space)\n     * @param worldMatrix defines the new world matrix\n     */\n    BoundingInfo.prototype.reConstruct = function (min, max, worldMatrix) {\n        this.boundingBox.reConstruct(min, max, worldMatrix);\n        this.boundingSphere.reConstruct(min, max, worldMatrix);\n    };\n    Object.defineProperty(BoundingInfo.prototype, \"minimum\", {\n        /**\n         * min vector of the bounding box/sphere\n         */\n        get: function () {\n            return this.boundingBox.minimum;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BoundingInfo.prototype, \"maximum\", {\n        /**\n         * max vector of the bounding box/sphere\n         */\n        get: function () {\n            return this.boundingBox.maximum;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BoundingInfo.prototype, \"isLocked\", {\n        /**\n         * If the info is locked and won't be updated to avoid perf overhead\n         */\n        get: function () {\n            return this._isLocked;\n        },\n        set: function (value) {\n            this._isLocked = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // Methods\n    /**\n     * Updates the bounding sphere and box\n     * @param world world matrix to be used to update\n     */\n    BoundingInfo.prototype.update = function (world) {\n        if (this._isLocked) {\n            return;\n        }\n        this.boundingBox._update(world);\n        this.boundingSphere._update(world);\n    };\n    /**\n     * Recreate the bounding info to be centered around a specific point given a specific extend.\n     * @param center New center of the bounding info\n     * @param extend New extend of the bounding info\n     * @returns the current bounding info\n     */\n    BoundingInfo.prototype.centerOn = function (center, extend) {\n        var minimum = BoundingInfo._TmpVector3[0].copyFrom(center).subtractInPlace(extend);\n        var maximum = BoundingInfo._TmpVector3[1].copyFrom(center).addInPlace(extend);\n        this.boundingBox.reConstruct(minimum, maximum, this.boundingBox.getWorldMatrix());\n        this.boundingSphere.reConstruct(minimum, maximum, this.boundingBox.getWorldMatrix());\n        return this;\n    };\n    /**\n     * Grows the bounding info to include the given point.\n     * @param point The point that will be included in the current bounding info\n     * @returns the current bounding info\n     */\n    BoundingInfo.prototype.encapsulate = function (point) {\n        var minimum = Vector3.Minimize(this.minimum, point);\n        var maximum = Vector3.Maximize(this.maximum, point);\n        this.reConstruct(minimum, maximum, this.boundingBox.getWorldMatrix());\n        return this;\n    };\n    /**\n     * Grows the bounding info to encapsulate the given bounding info.\n     * @param toEncapsulate The bounding info that will be encapsulated in the current bounding info\n     * @returns the current bounding info\n     */\n    BoundingInfo.prototype.encapsulateBoundingInfo = function (toEncapsulate) {\n        this.encapsulate(toEncapsulate.boundingBox.centerWorld.subtract(toEncapsulate.boundingBox.extendSizeWorld));\n        this.encapsulate(toEncapsulate.boundingBox.centerWorld.add(toEncapsulate.boundingBox.extendSizeWorld));\n        return this;\n    };\n    /**\n     * Scale the current bounding info by applying a scale factor\n     * @param factor defines the scale factor to apply\n     * @returns the current bounding info\n     */\n    BoundingInfo.prototype.scale = function (factor) {\n        this.boundingBox.scale(factor);\n        this.boundingSphere.scale(factor);\n        return this;\n    };\n    /**\n     * Returns `true` if the bounding info is within the frustum defined by the passed array of planes.\n     * @param frustumPlanes defines the frustum to test\n     * @param strategy defines the strategy to use for the culling (default is BABYLON.AbstractMesh.CULLINGSTRATEGY_STANDARD)\n     * @returns true if the bounding info is in the frustum planes\n     */\n    BoundingInfo.prototype.isInFrustum = function (frustumPlanes, strategy) {\n        if (strategy === void 0) { strategy = 0; }\n        var inclusionTest = strategy === 2 || strategy === 3;\n        if (inclusionTest) {\n            if (this.boundingSphere.isCenterInFrustum(frustumPlanes)) {\n                return true;\n            }\n        }\n        if (!this.boundingSphere.isInFrustum(frustumPlanes)) {\n            return false;\n        }\n        var bSphereOnlyTest = strategy === 1 || strategy === 3;\n        if (bSphereOnlyTest) {\n            return true;\n        }\n        return this.boundingBox.isInFrustum(frustumPlanes);\n    };\n    Object.defineProperty(BoundingInfo.prototype, \"diagonalLength\", {\n        /**\n         * Gets the world distance between the min and max points of the bounding box\n         */\n        get: function () {\n            var boundingBox = this.boundingBox;\n            var diag = boundingBox.maximumWorld.subtractToRef(boundingBox.minimumWorld, BoundingInfo._TmpVector3[0]);\n            return diag.length();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Checks if a cullable object (mesh...) is in the camera frustum\n     * Unlike isInFrustum this checks the full bounding box\n     * @param frustumPlanes Camera near/planes\n     * @returns true if the object is in frustum otherwise false\n     */\n    BoundingInfo.prototype.isCompletelyInFrustum = function (frustumPlanes) {\n        return this.boundingBox.isCompletelyInFrustum(frustumPlanes);\n    };\n    /**\n     * @param collider\n     * @hidden\n     */\n    BoundingInfo.prototype._checkCollision = function (collider) {\n        return collider._canDoCollision(this.boundingSphere.centerWorld, this.boundingSphere.radiusWorld, this.boundingBox.minimumWorld, this.boundingBox.maximumWorld);\n    };\n    /**\n     * Checks if a point is inside the bounding box and bounding sphere or the mesh\n     * @see https://doc.babylonjs.com/babylon101/intersect_collisions_-_mesh\n     * @param point the point to check intersection with\n     * @returns if the point intersects\n     */\n    BoundingInfo.prototype.intersectsPoint = function (point) {\n        if (!this.boundingSphere.centerWorld) {\n            return false;\n        }\n        if (!this.boundingSphere.intersectsPoint(point)) {\n            return false;\n        }\n        if (!this.boundingBox.intersectsPoint(point)) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Checks if another bounding info intersects the bounding box and bounding sphere or the mesh\n     * @see https://doc.babylonjs.com/babylon101/intersect_collisions_-_mesh\n     * @param boundingInfo the bounding info to check intersection with\n     * @param precise if the intersection should be done using OBB\n     * @returns if the bounding info intersects\n     */\n    BoundingInfo.prototype.intersects = function (boundingInfo, precise) {\n        if (!BoundingSphere.Intersects(this.boundingSphere, boundingInfo.boundingSphere)) {\n            return false;\n        }\n        if (!BoundingBox.Intersects(this.boundingBox, boundingInfo.boundingBox)) {\n            return false;\n        }\n        if (!precise) {\n            return true;\n        }\n        var box0 = this.boundingBox;\n        var box1 = boundingInfo.boundingBox;\n        if (!axisOverlap(box0.directions[0], box0, box1)) {\n            return false;\n        }\n        if (!axisOverlap(box0.directions[1], box0, box1)) {\n            return false;\n        }\n        if (!axisOverlap(box0.directions[2], box0, box1)) {\n            return false;\n        }\n        if (!axisOverlap(box1.directions[0], box0, box1)) {\n            return false;\n        }\n        if (!axisOverlap(box1.directions[1], box0, box1)) {\n            return false;\n        }\n        if (!axisOverlap(box1.directions[2], box0, box1)) {\n            return false;\n        }\n        if (!axisOverlap(Vector3.Cross(box0.directions[0], box1.directions[0]), box0, box1)) {\n            return false;\n        }\n        if (!axisOverlap(Vector3.Cross(box0.directions[0], box1.directions[1]), box0, box1)) {\n            return false;\n        }\n        if (!axisOverlap(Vector3.Cross(box0.directions[0], box1.directions[2]), box0, box1)) {\n            return false;\n        }\n        if (!axisOverlap(Vector3.Cross(box0.directions[1], box1.directions[0]), box0, box1)) {\n            return false;\n        }\n        if (!axisOverlap(Vector3.Cross(box0.directions[1], box1.directions[1]), box0, box1)) {\n            return false;\n        }\n        if (!axisOverlap(Vector3.Cross(box0.directions[1], box1.directions[2]), box0, box1)) {\n            return false;\n        }\n        if (!axisOverlap(Vector3.Cross(box0.directions[2], box1.directions[0]), box0, box1)) {\n            return false;\n        }\n        if (!axisOverlap(Vector3.Cross(box0.directions[2], box1.directions[1]), box0, box1)) {\n            return false;\n        }\n        if (!axisOverlap(Vector3.Cross(box0.directions[2], box1.directions[2]), box0, box1)) {\n            return false;\n        }\n        return true;\n    };\n    BoundingInfo._TmpVector3 = ArrayTools.BuildArray(2, Vector3.Zero);\n    return BoundingInfo;\n}());\nexport { BoundingInfo };\n//# sourceMappingURL=boundingInfo.js.map","import { ArrayTools } from \"../Misc/arrayTools.js\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector.js\";\n/**\n * Class used to store bounding sphere information\n */\nvar BoundingSphere = /** @class */ (function () {\n    /**\n     * Creates a new bounding sphere\n     * @param min defines the minimum vector (in local space)\n     * @param max defines the maximum vector (in local space)\n     * @param worldMatrix defines the new world matrix\n     */\n    function BoundingSphere(min, max, worldMatrix) {\n        /**\n         * Gets the center of the bounding sphere in local space\n         */\n        this.center = Vector3.Zero();\n        /**\n         * Gets the center of the bounding sphere in world space\n         */\n        this.centerWorld = Vector3.Zero();\n        /**\n         * Gets the minimum vector in local space\n         */\n        this.minimum = Vector3.Zero();\n        /**\n         * Gets the maximum vector in local space\n         */\n        this.maximum = Vector3.Zero();\n        this.reConstruct(min, max, worldMatrix);\n    }\n    /**\n     * Recreates the entire bounding sphere from scratch as if we call the constructor in place\n     * @param min defines the new minimum vector (in local space)\n     * @param max defines the new maximum vector (in local space)\n     * @param worldMatrix defines the new world matrix\n     */\n    BoundingSphere.prototype.reConstruct = function (min, max, worldMatrix) {\n        this.minimum.copyFrom(min);\n        this.maximum.copyFrom(max);\n        var distance = Vector3.Distance(min, max);\n        max.addToRef(min, this.center).scaleInPlace(0.5);\n        this.radius = distance * 0.5;\n        this._update(worldMatrix || Matrix.IdentityReadOnly);\n    };\n    /**\n     * Scale the current bounding sphere by applying a scale factor\n     * @param factor defines the scale factor to apply\n     * @returns the current bounding box\n     */\n    BoundingSphere.prototype.scale = function (factor) {\n        var newRadius = this.radius * factor;\n        var tmpVectors = BoundingSphere._TmpVector3;\n        var tempRadiusVector = tmpVectors[0].setAll(newRadius);\n        var min = this.center.subtractToRef(tempRadiusVector, tmpVectors[1]);\n        var max = this.center.addToRef(tempRadiusVector, tmpVectors[2]);\n        this.reConstruct(min, max, this._worldMatrix);\n        return this;\n    };\n    /**\n     * Gets the world matrix of the bounding box\n     * @returns a matrix\n     */\n    BoundingSphere.prototype.getWorldMatrix = function () {\n        return this._worldMatrix;\n    };\n    // Methods\n    /**\n     * @param worldMatrix\n     * @hidden\n     */\n    BoundingSphere.prototype._update = function (worldMatrix) {\n        if (!worldMatrix.isIdentity()) {\n            Vector3.TransformCoordinatesToRef(this.center, worldMatrix, this.centerWorld);\n            var tempVector = BoundingSphere._TmpVector3[0];\n            Vector3.TransformNormalFromFloatsToRef(1.0, 1.0, 1.0, worldMatrix, tempVector);\n            this.radiusWorld = Math.max(Math.abs(tempVector.x), Math.abs(tempVector.y), Math.abs(tempVector.z)) * this.radius;\n        }\n        else {\n            this.centerWorld.copyFrom(this.center);\n            this.radiusWorld = this.radius;\n        }\n    };\n    /**\n     * Tests if the bounding sphere is intersecting the frustum planes\n     * @param frustumPlanes defines the frustum planes to test\n     * @returns true if there is an intersection\n     */\n    BoundingSphere.prototype.isInFrustum = function (frustumPlanes) {\n        var center = this.centerWorld;\n        var radius = this.radiusWorld;\n        for (var i = 0; i < 6; i++) {\n            if (frustumPlanes[i].dotCoordinate(center) <= -radius) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Tests if the bounding sphere center is in between the frustum planes.\n     * Used for optimistic fast inclusion.\n     * @param frustumPlanes defines the frustum planes to test\n     * @returns true if the sphere center is in between the frustum planes\n     */\n    BoundingSphere.prototype.isCenterInFrustum = function (frustumPlanes) {\n        var center = this.centerWorld;\n        for (var i = 0; i < 6; i++) {\n            if (frustumPlanes[i].dotCoordinate(center) < 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Tests if a point is inside the bounding sphere\n     * @param point defines the point to test\n     * @returns true if the point is inside the bounding sphere\n     */\n    BoundingSphere.prototype.intersectsPoint = function (point) {\n        var squareDistance = Vector3.DistanceSquared(this.centerWorld, point);\n        if (this.radiusWorld * this.radiusWorld < squareDistance) {\n            return false;\n        }\n        return true;\n    };\n    // Statics\n    /**\n     * Checks if two sphere intersect\n     * @param sphere0 sphere 0\n     * @param sphere1 sphere 1\n     * @returns true if the spheres intersect\n     */\n    BoundingSphere.Intersects = function (sphere0, sphere1) {\n        var squareDistance = Vector3.DistanceSquared(sphere0.centerWorld, sphere1.centerWorld);\n        var radiusSum = sphere0.radiusWorld + sphere1.radiusWorld;\n        if (radiusSum * radiusSum < squareDistance) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Creates a sphere from a center and a radius\n     * @param center The center\n     * @param radius radius\n     * @param matrix Optional worldMatrix\n     * @returns The sphere\n     */\n    BoundingSphere.CreateFromCenterAndRadius = function (center, radius, matrix) {\n        this._TmpVector3[0].copyFrom(center);\n        this._TmpVector3[1].copyFromFloats(0, 0, radius);\n        this._TmpVector3[2].copyFrom(center);\n        this._TmpVector3[0].addInPlace(this._TmpVector3[1]);\n        this._TmpVector3[2].subtractInPlace(this._TmpVector3[1]);\n        var sphere = new BoundingSphere(this._TmpVector3[0], this._TmpVector3[2]);\n        if (matrix) {\n            sphere._worldMatrix = matrix;\n        }\n        else {\n            sphere._worldMatrix = Matrix.Identity();\n        }\n        return sphere;\n    };\n    BoundingSphere._TmpVector3 = ArrayTools.BuildArray(3, Vector3.Zero);\n    return BoundingSphere;\n}());\nexport { BoundingSphere };\n//# sourceMappingURL=boundingSphere.js.map","import { Vector3 } from \"../../Maths/math.vector.js\";\nimport { BoundingBox } from \"../../Culling/boundingBox.js\";\n/**\n * Class used to store a cell in an octree\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\n */\nvar OctreeBlock = /** @class */ (function () {\n    /**\n     * Creates a new block\n     * @param minPoint defines the minimum vector (in world space) of the block's bounding box\n     * @param maxPoint defines the maximum vector (in world space) of the block's bounding box\n     * @param capacity defines the maximum capacity of this block (if capacity is reached the block will be split into sub blocks)\n     * @param depth defines the current depth of this block in the octree\n     * @param maxDepth defines the maximal depth allowed (beyond this value, the capacity is ignored)\n     * @param creationFunc defines a callback to call when an element is added to the block\n     */\n    function OctreeBlock(minPoint, maxPoint, capacity, depth, maxDepth, creationFunc) {\n        /**\n         * Gets the content of the current block\n         */\n        this.entries = new Array();\n        this._boundingVectors = new Array();\n        this._capacity = capacity;\n        this._depth = depth;\n        this._maxDepth = maxDepth;\n        this._creationFunc = creationFunc;\n        this._minPoint = minPoint;\n        this._maxPoint = maxPoint;\n        this._boundingVectors.push(minPoint.clone());\n        this._boundingVectors.push(maxPoint.clone());\n        this._boundingVectors.push(minPoint.clone());\n        this._boundingVectors[2].x = maxPoint.x;\n        this._boundingVectors.push(minPoint.clone());\n        this._boundingVectors[3].y = maxPoint.y;\n        this._boundingVectors.push(minPoint.clone());\n        this._boundingVectors[4].z = maxPoint.z;\n        this._boundingVectors.push(maxPoint.clone());\n        this._boundingVectors[5].z = minPoint.z;\n        this._boundingVectors.push(maxPoint.clone());\n        this._boundingVectors[6].x = minPoint.x;\n        this._boundingVectors.push(maxPoint.clone());\n        this._boundingVectors[7].y = minPoint.y;\n    }\n    Object.defineProperty(OctreeBlock.prototype, \"capacity\", {\n        // Property\n        /**\n         * Gets the maximum capacity of this block (if capacity is reached the block will be split into sub blocks)\n         */\n        get: function () {\n            return this._capacity;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(OctreeBlock.prototype, \"minPoint\", {\n        /**\n         * Gets the minimum vector (in world space) of the block's bounding box\n         */\n        get: function () {\n            return this._minPoint;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(OctreeBlock.prototype, \"maxPoint\", {\n        /**\n         * Gets the maximum vector (in world space) of the block's bounding box\n         */\n        get: function () {\n            return this._maxPoint;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // Methods\n    /**\n     * Add a new element to this block\n     * @param entry defines the element to add\n     */\n    OctreeBlock.prototype.addEntry = function (entry) {\n        if (this.blocks) {\n            for (var index = 0; index < this.blocks.length; index++) {\n                var block = this.blocks[index];\n                block.addEntry(entry);\n            }\n            return;\n        }\n        this._creationFunc(entry, this);\n        if (this.entries.length > this.capacity && this._depth < this._maxDepth) {\n            this.createInnerBlocks();\n        }\n    };\n    /**\n     * Remove an element from this block\n     * @param entry defines the element to remove\n     */\n    OctreeBlock.prototype.removeEntry = function (entry) {\n        if (this.blocks) {\n            for (var index = 0; index < this.blocks.length; index++) {\n                var block = this.blocks[index];\n                block.removeEntry(entry);\n            }\n            return;\n        }\n        var entryIndex = this.entries.indexOf(entry);\n        if (entryIndex > -1) {\n            this.entries.splice(entryIndex, 1);\n        }\n    };\n    /**\n     * Add an array of elements to this block\n     * @param entries defines the array of elements to add\n     */\n    OctreeBlock.prototype.addEntries = function (entries) {\n        for (var index = 0; index < entries.length; index++) {\n            var mesh = entries[index];\n            this.addEntry(mesh);\n        }\n    };\n    /**\n     * Test if the current block intersects the frustum planes and if yes, then add its content to the selection array\n     * @param frustumPlanes defines the frustum planes to test\n     * @param selection defines the array to store current content if selection is positive\n     * @param allowDuplicate defines if the selection array can contains duplicated entries\n     */\n    OctreeBlock.prototype.select = function (frustumPlanes, selection, allowDuplicate) {\n        if (BoundingBox.IsInFrustum(this._boundingVectors, frustumPlanes)) {\n            if (this.blocks) {\n                for (var index = 0; index < this.blocks.length; index++) {\n                    var block = this.blocks[index];\n                    block.select(frustumPlanes, selection, allowDuplicate);\n                }\n                return;\n            }\n            if (allowDuplicate) {\n                selection.concat(this.entries);\n            }\n            else {\n                selection.concatWithNoDuplicate(this.entries);\n            }\n        }\n    };\n    /**\n     * Test if the current block intersect with the given bounding sphere and if yes, then add its content to the selection array\n     * @param sphereCenter defines the bounding sphere center\n     * @param sphereRadius defines the bounding sphere radius\n     * @param selection defines the array to store current content if selection is positive\n     * @param allowDuplicate defines if the selection array can contains duplicated entries\n     */\n    OctreeBlock.prototype.intersects = function (sphereCenter, sphereRadius, selection, allowDuplicate) {\n        if (BoundingBox.IntersectsSphere(this._minPoint, this._maxPoint, sphereCenter, sphereRadius)) {\n            if (this.blocks) {\n                for (var index = 0; index < this.blocks.length; index++) {\n                    var block = this.blocks[index];\n                    block.intersects(sphereCenter, sphereRadius, selection, allowDuplicate);\n                }\n                return;\n            }\n            if (allowDuplicate) {\n                selection.concat(this.entries);\n            }\n            else {\n                selection.concatWithNoDuplicate(this.entries);\n            }\n        }\n    };\n    /**\n     * Test if the current block intersect with the given ray and if yes, then add its content to the selection array\n     * @param ray defines the ray to test with\n     * @param selection defines the array to store current content if selection is positive\n     */\n    OctreeBlock.prototype.intersectsRay = function (ray, selection) {\n        if (ray.intersectsBoxMinMax(this._minPoint, this._maxPoint)) {\n            if (this.blocks) {\n                for (var index = 0; index < this.blocks.length; index++) {\n                    var block = this.blocks[index];\n                    block.intersectsRay(ray, selection);\n                }\n                return;\n            }\n            selection.concatWithNoDuplicate(this.entries);\n        }\n    };\n    /**\n     * Subdivide the content into child blocks (this block will then be empty)\n     */\n    OctreeBlock.prototype.createInnerBlocks = function () {\n        OctreeBlock._CreateBlocks(this._minPoint, this._maxPoint, this.entries, this._capacity, this._depth, this._maxDepth, this, this._creationFunc);\n    };\n    /**\n     * @param worldMin\n     * @param worldMax\n     * @param entries\n     * @param maxBlockCapacity\n     * @param currentDepth\n     * @param maxDepth\n     * @param target\n     * @param creationFunc\n     * @hidden\n     */\n    OctreeBlock._CreateBlocks = function (worldMin, worldMax, entries, maxBlockCapacity, currentDepth, maxDepth, target, creationFunc) {\n        target.blocks = new Array();\n        var blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);\n        // Segmenting space\n        for (var x = 0; x < 2; x++) {\n            for (var y = 0; y < 2; y++) {\n                for (var z = 0; z < 2; z++) {\n                    var localMin = worldMin.add(blockSize.multiplyByFloats(x, y, z));\n                    var localMax = worldMin.add(blockSize.multiplyByFloats(x + 1, y + 1, z + 1));\n                    var block = new OctreeBlock(localMin, localMax, maxBlockCapacity, currentDepth + 1, maxDepth, creationFunc);\n                    block.addEntries(entries);\n                    target.blocks.push(block);\n                }\n            }\n        }\n    };\n    return OctreeBlock;\n}());\nexport { OctreeBlock };\n//# sourceMappingURL=octreeBlock.js.map","import { SmartArrayNoDuplicate } from \"../../Misc/smartArray.js\";\nimport { OctreeBlock } from \"./octreeBlock.js\";\n/**\n * Octrees are a really powerful data structure that can quickly select entities based on space coordinates.\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\n */\nvar Octree = /** @class */ (function () {\n    /**\n     * Creates a octree\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\n     * @param creationFunc function to be used to instantiate the octree\n     * @param maxBlockCapacity defines the maximum number of meshes you want on your octree's leaves (default: 64)\n     * @param maxDepth defines the maximum depth (sub-levels) for your octree. Default value is 2, which means 8 8 8 = 512 blocks :) (This parameter takes precedence over capacity.)\n     */\n    function Octree(creationFunc, maxBlockCapacity, \n    /** Defines the maximum depth (sub-levels) for your octree. Default value is 2, which means 8 8 8 = 512 blocks :) (This parameter takes precedence over capacity.) */\n    maxDepth) {\n        if (maxDepth === void 0) { maxDepth = 2; }\n        this.maxDepth = maxDepth;\n        /**\n         * Content stored in the octree\n         */\n        this.dynamicContent = new Array();\n        this._maxBlockCapacity = maxBlockCapacity || 64;\n        this._selectionContent = new SmartArrayNoDuplicate(1024);\n        this._creationFunc = creationFunc;\n    }\n    // Methods\n    /**\n     * Updates the octree by adding blocks for the passed in meshes within the min and max world parameters\n     * @param worldMin worldMin for the octree blocks var blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);\n     * @param worldMax worldMax for the octree blocks var blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);\n     * @param entries meshes to be added to the octree blocks\n     */\n    Octree.prototype.update = function (worldMin, worldMax, entries) {\n        OctreeBlock._CreateBlocks(worldMin, worldMax, entries, this._maxBlockCapacity, 0, this.maxDepth, this, this._creationFunc);\n    };\n    /**\n     * Adds a mesh to the octree\n     * @param entry Mesh to add to the octree\n     */\n    Octree.prototype.addMesh = function (entry) {\n        for (var index = 0; index < this.blocks.length; index++) {\n            var block = this.blocks[index];\n            block.addEntry(entry);\n        }\n    };\n    /**\n     * Remove an element from the octree\n     * @param entry defines the element to remove\n     */\n    Octree.prototype.removeMesh = function (entry) {\n        for (var index = 0; index < this.blocks.length; index++) {\n            var block = this.blocks[index];\n            block.removeEntry(entry);\n        }\n    };\n    /**\n     * Selects an array of meshes within the frustum\n     * @param frustumPlanes The frustum planes to use which will select all meshes within it\n     * @param allowDuplicate If duplicate objects are allowed in the resulting object array\n     * @returns array of meshes within the frustum\n     */\n    Octree.prototype.select = function (frustumPlanes, allowDuplicate) {\n        this._selectionContent.reset();\n        for (var index = 0; index < this.blocks.length; index++) {\n            var block = this.blocks[index];\n            block.select(frustumPlanes, this._selectionContent, allowDuplicate);\n        }\n        if (allowDuplicate) {\n            this._selectionContent.concat(this.dynamicContent);\n        }\n        else {\n            this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\n        }\n        return this._selectionContent;\n    };\n    /**\n     * Test if the octree intersect with the given bounding sphere and if yes, then add its content to the selection array\n     * @param sphereCenter defines the bounding sphere center\n     * @param sphereRadius defines the bounding sphere radius\n     * @param allowDuplicate defines if the selection array can contains duplicated entries\n     * @returns an array of objects that intersect the sphere\n     */\n    Octree.prototype.intersects = function (sphereCenter, sphereRadius, allowDuplicate) {\n        this._selectionContent.reset();\n        for (var index = 0; index < this.blocks.length; index++) {\n            var block = this.blocks[index];\n            block.intersects(sphereCenter, sphereRadius, this._selectionContent, allowDuplicate);\n        }\n        if (allowDuplicate) {\n            this._selectionContent.concat(this.dynamicContent);\n        }\n        else {\n            this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\n        }\n        return this._selectionContent;\n    };\n    /**\n     * Test if the octree intersect with the given ray and if yes, then add its content to resulting array\n     * @param ray defines the ray to test with\n     * @returns array of intersected objects\n     */\n    Octree.prototype.intersectsRay = function (ray) {\n        this._selectionContent.reset();\n        for (var index = 0; index < this.blocks.length; index++) {\n            var block = this.blocks[index];\n            block.intersectsRay(ray, this._selectionContent);\n        }\n        this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\n        return this._selectionContent;\n    };\n    /**\n     * Adds a mesh into the octree block if it intersects the block\n     * @param entry\n     * @param block\n     */\n    Octree.CreationFuncForMeshes = function (entry, block) {\n        var boundingInfo = entry.getBoundingInfo();\n        if (!entry.isBlocked && boundingInfo.boundingBox.intersectsMinMax(block.minPoint, block.maxPoint)) {\n            block.entries.push(entry);\n        }\n    };\n    /**\n     * Adds a submesh into the octree block if it intersects the block\n     * @param entry\n     * @param block\n     */\n    Octree.CreationFuncForSubMeshes = function (entry, block) {\n        var boundingInfo = entry.getBoundingInfo();\n        if (boundingInfo.boundingBox.intersectsMinMax(block.minPoint, block.maxPoint)) {\n            block.entries.push(entry);\n        }\n    };\n    return Octree;\n}());\nexport { Octree };\n//# sourceMappingURL=octree.js.map","import { Scene } from \"../../scene.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { AbstractMesh } from \"../../Meshes/abstractMesh.js\";\nimport { Ray } from \"../../Culling/ray.js\";\nimport { SceneComponentConstants } from \"../../sceneComponent.js\";\nimport { Octree } from \"./octree.js\";\nimport { EngineStore } from \"../../Engines/engineStore.js\";\nScene.prototype.createOrUpdateSelectionOctree = function (maxCapacity, maxDepth) {\n    if (maxCapacity === void 0) { maxCapacity = 64; }\n    if (maxDepth === void 0) { maxDepth = 2; }\n    var component = this._getComponent(SceneComponentConstants.NAME_OCTREE);\n    if (!component) {\n        component = new OctreeSceneComponent(this);\n        this._addComponent(component);\n    }\n    if (!this._selectionOctree) {\n        this._selectionOctree = new Octree(Octree.CreationFuncForMeshes, maxCapacity, maxDepth);\n    }\n    var worldExtends = this.getWorldExtends();\n    // Update octree\n    this._selectionOctree.update(worldExtends.min, worldExtends.max, this.meshes);\n    return this._selectionOctree;\n};\nObject.defineProperty(Scene.prototype, \"selectionOctree\", {\n    get: function () {\n        return this._selectionOctree;\n    },\n    enumerable: true,\n    configurable: true,\n});\n/**\n * This function will create an octree to help to select the right submeshes for rendering, picking and collision computations.\n * Please note that you must have a decent number of submeshes to get performance improvements when using an octree\n * @param maxCapacity defines the maximum size of each block (64 by default)\n * @param maxDepth defines the maximum depth to use (no more than 2 levels by default)\n * @returns the new octree\n * @see https://www.babylonjs-playground.com/#NA4OQ#12\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\n */\nAbstractMesh.prototype.createOrUpdateSubmeshesOctree = function (maxCapacity, maxDepth) {\n    if (maxCapacity === void 0) { maxCapacity = 64; }\n    if (maxDepth === void 0) { maxDepth = 2; }\n    var scene = this.getScene();\n    var component = scene._getComponent(SceneComponentConstants.NAME_OCTREE);\n    if (!component) {\n        component = new OctreeSceneComponent(scene);\n        scene._addComponent(component);\n    }\n    if (!this._submeshesOctree) {\n        this._submeshesOctree = new Octree(Octree.CreationFuncForSubMeshes, maxCapacity, maxDepth);\n    }\n    this.computeWorldMatrix(true);\n    var boundingInfo = this.getBoundingInfo();\n    // Update octree\n    var bbox = boundingInfo.boundingBox;\n    this._submeshesOctree.update(bbox.minimumWorld, bbox.maximumWorld, this.subMeshes);\n    return this._submeshesOctree;\n};\n/**\n * Defines the octree scene component responsible to manage any octrees\n * in a given scene.\n */\nvar OctreeSceneComponent = /** @class */ (function () {\n    /**\n     * Creates a new instance of the component for the given scene\n     * @param scene Defines the scene to register the component in\n     */\n    function OctreeSceneComponent(scene) {\n        /**\n         * The component name help to identify the component in the list of scene components.\n         */\n        this.name = SceneComponentConstants.NAME_OCTREE;\n        /**\n         * Indicates if the meshes have been checked to make sure they are isEnabled()\n         */\n        this.checksIsEnabled = true;\n        this._tempRay = new Ray(Vector3.Zero(), new Vector3(1, 1, 1));\n        scene = scene || EngineStore.LastCreatedScene;\n        if (!scene) {\n            return;\n        }\n        this.scene = scene;\n        this.scene.getActiveMeshCandidates = this.getActiveMeshCandidates.bind(this);\n        this.scene.getActiveSubMeshCandidates = this.getActiveSubMeshCandidates.bind(this);\n        this.scene.getCollidingSubMeshCandidates = this.getCollidingSubMeshCandidates.bind(this);\n        this.scene.getIntersectingSubMeshCandidates = this.getIntersectingSubMeshCandidates.bind(this);\n    }\n    /**\n     * Registers the component in a given scene\n     */\n    OctreeSceneComponent.prototype.register = function () {\n        var _this = this;\n        this.scene.onMeshRemovedObservable.add(function (mesh) {\n            var sceneOctree = _this.scene.selectionOctree;\n            if (sceneOctree !== undefined && sceneOctree !== null) {\n                var index = sceneOctree.dynamicContent.indexOf(mesh);\n                if (index !== -1) {\n                    sceneOctree.dynamicContent.splice(index, 1);\n                }\n            }\n        });\n        this.scene.onMeshImportedObservable.add(function (mesh) {\n            var sceneOctree = _this.scene.selectionOctree;\n            if (sceneOctree !== undefined && sceneOctree !== null) {\n                sceneOctree.addMesh(mesh);\n            }\n        });\n    };\n    /**\n     * Return the list of active meshes\n     * @returns the list of active meshes\n     */\n    OctreeSceneComponent.prototype.getActiveMeshCandidates = function () {\n        if (this.scene._selectionOctree) {\n            var selection = this.scene._selectionOctree.select(this.scene.frustumPlanes);\n            return selection;\n        }\n        return this.scene._getDefaultMeshCandidates();\n    };\n    /**\n     * Return the list of active sub meshes\n     * @param mesh The mesh to get the candidates sub meshes from\n     * @returns the list of active sub meshes\n     */\n    OctreeSceneComponent.prototype.getActiveSubMeshCandidates = function (mesh) {\n        if (mesh._submeshesOctree && mesh.useOctreeForRenderingSelection) {\n            var intersections = mesh._submeshesOctree.select(this.scene.frustumPlanes);\n            return intersections;\n        }\n        return this.scene._getDefaultSubMeshCandidates(mesh);\n    };\n    /**\n     * Return the list of sub meshes intersecting with a given local ray\n     * @param mesh defines the mesh to find the submesh for\n     * @param localRay defines the ray in local space\n     * @returns the list of intersecting sub meshes\n     */\n    OctreeSceneComponent.prototype.getIntersectingSubMeshCandidates = function (mesh, localRay) {\n        if (mesh._submeshesOctree && mesh.useOctreeForPicking) {\n            Ray.TransformToRef(localRay, mesh.getWorldMatrix(), this._tempRay);\n            var intersections = mesh._submeshesOctree.intersectsRay(this._tempRay);\n            return intersections;\n        }\n        return this.scene._getDefaultSubMeshCandidates(mesh);\n    };\n    /**\n     * Return the list of sub meshes colliding with a collider\n     * @param mesh defines the mesh to find the submesh for\n     * @param collider defines the collider to evaluate the collision against\n     * @returns the list of colliding sub meshes\n     */\n    OctreeSceneComponent.prototype.getCollidingSubMeshCandidates = function (mesh, collider) {\n        if (mesh._submeshesOctree && mesh.useOctreeForCollisions) {\n            var radius = collider._velocityWorldLength + Math.max(collider._radius.x, collider._radius.y, collider._radius.z);\n            var intersections = mesh._submeshesOctree.intersects(collider._basePointWorld, radius);\n            return intersections;\n        }\n        return this.scene._getDefaultSubMeshCandidates(mesh);\n    };\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    OctreeSceneComponent.prototype.rebuild = function () {\n        // Nothing to do here.\n    };\n    /**\n     * Disposes the component and the associated resources.\n     */\n    OctreeSceneComponent.prototype.dispose = function () {\n        // Nothing to do here.\n    };\n    return OctreeSceneComponent;\n}());\nexport { OctreeSceneComponent };\n//# sourceMappingURL=octreeSceneComponent.js.map","import { ArrayTools } from \"../Misc/arrayTools.js\";\nimport { Matrix, Vector3, TmpVectors } from \"../Maths/math.vector.js\";\nimport { PickingInfo } from \"../Collisions/pickingInfo.js\";\nimport { IntersectionInfo } from \"../Collisions/intersectionInfo.js\";\nimport { Scene } from \"../scene.js\";\nimport { Camera } from \"../Cameras/camera.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n/**\n * Class representing a ray with position and direction\n */\nvar Ray = /** @class */ (function () {\n    /**\n     * Creates a new ray\n     * @param origin origin point\n     * @param direction direction\n     * @param length length of the ray\n     */\n    function Ray(\n    /** origin point */\n    origin, \n    /** direction */\n    direction, \n    /** length of the ray */\n    length) {\n        if (length === void 0) { length = Number.MAX_VALUE; }\n        this.origin = origin;\n        this.direction = direction;\n        this.length = length;\n    }\n    // Methods\n    /**\n     * Clone the current ray\n     * @returns a new ray\n     */\n    Ray.prototype.clone = function () {\n        return new Ray(this.origin.clone(), this.direction.clone(), this.length);\n    };\n    /**\n     * Checks if the ray intersects a box\n     * This does not account for the ray length by design to improve perfs.\n     * @param minimum bound of the box\n     * @param maximum bound of the box\n     * @param intersectionTreshold extra extend to be added to the box in all direction\n     * @returns if the box was hit\n     */\n    Ray.prototype.intersectsBoxMinMax = function (minimum, maximum, intersectionTreshold) {\n        if (intersectionTreshold === void 0) { intersectionTreshold = 0; }\n        var newMinimum = Ray._TmpVector3[0].copyFromFloats(minimum.x - intersectionTreshold, minimum.y - intersectionTreshold, minimum.z - intersectionTreshold);\n        var newMaximum = Ray._TmpVector3[1].copyFromFloats(maximum.x + intersectionTreshold, maximum.y + intersectionTreshold, maximum.z + intersectionTreshold);\n        var d = 0.0;\n        var maxValue = Number.MAX_VALUE;\n        var inv;\n        var min;\n        var max;\n        var temp;\n        if (Math.abs(this.direction.x) < 0.0000001) {\n            if (this.origin.x < newMinimum.x || this.origin.x > newMaximum.x) {\n                return false;\n            }\n        }\n        else {\n            inv = 1.0 / this.direction.x;\n            min = (newMinimum.x - this.origin.x) * inv;\n            max = (newMaximum.x - this.origin.x) * inv;\n            if (max === -Infinity) {\n                max = Infinity;\n            }\n            if (min > max) {\n                temp = min;\n                min = max;\n                max = temp;\n            }\n            d = Math.max(min, d);\n            maxValue = Math.min(max, maxValue);\n            if (d > maxValue) {\n                return false;\n            }\n        }\n        if (Math.abs(this.direction.y) < 0.0000001) {\n            if (this.origin.y < newMinimum.y || this.origin.y > newMaximum.y) {\n                return false;\n            }\n        }\n        else {\n            inv = 1.0 / this.direction.y;\n            min = (newMinimum.y - this.origin.y) * inv;\n            max = (newMaximum.y - this.origin.y) * inv;\n            if (max === -Infinity) {\n                max = Infinity;\n            }\n            if (min > max) {\n                temp = min;\n                min = max;\n                max = temp;\n            }\n            d = Math.max(min, d);\n            maxValue = Math.min(max, maxValue);\n            if (d > maxValue) {\n                return false;\n            }\n        }\n        if (Math.abs(this.direction.z) < 0.0000001) {\n            if (this.origin.z < newMinimum.z || this.origin.z > newMaximum.z) {\n                return false;\n            }\n        }\n        else {\n            inv = 1.0 / this.direction.z;\n            min = (newMinimum.z - this.origin.z) * inv;\n            max = (newMaximum.z - this.origin.z) * inv;\n            if (max === -Infinity) {\n                max = Infinity;\n            }\n            if (min > max) {\n                temp = min;\n                min = max;\n                max = temp;\n            }\n            d = Math.max(min, d);\n            maxValue = Math.min(max, maxValue);\n            if (d > maxValue) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Checks if the ray intersects a box\n     * This does not account for the ray lenght by design to improve perfs.\n     * @param box the bounding box to check\n     * @param intersectionTreshold extra extend to be added to the BoundingBox in all direction\n     * @returns if the box was hit\n     */\n    Ray.prototype.intersectsBox = function (box, intersectionTreshold) {\n        if (intersectionTreshold === void 0) { intersectionTreshold = 0; }\n        return this.intersectsBoxMinMax(box.minimum, box.maximum, intersectionTreshold);\n    };\n    /**\n     * If the ray hits a sphere\n     * @param sphere the bounding sphere to check\n     * @param intersectionTreshold extra extend to be added to the BoundingSphere in all direction\n     * @returns true if it hits the sphere\n     */\n    Ray.prototype.intersectsSphere = function (sphere, intersectionTreshold) {\n        if (intersectionTreshold === void 0) { intersectionTreshold = 0; }\n        var x = sphere.center.x - this.origin.x;\n        var y = sphere.center.y - this.origin.y;\n        var z = sphere.center.z - this.origin.z;\n        var pyth = x * x + y * y + z * z;\n        var radius = sphere.radius + intersectionTreshold;\n        var rr = radius * radius;\n        if (pyth <= rr) {\n            return true;\n        }\n        var dot = x * this.direction.x + y * this.direction.y + z * this.direction.z;\n        if (dot < 0.0) {\n            return false;\n        }\n        var temp = pyth - dot * dot;\n        return temp <= rr;\n    };\n    /**\n     * If the ray hits a triange\n     * @param vertex0 triangle vertex\n     * @param vertex1 triangle vertex\n     * @param vertex2 triangle vertex\n     * @returns intersection information if hit\n     */\n    Ray.prototype.intersectsTriangle = function (vertex0, vertex1, vertex2) {\n        var edge1 = Ray._TmpVector3[0];\n        var edge2 = Ray._TmpVector3[1];\n        var pvec = Ray._TmpVector3[2];\n        var tvec = Ray._TmpVector3[3];\n        var qvec = Ray._TmpVector3[4];\n        vertex1.subtractToRef(vertex0, edge1);\n        vertex2.subtractToRef(vertex0, edge2);\n        Vector3.CrossToRef(this.direction, edge2, pvec);\n        var det = Vector3.Dot(edge1, pvec);\n        if (det === 0) {\n            return null;\n        }\n        var invdet = 1 / det;\n        this.origin.subtractToRef(vertex0, tvec);\n        var bv = Vector3.Dot(tvec, pvec) * invdet;\n        if (bv < 0 || bv > 1.0) {\n            return null;\n        }\n        Vector3.CrossToRef(tvec, edge1, qvec);\n        var bw = Vector3.Dot(this.direction, qvec) * invdet;\n        if (bw < 0 || bv + bw > 1.0) {\n            return null;\n        }\n        //check if the distance is longer than the predefined length.\n        var distance = Vector3.Dot(edge2, qvec) * invdet;\n        if (distance > this.length) {\n            return null;\n        }\n        return new IntersectionInfo(1 - bv - bw, bv, distance);\n    };\n    /**\n     * Checks if ray intersects a plane\n     * @param plane the plane to check\n     * @returns the distance away it was hit\n     */\n    Ray.prototype.intersectsPlane = function (plane) {\n        var distance;\n        var result1 = Vector3.Dot(plane.normal, this.direction);\n        if (Math.abs(result1) < 9.99999997475243e-7) {\n            return null;\n        }\n        else {\n            var result2 = Vector3.Dot(plane.normal, this.origin);\n            distance = (-plane.d - result2) / result1;\n            if (distance < 0.0) {\n                if (distance < -9.99999997475243e-7) {\n                    return null;\n                }\n                else {\n                    return 0;\n                }\n            }\n            return distance;\n        }\n    };\n    /**\n     * Calculate the intercept of a ray on a given axis\n     * @param axis to check 'x' | 'y' | 'z'\n     * @param offset from axis interception (i.e. an offset of 1y is intercepted above ground)\n     * @returns a vector containing the coordinates where 'axis' is equal to zero (else offset), or null if there is no intercept.\n     */\n    Ray.prototype.intersectsAxis = function (axis, offset) {\n        if (offset === void 0) { offset = 0; }\n        switch (axis) {\n            case \"y\": {\n                var t = (this.origin.y - offset) / this.direction.y;\n                if (t > 0) {\n                    return null;\n                }\n                return new Vector3(this.origin.x + this.direction.x * -t, offset, this.origin.z + this.direction.z * -t);\n            }\n            case \"x\": {\n                var t = (this.origin.x - offset) / this.direction.x;\n                if (t > 0) {\n                    return null;\n                }\n                return new Vector3(offset, this.origin.y + this.direction.y * -t, this.origin.z + this.direction.z * -t);\n            }\n            case \"z\": {\n                var t = (this.origin.z - offset) / this.direction.z;\n                if (t > 0) {\n                    return null;\n                }\n                return new Vector3(this.origin.x + this.direction.x * -t, this.origin.y + this.direction.y * -t, offset);\n            }\n            default:\n                return null;\n        }\n    };\n    /**\n     * Checks if ray intersects a mesh\n     * @param mesh the mesh to check\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\n     * @returns picking info of the intersection\n     */\n    Ray.prototype.intersectsMesh = function (mesh, fastCheck) {\n        var tm = TmpVectors.Matrix[0];\n        mesh.getWorldMatrix().invertToRef(tm);\n        if (this._tmpRay) {\n            Ray.TransformToRef(this, tm, this._tmpRay);\n        }\n        else {\n            this._tmpRay = Ray.Transform(this, tm);\n        }\n        return mesh.intersects(this._tmpRay, fastCheck);\n    };\n    /**\n     * Checks if ray intersects a mesh\n     * @param meshes the meshes to check\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\n     * @param results array to store result in\n     * @returns Array of picking infos\n     */\n    Ray.prototype.intersectsMeshes = function (meshes, fastCheck, results) {\n        if (results) {\n            results.length = 0;\n        }\n        else {\n            results = [];\n        }\n        for (var i = 0; i < meshes.length; i++) {\n            var pickInfo = this.intersectsMesh(meshes[i], fastCheck);\n            if (pickInfo.hit) {\n                results.push(pickInfo);\n            }\n        }\n        results.sort(this._comparePickingInfo);\n        return results;\n    };\n    Ray.prototype._comparePickingInfo = function (pickingInfoA, pickingInfoB) {\n        if (pickingInfoA.distance < pickingInfoB.distance) {\n            return -1;\n        }\n        else if (pickingInfoA.distance > pickingInfoB.distance) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    };\n    /**\n     * Intersection test between the ray and a given segment within a given tolerance (threshold)\n     * @param sega the first point of the segment to test the intersection against\n     * @param segb the second point of the segment to test the intersection against\n     * @param threshold the tolerance margin, if the ray doesn't intersect the segment but is close to the given threshold, the intersection is successful\n     * @return the distance from the ray origin to the intersection point if there's intersection, or -1 if there's no intersection\n     */\n    Ray.prototype.intersectionSegment = function (sega, segb, threshold) {\n        var o = this.origin;\n        var u = TmpVectors.Vector3[0];\n        var rsegb = TmpVectors.Vector3[1];\n        var v = TmpVectors.Vector3[2];\n        var w = TmpVectors.Vector3[3];\n        segb.subtractToRef(sega, u);\n        this.direction.scaleToRef(Ray._Rayl, v);\n        o.addToRef(v, rsegb);\n        sega.subtractToRef(o, w);\n        var a = Vector3.Dot(u, u); // always >= 0\n        var b = Vector3.Dot(u, v);\n        var c = Vector3.Dot(v, v); // always >= 0\n        var d = Vector3.Dot(u, w);\n        var e = Vector3.Dot(v, w);\n        var D = a * c - b * b; // always >= 0\n        var sN, sD = D; // sc = sN / sD, default sD = D >= 0\n        var tN, tD = D; // tc = tN / tD, default tD = D >= 0\n        // compute the line parameters of the two closest points\n        if (D < Ray._Smallnum) {\n            // the lines are almost parallel\n            sN = 0.0; // force using point P0 on segment S1\n            sD = 1.0; // to prevent possible division by 0.0 later\n            tN = e;\n            tD = c;\n        }\n        else {\n            // get the closest points on the infinite lines\n            sN = b * e - c * d;\n            tN = a * e - b * d;\n            if (sN < 0.0) {\n                // sc < 0 => the s=0 edge is visible\n                sN = 0.0;\n                tN = e;\n                tD = c;\n            }\n            else if (sN > sD) {\n                // sc > 1 => the s=1 edge is visible\n                sN = sD;\n                tN = e + b;\n                tD = c;\n            }\n        }\n        if (tN < 0.0) {\n            // tc < 0 => the t=0 edge is visible\n            tN = 0.0;\n            // recompute sc for this edge\n            if (-d < 0.0) {\n                sN = 0.0;\n            }\n            else if (-d > a) {\n                sN = sD;\n            }\n            else {\n                sN = -d;\n                sD = a;\n            }\n        }\n        else if (tN > tD) {\n            // tc > 1 => the t=1 edge is visible\n            tN = tD;\n            // recompute sc for this edge\n            if (-d + b < 0.0) {\n                sN = 0;\n            }\n            else if (-d + b > a) {\n                sN = sD;\n            }\n            else {\n                sN = -d + b;\n                sD = a;\n            }\n        }\n        // finally do the division to get sc and tc\n        var sc = Math.abs(sN) < Ray._Smallnum ? 0.0 : sN / sD;\n        var tc = Math.abs(tN) < Ray._Smallnum ? 0.0 : tN / tD;\n        // get the difference of the two closest points\n        var qtc = TmpVectors.Vector3[4];\n        v.scaleToRef(tc, qtc);\n        var qsc = TmpVectors.Vector3[5];\n        u.scaleToRef(sc, qsc);\n        qsc.addInPlace(w);\n        var dP = TmpVectors.Vector3[6];\n        qsc.subtractToRef(qtc, dP); // = S1(sc) - S2(tc)\n        var isIntersected = tc > 0 && tc <= this.length && dP.lengthSquared() < threshold * threshold; // return intersection result\n        if (isIntersected) {\n            return qsc.length();\n        }\n        return -1;\n    };\n    /**\n     * Update the ray from viewport position\n     * @param x position\n     * @param y y position\n     * @param viewportWidth viewport width\n     * @param viewportHeight viewport height\n     * @param world world matrix\n     * @param view view matrix\n     * @param projection projection matrix\n     * @param enableDistantPicking defines if picking should handle large values for mesh position/scaling (false by default)\n     * @returns this ray updated\n     */\n    Ray.prototype.update = function (x, y, viewportWidth, viewportHeight, world, view, projection, enableDistantPicking) {\n        if (enableDistantPicking === void 0) { enableDistantPicking = false; }\n        if (enableDistantPicking) {\n            // With world matrices having great values (like 8000000000 on 1 or more scaling or position axis),\n            // multiplying view/projection/world and doing invert will result in loss of float precision in the matrix.\n            // One way to fix it is to compute the ray with world at identity then transform the ray in object space.\n            // This is slower (2 matrix inverts instead of 1) but precision is preserved.\n            // This is hidden behind `EnableDistantPicking` flag (default is false)\n            if (!Ray._RayDistant) {\n                Ray._RayDistant = Ray.Zero();\n            }\n            Ray._RayDistant.unprojectRayToRef(x, y, viewportWidth, viewportHeight, Matrix.IdentityReadOnly, view, projection);\n            var tm = TmpVectors.Matrix[0];\n            world.invertToRef(tm);\n            Ray.TransformToRef(Ray._RayDistant, tm, this);\n        }\n        else {\n            this.unprojectRayToRef(x, y, viewportWidth, viewportHeight, world, view, projection);\n        }\n        return this;\n    };\n    // Statics\n    /**\n     * Creates a ray with origin and direction of 0,0,0\n     * @returns the new ray\n     */\n    Ray.Zero = function () {\n        return new Ray(Vector3.Zero(), Vector3.Zero());\n    };\n    /**\n     * Creates a new ray from screen space and viewport\n     * @param x position\n     * @param y y position\n     * @param viewportWidth viewport width\n     * @param viewportHeight viewport height\n     * @param world world matrix\n     * @param view view matrix\n     * @param projection projection matrix\n     * @returns new ray\n     */\n    Ray.CreateNew = function (x, y, viewportWidth, viewportHeight, world, view, projection) {\n        var result = Ray.Zero();\n        return result.update(x, y, viewportWidth, viewportHeight, world, view, projection);\n    };\n    /**\n     * Function will create a new transformed ray starting from origin and ending at the end point. Ray's length will be set, and ray will be\n     * transformed to the given world matrix.\n     * @param origin The origin point\n     * @param end The end point\n     * @param world a matrix to transform the ray to. Default is the identity matrix.\n     * @returns the new ray\n     */\n    Ray.CreateNewFromTo = function (origin, end, world) {\n        if (world === void 0) { world = Matrix.IdentityReadOnly; }\n        var direction = end.subtract(origin);\n        var length = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\n        direction.normalize();\n        return Ray.Transform(new Ray(origin, direction, length), world);\n    };\n    /**\n     * Transforms a ray by a matrix\n     * @param ray ray to transform\n     * @param matrix matrix to apply\n     * @returns the resulting new ray\n     */\n    Ray.Transform = function (ray, matrix) {\n        var result = new Ray(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n        Ray.TransformToRef(ray, matrix, result);\n        return result;\n    };\n    /**\n     * Transforms a ray by a matrix\n     * @param ray ray to transform\n     * @param matrix matrix to apply\n     * @param result ray to store result in\n     */\n    Ray.TransformToRef = function (ray, matrix, result) {\n        Vector3.TransformCoordinatesToRef(ray.origin, matrix, result.origin);\n        Vector3.TransformNormalToRef(ray.direction, matrix, result.direction);\n        result.length = ray.length;\n        var dir = result.direction;\n        var len = dir.length();\n        if (!(len === 0 || len === 1)) {\n            var num = 1.0 / len;\n            dir.x *= num;\n            dir.y *= num;\n            dir.z *= num;\n            result.length *= len;\n        }\n    };\n    /**\n     * Unproject a ray from screen space to object space\n     * @param sourceX defines the screen space x coordinate to use\n     * @param sourceY defines the screen space y coordinate to use\n     * @param viewportWidth defines the current width of the viewport\n     * @param viewportHeight defines the current height of the viewport\n     * @param world defines the world matrix to use (can be set to Identity to go to world space)\n     * @param view defines the view matrix to use\n     * @param projection defines the projection matrix to use\n     */\n    Ray.prototype.unprojectRayToRef = function (sourceX, sourceY, viewportWidth, viewportHeight, world, view, projection) {\n        var _a;\n        var matrix = TmpVectors.Matrix[0];\n        world.multiplyToRef(view, matrix);\n        matrix.multiplyToRef(projection, matrix);\n        matrix.invert();\n        var nearScreenSource = TmpVectors.Vector3[0];\n        nearScreenSource.x = (sourceX / viewportWidth) * 2 - 1;\n        nearScreenSource.y = -((sourceY / viewportHeight) * 2 - 1);\n        nearScreenSource.z = ((_a = EngineStore.LastCreatedEngine) === null || _a === void 0 ? void 0 : _a.isNDCHalfZRange) ? 0 : -1;\n        // far Z need to be close but < to 1 or camera projection matrix with maxZ = 0 will NaN\n        var farScreenSource = TmpVectors.Vector3[1].copyFromFloats(nearScreenSource.x, nearScreenSource.y, 1.0 - 1e-8);\n        var nearVec3 = TmpVectors.Vector3[2];\n        var farVec3 = TmpVectors.Vector3[3];\n        Vector3._UnprojectFromInvertedMatrixToRef(nearScreenSource, matrix, nearVec3);\n        Vector3._UnprojectFromInvertedMatrixToRef(farScreenSource, matrix, farVec3);\n        this.origin.copyFrom(nearVec3);\n        farVec3.subtractToRef(nearVec3, this.direction);\n        this.direction.normalize();\n    };\n    Ray._TmpVector3 = ArrayTools.BuildArray(6, Vector3.Zero);\n    Ray._RayDistant = Ray.Zero();\n    Ray._Smallnum = 0.00000001;\n    Ray._Rayl = 10e8;\n    return Ray;\n}());\nexport { Ray };\nScene.prototype.createPickingRay = function (x, y, world, camera, cameraViewSpace) {\n    if (cameraViewSpace === void 0) { cameraViewSpace = false; }\n    var result = Ray.Zero();\n    this.createPickingRayToRef(x, y, world, result, camera, cameraViewSpace);\n    return result;\n};\nScene.prototype.createPickingRayToRef = function (x, y, world, result, camera, cameraViewSpace, enableDistantPicking) {\n    if (cameraViewSpace === void 0) { cameraViewSpace = false; }\n    if (enableDistantPicking === void 0) { enableDistantPicking = false; }\n    var engine = this.getEngine();\n    if (!camera) {\n        if (!this.activeCamera) {\n            return this;\n        }\n        camera = this.activeCamera;\n    }\n    var cameraViewport = camera.viewport;\n    var viewport = cameraViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\n    // Moving coordinates to local viewport world\n    x = x / engine.getHardwareScalingLevel() - viewport.x;\n    y = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - viewport.y - viewport.height);\n    result.update(x, y, viewport.width, viewport.height, world ? world : Matrix.IdentityReadOnly, cameraViewSpace ? Matrix.IdentityReadOnly : camera.getViewMatrix(), camera.getProjectionMatrix(), enableDistantPicking);\n    return this;\n};\nScene.prototype.createPickingRayInCameraSpace = function (x, y, camera) {\n    var result = Ray.Zero();\n    this.createPickingRayInCameraSpaceToRef(x, y, result, camera);\n    return result;\n};\nScene.prototype.createPickingRayInCameraSpaceToRef = function (x, y, result, camera) {\n    if (!PickingInfo) {\n        return this;\n    }\n    var engine = this.getEngine();\n    if (!camera) {\n        if (!this.activeCamera) {\n            throw new Error(\"Active camera not set\");\n        }\n        camera = this.activeCamera;\n    }\n    var cameraViewport = camera.viewport;\n    var viewport = cameraViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\n    var identity = Matrix.Identity();\n    // Moving coordinates to local viewport world\n    x = x / engine.getHardwareScalingLevel() - viewport.x;\n    y = y / engine.getHardwareScalingLevel() - (engine.getRenderHeight() - viewport.y - viewport.height);\n    result.update(x, y, viewport.width, viewport.height, identity, identity, camera.getProjectionMatrix());\n    return this;\n};\nScene.prototype._internalPickForMesh = function (pickingInfo, rayFunction, mesh, world, fastCheck, onlyBoundingInfo, trianglePredicate, skipBoundingInfo) {\n    var ray = rayFunction(world, mesh.enableDistantPicking);\n    var result = mesh.intersects(ray, fastCheck, trianglePredicate, onlyBoundingInfo, world, skipBoundingInfo);\n    if (!result || !result.hit) {\n        return null;\n    }\n    if (!fastCheck && pickingInfo != null && result.distance >= pickingInfo.distance) {\n        return null;\n    }\n    return result;\n};\nScene.prototype._internalPick = function (rayFunction, predicate, fastCheck, onlyBoundingInfo, trianglePredicate) {\n    if (!PickingInfo) {\n        return null;\n    }\n    var pickingInfo = null;\n    for (var meshIndex = 0; meshIndex < this.meshes.length; meshIndex++) {\n        var mesh = this.meshes[meshIndex];\n        if (predicate) {\n            if (!predicate(mesh)) {\n                continue;\n            }\n        }\n        else if (!mesh.isEnabled() || !mesh.isVisible || !mesh.isPickable) {\n            continue;\n        }\n        var world = mesh.getWorldMatrix();\n        if (mesh.hasThinInstances && mesh.thinInstanceEnablePicking) {\n            // first check if the ray intersects the whole bounding box/sphere of the mesh\n            var result = this._internalPickForMesh(pickingInfo, rayFunction, mesh, world, true, true, trianglePredicate);\n            if (result) {\n                if (onlyBoundingInfo) {\n                    // the user only asked for a bounding info check so we can return\n                    return result;\n                }\n                var tmpMatrix = TmpVectors.Matrix[1];\n                var thinMatrices = mesh.thinInstanceGetWorldMatrices();\n                for (var index = 0; index < thinMatrices.length; index++) {\n                    var thinMatrix = thinMatrices[index];\n                    thinMatrix.multiplyToRef(world, tmpMatrix);\n                    var result_1 = this._internalPickForMesh(pickingInfo, rayFunction, mesh, tmpMatrix, fastCheck, onlyBoundingInfo, trianglePredicate, true);\n                    if (result_1) {\n                        pickingInfo = result_1;\n                        pickingInfo.thinInstanceIndex = index;\n                        if (fastCheck) {\n                            return pickingInfo;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            var result = this._internalPickForMesh(pickingInfo, rayFunction, mesh, world, fastCheck, onlyBoundingInfo, trianglePredicate);\n            if (result) {\n                pickingInfo = result;\n                if (fastCheck) {\n                    return pickingInfo;\n                }\n            }\n        }\n    }\n    return pickingInfo || new PickingInfo();\n};\nScene.prototype._internalMultiPick = function (rayFunction, predicate, trianglePredicate) {\n    if (!PickingInfo) {\n        return null;\n    }\n    var pickingInfos = new Array();\n    for (var meshIndex = 0; meshIndex < this.meshes.length; meshIndex++) {\n        var mesh = this.meshes[meshIndex];\n        if (predicate) {\n            if (!predicate(mesh)) {\n                continue;\n            }\n        }\n        else if (!mesh.isEnabled() || !mesh.isVisible || !mesh.isPickable) {\n            continue;\n        }\n        var world = mesh.getWorldMatrix();\n        if (mesh.hasThinInstances && mesh.thinInstanceEnablePicking) {\n            var result = this._internalPickForMesh(null, rayFunction, mesh, world, true, true, trianglePredicate);\n            if (result) {\n                var tmpMatrix = TmpVectors.Matrix[1];\n                var thinMatrices = mesh.thinInstanceGetWorldMatrices();\n                for (var index = 0; index < thinMatrices.length; index++) {\n                    var thinMatrix = thinMatrices[index];\n                    thinMatrix.multiplyToRef(world, tmpMatrix);\n                    var result_2 = this._internalPickForMesh(null, rayFunction, mesh, tmpMatrix, false, false, trianglePredicate, true);\n                    if (result_2) {\n                        result_2.thinInstanceIndex = index;\n                        pickingInfos.push(result_2);\n                    }\n                }\n            }\n        }\n        else {\n            var result = this._internalPickForMesh(null, rayFunction, mesh, world, false, false, trianglePredicate);\n            if (result) {\n                pickingInfos.push(result);\n            }\n        }\n    }\n    return pickingInfos;\n};\nScene.prototype.pickWithBoundingInfo = function (x, y, predicate, fastCheck, camera) {\n    var _this = this;\n    if (!PickingInfo) {\n        return null;\n    }\n    var result = this._internalPick(function (world) {\n        if (!_this._tempPickingRay) {\n            _this._tempPickingRay = Ray.Zero();\n        }\n        _this.createPickingRayToRef(x, y, world, _this._tempPickingRay, camera || null);\n        return _this._tempPickingRay;\n    }, predicate, fastCheck, true);\n    if (result) {\n        result.ray = this.createPickingRay(x, y, Matrix.Identity(), camera || null);\n    }\n    return result;\n};\nScene.prototype.pick = function (x, y, predicate, fastCheck, camera, trianglePredicate, _enableDistantPicking) {\n    var _this = this;\n    if (_enableDistantPicking === void 0) { _enableDistantPicking = false; }\n    if (!PickingInfo) {\n        return null;\n    }\n    var result = this._internalPick(function (world, enableDistantPicking) {\n        if (!_this._tempPickingRay) {\n            _this._tempPickingRay = Ray.Zero();\n        }\n        _this.createPickingRayToRef(x, y, world, _this._tempPickingRay, camera || null, false, enableDistantPicking);\n        return _this._tempPickingRay;\n    }, predicate, fastCheck, false, trianglePredicate);\n    if (result) {\n        result.ray = this.createPickingRay(x, y, Matrix.Identity(), camera || null);\n    }\n    return result;\n};\nScene.prototype.pickWithRay = function (ray, predicate, fastCheck, trianglePredicate) {\n    var _this = this;\n    var result = this._internalPick(function (world) {\n        if (!_this._pickWithRayInverseMatrix) {\n            _this._pickWithRayInverseMatrix = Matrix.Identity();\n        }\n        world.invertToRef(_this._pickWithRayInverseMatrix);\n        if (!_this._cachedRayForTransform) {\n            _this._cachedRayForTransform = Ray.Zero();\n        }\n        Ray.TransformToRef(ray, _this._pickWithRayInverseMatrix, _this._cachedRayForTransform);\n        return _this._cachedRayForTransform;\n    }, predicate, fastCheck, false, trianglePredicate);\n    if (result) {\n        result.ray = ray;\n    }\n    return result;\n};\nScene.prototype.multiPick = function (x, y, predicate, camera, trianglePredicate) {\n    var _this = this;\n    return this._internalMultiPick(function (world) { return _this.createPickingRay(x, y, world, camera || null); }, predicate, trianglePredicate);\n};\nScene.prototype.multiPickWithRay = function (ray, predicate, trianglePredicate) {\n    var _this = this;\n    return this._internalMultiPick(function (world) {\n        if (!_this._pickWithRayInverseMatrix) {\n            _this._pickWithRayInverseMatrix = Matrix.Identity();\n        }\n        world.invertToRef(_this._pickWithRayInverseMatrix);\n        if (!_this._cachedRayForTransform) {\n            _this._cachedRayForTransform = Ray.Zero();\n        }\n        Ray.TransformToRef(ray, _this._pickWithRayInverseMatrix, _this._cachedRayForTransform);\n        return _this._cachedRayForTransform;\n    }, predicate, trianglePredicate);\n};\nCamera.prototype.getForwardRay = function (length, transform, origin) {\n    if (length === void 0) { length = 100; }\n    return this.getForwardRayToRef(new Ray(Vector3.Zero(), Vector3.Zero(), length), length, transform, origin);\n};\nCamera.prototype.getForwardRayToRef = function (refRay, length, transform, origin) {\n    if (length === void 0) { length = 100; }\n    if (!transform) {\n        transform = this.getWorldMatrix();\n    }\n    refRay.length = length;\n    if (!origin) {\n        refRay.origin.copyFrom(this.position);\n    }\n    else {\n        refRay.origin.copyFrom(origin);\n    }\n    TmpVectors.Vector3[2].set(0, 0, this._scene.useRightHandedSystem ? -1 : 1);\n    Vector3.TransformNormalToRef(TmpVectors.Vector3[2], transform, TmpVectors.Vector3[3]);\n    Vector3.NormalizeToRef(TmpVectors.Vector3[3], refRay.direction);\n    return refRay;\n};\n//# sourceMappingURL=ray.js.map"],"names":["Bone","_super","name","skeleton","parentBone","localMatrix","restPose","baseMatrix","index","_this","call","this","getScene","children","Array","animations","_index","_absoluteTransform","_invertedAbsoluteTransform","_scalingDeterminant","_worldTransform","_needToDecompose","_needToCompose","_linkedTransformNode","_waitingTransformNodeId","_skeleton","_localMatrix","clone","_restPose","_baseMatrix","bones","push","setParent","_updateDifferenceMatrix","Object","defineProperty","prototype","get","_compose","set","value","updateFlag","copyFrom","_markAsDirtyAndDecompose","enumerable","configurable","getClassName","getSkeleton","_parentNode","newParent","getParent","parent","getChildren","getIndex","indexOf","updateDifferenceMatrix","splice","markAsDirty","getLocalMatrix","getBaseMatrix","getRestPose","setRestPose","matrix","getBindPose","setBindPose","updateMatrix","getWorldMatrix","returnToRest","_a","localScaling","localRotation","localPosition","decompose","position","rotationQuaternion","scaling","_matrix","getInvertedAbsoluteTransform","getAbsoluteTransform","linkTransformNode","transformNode","_numBonesWithLinkedTransformNode","getTransformNode","_decompose","_localPosition","newPosition","_markAsDirtyAndCompose","getRotation","newRotation","setRotation","_localRotation","setRotationQuaternion","getScale","newScaling","setScale","animationPropertiesOverride","_localScaling","updateLocalMatrix","rootMatrix","updateChildren","multiplyToRef","invertToRef","length","determinant","_currentRenderId","_childUpdateId","_markAsDirty","translate","vec","space","tNode","lm","addAtIndex","x","y","z","wm","computeAbsoluteTransforms","tmat","_TmpMats","tvec","_TmpVecs","setTranslationFromFloats","invert","setPosition","setAbsolutePosition","scale","scaleChildren","locMat","scaleMat","_i","cm","child","multiplyAtIndex","_b","_c","getScaleToRef","result","setYawPitchRoll","yaw","pitch","roll","quat","_TmpQuat","rotMatInv","_getNegativeRotationToRef","rotMat","_rotateWithMatrix","rotate","axis","amount","rmat","setAxisAngle","angle","rotation","setRotationMatrix","rotMat2","lmat","lx","m","ly","lz","parentScale","parentScaleInv","scaleMatrix","isNaN","getPosition","pos","getPositionToRef","getAbsolutePosition","getAbsolutePositionToRef","poseMatrix","getPoseMatrix","len","i","getDirection","localAxis","getDirectionToRef","mat","normalize","getRotationToRef","getRotationQuaternionToRef","toEulerAnglesToRef","getRotationQuaternion","amat","undefined","getRotationMatrix","getRotationMatrixToRef","getAbsolutePositionFromLocal","getAbsolutePositionFromLocalToRef","getLocalPositionFromAbsolute","getLocalPositionFromAbsoluteToRef","setCurrentPoseAsRest","N","BoneIKController","mesh","bone","options","targetPosition","poleTargetPosition","poleTargetLocalOffset","poleAngle","slerpAmount","_bone1Quat","_bone1Mat","_bone2Ang","Math","PI","_maxAngle","_rightHandedSystem","_bendAxis","_slerping","_adjustRoll","_bone2","_bone1","bonePos","boneScale1","boneScale2","_bone1Length","_bone2Length","computeWorldMatrix","pos1","pos2","pos3","maxAngle","targetMesh","poleTargetMesh","poleTargetBone","bendAxis","_setMaxAngle","ang","a","b","_maxReach","sqrt","cos","update","bone1","target","poleTarget","mat1","mat2","zaxis","xaxis","yaxis","upAxis","tmpQuat","subtractToRef","c","min","acosa","acosb","angA","acos","angB","angC","_tmpVec","_updateLinkedTransformRotation","BoneLookController","upAxisSpace","adjustYaw","adjustPitch","adjustRoll","_boneQuat","_firstFrameSkipped","_fowardAxis","maxYaw","minYaw","maxPitch","minPitch","yawAxis","pitchAxis","newYawAxis","newPitchAxis","newRollAxis","_transformYawPitch","_transformYawPitchInv","_minYaw","_minYawSin","sin","_minYawCos","_maxYaw","_midYawConstraint","_getAngleDiff","_yawRange","_maxYawSin","_maxYawCos","_minPitch","_minPitchTan","tan","_maxPitch","_maxPitchTan","_tmpMat1","_tmpMat2","checkYaw","checkPitch","spaceMat","spaceMatInv","forwardAxis","rightAxis","xzlen","localTarget","atan2","newPitch","addInPlace","newYaw","_isAngleBetween","boneFwd","boneRotMat","toRotationMatrix","boneYaw","_getAngleBetween","angBtwMax","ang1","ang2","angDiff","ab","Skeleton","id","scene","needInitialSkinMatrix","_isDirty","_meshesWithPoseMatrix","_identity","_ranges","_lastAbsoluteTransformsUpdateId","_canUseTextureForBones","_uniqueId","_hasWaitingData","_parentContainer","doNotSerialize","_useTextureToStoreBoneMatrices","_animationPropertiesOverride","onBeforeComputeObservable","_scene","getUniqueId","addSkeleton","engineCaps","getEngine","getCaps","textureFloat","maxVertexTextureImageUnits","useTextureToStoreBoneMatrices","filter","getTransformMatrices","_bonesTransformMatrices","prepare","_transformMatrices","getTransformMatrixTexture","_transformMatrixTexture","toString","fullDetails","ret","concat","keys","first","name_1","getBoneIndexByName","boneIndex","cache","createAnimationRange","from","to","nBones","createRange","deleteAnimationRange","deleteFrames","deleteRange","getAnimationRange","getAnimationRanges","animationRanges","copyAnimationRange","source","rescaleAsRequired","frameOffset","_getHighestAnimationFrame","boneDict","sourceBones","skelDimensionsRatio","dimensionsAtRest","divide","boneName","sourceBone","range","highest","getHighestFrame","beginAnimation","loop","speedRatio","onAnimationEnd","MakeAnimationAdditive","referenceFrame","rangeValue","sceneAnimatables","getAllAnimatablesByTarget","rangeAnimatable","sceneAnimatable","fromFrame","toFrame","animatables","getAnimatables","animIndex","isAdditive","_registerMeshWithPoseMatrix","_unregisterMeshWithPoseMatrix","_computeTransformMatrices","targetMatrix","initialSkinMatrix","notifyObservers","mappedIndex","multiplyToArray","copyToArray","needsUpdate","Float32Array","_synchronizedWithMesh","_d","_e","isUsingTextureForMatrices","textureWidth","getSize","width","dispose","_animatables","parent_1","parentIndex","rangeName","enableBlending","blendingSpeed","forEach","animation","stopAnimation","removeSkeleton","skeletons","serialize","serializationObject","asArray","parent_2","serializedBone","parentBoneIndex","toArray","rest","linkedTransformNodeId","name_2","metadata","ranges","Parse","parsedSkeleton","parsedBone","parsedBoneIndex","data","forceUpdate","renderId","getRenderId","sortBones","visited","_sortBones","Buffer","engine","updatable","stride","postponeInternalCreation","instanced","useBytes","divisor","_isAlreadyOwned","_engine","_updatable","_instanced","_divisor","_data","_buffer","byteStride","BYTES_PER_ELEMENT","create","createVertexBuffer","kind","offset","size","byteOffset","VertexBuffer","isUpdatable","getData","getBuffer","getStrideSize","updateDynamicVertexBuffer","createDynamicVertexBuffer","_rebuild","updateDirectly","vertexCount","_increaseReferences","references","_releaseBuffer","type","normalized","takeBufferOwnership","_ownsBuffer","uniqueId","_Counter","_kind","data_1","FLOAT","Int8Array","BYTE","Uint8Array","UNSIGNED_BYTE","Int16Array","SHORT","Uint16Array","UNSIGNED_SHORT","Int32Array","INT","Uint32Array","UNSIGNED_INT","typeByteLength","GetTypeByteLength","_size","DeduceStride","_instanceDivisor","_computeHashCode","hashCode","getKind","getFloatData","totalVertices","forceCopy","tightlyPackedByteStride","count","copy_1","slice","ArrayBuffer","buffer","remainder","max","getOffset","sizeInBytes","getIsInstanced","getInstanceDivisor","callback","ForEach","UVKind","UV2Kind","UV3Kind","UV4Kind","UV5Kind","UV6Kind","NormalKind","PositionKind","ColorKind","MatricesIndicesKind","MatricesIndicesExtraKind","MatricesWeightsKind","MatricesWeightsExtraKind","TangentKind","Error","componentCount","componentType","componentIndex","dataView","DataView","byteLength","componentByteLength","componentByteOffset","_GetFloatValue","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","ColorInstanceKind","DataBuffer","capacity","is32Bits","StorageBuffer","creationFlags","_storageBuffers","_create","_bufferSize","_creationFlags","createStorageBuffer","updateStorageBuffer","read","readFromStorageBuffer","storageBuffers","pop","BaseCameraMouseWheelInput","wheelPrecisionX","wheelPrecisionY","wheelPrecisionZ","onChangedObservable","_wheelDeltaX","_wheelDeltaY","_wheelDeltaZ","_ffMultiplier","_normalize","attachControl","noPreventDefault","arguments","_wheel","pointer","event","platformScale","deltaMode","deltaY","deltaX","deltaZ","wheelDeltaY","wheelDeltaX","wheelDeltaZ","wheelDelta","preventDefault","_observer","camera","onPointerObservable","add","detachControl","remove","clear","checkInputs","getSimpleName","BaseCameraPointersInput","_currentActiveButton","buttons","element","getInputElement","previousPinchSquaredDistance","previousMultiTouchPanPosition","_pointA","_pointB","_altKey","_ctrlKey","_metaKey","_shiftKey","_buttonsPressed","_pointerInput","p","evt","isTouch","pointerType","isInVRExclusivePointerMode","button","srcElement","altKey","ctrlKey","metaKey","shiftKey","isPointerLock","offsetX","movementX","mozMovementX","webkitMovementX","msMovementX","offsetY","movementY","mozMovementY","webkitMovementY","msMovementY","onTouch","onDoubleTap","clientX","clientY","ed","pointerId","distX","distY","pinchSquaredDistance","multiTouchPanPosition","onMultiTouch","releasePointerCapture","e","_badOS","onButtonUp","setPointerCapture","onButtonDown","focus","_onLostFocus","onLostFocus","_contextMenuBind","onContextMenu","bind","addEventListener","hostWindow","getHostWindow","handler","inputElement","removeEventListener","point","ArcRotateCameraGamepadInput","gamepadRotationSensibility","gamepadMoveSensibility","_yAxisScale","manager","gamepadManager","_onGamepadConnectedObserver","onGamepadConnectedObservable","gamepad","_onGamepadDisconnectedObserver","onGamepadDisconnectedObservable","getGamepadByType","rsValues","rightStick","normalizedRX","abs","inertialAlphaOffset","normalizedRY","inertialBetaOffset","lsValues","leftStick","normalizedLY","inertialRadiusOffset","ArcRotateCameraKeyboardMoveInput","keysUp","keysDown","keysLeft","keysRight","keysReset","panningSensibility","zoomingSensibility","useAltToZoom","angularSpeed","_keys","_onCanvasBlurObserver","onCanvasBlurObservable","_onKeyboardObserver","onKeyboardObservable","info","_ctrlPressed","_altPressed","keyCode","_useCtrlForPanning","inertialPanningX","inertialPanningY","useInputToRestoreState","restoreState","ArcRotateCameraMouseWheelInput","wheelPrecision","zoomToMouseLocation","wheelDeltaPercentage","customComputeDeltaFromMouseWheel","_inertialPanning","_computeDeltaFromMouseWheelLegacyEvent","mouseWheelDelta","radius","delta","mouseWheelLegacyEvent","estimatedTargetRadius","targetInertia","inertia","Number","MAX_VALUE","_hitPlane","_zoomToMouse","setAll","_updateHitPlane","scaleInPlace","_zeroIfClose","direction","subtract","_getPosition","ray","createPickingRay","pointerX","pointerY","distance","intersectsPlane","origin","inertiaComp","lowerRadiusLimit","lowerLimit","upperRadiusLimit","upperLimit","ratio","directionToZoomLocation","ArcRotateCameraPointersInput","apply","angularSensibilityX","angularSensibilityY","pinchPrecision","pinchDeltaPercentage","useNaturalPinchZoom","pinchZoom","multiTouchPanning","multiTouchPanAndZoom","pinchInwards","_isPanClick","_twoFingerActivityCount","_isPinching","_computeMultiTouchPanning","moveDeltaX","moveDeltaY","_computePinchZoom","MinimumRadiusForPinch","pointA","pointB","pinchToPanMaxDistance","_panningMouseButton","_deviceOrientationInput","FreeCameraDeviceOrientationInput","_screenOrientationAngle","_screenQuaternion","_alpha","_beta","_gamma","_onDeviceOrientationChangedObservable","_orientationChanged","window","orientation","screen","copyFromFloats","_deviceOrientation","alpha","beta","gamma","_constantTranform","WaitForOrientationChangeAsync","timeout","Promise","res","rej","gotValue","eventHandler","setTimeout","DeviceOrientationEvent","requestPermission","then","response","catch","error","_camera","onDisposeObservable","eventHandler_1","multiplyInPlace","w","FreeCameraGamepadInput","gamepadAngularSensibility","deadzoneDelta","_cameraTransform","_deltaTransform","_vector3","_vector2","gamepads","speed","_computeLocalCameraSpeed","cameraDirection","cameraRotation","FreeCameraKeyboardMoveInput","keysUpward","keysDownward","rotationSpeed","keysRotateLeft","keysRotateRight","_localDirection","_getLocalRotation","useRightHandedSystem","getViewMatrix","_cameraTransformMatrix","_transformedDirection","getDeltaTime","_getWorldMatrixDeterminant","FreeCameraMouseInput","touchEnabled","angularSensibility","_previousPosition","onPointerMovedObservable","_allowCameraRotation","_onMouseMove","_CameraProperty","FreeCameraMouseWheelInput","_moveRelative","_rotateRelative","_moveScene","_wheelXAction","MoveRelative","_wheelXActionCoordinate","_wheelYAction","_wheelYActionCoordinate","_wheelZAction","_wheelZActionCoordinate","RotateRelative","MoveScene","_updateCamera","cameraTransformMatrix","transformedDirection","_updateCameraProperty","cameraProperty","coordinate","action","FreeCameraTouchInput","allowMouse","touchAngularSensibility","touchMoveSensibility","singleFingerRotate","_offsetX","_offsetY","_pointerPressed","_isSafari","previousPosition","isMouseEvent","_cameraRotationMatrix","setVRRigMode","rigParams","metrics","vrCameraMetrics","_rigCameras","_cameraRigParams","vrMetrics","viewport","vrWorkMatrix","vrHMatrix","leftHMatrix","vrPreViewMatrix","leftPreViewMatrix","getProjectionMatrix","_getVRProjectionMatrix","rightHMatrix","rightPreViewMatrix","multiviewEnabled","multiview","_useMultiviewToSingleView","_rigPostProcess","postProcessScaleFactor","compensateDistortion","setWebVRRigMode","vrDisplay","leftEye","getEyeParameters","rightEye","setCameraRigParameter","specs","frameData","parentCamera","_getWebVRProjectionMatrix","_getViewMatrix","_getWebVRViewMatrix","VRCameraMetrics","hResolution","vResolution","atan","vScreenSize","eyeToScreenDistance","h","hScreenSize","lensSeparationDistance","interpupillaryDistance","GetDefault","vScreenCenter","distortionK","chromaAbCorrection","lensCenterOffset","VRDeviceOrientationFreeCamera","_setRigMode","setCameraRigMode","VRExperienceHelperGazer","gazeTrackerToClone","_pointerDownOnMeshAsked","_isActionableMesh","_teleportationRequestInitiated","_teleportationBackRequestInitiated","_rotationRightAsked","_rotationLeftAsked","_dpadPressed","_activePointer","_id","_IdCounter","_gazeTracker","diameter","thickness","tessellation","bakeCurrentTransformIntoVertices","isPickable","isVisible","targetMat","specularColor","emissiveColor","backFaceCulling","material","_getForwardRay","_selectionPointerDown","_currentHit","simulatePointerDown","_selectionPointerUp","simulatePointerUp","_activatePointer","_deactivatePointer","_updatePointerDistance","_interactionsEnabled","_teleportationEnabled","VRExperienceHelperControllerGazer","webVRController","_laserPointer","height","diameterTop","diameterBottom","subdivisions","laserPointerMaterial","preloadMesh","preloadPointerPose","addChild","attachToMesh","_setLaserPointerParent","_meshAttachedObserver","_meshAttachedObservable","getForwardRay","_setLaserPointerColor","color","_setLaserPointerLightingDisabled","disabled","disableLighting","makeNotPick","root","getChildMeshes","meshChildren","laserParent","_pointingPoseNode","VRExperienceHelperCameraGazer","_getCamera","OnAfterEnteringVRObservableEvent","VRExperienceHelper","webVROptions","_webVRsupported","_webVRready","_webVRrequesting","_webVRpresenting","_fullscreenVRpresenting","enableGazeEvenWhenNoPointerLock","exitVROnDoubleTap","onEnteringVRObservable","onAfterEnteringVRObservable","onExitingVRObservable","onControllerMeshLoadedObservable","_useCustomVRButton","_teleportationRequested","_teleportActive","_floorMeshesCollection","_teleportationMode","TELEPORTATIONMODE_CONSTANTTIME","_teleportationTime","_teleportationSpeed","_rotationAllowed","_teleportBackwardsVector","_isDefaultTeleportationTarget","_teleportationFillColor","_teleportationBorderColor","_rotationAngle","_haloCenter","_padSensibilityUp","_padSensibilityDown","_leftController","_rightController","_gazeColor","_laserColor","_pickedLaserColor","_pickedGazeColor","onNewMeshSelected","onMeshSelectedWithController","onNewMeshPicked","onBeforeCameraTeleport","onAfterCameraTeleport","onSelectedMeshUnselected","teleportationEnabled","_teleportationInitialized","_interactionsRequested","_displayGaze","_displayLaserPointer","updateGazeTrackerScale","updateGazeTrackerColor","updateControllerLaserColor","requestPointerLockOnFullScreen","xrTestDone","_onResize","_moveButtonToBottomRight","exitVR","_onFullscreenChange","anyDoc","document","fullscreen","mozFullScreen","webkitIsFullScreen","msIsFullScreen","msFullscreenElement","_inputElement","_btnVR","style","top","offsetTop","offsetHeight","left","offsetLeft","offsetWidth","_updateButtonVisibility","_cachedAngularSensibility","_beforeRender","_castRayAndSelectObject","_noControllerIsActive","_cameraGazer","_onNewGamepadConnected","onleftstickchanged","stickValues","_checkTeleportWithRay","_checkTeleportBackwards","onrightstickchanged","_checkRotate","onbuttondown","buttonPressed","onbuttonup","controller","hand","_tryEnableInteractionOnController","_enableInteractionOnController","_enableTeleportationOnController","_onNewGamepadDisconnected","_workingVector","_workingQuaternion","_workingMatrix","navigator","useXR","createFallbackVRDeviceOrientationFreeCamera","createDeviceOrientationCamera","laserToggle","defaultHeight","useCustomVRButton","customVRButton","rayLength","_rayLength","_defaultHeight","positionScale","_hasEnteredVR","activeCamera","_position","_deviceOrientationCamera","minZ","maxZ","targetCamera","_existingCamera","xr","supported","Log","createDefaultXRExperienceAsync","floorMeshes","baseExperience","onStateChangedObservable","state","pointerSelection","detach","displayLaserPointer","resize","_completeVRInit","_teleportationTarget","_webVRCamera","_vrDeviceOrientationCamera","useMultiview","vrDeviceOrientationCameraMetrics","useStandingMatrix","currentVRCamera","createElement","className","title","css","SVGSVGElement","appendChild","createTextNode","getElementsByTagName","isInVRMode","disableVR","enterVR","onmsfullscreenchange","_displayVRButton","onVRDisplayChangedObservable","_onKeyDown","onPrePointerObservable","exitFullscreen","_onVRDisplayChangedBind","eventArgs","_onVRDisplayChanged","_onVrDisplayPresentChangeBind","_onVrDisplayPresentChange","_onVRRequestPresentStart","_onVRRequestPresentComplete","onVRRequestPresentStart","onVRRequestPresentComplete","_onDefaultMeshLoaded","_circleEase","setEasingMode","_teleportationEasing","vrDeviceOrientationCamera","enableTeleportation","err","getVRDevice","wasPresenting","isPresenting","vrSupported","rect","getBoundingClientRect","_btnVRDisplayed","body","enterXRAsync","renderTarget","toEulerAngles","webVRCamera","currentYRotation","deviceRotationQuaternion","currentGlobalRotation","addOnce","success","enterFullscreen","onViewMatrixChangedObservable","registerBeforeRender","exitXRAsync","unregisterBeforeRender","enableInteractions","attach","raySelectionPredicate","_floorMeshName","meshSelectionPredicate","_raySelectionPredicate","_isTeleportationFloor","addFloorMesh","floorMesh","removeFloorMesh","meshIndex","vrTeleportationOptions","floorMeshName","getMeshByName","teleportation","attached","waitForXr_1","teleportationMode","teleportationTime","teleportationSpeed","easingFunction","imageProcessingConfiguration","vignetteColor","vignetteEnabled","_postProcessMove","detachPostProcess","_createTeleportationCircles","deviceScaleFactor","onMainButtonStateChangedObservable","stateObject","displayGaze","onTriggerStateChangedObservable","gazer","teleportCamera","_rotateCamera","devicePosition","hit","pickWithRay","pickedPoint","pickedMesh","controllerType","onPadStateChangedObservable","pressed","onPadValuesChangedObservable","dynamicTexture","hasAlpha","context","getContext","beginPath","arc","fillStyle","fill","lineWidth","strokeStyle","stroke","closePath","teleportationCircleMaterial","diffuseTexture","torus","animationInnerCircle","frame","setKeys","setEasingFunction","_hideTeleportationTarget","_displayTeleportationTarget","right","animationRotation","animationRotationKeys","animationPP","vignetteWeightKeys","animationPP2","vignetteStretchKeys","vignetteWeight","vignetteStretch","samples","attachPostProcess","_moveTeleportationSelectorTo","pickNormal","_convertNormalToDirectionOfRay","getNormal","axis1","axis2","location","leftCamera","globalPosition","subtractInPlace","deviceDistanceToRoomGround","lastFrame","TELEPORTATIONMODE_CONSTANTSPEED","dist","round","animationCameraTeleportation","animationCameraTeleportationKeys","midFrame","normal","simulatePointerMove","multiplier","deltaFighting","_currentMeshSelected","_notifySelectedMeshUnselected","actionManager","changeGazeColor","changeLaserColor","gazerAsControllerGazer","setLaserColor","pickedColor","setLaserLightingState","enabled","setGazeColor","parentNode","removeChild","removeCallback","WebVRFreeCamera","_webVROptions","_vrDevice","rawPose","_specsVersion","_attached","_descendants","_deviceRoomPosition","_deviceRoomRotationQuaternion","_standingMatrix","_deviceToWorld","_worldToDevice","controllers","onControllersAttachedObservable","onPoseUpdatedFromDeviceObservable","_poseSet","rigParenting","_detachIfAttached","_oneVector","_tmpMatrix","_cache","trackPosition","controllerMeshes","defaultLightingOnControllers","_onVREnabled","initControllers","initWebVR","_frameData","enableVR","VRFrameData","onBeforeCameraRenderObservable","getDescendants","n","isController","some","_mesh","isRigCamera","node","onAfterCameraRenderObservable","getTranslationToRef","bool","initWebVRAsync","stageParameters","sittingToStandingTransform","toggleModelMatrixHandInPlace","useStandingMatrixAsync","_updateCacheWhenTrackingDisabledObserver","onBeforeRenderObservable","getControllerByName","gp","_checkInputs","getFrameData","updateFromDevice","pose","poseData","resetToCurrentRotation","resetPose","_updateRigCameras","camLeft","camRight","_correctPositionIfNotTrackPosition","isViewMatrix","_updateCache","ignoreParentClass","equals","_updateCacheCalled","setTranslation","_computeDevicePosition","viewArray","leftViewMatrix","rightViewMatrix","_webvrViewMatrix","_referencePoint","_transformedReferencePoint","addToRef","_currentTarget","_globalPosition","_markSyncedWithParent","depthNear","depthFar","projectionArray","leftProjectionMatrix","rightProjectionMatrix","_projectionMatrix","toggleProjectionMatrixHandInPlace","webVrController","defaultModel","setEnabled","controllerIndex","webVrController_1","_disableTrackPosition","initControllerMesh","loadedMesh","_lightOnControllers","activateLightOnSubMeshes_1","light","includedOnlyMeshes","attachToPoseControlledCamera","firstViveWandDetected","ArcRotateCamera","setActiveOnSceneIfNoneActive","lowerAlphaLimit","upperAlphaLimit","lowerBetaLimit","upperBetaLimit","panningDistanceLimit","panningOriginTarget","panningInertia","zoomOnFactor","targetScreenOffset","allowUpsideDown","_viewMatrix","panningAxis","mapPanning","onMeshTargetChangedObservable","checkCollisions","collisionRadius","_collisionVelocity","_newPosition","_computationVector","_onCollisionPositionChange","collisionId","collidedMesh","onCollide","cosa","sina","cosb","sinb","_getTargetPosition","up","upVector","negate","_computeViewMatrix","_collisionTriggered","_target","setTarget","inputs","addKeyboard","addMouseWheel","addPointers","_targetHost","getTarget","_upVector","_upToYMatrix","_yToUpMatrix","setMatUp","pointers","keyboard","mousewheel","_bouncingBehavior","useBouncingBehavior","addBehavior","removeBehavior","_framingBehavior","useFramingBehavior","_autoRotationBehavior","useAutoRotationBehavior","_initCache","_targetBoundingCenter","lockedTargetPosition","_getLockedTargetPosition","storeState","_storedAlpha","_storedBeta","_storedRadius","_storedTarget","_storedTargetScreenOffset","_restoreStateValues","_isSynchronizedViewMatrix","ignored","useCtrlForPanning","panningMouseButton","args","attachElement","_reset","detachElement","localDirection","_checkLimits","rebuildAnglesAndRadius","previousAlpha","pow","alphaCorrectionTurns","toBoundingCenter","allowSamePosition","cloneAlphaBetaRadius","overrideCloneAlphaBetaRadius","getBoundingInfo","boundingBox","centerWorld","newTarget","currentTarget","collisionsEnabled","coordinator","collisionCoordinator","_collider","createCollider","_radius","getNewPosition","zoomOn","meshes","doNotUpdateMaxZ","minMaxVector","focusOn","meshesOrMinMaxVectorAndDistance","meshesOrMinMaxVector","createRigCamera","cameraIndex","alphaShift","cameraRigMode","stereoHalfAngle","rigCam","rigParent","ArcRotateCameraInputsManager","Camera","orthoLeft","orthoRight","orthoBottom","orthoTop","fov","projectionPlaneTilt","mode","PERSPECTIVE_CAMERA","isIntermediate","layerMask","fovMode","FOVMODE_VERTICAL_FIXED","RIG_MODE_NONE","customRenderTargets","outputRenderTarget","onProjectionMatrixChangedObservable","onAfterCheckInputsObservable","onRestoreStateObservable","_skipRendering","_postProcesses","_activeMeshes","_computedViewMatrix","_doNotComputeProjectionMatrix","_transformMatrix","_refreshFrustumPlanes","_absoluteRotation","_isCamera","_isLeftCamera","_isRightCamera","addCamera","renderPassId","createRenderPassId","getAspectRatio","halfWidth","getRenderWidth","halfHeight","getRenderHeight","_stateStored","_storedFov","applyVerticalCorrection","rot","absoluteRotation","getActiveMeshes","isActiveMesh","isReady","completeCheck","pp","aspectRatio","renderWidth","renderHeight","_isSynchronized","_isSynchronizedProjectionMatrix","isSynchronizedWithParent","check","_ignored","_noPreventDefault","_getFirstPostProcess","ppIndex","_cascadePostProcessesToRigCams","firstPostProcess","markTextureDirty","cam","rigPostProcess","getEffectName","postProcess","insertAt","isReusable","prePassRenderer","idx","_worldMatrix","force","updateCache","freezeProjectionMatrix","projection","unfreezeProjectionMatrix","_f","_g","_h","reverseDepth","useReverseDepthBuffer","isNDCHalfZRange","getTransformationMatrix","_updateFrustumPlanes","_frustumPlanes","isInFrustum","checkRigCameras","rigCameras","result_1","isCompletelyInFrustum","transform","getForwardRayToRef","refRay","doNotRecurse","disposeMaterialAndTextures","removeCamera","cameras","i_1","releaseRenderPassId","getLeftTarget","getRightTarget","interaxialDistance","rightCamera","aspectRatioFov","_updateCameraRotationMatrix","_updateWebVRCameraRotationMatrix","RIG_MODE_STEREOSCOPIC_ANAGLYPH","_setupInputs","parentId","serializeAnimationRanges","isEnabled","GetConstructorFromName","isStereoscopicSideBySide","onClonedObservable","interaxial_distance","constructorFunc","_CreateDefaultParsedCamera","parsedCamera","construct","_waitingParentId","parse","animationIndex","parsedAnimation","internalClass","autoAnimate","autoAnimateFrom","autoAnimateTo","autoAnimateLoop","autoAnimateSpeed","ORTHOGRAPHIC_CAMERA","FOVMODE_HORIZONTAL_FIXED","RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL","RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED","RIG_MODE_STEREOSCOPIC_OVERUNDER","RIG_MODE_STEREOSCOPIC_INTERLACED","RIG_MODE_VR","RIG_MODE_WEBVR","RIG_MODE_CUSTOM","ForceAttachControlToAlwaysPreventDefault","CameraInputTypes","CameraInputsManager","attachedToElement","input","_addCheckInputs","inputToRemove","rebuildInputCheck","removeByType","inputType","fn","current","attachInput","disconnect","serializedCamera","inputsmgr","parsedInputs","_loop_1","parsedinput","this_1","_loop_2","this_2","DeviceOrientationCamera","_tmpDragQuaternion","_disablePointerInputWhenUsingDeviceOrientation","_dragFactor","_quaternionCache","addDeviceOrientation","_mouseInput","_initialQuaternion","enableHorizontalDragging","dragFactor","axisName","FreeCamera","ellipsoid","ellipsoidOffset","applyGravity","_needMoveForGravity","_oldPosition","_diffPosition","_collisionMask","newPos","addMouse","mouse","mask","_collideWithWorld","displacement","subtractFromFloatsToRef","collisionMask","actualDisplacement","gravity","_decideIfNeedsToMove","_updatePosition","FreeCameraInputsManager","_mouseWheelInput","removeMouse","removeMouseWheel","addTouch","ArcRotateCameraVRDeviceOrientationInput","alphaCorrection","gammaCorrection","_dirty","_deviceOrientationHandler","_onOrientationEvent","FlyCameraKeyboardInput","keysForward","keysBackward","FlyCameraMouseInput","buttonsYaw","buttonsPitch","buttonsRoll","activeButton","_rollObserver","rollCorrect","restoreRoll","_element","rotationChange","currentRotation","v","limit","bankedTurnLimit","_trackRoll","bankedTurn","bankingDelta","bankedTurnMultiplier","FollowCameraKeyboardMoveInput","keysHeightOffsetIncr","keysHeightOffsetDecr","keysHeightOffsetModifierAlt","keysHeightOffsetModifierCtrl","keysHeightOffsetModifierShift","keysRotationOffsetIncr","keysRotationOffsetDecr","keysRotationOffsetModifierAlt","keysRotationOffsetModifierCtrl","keysRotationOffsetModifierShift","keysRadiusIncr","keysRadiusDecr","keysRadiusModifierAlt","keysRadiusModifierCtrl","keysRadiusModifierShift","heightSensibility","rotationSensibility","radiusSensibility","_shiftPressed","_modifierHeightOffset","heightOffset","_modifierRotationOffset","rotationOffset","_modifierRadius","FollowCameraMouseWheelInput","axisControlRadius","axisControlHeight","axisControlRotation","detail","FollowCameraPointersInput","axisXControlRadius","axisXControlHeight","axisXControlRotation","axisYControlRadius","axisYControlHeight","axisYControlRotation","axisPinchControlRadius","axisPinchControlHeight","axisPinchControlRotation","warningEnable","_warningCounter","_warning","pinchDelta","FreeCameraVirtualJoystickInput","getLeftJoystick","_leftjoystick","getRightJoystick","_rightjoystick","cameraTransform","deltaTransform","deltaPosition","addVector3","setAxisForUpDown","setAxisForLeftRight","setJoystickSensibility","reverseUpDown","setJoystickColor","releaseCanvas","FlyCameraInputsManager","FlyCamera","rate","FollowCameraInputsManager","addVRDeviceOrientation","FollowCamera","ArcFollowCamera","lockedTarget","lowerRotationOffsetLimit","upperRotationOffsetLimit","lowerHeightOffsetLimit","upperHeightOffsetLimit","cameraAcceleration","maxCameraSpeed","_follow","cameraTarget","rotMatrix","absoluteRotationQuaternion","yRotation","radians","targetX","targetZ","dx","dy","dz","vx","vy","vz","_cartesianCoordinates","setMeshTarget","_meshTarget","GamepadCamera","setStereoscopicAnaglyphRigMode","AnaglyphArcRotateCamera","AnaglyphFreeCamera","AnaglyphGamepadCamera","AnaglyphUniversalCamera","setStereoscopicRigMode","isStereoscopicHoriz","isCrossEye","StereoscopicArcRotateCamera","StereoscopicFreeCamera","StereoscopicGamepadCamera","StereoscopicUniversalCamera","StereoscopicScreenUniversalCamera","distanceToProjectionPlane","distanceBetweenEyes","_distanceBetweenEyes","_distanceToProjectionPlane","newValue","setPivotMatrix","addInPlaceFromFloats","getPivotMatrix","setRowFromFloats","VirtualJoysticksCamera","addVirtualJoystick","VRDeviceOrientationArcRotateCamera","VRDeviceOrientationGamepadCamera","addGamepad","TargetCamera","_tmpUpVector","_tmpTargetVector","ignoreParentScaling","updateUpVectorFromRotation","_tmpQuaternion","noRotationConstraint","invertRotation","inverseRotationSpeed","_initialFocalDistance","_camMatrix","_defaultUp","_cachedRotationZ","_cachedQuaternionRotationZ","getFrontPosition","absolutePosition","_storedPosition","_storedRotation","_storedRotationQuaternion","getFps","vDir","directionMultiplier","needToMove","needToRotate","lengthSquared","_rotateUpVectorWithCameraRotationMatrix","parentWorldMatrix","rigCamera","leftSign","rightSign","_getRigCamPositionAndTarget","halfSpace","_TargetFocalPoint","newFocalTarget","_TargetTransformMatrix","_RigCamTransformMatrix","TouchCamera","touch","UniversalCamera","getLowestRoot","found","maxR","sqrtD","r1","r2","temp","Collider","_collisionPoint","_planeIntersectionPoint","_tempVector","_tempVector2","_tempVector3","_tempVector4","_edge","_baseToVertex","_destinationPoint","_slidePlaneNormal","_displacementVector","_retry","_basePointWorld","_velocityWorld","_normalizedVelocity","_initialize","dir","_velocity","_velocitySquaredLength","_x","_y","_z","scaleToRef","_basePoint","_velocityWorldLength","_epsilon","collisionFound","_checkPointInTriangle","pa","pb","pc","d","_canDoCollision","sphereCenter","sphereRadius","vecMin","vecMax","boxMin","boxMax","intersectBoxAASphere","_testTriangle","faceIndex","trianglePlaneArray","p1","p2","p3","hasMaterial","hostMesh","t0","embeddedInPlane","copyFromPoints","trianglePlane","isFrontFacingTo","signedDistToTrianglePlane","signedDistanceTo","normalDotVelocity","DoubleSidedCheck","t1","t","lowestRoot","f","edgeSquaredLength","edgeDotVelocity","edgeDotBaseToVertex","distToCollisionSquared","_nearestDistanceSquared","collisionResponse","intersectionPoint","_nearestDistance","_collide","pts","indices","indexStart","indexEnd","decal","invertTriangles","triangleStrip","indexA","indexB","indexC","_getResponse","vel","DefaultCollisionCoordinator","_scaledPosition","_scaledVelocity","_finalPosition","collider","maximumRetry","excludedMesh","onNewPosition","collisionIndex","divideToRef","_initialVelocity","_initialPosition","init","velocity","finalPosition","closeDistance","surroundingMeshes","subMeshes","collisionGroup","_checkCollision","IntersectionInfo","bu","bv","faceId","subMeshId","_MeshCollisionData","_checkCollisions","_collisionGroup","_surroundingMeshes","_oldPositionForCollisions","_diffPositionForCollisions","_collisionResponse","PickingInfo","_pickingUnavailable","subMeshFaceId","pickedSprite","thinInstanceIndex","originMesh","aimTransform","gripTransform","useWorldCoordinates","useVerticesNormals","isVerticesDataPresent","getIndices","normals","getVerticesData","normal0","normal1","normal2","positions","vertex1","vertex2","vertex3","p1p2","p3p2","nonUniformScaling","transposeToRef","getTextureCoordinates","uvs","uv0","uv1","uv2","CompatibilityOptions","UseOpenGLOrientationForUV","ComputeEffect","baseName","key","computeSource","defines","onCompiled","onError","onCompileObservable","onErrorObservable","onBindObservable","_wasPreviouslyReady","_isReady","_compilationError","_key","_computeSourceCodeOverride","_pipelineContext","_computeSourceCode","_rawComputeSourceCode","_shaderLanguage","_UniqueIdSeed","_entryPoint","entryPoint","_shaderStore","_shaderRepository","_includeShaderStore","hostDocument","getHostDocument","computeElement","getElementById","compute","processorOptions","split","indexParameters","isFragment","shouldUseHighPrecisionShader","processor","supportsUniformBuffers","shadersRepository","includesShadersStore","version","platformName","shaderPlatformName","processingContext","_loadShader","computeCode","migratedCommputeCode","processFinalCode","finalShaders","_useFinalCode","vertexCode","spectorName","_prepareEffect","_isReadyInternal","getPipelineContext","getCompilationError","executeWhenCompiled","func","effect","isAsync","_checkIsReady","previousPipelineContext","_processCompilationErrors","shader","optionalKey","shaderUrl","HTMLElement","substr","_loadFile","toLowerCase","atob","_getComputeShaderCode","createComputePipelineContext","_name","_prepareComputePipelineContext","_executeWhenComputeStateIsCompiled","_deleteComputePipelineContext","_getShaderCodeAndErrorLine","code","errorLine","match","lineNumber","parseInt","lines","message","LogShaderCodeOnCompilationError","lineErrorVertex","_releaseComputeEffect","RegisterShader","computeShader","ComputeShader","shaderPath","_bindings","_samplers","_contextIsDirty","UniqueId","supportComputeShaders","bindingsMapping","_context","createComputeContext","_shaderPath","_options","setTexture","texture","bindSampler","object","indexInGroupEntries","setStorageTexture","setUniformBuffer","setStorageBuffer","setTextureSampler","sampler","compareSampler","_effect","binding","shaderName","join","_cachedDefines","createComputeEffect","dispatch","_texture","setParameters","wrapU","wrapV","wrapR","anisotropicFilteringLevel","samplingMode","_comparisonFunction","computeDispatch","dispatchWhenReady","delay","resolve","bindings","textures","serializedData","rootUrl","BoundingBox","worldMatrix","vectors","center","extendSize","extendSizeWorld","directions","vectorsWorld","minimumWorld","maximumWorld","minimum","maximum","_drawWrapperFront","_drawWrapperBack","reConstruct","minX","minY","maxX","maxY","_update","factor","tmpVectors","_TmpVector3","diff","normalizeFromLength","newRadius","world","minWorld","maxWorld","isIdentity","minimizeInPlace","maximizeInPlace","frustumPlanes","IsInFrustum","IsCompletelyInFrustum","intersectsPoint","pointX","pointY","pointZ","intersectsSphere","sphere","IntersectsSphere","radiusWorld","intersectsMinMax","myMin","myMax","myMinX","myMinY","myMinZ","myMaxX","myMaxY","myMaxZ","Intersects","box0","box1","minPoint","maxPoint","vector","boundingVectors","frustumPlane","dotCoordinate","canReturnFalse","_result0","_result1","computeBoxExtents","box","r","axisOverlap","BoundingInfo","_isLocked","boundingSphere","centerOn","extend","encapsulate","encapsulateBoundingInfo","toEncapsulate","strategy","isCenterInFrustum","intersects","boundingInfo","precise","BoundingSphere","tempRadiusVector","tempVector","squareDistance","sphere0","sphere1","radiusSum","CreateFromCenterAndRadius","OctreeBlock","depth","maxDepth","creationFunc","entries","_boundingVectors","_capacity","_depth","_maxDepth","_creationFunc","_minPoint","_maxPoint","addEntry","entry","blocks","createInnerBlocks","removeEntry","entryIndex","addEntries","select","selection","allowDuplicate","concatWithNoDuplicate","intersectsRay","intersectsBoxMinMax","_CreateBlocks","worldMin","worldMax","maxBlockCapacity","currentDepth","blockSize","block","multiplyByFloats","Octree","dynamicContent","_maxBlockCapacity","_selectionContent","addMesh","removeMesh","reset","CreationFuncForMeshes","isBlocked","CreationFuncForSubMeshes","maxCapacity","component","_getComponent","OctreeSceneComponent","_addComponent","_selectionOctree","worldExtends","getWorldExtends","_submeshesOctree","bbox","checksIsEnabled","_tempRay","getActiveMeshCandidates","getActiveSubMeshCandidates","getCollidingSubMeshCandidates","getIntersectingSubMeshCandidates","register","onMeshRemovedObservable","sceneOctree","selectionOctree","onMeshImportedObservable","_getDefaultMeshCandidates","useOctreeForRenderingSelection","_getDefaultSubMeshCandidates","localRay","useOctreeForPicking","useOctreeForCollisions","rebuild","Ray","intersectionTreshold","inv","newMinimum","newMaximum","maxValue","Infinity","intersectsBox","pyth","rr","dot","intersectsTriangle","vertex0","edge1","edge2","pvec","qvec","det","invdet","bw","plane","result1","result2","intersectsAxis","intersectsMesh","fastCheck","tm","_tmpRay","TransformToRef","Transform","intersectsMeshes","results","pickInfo","sort","_comparePickingInfo","pickingInfoA","pickingInfoB","intersectionSegment","sega","segb","threshold","o","u","rsegb","_Rayl","sN","tN","D","sD","tD","_Smallnum","sc","tc","qtc","qsc","dP","viewportWidth","viewportHeight","view","enableDistantPicking","_RayDistant","Zero","unprojectRayToRef","CreateNew","CreateNewFromTo","end","num","sourceX","sourceY","nearScreenSource","farScreenSource","nearVec3","farVec3","cameraViewSpace","createPickingRayToRef","toGlobal","getHardwareScalingLevel","createPickingRayInCameraSpaceToRef","identity","pickingInfo","rayFunction","onlyBoundingInfo","trianglePredicate","skipBoundingInfo","predicate","hasThinInstances","thinInstanceEnablePicking","_internalPickForMesh","tmpMatrix","thinMatrices","thinInstanceGetWorldMatrices","pickingInfos","result_2","_internalPick","_tempPickingRay","_enableDistantPicking","_pickWithRayInverseMatrix","_cachedRayForTransform","_internalMultiPick"],"sourceRoot":""}