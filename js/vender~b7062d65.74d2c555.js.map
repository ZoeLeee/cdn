{"version":3,"file":"js/vender~b7062d65.74d2c555.js","mappings":"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","sources":["webpack:///../../../node_modules/@babylonjs/core/Events/clipboardEvents.js","webpack:///../../../node_modules/@babylonjs/core/Events/deviceInputEvents.js","webpack:///../../../node_modules/@babylonjs/core/Events/keyboardEvents.js","webpack:///../../../node_modules/@babylonjs/core/Events/pointerEvents.js","webpack:///../../../node_modules/@babylonjs/core/Gamepads/Controllers/poseEnabledController.js","webpack:///../../../node_modules/@babylonjs/core/Gamepads/Controllers/webVRController.js","webpack:///../../../node_modules/@babylonjs/core/Gamepads/dualShockGamepad.js","webpack:///../../../node_modules/@babylonjs/core/Gamepads/gamepad.js","webpack:///../../../node_modules/@babylonjs/core/Gamepads/gamepadManager.js","webpack:///../../../node_modules/@babylonjs/core/Gamepads/gamepadSceneComponent.js","webpack:///../../../node_modules/@babylonjs/core/Gamepads/Controllers/daydreamController.js","webpack:///../../../node_modules/@babylonjs/core/Gamepads/Controllers/gearVRController.js","webpack:///../../../node_modules/@babylonjs/core/Gamepads/Controllers/genericController.js","webpack:///../../../node_modules/@babylonjs/core/Gamepads/Controllers/oculusTouchController.js","webpack:///../../../node_modules/@babylonjs/core/Gamepads/Controllers/viveController.js","webpack:///../../../node_modules/@babylonjs/core/Gamepads/Controllers/windowsMotionController.js","webpack:///../../../node_modules/@babylonjs/core/Gamepads/xboxGamepad.js","webpack:///../../../node_modules/@babylonjs/core/Gizmos/axisDragGizmo.js","webpack:///../../../node_modules/@babylonjs/core/Gizmos/gizmo.js","webpack:///../../../node_modules/@babylonjs/core/Gizmos/axisScaleGizmo.js","webpack:///../../../node_modules/@babylonjs/core/Gizmos/boundingBoxGizmo.js","webpack:///../../../node_modules/@babylonjs/core/Gizmos/planeRotationGizmo.js","webpack:///../../../node_modules/@babylonjs/core/Gizmos/rotationGizmo.js","webpack:///../../../node_modules/@babylonjs/core/Gizmos/planeDragGizmo.js","webpack:///../../../node_modules/@babylonjs/core/Gizmos/positionGizmo.js","webpack:///../../../node_modules/@babylonjs/core/Gizmos/scaleGizmo.js","webpack:///../../../node_modules/@babylonjs/core/Gizmos/gizmoManager.js","webpack:///../../../node_modules/@babylonjs/core/Gizmos/lightGizmo.js","webpack:///../../../node_modules/@babylonjs/core/Gizmos/cameraGizmo.js","webpack:///../../../node_modules/@babylonjs/core/Helpers/environmentHelper.js","webpack:///../../../node_modules/@babylonjs/core/Helpers/textureDome.js","webpack:///../../../node_modules/@babylonjs/core/Helpers/photoDome.js","webpack:///../../../node_modules/@babylonjs/core/Helpers/sceneHelpers.js","webpack:///../../../node_modules/@babylonjs/core/Helpers/videoDome.js","webpack:///../../../node_modules/@babylonjs/core/Inputs/scene.inputManager.js","webpack:///../../../node_modules/@babylonjs/core/Instrumentation/engineInstrumentation.js","webpack:///../../../node_modules/@babylonjs/core/Instrumentation/sceneInstrumentation.js","webpack:///../../../node_modules/@babylonjs/core/Instrumentation/timeToken.js","webpack:///../../../node_modules/@babylonjs/core/Layers/effectLayer.js","webpack:///../../../node_modules/@babylonjs/core/Layers/effectLayerSceneComponent.js","webpack:///../../../node_modules/@babylonjs/core/Layers/glowLayer.js","webpack:///../../../node_modules/@babylonjs/core/Layers/highlightLayer.js","webpack:///../../../node_modules/@babylonjs/core/Layers/layer.js","webpack:///../../../node_modules/@babylonjs/core/Layers/layerSceneComponent.js"],"sourcesContent":["/**\n * Gather the list of clipboard event types as constants.\n */\nvar ClipboardEventTypes = /** @class */ (function () {\n    function ClipboardEventTypes() {\n    }\n    /**\n     * The clipboard event is fired when a copy command is active (pressed).\n     */\n    ClipboardEventTypes.COPY = 0x01; //\n    /**\n     *  The clipboard event is fired when a cut command is active (pressed).\n     */\n    ClipboardEventTypes.CUT = 0x02;\n    /**\n     * The clipboard event is fired when a paste command is active (pressed).\n     */\n    ClipboardEventTypes.PASTE = 0x03;\n    return ClipboardEventTypes;\n}());\nexport { ClipboardEventTypes };\n/**\n * This class is used to store clipboard related info for the onClipboardObservable event.\n */\nvar ClipboardInfo = /** @class */ (function () {\n    /**\n     *Creates an instance of ClipboardInfo.\n     * @param type Defines the type of event (BABYLON.ClipboardEventTypes)\n     * @param event Defines the related dom event\n     */\n    function ClipboardInfo(\n    /**\n     * Defines the type of event (BABYLON.ClipboardEventTypes)\n     */\n    type, \n    /**\n     * Defines the related dom event\n     */\n    event) {\n        this.type = type;\n        this.event = event;\n    }\n    /**\n     *  Get the clipboard event's type from the keycode.\n     * @param keyCode Defines the keyCode for the current keyboard event.\n     * @return {number}\n     */\n    ClipboardInfo.GetTypeFromCharacter = function (keyCode) {\n        var charCode = keyCode;\n        //TODO: add codes for extended ASCII\n        switch (charCode) {\n            case 67:\n                return ClipboardEventTypes.COPY;\n            case 86:\n                return ClipboardEventTypes.PASTE;\n            case 88:\n                return ClipboardEventTypes.CUT;\n            default:\n                return -1;\n        }\n    };\n    return ClipboardInfo;\n}());\nexport { ClipboardInfo };\n//# sourceMappingURL=clipboardEvents.js.map","/**\n * Event Types\n */\nexport var DeviceInputEventType;\n(function (DeviceInputEventType) {\n    // Pointers\n    /** PointerMove */\n    DeviceInputEventType[DeviceInputEventType[\"PointerMove\"] = 0] = \"PointerMove\";\n    /** PointerDown */\n    DeviceInputEventType[DeviceInputEventType[\"PointerDown\"] = 1] = \"PointerDown\";\n    /** PointerUp */\n    DeviceInputEventType[DeviceInputEventType[\"PointerUp\"] = 2] = \"PointerUp\";\n})(DeviceInputEventType || (DeviceInputEventType = {}));\n/**\n * Constants used for Events\n */\nvar EventConstants = /** @class */ (function () {\n    function EventConstants() {\n    }\n    /**\n     * Pixel delta for Wheel Events (Default)\n     */\n    EventConstants.DOM_DELTA_PIXEL = 0x00;\n    /**\n     * Line delta for Wheel Events\n     */\n    EventConstants.DOM_DELTA_LINE = 0x01;\n    /**\n     * Page delta for Wheel Events\n     */\n    EventConstants.DOM_DELTA_PAGE = 0x02;\n    return EventConstants;\n}());\nexport { EventConstants };\n//# sourceMappingURL=deviceInputEvents.js.map","import { __extends } from \"tslib\";\n/**\n * Gather the list of keyboard event types as constants.\n */\nvar KeyboardEventTypes = /** @class */ (function () {\n    function KeyboardEventTypes() {\n    }\n    /**\n     * The keydown event is fired when a key becomes active (pressed).\n     */\n    KeyboardEventTypes.KEYDOWN = 0x01;\n    /**\n     * The keyup event is fired when a key has been released.\n     */\n    KeyboardEventTypes.KEYUP = 0x02;\n    return KeyboardEventTypes;\n}());\nexport { KeyboardEventTypes };\n/**\n * This class is used to store keyboard related info for the onKeyboardObservable event.\n */\nvar KeyboardInfo = /** @class */ (function () {\n    /**\n     * Instantiates a new keyboard info.\n     * This class is used to store keyboard related info for the onKeyboardObservable event.\n     * @param type Defines the type of event (KeyboardEventTypes)\n     * @param event Defines the related dom event\n     */\n    function KeyboardInfo(\n    /**\n     * Defines the type of event (KeyboardEventTypes)\n     */\n    type, \n    /**\n     * Defines the related dom event\n     */\n    event) {\n        this.type = type;\n        this.event = event;\n    }\n    return KeyboardInfo;\n}());\nexport { KeyboardInfo };\n/**\n * This class is used to store keyboard related info for the onPreKeyboardObservable event.\n * Set the skipOnKeyboardObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onKeyboardObservable\n */\nvar KeyboardInfoPre = /** @class */ (function (_super) {\n    __extends(KeyboardInfoPre, _super);\n    /**\n     * Instantiates a new keyboard pre info.\n     * This class is used to store keyboard related info for the onPreKeyboardObservable event.\n     * @param type Defines the type of event (KeyboardEventTypes)\n     * @param event Defines the related dom event\n     */\n    function KeyboardInfoPre(\n    /**\n     * Defines the type of event (KeyboardEventTypes)\n     */\n    type, \n    /**\n     * Defines the related dom event\n     */\n    event) {\n        var _this = _super.call(this, type, event) || this;\n        _this.type = type;\n        _this.event = event;\n        _this.skipOnKeyboardObservable = false;\n        return _this;\n    }\n    Object.defineProperty(KeyboardInfoPre.prototype, \"skipOnPointerObservable\", {\n        /**\n         * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\n         * @deprecated use skipOnKeyboardObservable property instead\n         */\n        get: function () {\n            return this.skipOnKeyboardObservable;\n        },\n        set: function (value) {\n            this.skipOnKeyboardObservable = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return KeyboardInfoPre;\n}(KeyboardInfo));\nexport { KeyboardInfoPre };\n//# sourceMappingURL=keyboardEvents.js.map","import { __extends } from \"tslib\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\n/**\n * Gather the list of pointer event types as constants.\n */\nvar PointerEventTypes = /** @class */ (function () {\n    function PointerEventTypes() {\n    }\n    /**\n     * The pointerdown event is fired when a pointer becomes active. For mouse, it is fired when the device transitions from no buttons depressed to at least one button depressed. For touch, it is fired when physical contact is made with the digitizer. For pen, it is fired when the stylus makes physical contact with the digitizer.\n     */\n    PointerEventTypes.POINTERDOWN = 0x01;\n    /**\n     * The pointerup event is fired when a pointer is no longer active.\n     */\n    PointerEventTypes.POINTERUP = 0x02;\n    /**\n     * The pointermove event is fired when a pointer changes coordinates.\n     */\n    PointerEventTypes.POINTERMOVE = 0x04;\n    /**\n     * The pointerwheel event is fired when a mouse wheel has been rotated.\n     */\n    PointerEventTypes.POINTERWHEEL = 0x08;\n    /**\n     * The pointerpick event is fired when a mesh or sprite has been picked by the pointer.\n     */\n    PointerEventTypes.POINTERPICK = 0x10;\n    /**\n     * The pointertap event is fired when a the object has been touched and released without drag.\n     */\n    PointerEventTypes.POINTERTAP = 0x20;\n    /**\n     * The pointerdoubletap event is fired when a the object has been touched and released twice without drag.\n     */\n    PointerEventTypes.POINTERDOUBLETAP = 0x40;\n    return PointerEventTypes;\n}());\nexport { PointerEventTypes };\n/**\n * Base class of pointer info types.\n */\nvar PointerInfoBase = /** @class */ (function () {\n    /**\n     * Instantiates the base class of pointers info.\n     * @param type Defines the type of event (PointerEventTypes)\n     * @param event Defines the related dom event\n     */\n    function PointerInfoBase(\n    /**\n     * Defines the type of event (PointerEventTypes)\n     */\n    type, \n    /**\n     * Defines the related dom event\n     */\n    event) {\n        this.type = type;\n        this.event = event;\n    }\n    return PointerInfoBase;\n}());\nexport { PointerInfoBase };\n/**\n * This class is used to store pointer related info for the onPrePointerObservable event.\n * Set the skipOnPointerObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onPointerObservable\n */\nvar PointerInfoPre = /** @class */ (function (_super) {\n    __extends(PointerInfoPre, _super);\n    /**\n     * Instantiates a PointerInfoPre to store pointer related info to the onPrePointerObservable event.\n     * @param type Defines the type of event (PointerEventTypes)\n     * @param event Defines the related dom event\n     * @param localX Defines the local x coordinates of the pointer when the event occured\n     * @param localY Defines the local y coordinates of the pointer when the event occured\n     */\n    function PointerInfoPre(type, event, localX, localY) {\n        var _this = _super.call(this, type, event) || this;\n        /**\n         * Ray from a pointer if available (eg. 6dof controller)\n         */\n        _this.ray = null;\n        _this.skipOnPointerObservable = false;\n        _this.localPosition = new Vector2(localX, localY);\n        return _this;\n    }\n    return PointerInfoPre;\n}(PointerInfoBase));\nexport { PointerInfoPre };\n/**\n * This type contains all the data related to a pointer event in Babylon.js.\n * The event member is an instance of PointerEvent for all types except PointerWheel and is of type MouseWheelEvent when type equals PointerWheel. The different event types can be found in the PointerEventTypes class.\n */\nvar PointerInfo = /** @class */ (function (_super) {\n    __extends(PointerInfo, _super);\n    /**\n     * Instantiates a PointerInfo to store pointer related info to the onPointerObservable event.\n     * @param type Defines the type of event (PointerEventTypes)\n     * @param event Defines the related dom event\n     * @param pickInfo Defines the picking info associated to the info (if any)\\\n     */\n    function PointerInfo(type, event, \n    /**\n     * Defines the picking info associated to the info (if any)\\\n     */\n    pickInfo) {\n        var _this = _super.call(this, type, event) || this;\n        _this.pickInfo = pickInfo;\n        return _this;\n    }\n    return PointerInfo;\n}(PointerInfoBase));\nexport { PointerInfo };\n//# sourceMappingURL=pointerEvents.js.map","import { __extends } from \"tslib\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../../Maths/math.vector.js\";\nimport { Ray } from \"../../Culling/ray.js\";\nimport { EngineStore } from \"../../Engines/engineStore.js\";\nimport { Gamepad } from \"../../Gamepads/gamepad.js\";\n/**\n * Defines the types of pose enabled controllers that are supported\n */\nexport var PoseEnabledControllerType;\n(function (PoseEnabledControllerType) {\n    /**\n     * HTC Vive\n     */\n    PoseEnabledControllerType[PoseEnabledControllerType[\"VIVE\"] = 0] = \"VIVE\";\n    /**\n     * Oculus Rift\n     */\n    PoseEnabledControllerType[PoseEnabledControllerType[\"OCULUS\"] = 1] = \"OCULUS\";\n    /**\n     * Windows mixed reality\n     */\n    PoseEnabledControllerType[PoseEnabledControllerType[\"WINDOWS\"] = 2] = \"WINDOWS\";\n    /**\n     * Samsung gear VR\n     */\n    PoseEnabledControllerType[PoseEnabledControllerType[\"GEAR_VR\"] = 3] = \"GEAR_VR\";\n    /**\n     * Google Daydream\n     */\n    PoseEnabledControllerType[PoseEnabledControllerType[\"DAYDREAM\"] = 4] = \"DAYDREAM\";\n    /**\n     * Generic\n     */\n    PoseEnabledControllerType[PoseEnabledControllerType[\"GENERIC\"] = 5] = \"GENERIC\";\n})(PoseEnabledControllerType || (PoseEnabledControllerType = {}));\n/**\n * Defines the PoseEnabledControllerHelper object that is used initialize a gamepad as the controller type it is specified as (eg. windows mixed reality controller)\n */\nvar PoseEnabledControllerHelper = /** @class */ (function () {\n    function PoseEnabledControllerHelper() {\n    }\n    /**\n     * Initializes a gamepad as the controller type it is specified as (eg. windows mixed reality controller)\n     * @param vrGamepad the gamepad to initialized\n     * @returns a vr controller of the type the gamepad identified as\n     */\n    PoseEnabledControllerHelper.InitiateController = function (vrGamepad) {\n        for (var _i = 0, _a = this._ControllerFactories; _i < _a.length; _i++) {\n            var factory = _a[_i];\n            if (factory.canCreate(vrGamepad)) {\n                return factory.create(vrGamepad);\n            }\n        }\n        if (this._DefaultControllerFactory) {\n            return this._DefaultControllerFactory(vrGamepad);\n        }\n        throw \"The type of gamepad you are trying to load needs to be imported first or is not supported.\";\n    };\n    /** @hidden */\n    PoseEnabledControllerHelper._ControllerFactories = [];\n    /** @hidden */\n    PoseEnabledControllerHelper._DefaultControllerFactory = null;\n    return PoseEnabledControllerHelper;\n}());\nexport { PoseEnabledControllerHelper };\n/**\n * Defines the PoseEnabledController object that contains state of a vr capable controller\n */\nvar PoseEnabledController = /** @class */ (function (_super) {\n    __extends(PoseEnabledController, _super);\n    /**\n     * Creates a new PoseEnabledController from a gamepad\n     * @param browserGamepad the gamepad that the PoseEnabledController should be created from\n     */\n    function PoseEnabledController(browserGamepad) {\n        var _this = _super.call(this, browserGamepad.id, browserGamepad.index, browserGamepad) || this;\n        /**\n         * If the controller is used in a webXR session\n         */\n        _this.isXR = false;\n        // Represents device position and rotation in room space. Should only be used to help calculate babylon space values\n        _this._deviceRoomPosition = Vector3.Zero();\n        _this._deviceRoomRotationQuaternion = new Quaternion();\n        /**\n         * The device position in babylon space\n         */\n        _this.devicePosition = Vector3.Zero();\n        /**\n         * The device rotation in babylon space\n         */\n        _this.deviceRotationQuaternion = new Quaternion();\n        /**\n         * The scale factor of the device in babylon space\n         */\n        _this.deviceScaleFactor = 1;\n        // Used to convert 6dof controllers to 3dof\n        _this._trackPosition = true;\n        _this._maxRotationDistFromHeadset = Math.PI / 5;\n        _this._draggedRoomRotation = 0;\n        _this._leftHandSystemQuaternion = new Quaternion();\n        /**\n         * Internal, matrix used to convert room space to babylon space\n         * @hidden\n         */\n        _this._deviceToWorld = Matrix.Identity();\n        /**\n         * Node to be used when casting a ray from the controller\n         * @hidden\n         */\n        _this._pointingPoseNode = null;\n        _this._workingMatrix = Matrix.Identity();\n        /**\n         * @hidden\n         */\n        _this._meshAttachedObservable = new Observable();\n        _this.type = Gamepad.POSE_ENABLED;\n        _this.controllerType = PoseEnabledControllerType.GENERIC;\n        _this.position = Vector3.Zero();\n        _this.rotationQuaternion = new Quaternion();\n        _this._calculatedPosition = Vector3.Zero();\n        _this._calculatedRotation = new Quaternion();\n        Quaternion.RotationYawPitchRollToRef(Math.PI, 0, 0, _this._leftHandSystemQuaternion);\n        return _this;\n    }\n    /**\n     * @param fixedPosition\n     * @hidden\n     */\n    PoseEnabledController.prototype._disableTrackPosition = function (fixedPosition) {\n        if (this._trackPosition) {\n            this._calculatedPosition.copyFrom(fixedPosition);\n            this._trackPosition = false;\n        }\n    };\n    /**\n     * Updates the state of the pose enabled controller and mesh based on the current position and rotation of the controller\n     */\n    PoseEnabledController.prototype.update = function () {\n        _super.prototype.update.call(this);\n        this._updatePoseAndMesh();\n    };\n    /**\n     * Updates only the pose device and mesh without doing any button event checking\n     */\n    PoseEnabledController.prototype._updatePoseAndMesh = function () {\n        if (this.isXR) {\n            return;\n        }\n        var pose = this.browserGamepad.pose;\n        this.updateFromDevice(pose);\n        if (!this._trackPosition &&\n            EngineStore.LastCreatedScene &&\n            EngineStore.LastCreatedScene.activeCamera &&\n            EngineStore.LastCreatedScene.activeCamera.devicePosition) {\n            var camera = EngineStore.LastCreatedScene.activeCamera;\n            camera._computeDevicePosition();\n            this._deviceToWorld.setTranslation(camera.devicePosition);\n            if (camera.deviceRotationQuaternion) {\n                camera._deviceRoomRotationQuaternion.toEulerAnglesToRef(TmpVectors.Vector3[0]);\n                // Find the radian distance away that the headset is from the controllers rotation\n                var distanceAway = Math.atan2(Math.sin(TmpVectors.Vector3[0].y - this._draggedRoomRotation), Math.cos(TmpVectors.Vector3[0].y - this._draggedRoomRotation));\n                if (Math.abs(distanceAway) > this._maxRotationDistFromHeadset) {\n                    // Only rotate enouph to be within the _maxRotationDistFromHeadset\n                    var rotationAmount = distanceAway - (distanceAway < 0 ? -this._maxRotationDistFromHeadset : this._maxRotationDistFromHeadset);\n                    this._draggedRoomRotation += rotationAmount;\n                    // Rotate controller around headset\n                    var sin = Math.sin(-rotationAmount);\n                    var cos = Math.cos(-rotationAmount);\n                    this._calculatedPosition.x = this._calculatedPosition.x * cos - this._calculatedPosition.z * sin;\n                    this._calculatedPosition.z = this._calculatedPosition.x * sin + this._calculatedPosition.z * cos;\n                }\n            }\n        }\n        Vector3.TransformCoordinatesToRef(this._calculatedPosition, this._deviceToWorld, this.devicePosition);\n        this._deviceToWorld.getRotationMatrixToRef(this._workingMatrix);\n        Quaternion.FromRotationMatrixToRef(this._workingMatrix, this.deviceRotationQuaternion);\n        this.deviceRotationQuaternion.multiplyInPlace(this._calculatedRotation);\n        if (this._mesh) {\n            this._mesh.position.copyFrom(this.devicePosition);\n            if (this._mesh.rotationQuaternion) {\n                this._mesh.rotationQuaternion.copyFrom(this.deviceRotationQuaternion);\n            }\n        }\n    };\n    /**\n     * Updates the state of the pose enbaled controller based on the raw pose data from the device\n     * @param poseData raw pose fromthe device\n     */\n    PoseEnabledController.prototype.updateFromDevice = function (poseData) {\n        if (this.isXR) {\n            return;\n        }\n        if (poseData) {\n            this.rawPose = poseData;\n            if (poseData.position) {\n                this._deviceRoomPosition.copyFromFloats(poseData.position[0], poseData.position[1], -poseData.position[2]);\n                if (this._mesh && this._mesh.getScene().useRightHandedSystem) {\n                    this._deviceRoomPosition.z *= -1;\n                }\n                if (this._trackPosition) {\n                    this._deviceRoomPosition.scaleToRef(this.deviceScaleFactor, this._calculatedPosition);\n                }\n                this._calculatedPosition.addInPlace(this.position);\n            }\n            var pose = this.rawPose;\n            if (poseData.orientation && pose.orientation && pose.orientation.length === 4) {\n                this._deviceRoomRotationQuaternion.copyFromFloats(pose.orientation[0], pose.orientation[1], -pose.orientation[2], -pose.orientation[3]);\n                if (this._mesh) {\n                    if (this._mesh.getScene().useRightHandedSystem) {\n                        this._deviceRoomRotationQuaternion.z *= -1;\n                        this._deviceRoomRotationQuaternion.w *= -1;\n                    }\n                    else {\n                        this._deviceRoomRotationQuaternion.multiplyToRef(this._leftHandSystemQuaternion, this._deviceRoomRotationQuaternion);\n                    }\n                }\n                // if the camera is set, rotate to the camera's rotation\n                this._deviceRoomRotationQuaternion.multiplyToRef(this.rotationQuaternion, this._calculatedRotation);\n            }\n        }\n    };\n    /**\n     * Attaches a mesh to the controller\n     * @param mesh the mesh to be attached\n     */\n    PoseEnabledController.prototype.attachToMesh = function (mesh) {\n        if (this._mesh) {\n            this._mesh.parent = null;\n        }\n        this._mesh = mesh;\n        if (this._poseControlledCamera) {\n            this._mesh.parent = this._poseControlledCamera;\n        }\n        if (!this._mesh.rotationQuaternion) {\n            this._mesh.rotationQuaternion = new Quaternion();\n        }\n        // Sync controller mesh and pointing pose node's state with controller, this is done to avoid a frame where position is 0,0,0 when attaching mesh\n        if (!this.isXR) {\n            this._updatePoseAndMesh();\n            if (this._pointingPoseNode) {\n                var parents = [];\n                var obj = this._pointingPoseNode;\n                while (obj.parent) {\n                    parents.push(obj.parent);\n                    obj = obj.parent;\n                }\n                parents.reverse().forEach(function (p) {\n                    p.computeWorldMatrix(true);\n                });\n            }\n        }\n        this._meshAttachedObservable.notifyObservers(mesh);\n    };\n    /**\n     * Attaches the controllers mesh to a camera\n     * @param camera the camera the mesh should be attached to\n     */\n    PoseEnabledController.prototype.attachToPoseControlledCamera = function (camera) {\n        this._poseControlledCamera = camera;\n        if (this._mesh) {\n            this._mesh.parent = this._poseControlledCamera;\n        }\n    };\n    /**\n     * Disposes of the controller\n     */\n    PoseEnabledController.prototype.dispose = function () {\n        if (this._mesh) {\n            this._mesh.dispose();\n        }\n        this._mesh = null;\n        _super.prototype.dispose.call(this);\n    };\n    Object.defineProperty(PoseEnabledController.prototype, \"mesh\", {\n        /**\n         * The mesh that is attached to the controller\n         */\n        get: function () {\n            return this._mesh;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the ray of the controller in the direction the controller is pointing\n     * @param length the length the resulting ray should be\n     * @returns a ray in the direction the controller is pointing\n     */\n    PoseEnabledController.prototype.getForwardRay = function (length) {\n        if (length === void 0) { length = 100; }\n        if (!this.mesh) {\n            return new Ray(Vector3.Zero(), new Vector3(0, 0, 1), length);\n        }\n        var m = this._pointingPoseNode ? this._pointingPoseNode.getWorldMatrix() : this.mesh.getWorldMatrix();\n        var origin = m.getTranslation();\n        var forward = new Vector3(0, 0, -1);\n        var forwardWorld = Vector3.TransformNormal(forward, m);\n        var direction = Vector3.Normalize(forwardWorld);\n        return new Ray(origin, direction, length);\n    };\n    /**\n     * Name of the child mesh that can be used to cast a ray from the controller\n     */\n    PoseEnabledController.POINTING_POSE = \"POINTING_POSE\";\n    return PoseEnabledController;\n}(Gamepad));\nexport { PoseEnabledController };\n//# sourceMappingURL=poseEnabledController.js.map","import { __extends } from \"tslib\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { PoseEnabledController } from \"./poseEnabledController.js\";\n/**\n * Defines the WebVRController object that represents controllers tracked in 3D space\n * @deprecated Use WebXR instead\n */\nvar WebVRController = /** @class */ (function (_super) {\n    __extends(WebVRController, _super);\n    /**\n     * Creates a new WebVRController from a gamepad\n     * @param vrGamepad the gamepad that the WebVRController should be created from\n     */\n    function WebVRController(vrGamepad) {\n        var _this = _super.call(this, vrGamepad) || this;\n        // Observables\n        /**\n         * Fired when the trigger state has changed\n         */\n        _this.onTriggerStateChangedObservable = new Observable();\n        /**\n         * Fired when the main button state has changed\n         */\n        _this.onMainButtonStateChangedObservable = new Observable();\n        /**\n         * Fired when the secondary button state has changed\n         */\n        _this.onSecondaryButtonStateChangedObservable = new Observable();\n        /**\n         * Fired when the pad state has changed\n         */\n        _this.onPadStateChangedObservable = new Observable();\n        /**\n         * Fired when controllers stick values have changed\n         */\n        _this.onPadValuesChangedObservable = new Observable();\n        /**\n         * X and Y axis corresponding to the controllers joystick\n         */\n        _this.pad = { x: 0, y: 0 };\n        // avoid GC, store state in a tmp object\n        _this._changes = {\n            pressChanged: false,\n            touchChanged: false,\n            valueChanged: false,\n            changed: false,\n        };\n        _this._buttons = new Array(vrGamepad.buttons.length);\n        _this.hand = vrGamepad.hand;\n        return _this;\n    }\n    /**\n     * Fired when a controller button's state has changed\n     * @param callback the callback containing the button that was modified\n     */\n    WebVRController.prototype.onButtonStateChange = function (callback) {\n        this._onButtonStateChange = callback;\n    };\n    Object.defineProperty(WebVRController.prototype, \"defaultModel\", {\n        /**\n         * The default controller model for the controller\n         */\n        get: function () {\n            return this._defaultModel;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Updates the state of the controller and mesh based on the current position and rotation of the controller\n     */\n    WebVRController.prototype.update = function () {\n        _super.prototype.update.call(this);\n        for (var index = 0; index < this._buttons.length; index++) {\n            this._setButtonValue(this.browserGamepad.buttons[index], this._buttons[index], index);\n        }\n        if (this.leftStick.x !== this.pad.x || this.leftStick.y !== this.pad.y) {\n            this.pad.x = this.leftStick.x;\n            this.pad.y = this.leftStick.y;\n            this.onPadValuesChangedObservable.notifyObservers(this.pad);\n        }\n    };\n    WebVRController.prototype._setButtonValue = function (newState, currentState, buttonIndex) {\n        if (!newState) {\n            newState = {\n                pressed: false,\n                touched: false,\n                value: 0,\n            };\n        }\n        if (!currentState) {\n            this._buttons[buttonIndex] = {\n                pressed: newState.pressed,\n                touched: newState.touched,\n                value: newState.value,\n            };\n            return;\n        }\n        this._checkChanges(newState, currentState);\n        if (this._changes.changed) {\n            this._onButtonStateChange && this._onButtonStateChange(this.index, buttonIndex, newState);\n            this._handleButtonChange(buttonIndex, newState, this._changes);\n        }\n        this._buttons[buttonIndex].pressed = newState.pressed;\n        this._buttons[buttonIndex].touched = newState.touched;\n        // oculus triggers are never 0, thou not touched.\n        this._buttons[buttonIndex].value = newState.value < 0.00000001 ? 0 : newState.value;\n    };\n    WebVRController.prototype._checkChanges = function (newState, currentState) {\n        this._changes.pressChanged = newState.pressed !== currentState.pressed;\n        this._changes.touchChanged = newState.touched !== currentState.touched;\n        this._changes.valueChanged = newState.value !== currentState.value;\n        this._changes.changed = this._changes.pressChanged || this._changes.touchChanged || this._changes.valueChanged;\n        return this._changes;\n    };\n    /**\n     * Disposes of th webVRController\n     */\n    WebVRController.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._defaultModel = null;\n        this.onTriggerStateChangedObservable.clear();\n        this.onMainButtonStateChangedObservable.clear();\n        this.onSecondaryButtonStateChangedObservable.clear();\n        this.onPadStateChangedObservable.clear();\n        this.onPadValuesChangedObservable.clear();\n    };\n    return WebVRController;\n}(PoseEnabledController));\nexport { WebVRController };\n//# sourceMappingURL=webVRController.js.map","import { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Gamepad } from \"./gamepad.js\";\n/**\n * Defines supported buttons for DualShock compatible gamepads\n */\nexport var DualShockButton;\n(function (DualShockButton) {\n    /** Cross */\n    DualShockButton[DualShockButton[\"Cross\"] = 0] = \"Cross\";\n    /** Circle */\n    DualShockButton[DualShockButton[\"Circle\"] = 1] = \"Circle\";\n    /** Square */\n    DualShockButton[DualShockButton[\"Square\"] = 2] = \"Square\";\n    /** Triangle */\n    DualShockButton[DualShockButton[\"Triangle\"] = 3] = \"Triangle\";\n    /** L1 */\n    DualShockButton[DualShockButton[\"L1\"] = 4] = \"L1\";\n    /** R1 */\n    DualShockButton[DualShockButton[\"R1\"] = 5] = \"R1\";\n    /** Share */\n    DualShockButton[DualShockButton[\"Share\"] = 8] = \"Share\";\n    /** Options */\n    DualShockButton[DualShockButton[\"Options\"] = 9] = \"Options\";\n    /** Left stick */\n    DualShockButton[DualShockButton[\"LeftStick\"] = 10] = \"LeftStick\";\n    /** Right stick */\n    DualShockButton[DualShockButton[\"RightStick\"] = 11] = \"RightStick\";\n})(DualShockButton || (DualShockButton = {}));\n/** Defines values for DualShock DPad  */\nexport var DualShockDpad;\n(function (DualShockDpad) {\n    /** Up */\n    DualShockDpad[DualShockDpad[\"Up\"] = 12] = \"Up\";\n    /** Down */\n    DualShockDpad[DualShockDpad[\"Down\"] = 13] = \"Down\";\n    /** Left */\n    DualShockDpad[DualShockDpad[\"Left\"] = 14] = \"Left\";\n    /** Right */\n    DualShockDpad[DualShockDpad[\"Right\"] = 15] = \"Right\";\n})(DualShockDpad || (DualShockDpad = {}));\n/**\n * Defines a DualShock gamepad\n */\nvar DualShockPad = /** @class */ (function (_super) {\n    __extends(DualShockPad, _super);\n    /**\n     * Creates a new DualShock gamepad object\n     * @param id defines the id of this gamepad\n     * @param index defines its index\n     * @param gamepad defines the internal HTML gamepad object\n     */\n    function DualShockPad(id, index, gamepad) {\n        var _this = _super.call(this, id.replace(\"STANDARD GAMEPAD\", \"SONY PLAYSTATION DUALSHOCK\"), index, gamepad, 0, 1, 2, 3) || this;\n        _this._leftTrigger = 0;\n        _this._rightTrigger = 0;\n        /** Observable raised when a button is pressed */\n        _this.onButtonDownObservable = new Observable();\n        /** Observable raised when a button is released */\n        _this.onButtonUpObservable = new Observable();\n        /** Observable raised when a pad is pressed */\n        _this.onPadDownObservable = new Observable();\n        /** Observable raised when a pad is released */\n        _this.onPadUpObservable = new Observable();\n        _this._buttonCross = 0;\n        _this._buttonCircle = 0;\n        _this._buttonSquare = 0;\n        _this._buttonTriangle = 0;\n        _this._buttonShare = 0;\n        _this._buttonOptions = 0;\n        _this._buttonL1 = 0;\n        _this._buttonR1 = 0;\n        _this._buttonLeftStick = 0;\n        _this._buttonRightStick = 0;\n        _this._dPadUp = 0;\n        _this._dPadDown = 0;\n        _this._dPadLeft = 0;\n        _this._dPadRight = 0;\n        _this.type = Gamepad.DUALSHOCK;\n        return _this;\n    }\n    /**\n     * Defines the callback to call when left trigger is pressed\n     * @param callback defines the callback to use\n     */\n    DualShockPad.prototype.onlefttriggerchanged = function (callback) {\n        this._onlefttriggerchanged = callback;\n    };\n    /**\n     * Defines the callback to call when right trigger is pressed\n     * @param callback defines the callback to use\n     */\n    DualShockPad.prototype.onrighttriggerchanged = function (callback) {\n        this._onrighttriggerchanged = callback;\n    };\n    Object.defineProperty(DualShockPad.prototype, \"leftTrigger\", {\n        /**\n         * Gets the left trigger value\n         */\n        get: function () {\n            return this._leftTrigger;\n        },\n        /**\n         * Sets the left trigger value\n         */\n        set: function (newValue) {\n            if (this._onlefttriggerchanged && this._leftTrigger !== newValue) {\n                this._onlefttriggerchanged(newValue);\n            }\n            this._leftTrigger = newValue;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DualShockPad.prototype, \"rightTrigger\", {\n        /**\n         * Gets the right trigger value\n         */\n        get: function () {\n            return this._rightTrigger;\n        },\n        /**\n         * Sets the right trigger value\n         */\n        set: function (newValue) {\n            if (this._onrighttriggerchanged && this._rightTrigger !== newValue) {\n                this._onrighttriggerchanged(newValue);\n            }\n            this._rightTrigger = newValue;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Defines the callback to call when a button is pressed\n     * @param callback defines the callback to use\n     */\n    DualShockPad.prototype.onbuttondown = function (callback) {\n        this._onbuttondown = callback;\n    };\n    /**\n     * Defines the callback to call when a button is released\n     * @param callback defines the callback to use\n     */\n    DualShockPad.prototype.onbuttonup = function (callback) {\n        this._onbuttonup = callback;\n    };\n    /**\n     * Defines the callback to call when a pad is pressed\n     * @param callback defines the callback to use\n     */\n    DualShockPad.prototype.ondpaddown = function (callback) {\n        this._ondpaddown = callback;\n    };\n    /**\n     * Defines the callback to call when a pad is released\n     * @param callback defines the callback to use\n     */\n    DualShockPad.prototype.ondpadup = function (callback) {\n        this._ondpadup = callback;\n    };\n    DualShockPad.prototype._setButtonValue = function (newValue, currentValue, buttonType) {\n        if (newValue !== currentValue) {\n            if (newValue === 1) {\n                if (this._onbuttondown) {\n                    this._onbuttondown(buttonType);\n                }\n                this.onButtonDownObservable.notifyObservers(buttonType);\n            }\n            if (newValue === 0) {\n                if (this._onbuttonup) {\n                    this._onbuttonup(buttonType);\n                }\n                this.onButtonUpObservable.notifyObservers(buttonType);\n            }\n        }\n        return newValue;\n    };\n    DualShockPad.prototype._setDPadValue = function (newValue, currentValue, buttonType) {\n        if (newValue !== currentValue) {\n            if (newValue === 1) {\n                if (this._ondpaddown) {\n                    this._ondpaddown(buttonType);\n                }\n                this.onPadDownObservable.notifyObservers(buttonType);\n            }\n            if (newValue === 0) {\n                if (this._ondpadup) {\n                    this._ondpadup(buttonType);\n                }\n                this.onPadUpObservable.notifyObservers(buttonType);\n            }\n        }\n        return newValue;\n    };\n    Object.defineProperty(DualShockPad.prototype, \"buttonCross\", {\n        /**\n         * Gets the value of the `Cross` button\n         */\n        get: function () {\n            return this._buttonCross;\n        },\n        /**\n         * Sets the value of the `Cross` button\n         */\n        set: function (value) {\n            this._buttonCross = this._setButtonValue(value, this._buttonCross, DualShockButton.Cross);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DualShockPad.prototype, \"buttonCircle\", {\n        /**\n         * Gets the value of the `Circle` button\n         */\n        get: function () {\n            return this._buttonCircle;\n        },\n        /**\n         * Sets the value of the `Circle` button\n         */\n        set: function (value) {\n            this._buttonCircle = this._setButtonValue(value, this._buttonCircle, DualShockButton.Circle);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DualShockPad.prototype, \"buttonSquare\", {\n        /**\n         * Gets the value of the `Square` button\n         */\n        get: function () {\n            return this._buttonSquare;\n        },\n        /**\n         * Sets the value of the `Square` button\n         */\n        set: function (value) {\n            this._buttonSquare = this._setButtonValue(value, this._buttonSquare, DualShockButton.Square);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DualShockPad.prototype, \"buttonTriangle\", {\n        /**\n         * Gets the value of the `Triangle` button\n         */\n        get: function () {\n            return this._buttonTriangle;\n        },\n        /**\n         * Sets the value of the `Triangle` button\n         */\n        set: function (value) {\n            this._buttonTriangle = this._setButtonValue(value, this._buttonTriangle, DualShockButton.Triangle);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DualShockPad.prototype, \"buttonOptions\", {\n        /**\n         * Gets the value of the `Options` button\n         */\n        get: function () {\n            return this._buttonOptions;\n        },\n        /**\n         * Sets the value of the `Options` button\n         */\n        set: function (value) {\n            this._buttonOptions = this._setButtonValue(value, this._buttonOptions, DualShockButton.Options);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DualShockPad.prototype, \"buttonShare\", {\n        /**\n         * Gets the value of the `Share` button\n         */\n        get: function () {\n            return this._buttonShare;\n        },\n        /**\n         * Sets the value of the `Share` button\n         */\n        set: function (value) {\n            this._buttonShare = this._setButtonValue(value, this._buttonShare, DualShockButton.Share);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DualShockPad.prototype, \"buttonL1\", {\n        /**\n         * Gets the value of the `L1` button\n         */\n        get: function () {\n            return this._buttonL1;\n        },\n        /**\n         * Sets the value of the `L1` button\n         */\n        set: function (value) {\n            this._buttonL1 = this._setButtonValue(value, this._buttonL1, DualShockButton.L1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DualShockPad.prototype, \"buttonR1\", {\n        /**\n         * Gets the value of the `R1` button\n         */\n        get: function () {\n            return this._buttonR1;\n        },\n        /**\n         * Sets the value of the `R1` button\n         */\n        set: function (value) {\n            this._buttonR1 = this._setButtonValue(value, this._buttonR1, DualShockButton.R1);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DualShockPad.prototype, \"buttonLeftStick\", {\n        /**\n         * Gets the value of the Left joystick\n         */\n        get: function () {\n            return this._buttonLeftStick;\n        },\n        /**\n         * Sets the value of the Left joystick\n         */\n        set: function (value) {\n            this._buttonLeftStick = this._setButtonValue(value, this._buttonLeftStick, DualShockButton.LeftStick);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DualShockPad.prototype, \"buttonRightStick\", {\n        /**\n         * Gets the value of the Right joystick\n         */\n        get: function () {\n            return this._buttonRightStick;\n        },\n        /**\n         * Sets the value of the Right joystick\n         */\n        set: function (value) {\n            this._buttonRightStick = this._setButtonValue(value, this._buttonRightStick, DualShockButton.RightStick);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DualShockPad.prototype, \"dPadUp\", {\n        /**\n         * Gets the value of D-pad up\n         */\n        get: function () {\n            return this._dPadUp;\n        },\n        /**\n         * Sets the value of D-pad up\n         */\n        set: function (value) {\n            this._dPadUp = this._setDPadValue(value, this._dPadUp, DualShockDpad.Up);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DualShockPad.prototype, \"dPadDown\", {\n        /**\n         * Gets the value of D-pad down\n         */\n        get: function () {\n            return this._dPadDown;\n        },\n        /**\n         * Sets the value of D-pad down\n         */\n        set: function (value) {\n            this._dPadDown = this._setDPadValue(value, this._dPadDown, DualShockDpad.Down);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DualShockPad.prototype, \"dPadLeft\", {\n        /**\n         * Gets the value of D-pad left\n         */\n        get: function () {\n            return this._dPadLeft;\n        },\n        /**\n         * Sets the value of D-pad left\n         */\n        set: function (value) {\n            this._dPadLeft = this._setDPadValue(value, this._dPadLeft, DualShockDpad.Left);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DualShockPad.prototype, \"dPadRight\", {\n        /**\n         * Gets the value of D-pad right\n         */\n        get: function () {\n            return this._dPadRight;\n        },\n        /**\n         * Sets the value of D-pad right\n         */\n        set: function (value) {\n            this._dPadRight = this._setDPadValue(value, this._dPadRight, DualShockDpad.Right);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Force the gamepad to synchronize with device values\n     */\n    DualShockPad.prototype.update = function () {\n        _super.prototype.update.call(this);\n        this.buttonCross = this.browserGamepad.buttons[0].value;\n        this.buttonCircle = this.browserGamepad.buttons[1].value;\n        this.buttonSquare = this.browserGamepad.buttons[2].value;\n        this.buttonTriangle = this.browserGamepad.buttons[3].value;\n        this.buttonL1 = this.browserGamepad.buttons[4].value;\n        this.buttonR1 = this.browserGamepad.buttons[5].value;\n        this.leftTrigger = this.browserGamepad.buttons[6].value;\n        this.rightTrigger = this.browserGamepad.buttons[7].value;\n        this.buttonShare = this.browserGamepad.buttons[8].value;\n        this.buttonOptions = this.browserGamepad.buttons[9].value;\n        this.buttonLeftStick = this.browserGamepad.buttons[10].value;\n        this.buttonRightStick = this.browserGamepad.buttons[11].value;\n        this.dPadUp = this.browserGamepad.buttons[12].value;\n        this.dPadDown = this.browserGamepad.buttons[13].value;\n        this.dPadLeft = this.browserGamepad.buttons[14].value;\n        this.dPadRight = this.browserGamepad.buttons[15].value;\n    };\n    /**\n     * Disposes the gamepad\n     */\n    DualShockPad.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.onButtonDownObservable.clear();\n        this.onButtonUpObservable.clear();\n        this.onPadDownObservable.clear();\n        this.onPadUpObservable.clear();\n    };\n    return DualShockPad;\n}(Gamepad));\nexport { DualShockPad };\n//# sourceMappingURL=dualShockGamepad.js.map","import { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable.js\";\n/**\n * Represents a gamepad control stick position\n */\nvar StickValues = /** @class */ (function () {\n    /**\n     * Initializes the gamepad x and y control stick values\n     * @param x The x component of the gamepad control stick value\n     * @param y The y component of the gamepad control stick value\n     */\n    function StickValues(\n    /**\n     * The x component of the control stick\n     */\n    x, \n    /**\n     * The y component of the control stick\n     */\n    y) {\n        this.x = x;\n        this.y = y;\n    }\n    return StickValues;\n}());\nexport { StickValues };\n/**\n * Represents a gamepad\n */\nvar Gamepad = /** @class */ (function () {\n    /**\n     * Initializes the gamepad\n     * @param id The id of the gamepad\n     * @param index The index of the gamepad\n     * @param browserGamepad The browser gamepad\n     * @param leftStickX The x component of the left joystick\n     * @param leftStickY The y component of the left joystick\n     * @param rightStickX The x component of the right joystick\n     * @param rightStickY The y component of the right joystick\n     */\n    function Gamepad(\n    /**\n     * The id of the gamepad\n     */\n    id, \n    /**\n     * The index of the gamepad\n     */\n    index, \n    /**\n     * The browser gamepad\n     */\n    browserGamepad, leftStickX, leftStickY, rightStickX, rightStickY) {\n        if (leftStickX === void 0) { leftStickX = 0; }\n        if (leftStickY === void 0) { leftStickY = 1; }\n        if (rightStickX === void 0) { rightStickX = 2; }\n        if (rightStickY === void 0) { rightStickY = 3; }\n        this.id = id;\n        this.index = index;\n        this.browserGamepad = browserGamepad;\n        this._leftStick = { x: 0, y: 0 };\n        this._rightStick = { x: 0, y: 0 };\n        /** @hidden */\n        this._isConnected = true;\n        /**\n         * Specifies whether the left control stick should be Y-inverted\n         */\n        this._invertLeftStickY = false;\n        this.type = Gamepad.GAMEPAD;\n        this._leftStickAxisX = leftStickX;\n        this._leftStickAxisY = leftStickY;\n        this._rightStickAxisX = rightStickX;\n        this._rightStickAxisY = rightStickY;\n        if (this.browserGamepad.axes.length >= 2) {\n            this._leftStick = { x: this.browserGamepad.axes[this._leftStickAxisX], y: this.browserGamepad.axes[this._leftStickAxisY] };\n        }\n        if (this.browserGamepad.axes.length >= 4) {\n            this._rightStick = { x: this.browserGamepad.axes[this._rightStickAxisX], y: this.browserGamepad.axes[this._rightStickAxisY] };\n        }\n    }\n    Object.defineProperty(Gamepad.prototype, \"isConnected\", {\n        /**\n         * Specifies if the gamepad has been connected\n         */\n        get: function () {\n            return this._isConnected;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Callback triggered when the left joystick has changed\n     * @param callback\n     */\n    Gamepad.prototype.onleftstickchanged = function (callback) {\n        this._onleftstickchanged = callback;\n    };\n    /**\n     * Callback triggered when the right joystick has changed\n     * @param callback\n     */\n    Gamepad.prototype.onrightstickchanged = function (callback) {\n        this._onrightstickchanged = callback;\n    };\n    Object.defineProperty(Gamepad.prototype, \"leftStick\", {\n        /**\n         * Gets the left joystick\n         */\n        get: function () {\n            return this._leftStick;\n        },\n        /**\n         * Sets the left joystick values\n         */\n        set: function (newValues) {\n            if (this._onleftstickchanged && (this._leftStick.x !== newValues.x || this._leftStick.y !== newValues.y)) {\n                this._onleftstickchanged(newValues);\n            }\n            this._leftStick = newValues;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Gamepad.prototype, \"rightStick\", {\n        /**\n         * Gets the right joystick\n         */\n        get: function () {\n            return this._rightStick;\n        },\n        /**\n         * Sets the right joystick value\n         */\n        set: function (newValues) {\n            if (this._onrightstickchanged && (this._rightStick.x !== newValues.x || this._rightStick.y !== newValues.y)) {\n                this._onrightstickchanged(newValues);\n            }\n            this._rightStick = newValues;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Updates the gamepad joystick positions\n     */\n    Gamepad.prototype.update = function () {\n        if (this._leftStick) {\n            this.leftStick = { x: this.browserGamepad.axes[this._leftStickAxisX], y: this.browserGamepad.axes[this._leftStickAxisY] };\n            if (this._invertLeftStickY) {\n                this.leftStick.y *= -1;\n            }\n        }\n        if (this._rightStick) {\n            this.rightStick = { x: this.browserGamepad.axes[this._rightStickAxisX], y: this.browserGamepad.axes[this._rightStickAxisY] };\n        }\n    };\n    /**\n     * Disposes the gamepad\n     */\n    Gamepad.prototype.dispose = function () { };\n    /**\n     * Represents a gamepad controller\n     */\n    Gamepad.GAMEPAD = 0;\n    /**\n     * Represents a generic controller\n     */\n    Gamepad.GENERIC = 1;\n    /**\n     * Represents an XBox controller\n     */\n    Gamepad.XBOX = 2;\n    /**\n     * Represents a pose-enabled controller\n     */\n    Gamepad.POSE_ENABLED = 3;\n    /**\n     * Represents an Dual Shock controller\n     */\n    Gamepad.DUALSHOCK = 4;\n    return Gamepad;\n}());\nexport { Gamepad };\n/**\n * Represents a generic gamepad\n */\nvar GenericPad = /** @class */ (function (_super) {\n    __extends(GenericPad, _super);\n    /**\n     * Initializes the generic gamepad\n     * @param id The id of the generic gamepad\n     * @param index The index of the generic gamepad\n     * @param browserGamepad The browser gamepad\n     */\n    function GenericPad(id, index, browserGamepad) {\n        var _this = _super.call(this, id, index, browserGamepad) || this;\n        /**\n         * Observable triggered when a button has been pressed\n         */\n        _this.onButtonDownObservable = new Observable();\n        /**\n         * Observable triggered when a button has been released\n         */\n        _this.onButtonUpObservable = new Observable();\n        _this.type = Gamepad.GENERIC;\n        _this._buttons = new Array(browserGamepad.buttons.length);\n        return _this;\n    }\n    /**\n     * Callback triggered when a button has been pressed\n     * @param callback Called when a button has been pressed\n     */\n    GenericPad.prototype.onbuttondown = function (callback) {\n        this._onbuttondown = callback;\n    };\n    /**\n     * Callback triggered when a button has been released\n     * @param callback Called when a button has been released\n     */\n    GenericPad.prototype.onbuttonup = function (callback) {\n        this._onbuttonup = callback;\n    };\n    GenericPad.prototype._setButtonValue = function (newValue, currentValue, buttonIndex) {\n        if (newValue !== currentValue) {\n            if (newValue === 1) {\n                if (this._onbuttondown) {\n                    this._onbuttondown(buttonIndex);\n                }\n                this.onButtonDownObservable.notifyObservers(buttonIndex);\n            }\n            if (newValue === 0) {\n                if (this._onbuttonup) {\n                    this._onbuttonup(buttonIndex);\n                }\n                this.onButtonUpObservable.notifyObservers(buttonIndex);\n            }\n        }\n        return newValue;\n    };\n    /**\n     * Updates the generic gamepad\n     */\n    GenericPad.prototype.update = function () {\n        _super.prototype.update.call(this);\n        for (var index = 0; index < this._buttons.length; index++) {\n            this._buttons[index] = this._setButtonValue(this.browserGamepad.buttons[index].value, this._buttons[index], index);\n        }\n    };\n    /**\n     * Disposes the generic gamepad\n     */\n    GenericPad.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.onButtonDownObservable.clear();\n        this.onButtonUpObservable.clear();\n    };\n    return GenericPad;\n}(Gamepad));\nexport { GenericPad };\n//# sourceMappingURL=gamepad.js.map","import { Observable } from \"../Misc/observable.js\";\nimport { IsWindowObjectExist } from \"../Misc/domManagement.js\";\nimport { PoseEnabledControllerHelper } from \"../Gamepads/Controllers/poseEnabledController.js\";\nimport { Xbox360Pad } from \"./xboxGamepad.js\";\nimport { Gamepad, GenericPad } from \"./gamepad.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { DualShockPad } from \"./dualShockGamepad.js\";\nimport { Tools } from \"../Misc/tools.js\";\n/**\n * Manager for handling gamepads\n */\nvar GamepadManager = /** @class */ (function () {\n    /**\n     * Initializes the gamepad manager\n     * @param _scene BabylonJS scene\n     */\n    function GamepadManager(_scene) {\n        var _this = this;\n        this._scene = _scene;\n        this._babylonGamepads = [];\n        this._oneGamepadConnected = false;\n        /** @hidden */\n        this._isMonitoring = false;\n        /**\n         * observable to be triggered when the gamepad controller has been disconnected\n         */\n        this.onGamepadDisconnectedObservable = new Observable();\n        if (!IsWindowObjectExist()) {\n            this._gamepadEventSupported = false;\n        }\n        else {\n            this._gamepadEventSupported = \"GamepadEvent\" in window;\n            this._gamepadSupport = navigator && (navigator.getGamepads || navigator.webkitGetGamepads || navigator.msGetGamepads || navigator.webkitGamepads);\n        }\n        this.onGamepadConnectedObservable = new Observable(function (observer) {\n            // This will be used to raise the onGamepadConnected for all gamepads ALREADY connected\n            for (var i in _this._babylonGamepads) {\n                var gamepad = _this._babylonGamepads[i];\n                if (gamepad && gamepad._isConnected) {\n                    _this.onGamepadConnectedObservable.notifyObserver(observer, gamepad);\n                }\n            }\n        });\n        this._onGamepadConnectedEvent = function (evt) {\n            var gamepad = evt.gamepad;\n            if (gamepad.index in _this._babylonGamepads) {\n                if (_this._babylonGamepads[gamepad.index].isConnected) {\n                    return;\n                }\n            }\n            var newGamepad;\n            if (_this._babylonGamepads[gamepad.index]) {\n                newGamepad = _this._babylonGamepads[gamepad.index];\n                newGamepad.browserGamepad = gamepad;\n                newGamepad._isConnected = true;\n            }\n            else {\n                newGamepad = _this._addNewGamepad(gamepad);\n            }\n            _this.onGamepadConnectedObservable.notifyObservers(newGamepad);\n            _this._startMonitoringGamepads();\n        };\n        this._onGamepadDisconnectedEvent = function (evt) {\n            var gamepad = evt.gamepad;\n            // Remove the gamepad from the list of gamepads to monitor.\n            for (var i in _this._babylonGamepads) {\n                if (_this._babylonGamepads[i].index === gamepad.index) {\n                    var disconnectedGamepad = _this._babylonGamepads[i];\n                    disconnectedGamepad._isConnected = false;\n                    _this.onGamepadDisconnectedObservable.notifyObservers(disconnectedGamepad);\n                    disconnectedGamepad.dispose && disconnectedGamepad.dispose();\n                    break;\n                }\n            }\n        };\n        if (this._gamepadSupport) {\n            //first add already-connected gamepads\n            this._updateGamepadObjects();\n            if (this._babylonGamepads.length) {\n                this._startMonitoringGamepads();\n            }\n            // Checking if the gamepad connected event is supported (like in Firefox)\n            if (this._gamepadEventSupported) {\n                var hostWindow = this._scene ? this._scene.getEngine().getHostWindow() : window;\n                if (hostWindow) {\n                    hostWindow.addEventListener(\"gamepadconnected\", this._onGamepadConnectedEvent, false);\n                    hostWindow.addEventListener(\"gamepaddisconnected\", this._onGamepadDisconnectedEvent, false);\n                }\n            }\n            else {\n                this._startMonitoringGamepads();\n            }\n        }\n    }\n    Object.defineProperty(GamepadManager.prototype, \"gamepads\", {\n        /**\n         * The gamepads in the game pad manager\n         */\n        get: function () {\n            return this._babylonGamepads;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get the gamepad controllers based on type\n     * @param type The type of gamepad controller\n     * @returns Nullable gamepad\n     */\n    GamepadManager.prototype.getGamepadByType = function (type) {\n        if (type === void 0) { type = Gamepad.XBOX; }\n        for (var _i = 0, _a = this._babylonGamepads; _i < _a.length; _i++) {\n            var gamepad = _a[_i];\n            if (gamepad && gamepad.type === type) {\n                return gamepad;\n            }\n        }\n        return null;\n    };\n    /**\n     * Disposes the gamepad manager\n     */\n    GamepadManager.prototype.dispose = function () {\n        if (this._gamepadEventSupported) {\n            if (this._onGamepadConnectedEvent) {\n                window.removeEventListener(\"gamepadconnected\", this._onGamepadConnectedEvent);\n            }\n            if (this._onGamepadDisconnectedEvent) {\n                window.removeEventListener(\"gamepaddisconnected\", this._onGamepadDisconnectedEvent);\n            }\n            this._onGamepadConnectedEvent = null;\n            this._onGamepadDisconnectedEvent = null;\n        }\n        this._babylonGamepads.forEach(function (gamepad) {\n            gamepad.dispose();\n        });\n        this.onGamepadConnectedObservable.clear();\n        this.onGamepadDisconnectedObservable.clear();\n        this._oneGamepadConnected = false;\n        this._stopMonitoringGamepads();\n        this._babylonGamepads = [];\n    };\n    GamepadManager.prototype._addNewGamepad = function (gamepad) {\n        if (!this._oneGamepadConnected) {\n            this._oneGamepadConnected = true;\n        }\n        var newGamepad;\n        var dualShock = gamepad.id.search(\"054c\") !== -1 && gamepad.id.search(\"0ce6\") === -1;\n        var xboxOne = gamepad.id.search(\"Xbox One\") !== -1;\n        if (xboxOne ||\n            gamepad.id.search(\"Xbox 360\") !== -1 ||\n            gamepad.id.search(\"xinput\") !== -1 ||\n            (gamepad.id.search(\"045e\") !== -1 && gamepad.id.search(\"Surface Dock\") === -1)) {\n            // make sure the Surface Dock Extender is not detected as an xbox controller\n            newGamepad = new Xbox360Pad(gamepad.id, gamepad.index, gamepad, xboxOne);\n        }\n        else if (dualShock) {\n            newGamepad = new DualShockPad(gamepad.id, gamepad.index, gamepad);\n        }\n        // if pose is supported, use the (WebVR) pose enabled controller\n        else if (gamepad.pose) {\n            newGamepad = PoseEnabledControllerHelper.InitiateController(gamepad);\n        }\n        else {\n            newGamepad = new GenericPad(gamepad.id, gamepad.index, gamepad);\n        }\n        this._babylonGamepads[newGamepad.index] = newGamepad;\n        return newGamepad;\n    };\n    GamepadManager.prototype._startMonitoringGamepads = function () {\n        if (!this._isMonitoring) {\n            this._isMonitoring = true;\n            //back-comp\n            if (!this._scene) {\n                this._checkGamepadsStatus();\n            }\n        }\n    };\n    GamepadManager.prototype._stopMonitoringGamepads = function () {\n        this._isMonitoring = false;\n    };\n    /** @hidden */\n    GamepadManager.prototype._checkGamepadsStatus = function () {\n        var _this = this;\n        // Hack to be compatible Chrome\n        this._updateGamepadObjects();\n        for (var i in this._babylonGamepads) {\n            var gamepad = this._babylonGamepads[i];\n            if (!gamepad || !gamepad.isConnected) {\n                continue;\n            }\n            try {\n                gamepad.update();\n            }\n            catch (_a) {\n                if (this._loggedErrors.indexOf(gamepad.index) === -1) {\n                    Tools.Warn(\"Error updating gamepad \".concat(gamepad.id));\n                    this._loggedErrors.push(gamepad.index);\n                }\n            }\n        }\n        if (this._isMonitoring && !this._scene) {\n            Engine.QueueNewFrame(function () {\n                _this._checkGamepadsStatus();\n            });\n        }\n    };\n    // This function is called only on Chrome, which does not properly support\n    // connection/disconnection events and forces you to recopy again the gamepad object\n    GamepadManager.prototype._updateGamepadObjects = function () {\n        var gamepads = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : [];\n        for (var i = 0; i < gamepads.length; i++) {\n            var gamepad = gamepads[i];\n            if (gamepad) {\n                if (!this._babylonGamepads[gamepad.index]) {\n                    var newGamepad = this._addNewGamepad(gamepad);\n                    this.onGamepadConnectedObservable.notifyObservers(newGamepad);\n                }\n                else {\n                    // Forced to copy again this object for Chrome for unknown reason\n                    this._babylonGamepads[i].browserGamepad = gamepad;\n                    if (!this._babylonGamepads[i].isConnected) {\n                        this._babylonGamepads[i]._isConnected = true;\n                        this.onGamepadConnectedObservable.notifyObservers(this._babylonGamepads[i]);\n                    }\n                }\n            }\n        }\n    };\n    return GamepadManager;\n}());\nexport { GamepadManager };\n//# sourceMappingURL=gamepadManager.js.map","import { Scene } from \"../scene.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { GamepadManager } from \"./gamepadManager.js\";\nimport { FreeCameraInputsManager } from \"../Cameras/freeCameraInputsManager.js\";\nimport { FreeCameraGamepadInput } from \"../Cameras/Inputs/freeCameraGamepadInput.js\";\nimport { ArcRotateCameraInputsManager } from \"../Cameras/arcRotateCameraInputsManager.js\";\nimport { ArcRotateCameraGamepadInput } from \"../Cameras/Inputs/arcRotateCameraGamepadInput.js\";\nObject.defineProperty(Scene.prototype, \"gamepadManager\", {\n    get: function () {\n        if (!this._gamepadManager) {\n            this._gamepadManager = new GamepadManager(this);\n            var component = this._getComponent(SceneComponentConstants.NAME_GAMEPAD);\n            if (!component) {\n                component = new GamepadSystemSceneComponent(this);\n                this._addComponent(component);\n            }\n        }\n        return this._gamepadManager;\n    },\n    enumerable: true,\n    configurable: true,\n});\n/**\n * Adds a gamepad to the free camera inputs manager\n */\nFreeCameraInputsManager.prototype.addGamepad = function () {\n    this.add(new FreeCameraGamepadInput());\n    return this;\n};\n/**\n * Adds a gamepad to the arc rotate camera inputs manager\n */\nArcRotateCameraInputsManager.prototype.addGamepad = function () {\n    this.add(new ArcRotateCameraGamepadInput());\n    return this;\n};\n/**\n * Defines the gamepad scene component responsible to manage gamepads in a given scene\n */\nvar GamepadSystemSceneComponent = /** @class */ (function () {\n    /**\n     * Creates a new instance of the component for the given scene\n     * @param scene Defines the scene to register the component in\n     */\n    function GamepadSystemSceneComponent(scene) {\n        /**\n         * The component name helpfull to identify the component in the list of scene components.\n         */\n        this.name = SceneComponentConstants.NAME_GAMEPAD;\n        this.scene = scene;\n    }\n    /**\n     * Registers the component in a given scene\n     */\n    GamepadSystemSceneComponent.prototype.register = function () {\n        this.scene._beforeCameraUpdateStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERAUPDATE_GAMEPAD, this, this._beforeCameraUpdate);\n    };\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    GamepadSystemSceneComponent.prototype.rebuild = function () {\n        // Nothing to do for gamepads\n    };\n    /**\n     * Disposes the component and the associated resources\n     */\n    GamepadSystemSceneComponent.prototype.dispose = function () {\n        var gamepadManager = this.scene._gamepadManager;\n        if (gamepadManager) {\n            gamepadManager.dispose();\n            this.scene._gamepadManager = null;\n        }\n    };\n    GamepadSystemSceneComponent.prototype._beforeCameraUpdate = function () {\n        var gamepadManager = this.scene._gamepadManager;\n        if (gamepadManager && gamepadManager._isMonitoring) {\n            gamepadManager._checkGamepadsStatus();\n        }\n    };\n    return GamepadSystemSceneComponent;\n}());\nexport { GamepadSystemSceneComponent };\n//# sourceMappingURL=gamepadSceneComponent.js.map","import { __extends } from \"tslib\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { WebVRController } from \"./webVRController.js\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController.js\";\n/**\n * Google Daydream controller\n */\nvar DaydreamController = /** @class */ (function (_super) {\n    __extends(DaydreamController, _super);\n    /**\n     * Creates a new DaydreamController from a gamepad\n     * @param vrGamepad the gamepad that the controller should be created from\n     */\n    function DaydreamController(vrGamepad) {\n        var _this = _super.call(this, vrGamepad) || this;\n        _this.controllerType = PoseEnabledControllerType.DAYDREAM;\n        return _this;\n    }\n    /**\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\n     * @param scene scene in which to add meshes\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\n     */\n    DaydreamController.prototype.initControllerMesh = function (scene, meshLoaded) {\n        var _this = this;\n        SceneLoader.ImportMesh(\"\", DaydreamController.MODEL_BASE_URL, DaydreamController.MODEL_FILENAME, scene, function (newMeshes) {\n            _this._defaultModel = newMeshes[1];\n            _this.attachToMesh(_this._defaultModel);\n            if (meshLoaded) {\n                meshLoaded(_this._defaultModel);\n            }\n        });\n    };\n    /**\n     * Called once for each button that changed state since the last frame\n     * @param buttonIdx Which button index changed\n     * @param state New state of the button\n     */\n    DaydreamController.prototype._handleButtonChange = function (buttonIdx, state) {\n        // Daydream controller only has 1 GamepadButton (on the trackpad).\n        if (buttonIdx === 0) {\n            var observable = this.onTriggerStateChangedObservable;\n            if (observable) {\n                observable.notifyObservers(state);\n            }\n        }\n        else {\n            // If the app or home buttons are ever made available\n            Logger.Warn(\"Unrecognized Daydream button index: \".concat(buttonIdx));\n        }\n    };\n    /**\n     * Base Url for the controller model.\n     */\n    DaydreamController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/generic/\";\n    /**\n     * File name for the controller model.\n     */\n    DaydreamController.MODEL_FILENAME = \"generic.babylon\";\n    /**\n     * Gamepad Id prefix used to identify Daydream Controller.\n     */\n    DaydreamController.GAMEPAD_ID_PREFIX = \"Daydream\"; // id is 'Daydream Controller'\n    return DaydreamController;\n}(WebVRController));\nexport { DaydreamController };\nPoseEnabledControllerHelper._ControllerFactories.push({\n    canCreate: function (gamepadInfo) {\n        return gamepadInfo.id.indexOf(DaydreamController.GAMEPAD_ID_PREFIX) === 0;\n    },\n    create: function (gamepadInfo) {\n        return new DaydreamController(gamepadInfo);\n    },\n});\n//# sourceMappingURL=daydreamController.js.map","import { __extends } from \"tslib\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { WebVRController } from \"./webVRController.js\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController.js\";\n/**\n * Gear VR Controller\n */\nvar GearVRController = /** @class */ (function (_super) {\n    __extends(GearVRController, _super);\n    /**\n     * Creates a new GearVRController from a gamepad\n     * @param vrGamepad the gamepad that the controller should be created from\n     */\n    function GearVRController(vrGamepad) {\n        var _this = _super.call(this, vrGamepad) || this;\n        _this._buttonIndexToObservableNameMap = [\n            \"onPadStateChangedObservable\",\n            \"onTriggerStateChangedObservable\", // Trigger\n        ];\n        _this.controllerType = PoseEnabledControllerType.GEAR_VR;\n        // Initial starting position defaults to where hand would be (incase of only 3dof controller)\n        _this._calculatedPosition = new Vector3(_this.hand == \"left\" ? -0.15 : 0.15, -0.5, 0.25);\n        _this._disableTrackPosition(_this._calculatedPosition);\n        return _this;\n    }\n    /**\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\n     * @param scene scene in which to add meshes\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\n     */\n    GearVRController.prototype.initControllerMesh = function (scene, meshLoaded) {\n        var _this = this;\n        SceneLoader.ImportMesh(\"\", GearVRController.MODEL_BASE_URL, GearVRController.MODEL_FILENAME, scene, function (newMeshes) {\n            // Offset the controller so it will rotate around the users wrist\n            var mesh = new Mesh(\"\", scene);\n            newMeshes[1].parent = mesh;\n            newMeshes[1].position.z = -0.15;\n            _this._defaultModel = mesh;\n            _this.attachToMesh(_this._defaultModel);\n            if (meshLoaded) {\n                meshLoaded(_this._defaultModel);\n            }\n        });\n    };\n    /**\n     * Called once for each button that changed state since the last frame\n     * @param buttonIdx Which button index changed\n     * @param state New state of the button\n     */\n    GearVRController.prototype._handleButtonChange = function (buttonIdx, state) {\n        if (buttonIdx < this._buttonIndexToObservableNameMap.length) {\n            var observableName = this._buttonIndexToObservableNameMap[buttonIdx];\n            // Only emit events for buttons that we know how to map from index to observable\n            var observable = this[observableName];\n            if (observable) {\n                observable.notifyObservers(state);\n            }\n        }\n    };\n    /**\n     * Base Url for the controller model.\n     */\n    GearVRController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/generic/\";\n    /**\n     * File name for the controller model.\n     */\n    GearVRController.MODEL_FILENAME = \"generic.babylon\";\n    /**\n     * Gamepad Id prefix used to identify this controller.\n     */\n    GearVRController.GAMEPAD_ID_PREFIX = \"Gear VR\"; // id is 'Gear VR Controller'\n    return GearVRController;\n}(WebVRController));\nexport { GearVRController };\nPoseEnabledControllerHelper._ControllerFactories.push({\n    canCreate: function (gamepadInfo) {\n        return gamepadInfo.id.indexOf(GearVRController.GAMEPAD_ID_PREFIX) === 0 || gamepadInfo.id.indexOf(\"Oculus Go\") !== -1 || gamepadInfo.id.indexOf(\"Vive Focus\") !== -1;\n    },\n    create: function (gamepadInfo) {\n        return new GearVRController(gamepadInfo);\n    },\n});\n//# sourceMappingURL=gearVRController.js.map","import { __extends } from \"tslib\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { WebVRController } from \"./webVRController.js\";\nimport { PoseEnabledControllerHelper } from \"./poseEnabledController.js\";\n/**\n * Generic Controller\n */\nvar GenericController = /** @class */ (function (_super) {\n    __extends(GenericController, _super);\n    /**\n     * Creates a new GenericController from a gamepad\n     * @param vrGamepad the gamepad that the controller should be created from\n     */\n    function GenericController(vrGamepad) {\n        return _super.call(this, vrGamepad) || this;\n    }\n    /**\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\n     * @param scene scene in which to add meshes\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\n     */\n    GenericController.prototype.initControllerMesh = function (scene, meshLoaded) {\n        var _this = this;\n        SceneLoader.ImportMesh(\"\", GenericController.MODEL_BASE_URL, GenericController.MODEL_FILENAME, scene, function (newMeshes) {\n            _this._defaultModel = newMeshes[1];\n            _this.attachToMesh(_this._defaultModel);\n            if (meshLoaded) {\n                meshLoaded(_this._defaultModel);\n            }\n        });\n    };\n    /**\n     * Called once for each button that changed state since the last frame\n     * @param buttonIdx Which button index changed\n     * @param state New state of the button\n     */\n    GenericController.prototype._handleButtonChange = function (buttonIdx, state) {\n        console.log(\"Button id: \" + buttonIdx + \"state: \");\n        console.dir(state);\n    };\n    /**\n     * Base Url for the controller model.\n     */\n    GenericController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/generic/\";\n    /**\n     * File name for the controller model.\n     */\n    GenericController.MODEL_FILENAME = \"generic.babylon\";\n    return GenericController;\n}(WebVRController));\nexport { GenericController };\nPoseEnabledControllerHelper._DefaultControllerFactory = function (gamepadInfo) { return new GenericController(gamepadInfo); };\n//# sourceMappingURL=genericController.js.map","import { __extends } from \"tslib\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { WebVRController } from \"./webVRController.js\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController.js\";\nimport { EngineStore } from \"../../Engines/engineStore.js\";\n/**\n * Oculus Touch Controller\n */\nvar OculusTouchController = /** @class */ (function (_super) {\n    __extends(OculusTouchController, _super);\n    /**\n     * Creates a new OculusTouchController from a gamepad\n     * @param vrGamepad the gamepad that the controller should be created from\n     */\n    function OculusTouchController(vrGamepad) {\n        var _this = _super.call(this, vrGamepad) || this;\n        /**\n         * Fired when the secondary trigger on this controller is modified\n         */\n        _this.onSecondaryTriggerStateChangedObservable = new Observable();\n        /**\n         * Fired when the thumb rest on this controller is modified\n         */\n        _this.onThumbRestChangedObservable = new Observable();\n        _this.controllerType = PoseEnabledControllerType.OCULUS;\n        return _this;\n    }\n    /**\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\n     * @param scene scene in which to add meshes\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\n     */\n    OculusTouchController.prototype.initControllerMesh = function (scene, meshLoaded) {\n        var _this = this;\n        var meshName;\n        // Hand\n        if (this.hand === \"left\") {\n            meshName = OculusTouchController.MODEL_LEFT_FILENAME;\n        }\n        else {\n            // Right is the default if no hand is specified\n            meshName = OculusTouchController.MODEL_RIGHT_FILENAME;\n        }\n        SceneLoader.ImportMesh(\"\", OculusTouchController._IsQuest ? OculusTouchController.QUEST_MODEL_BASE_URL : OculusTouchController.MODEL_BASE_URL, meshName, scene, function (newMeshes) {\n            /*\n        Parent Mesh name: oculus_touch_left\n        - body\n        - trigger\n        - thumbstick\n        - grip\n        - button_y\n        - button_x\n        - button_enter\n        */\n            _this._defaultModel = OculusTouchController._IsQuest ? newMeshes[0] : newMeshes[1];\n            _this.attachToMesh(_this._defaultModel);\n            if (meshLoaded) {\n                meshLoaded(_this._defaultModel);\n            }\n        });\n    };\n    Object.defineProperty(OculusTouchController.prototype, \"onAButtonStateChangedObservable\", {\n        /**\n         * Fired when the A button on this controller is modified\n         */\n        get: function () {\n            if (this.hand === \"right\") {\n                return this.onMainButtonStateChangedObservable;\n            }\n            else {\n                throw new Error(\"No A button on left hand\");\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(OculusTouchController.prototype, \"onBButtonStateChangedObservable\", {\n        /**\n         * Fired when the B button on this controller is modified\n         */\n        get: function () {\n            if (this.hand === \"right\") {\n                return this.onSecondaryButtonStateChangedObservable;\n            }\n            else {\n                throw new Error(\"No B button on left hand\");\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(OculusTouchController.prototype, \"onXButtonStateChangedObservable\", {\n        /**\n         * Fired when the X button on this controller is modified\n         */\n        get: function () {\n            if (this.hand === \"left\") {\n                return this.onMainButtonStateChangedObservable;\n            }\n            else {\n                throw new Error(\"No X button on right hand\");\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(OculusTouchController.prototype, \"onYButtonStateChangedObservable\", {\n        /**\n         * Fired when the Y button on this controller is modified\n         */\n        get: function () {\n            if (this.hand === \"left\") {\n                return this.onSecondaryButtonStateChangedObservable;\n            }\n            else {\n                throw new Error(\"No Y button on right hand\");\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Called once for each button that changed state since the last frame\n     * 0) thumb stick (touch, press, value = pressed (0,1)). value is in this.leftStick\n     * 1) index trigger (touch (?), press (only when value > 0.1), value 0 to 1)\n     * 2) secondary trigger (same)\n     * 3) A (right) X (left), touch, pressed = value\n     * 4) B / Y\n     * 5) thumb rest\n     * @param buttonIdx Which button index changed\n     * @param state New state of the button\n     */\n    OculusTouchController.prototype._handleButtonChange = function (buttonIdx, state) {\n        var notifyObject = state; //{ state: state, changes: changes };\n        var triggerDirection = this.hand === \"right\" ? -1 : 1;\n        switch (buttonIdx) {\n            case 0:\n                this.onPadStateChangedObservable.notifyObservers(notifyObject);\n                return;\n            case 1: // index trigger\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\n                    this._defaultModel.getChildren()[3].rotation.x = -notifyObject.value * 0.2;\n                    this._defaultModel.getChildren()[3].position.y = -notifyObject.value * 0.005;\n                    this._defaultModel.getChildren()[3].position.z = -notifyObject.value * 0.005;\n                }\n                this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\n                return;\n            case 2: // secondary trigger\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\n                    this._defaultModel.getChildren()[4].position.x = triggerDirection * notifyObject.value * 0.0035;\n                }\n                this.onSecondaryTriggerStateChangedObservable.notifyObservers(notifyObject);\n                return;\n            case 3:\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\n                    if (notifyObject.pressed) {\n                        this._defaultModel.getChildren()[1].position.y = -0.001;\n                    }\n                    else {\n                        this._defaultModel.getChildren()[1].position.y = 0;\n                    }\n                }\n                this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\n                return;\n            case 4:\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\n                    if (notifyObject.pressed) {\n                        this._defaultModel.getChildren()[2].position.y = -0.001;\n                    }\n                    else {\n                        this._defaultModel.getChildren()[2].position.y = 0;\n                    }\n                }\n                this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\n                return;\n            case 5:\n                this.onThumbRestChangedObservable.notifyObservers(notifyObject);\n                return;\n        }\n    };\n    /**\n     * Base Url for the controller model.\n     */\n    OculusTouchController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/oculus/\";\n    /**\n     * File name for the left controller model.\n     */\n    OculusTouchController.MODEL_LEFT_FILENAME = \"left.babylon\";\n    /**\n     * File name for the right controller model.\n     */\n    OculusTouchController.MODEL_RIGHT_FILENAME = \"right.babylon\";\n    /**\n     * Base Url for the Quest controller model.\n     */\n    OculusTouchController.QUEST_MODEL_BASE_URL = \"https://controllers.babylonjs.com/oculusQuest/\";\n    /**\n     * @hidden\n     * If the controllers are running on a device that needs the updated Quest controller models\n     */\n    OculusTouchController._IsQuest = false;\n    return OculusTouchController;\n}(WebVRController));\nexport { OculusTouchController };\nPoseEnabledControllerHelper._ControllerFactories.push({\n    canCreate: function (gamepadInfo) {\n        // If the headset reports being an Oculus Quest, use the Quest controller models\n        if (EngineStore.LastCreatedEngine && EngineStore.LastCreatedEngine._vrDisplay && EngineStore.LastCreatedEngine._vrDisplay.displayName === \"Oculus Quest\") {\n            OculusTouchController._IsQuest = true;\n        }\n        return gamepadInfo.id.indexOf(\"Oculus Touch\") !== -1;\n    },\n    create: function (gamepadInfo) {\n        return new OculusTouchController(gamepadInfo);\n    },\n});\n//# sourceMappingURL=oculusTouchController.js.map","import { __extends } from \"tslib\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { WebVRController } from \"./webVRController.js\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController.js\";\n/**\n * Vive Controller\n */\nvar ViveController = /** @class */ (function (_super) {\n    __extends(ViveController, _super);\n    /**\n     * Creates a new ViveController from a gamepad\n     * @param vrGamepad the gamepad that the controller should be created from\n     */\n    function ViveController(vrGamepad) {\n        var _this = _super.call(this, vrGamepad) || this;\n        _this.controllerType = PoseEnabledControllerType.VIVE;\n        _this._invertLeftStickY = true;\n        return _this;\n    }\n    /**\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\n     * @param scene scene in which to add meshes\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\n     */\n    ViveController.prototype.initControllerMesh = function (scene, meshLoaded) {\n        var _this = this;\n        SceneLoader.ImportMesh(\"\", ViveController.MODEL_BASE_URL, ViveController.MODEL_FILENAME, scene, function (newMeshes) {\n            /*\n            Parent Mesh name: ViveWand\n            - body\n            - r_gripper\n            - l_gripper\n            - menu_button\n            - system_button\n            - trackpad\n            - trigger\n            - LED\n            */\n            _this._defaultModel = newMeshes[1];\n            _this.attachToMesh(_this._defaultModel);\n            if (meshLoaded) {\n                meshLoaded(_this._defaultModel);\n            }\n        });\n    };\n    Object.defineProperty(ViveController.prototype, \"onLeftButtonStateChangedObservable\", {\n        /**\n         * Fired when the left button on this controller is modified\n         */\n        get: function () {\n            return this.onMainButtonStateChangedObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ViveController.prototype, \"onRightButtonStateChangedObservable\", {\n        /**\n         * Fired when the right button on this controller is modified\n         */\n        get: function () {\n            return this.onMainButtonStateChangedObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ViveController.prototype, \"onMenuButtonStateChangedObservable\", {\n        /**\n         * Fired when the menu button on this controller is modified\n         */\n        get: function () {\n            return this.onSecondaryButtonStateChangedObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Called once for each button that changed state since the last frame\n     * Vive mapping:\n     * 0: touchpad\n     * 1: trigger\n     * 2: left AND right buttons\n     * 3: menu button\n     * @param buttonIdx Which button index changed\n     * @param state New state of the button\n     */\n    ViveController.prototype._handleButtonChange = function (buttonIdx, state) {\n        var notifyObject = state; //{ state: state, changes: changes };\n        switch (buttonIdx) {\n            case 0:\n                this.onPadStateChangedObservable.notifyObservers(notifyObject);\n                return;\n            case 1: // index trigger\n                if (this._defaultModel) {\n                    this._defaultModel.getChildren()[6].rotation.x = -notifyObject.value * 0.15;\n                }\n                this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\n                return;\n            case 2: // left AND right button\n                this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\n                return;\n            case 3:\n                if (this._defaultModel) {\n                    if (notifyObject.pressed) {\n                        this._defaultModel.getChildren()[2].position.y = -0.001;\n                    }\n                    else {\n                        this._defaultModel.getChildren()[2].position.y = 0;\n                    }\n                }\n                this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\n                return;\n        }\n    };\n    /**\n     * Base Url for the controller model.\n     */\n    ViveController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/vive/\";\n    /**\n     * File name for the controller model.\n     */\n    ViveController.MODEL_FILENAME = \"wand.babylon\";\n    return ViveController;\n}(WebVRController));\nexport { ViveController };\nPoseEnabledControllerHelper._ControllerFactories.push({\n    canCreate: function (gamepadInfo) {\n        return gamepadInfo.id.toLowerCase().indexOf(\"openvr\") !== -1;\n    },\n    create: function (gamepadInfo) {\n        return new ViveController(gamepadInfo);\n    },\n});\n//# sourceMappingURL=viveController.js.map","import { __extends } from \"tslib\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Quaternion, Vector3 } from \"../../Maths/math.vector.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { Ray } from \"../../Culling/ray.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { WebVRController } from \"./webVRController.js\";\nimport { GenericController } from \"./genericController.js\";\nimport { PoseEnabledController, PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController.js\";\n/**\n * Defines the LoadedMeshInfo object that describes information about the loaded webVR controller mesh\n */\nvar LoadedMeshInfo = /** @class */ (function () {\n    function LoadedMeshInfo() {\n        /**\n         * Map of the button meshes contained in the controller\n         */\n        this.buttonMeshes = {};\n        /**\n         * Map of the axis meshes contained in the controller\n         */\n        this.axisMeshes = {};\n    }\n    return LoadedMeshInfo;\n}());\n/**\n * Defines the WindowsMotionController object that the state of the windows motion controller\n */\nvar WindowsMotionController = /** @class */ (function (_super) {\n    __extends(WindowsMotionController, _super);\n    /**\n     * Creates a new WindowsMotionController from a gamepad\n     * @param vrGamepad the gamepad that the controller should be created from\n     */\n    function WindowsMotionController(vrGamepad) {\n        var _this = _super.call(this, vrGamepad) || this;\n        _this._mapping = {\n            // Semantic button names\n            buttons: [\"thumbstick\", \"trigger\", \"grip\", \"menu\", \"trackpad\"],\n            // trigger, grip, trackpad, thumbstick, menu\n            // A mapping of the button name to glTF model node name\n            // that should be transformed by button value.\n            buttonMeshNames: {\n                trigger: \"SELECT\",\n                menu: \"MENU\",\n                grip: \"GRASP\",\n                thumbstick: \"THUMBSTICK_PRESS\",\n                trackpad: \"TOUCHPAD_PRESS\",\n            },\n            // This mapping is used to translate from the Motion Controller to Babylon semantics\n            buttonObservableNames: {\n                trigger: \"onTriggerStateChangedObservable\",\n                menu: \"onSecondaryButtonStateChangedObservable\",\n                grip: \"onMainButtonStateChangedObservable\",\n                thumbstick: \"onPadStateChangedObservable\",\n                trackpad: \"onTrackpadChangedObservable\",\n            },\n            // A mapping of the axis name to glTF model node name\n            // that should be transformed by axis value.\n            // This array mirrors the browserGamepad.axes array, such that\n            // the mesh corresponding to axis 0 is in this array index 0.\n            axisMeshNames: [\"THUMBSTICK_X\", \"THUMBSTICK_Y\", \"TOUCHPAD_TOUCH_X\", \"TOUCHPAD_TOUCH_Y\"],\n            // upside down in webxr\n            pointingPoseMeshName: PoseEnabledController.POINTING_POSE,\n        };\n        /**\n         * Fired when the trackpad on this controller is clicked\n         */\n        _this.onTrackpadChangedObservable = new Observable();\n        /**\n         * Fired when the trackpad on this controller is modified\n         */\n        _this.onTrackpadValuesChangedObservable = new Observable();\n        /**\n         * The current x and y values of this controller's trackpad\n         */\n        _this.trackpad = { x: 0, y: 0 };\n        _this.controllerType = PoseEnabledControllerType.WINDOWS;\n        _this._loadedMeshInfo = null;\n        return _this;\n    }\n    Object.defineProperty(WindowsMotionController.prototype, \"onTriggerButtonStateChangedObservable\", {\n        /**\n         * Fired when the trigger on this controller is modified\n         */\n        get: function () {\n            return this.onTriggerStateChangedObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(WindowsMotionController.prototype, \"onMenuButtonStateChangedObservable\", {\n        /**\n         * Fired when the menu button on this controller is modified\n         */\n        get: function () {\n            return this.onSecondaryButtonStateChangedObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(WindowsMotionController.prototype, \"onGripButtonStateChangedObservable\", {\n        /**\n         * Fired when the grip button on this controller is modified\n         */\n        get: function () {\n            return this.onMainButtonStateChangedObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(WindowsMotionController.prototype, \"onThumbstickButtonStateChangedObservable\", {\n        /**\n         * Fired when the thumbstick button on this controller is modified\n         */\n        get: function () {\n            return this.onPadStateChangedObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(WindowsMotionController.prototype, \"onTouchpadButtonStateChangedObservable\", {\n        /**\n         * Fired when the touchpad button on this controller is modified\n         */\n        get: function () {\n            return this.onTrackpadChangedObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(WindowsMotionController.prototype, \"onTouchpadValuesChangedObservable\", {\n        /**\n         * Fired when the touchpad values on this controller are modified\n         */\n        get: function () {\n            return this.onTrackpadValuesChangedObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    WindowsMotionController.prototype._updateTrackpad = function () {\n        if (this.browserGamepad.axes && (this.browserGamepad.axes[2] != this.trackpad.x || this.browserGamepad.axes[3] != this.trackpad.y)) {\n            this.trackpad.x = this.browserGamepad[\"axes\"][this._mapping.axisMeshNames.indexOf(\"TOUCHPAD_TOUCH_X\")];\n            this.trackpad.y = this.browserGamepad[\"axes\"][this._mapping.axisMeshNames.indexOf(\"TOUCHPAD_TOUCH_Y\")];\n            this.onTrackpadValuesChangedObservable.notifyObservers(this.trackpad);\n        }\n    };\n    /**\n     * Called once per frame by the engine.\n     */\n    WindowsMotionController.prototype.update = function () {\n        _super.prototype.update.call(this);\n        if (this.browserGamepad.axes) {\n            this._updateTrackpad();\n            // Only need to animate axes if there is a loaded mesh\n            if (this._loadedMeshInfo) {\n                for (var axis = 0; axis < this._mapping.axisMeshNames.length; axis++) {\n                    this._lerpAxisTransform(axis, this.browserGamepad.axes[axis]);\n                }\n            }\n        }\n    };\n    /**\n     * Called once for each button that changed state since the last frame\n     * @param buttonIdx Which button index changed\n     * @param state New state of the button\n     */\n    WindowsMotionController.prototype._handleButtonChange = function (buttonIdx, state) {\n        var buttonName = this._mapping.buttons[buttonIdx];\n        if (!buttonName) {\n            return;\n        }\n        // Update the trackpad to ensure trackpad.x/y are accurate during button events between frames\n        this._updateTrackpad();\n        // Only emit events for buttons that we know how to map from index to name\n        var observable = this[this._mapping.buttonObservableNames[buttonName]];\n        if (observable) {\n            observable.notifyObservers(state);\n        }\n        this._lerpButtonTransform(buttonName, state.value);\n    };\n    /**\n     * Moves the buttons on the controller mesh based on their current state\n     * @param buttonName the name of the button to move\n     * @param buttonValue the value of the button which determines the buttons new position\n     */\n    WindowsMotionController.prototype._lerpButtonTransform = function (buttonName, buttonValue) {\n        // If there is no loaded mesh, there is nothing to transform.\n        if (!this._loadedMeshInfo) {\n            return;\n        }\n        var meshInfo = this._loadedMeshInfo.buttonMeshes[buttonName];\n        if (!meshInfo || !meshInfo.unpressed.rotationQuaternion || !meshInfo.pressed.rotationQuaternion || !meshInfo.value.rotationQuaternion) {\n            return;\n        }\n        Quaternion.SlerpToRef(meshInfo.unpressed.rotationQuaternion, meshInfo.pressed.rotationQuaternion, buttonValue, meshInfo.value.rotationQuaternion);\n        Vector3.LerpToRef(meshInfo.unpressed.position, meshInfo.pressed.position, buttonValue, meshInfo.value.position);\n    };\n    /**\n     * Moves the axis on the controller mesh based on its current state\n     * @param axis the index of the axis\n     * @param axisValue the value of the axis which determines the meshes new position\n     * @hidden\n     */\n    WindowsMotionController.prototype._lerpAxisTransform = function (axis, axisValue) {\n        if (!this._loadedMeshInfo) {\n            return;\n        }\n        var meshInfo = this._loadedMeshInfo.axisMeshes[axis];\n        if (!meshInfo) {\n            return;\n        }\n        if (!meshInfo.min.rotationQuaternion || !meshInfo.max.rotationQuaternion || !meshInfo.value.rotationQuaternion) {\n            return;\n        }\n        // Convert from gamepad value range (-1 to +1) to lerp range (0 to 1)\n        var lerpValue = axisValue * 0.5 + 0.5;\n        Quaternion.SlerpToRef(meshInfo.min.rotationQuaternion, meshInfo.max.rotationQuaternion, lerpValue, meshInfo.value.rotationQuaternion);\n        Vector3.LerpToRef(meshInfo.min.position, meshInfo.max.position, lerpValue, meshInfo.value.position);\n    };\n    /**\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\n     * @param scene scene in which to add meshes\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\n     * @param forceDefault\n     */\n    WindowsMotionController.prototype.initControllerMesh = function (scene, meshLoaded, forceDefault) {\n        var _this = this;\n        if (forceDefault === void 0) { forceDefault = false; }\n        var path;\n        var filename;\n        // Checking if GLB loader is present\n        if (SceneLoader.IsPluginForExtensionAvailable(\".glb\")) {\n            // Determine the device specific folder based on the ID suffix\n            var device = \"default\";\n            if (this.id && !forceDefault) {\n                var match = this.id.match(WindowsMotionController.GAMEPAD_ID_PATTERN);\n                device = (match && match[0]) || device;\n            }\n            // Hand\n            if (this.hand === \"left\") {\n                filename = WindowsMotionController.MODEL_LEFT_FILENAME;\n            }\n            else {\n                // Right is the default if no hand is specified\n                filename = WindowsMotionController.MODEL_RIGHT_FILENAME;\n            }\n            path = WindowsMotionController.MODEL_BASE_URL + device + \"/\";\n        }\n        else {\n            Logger.Warn(\"You need to reference GLTF loader to load Windows Motion Controllers model. Falling back to generic models\");\n            path = GenericController.MODEL_BASE_URL;\n            filename = GenericController.MODEL_FILENAME;\n        }\n        SceneLoader.ImportMesh(\"\", path, filename, scene, function (meshes) {\n            // glTF files successfully loaded from the remote server, now process them to ensure they are in the right format.\n            _this._loadedMeshInfo = _this._processModel(scene, meshes);\n            if (!_this._loadedMeshInfo) {\n                return;\n            }\n            _this._defaultModel = _this._loadedMeshInfo.rootNode;\n            _this.attachToMesh(_this._defaultModel);\n            if (meshLoaded) {\n                meshLoaded(_this._defaultModel);\n            }\n        }, null, function (scene, message) {\n            Logger.Log(message);\n            Logger.Warn(\"Failed to retrieve controller model from the remote server: \" + path + filename);\n            if (!forceDefault) {\n                _this.initControllerMesh(scene, meshLoaded, true);\n            }\n        });\n    };\n    /**\n     * Takes a list of meshes (as loaded from the glTF file) and finds the root node, as well as nodes that\n     * can be transformed by button presses and axes values, based on this._mapping.\n     *\n     * @param scene scene in which the meshes exist\n     * @param meshes list of meshes that make up the controller model to process\n     * @return structured view of the given meshes, with mapping of buttons and axes to meshes that can be transformed.\n     */\n    WindowsMotionController.prototype._processModel = function (scene, meshes) {\n        var loadedMeshInfo = null;\n        // Create a new mesh to contain the glTF hierarchy\n        var parentMesh = new Mesh(this.id + \" \" + this.hand, scene);\n        // Find the root node in the loaded glTF scene, and attach it as a child of 'parentMesh'\n        var childMesh = null;\n        for (var i = 0; i < meshes.length; i++) {\n            var mesh = meshes[i];\n            if (!mesh.parent) {\n                // Exclude controller meshes from picking results\n                mesh.isPickable = false;\n                // Handle root node, attach to the new parentMesh\n                childMesh = mesh;\n                break;\n            }\n        }\n        if (childMesh) {\n            childMesh.setParent(parentMesh);\n            // Create our mesh info. Note that this method will always return non-null.\n            loadedMeshInfo = this._createMeshInfo(parentMesh);\n        }\n        else {\n            Logger.Warn(\"Could not find root node in model file.\");\n        }\n        return loadedMeshInfo;\n    };\n    WindowsMotionController.prototype._createMeshInfo = function (rootNode) {\n        var loadedMeshInfo = new LoadedMeshInfo();\n        var i;\n        loadedMeshInfo.rootNode = rootNode;\n        // Reset the caches\n        loadedMeshInfo.buttonMeshes = {};\n        loadedMeshInfo.axisMeshes = {};\n        // Button Meshes\n        for (i = 0; i < this._mapping.buttons.length; i++) {\n            var buttonMeshName = this._mapping.buttonMeshNames[this._mapping.buttons[i]];\n            if (!buttonMeshName) {\n                Logger.Log(\"Skipping unknown button at index: \" + i + \" with mapped name: \" + this._mapping.buttons[i]);\n                continue;\n            }\n            var buttonMesh = getChildByName(rootNode, buttonMeshName);\n            if (!buttonMesh) {\n                Logger.Warn(\"Missing button mesh with name: \" + buttonMeshName);\n                continue;\n            }\n            var buttonMeshInfo = {\n                index: i,\n                value: getImmediateChildByName(buttonMesh, \"VALUE\"),\n                pressed: getImmediateChildByName(buttonMesh, \"PRESSED\"),\n                unpressed: getImmediateChildByName(buttonMesh, \"UNPRESSED\"),\n            };\n            if (buttonMeshInfo.value && buttonMeshInfo.pressed && buttonMeshInfo.unpressed) {\n                loadedMeshInfo.buttonMeshes[this._mapping.buttons[i]] = buttonMeshInfo;\n            }\n            else {\n                // If we didn't find the mesh, it simply means this button won't have transforms applied as mapped button value changes.\n                Logger.Warn(\"Missing button submesh under mesh with name: \" +\n                    buttonMeshName +\n                    \"(VALUE: \" +\n                    !!buttonMeshInfo.value +\n                    \", PRESSED: \" +\n                    !!buttonMeshInfo.pressed +\n                    \", UNPRESSED:\" +\n                    !!buttonMeshInfo.unpressed +\n                    \")\");\n            }\n        }\n        // Axis Meshes\n        for (i = 0; i < this._mapping.axisMeshNames.length; i++) {\n            var axisMeshName = this._mapping.axisMeshNames[i];\n            if (!axisMeshName) {\n                Logger.Log(\"Skipping unknown axis at index: \" + i);\n                continue;\n            }\n            var axisMesh = getChildByName(rootNode, axisMeshName);\n            if (!axisMesh) {\n                Logger.Warn(\"Missing axis mesh with name: \" + axisMeshName);\n                continue;\n            }\n            var axisMeshInfo = {\n                index: i,\n                value: getImmediateChildByName(axisMesh, \"VALUE\"),\n                min: getImmediateChildByName(axisMesh, \"MIN\"),\n                max: getImmediateChildByName(axisMesh, \"MAX\"),\n            };\n            if (axisMeshInfo.value && axisMeshInfo.min && axisMeshInfo.max) {\n                loadedMeshInfo.axisMeshes[i] = axisMeshInfo;\n            }\n            else {\n                // If we didn't find the mesh, it simply means thit axis won't have transforms applied as mapped axis values change.\n                Logger.Warn(\"Missing axis submesh under mesh with name: \" +\n                    axisMeshName +\n                    \"(VALUE: \" +\n                    !!axisMeshInfo.value +\n                    \", MIN: \" +\n                    !!axisMeshInfo.min +\n                    \", MAX:\" +\n                    !!axisMeshInfo.max +\n                    \")\");\n            }\n        }\n        // Pointing Ray\n        loadedMeshInfo.pointingPoseNode = getChildByName(rootNode, this._mapping.pointingPoseMeshName);\n        if (!loadedMeshInfo.pointingPoseNode) {\n            Logger.Warn(\"Missing pointing pose mesh with name: \" + this._mapping.pointingPoseMeshName);\n        }\n        else {\n            this._pointingPoseNode = loadedMeshInfo.pointingPoseNode;\n        }\n        return loadedMeshInfo;\n        // Look through all children recursively. This will return null if no mesh exists with the given name.\n        function getChildByName(node, name) {\n            return node.getChildren(function (n) { return n.name === name; }, false)[0];\n        }\n        // Look through only immediate children. This will return null if no mesh exists with the given name.\n        function getImmediateChildByName(node, name) {\n            return node.getChildren(function (n) { return n.name == name; }, true)[0];\n        }\n    };\n    /**\n     * Gets the ray of the controller in the direction the controller is pointing\n     * @param length the length the resulting ray should be\n     * @returns a ray in the direction the controller is pointing\n     */\n    WindowsMotionController.prototype.getForwardRay = function (length) {\n        if (length === void 0) { length = 100; }\n        if (!(this._loadedMeshInfo && this._loadedMeshInfo.pointingPoseNode)) {\n            return _super.prototype.getForwardRay.call(this, length);\n        }\n        var m = this._loadedMeshInfo.pointingPoseNode.getWorldMatrix();\n        var origin = m.getTranslation();\n        var forward = new Vector3(0, 0, -1);\n        var forwardWorld = Vector3.TransformNormal(forward, m);\n        var direction = Vector3.Normalize(forwardWorld);\n        return new Ray(origin, direction, length);\n    };\n    /**\n     * Disposes of the controller\n     */\n    WindowsMotionController.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.onTrackpadChangedObservable.clear();\n        this.onTrackpadValuesChangedObservable.clear();\n    };\n    /**\n     * The base url used to load the left and right controller models\n     */\n    WindowsMotionController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/microsoft/\";\n    /**\n     * The name of the left controller model file\n     */\n    WindowsMotionController.MODEL_LEFT_FILENAME = \"left.glb\";\n    /**\n     * The name of the right controller model file\n     */\n    WindowsMotionController.MODEL_RIGHT_FILENAME = \"right.glb\";\n    /**\n     * The controller name prefix for this controller type\n     */\n    WindowsMotionController.GAMEPAD_ID_PREFIX = \"Spatial Controller (Spatial Interaction Source) \";\n    /**\n     * The controller id pattern for this controller type\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    WindowsMotionController.GAMEPAD_ID_PATTERN = /([0-9a-zA-Z]+-[0-9a-zA-Z]+)$/;\n    return WindowsMotionController;\n}(WebVRController));\nexport { WindowsMotionController };\n/**\n * This class represents a new windows motion controller in XR.\n */\nvar XRWindowsMotionController = /** @class */ (function (_super) {\n    __extends(XRWindowsMotionController, _super);\n    /**\n     * Construct a new XR-Based windows motion controller\n     *\n     * @param gamepadInfo the gamepad object from the browser\n     */\n    function XRWindowsMotionController(gamepadInfo) {\n        var _this = _super.call(this, gamepadInfo) || this;\n        /**\n         * Changing the original WIndowsMotionController mapping to fir the new mapping\n         */\n        _this._mapping = {\n            // Semantic button names\n            buttons: [\"trigger\", \"grip\", \"trackpad\", \"thumbstick\", \"menu\"],\n            // trigger, grip, trackpad, thumbstick, menu\n            // A mapping of the button name to glTF model node name\n            // that should be transformed by button value.\n            buttonMeshNames: {\n                trigger: \"SELECT\",\n                menu: \"MENU\",\n                grip: \"GRASP\",\n                thumbstick: \"THUMBSTICK_PRESS\",\n                trackpad: \"TOUCHPAD_PRESS\",\n            },\n            // This mapping is used to translate from the Motion Controller to Babylon semantics\n            buttonObservableNames: {\n                trigger: \"onTriggerStateChangedObservable\",\n                menu: \"onSecondaryButtonStateChangedObservable\",\n                grip: \"onMainButtonStateChangedObservable\",\n                thumbstick: \"onThumbstickStateChangedObservable\",\n                trackpad: \"onTrackpadChangedObservable\",\n            },\n            // A mapping of the axis name to glTF model node name\n            // that should be transformed by axis value.\n            // This array mirrors the browserGamepad.axes array, such that\n            // the mesh corresponding to axis 0 is in this array index 0.\n            axisMeshNames: [\"TOUCHPAD_TOUCH_X\", \"TOUCHPAD_TOUCH_Y\", \"THUMBSTICK_X\", \"THUMBSTICK_Y\"],\n            // upside down in webxr\n            pointingPoseMeshName: PoseEnabledController.POINTING_POSE,\n        };\n        /**\n         * holds the thumbstick values (X,Y)\n         */\n        _this.thumbstickValues = { x: 0, y: 0 };\n        /**\n         * Fired when the thumbstick on this controller is clicked\n         */\n        _this.onThumbstickStateChangedObservable = new Observable();\n        /**\n         * Fired when the thumbstick on this controller is modified\n         */\n        _this.onThumbstickValuesChangedObservable = new Observable();\n        /**\n         * Fired when the touchpad button on this controller is modified\n         */\n        _this.onTrackpadChangedObservable = _this.onPadStateChangedObservable;\n        /**\n         * Fired when the touchpad values on this controller are modified\n         */\n        _this.onTrackpadValuesChangedObservable = _this.onPadValuesChangedObservable;\n        return _this;\n    }\n    Object.defineProperty(XRWindowsMotionController.prototype, \"onThumbstickButtonStateChangedObservable\", {\n        /**\n         * Fired when the thumbstick button on this controller is modified\n         * here to prevent breaking changes\n         */\n        get: function () {\n            return this.onThumbstickStateChangedObservable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * updating the thumbstick(!) and not the trackpad.\n     * This is named this way due to the difference between WebVR and XR and to avoid\n     * changing the parent class.\n     */\n    XRWindowsMotionController.prototype._updateTrackpad = function () {\n        if (this.browserGamepad.axes && (this.browserGamepad.axes[2] != this.thumbstickValues.x || this.browserGamepad.axes[3] != this.thumbstickValues.y)) {\n            this.trackpad.x = this.browserGamepad[\"axes\"][2];\n            this.trackpad.y = this.browserGamepad[\"axes\"][3];\n            this.onThumbstickValuesChangedObservable.notifyObservers(this.trackpad);\n        }\n    };\n    /**\n     * Disposes the class with joy\n     */\n    XRWindowsMotionController.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.onThumbstickStateChangedObservable.clear();\n        this.onThumbstickValuesChangedObservable.clear();\n    };\n    return XRWindowsMotionController;\n}(WindowsMotionController));\nexport { XRWindowsMotionController };\nPoseEnabledControllerHelper._ControllerFactories.push({\n    canCreate: function (gamepadInfo) {\n        return gamepadInfo.id.indexOf(WindowsMotionController.GAMEPAD_ID_PREFIX) === 0;\n    },\n    create: function (gamepadInfo) {\n        return new WindowsMotionController(gamepadInfo);\n    },\n});\n//# sourceMappingURL=windowsMotionController.js.map","import { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Gamepad } from \"../Gamepads/gamepad.js\";\n/**\n * Defines supported buttons for XBox360 compatible gamepads\n */\nexport var Xbox360Button;\n(function (Xbox360Button) {\n    /** A */\n    Xbox360Button[Xbox360Button[\"A\"] = 0] = \"A\";\n    /** B */\n    Xbox360Button[Xbox360Button[\"B\"] = 1] = \"B\";\n    /** X */\n    Xbox360Button[Xbox360Button[\"X\"] = 2] = \"X\";\n    /** Y */\n    Xbox360Button[Xbox360Button[\"Y\"] = 3] = \"Y\";\n    /** Left button */\n    Xbox360Button[Xbox360Button[\"LB\"] = 4] = \"LB\";\n    /** Right button */\n    Xbox360Button[Xbox360Button[\"RB\"] = 5] = \"RB\";\n    /** Back */\n    Xbox360Button[Xbox360Button[\"Back\"] = 8] = \"Back\";\n    /** Start */\n    Xbox360Button[Xbox360Button[\"Start\"] = 9] = \"Start\";\n    /** Left stick */\n    Xbox360Button[Xbox360Button[\"LeftStick\"] = 10] = \"LeftStick\";\n    /** Right stick */\n    Xbox360Button[Xbox360Button[\"RightStick\"] = 11] = \"RightStick\";\n})(Xbox360Button || (Xbox360Button = {}));\n/** Defines values for XBox360 DPad  */\nexport var Xbox360Dpad;\n(function (Xbox360Dpad) {\n    /** Up */\n    Xbox360Dpad[Xbox360Dpad[\"Up\"] = 12] = \"Up\";\n    /** Down */\n    Xbox360Dpad[Xbox360Dpad[\"Down\"] = 13] = \"Down\";\n    /** Left */\n    Xbox360Dpad[Xbox360Dpad[\"Left\"] = 14] = \"Left\";\n    /** Right */\n    Xbox360Dpad[Xbox360Dpad[\"Right\"] = 15] = \"Right\";\n})(Xbox360Dpad || (Xbox360Dpad = {}));\n/**\n * Defines a XBox360 gamepad\n */\nvar Xbox360Pad = /** @class */ (function (_super) {\n    __extends(Xbox360Pad, _super);\n    /**\n     * Creates a new XBox360 gamepad object\n     * @param id defines the id of this gamepad\n     * @param index defines its index\n     * @param gamepad defines the internal HTML gamepad object\n     * @param xboxOne defines if it is a XBox One gamepad\n     */\n    function Xbox360Pad(id, index, gamepad, xboxOne) {\n        if (xboxOne === void 0) { xboxOne = false; }\n        var _this = _super.call(this, id, index, gamepad, 0, 1, 2, 3) || this;\n        _this._leftTrigger = 0;\n        _this._rightTrigger = 0;\n        /** Observable raised when a button is pressed */\n        _this.onButtonDownObservable = new Observable();\n        /** Observable raised when a button is released */\n        _this.onButtonUpObservable = new Observable();\n        /** Observable raised when a pad is pressed */\n        _this.onPadDownObservable = new Observable();\n        /** Observable raised when a pad is released */\n        _this.onPadUpObservable = new Observable();\n        _this._buttonA = 0;\n        _this._buttonB = 0;\n        _this._buttonX = 0;\n        _this._buttonY = 0;\n        _this._buttonBack = 0;\n        _this._buttonStart = 0;\n        _this._buttonLB = 0;\n        _this._buttonRB = 0;\n        _this._buttonLeftStick = 0;\n        _this._buttonRightStick = 0;\n        _this._dPadUp = 0;\n        _this._dPadDown = 0;\n        _this._dPadLeft = 0;\n        _this._dPadRight = 0;\n        _this._isXboxOnePad = false;\n        _this.type = Gamepad.XBOX;\n        _this._isXboxOnePad = xboxOne;\n        return _this;\n    }\n    /**\n     * Defines the callback to call when left trigger is pressed\n     * @param callback defines the callback to use\n     */\n    Xbox360Pad.prototype.onlefttriggerchanged = function (callback) {\n        this._onlefttriggerchanged = callback;\n    };\n    /**\n     * Defines the callback to call when right trigger is pressed\n     * @param callback defines the callback to use\n     */\n    Xbox360Pad.prototype.onrighttriggerchanged = function (callback) {\n        this._onrighttriggerchanged = callback;\n    };\n    Object.defineProperty(Xbox360Pad.prototype, \"leftTrigger\", {\n        /**\n         * Gets the left trigger value\n         */\n        get: function () {\n            return this._leftTrigger;\n        },\n        /**\n         * Sets the left trigger value\n         */\n        set: function (newValue) {\n            if (this._onlefttriggerchanged && this._leftTrigger !== newValue) {\n                this._onlefttriggerchanged(newValue);\n            }\n            this._leftTrigger = newValue;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Xbox360Pad.prototype, \"rightTrigger\", {\n        /**\n         * Gets the right trigger value\n         */\n        get: function () {\n            return this._rightTrigger;\n        },\n        /**\n         * Sets the right trigger value\n         */\n        set: function (newValue) {\n            if (this._onrighttriggerchanged && this._rightTrigger !== newValue) {\n                this._onrighttriggerchanged(newValue);\n            }\n            this._rightTrigger = newValue;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Defines the callback to call when a button is pressed\n     * @param callback defines the callback to use\n     */\n    Xbox360Pad.prototype.onbuttondown = function (callback) {\n        this._onbuttondown = callback;\n    };\n    /**\n     * Defines the callback to call when a button is released\n     * @param callback defines the callback to use\n     */\n    Xbox360Pad.prototype.onbuttonup = function (callback) {\n        this._onbuttonup = callback;\n    };\n    /**\n     * Defines the callback to call when a pad is pressed\n     * @param callback defines the callback to use\n     */\n    Xbox360Pad.prototype.ondpaddown = function (callback) {\n        this._ondpaddown = callback;\n    };\n    /**\n     * Defines the callback to call when a pad is released\n     * @param callback defines the callback to use\n     */\n    Xbox360Pad.prototype.ondpadup = function (callback) {\n        this._ondpadup = callback;\n    };\n    Xbox360Pad.prototype._setButtonValue = function (newValue, currentValue, buttonType) {\n        if (newValue !== currentValue) {\n            if (newValue === 1) {\n                if (this._onbuttondown) {\n                    this._onbuttondown(buttonType);\n                }\n                this.onButtonDownObservable.notifyObservers(buttonType);\n            }\n            if (newValue === 0) {\n                if (this._onbuttonup) {\n                    this._onbuttonup(buttonType);\n                }\n                this.onButtonUpObservable.notifyObservers(buttonType);\n            }\n        }\n        return newValue;\n    };\n    Xbox360Pad.prototype._setDPadValue = function (newValue, currentValue, buttonType) {\n        if (newValue !== currentValue) {\n            if (newValue === 1) {\n                if (this._ondpaddown) {\n                    this._ondpaddown(buttonType);\n                }\n                this.onPadDownObservable.notifyObservers(buttonType);\n            }\n            if (newValue === 0) {\n                if (this._ondpadup) {\n                    this._ondpadup(buttonType);\n                }\n                this.onPadUpObservable.notifyObservers(buttonType);\n            }\n        }\n        return newValue;\n    };\n    Object.defineProperty(Xbox360Pad.prototype, \"buttonA\", {\n        /**\n         * Gets the value of the `A` button\n         */\n        get: function () {\n            return this._buttonA;\n        },\n        /**\n         * Sets the value of the `A` button\n         */\n        set: function (value) {\n            this._buttonA = this._setButtonValue(value, this._buttonA, Xbox360Button.A);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Xbox360Pad.prototype, \"buttonB\", {\n        /**\n         * Gets the value of the `B` button\n         */\n        get: function () {\n            return this._buttonB;\n        },\n        /**\n         * Sets the value of the `B` button\n         */\n        set: function (value) {\n            this._buttonB = this._setButtonValue(value, this._buttonB, Xbox360Button.B);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Xbox360Pad.prototype, \"buttonX\", {\n        /**\n         * Gets the value of the `X` button\n         */\n        get: function () {\n            return this._buttonX;\n        },\n        /**\n         * Sets the value of the `X` button\n         */\n        set: function (value) {\n            this._buttonX = this._setButtonValue(value, this._buttonX, Xbox360Button.X);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Xbox360Pad.prototype, \"buttonY\", {\n        /**\n         * Gets the value of the `Y` button\n         */\n        get: function () {\n            return this._buttonY;\n        },\n        /**\n         * Sets the value of the `Y` button\n         */\n        set: function (value) {\n            this._buttonY = this._setButtonValue(value, this._buttonY, Xbox360Button.Y);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Xbox360Pad.prototype, \"buttonStart\", {\n        /**\n         * Gets the value of the `Start` button\n         */\n        get: function () {\n            return this._buttonStart;\n        },\n        /**\n         * Sets the value of the `Start` button\n         */\n        set: function (value) {\n            this._buttonStart = this._setButtonValue(value, this._buttonStart, Xbox360Button.Start);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Xbox360Pad.prototype, \"buttonBack\", {\n        /**\n         * Gets the value of the `Back` button\n         */\n        get: function () {\n            return this._buttonBack;\n        },\n        /**\n         * Sets the value of the `Back` button\n         */\n        set: function (value) {\n            this._buttonBack = this._setButtonValue(value, this._buttonBack, Xbox360Button.Back);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Xbox360Pad.prototype, \"buttonLB\", {\n        /**\n         * Gets the value of the `Left` button\n         */\n        get: function () {\n            return this._buttonLB;\n        },\n        /**\n         * Sets the value of the `Left` button\n         */\n        set: function (value) {\n            this._buttonLB = this._setButtonValue(value, this._buttonLB, Xbox360Button.LB);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Xbox360Pad.prototype, \"buttonRB\", {\n        /**\n         * Gets the value of the `Right` button\n         */\n        get: function () {\n            return this._buttonRB;\n        },\n        /**\n         * Sets the value of the `Right` button\n         */\n        set: function (value) {\n            this._buttonRB = this._setButtonValue(value, this._buttonRB, Xbox360Button.RB);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Xbox360Pad.prototype, \"buttonLeftStick\", {\n        /**\n         * Gets the value of the Left joystick\n         */\n        get: function () {\n            return this._buttonLeftStick;\n        },\n        /**\n         * Sets the value of the Left joystick\n         */\n        set: function (value) {\n            this._buttonLeftStick = this._setButtonValue(value, this._buttonLeftStick, Xbox360Button.LeftStick);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Xbox360Pad.prototype, \"buttonRightStick\", {\n        /**\n         * Gets the value of the Right joystick\n         */\n        get: function () {\n            return this._buttonRightStick;\n        },\n        /**\n         * Sets the value of the Right joystick\n         */\n        set: function (value) {\n            this._buttonRightStick = this._setButtonValue(value, this._buttonRightStick, Xbox360Button.RightStick);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Xbox360Pad.prototype, \"dPadUp\", {\n        /**\n         * Gets the value of D-pad up\n         */\n        get: function () {\n            return this._dPadUp;\n        },\n        /**\n         * Sets the value of D-pad up\n         */\n        set: function (value) {\n            this._dPadUp = this._setDPadValue(value, this._dPadUp, Xbox360Dpad.Up);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Xbox360Pad.prototype, \"dPadDown\", {\n        /**\n         * Gets the value of D-pad down\n         */\n        get: function () {\n            return this._dPadDown;\n        },\n        /**\n         * Sets the value of D-pad down\n         */\n        set: function (value) {\n            this._dPadDown = this._setDPadValue(value, this._dPadDown, Xbox360Dpad.Down);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Xbox360Pad.prototype, \"dPadLeft\", {\n        /**\n         * Gets the value of D-pad left\n         */\n        get: function () {\n            return this._dPadLeft;\n        },\n        /**\n         * Sets the value of D-pad left\n         */\n        set: function (value) {\n            this._dPadLeft = this._setDPadValue(value, this._dPadLeft, Xbox360Dpad.Left);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Xbox360Pad.prototype, \"dPadRight\", {\n        /**\n         * Gets the value of D-pad right\n         */\n        get: function () {\n            return this._dPadRight;\n        },\n        /**\n         * Sets the value of D-pad right\n         */\n        set: function (value) {\n            this._dPadRight = this._setDPadValue(value, this._dPadRight, Xbox360Dpad.Right);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Force the gamepad to synchronize with device values\n     */\n    Xbox360Pad.prototype.update = function () {\n        _super.prototype.update.call(this);\n        if (this._isXboxOnePad) {\n            this.buttonA = this.browserGamepad.buttons[0].value;\n            this.buttonB = this.browserGamepad.buttons[1].value;\n            this.buttonX = this.browserGamepad.buttons[2].value;\n            this.buttonY = this.browserGamepad.buttons[3].value;\n            this.buttonLB = this.browserGamepad.buttons[4].value;\n            this.buttonRB = this.browserGamepad.buttons[5].value;\n            this.leftTrigger = this.browserGamepad.buttons[6].value;\n            this.rightTrigger = this.browserGamepad.buttons[7].value;\n            this.buttonBack = this.browserGamepad.buttons[8].value;\n            this.buttonStart = this.browserGamepad.buttons[9].value;\n            this.buttonLeftStick = this.browserGamepad.buttons[10].value;\n            this.buttonRightStick = this.browserGamepad.buttons[11].value;\n            this.dPadUp = this.browserGamepad.buttons[12].value;\n            this.dPadDown = this.browserGamepad.buttons[13].value;\n            this.dPadLeft = this.browserGamepad.buttons[14].value;\n            this.dPadRight = this.browserGamepad.buttons[15].value;\n        }\n        else {\n            this.buttonA = this.browserGamepad.buttons[0].value;\n            this.buttonB = this.browserGamepad.buttons[1].value;\n            this.buttonX = this.browserGamepad.buttons[2].value;\n            this.buttonY = this.browserGamepad.buttons[3].value;\n            this.buttonLB = this.browserGamepad.buttons[4].value;\n            this.buttonRB = this.browserGamepad.buttons[5].value;\n            this.leftTrigger = this.browserGamepad.buttons[6].value;\n            this.rightTrigger = this.browserGamepad.buttons[7].value;\n            this.buttonBack = this.browserGamepad.buttons[8].value;\n            this.buttonStart = this.browserGamepad.buttons[9].value;\n            this.buttonLeftStick = this.browserGamepad.buttons[10].value;\n            this.buttonRightStick = this.browserGamepad.buttons[11].value;\n            this.dPadUp = this.browserGamepad.buttons[12].value;\n            this.dPadDown = this.browserGamepad.buttons[13].value;\n            this.dPadLeft = this.browserGamepad.buttons[14].value;\n            this.dPadRight = this.browserGamepad.buttons[15].value;\n        }\n    };\n    /**\n     * Disposes the gamepad\n     */\n    Xbox360Pad.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.onButtonDownObservable.clear();\n        this.onButtonUpObservable.clear();\n        this.onPadDownObservable.clear();\n        this.onPadUpObservable.clear();\n    };\n    return Xbox360Pad;\n}(Gamepad));\nexport { Xbox360Pad };\n//# sourceMappingURL=xboxGamepad.js.map","import { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { TransformNode } from \"../Meshes/transformNode.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { CreateCylinder } from \"../Meshes/Builders/cylinderBuilder.js\";\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\n/**\n * Single axis drag gizmo\n */\nvar AxisDragGizmo = /** @class */ (function (_super) {\n    __extends(AxisDragGizmo, _super);\n    /**\n     * Creates an AxisDragGizmo\n     * @param dragAxis The axis which the gizmo will be able to drag on\n     * @param color The color of the gizmo\n     * @param gizmoLayer The utility layer the gizmo will be added to\n     * @param parent\n     * @param thickness display gizmo axis thickness\n     */\n    function AxisDragGizmo(dragAxis, color, gizmoLayer, parent, thickness) {\n        if (color === void 0) { color = Color3.Gray(); }\n        if (gizmoLayer === void 0) { gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer; }\n        if (parent === void 0) { parent = null; }\n        if (thickness === void 0) { thickness = 1; }\n        var _this = this;\n        var _a;\n        _this = _super.call(this, gizmoLayer) || this;\n        _this._pointerObserver = null;\n        /**\n         * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\n         */\n        _this.snapDistance = 0;\n        /**\n         * Event that fires each time the gizmo snaps to a new location.\n         * * snapDistance is the the change in distance\n         */\n        _this.onSnapObservable = new Observable();\n        _this._isEnabled = true;\n        _this._parent = null;\n        _this._dragging = false;\n        _this._parent = parent;\n        // Create Material\n        _this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n        _this._coloredMaterial.diffuseColor = color;\n        _this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\n        _this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n        _this._hoverMaterial.diffuseColor = Color3.Yellow();\n        _this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n        _this._disableMaterial.diffuseColor = Color3.Gray();\n        _this._disableMaterial.alpha = 0.4;\n        // Build Mesh + Collider\n        var arrow = AxisDragGizmo._CreateArrow(gizmoLayer.utilityLayerScene, _this._coloredMaterial, thickness);\n        var collider = AxisDragGizmo._CreateArrow(gizmoLayer.utilityLayerScene, _this._coloredMaterial, thickness + 4, true);\n        // Add to Root Node\n        _this._gizmoMesh = new Mesh(\"\", gizmoLayer.utilityLayerScene);\n        _this._gizmoMesh.addChild(arrow);\n        _this._gizmoMesh.addChild(collider);\n        _this._gizmoMesh.lookAt(_this._rootMesh.position.add(dragAxis));\n        _this._gizmoMesh.scaling.scaleInPlace(1 / 3);\n        _this._gizmoMesh.parent = _this._rootMesh;\n        var currentSnapDragDistance = 0;\n        var tmpVector = new Vector3();\n        var tmpVector2 = new Vector3();\n        var tmpSnapEvent = { snapDistance: 0 };\n        // Add drag behavior to handle events when the gizmo is dragged\n        _this.dragBehavior = new PointerDragBehavior({ dragAxis: dragAxis });\n        _this.dragBehavior.moveAttached = false;\n        _this.dragBehavior.updateDragPlane = false;\n        _this._rootMesh.addBehavior(_this.dragBehavior);\n        _this.dragBehavior.onDragObservable.add(function (event) {\n            if (_this.attachedNode) {\n                _this._handlePivot();\n                // Keep world translation and use it to update world transform\n                // if the node has parent, the local transform properties (position, rotation, scale)\n                // will be recomputed in _matrixChanged function\n                var matrixChanged = false;\n                // Snapping logic\n                if (_this.snapDistance == 0) {\n                    _this.attachedNode.getWorldMatrix().getTranslationToRef(tmpVector2);\n                    tmpVector2.addInPlace(event.delta);\n                    if (_this.dragBehavior.validateDrag(tmpVector2)) {\n                        if (_this.attachedNode.position) {\n                            // Required for nodes like lights\n                            _this.attachedNode.position.addInPlaceFromFloats(event.delta.x, event.delta.y, event.delta.z);\n                        }\n                        // use _worldMatrix to not force a matrix update when calling GetWorldMatrix especially with Cameras\n                        _this.attachedNode.getWorldMatrix().addTranslationFromFloats(event.delta.x, event.delta.y, event.delta.z);\n                        _this.attachedNode.updateCache();\n                        matrixChanged = true;\n                    }\n                }\n                else {\n                    currentSnapDragDistance += event.dragDistance;\n                    if (Math.abs(currentSnapDragDistance) > _this.snapDistance) {\n                        var dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / _this.snapDistance);\n                        currentSnapDragDistance = currentSnapDragDistance % _this.snapDistance;\n                        event.delta.normalizeToRef(tmpVector);\n                        tmpVector.scaleInPlace(_this.snapDistance * dragSteps);\n                        _this.attachedNode.getWorldMatrix().getTranslationToRef(tmpVector2);\n                        tmpVector2.addInPlace(tmpVector);\n                        if (_this.dragBehavior.validateDrag(tmpVector2)) {\n                            _this.attachedNode.getWorldMatrix().addTranslationFromFloats(tmpVector.x, tmpVector.y, tmpVector.z);\n                            _this.attachedNode.updateCache();\n                            tmpSnapEvent.snapDistance = _this.snapDistance * dragSteps;\n                            _this.onSnapObservable.notifyObservers(tmpSnapEvent);\n                            matrixChanged = true;\n                        }\n                    }\n                }\n                if (matrixChanged) {\n                    _this._matrixChanged();\n                }\n            }\n        });\n        _this.dragBehavior.onDragStartObservable.add(function () {\n            _this._dragging = true;\n        });\n        _this.dragBehavior.onDragEndObservable.add(function () {\n            _this._dragging = false;\n        });\n        var light = gizmoLayer._getSharedGizmoLight();\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(_this._rootMesh.getChildMeshes(false));\n        var cache = {\n            gizmoMeshes: arrow.getChildMeshes(),\n            colliderMeshes: collider.getChildMeshes(),\n            material: _this._coloredMaterial,\n            hoverMaterial: _this._hoverMaterial,\n            disableMaterial: _this._disableMaterial,\n            active: false,\n            dragBehavior: _this.dragBehavior,\n        };\n        (_a = _this._parent) === null || _a === void 0 ? void 0 : _a.addToAxisCache(collider, cache);\n        _this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(function (pointerInfo) {\n            var _a;\n            if (_this._customMeshSet) {\n                return;\n            }\n            _this._isHovered = !!(cache.colliderMeshes.indexOf((_a = pointerInfo === null || pointerInfo === void 0 ? void 0 : pointerInfo.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) != -1);\n            if (!_this._parent) {\n                var material = _this.dragBehavior.enabled ? (_this._isHovered || _this._dragging ? _this._hoverMaterial : _this._coloredMaterial) : _this._disableMaterial;\n                _this._setGizmoMeshMaterial(cache.gizmoMeshes, material);\n            }\n        });\n        _this.dragBehavior.onEnabledObservable.add(function (newState) {\n            _this._setGizmoMeshMaterial(cache.gizmoMeshes, newState ? cache.material : cache.disableMaterial);\n        });\n        return _this;\n    }\n    /**\n     * @param scene\n     * @param material\n     * @param thickness\n     * @param isCollider\n     * @hidden\n     */\n    AxisDragGizmo._CreateArrow = function (scene, material, thickness, isCollider) {\n        if (thickness === void 0) { thickness = 1; }\n        if (isCollider === void 0) { isCollider = false; }\n        var arrow = new TransformNode(\"arrow\", scene);\n        var cylinder = CreateCylinder(\"cylinder\", { diameterTop: 0, height: 0.075, diameterBottom: 0.0375 * (1 + (thickness - 1) / 4), tessellation: 96 }, scene);\n        var line = CreateCylinder(\"cylinder\", { diameterTop: 0.005 * thickness, height: 0.275, diameterBottom: 0.005 * thickness, tessellation: 96 }, scene);\n        // Position arrow pointing in its drag axis\n        cylinder.parent = arrow;\n        cylinder.material = material;\n        cylinder.rotation.x = Math.PI / 2;\n        cylinder.position.z += 0.3;\n        line.parent = arrow;\n        line.material = material;\n        line.position.z += 0.275 / 2;\n        line.rotation.x = Math.PI / 2;\n        if (isCollider) {\n            line.visibility = 0;\n            cylinder.visibility = 0;\n        }\n        return arrow;\n    };\n    /**\n     * @param scene\n     * @param arrow\n     * @hidden\n     */\n    AxisDragGizmo._CreateArrowInstance = function (scene, arrow) {\n        var instance = new TransformNode(\"arrow\", scene);\n        for (var _i = 0, _a = arrow.getChildMeshes(); _i < _a.length; _i++) {\n            var mesh = _a[_i];\n            var childInstance = mesh.createInstance(mesh.name);\n            childInstance.parent = instance;\n        }\n        return instance;\n    };\n    AxisDragGizmo.prototype._attachedNodeChanged = function (value) {\n        if (this.dragBehavior) {\n            this.dragBehavior.enabled = value ? true : false;\n        }\n    };\n    Object.defineProperty(AxisDragGizmo.prototype, \"isEnabled\", {\n        get: function () {\n            return this._isEnabled;\n        },\n        /**\n         * If the gizmo is enabled\n         */\n        set: function (value) {\n            this._isEnabled = value;\n            if (!value) {\n                this.attachedMesh = null;\n                this.attachedNode = null;\n            }\n            else {\n                if (this._parent) {\n                    this.attachedMesh = this._parent.attachedMesh;\n                    this.attachedNode = this._parent.attachedNode;\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Disposes of the gizmo\n     */\n    AxisDragGizmo.prototype.dispose = function () {\n        this.onSnapObservable.clear();\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n        this.dragBehavior.detach();\n        if (this._gizmoMesh) {\n            this._gizmoMesh.dispose();\n        }\n        [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach(function (matl) {\n            if (matl) {\n                matl.dispose();\n            }\n        });\n        _super.prototype.dispose.call(this);\n    };\n    return AxisDragGizmo;\n}(Gizmo));\nexport { AxisDragGizmo };\n//# sourceMappingURL=axisDragGizmo.js.map","import { Quaternion, Vector3, Matrix } from \"../Maths/math.vector.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { PointerEventTypes } from \"../Events/pointerEvents.js\";\nimport { Light } from \"../Lights/light.js\";\n/**\n * Renders gizmos on top of an existing scene which provide controls for position, rotation, etc.\n */\nvar Gizmo = /** @class */ (function () {\n    /**\n     * Creates a gizmo\n     * @param gizmoLayer The utility layer the gizmo will be added to\n     */\n    function Gizmo(\n    /** The utility layer the gizmo will be added to */\n    gizmoLayer) {\n        if (gizmoLayer === void 0) { gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer; }\n        var _this = this;\n        this.gizmoLayer = gizmoLayer;\n        this._attachedMesh = null;\n        this._attachedNode = null;\n        this._customRotationQuaternion = null;\n        /**\n         * Ratio for the scale of the gizmo (Default: 1)\n         */\n        this._scaleRatio = 1;\n        /**\n         * boolean updated by pointermove when a gizmo mesh is hovered\n         */\n        this._isHovered = false;\n        /**\n         * If a custom mesh has been set (Default: false)\n         */\n        this._customMeshSet = false;\n        this._updateGizmoRotationToMatchAttachedMesh = true;\n        /**\n         * If set the gizmo's position will be updated to match the attached mesh each frame (Default: true)\n         */\n        this.updateGizmoPositionToMatchAttachedMesh = true;\n        /**\n         * When set, the gizmo will always appear the same size no matter where the camera is (default: true)\n         */\n        this.updateScale = true;\n        this._interactionsEnabled = true;\n        this._tempQuaternion = new Quaternion(0, 0, 0, 1);\n        this._tempVector = new Vector3();\n        this._tempVector2 = new Vector3();\n        this._tempMatrix1 = new Matrix();\n        this._tempMatrix2 = new Matrix();\n        this._rightHandtoLeftHandMatrix = Matrix.RotationY(Math.PI);\n        this._rootMesh = new Mesh(\"gizmoRootNode\", gizmoLayer.utilityLayerScene);\n        this._rootMesh.rotationQuaternion = Quaternion.Identity();\n        this._beforeRenderObserver = this.gizmoLayer.utilityLayerScene.onBeforeRenderObservable.add(function () {\n            _this._update();\n        });\n    }\n    Object.defineProperty(Gizmo.prototype, \"scaleRatio\", {\n        get: function () {\n            return this._scaleRatio;\n        },\n        /**\n         * Ratio for the scale of the gizmo (Default: 1)\n         */\n        set: function (value) {\n            this._scaleRatio = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Gizmo.prototype, \"isHovered\", {\n        /**\n         * True when the mouse pointer is hovered a gizmo mesh\n         */\n        get: function () {\n            return this._isHovered;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Gizmo.prototype, \"attachedMesh\", {\n        /**\n         * Mesh that the gizmo will be attached to. (eg. on a drag gizmo the mesh that will be dragged)\n         * * When set, interactions will be enabled\n         */\n        get: function () {\n            return this._attachedMesh;\n        },\n        set: function (value) {\n            this._attachedMesh = value;\n            if (value) {\n                this._attachedNode = value;\n            }\n            this._rootMesh.setEnabled(value ? true : false);\n            this._attachedNodeChanged(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Gizmo.prototype, \"attachedNode\", {\n        /**\n         * Node that the gizmo will be attached to. (eg. on a drag gizmo the mesh, bone or NodeTransform that will be dragged)\n         * * When set, interactions will be enabled\n         */\n        get: function () {\n            return this._attachedNode;\n        },\n        set: function (value) {\n            this._attachedNode = value;\n            this._attachedMesh = null;\n            this._rootMesh.setEnabled(value ? true : false);\n            this._attachedNodeChanged(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Disposes and replaces the current meshes in the gizmo with the specified mesh\n     * @param mesh The mesh to replace the default mesh of the gizmo\n     */\n    Gizmo.prototype.setCustomMesh = function (mesh) {\n        if (mesh.getScene() != this.gizmoLayer.utilityLayerScene) {\n            throw \"When setting a custom mesh on a gizmo, the custom meshes scene must be the same as the gizmos (eg. gizmo.gizmoLayer.utilityLayerScene)\";\n        }\n        this._rootMesh.getChildMeshes().forEach(function (c) {\n            c.dispose();\n        });\n        mesh.parent = this._rootMesh;\n        this._customMeshSet = true;\n    };\n    Object.defineProperty(Gizmo.prototype, \"updateGizmoRotationToMatchAttachedMesh\", {\n        get: function () {\n            return this._updateGizmoRotationToMatchAttachedMesh;\n        },\n        /**\n         * If set the gizmo's rotation will be updated to match the attached mesh each frame (Default: true)\n         */\n        set: function (value) {\n            this._updateGizmoRotationToMatchAttachedMesh = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    Gizmo.prototype._attachedNodeChanged = function (value) { };\n    Object.defineProperty(Gizmo.prototype, \"customRotationQuaternion\", {\n        /**\n         * posture that the gizmo will be display\n         * When set null, default value will be used (Quaternion(0, 0, 0, 1))\n         */\n        get: function () {\n            return this._customRotationQuaternion;\n        },\n        set: function (customRotationQuaternion) {\n            this._customRotationQuaternion = customRotationQuaternion;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Updates the gizmo to match the attached mesh's position/rotation\n     */\n    Gizmo.prototype._update = function () {\n        if (this.attachedNode) {\n            var effectiveNode = this.attachedNode;\n            if (this.attachedMesh) {\n                effectiveNode = this.attachedMesh || this.attachedNode;\n            }\n            // Position\n            if (this.updateGizmoPositionToMatchAttachedMesh) {\n                var row = effectiveNode.getWorldMatrix().getRow(3);\n                var position = row ? row.toVector3() : new Vector3(0, 0, 0);\n                this._rootMesh.position.copyFrom(position);\n            }\n            // Rotation\n            if (this.updateGizmoRotationToMatchAttachedMesh) {\n                var supportedNode = effectiveNode._isMesh ||\n                    effectiveNode.getClassName() === \"AbstractMesh\" ||\n                    effectiveNode.getClassName() === \"TransformNode\" ||\n                    effectiveNode.getClassName() === \"InstancedMesh\";\n                var transformNode = supportedNode ? effectiveNode : undefined;\n                effectiveNode.getWorldMatrix().decompose(undefined, this._rootMesh.rotationQuaternion, undefined, Gizmo.PreserveScaling ? transformNode : undefined);\n            }\n            else {\n                if (this._customRotationQuaternion) {\n                    this._rootMesh.rotationQuaternion.copyFrom(this._customRotationQuaternion);\n                }\n                else {\n                    this._rootMesh.rotationQuaternion.set(0, 0, 0, 1);\n                }\n            }\n            // Scale\n            if (this.updateScale) {\n                var activeCamera = this.gizmoLayer.utilityLayerScene.activeCamera;\n                var cameraPosition = activeCamera.globalPosition;\n                if (activeCamera.devicePosition) {\n                    cameraPosition = activeCamera.devicePosition;\n                }\n                this._rootMesh.position.subtractToRef(cameraPosition, this._tempVector);\n                var dist = this._tempVector.length() * this.scaleRatio;\n                this._rootMesh.scaling.set(dist, dist, dist);\n                // Account for handedness, similar to Matrix.decompose\n                if (effectiveNode._getWorldMatrixDeterminant() < 0 && !Gizmo.PreserveScaling) {\n                    this._rootMesh.scaling.y *= -1;\n                }\n            }\n            else {\n                this._rootMesh.scaling.setAll(this.scaleRatio);\n            }\n        }\n    };\n    /**\n     * Handle position/translation when using an attached node using pivot\n     */\n    Gizmo.prototype._handlePivot = function () {\n        var attachedNodeTransform = this._attachedNode;\n        // check there is an active pivot for the TransformNode attached\n        if (attachedNodeTransform.isUsingPivotMatrix && attachedNodeTransform.isUsingPivotMatrix() && attachedNodeTransform.position) {\n            // When a TransformNode has an active pivot, even without parenting,\n            // translation from the world matrix is different from TransformNode.position.\n            // Pivot works like a virtual parent that's using the node orientation.\n            // As the world matrix is transformed by the gizmo and then decomposed to TRS\n            // its translation part must be set to the Node's position.\n            attachedNodeTransform.getWorldMatrix().setTranslation(attachedNodeTransform.position);\n        }\n    };\n    /**\n     * computes the rotation/scaling/position of the transform once the Node world matrix has changed.\n     */\n    Gizmo.prototype._matrixChanged = function () {\n        if (!this._attachedNode) {\n            return;\n        }\n        if (this._attachedNode._isCamera) {\n            var camera = this._attachedNode;\n            var worldMatrix = void 0;\n            var worldMatrixUC = void 0;\n            if (camera.parent) {\n                var parentInv = this._tempMatrix2;\n                camera.parent._worldMatrix.invertToRef(parentInv);\n                this._attachedNode._worldMatrix.multiplyToRef(parentInv, this._tempMatrix1);\n                worldMatrix = this._tempMatrix1;\n            }\n            else {\n                worldMatrix = this._attachedNode._worldMatrix;\n            }\n            if (camera.getScene().useRightHandedSystem) {\n                // avoid desync with RH matrix computation. Otherwise, rotation of PI around Y axis happens each frame resulting in axis flipped because worldMatrix is computed as inverse of viewMatrix.\n                this._rightHandtoLeftHandMatrix.multiplyToRef(worldMatrix, this._tempMatrix2);\n                worldMatrixUC = this._tempMatrix2;\n            }\n            else {\n                worldMatrixUC = worldMatrix;\n            }\n            worldMatrixUC.decompose(this._tempVector2, this._tempQuaternion, this._tempVector);\n            var inheritsTargetCamera = this._attachedNode.getClassName() === \"FreeCamera\" ||\n                this._attachedNode.getClassName() === \"FlyCamera\" ||\n                this._attachedNode.getClassName() === \"ArcFollowCamera\" ||\n                this._attachedNode.getClassName() === \"TargetCamera\" ||\n                this._attachedNode.getClassName() === \"TouchCamera\" ||\n                this._attachedNode.getClassName() === \"UniversalCamera\";\n            if (inheritsTargetCamera) {\n                var targetCamera = this._attachedNode;\n                targetCamera.rotation = this._tempQuaternion.toEulerAngles();\n                if (targetCamera.rotationQuaternion) {\n                    targetCamera.rotationQuaternion.copyFrom(this._tempQuaternion);\n                    targetCamera.rotationQuaternion.normalize();\n                }\n            }\n            camera.position.copyFrom(this._tempVector);\n        }\n        else if (this._attachedNode._isMesh ||\n            this._attachedNode.getClassName() === \"AbstractMesh\" ||\n            this._attachedNode.getClassName() === \"TransformNode\" ||\n            this._attachedNode.getClassName() === \"InstancedMesh\") {\n            var transform = this._attachedNode;\n            if (transform.parent) {\n                var parentInv = this._tempMatrix1;\n                var localMat = this._tempMatrix2;\n                transform.parent.getWorldMatrix().invertToRef(parentInv);\n                this._attachedNode.getWorldMatrix().multiplyToRef(parentInv, localMat);\n                localMat.decompose(this._tempVector, this._tempQuaternion, transform.position, Gizmo.PreserveScaling ? transform : undefined);\n            }\n            else {\n                this._attachedNode._worldMatrix.decompose(this._tempVector, this._tempQuaternion, transform.position, Gizmo.PreserveScaling ? transform : undefined);\n            }\n            transform.scaling.copyFrom(this._tempVector);\n            if (!transform.billboardMode) {\n                if (transform.rotationQuaternion) {\n                    transform.rotationQuaternion.copyFrom(this._tempQuaternion);\n                    transform.rotationQuaternion.normalize();\n                }\n                else {\n                    transform.rotation = this._tempQuaternion.toEulerAngles();\n                }\n            }\n        }\n        else if (this._attachedNode.getClassName() === \"Bone\") {\n            var bone = this._attachedNode;\n            var parent_1 = bone.getParent();\n            if (parent_1) {\n                var invParent = this._tempMatrix1;\n                var boneLocalMatrix = this._tempMatrix2;\n                parent_1.getWorldMatrix().invertToRef(invParent);\n                bone.getWorldMatrix().multiplyToRef(invParent, boneLocalMatrix);\n                var lmat = bone.getLocalMatrix();\n                lmat.copyFrom(boneLocalMatrix);\n            }\n            else {\n                var lmat = bone.getLocalMatrix();\n                lmat.copyFrom(bone.getWorldMatrix());\n            }\n            bone.markAsDirty();\n        }\n        else {\n            var light = this._attachedNode;\n            if (light.getTypeID) {\n                var type = light.getTypeID();\n                if (type === Light.LIGHTTYPEID_DIRECTIONALLIGHT || type === Light.LIGHTTYPEID_SPOTLIGHT || type === Light.LIGHTTYPEID_POINTLIGHT) {\n                    var parent_2 = light.parent;\n                    if (parent_2) {\n                        var invParent = this._tempMatrix1;\n                        var nodeLocalMatrix = this._tempMatrix2;\n                        parent_2.getWorldMatrix().invertToRef(invParent);\n                        light.getWorldMatrix().multiplyToRef(invParent, nodeLocalMatrix);\n                        nodeLocalMatrix.decompose(undefined, this._tempQuaternion, this._tempVector);\n                    }\n                    else {\n                        this._attachedNode._worldMatrix.decompose(undefined, this._tempQuaternion, this._tempVector);\n                    }\n                    // setter doesn't copy values. Need a new Vector3\n                    light.position = new Vector3(this._tempVector.x, this._tempVector.y, this._tempVector.z);\n                    if (light.direction) {\n                        light.direction = new Vector3(light.direction.x, light.direction.y, light.direction.z);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * refresh gizmo mesh material\n     * @param gizmoMeshes\n     * @param material material to apply\n     */\n    Gizmo.prototype._setGizmoMeshMaterial = function (gizmoMeshes, material) {\n        if (gizmoMeshes) {\n            gizmoMeshes.forEach(function (m) {\n                m.material = material;\n                if (m.color) {\n                    m.color = material.diffuseColor;\n                }\n            });\n        }\n    };\n    /**\n     * Subscribes to pointer up, down, and hover events. Used for responsive gizmos.\n     * @param gizmoLayer The utility layer the gizmo will be added to\n     * @param gizmoAxisCache Gizmo axis definition used for reactive gizmo UI\n     * @returns {Observer<PointerInfo>} pointerObserver\n     */\n    Gizmo.GizmoAxisPointerObserver = function (gizmoLayer, gizmoAxisCache) {\n        var dragging = false;\n        var pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(function (pointerInfo) {\n            var _a, _b;\n            if (pointerInfo.pickInfo) {\n                // On Hover Logic\n                if (pointerInfo.type === PointerEventTypes.POINTERMOVE) {\n                    if (dragging) {\n                        return;\n                    }\n                    gizmoAxisCache.forEach(function (cache) {\n                        var _a, _b;\n                        if (cache.colliderMeshes && cache.gizmoMeshes) {\n                            var isHovered = ((_a = cache.colliderMeshes) === null || _a === void 0 ? void 0 : _a.indexOf((_b = pointerInfo === null || pointerInfo === void 0 ? void 0 : pointerInfo.pickInfo) === null || _b === void 0 ? void 0 : _b.pickedMesh)) != -1;\n                            var material_1 = cache.dragBehavior.enabled ? (isHovered || cache.active ? cache.hoverMaterial : cache.material) : cache.disableMaterial;\n                            cache.gizmoMeshes.forEach(function (m) {\n                                m.material = material_1;\n                                if (m.color) {\n                                    m.color = material_1.diffuseColor;\n                                }\n                            });\n                        }\n                    });\n                }\n                // On Mouse Down\n                if (pointerInfo.type === PointerEventTypes.POINTERDOWN) {\n                    // If user Clicked Gizmo\n                    if (gizmoAxisCache.has((_a = pointerInfo.pickInfo.pickedMesh) === null || _a === void 0 ? void 0 : _a.parent)) {\n                        dragging = true;\n                        var statusMap = gizmoAxisCache.get((_b = pointerInfo.pickInfo.pickedMesh) === null || _b === void 0 ? void 0 : _b.parent);\n                        statusMap.active = true;\n                        gizmoAxisCache.forEach(function (cache) {\n                            var _a, _b;\n                            var isHovered = ((_a = cache.colliderMeshes) === null || _a === void 0 ? void 0 : _a.indexOf((_b = pointerInfo === null || pointerInfo === void 0 ? void 0 : pointerInfo.pickInfo) === null || _b === void 0 ? void 0 : _b.pickedMesh)) != -1;\n                            var material = (isHovered || cache.active) && cache.dragBehavior.enabled ? cache.hoverMaterial : cache.disableMaterial;\n                            cache.gizmoMeshes.forEach(function (m) {\n                                m.material = material;\n                                if (m.color) {\n                                    m.color = material.diffuseColor;\n                                }\n                            });\n                        });\n                    }\n                }\n                // On Mouse Up\n                if (pointerInfo.type === PointerEventTypes.POINTERUP) {\n                    gizmoAxisCache.forEach(function (cache) {\n                        cache.active = false;\n                        dragging = false;\n                        cache.gizmoMeshes.forEach(function (m) {\n                            m.material = cache.dragBehavior.enabled ? cache.material : cache.disableMaterial;\n                            if (m.color) {\n                                m.color = cache.material.diffuseColor;\n                            }\n                        });\n                    });\n                }\n            }\n        });\n        return pointerObserver;\n    };\n    /**\n     * Disposes of the gizmo\n     */\n    Gizmo.prototype.dispose = function () {\n        this._rootMesh.dispose();\n        if (this._beforeRenderObserver) {\n            this.gizmoLayer.utilityLayerScene.onBeforeRenderObservable.remove(this._beforeRenderObserver);\n        }\n    };\n    /**\n     * When enabled, any gizmo operation will perserve scaling sign. Default is off.\n     * Only valid for TransformNode derived classes (Mesh, AbstractMesh, ...)\n     */\n    Gizmo.PreserveScaling = false;\n    return Gizmo;\n}());\nexport { Gizmo };\n//# sourceMappingURL=gizmo.js.map","import { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector3, Matrix } from \"../Maths/math.vector.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder.js\";\nimport { CreateCylinder } from \"../Meshes/Builders/cylinderBuilder.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\n/**\n * Single axis scale gizmo\n */\nvar AxisScaleGizmo = /** @class */ (function (_super) {\n    __extends(AxisScaleGizmo, _super);\n    /**\n     * Creates an AxisScaleGizmo\n     * @param dragAxis The axis which the gizmo will be able to scale on\n     * @param color The color of the gizmo\n     * @param gizmoLayer The utility layer the gizmo will be added to\n     * @param parent\n     * @param thickness display gizmo axis thickness\n     */\n    function AxisScaleGizmo(dragAxis, color, gizmoLayer, parent, thickness) {\n        if (color === void 0) { color = Color3.Gray(); }\n        if (gizmoLayer === void 0) { gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer; }\n        if (parent === void 0) { parent = null; }\n        if (thickness === void 0) { thickness = 1; }\n        var _this = this;\n        var _a, _b, _c, _d, _e, _f, _g;\n        _this = _super.call(this, gizmoLayer) || this;\n        _this._pointerObserver = null;\n        /**\n         * Scale distance in babylon units that the gizmo will snap to when dragged (Default: 0)\n         */\n        _this.snapDistance = 0;\n        /**\n         * Event that fires each time the gizmo snaps to a new location.\n         * * snapDistance is the the change in distance\n         */\n        _this.onSnapObservable = new Observable();\n        /**\n         * If the scaling operation should be done on all axis (default: false)\n         */\n        _this.uniformScaling = false;\n        /**\n         * Custom sensitivity value for the drag strength\n         */\n        _this.sensitivity = 1;\n        /**\n         * The magnitude of the drag strength (scaling factor)\n         */\n        _this.dragScale = 1;\n        _this._isEnabled = true;\n        _this._parent = null;\n        _this._dragging = false;\n        _this._tmpVector = new Vector3();\n        _this._tmpMatrix = new Matrix();\n        _this._tmpMatrix2 = new Matrix();\n        _this._parent = parent;\n        // Create Material\n        _this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n        _this._coloredMaterial.diffuseColor = color;\n        _this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\n        _this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n        _this._hoverMaterial.diffuseColor = Color3.Yellow();\n        _this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n        _this._disableMaterial.diffuseColor = Color3.Gray();\n        _this._disableMaterial.alpha = 0.4;\n        // Build mesh + Collider\n        _this._gizmoMesh = new Mesh(\"axis\", gizmoLayer.utilityLayerScene);\n        var _h = _this._createGizmoMesh(_this._gizmoMesh, thickness), arrowMesh = _h.arrowMesh, arrowTail = _h.arrowTail;\n        var collider = _this._createGizmoMesh(_this._gizmoMesh, thickness + 4, true);\n        _this._gizmoMesh.lookAt(_this._rootMesh.position.add(dragAxis));\n        _this._rootMesh.addChild(_this._gizmoMesh, Gizmo.PreserveScaling);\n        _this._gizmoMesh.scaling.scaleInPlace(1 / 3);\n        // Closure of initial prop values for resetting\n        var nodePosition = arrowMesh.position.clone();\n        var linePosition = arrowTail.position.clone();\n        var lineScale = arrowTail.scaling.clone();\n        var increaseGizmoMesh = function (dragDistance) {\n            var dragStrength = dragDistance * (3 / _this._rootMesh.scaling.length()) * 6;\n            arrowMesh.position.z += dragStrength / 3.5;\n            arrowTail.scaling.y += dragStrength;\n            _this.dragScale = arrowTail.scaling.y;\n            arrowTail.position.z = arrowMesh.position.z / 2;\n        };\n        var resetGizmoMesh = function () {\n            arrowMesh.position.set(nodePosition.x, nodePosition.y, nodePosition.z);\n            arrowTail.position.set(linePosition.x, linePosition.y, linePosition.z);\n            arrowTail.scaling.set(lineScale.x, lineScale.y, lineScale.z);\n            _this.dragScale = arrowTail.scaling.y;\n            _this._dragging = false;\n        };\n        // Add drag behavior to handle events when the gizmo is dragged\n        _this.dragBehavior = new PointerDragBehavior({ dragAxis: dragAxis });\n        _this.dragBehavior.moveAttached = false;\n        _this.dragBehavior.updateDragPlane = false;\n        _this._rootMesh.addBehavior(_this.dragBehavior);\n        var currentSnapDragDistance = 0;\n        var tmpVector = new Vector3();\n        var tmpSnapEvent = { snapDistance: 0 };\n        _this.dragBehavior.onDragObservable.add(function (event) {\n            if (_this.attachedNode) {\n                _this._handlePivot();\n                // Drag strength is modified by the scale of the gizmo (eg. for small objects like boombox the strength will be increased to match the behavior of larger objects)\n                var dragStrength = _this.sensitivity * event.dragDistance * ((_this.scaleRatio * 3) / _this._rootMesh.scaling.length());\n                // Snapping logic\n                var snapped = false;\n                var dragSteps = 0;\n                if (_this.uniformScaling) {\n                    tmpVector.setAll(0.57735); // 1 / sqrt(3)\n                }\n                else {\n                    tmpVector.copyFrom(dragAxis);\n                }\n                if (_this.snapDistance == 0) {\n                    tmpVector.scaleToRef(dragStrength, tmpVector);\n                }\n                else {\n                    currentSnapDragDistance += dragStrength;\n                    if (Math.abs(currentSnapDragDistance) > _this.snapDistance) {\n                        dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / _this.snapDistance);\n                        if (currentSnapDragDistance < 0) {\n                            dragSteps *= -1;\n                        }\n                        currentSnapDragDistance = currentSnapDragDistance % _this.snapDistance;\n                        tmpVector.scaleToRef(_this.snapDistance * dragSteps, tmpVector);\n                        snapped = true;\n                    }\n                    else {\n                        tmpVector.scaleInPlace(0);\n                    }\n                }\n                Matrix.ScalingToRef(1 + tmpVector.x, 1 + tmpVector.y, 1 + tmpVector.z, _this._tmpMatrix2);\n                _this._tmpMatrix2.multiplyToRef(_this.attachedNode.getWorldMatrix(), _this._tmpMatrix);\n                var transformNode = _this.attachedNode._isMesh ? _this.attachedNode : undefined;\n                _this._tmpMatrix.decompose(_this._tmpVector, undefined, undefined, Gizmo.PreserveScaling ? transformNode : undefined);\n                var maxScale = 100000;\n                if (Math.abs(_this._tmpVector.x) < maxScale && Math.abs(_this._tmpVector.y) < maxScale && Math.abs(_this._tmpVector.z) < maxScale) {\n                    _this.attachedNode.getWorldMatrix().copyFrom(_this._tmpMatrix);\n                }\n                if (snapped) {\n                    tmpSnapEvent.snapDistance = _this.snapDistance * dragSteps;\n                    _this.onSnapObservable.notifyObservers(tmpSnapEvent);\n                }\n                _this._matrixChanged();\n            }\n        });\n        // On Drag Listener: to move gizmo mesh with user action\n        _this.dragBehavior.onDragStartObservable.add(function () {\n            _this._dragging = true;\n        });\n        _this.dragBehavior.onDragObservable.add(function (e) { return increaseGizmoMesh(e.dragDistance); });\n        _this.dragBehavior.onDragEndObservable.add(resetGizmoMesh);\n        // Listeners for Universal Scalar\n        (_c = (_b = (_a = parent === null || parent === void 0 ? void 0 : parent.uniformScaleGizmo) === null || _a === void 0 ? void 0 : _a.dragBehavior) === null || _b === void 0 ? void 0 : _b.onDragObservable) === null || _c === void 0 ? void 0 : _c.add(function (e) { return increaseGizmoMesh(e.delta.y); });\n        (_f = (_e = (_d = parent === null || parent === void 0 ? void 0 : parent.uniformScaleGizmo) === null || _d === void 0 ? void 0 : _d.dragBehavior) === null || _e === void 0 ? void 0 : _e.onDragEndObservable) === null || _f === void 0 ? void 0 : _f.add(resetGizmoMesh);\n        var cache = {\n            gizmoMeshes: [arrowMesh, arrowTail],\n            colliderMeshes: [collider.arrowMesh, collider.arrowTail],\n            material: _this._coloredMaterial,\n            hoverMaterial: _this._hoverMaterial,\n            disableMaterial: _this._disableMaterial,\n            active: false,\n            dragBehavior: _this.dragBehavior,\n        };\n        (_g = _this._parent) === null || _g === void 0 ? void 0 : _g.addToAxisCache(_this._gizmoMesh, cache);\n        _this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(function (pointerInfo) {\n            var _a;\n            if (_this._customMeshSet) {\n                return;\n            }\n            _this._isHovered = !!(cache.colliderMeshes.indexOf((_a = pointerInfo === null || pointerInfo === void 0 ? void 0 : pointerInfo.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) != -1);\n            if (!_this._parent) {\n                var material = _this.dragBehavior.enabled ? (_this._isHovered || _this._dragging ? _this._hoverMaterial : _this._coloredMaterial) : _this._disableMaterial;\n                _this._setGizmoMeshMaterial(cache.gizmoMeshes, material);\n            }\n        });\n        _this.dragBehavior.onEnabledObservable.add(function (newState) {\n            _this._setGizmoMeshMaterial(cache.gizmoMeshes, newState ? _this._coloredMaterial : _this._disableMaterial);\n        });\n        var light = gizmoLayer._getSharedGizmoLight();\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(_this._rootMesh.getChildMeshes());\n        return _this;\n    }\n    /**\n     * Create Geometry for Gizmo\n     * @param parentMesh\n     * @param thickness\n     * @param isCollider\n     */\n    AxisScaleGizmo.prototype._createGizmoMesh = function (parentMesh, thickness, isCollider) {\n        if (isCollider === void 0) { isCollider = false; }\n        var arrowMesh = CreateBox(\"yPosMesh\", { size: 0.4 * (1 + (thickness - 1) / 4) }, this.gizmoLayer.utilityLayerScene);\n        var arrowTail = CreateCylinder(\"cylinder\", { diameterTop: 0.005 * thickness, height: 0.275, diameterBottom: 0.005 * thickness, tessellation: 96 }, this.gizmoLayer.utilityLayerScene);\n        // Position arrow pointing in its drag axis\n        arrowMesh.scaling.scaleInPlace(0.1);\n        arrowMesh.material = this._coloredMaterial;\n        arrowMesh.rotation.x = Math.PI / 2;\n        arrowMesh.position.z += 0.3;\n        arrowTail.material = this._coloredMaterial;\n        arrowTail.position.z += 0.275 / 2;\n        arrowTail.rotation.x = Math.PI / 2;\n        if (isCollider) {\n            arrowMesh.visibility = 0;\n            arrowTail.visibility = 0;\n        }\n        parentMesh.addChild(arrowMesh);\n        parentMesh.addChild(arrowTail);\n        return { arrowMesh: arrowMesh, arrowTail: arrowTail };\n    };\n    AxisScaleGizmo.prototype._attachedNodeChanged = function (value) {\n        if (this.dragBehavior) {\n            this.dragBehavior.enabled = value ? true : false;\n        }\n    };\n    Object.defineProperty(AxisScaleGizmo.prototype, \"isEnabled\", {\n        get: function () {\n            return this._isEnabled;\n        },\n        /**\n         * If the gizmo is enabled\n         */\n        set: function (value) {\n            this._isEnabled = value;\n            if (!value) {\n                this.attachedMesh = null;\n                this.attachedNode = null;\n            }\n            else {\n                if (this._parent) {\n                    this.attachedMesh = this._parent.attachedMesh;\n                    this.attachedNode = this._parent.attachedNode;\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Disposes of the gizmo\n     */\n    AxisScaleGizmo.prototype.dispose = function () {\n        this.onSnapObservable.clear();\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n        this.dragBehavior.detach();\n        if (this._gizmoMesh) {\n            this._gizmoMesh.dispose();\n        }\n        [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach(function (matl) {\n            if (matl) {\n                matl.dispose();\n            }\n        });\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Disposes and replaces the current meshes in the gizmo with the specified mesh\n     * @param mesh The mesh to replace the default mesh of the gizmo\n     * @param useGizmoMaterial If the gizmo's default material should be used (default: false)\n     */\n    AxisScaleGizmo.prototype.setCustomMesh = function (mesh, useGizmoMaterial) {\n        var _this = this;\n        if (useGizmoMaterial === void 0) { useGizmoMaterial = false; }\n        _super.prototype.setCustomMesh.call(this, mesh);\n        if (useGizmoMaterial) {\n            this._rootMesh.getChildMeshes().forEach(function (m) {\n                m.material = _this._coloredMaterial;\n                if (m.color) {\n                    m.color = _this._coloredMaterial.diffuseColor;\n                }\n            });\n            this._customMeshSet = false;\n        }\n    };\n    return AxisScaleGizmo;\n}(Gizmo));\nexport { AxisScaleGizmo };\n//# sourceMappingURL=axisScaleGizmo.js.map","import { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { Quaternion, Matrix, Vector3 } from \"../Maths/math.vector.js\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh.js\";\nimport { CreateSphere } from \"../Meshes/Builders/sphereBuilder.js\";\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder.js\";\nimport { CreateLines } from \"../Meshes/Builders/linesBuilder.js\";\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { PivotTools } from \"../Misc/pivotTools.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Epsilon } from \"../Maths/math.constants.js\";\n/**\n * Bounding box gizmo\n */\nvar BoundingBoxGizmo = /** @class */ (function (_super) {\n    __extends(BoundingBoxGizmo, _super);\n    /**\n     * Creates an BoundingBoxGizmo\n     * @param color The color of the gizmo\n     * @param gizmoLayer The utility layer the gizmo will be added to\n     */\n    function BoundingBoxGizmo(color, gizmoLayer) {\n        if (color === void 0) { color = Color3.Gray(); }\n        if (gizmoLayer === void 0) { gizmoLayer = UtilityLayerRenderer.DefaultKeepDepthUtilityLayer; }\n        var _this = _super.call(this, gizmoLayer) || this;\n        _this._boundingDimensions = new Vector3(1, 1, 1);\n        _this._renderObserver = null;\n        _this._pointerObserver = null;\n        _this._scaleDragSpeed = 0.2;\n        _this._tmpQuaternion = new Quaternion();\n        _this._tmpVector = new Vector3(0, 0, 0);\n        _this._tmpRotationMatrix = new Matrix();\n        /**\n         * If child meshes should be ignored when calculating the bounding box. This should be set to true to avoid perf hits with heavily nested meshes (Default: false)\n         */\n        _this.ignoreChildren = false;\n        /**\n         * Returns true if a descendant should be included when computing the bounding box. When null, all descendants are included. If ignoreChildren is set this will be ignored. (Default: null)\n         */\n        _this.includeChildPredicate = null;\n        /**\n         * The size of the rotation spheres attached to the bounding box (Default: 0.1)\n         */\n        _this.rotationSphereSize = 0.1;\n        /**\n         * The size of the scale boxes attached to the bounding box (Default: 0.1)\n         */\n        _this.scaleBoxSize = 0.1;\n        /**\n         * If set, the rotation spheres and scale boxes will increase in size based on the distance away from the camera to have a consistent screen size (Default: false)\n         * Note : fixedDragMeshScreenSize takes precedence over fixedDragMeshBoundsSize if both are true\n         */\n        _this.fixedDragMeshScreenSize = false;\n        /**\n         * If set, the rotation spheres and scale boxes will increase in size based on the size of the bounding box\n         * Note : fixedDragMeshScreenSize takes precedence over fixedDragMeshBoundsSize if both are true\n         */\n        _this.fixedDragMeshBoundsSize = false;\n        /**\n         * The distance away from the object which the draggable meshes should appear world sized when fixedDragMeshScreenSize is set to true (default: 10)\n         */\n        _this.fixedDragMeshScreenSizeDistanceFactor = 10;\n        /**\n         * Fired when a rotation sphere or scale box is dragged\n         */\n        _this.onDragStartObservable = new Observable();\n        /**\n         * Fired when a scale box is dragged\n         */\n        _this.onScaleBoxDragObservable = new Observable();\n        /**\n         * Fired when a scale box drag is ended\n         */\n        _this.onScaleBoxDragEndObservable = new Observable();\n        /**\n         * Fired when a rotation sphere is dragged\n         */\n        _this.onRotationSphereDragObservable = new Observable();\n        /**\n         * Fired when a rotation sphere drag is ended\n         */\n        _this.onRotationSphereDragEndObservable = new Observable();\n        /**\n         * Relative bounding box pivot used when scaling the attached node. When null object with scale from the opposite corner. 0.5,0.5,0.5 for center and 0.5,0,0.5 for bottom (Default: null)\n         */\n        _this.scalePivot = null;\n        /**\n         * Scale factor used for masking some axis\n         */\n        _this._axisFactor = new Vector3(1, 1, 1);\n        _this._existingMeshScale = new Vector3();\n        // Dragging\n        _this._dragMesh = null;\n        _this._pointerDragBehavior = new PointerDragBehavior();\n        // Do not update the gizmo's scale so it has a fixed size to the object its attached to\n        _this.updateScale = false;\n        _this._anchorMesh = new AbstractMesh(\"anchor\", gizmoLayer.utilityLayerScene);\n        // Create Materials\n        _this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n        _this._coloredMaterial.disableLighting = true;\n        _this._hoverColoredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n        _this._hoverColoredMaterial.disableLighting = true;\n        // Build bounding box out of lines\n        _this._lineBoundingBox = new AbstractMesh(\"\", gizmoLayer.utilityLayerScene);\n        _this._lineBoundingBox.rotationQuaternion = new Quaternion();\n        var lines = [];\n        lines.push(CreateLines(\"lines\", { points: [new Vector3(0, 0, 0), new Vector3(_this._boundingDimensions.x, 0, 0)] }, gizmoLayer.utilityLayerScene));\n        lines.push(CreateLines(\"lines\", { points: [new Vector3(0, 0, 0), new Vector3(0, _this._boundingDimensions.y, 0)] }, gizmoLayer.utilityLayerScene));\n        lines.push(CreateLines(\"lines\", { points: [new Vector3(0, 0, 0), new Vector3(0, 0, _this._boundingDimensions.z)] }, gizmoLayer.utilityLayerScene));\n        lines.push(CreateLines(\"lines\", { points: [new Vector3(_this._boundingDimensions.x, 0, 0), new Vector3(_this._boundingDimensions.x, _this._boundingDimensions.y, 0)] }, gizmoLayer.utilityLayerScene));\n        lines.push(CreateLines(\"lines\", { points: [new Vector3(_this._boundingDimensions.x, 0, 0), new Vector3(_this._boundingDimensions.x, 0, _this._boundingDimensions.z)] }, gizmoLayer.utilityLayerScene));\n        lines.push(CreateLines(\"lines\", { points: [new Vector3(0, _this._boundingDimensions.y, 0), new Vector3(_this._boundingDimensions.x, _this._boundingDimensions.y, 0)] }, gizmoLayer.utilityLayerScene));\n        lines.push(CreateLines(\"lines\", { points: [new Vector3(0, _this._boundingDimensions.y, 0), new Vector3(0, _this._boundingDimensions.y, _this._boundingDimensions.z)] }, gizmoLayer.utilityLayerScene));\n        lines.push(CreateLines(\"lines\", { points: [new Vector3(0, 0, _this._boundingDimensions.z), new Vector3(_this._boundingDimensions.x, 0, _this._boundingDimensions.z)] }, gizmoLayer.utilityLayerScene));\n        lines.push(CreateLines(\"lines\", { points: [new Vector3(0, 0, _this._boundingDimensions.z), new Vector3(0, _this._boundingDimensions.y, _this._boundingDimensions.z)] }, gizmoLayer.utilityLayerScene));\n        lines.push(CreateLines(\"lines\", {\n            points: [\n                new Vector3(_this._boundingDimensions.x, _this._boundingDimensions.y, _this._boundingDimensions.z),\n                new Vector3(0, _this._boundingDimensions.y, _this._boundingDimensions.z),\n            ],\n        }, gizmoLayer.utilityLayerScene));\n        lines.push(CreateLines(\"lines\", {\n            points: [\n                new Vector3(_this._boundingDimensions.x, _this._boundingDimensions.y, _this._boundingDimensions.z),\n                new Vector3(_this._boundingDimensions.x, 0, _this._boundingDimensions.z),\n            ],\n        }, gizmoLayer.utilityLayerScene));\n        lines.push(CreateLines(\"lines\", {\n            points: [\n                new Vector3(_this._boundingDimensions.x, _this._boundingDimensions.y, _this._boundingDimensions.z),\n                new Vector3(_this._boundingDimensions.x, _this._boundingDimensions.y, 0),\n            ],\n        }, gizmoLayer.utilityLayerScene));\n        lines.forEach(function (l) {\n            l.color = color;\n            l.position.addInPlace(new Vector3(-_this._boundingDimensions.x / 2, -_this._boundingDimensions.y / 2, -_this._boundingDimensions.z / 2));\n            l.isPickable = false;\n            _this._lineBoundingBox.addChild(l);\n        });\n        _this._rootMesh.addChild(_this._lineBoundingBox);\n        _this.setColor(color);\n        // Create rotation spheres\n        _this._rotateSpheresParent = new AbstractMesh(\"\", gizmoLayer.utilityLayerScene);\n        _this._rotateSpheresParent.rotationQuaternion = new Quaternion();\n        var _loop_1 = function (i) {\n            var sphere = CreateSphere(\"\", { diameter: 1 }, gizmoLayer.utilityLayerScene);\n            sphere.rotationQuaternion = new Quaternion();\n            sphere.material = this_1._coloredMaterial;\n            sphere.isNearGrabbable = true;\n            // Drag behavior\n            var _dragBehavior = new PointerDragBehavior({});\n            _dragBehavior.moveAttached = false;\n            _dragBehavior.updateDragPlane = false;\n            sphere.addBehavior(_dragBehavior);\n            var startingTurnDirection = new Vector3(1, 0, 0);\n            var totalTurnAmountOfDrag = 0;\n            _dragBehavior.onDragStartObservable.add(function () {\n                startingTurnDirection.copyFrom(sphere.forward);\n                totalTurnAmountOfDrag = 0;\n            });\n            _dragBehavior.onDragObservable.add(function (event) {\n                _this.onRotationSphereDragObservable.notifyObservers({});\n                if (_this.attachedMesh) {\n                    var originalParent = _this.attachedMesh.parent;\n                    if (originalParent && originalParent.scaling && originalParent.scaling.isNonUniformWithinEpsilon(0.001)) {\n                        Logger.Warn(\"BoundingBoxGizmo controls are not supported on child meshes with non-uniform parent scaling\");\n                        return;\n                    }\n                    PivotTools._RemoveAndStorePivotPoint(_this.attachedMesh);\n                    var worldDragDirection = startingTurnDirection;\n                    // Project the world right on to the drag plane\n                    var toSub = event.dragPlaneNormal.scale(Vector3.Dot(event.dragPlaneNormal, worldDragDirection));\n                    var dragAxis = worldDragDirection.subtract(toSub).normalizeToNew();\n                    // project drag delta on to the resulting drag axis and rotate based on that\n                    var projectDist = Vector3.Dot(dragAxis, event.delta) < 0 ? Math.abs(event.delta.length()) : -Math.abs(event.delta.length());\n                    // Make rotation relative to size of mesh.\n                    projectDist = (projectDist / _this._boundingDimensions.length()) * _this._anchorMesh.scaling.length();\n                    // Rotate based on axis\n                    if (!_this.attachedMesh.rotationQuaternion) {\n                        _this.attachedMesh.rotationQuaternion = Quaternion.RotationYawPitchRoll(_this.attachedMesh.rotation.y, _this.attachedMesh.rotation.x, _this.attachedMesh.rotation.z);\n                    }\n                    if (!_this._anchorMesh.rotationQuaternion) {\n                        _this._anchorMesh.rotationQuaternion = Quaternion.RotationYawPitchRoll(_this._anchorMesh.rotation.y, _this._anchorMesh.rotation.x, _this._anchorMesh.rotation.z);\n                    }\n                    // Do not allow the object to turn more than a full circle\n                    totalTurnAmountOfDrag += projectDist;\n                    if (Math.abs(totalTurnAmountOfDrag) <= 2 * Math.PI) {\n                        if (i >= 8) {\n                            Quaternion.RotationYawPitchRollToRef(0, 0, projectDist, _this._tmpQuaternion);\n                        }\n                        else if (i >= 4) {\n                            Quaternion.RotationYawPitchRollToRef(projectDist, 0, 0, _this._tmpQuaternion);\n                        }\n                        else {\n                            Quaternion.RotationYawPitchRollToRef(0, projectDist, 0, _this._tmpQuaternion);\n                        }\n                        // Rotate around center of bounding box\n                        _this._anchorMesh.addChild(_this.attachedMesh, Gizmo.PreserveScaling);\n                        if (_this._anchorMesh.getScene().useRightHandedSystem) {\n                            _this._tmpQuaternion.conjugateInPlace();\n                        }\n                        _this._anchorMesh.rotationQuaternion.multiplyToRef(_this._tmpQuaternion, _this._anchorMesh.rotationQuaternion);\n                        _this._anchorMesh.removeChild(_this.attachedMesh, Gizmo.PreserveScaling);\n                        _this.attachedMesh.setParent(originalParent, Gizmo.PreserveScaling);\n                    }\n                    _this.updateBoundingBox();\n                    PivotTools._RestorePivotPoint(_this.attachedMesh);\n                }\n                _this._updateDummy();\n            });\n            // Selection/deselection\n            _dragBehavior.onDragStartObservable.add(function () {\n                _this.onDragStartObservable.notifyObservers({});\n                _this._selectNode(sphere);\n            });\n            _dragBehavior.onDragEndObservable.add(function () {\n                _this.onRotationSphereDragEndObservable.notifyObservers({});\n                _this._selectNode(null);\n                _this._updateDummy();\n            });\n            this_1._rotateSpheresParent.addChild(sphere);\n        };\n        var this_1 = this;\n        for (var i = 0; i < 12; i++) {\n            _loop_1(i);\n        }\n        _this._rootMesh.addChild(_this._rotateSpheresParent);\n        // Create scale cubes\n        _this._scaleBoxesParent = new AbstractMesh(\"\", gizmoLayer.utilityLayerScene);\n        _this._scaleBoxesParent.rotationQuaternion = new Quaternion();\n        for (var i = 0; i < 3; i++) {\n            for (var j = 0; j < 3; j++) {\n                var _loop_2 = function (k) {\n                    // create box for relevant axis\n                    var zeroAxisCount = (i === 1 ? 1 : 0) + (j === 1 ? 1 : 0) + (k === 1 ? 1 : 0);\n                    if (zeroAxisCount === 1 || zeroAxisCount === 3) {\n                        return \"continue\";\n                    }\n                    var box = CreateBox(\"\", { size: 1 }, gizmoLayer.utilityLayerScene);\n                    box.material = this_2._coloredMaterial;\n                    box.metadata = zeroAxisCount === 2; // None homogenous scale handle\n                    box.isNearGrabbable = true;\n                    // Dragging logic\n                    var dragAxis = new Vector3(i - 1, j - 1, k - 1).normalize();\n                    var _dragBehavior = new PointerDragBehavior({ dragAxis: dragAxis });\n                    _dragBehavior.updateDragPlane = false;\n                    _dragBehavior.moveAttached = false;\n                    box.addBehavior(_dragBehavior);\n                    _dragBehavior.onDragObservable.add(function (event) {\n                        _this.onScaleBoxDragObservable.notifyObservers({});\n                        if (_this.attachedMesh) {\n                            var originalParent = _this.attachedMesh.parent;\n                            if (originalParent && originalParent.scaling && originalParent.scaling.isNonUniformWithinEpsilon(0.001)) {\n                                Logger.Warn(\"BoundingBoxGizmo controls are not supported on child meshes with non-uniform parent scaling\");\n                                return;\n                            }\n                            PivotTools._RemoveAndStorePivotPoint(_this.attachedMesh);\n                            var relativeDragDistance = (event.dragDistance / _this._boundingDimensions.length()) * _this._anchorMesh.scaling.length();\n                            var deltaScale = new Vector3(relativeDragDistance, relativeDragDistance, relativeDragDistance);\n                            if (zeroAxisCount === 2) {\n                                // scale on 1 axis when using the anchor box in the face middle\n                                deltaScale.x *= Math.abs(dragAxis.x);\n                                deltaScale.y *= Math.abs(dragAxis.y);\n                                deltaScale.z *= Math.abs(dragAxis.z);\n                            }\n                            deltaScale.scaleInPlace(_this._scaleDragSpeed);\n                            deltaScale.multiplyInPlace(_this._axisFactor);\n                            _this.updateBoundingBox();\n                            if (_this.scalePivot) {\n                                _this.attachedMesh.getWorldMatrix().getRotationMatrixToRef(_this._tmpRotationMatrix);\n                                // Move anchor to desired pivot point (Bottom left corner + dimension/2)\n                                _this._boundingDimensions.scaleToRef(0.5, _this._tmpVector);\n                                Vector3.TransformCoordinatesToRef(_this._tmpVector, _this._tmpRotationMatrix, _this._tmpVector);\n                                _this._anchorMesh.position.subtractInPlace(_this._tmpVector);\n                                _this._boundingDimensions.multiplyToRef(_this.scalePivot, _this._tmpVector);\n                                Vector3.TransformCoordinatesToRef(_this._tmpVector, _this._tmpRotationMatrix, _this._tmpVector);\n                                _this._anchorMesh.position.addInPlace(_this._tmpVector);\n                            }\n                            else {\n                                // Scale from the position of the opposite corner\n                                box.absolutePosition.subtractToRef(_this._anchorMesh.position, _this._tmpVector);\n                                _this._anchorMesh.position.subtractInPlace(_this._tmpVector);\n                            }\n                            _this._anchorMesh.addChild(_this.attachedMesh, Gizmo.PreserveScaling);\n                            _this._anchorMesh.scaling.addInPlace(deltaScale);\n                            if (_this._anchorMesh.scaling.x < 0 || _this._anchorMesh.scaling.y < 0 || _this._anchorMesh.scaling.z < 0) {\n                                _this._anchorMesh.scaling.subtractInPlace(deltaScale);\n                            }\n                            _this._anchorMesh.removeChild(_this.attachedMesh, Gizmo.PreserveScaling);\n                            _this.attachedMesh.setParent(originalParent, Gizmo.PreserveScaling);\n                            PivotTools._RestorePivotPoint(_this.attachedMesh);\n                        }\n                        _this._updateDummy();\n                    });\n                    // Selection/deselection\n                    _dragBehavior.onDragStartObservable.add(function () {\n                        _this.onDragStartObservable.notifyObservers({});\n                        _this._selectNode(box);\n                    });\n                    _dragBehavior.onDragEndObservable.add(function () {\n                        _this.onScaleBoxDragEndObservable.notifyObservers({});\n                        _this._selectNode(null);\n                        _this._updateDummy();\n                    });\n                    this_2._scaleBoxesParent.addChild(box);\n                };\n                var this_2 = this;\n                for (var k = 0; k < 3; k++) {\n                    _loop_2(k);\n                }\n            }\n        }\n        _this._rootMesh.addChild(_this._scaleBoxesParent);\n        // Hover color change\n        var pointerIds = new Array();\n        _this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(function (pointerInfo) {\n            if (!pointerIds[pointerInfo.event.pointerId]) {\n                _this._rotateSpheresParent\n                    .getChildMeshes()\n                    .concat(_this._scaleBoxesParent.getChildMeshes())\n                    .forEach(function (mesh) {\n                    if (pointerInfo.pickInfo && pointerInfo.pickInfo.pickedMesh == mesh) {\n                        pointerIds[pointerInfo.event.pointerId] = mesh;\n                        mesh.material = _this._hoverColoredMaterial;\n                    }\n                });\n            }\n            else {\n                if (pointerInfo.pickInfo && pointerInfo.pickInfo.pickedMesh != pointerIds[pointerInfo.event.pointerId]) {\n                    pointerIds[pointerInfo.event.pointerId].material = _this._coloredMaterial;\n                    delete pointerIds[pointerInfo.event.pointerId];\n                }\n            }\n        });\n        // Update bounding box positions\n        _this._renderObserver = _this.gizmoLayer.originalScene.onBeforeRenderObservable.add(function () {\n            // Only update the bounding box if scaling has changed\n            if (_this.attachedMesh && !_this._existingMeshScale.equals(_this.attachedMesh.scaling)) {\n                _this.updateBoundingBox();\n            }\n            else if (_this.fixedDragMeshScreenSize || _this.fixedDragMeshBoundsSize) {\n                _this._updateRotationSpheres();\n                _this._updateScaleBoxes();\n            }\n            // If drag mesh is enabled and dragging, update the attached mesh pose to match the drag mesh\n            if (_this._dragMesh && _this.attachedMesh && _this._pointerDragBehavior.dragging) {\n                _this._lineBoundingBox.position.rotateByQuaternionToRef(_this._rootMesh.rotationQuaternion, _this._tmpVector);\n                _this.attachedMesh.setAbsolutePosition(_this._dragMesh.position.add(_this._tmpVector.scale(-1)));\n            }\n        });\n        _this.updateBoundingBox();\n        return _this;\n    }\n    Object.defineProperty(BoundingBoxGizmo.prototype, \"axisFactor\", {\n        /**\n         * Gets the axis factor\n         * @returns the Vector3 factor value\n         */\n        get: function () {\n            return this._axisFactor;\n        },\n        /**\n         * Sets the axis factor\n         * @param factor the Vector3 value\n         */\n        set: function (factor) {\n            this._axisFactor = factor;\n            // update scale cube visibility\n            var scaleBoxes = this._scaleBoxesParent.getChildMeshes();\n            var index = 0;\n            for (var i = 0; i < 3; i++) {\n                for (var j = 0; j < 3; j++) {\n                    for (var k = 0; k < 3; k++) {\n                        var zeroAxisCount = (i === 1 ? 1 : 0) + (j === 1 ? 1 : 0) + (k === 1 ? 1 : 0);\n                        if (zeroAxisCount === 1 || zeroAxisCount === 3) {\n                            continue;\n                        }\n                        if (scaleBoxes[index]) {\n                            var dragAxis = new Vector3(i - 1, j - 1, k - 1);\n                            dragAxis.multiplyInPlace(this._axisFactor);\n                            scaleBoxes[index].setEnabled(dragAxis.lengthSquared() > Epsilon);\n                        }\n                        index++;\n                    }\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BoundingBoxGizmo.prototype, \"scaleDragSpeed\", {\n        /**\n         * Gets scale drag speed\n         * @returns the scale speed number\n         */\n        get: function () {\n            return this._scaleDragSpeed;\n        },\n        /**\n         * Sets scale drag speed value\n         * @param value the new speed value\n         */\n        set: function (value) {\n            this._scaleDragSpeed = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Sets the color of the bounding box gizmo\n     * @param color the color to set\n     */\n    BoundingBoxGizmo.prototype.setColor = function (color) {\n        this._coloredMaterial.emissiveColor = color;\n        this._hoverColoredMaterial.emissiveColor = color.clone().add(new Color3(0.3, 0.3, 0.3));\n        this._lineBoundingBox.getChildren().forEach(function (l) {\n            if (l.color) {\n                l.color = color;\n            }\n        });\n    };\n    BoundingBoxGizmo.prototype._attachedNodeChanged = function (value) {\n        var _this = this;\n        if (value) {\n            // Reset anchor mesh to match attached mesh's scale\n            // This is needed to avoid invalid box/sphere position on first drag\n            this._anchorMesh.scaling.setAll(1);\n            PivotTools._RemoveAndStorePivotPoint(value);\n            var originalParent = value.parent;\n            this._anchorMesh.addChild(value, Gizmo.PreserveScaling);\n            this._anchorMesh.removeChild(value, Gizmo.PreserveScaling);\n            value.setParent(originalParent, Gizmo.PreserveScaling);\n            PivotTools._RestorePivotPoint(value);\n            this.updateBoundingBox();\n            value.getChildMeshes(false).forEach(function (m) {\n                m.markAsDirty(\"scaling\");\n            });\n            this.gizmoLayer.utilityLayerScene.onAfterRenderObservable.addOnce(function () {\n                _this._updateDummy();\n            });\n        }\n        // If the attachedMesh property is not set, then the attachedNode constructor was used, which\n        // the BoundingBoxGizmo doesn't support\n        if (!this.attachedMesh) {\n            Logger.Warn(\"Using the attachedNode attribute in BoundingBoxGizmo is not supported. Please use attachedMesh instead.\");\n        }\n    };\n    BoundingBoxGizmo.prototype._selectNode = function (selectedMesh) {\n        this._rotateSpheresParent\n            .getChildMeshes()\n            .concat(this._scaleBoxesParent.getChildMeshes())\n            .forEach(function (m) {\n            m.isVisible = !selectedMesh || m == selectedMesh;\n        });\n    };\n    /**\n     * Updates the bounding box information for the Gizmo\n     */\n    BoundingBoxGizmo.prototype.updateBoundingBox = function () {\n        if (this.attachedMesh) {\n            PivotTools._RemoveAndStorePivotPoint(this.attachedMesh);\n            // Store original parent\n            var originalParent = this.attachedMesh.parent;\n            this.attachedMesh.setParent(null, Gizmo.PreserveScaling);\n            this._update();\n            // Rotate based on axis\n            if (!this.attachedMesh.rotationQuaternion) {\n                this.attachedMesh.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.attachedMesh.rotation.y, this.attachedMesh.rotation.x, this.attachedMesh.rotation.z);\n            }\n            if (!this._anchorMesh.rotationQuaternion) {\n                this._anchorMesh.rotationQuaternion = Quaternion.RotationYawPitchRoll(this._anchorMesh.rotation.y, this._anchorMesh.rotation.x, this._anchorMesh.rotation.z);\n            }\n            this._anchorMesh.rotationQuaternion.copyFrom(this.attachedMesh.rotationQuaternion);\n            // Store original position and reset mesh to origin before computing the bounding box\n            this._tmpQuaternion.copyFrom(this.attachedMesh.rotationQuaternion);\n            this._tmpVector.copyFrom(this.attachedMesh.position);\n            this.attachedMesh.rotationQuaternion.set(0, 0, 0, 1);\n            this.attachedMesh.position.set(0, 0, 0);\n            // Update bounding dimensions/positions\n            var boundingMinMax = this.attachedMesh.getHierarchyBoundingVectors(!this.ignoreChildren, this.includeChildPredicate);\n            boundingMinMax.max.subtractToRef(boundingMinMax.min, this._boundingDimensions);\n            // Update gizmo to match bounding box scaling and rotation\n            // The position set here is the offset from the origin for the boundingbox when the attached mesh is at the origin\n            // The position of the gizmo is then set to the attachedMesh in gizmo._update\n            this._lineBoundingBox.scaling.copyFrom(this._boundingDimensions);\n            this._lineBoundingBox.position.set((boundingMinMax.max.x + boundingMinMax.min.x) / 2, (boundingMinMax.max.y + boundingMinMax.min.y) / 2, (boundingMinMax.max.z + boundingMinMax.min.z) / 2);\n            this._rotateSpheresParent.position.copyFrom(this._lineBoundingBox.position);\n            this._scaleBoxesParent.position.copyFrom(this._lineBoundingBox.position);\n            this._lineBoundingBox.computeWorldMatrix();\n            this._anchorMesh.position.copyFrom(this._lineBoundingBox.absolutePosition);\n            // Restore position/rotation values\n            this.attachedMesh.rotationQuaternion.copyFrom(this._tmpQuaternion);\n            this.attachedMesh.position.copyFrom(this._tmpVector);\n            // Restore original parent\n            this.attachedMesh.setParent(originalParent, Gizmo.PreserveScaling);\n        }\n        this._updateRotationSpheres();\n        this._updateScaleBoxes();\n        if (this.attachedMesh) {\n            this._existingMeshScale.copyFrom(this.attachedMesh.scaling);\n            PivotTools._RestorePivotPoint(this.attachedMesh);\n        }\n    };\n    BoundingBoxGizmo.prototype._updateRotationSpheres = function () {\n        var rotateSpheres = this._rotateSpheresParent.getChildMeshes();\n        for (var i = 0; i < 3; i++) {\n            for (var j = 0; j < 2; j++) {\n                for (var k = 0; k < 2; k++) {\n                    var index = i * 4 + j * 2 + k;\n                    if (i == 0) {\n                        rotateSpheres[index].position.set(this._boundingDimensions.x / 2, this._boundingDimensions.y * j, this._boundingDimensions.z * k);\n                        rotateSpheres[index].position.addInPlace(new Vector3(-this._boundingDimensions.x / 2, -this._boundingDimensions.y / 2, -this._boundingDimensions.z / 2));\n                        rotateSpheres[index].lookAt(Vector3.Cross(rotateSpheres[index].position.normalizeToNew(), Vector3.Right()).normalizeToNew().add(rotateSpheres[index].position));\n                    }\n                    if (i == 1) {\n                        rotateSpheres[index].position.set(this._boundingDimensions.x * j, this._boundingDimensions.y / 2, this._boundingDimensions.z * k);\n                        rotateSpheres[index].position.addInPlace(new Vector3(-this._boundingDimensions.x / 2, -this._boundingDimensions.y / 2, -this._boundingDimensions.z / 2));\n                        rotateSpheres[index].lookAt(Vector3.Cross(rotateSpheres[index].position.normalizeToNew(), Vector3.Up()).normalizeToNew().add(rotateSpheres[index].position));\n                    }\n                    if (i == 2) {\n                        rotateSpheres[index].position.set(this._boundingDimensions.x * j, this._boundingDimensions.y * k, this._boundingDimensions.z / 2);\n                        rotateSpheres[index].position.addInPlace(new Vector3(-this._boundingDimensions.x / 2, -this._boundingDimensions.y / 2, -this._boundingDimensions.z / 2));\n                        rotateSpheres[index].lookAt(Vector3.Cross(rotateSpheres[index].position.normalizeToNew(), Vector3.Forward()).normalizeToNew().add(rotateSpheres[index].position));\n                    }\n                    if (this.fixedDragMeshScreenSize && this.gizmoLayer.utilityLayerScene.activeCamera) {\n                        rotateSpheres[index].absolutePosition.subtractToRef(this.gizmoLayer.utilityLayerScene.activeCamera.position, this._tmpVector);\n                        var distanceFromCamera = (this.rotationSphereSize * this._tmpVector.length()) / this.fixedDragMeshScreenSizeDistanceFactor;\n                        rotateSpheres[index].scaling.set(distanceFromCamera, distanceFromCamera, distanceFromCamera);\n                    }\n                    else if (this.fixedDragMeshBoundsSize) {\n                        rotateSpheres[index].scaling.set(this.rotationSphereSize * this._boundingDimensions.x, this.rotationSphereSize * this._boundingDimensions.y, this.rotationSphereSize * this._boundingDimensions.z);\n                    }\n                    else {\n                        rotateSpheres[index].scaling.set(this.rotationSphereSize, this.rotationSphereSize, this.rotationSphereSize);\n                    }\n                }\n            }\n        }\n    };\n    BoundingBoxGizmo.prototype._updateScaleBoxes = function () {\n        var scaleBoxes = this._scaleBoxesParent.getChildMeshes();\n        var index = 0;\n        for (var i = 0; i < 3; i++) {\n            for (var j = 0; j < 3; j++) {\n                for (var k = 0; k < 3; k++) {\n                    var zeroAxisCount = (i === 1 ? 1 : 0) + (j === 1 ? 1 : 0) + (k === 1 ? 1 : 0);\n                    if (zeroAxisCount === 1 || zeroAxisCount === 3) {\n                        continue;\n                    }\n                    if (scaleBoxes[index]) {\n                        scaleBoxes[index].position.set(this._boundingDimensions.x * (i / 2), this._boundingDimensions.y * (j / 2), this._boundingDimensions.z * (k / 2));\n                        scaleBoxes[index].position.addInPlace(new Vector3(-this._boundingDimensions.x / 2, -this._boundingDimensions.y / 2, -this._boundingDimensions.z / 2));\n                        if (this.fixedDragMeshScreenSize && this.gizmoLayer.utilityLayerScene.activeCamera) {\n                            scaleBoxes[index].absolutePosition.subtractToRef(this.gizmoLayer.utilityLayerScene.activeCamera.position, this._tmpVector);\n                            var distanceFromCamera = (this.scaleBoxSize * this._tmpVector.length()) / this.fixedDragMeshScreenSizeDistanceFactor;\n                            scaleBoxes[index].scaling.set(distanceFromCamera, distanceFromCamera, distanceFromCamera);\n                        }\n                        else if (this.fixedDragMeshBoundsSize) {\n                            scaleBoxes[index].scaling.set(this.scaleBoxSize * this._boundingDimensions.x, this.scaleBoxSize * this._boundingDimensions.y, this.scaleBoxSize * this._boundingDimensions.z);\n                        }\n                        else {\n                            scaleBoxes[index].scaling.set(this.scaleBoxSize, this.scaleBoxSize, this.scaleBoxSize);\n                        }\n                    }\n                    index++;\n                }\n            }\n        }\n    };\n    /**\n     * Enables rotation on the specified axis and disables rotation on the others\n     * @param axis The list of axis that should be enabled (eg. \"xy\" or \"xyz\")\n     */\n    BoundingBoxGizmo.prototype.setEnabledRotationAxis = function (axis) {\n        this._rotateSpheresParent.getChildMeshes().forEach(function (m, i) {\n            if (i < 4) {\n                m.setEnabled(axis.indexOf(\"x\") != -1);\n            }\n            else if (i < 8) {\n                m.setEnabled(axis.indexOf(\"y\") != -1);\n            }\n            else {\n                m.setEnabled(axis.indexOf(\"z\") != -1);\n            }\n        });\n    };\n    /**\n     * Enables/disables scaling\n     * @param enable if scaling should be enabled\n     * @param homogeneousScaling defines if scaling should only be homogeneous\n     */\n    BoundingBoxGizmo.prototype.setEnabledScaling = function (enable, homogeneousScaling) {\n        if (homogeneousScaling === void 0) { homogeneousScaling = false; }\n        this._scaleBoxesParent.getChildMeshes().forEach(function (m) {\n            var enableMesh = enable;\n            // Disable heterogeneous scale handles if requested.\n            if (homogeneousScaling && m.metadata === true) {\n                enableMesh = false;\n            }\n            m.setEnabled(enableMesh);\n        });\n    };\n    BoundingBoxGizmo.prototype._updateDummy = function () {\n        if (this._dragMesh) {\n            this._dragMesh.position.copyFrom(this._lineBoundingBox.getAbsolutePosition());\n            this._dragMesh.scaling.copyFrom(this._lineBoundingBox.scaling);\n            this._dragMesh.rotationQuaternion.copyFrom(this._rootMesh.rotationQuaternion);\n        }\n    };\n    /**\n     * Enables a pointer drag behavior on the bounding box of the gizmo\n     */\n    BoundingBoxGizmo.prototype.enableDragBehavior = function () {\n        this._dragMesh = CreateBox(\"dummy\", { size: 1 }, this.gizmoLayer.utilityLayerScene);\n        this._dragMesh.visibility = 0;\n        this._dragMesh.rotationQuaternion = new Quaternion();\n        this._pointerDragBehavior.useObjectOrientationForDragging = false;\n        this._dragMesh.addBehavior(this._pointerDragBehavior);\n    };\n    /**\n     * Disposes of the gizmo\n     */\n    BoundingBoxGizmo.prototype.dispose = function () {\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n        this.gizmoLayer.originalScene.onBeforeRenderObservable.remove(this._renderObserver);\n        this._lineBoundingBox.dispose();\n        this._rotateSpheresParent.dispose();\n        this._scaleBoxesParent.dispose();\n        if (this._dragMesh) {\n            this._dragMesh.dispose();\n        }\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Makes a mesh not pickable and wraps the mesh inside of a bounding box mesh that is pickable. (This is useful to avoid picking within complex geometry)\n     * @param mesh the mesh to wrap in the bounding box mesh and make not pickable\n     * @returns the bounding box mesh with the passed in mesh as a child\n     */\n    BoundingBoxGizmo.MakeNotPickableAndWrapInBoundingBox = function (mesh) {\n        var makeNotPickable = function (root) {\n            root.isPickable = false;\n            root.getChildMeshes().forEach(function (c) {\n                makeNotPickable(c);\n            });\n        };\n        makeNotPickable(mesh);\n        // Reset position to get bounding box from origin with no rotation\n        if (!mesh.rotationQuaternion) {\n            mesh.rotationQuaternion = Quaternion.RotationYawPitchRoll(mesh.rotation.y, mesh.rotation.x, mesh.rotation.z);\n        }\n        var oldPos = mesh.position.clone();\n        var oldRot = mesh.rotationQuaternion.clone();\n        mesh.rotationQuaternion.set(0, 0, 0, 1);\n        mesh.position.set(0, 0, 0);\n        // Update bounding dimensions/positions\n        var box = CreateBox(\"box\", { size: 1 }, mesh.getScene());\n        var boundingMinMax = mesh.getHierarchyBoundingVectors();\n        boundingMinMax.max.subtractToRef(boundingMinMax.min, box.scaling);\n        // Adjust scale to avoid undefined behavior when adding child\n        if (box.scaling.y === 0) {\n            box.scaling.y = Epsilon;\n        }\n        if (box.scaling.x === 0) {\n            box.scaling.x = Epsilon;\n        }\n        if (box.scaling.z === 0) {\n            box.scaling.z = Epsilon;\n        }\n        box.position.set((boundingMinMax.max.x + boundingMinMax.min.x) / 2, (boundingMinMax.max.y + boundingMinMax.min.y) / 2, (boundingMinMax.max.z + boundingMinMax.min.z) / 2);\n        // Restore original positions\n        mesh.addChild(box);\n        mesh.rotationQuaternion.copyFrom(oldRot);\n        mesh.position.copyFrom(oldPos);\n        // Reverse parenting\n        mesh.removeChild(box);\n        box.addChild(mesh);\n        box.visibility = 0;\n        return box;\n    };\n    /**\n     * CustomMeshes are not supported by this gizmo\n     */\n    BoundingBoxGizmo.prototype.setCustomMesh = function () {\n        Logger.Error(\"Custom meshes are not supported on this gizmo\");\n    };\n    return BoundingBoxGizmo;\n}(Gizmo));\nexport { BoundingBoxGizmo };\n//# sourceMappingURL=boundingBoxGizmo.js.map","import { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Quaternion, Matrix, Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport \"../Meshes/Builders/linesBuilder.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { ShaderMaterial } from \"../Materials/shaderMaterial.js\";\nimport { Effect } from \"../Materials/effect.js\";\nimport { CreatePlane } from \"../Meshes/Builders/planeBuilder.js\";\nimport { CreateTorus } from \"../Meshes/Builders/torusBuilder.js\";\n/**\n * Single plane rotation gizmo\n */\nvar PlaneRotationGizmo = /** @class */ (function (_super) {\n    __extends(PlaneRotationGizmo, _super);\n    /**\n     * Creates a PlaneRotationGizmo\n     * @param planeNormal The normal of the plane which the gizmo will be able to rotate on\n     * @param color The color of the gizmo\n     * @param gizmoLayer The utility layer the gizmo will be added to\n     * @param tessellation Amount of tessellation to be used when creating rotation circles\n     * @param parent\n     * @param useEulerRotation Use and update Euler angle instead of quaternion\n     * @param thickness display gizmo axis thickness\n     */\n    function PlaneRotationGizmo(planeNormal, color, gizmoLayer, tessellation, parent, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    useEulerRotation, thickness) {\n        if (color === void 0) { color = Color3.Gray(); }\n        if (gizmoLayer === void 0) { gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer; }\n        if (tessellation === void 0) { tessellation = 32; }\n        if (parent === void 0) { parent = null; }\n        if (useEulerRotation === void 0) { useEulerRotation = false; }\n        if (thickness === void 0) { thickness = 1; }\n        var _this = this;\n        var _a;\n        _this = _super.call(this, gizmoLayer) || this;\n        _this._pointerObserver = null;\n        /**\n         * Rotation distance in radians that the gizmo will snap to (Default: 0)\n         */\n        _this.snapDistance = 0;\n        /**\n         * Event that fires each time the gizmo snaps to a new location.\n         * * snapDistance is the the change in distance\n         */\n        _this.onSnapObservable = new Observable();\n        /**\n         * Accumulated relative angle value for rotation on the axis. Reset to 0 when a dragStart occurs\n         */\n        _this.angle = 0;\n        _this._isEnabled = true;\n        _this._parent = null;\n        _this._dragging = false;\n        _this._angles = new Vector3();\n        _this._parent = parent;\n        // Create Material\n        _this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n        _this._coloredMaterial.diffuseColor = color;\n        _this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\n        _this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n        _this._hoverMaterial.diffuseColor = Color3.Yellow();\n        _this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n        _this._disableMaterial.diffuseColor = Color3.Gray();\n        _this._disableMaterial.alpha = 0.4;\n        // Build mesh on root node\n        _this._gizmoMesh = new Mesh(\"\", gizmoLayer.utilityLayerScene);\n        var _b = _this._createGizmoMesh(_this._gizmoMesh, thickness, tessellation), rotationMesh = _b.rotationMesh, collider = _b.collider;\n        // Setup Rotation Circle\n        _this._rotationDisplayPlane = CreatePlane(\"rotationDisplay\", { size: 0.6, updatable: false }, _this.gizmoLayer.utilityLayerScene);\n        _this._rotationDisplayPlane.rotation.z = Math.PI * 0.5;\n        _this._rotationDisplayPlane.parent = _this._gizmoMesh;\n        _this._rotationDisplayPlane.setEnabled(false);\n        Effect.ShadersStore[\"rotationGizmoVertexShader\"] = PlaneRotationGizmo._RotationGizmoVertexShader;\n        Effect.ShadersStore[\"rotationGizmoFragmentShader\"] = PlaneRotationGizmo._RotationGizmoFragmentShader;\n        _this._rotationShaderMaterial = new ShaderMaterial(\"shader\", _this.gizmoLayer.utilityLayerScene, {\n            vertex: \"rotationGizmo\",\n            fragment: \"rotationGizmo\",\n        }, {\n            attributes: [\"position\", \"uv\"],\n            uniforms: [\"worldViewProjection\", \"angles\"],\n        });\n        _this._rotationShaderMaterial.backFaceCulling = false;\n        _this._rotationDisplayPlane.material = _this._rotationShaderMaterial;\n        _this._rotationDisplayPlane.visibility = 0.999;\n        _this._gizmoMesh.lookAt(_this._rootMesh.position.add(planeNormal));\n        _this._rootMesh.addChild(_this._gizmoMesh, Gizmo.PreserveScaling);\n        _this._gizmoMesh.scaling.scaleInPlace(1 / 3);\n        // Add drag behavior to handle events when the gizmo is dragged\n        _this.dragBehavior = new PointerDragBehavior({ dragPlaneNormal: planeNormal });\n        _this.dragBehavior.moveAttached = false;\n        _this.dragBehavior.maxDragAngle = PlaneRotationGizmo.MaxDragAngle;\n        _this.dragBehavior._useAlternatePickedPointAboveMaxDragAngle = true;\n        _this._rootMesh.addBehavior(_this.dragBehavior);\n        // Closures for drag logic\n        var lastDragPosition = new Vector3();\n        var rotationMatrix = new Matrix();\n        var planeNormalTowardsCamera = new Vector3();\n        var localPlaneNormalTowardsCamera = new Vector3();\n        _this.dragBehavior.onDragStartObservable.add(function (e) {\n            if (_this.attachedNode) {\n                lastDragPosition.copyFrom(e.dragPlanePoint);\n                _this._rotationDisplayPlane.setEnabled(true);\n                _this._rotationDisplayPlane.getWorldMatrix().invertToRef(rotationMatrix);\n                Vector3.TransformCoordinatesToRef(e.dragPlanePoint, rotationMatrix, lastDragPosition);\n                _this._angles.x = Math.atan2(lastDragPosition.y, lastDragPosition.x) + Math.PI;\n                _this._angles.y = 0;\n                _this._angles.z = _this.updateGizmoRotationToMatchAttachedMesh ? 1 : 0;\n                _this._dragging = true;\n                lastDragPosition.copyFrom(e.dragPlanePoint);\n                _this._rotationShaderMaterial.setVector3(\"angles\", _this._angles);\n                _this.angle = 0;\n            }\n        });\n        _this.dragBehavior.onDragEndObservable.add(function () {\n            _this._dragging = false;\n            _this._rotationDisplayPlane.setEnabled(false);\n        });\n        var tmpSnapEvent = { snapDistance: 0 };\n        var currentSnapDragDistance = 0;\n        var tmpMatrix = new Matrix();\n        var amountToRotate = new Quaternion();\n        _this.dragBehavior.onDragObservable.add(function (event) {\n            if (_this.attachedNode) {\n                // Calc angle over full 360 degree (https://stackoverflow.com/questions/43493711/the-angle-between-two-3d-vectors-with-a-result-range-0-360)\n                var nodeScale = new Vector3(1, 1, 1);\n                var nodeQuaternion = new Quaternion(0, 0, 0, 1);\n                var nodeTranslation = new Vector3(0, 0, 0);\n                _this._handlePivot();\n                _this.attachedNode.getWorldMatrix().decompose(nodeScale, nodeQuaternion, nodeTranslation);\n                var newVector = event.dragPlanePoint.subtract(nodeTranslation).normalize();\n                var originalVector = lastDragPosition.subtract(nodeTranslation).normalize();\n                var cross = Vector3.Cross(newVector, originalVector);\n                var dot = Vector3.Dot(newVector, originalVector);\n                var angle = Math.atan2(cross.length(), dot);\n                planeNormalTowardsCamera.copyFrom(planeNormal);\n                localPlaneNormalTowardsCamera.copyFrom(planeNormal);\n                if (_this.updateGizmoRotationToMatchAttachedMesh) {\n                    nodeQuaternion.toRotationMatrix(rotationMatrix);\n                    localPlaneNormalTowardsCamera = Vector3.TransformCoordinates(planeNormalTowardsCamera, rotationMatrix);\n                }\n                // Flip up vector depending on which side the camera is on\n                var cameraFlipped = false;\n                if (gizmoLayer.utilityLayerScene.activeCamera) {\n                    var camVec = gizmoLayer.utilityLayerScene.activeCamera.position.subtract(nodeTranslation).normalize();\n                    if (Vector3.Dot(camVec, localPlaneNormalTowardsCamera) > 0) {\n                        planeNormalTowardsCamera.scaleInPlace(-1);\n                        localPlaneNormalTowardsCamera.scaleInPlace(-1);\n                        cameraFlipped = true;\n                    }\n                }\n                var halfCircleSide = Vector3.Dot(localPlaneNormalTowardsCamera, cross) > 0.0;\n                if (halfCircleSide) {\n                    angle = -angle;\n                }\n                // Snapping logic\n                var snapped = false;\n                if (_this.snapDistance != 0) {\n                    currentSnapDragDistance += angle;\n                    if (Math.abs(currentSnapDragDistance) > _this.snapDistance) {\n                        var dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / _this.snapDistance);\n                        if (currentSnapDragDistance < 0) {\n                            dragSteps *= -1;\n                        }\n                        currentSnapDragDistance = currentSnapDragDistance % _this.snapDistance;\n                        angle = _this.snapDistance * dragSteps;\n                        snapped = true;\n                    }\n                    else {\n                        angle = 0;\n                    }\n                }\n                // Convert angle and axis to quaternion (http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm)\n                var quaternionCoefficient = Math.sin(angle / 2);\n                amountToRotate.set(planeNormalTowardsCamera.x * quaternionCoefficient, planeNormalTowardsCamera.y * quaternionCoefficient, planeNormalTowardsCamera.z * quaternionCoefficient, Math.cos(angle / 2));\n                // If the meshes local scale is inverted (eg. loaded gltf file parent with z scale of -1) the rotation needs to be inverted on the y axis\n                if (tmpMatrix.determinant() > 0) {\n                    var tmpVector = new Vector3();\n                    amountToRotate.toEulerAnglesToRef(tmpVector);\n                    Quaternion.RotationYawPitchRollToRef(tmpVector.y, -tmpVector.x, -tmpVector.z, amountToRotate);\n                }\n                if (_this.updateGizmoRotationToMatchAttachedMesh) {\n                    // Rotate selected mesh quaternion over fixed axis\n                    nodeQuaternion.multiplyToRef(amountToRotate, nodeQuaternion);\n                }\n                else {\n                    // Rotate selected mesh quaternion over rotated axis\n                    amountToRotate.multiplyToRef(nodeQuaternion, nodeQuaternion);\n                }\n                // recompose matrix\n                _this.attachedNode.getWorldMatrix().copyFrom(Matrix.Compose(nodeScale, nodeQuaternion, nodeTranslation));\n                lastDragPosition.copyFrom(event.dragPlanePoint);\n                if (snapped) {\n                    tmpSnapEvent.snapDistance = angle;\n                    _this.onSnapObservable.notifyObservers(tmpSnapEvent);\n                }\n                _this._angles.y += angle;\n                _this.angle += cameraFlipped ? -angle : angle;\n                _this._rotationShaderMaterial.setVector3(\"angles\", _this._angles);\n                _this._matrixChanged();\n            }\n        });\n        var light = gizmoLayer._getSharedGizmoLight();\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(_this._rootMesh.getChildMeshes(false));\n        var cache = {\n            colliderMeshes: [collider],\n            gizmoMeshes: [rotationMesh],\n            material: _this._coloredMaterial,\n            hoverMaterial: _this._hoverMaterial,\n            disableMaterial: _this._disableMaterial,\n            active: false,\n            dragBehavior: _this.dragBehavior,\n        };\n        (_a = _this._parent) === null || _a === void 0 ? void 0 : _a.addToAxisCache(_this._gizmoMesh, cache);\n        _this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(function (pointerInfo) {\n            var _a;\n            if (_this._customMeshSet) {\n                return;\n            }\n            // updating here the maxangle because ondragstart is too late (value already used) and the updated value is not taken into account\n            _this.dragBehavior.maxDragAngle = PlaneRotationGizmo.MaxDragAngle;\n            _this._isHovered = !!(cache.colliderMeshes.indexOf((_a = pointerInfo === null || pointerInfo === void 0 ? void 0 : pointerInfo.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) != -1);\n            if (!_this._parent) {\n                var material = cache.dragBehavior.enabled ? (_this._isHovered || _this._dragging ? _this._hoverMaterial : _this._coloredMaterial) : _this._disableMaterial;\n                _this._setGizmoMeshMaterial(cache.gizmoMeshes, material);\n            }\n        });\n        _this.dragBehavior.onEnabledObservable.add(function (newState) {\n            _this._setGizmoMeshMaterial(cache.gizmoMeshes, newState ? _this._coloredMaterial : _this._disableMaterial);\n        });\n        return _this;\n    }\n    /**\n     * Create Geometry for Gizmo\n     * @param parentMesh\n     * @param thickness\n     * @param tessellation\n     */\n    PlaneRotationGizmo.prototype._createGizmoMesh = function (parentMesh, thickness, tessellation) {\n        var collider = CreateTorus(\"ignore\", {\n            diameter: 0.6,\n            thickness: 0.03 * thickness,\n            tessellation: tessellation,\n        }, this.gizmoLayer.utilityLayerScene);\n        collider.visibility = 0;\n        var rotationMesh = CreateTorus(\"\", {\n            diameter: 0.6,\n            thickness: 0.005 * thickness,\n            tessellation: tessellation,\n        }, this.gizmoLayer.utilityLayerScene);\n        rotationMesh.material = this._coloredMaterial;\n        // Position arrow pointing in its drag axis\n        rotationMesh.rotation.x = Math.PI / 2;\n        collider.rotation.x = Math.PI / 2;\n        parentMesh.addChild(rotationMesh, Gizmo.PreserveScaling);\n        parentMesh.addChild(collider, Gizmo.PreserveScaling);\n        return { rotationMesh: rotationMesh, collider: collider };\n    };\n    PlaneRotationGizmo.prototype._attachedNodeChanged = function (value) {\n        if (this.dragBehavior) {\n            this.dragBehavior.enabled = value ? true : false;\n        }\n    };\n    Object.defineProperty(PlaneRotationGizmo.prototype, \"isEnabled\", {\n        get: function () {\n            return this._isEnabled;\n        },\n        /**\n         * If the gizmo is enabled\n         */\n        set: function (value) {\n            this._isEnabled = value;\n            if (!value) {\n                this.attachedMesh = null;\n            }\n            else {\n                if (this._parent) {\n                    this.attachedMesh = this._parent.attachedMesh;\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Disposes of the gizmo\n     */\n    PlaneRotationGizmo.prototype.dispose = function () {\n        this.onSnapObservable.clear();\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n        this.dragBehavior.detach();\n        if (this._gizmoMesh) {\n            this._gizmoMesh.dispose();\n        }\n        if (this._rotationDisplayPlane) {\n            this._rotationDisplayPlane.dispose();\n        }\n        if (this._rotationShaderMaterial) {\n            this._rotationShaderMaterial.dispose();\n        }\n        [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach(function (matl) {\n            if (matl) {\n                matl.dispose();\n            }\n        });\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * The maximum angle between the camera and the rotation allowed for interaction\n     * If a rotation plane appears 'flat', a lower value allows interaction.\n     */\n    PlaneRotationGizmo.MaxDragAngle = (Math.PI * 9) / 20;\n    PlaneRotationGizmo._RotationGizmoVertexShader = \"\\n        precision highp float;\\n        attribute vec3 position;\\n        attribute vec2 uv;\\n        uniform mat4 worldViewProjection;\\n        varying vec3 vPosition;\\n        varying vec2 vUV;\\n        void main(void) {\\n            gl_Position = worldViewProjection * vec4(position, 1.0);\\n            vUV = uv;\\n        }\";\n    PlaneRotationGizmo._RotationGizmoFragmentShader = \"\\n        precision highp float;\\n        varying vec2 vUV;\\n        varying vec3 vPosition;\\n        uniform vec3 angles;\\n        #define twopi 6.283185307\\n        void main(void) {\\n            vec2 uv = vUV - vec2(0.5);\\n            float angle = atan(uv.y, uv.x) + 3.141592;\\n            float delta = gl_FrontFacing ? angles.y : -angles.y;\\n            float begin = angles.x - delta * angles.z;\\n            float start = (begin < (begin + delta)) ? begin : (begin + delta);\\n            float end = (begin > (begin + delta)) ? begin : (begin + delta);\\n            float len = sqrt(dot(uv,uv));\\n            float opacity = 1. - step(0.5, len);\\n\\n            float base = abs(floor(start / twopi)) * twopi;\\n            start += base;\\n            end += base;\\n\\n            float intensity = 0.;\\n            for (int i = 0; i < 5; i++)\\n            {\\n                intensity += max(step(start, angle) - step(end, angle), 0.);\\n                angle += twopi;\\n            }\\n            gl_FragColor = vec4(1.,1.,0., min(intensity * 0.25, 0.8)) * opacity;\\n        }\";\n    return PlaneRotationGizmo;\n}(Gizmo));\nexport { PlaneRotationGizmo };\n//# sourceMappingURL=planeRotationGizmo.js.map","import { __extends } from \"tslib\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { PlaneRotationGizmo } from \"./planeRotationGizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\n/**\n * Gizmo that enables rotating a mesh along 3 axis\n */\nvar RotationGizmo = /** @class */ (function (_super) {\n    __extends(RotationGizmo, _super);\n    /**\n     * Creates a RotationGizmo\n     * @param gizmoLayer The utility layer the gizmo will be added to\n     * @param tessellation Amount of tessellation to be used when creating rotation circles\n     * @param useEulerRotation Use and update Euler angle instead of quaternion\n     * @param thickness display gizmo axis thickness\n     * @param gizmoManager Gizmo manager\n     * @param options More options\n     */\n    function RotationGizmo(gizmoLayer, tessellation, useEulerRotation, thickness, gizmoManager, options) {\n        if (gizmoLayer === void 0) { gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer; }\n        if (tessellation === void 0) { tessellation = 32; }\n        if (useEulerRotation === void 0) { useEulerRotation = false; }\n        if (thickness === void 0) { thickness = 1; }\n        var _this = _super.call(this, gizmoLayer) || this;\n        /** Fires an event when any of it's sub gizmos are dragged */\n        _this.onDragStartObservable = new Observable();\n        /** Fires an event when any of it's sub gizmos are released from dragging */\n        _this.onDragEndObservable = new Observable();\n        _this._observables = [];\n        /** Node Caching for quick lookup */\n        _this._gizmoAxisCache = new Map();\n        var xColor = options && options.xOptions && options.xOptions.color ? options.xOptions.color : Color3.Red().scale(0.5);\n        var yColor = options && options.yOptions && options.yOptions.color ? options.yOptions.color : Color3.Green().scale(0.5);\n        var zColor = options && options.zOptions && options.zOptions.color ? options.zOptions.color : Color3.Blue().scale(0.5);\n        _this.xGizmo = new PlaneRotationGizmo(new Vector3(1, 0, 0), xColor, gizmoLayer, tessellation, _this, useEulerRotation, thickness);\n        _this.yGizmo = new PlaneRotationGizmo(new Vector3(0, 1, 0), yColor, gizmoLayer, tessellation, _this, useEulerRotation, thickness);\n        _this.zGizmo = new PlaneRotationGizmo(new Vector3(0, 0, 1), zColor, gizmoLayer, tessellation, _this, useEulerRotation, thickness);\n        // Relay drag events and set update scale\n        [_this.xGizmo, _this.yGizmo, _this.zGizmo].forEach(function (gizmo) {\n            //must set updateScale on each gizmo, as setting it on root RotationGizmo doesnt prevent individual gizmos from updating\n            //currently updateScale is a property with no getter/setter, so no good way to override behavior at runtime, so we will at least set it on startup\n            if (options && options.updateScale != undefined) {\n                gizmo.updateScale = options.updateScale;\n            }\n            gizmo.dragBehavior.onDragStartObservable.add(function () {\n                _this.onDragStartObservable.notifyObservers({});\n            });\n            gizmo.dragBehavior.onDragEndObservable.add(function () {\n                _this.onDragEndObservable.notifyObservers({});\n            });\n        });\n        _this.attachedMesh = null;\n        _this.attachedNode = null;\n        if (gizmoManager) {\n            gizmoManager.addToAxisCache(_this._gizmoAxisCache);\n        }\n        else {\n            // Only subscribe to pointer event if gizmoManager isnt\n            Gizmo.GizmoAxisPointerObserver(gizmoLayer, _this._gizmoAxisCache);\n        }\n        return _this;\n    }\n    Object.defineProperty(RotationGizmo.prototype, \"attachedMesh\", {\n        get: function () {\n            return this._meshAttached;\n        },\n        set: function (mesh) {\n            this._meshAttached = mesh;\n            this._nodeAttached = mesh;\n            this._checkBillboardTransform();\n            [this.xGizmo, this.yGizmo, this.zGizmo].forEach(function (gizmo) {\n                if (gizmo.isEnabled) {\n                    gizmo.attachedMesh = mesh;\n                }\n                else {\n                    gizmo.attachedMesh = null;\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RotationGizmo.prototype, \"attachedNode\", {\n        get: function () {\n            return this._nodeAttached;\n        },\n        set: function (node) {\n            this._meshAttached = null;\n            this._nodeAttached = node;\n            this._checkBillboardTransform();\n            [this.xGizmo, this.yGizmo, this.zGizmo].forEach(function (gizmo) {\n                if (gizmo.isEnabled) {\n                    gizmo.attachedNode = node;\n                }\n                else {\n                    gizmo.attachedNode = null;\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    RotationGizmo.prototype._checkBillboardTransform = function () {\n        if (this._nodeAttached && this._nodeAttached.billboardMode) {\n            console.log(\"Rotation Gizmo will not work with transforms in billboard mode.\");\n        }\n    };\n    Object.defineProperty(RotationGizmo.prototype, \"isHovered\", {\n        /**\n         * True when the mouse pointer is hovering a gizmo mesh\n         */\n        get: function () {\n            var hovered = false;\n            [this.xGizmo, this.yGizmo, this.zGizmo].forEach(function (gizmo) {\n                hovered = hovered || gizmo.isHovered;\n            });\n            return hovered;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RotationGizmo.prototype, \"updateGizmoRotationToMatchAttachedMesh\", {\n        get: function () {\n            return this.xGizmo.updateGizmoRotationToMatchAttachedMesh;\n        },\n        set: function (value) {\n            if (this.xGizmo) {\n                this.xGizmo.updateGizmoRotationToMatchAttachedMesh = value;\n                this.yGizmo.updateGizmoRotationToMatchAttachedMesh = value;\n                this.zGizmo.updateGizmoRotationToMatchAttachedMesh = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RotationGizmo.prototype, \"snapDistance\", {\n        get: function () {\n            return this.xGizmo.snapDistance;\n        },\n        /**\n         * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\n         */\n        set: function (value) {\n            if (this.xGizmo) {\n                this.xGizmo.snapDistance = value;\n                this.yGizmo.snapDistance = value;\n                this.zGizmo.snapDistance = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RotationGizmo.prototype, \"scaleRatio\", {\n        get: function () {\n            return this.xGizmo.scaleRatio;\n        },\n        /**\n         * Ratio for the scale of the gizmo (Default: 1)\n         */\n        set: function (value) {\n            if (this.xGizmo) {\n                this.xGizmo.scaleRatio = value;\n                this.yGizmo.scaleRatio = value;\n                this.zGizmo.scaleRatio = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Builds Gizmo Axis Cache to enable features such as hover state preservation and graying out other axis during manipulation\n     * @param mesh Axis gizmo mesh\n     * @param cache Gizmo axis definition used for reactive gizmo UI\n     */\n    RotationGizmo.prototype.addToAxisCache = function (mesh, cache) {\n        this._gizmoAxisCache.set(mesh, cache);\n    };\n    /**\n     * Disposes of the gizmo\n     */\n    RotationGizmo.prototype.dispose = function () {\n        var _this = this;\n        this.xGizmo.dispose();\n        this.yGizmo.dispose();\n        this.zGizmo.dispose();\n        this.onDragStartObservable.clear();\n        this.onDragEndObservable.clear();\n        this._observables.forEach(function (obs) {\n            _this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(obs);\n        });\n    };\n    /**\n     * CustomMeshes are not supported by this gizmo\n     */\n    RotationGizmo.prototype.setCustomMesh = function () {\n        Logger.Error(\"Custom meshes are not supported on this gizmo, please set the custom meshes on the gizmos contained within this one (gizmo.xGizmo, gizmo.yGizmo, gizmo.zGizmo)\");\n    };\n    return RotationGizmo;\n}(Gizmo));\nexport { RotationGizmo };\n//# sourceMappingURL=rotationGizmo.js.map","import { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { TransformNode } from \"../Meshes/transformNode.js\";\nimport { CreatePlane } from \"../Meshes/Builders/planeBuilder.js\";\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\n/**\n * Single plane drag gizmo\n */\nvar PlaneDragGizmo = /** @class */ (function (_super) {\n    __extends(PlaneDragGizmo, _super);\n    /**\n     * Creates a PlaneDragGizmo\n     * @param dragPlaneNormal The axis normal to which the gizmo will be able to drag on\n     * @param color The color of the gizmo\n     * @param gizmoLayer The utility layer the gizmo will be added to\n     * @param parent\n     */\n    function PlaneDragGizmo(dragPlaneNormal, color, gizmoLayer, parent) {\n        if (color === void 0) { color = Color3.Gray(); }\n        if (gizmoLayer === void 0) { gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer; }\n        if (parent === void 0) { parent = null; }\n        var _this = this;\n        var _a;\n        _this = _super.call(this, gizmoLayer) || this;\n        _this._pointerObserver = null;\n        /**\n         * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\n         */\n        _this.snapDistance = 0;\n        /**\n         * Event that fires each time the gizmo snaps to a new location.\n         * * snapDistance is the the change in distance\n         */\n        _this.onSnapObservable = new Observable();\n        _this._isEnabled = false;\n        _this._parent = null;\n        _this._dragging = false;\n        _this._parent = parent;\n        // Create Material\n        _this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n        _this._coloredMaterial.diffuseColor = color;\n        _this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\n        _this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n        _this._hoverMaterial.diffuseColor = Color3.Yellow();\n        _this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n        _this._disableMaterial.diffuseColor = Color3.Gray();\n        _this._disableMaterial.alpha = 0.4;\n        // Build plane mesh on root node\n        _this._gizmoMesh = PlaneDragGizmo._CreatePlane(gizmoLayer.utilityLayerScene, _this._coloredMaterial);\n        _this._gizmoMesh.lookAt(_this._rootMesh.position.add(dragPlaneNormal));\n        _this._gizmoMesh.scaling.scaleInPlace(1 / 3);\n        _this._gizmoMesh.parent = _this._rootMesh;\n        var currentSnapDragDistance = 0;\n        var tmpVector = new Vector3();\n        var tmpSnapEvent = { snapDistance: 0 };\n        // Add dragPlaneNormal drag behavior to handle events when the gizmo is dragged\n        _this.dragBehavior = new PointerDragBehavior({ dragPlaneNormal: dragPlaneNormal });\n        _this.dragBehavior.moveAttached = false;\n        _this._rootMesh.addBehavior(_this.dragBehavior);\n        _this.dragBehavior.onDragObservable.add(function (event) {\n            if (_this.attachedNode) {\n                _this._handlePivot();\n                // Keep world translation and use it to update world transform\n                // if the node has parent, the local transform properties (position, rotation, scale)\n                // will be recomputed in _matrixChanged function\n                // Snapping logic\n                if (_this.snapDistance == 0) {\n                    _this.attachedNode.getWorldMatrix().addTranslationFromFloats(event.delta.x, event.delta.y, event.delta.z);\n                }\n                else {\n                    currentSnapDragDistance += event.dragDistance;\n                    if (Math.abs(currentSnapDragDistance) > _this.snapDistance) {\n                        var dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / _this.snapDistance);\n                        currentSnapDragDistance = currentSnapDragDistance % _this.snapDistance;\n                        event.delta.normalizeToRef(tmpVector);\n                        tmpVector.scaleInPlace(_this.snapDistance * dragSteps);\n                        _this.attachedNode.getWorldMatrix().addTranslationFromFloats(tmpVector.x, tmpVector.y, tmpVector.z);\n                        tmpSnapEvent.snapDistance = _this.snapDistance * dragSteps;\n                        _this.onSnapObservable.notifyObservers(tmpSnapEvent);\n                    }\n                }\n                _this._matrixChanged();\n            }\n        });\n        _this.dragBehavior.onDragStartObservable.add(function () {\n            _this._dragging = true;\n        });\n        _this.dragBehavior.onDragEndObservable.add(function () {\n            _this._dragging = false;\n        });\n        var light = gizmoLayer._getSharedGizmoLight();\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(_this._rootMesh.getChildMeshes(false));\n        var cache = {\n            gizmoMeshes: _this._gizmoMesh.getChildMeshes(),\n            colliderMeshes: _this._gizmoMesh.getChildMeshes(),\n            material: _this._coloredMaterial,\n            hoverMaterial: _this._hoverMaterial,\n            disableMaterial: _this._disableMaterial,\n            active: false,\n            dragBehavior: _this.dragBehavior,\n        };\n        (_a = _this._parent) === null || _a === void 0 ? void 0 : _a.addToAxisCache(_this._gizmoMesh, cache);\n        _this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(function (pointerInfo) {\n            var _a;\n            if (_this._customMeshSet) {\n                return;\n            }\n            _this._isHovered = !!(cache.colliderMeshes.indexOf((_a = pointerInfo === null || pointerInfo === void 0 ? void 0 : pointerInfo.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) != -1);\n            if (!_this._parent) {\n                var material = cache.dragBehavior.enabled ? (_this._isHovered || _this._dragging ? _this._hoverMaterial : _this._coloredMaterial) : _this._disableMaterial;\n                _this._setGizmoMeshMaterial(cache.gizmoMeshes, material);\n            }\n        });\n        _this.dragBehavior.onEnabledObservable.add(function (newState) {\n            _this._setGizmoMeshMaterial(cache.gizmoMeshes, newState ? _this._coloredMaterial : _this._disableMaterial);\n        });\n        return _this;\n    }\n    /**\n     * @param scene\n     * @param material\n     * @hidden\n     */\n    PlaneDragGizmo._CreatePlane = function (scene, material) {\n        var plane = new TransformNode(\"plane\", scene);\n        //make sure plane is double sided\n        var dragPlane = CreatePlane(\"dragPlane\", { width: 0.1375, height: 0.1375, sideOrientation: 2 }, scene);\n        dragPlane.material = material;\n        dragPlane.parent = plane;\n        return plane;\n    };\n    PlaneDragGizmo.prototype._attachedNodeChanged = function (value) {\n        if (this.dragBehavior) {\n            this.dragBehavior.enabled = value ? true : false;\n        }\n    };\n    Object.defineProperty(PlaneDragGizmo.prototype, \"isEnabled\", {\n        get: function () {\n            return this._isEnabled;\n        },\n        /**\n         * If the gizmo is enabled\n         */\n        set: function (value) {\n            this._isEnabled = value;\n            if (!value) {\n                this.attachedNode = null;\n            }\n            else {\n                if (this._parent) {\n                    this.attachedNode = this._parent.attachedNode;\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Disposes of the gizmo\n     */\n    PlaneDragGizmo.prototype.dispose = function () {\n        this.onSnapObservable.clear();\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n        this.dragBehavior.detach();\n        _super.prototype.dispose.call(this);\n        if (this._gizmoMesh) {\n            this._gizmoMesh.dispose();\n        }\n        [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach(function (matl) {\n            if (matl) {\n                matl.dispose();\n            }\n        });\n    };\n    return PlaneDragGizmo;\n}(Gizmo));\nexport { PlaneDragGizmo };\n//# sourceMappingURL=planeDragGizmo.js.map","import { __extends } from \"tslib\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { AxisDragGizmo } from \"./axisDragGizmo.js\";\nimport { PlaneDragGizmo } from \"./planeDragGizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\n/**\n * Gizmo that enables dragging a mesh along 3 axis\n */\nvar PositionGizmo = /** @class */ (function (_super) {\n    __extends(PositionGizmo, _super);\n    /**\n     * Creates a PositionGizmo\n     * @param gizmoLayer The utility layer the gizmo will be added to\n      @param thickness display gizmo axis thickness\n     * @param gizmoManager\n     */\n    function PositionGizmo(gizmoLayer, thickness, gizmoManager) {\n        if (gizmoLayer === void 0) { gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer; }\n        if (thickness === void 0) { thickness = 1; }\n        var _this = _super.call(this, gizmoLayer) || this;\n        /**\n         * private variables\n         */\n        _this._meshAttached = null;\n        _this._nodeAttached = null;\n        _this._observables = [];\n        /** Node Caching for quick lookup */\n        _this._gizmoAxisCache = new Map();\n        /** Fires an event when any of it's sub gizmos are dragged */\n        _this.onDragStartObservable = new Observable();\n        /** Fires an event when any of it's sub gizmos are released from dragging */\n        _this.onDragEndObservable = new Observable();\n        /**\n         * If set to true, planar drag is enabled\n         */\n        _this._planarGizmoEnabled = false;\n        _this.xGizmo = new AxisDragGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), gizmoLayer, _this, thickness);\n        _this.yGizmo = new AxisDragGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), gizmoLayer, _this, thickness);\n        _this.zGizmo = new AxisDragGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), gizmoLayer, _this, thickness);\n        _this.xPlaneGizmo = new PlaneDragGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), _this.gizmoLayer, _this);\n        _this.yPlaneGizmo = new PlaneDragGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), _this.gizmoLayer, _this);\n        _this.zPlaneGizmo = new PlaneDragGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), _this.gizmoLayer, _this);\n        // Relay drag events\n        [_this.xGizmo, _this.yGizmo, _this.zGizmo, _this.xPlaneGizmo, _this.yPlaneGizmo, _this.zPlaneGizmo].forEach(function (gizmo) {\n            gizmo.dragBehavior.onDragStartObservable.add(function () {\n                _this.onDragStartObservable.notifyObservers({});\n            });\n            gizmo.dragBehavior.onDragEndObservable.add(function () {\n                _this.onDragEndObservable.notifyObservers({});\n            });\n        });\n        _this.attachedMesh = null;\n        if (gizmoManager) {\n            gizmoManager.addToAxisCache(_this._gizmoAxisCache);\n        }\n        else {\n            // Only subscribe to pointer event if gizmoManager isnt\n            Gizmo.GizmoAxisPointerObserver(gizmoLayer, _this._gizmoAxisCache);\n        }\n        return _this;\n    }\n    Object.defineProperty(PositionGizmo.prototype, \"attachedMesh\", {\n        get: function () {\n            return this._meshAttached;\n        },\n        set: function (mesh) {\n            this._meshAttached = mesh;\n            this._nodeAttached = mesh;\n            [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n                if (gizmo.isEnabled) {\n                    gizmo.attachedMesh = mesh;\n                }\n                else {\n                    gizmo.attachedMesh = null;\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PositionGizmo.prototype, \"attachedNode\", {\n        get: function () {\n            return this._nodeAttached;\n        },\n        set: function (node) {\n            this._meshAttached = null;\n            this._nodeAttached = node;\n            [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n                if (gizmo.isEnabled) {\n                    gizmo.attachedNode = node;\n                }\n                else {\n                    gizmo.attachedNode = null;\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PositionGizmo.prototype, \"isHovered\", {\n        /**\n         * True when the mouse pointer is hovering a gizmo mesh\n         */\n        get: function () {\n            var hovered = false;\n            [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n                hovered = hovered || gizmo.isHovered;\n            });\n            return hovered;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PositionGizmo.prototype, \"planarGizmoEnabled\", {\n        get: function () {\n            return this._planarGizmoEnabled;\n        },\n        /**\n         * If the planar drag gizmo is enabled\n         * setting this will enable/disable XY, XZ and YZ planes regardless of individual gizmo settings.\n         */\n        set: function (value) {\n            var _this = this;\n            this._planarGizmoEnabled = value;\n            [this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n                if (gizmo) {\n                    gizmo.isEnabled = value;\n                    if (value) {\n                        if (gizmo.attachedMesh) {\n                            gizmo.attachedMesh = _this.attachedMesh;\n                        }\n                        else {\n                            gizmo.attachedNode = _this.attachedNode;\n                        }\n                    }\n                }\n            }, this);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PositionGizmo.prototype, \"updateGizmoRotationToMatchAttachedMesh\", {\n        get: function () {\n            return this._updateGizmoRotationToMatchAttachedMesh;\n        },\n        set: function (value) {\n            this._updateGizmoRotationToMatchAttachedMesh = value;\n            [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n                if (gizmo) {\n                    gizmo.updateGizmoRotationToMatchAttachedMesh = value;\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PositionGizmo.prototype, \"snapDistance\", {\n        get: function () {\n            return this._snapDistance;\n        },\n        /**\n         * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\n         */\n        set: function (value) {\n            this._snapDistance = value;\n            [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n                if (gizmo) {\n                    gizmo.snapDistance = value;\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PositionGizmo.prototype, \"scaleRatio\", {\n        get: function () {\n            return this._scaleRatio;\n        },\n        /**\n         * Ratio for the scale of the gizmo (Default: 1)\n         */\n        set: function (value) {\n            this._scaleRatio = value;\n            [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n                if (gizmo) {\n                    gizmo.scaleRatio = value;\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Builds Gizmo Axis Cache to enable features such as hover state preservation and graying out other axis during manipulation\n     * @param mesh Axis gizmo mesh\n     * @param cache Gizmo axis definition used for reactive gizmo UI\n     */\n    PositionGizmo.prototype.addToAxisCache = function (mesh, cache) {\n        this._gizmoAxisCache.set(mesh, cache);\n    };\n    /**\n     * Disposes of the gizmo\n     */\n    PositionGizmo.prototype.dispose = function () {\n        var _this = this;\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n            if (gizmo) {\n                gizmo.dispose();\n            }\n        });\n        this._observables.forEach(function (obs) {\n            _this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(obs);\n        });\n        this.onDragStartObservable.clear();\n        this.onDragEndObservable.clear();\n    };\n    /**\n     * CustomMeshes are not supported by this gizmo\n     */\n    PositionGizmo.prototype.setCustomMesh = function () {\n        Logger.Error(\"Custom meshes are not supported on this gizmo, please set the custom meshes on the gizmos contained within this one (gizmo.xGizmo, gizmo.yGizmo, gizmo.zGizmo,gizmo.xPlaneGizmo, gizmo.yPlaneGizmo, gizmo.zPlaneGizmo)\");\n    };\n    return PositionGizmo;\n}(Gizmo));\nexport { PositionGizmo };\n//# sourceMappingURL=positionGizmo.js.map","import { __extends } from \"tslib\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { CreatePolyhedron } from \"../Meshes/Builders/polyhedronBuilder.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { AxisScaleGizmo } from \"./axisScaleGizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\n/**\n * Gizmo that enables scaling a mesh along 3 axis\n */\nvar ScaleGizmo = /** @class */ (function (_super) {\n    __extends(ScaleGizmo, _super);\n    /**\n     * Creates a ScaleGizmo\n     * @param gizmoLayer The utility layer the gizmo will be added to\n     * @param thickness display gizmo axis thickness\n     * @param gizmoManager\n     */\n    function ScaleGizmo(gizmoLayer, thickness, gizmoManager) {\n        if (gizmoLayer === void 0) { gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer; }\n        if (thickness === void 0) { thickness = 1; }\n        var _this = _super.call(this, gizmoLayer) || this;\n        _this._meshAttached = null;\n        _this._nodeAttached = null;\n        _this._sensitivity = 1;\n        _this._observables = [];\n        /** Node Caching for quick lookup */\n        _this._gizmoAxisCache = new Map();\n        /** Fires an event when any of it's sub gizmos are dragged */\n        _this.onDragStartObservable = new Observable();\n        /** Fires an event when any of it's sub gizmos are released from dragging */\n        _this.onDragEndObservable = new Observable();\n        _this.uniformScaleGizmo = _this._createUniformScaleMesh();\n        _this.xGizmo = new AxisScaleGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), gizmoLayer, _this, thickness);\n        _this.yGizmo = new AxisScaleGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), gizmoLayer, _this, thickness);\n        _this.zGizmo = new AxisScaleGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), gizmoLayer, _this, thickness);\n        // Relay drag events\n        [_this.xGizmo, _this.yGizmo, _this.zGizmo, _this.uniformScaleGizmo].forEach(function (gizmo) {\n            gizmo.dragBehavior.onDragStartObservable.add(function () {\n                _this.onDragStartObservable.notifyObservers({});\n            });\n            gizmo.dragBehavior.onDragEndObservable.add(function () {\n                _this.onDragEndObservable.notifyObservers({});\n            });\n        });\n        _this.attachedMesh = null;\n        _this.attachedNode = null;\n        if (gizmoManager) {\n            gizmoManager.addToAxisCache(_this._gizmoAxisCache);\n        }\n        else {\n            // Only subscribe to pointer event if gizmoManager isnt\n            Gizmo.GizmoAxisPointerObserver(gizmoLayer, _this._gizmoAxisCache);\n        }\n        return _this;\n    }\n    Object.defineProperty(ScaleGizmo.prototype, \"attachedMesh\", {\n        get: function () {\n            return this._meshAttached;\n        },\n        set: function (mesh) {\n            this._meshAttached = mesh;\n            this._nodeAttached = mesh;\n            [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n                if (gizmo.isEnabled) {\n                    gizmo.attachedMesh = mesh;\n                }\n                else {\n                    gizmo.attachedMesh = null;\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ScaleGizmo.prototype, \"attachedNode\", {\n        get: function () {\n            return this._nodeAttached;\n        },\n        set: function (node) {\n            this._meshAttached = null;\n            this._nodeAttached = node;\n            [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n                if (gizmo.isEnabled) {\n                    gizmo.attachedNode = node;\n                }\n                else {\n                    gizmo.attachedNode = null;\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ScaleGizmo.prototype, \"isHovered\", {\n        /**\n         * True when the mouse pointer is hovering a gizmo mesh\n         */\n        get: function () {\n            var hovered = false;\n            [this.xGizmo, this.yGizmo, this.zGizmo].forEach(function (gizmo) {\n                hovered = hovered || gizmo.isHovered;\n            });\n            return hovered;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /** Create Geometry for Gizmo */\n    ScaleGizmo.prototype._createUniformScaleMesh = function () {\n        this._coloredMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\n        this._coloredMaterial.diffuseColor = Color3.Gray();\n        this._hoverMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\n        this._hoverMaterial.diffuseColor = Color3.Yellow();\n        this._disableMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\n        this._disableMaterial.diffuseColor = Color3.Gray();\n        this._disableMaterial.alpha = 0.4;\n        var uniformScaleGizmo = new AxisScaleGizmo(new Vector3(0, 1, 0), Color3.Gray().scale(0.5), this.gizmoLayer, this);\n        uniformScaleGizmo.updateGizmoRotationToMatchAttachedMesh = false;\n        uniformScaleGizmo.uniformScaling = true;\n        this._uniformScalingMesh = CreatePolyhedron(\"uniform\", { type: 1 }, uniformScaleGizmo.gizmoLayer.utilityLayerScene);\n        this._uniformScalingMesh.scaling.scaleInPlace(0.01);\n        this._uniformScalingMesh.visibility = 0;\n        this._octahedron = CreatePolyhedron(\"\", { type: 1 }, uniformScaleGizmo.gizmoLayer.utilityLayerScene);\n        this._octahedron.scaling.scaleInPlace(0.007);\n        this._uniformScalingMesh.addChild(this._octahedron);\n        uniformScaleGizmo.setCustomMesh(this._uniformScalingMesh, true);\n        var light = this.gizmoLayer._getSharedGizmoLight();\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._octahedron);\n        var cache = {\n            gizmoMeshes: [this._octahedron, this._uniformScalingMesh],\n            colliderMeshes: [this._uniformScalingMesh],\n            material: this._coloredMaterial,\n            hoverMaterial: this._hoverMaterial,\n            disableMaterial: this._disableMaterial,\n            active: false,\n            dragBehavior: uniformScaleGizmo.dragBehavior,\n        };\n        this.addToAxisCache(uniformScaleGizmo._rootMesh, cache);\n        return uniformScaleGizmo;\n    };\n    Object.defineProperty(ScaleGizmo.prototype, \"updateGizmoRotationToMatchAttachedMesh\", {\n        get: function () {\n            return this._updateGizmoRotationToMatchAttachedMesh;\n        },\n        set: function (value) {\n            if (!value) {\n                Logger.Warn(\"Setting updateGizmoRotationToMatchAttachedMesh = false on scaling gizmo is not supported.\");\n            }\n            else {\n                this._updateGizmoRotationToMatchAttachedMesh = value;\n                [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n                    if (gizmo) {\n                        gizmo.updateGizmoRotationToMatchAttachedMesh = value;\n                    }\n                });\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ScaleGizmo.prototype, \"snapDistance\", {\n        get: function () {\n            return this._snapDistance;\n        },\n        /**\n         * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\n         */\n        set: function (value) {\n            this._snapDistance = value;\n            [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n                if (gizmo) {\n                    gizmo.snapDistance = value;\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ScaleGizmo.prototype, \"scaleRatio\", {\n        get: function () {\n            return this._scaleRatio;\n        },\n        /**\n         * Ratio for the scale of the gizmo (Default: 1)\n         */\n        set: function (value) {\n            this._scaleRatio = value;\n            [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n                if (gizmo) {\n                    gizmo.scaleRatio = value;\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ScaleGizmo.prototype, \"sensitivity\", {\n        get: function () {\n            return this._sensitivity;\n        },\n        /**\n         * Sensitivity factor for dragging (Default: 1)\n         */\n        set: function (value) {\n            this._sensitivity = value;\n            [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n                if (gizmo) {\n                    gizmo.sensitivity = value;\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Builds Gizmo Axis Cache to enable features such as hover state preservation and graying out other axis during manipulation\n     * @param mesh Axis gizmo mesh\n     * @param cache Gizmo axis definition used for reactive gizmo UI\n     */\n    ScaleGizmo.prototype.addToAxisCache = function (mesh, cache) {\n        this._gizmoAxisCache.set(mesh, cache);\n    };\n    /**\n     * Disposes of the gizmo\n     */\n    ScaleGizmo.prototype.dispose = function () {\n        var _this = this;\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n            if (gizmo) {\n                gizmo.dispose();\n            }\n        });\n        this._observables.forEach(function (obs) {\n            _this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(obs);\n        });\n        this.onDragStartObservable.clear();\n        this.onDragEndObservable.clear();\n        [this._uniformScalingMesh, this._octahedron].forEach(function (msh) {\n            if (msh) {\n                msh.dispose();\n            }\n        });\n        [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach(function (matl) {\n            if (matl) {\n                matl.dispose();\n            }\n        });\n    };\n    return ScaleGizmo;\n}(Gizmo));\nexport { ScaleGizmo };\n//# sourceMappingURL=scaleGizmo.js.map","import { Observable } from \"../Misc/observable.js\";\nimport { PointerEventTypes } from \"../Events/pointerEvents.js\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { SixDofDragBehavior } from \"../Behaviors/Meshes/sixDofDragBehavior.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { RotationGizmo } from \"./rotationGizmo.js\";\nimport { PositionGizmo } from \"./positionGizmo.js\";\nimport { ScaleGizmo } from \"./scaleGizmo.js\";\nimport { BoundingBoxGizmo } from \"./boundingBoxGizmo.js\";\n/**\n * Helps setup gizmo's in the scene to rotate/scale/position nodes\n */\nvar GizmoManager = /** @class */ (function () {\n    /**\n     * Instantiates a gizmo manager\n     * @param _scene the scene to overlay the gizmos on top of\n     * @param thickness display gizmo axis thickness\n     * @param utilityLayer the layer where gizmos are rendered\n     * @param keepDepthUtilityLayer the layer where occluded gizmos are rendered\n     */\n    function GizmoManager(_scene, thickness, utilityLayer, keepDepthUtilityLayer) {\n        if (thickness === void 0) { thickness = 1; }\n        if (utilityLayer === void 0) { utilityLayer = UtilityLayerRenderer.DefaultUtilityLayer; }\n        if (keepDepthUtilityLayer === void 0) { keepDepthUtilityLayer = UtilityLayerRenderer.DefaultKeepDepthUtilityLayer; }\n        this._scene = _scene;\n        /** When true, the gizmo will be detached from the current object when a pointer down occurs with an empty picked mesh */\n        this.clearGizmoOnEmptyPointerEvent = false;\n        /** When true (default), picking to attach a new mesh is enabled. This works in sync with inspector autopicking. */\n        this.enableAutoPicking = true;\n        /** Fires an event when the manager is attached to a mesh */\n        this.onAttachedToMeshObservable = new Observable();\n        /** Fires an event when the manager is attached to a node */\n        this.onAttachedToNodeObservable = new Observable();\n        this._gizmosEnabled = { positionGizmo: false, rotationGizmo: false, scaleGizmo: false, boundingBoxGizmo: false };\n        this._pointerObservers = [];\n        this._attachedMesh = null;\n        this._attachedNode = null;\n        this._boundingBoxColor = Color3.FromHexString(\"#0984e3\");\n        this._thickness = 1;\n        this._scaleRatio = 1;\n        /** Node Caching for quick lookup */\n        this._gizmoAxisCache = new Map();\n        /**\n         * When bounding box gizmo is enabled, this can be used to track drag/end events\n         */\n        this.boundingBoxDragBehavior = new SixDofDragBehavior();\n        /**\n         * Array of meshes which will have the gizmo attached when a pointer selected them. If null, all meshes are attachable. (Default: null)\n         */\n        this.attachableMeshes = null;\n        /**\n         * Array of nodes which will have the gizmo attached when a pointer selected them. If null, all nodes are attachable. (Default: null)\n         */\n        this.attachableNodes = null;\n        /**\n         * If pointer events should perform attaching/detaching a gizmo, if false this can be done manually via attachToMesh/attachToNode. (Default: true)\n         */\n        this.usePointerToAttachGizmos = true;\n        this._defaultUtilityLayer = utilityLayer;\n        this._defaultKeepDepthUtilityLayer = keepDepthUtilityLayer;\n        this._defaultKeepDepthUtilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\n        this._thickness = thickness;\n        this.gizmos = { positionGizmo: null, rotationGizmo: null, scaleGizmo: null, boundingBoxGizmo: null };\n        var attachToMeshPointerObserver = this._attachToMeshPointerObserver(_scene);\n        var gizmoAxisPointerObserver = Gizmo.GizmoAxisPointerObserver(this._defaultUtilityLayer, this._gizmoAxisCache);\n        this._pointerObservers = [attachToMeshPointerObserver, gizmoAxisPointerObserver];\n    }\n    Object.defineProperty(GizmoManager.prototype, \"keepDepthUtilityLayer\", {\n        /**\n         * Utility layer that the bounding box gizmo belongs to\n         */\n        get: function () {\n            return this._defaultKeepDepthUtilityLayer;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GizmoManager.prototype, \"utilityLayer\", {\n        /**\n         * Utility layer that all gizmos besides bounding box belong to\n         */\n        get: function () {\n            return this._defaultUtilityLayer;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GizmoManager.prototype, \"isHovered\", {\n        /**\n         * True when the mouse pointer is hovering a gizmo mesh\n         */\n        get: function () {\n            var hovered = false;\n            for (var key in this.gizmos) {\n                var gizmo = this.gizmos[key];\n                if (gizmo && gizmo.isHovered) {\n                    hovered = true;\n                    break;\n                }\n            }\n            return hovered;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GizmoManager.prototype, \"scaleRatio\", {\n        get: function () {\n            return this._scaleRatio;\n        },\n        /**\n         * Ratio for the scale of the gizmo (Default: 1)\n         */\n        set: function (value) {\n            this._scaleRatio = value;\n            [this.gizmos.positionGizmo, this.gizmos.rotationGizmo, this.gizmos.scaleGizmo].forEach(function (gizmo) {\n                if (gizmo) {\n                    gizmo.scaleRatio = value;\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Subscribes to pointer down events, for attaching and detaching mesh\n     * @param scene The scene layer the observer will be added to\n     */\n    GizmoManager.prototype._attachToMeshPointerObserver = function (scene) {\n        var _this = this;\n        // Instantiate/dispose gizmos based on pointer actions\n        var pointerObserver = scene.onPointerObservable.add(function (pointerInfo) {\n            if (!_this.usePointerToAttachGizmos) {\n                return;\n            }\n            if (pointerInfo.type == PointerEventTypes.POINTERDOWN) {\n                if (pointerInfo.pickInfo && pointerInfo.pickInfo.pickedMesh) {\n                    if (_this.enableAutoPicking) {\n                        var node_1 = pointerInfo.pickInfo.pickedMesh;\n                        if (_this.attachableMeshes == null) {\n                            // Attach to the most parent node\n                            while (node_1 && node_1.parent != null) {\n                                node_1 = node_1.parent;\n                            }\n                        }\n                        else {\n                            // Attach to the parent node that is an attachableMesh\n                            var found_1 = false;\n                            _this.attachableMeshes.forEach(function (mesh) {\n                                if (node_1 && (node_1 == mesh || node_1.isDescendantOf(mesh))) {\n                                    node_1 = mesh;\n                                    found_1 = true;\n                                }\n                            });\n                            if (!found_1) {\n                                node_1 = null;\n                            }\n                        }\n                        if (node_1 instanceof AbstractMesh) {\n                            if (_this._attachedMesh != node_1) {\n                                _this.attachToMesh(node_1);\n                            }\n                        }\n                        else {\n                            if (_this.clearGizmoOnEmptyPointerEvent) {\n                                _this.attachToMesh(null);\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (_this.clearGizmoOnEmptyPointerEvent) {\n                        _this.attachToMesh(null);\n                    }\n                }\n            }\n        });\n        return pointerObserver;\n    };\n    /**\n     * Attaches a set of gizmos to the specified mesh\n     * @param mesh The mesh the gizmo's should be attached to\n     */\n    GizmoManager.prototype.attachToMesh = function (mesh) {\n        if (this._attachedMesh) {\n            this._attachedMesh.removeBehavior(this.boundingBoxDragBehavior);\n        }\n        if (this._attachedNode) {\n            this._attachedNode.removeBehavior(this.boundingBoxDragBehavior);\n        }\n        this._attachedMesh = mesh;\n        this._attachedNode = null;\n        for (var key in this.gizmos) {\n            var gizmo = this.gizmos[key];\n            if (gizmo && this._gizmosEnabled[key]) {\n                gizmo.attachedMesh = mesh;\n            }\n        }\n        if (this.boundingBoxGizmoEnabled && this._attachedMesh) {\n            this._attachedMesh.addBehavior(this.boundingBoxDragBehavior);\n        }\n        this.onAttachedToMeshObservable.notifyObservers(mesh);\n    };\n    /**\n     * Attaches a set of gizmos to the specified node\n     * @param node The node the gizmo's should be attached to\n     */\n    GizmoManager.prototype.attachToNode = function (node) {\n        if (this._attachedMesh) {\n            this._attachedMesh.removeBehavior(this.boundingBoxDragBehavior);\n        }\n        if (this._attachedNode) {\n            this._attachedNode.removeBehavior(this.boundingBoxDragBehavior);\n        }\n        this._attachedMesh = null;\n        this._attachedNode = node;\n        for (var key in this.gizmos) {\n            var gizmo = this.gizmos[key];\n            if (gizmo && this._gizmosEnabled[key]) {\n                gizmo.attachedNode = node;\n            }\n        }\n        if (this.boundingBoxGizmoEnabled && this._attachedNode) {\n            this._attachedNode.addBehavior(this.boundingBoxDragBehavior);\n        }\n        this.onAttachedToNodeObservable.notifyObservers(node);\n    };\n    Object.defineProperty(GizmoManager.prototype, \"positionGizmoEnabled\", {\n        get: function () {\n            return this._gizmosEnabled.positionGizmo;\n        },\n        /**\n         * If the position gizmo is enabled\n         */\n        set: function (value) {\n            if (value) {\n                if (!this.gizmos.positionGizmo) {\n                    this.gizmos.positionGizmo = new PositionGizmo(this._defaultUtilityLayer, this._thickness, this);\n                }\n                if (this._attachedNode) {\n                    this.gizmos.positionGizmo.attachedNode = this._attachedNode;\n                }\n                else {\n                    this.gizmos.positionGizmo.attachedMesh = this._attachedMesh;\n                }\n            }\n            else if (this.gizmos.positionGizmo) {\n                this.gizmos.positionGizmo.attachedNode = null;\n            }\n            this._gizmosEnabled.positionGizmo = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GizmoManager.prototype, \"rotationGizmoEnabled\", {\n        get: function () {\n            return this._gizmosEnabled.rotationGizmo;\n        },\n        /**\n         * If the rotation gizmo is enabled\n         */\n        set: function (value) {\n            if (value) {\n                if (!this.gizmos.rotationGizmo) {\n                    this.gizmos.rotationGizmo = new RotationGizmo(this._defaultUtilityLayer, 32, false, this._thickness, this);\n                }\n                if (this._attachedNode) {\n                    this.gizmos.rotationGizmo.attachedNode = this._attachedNode;\n                }\n                else {\n                    this.gizmos.rotationGizmo.attachedMesh = this._attachedMesh;\n                }\n            }\n            else if (this.gizmos.rotationGizmo) {\n                this.gizmos.rotationGizmo.attachedNode = null;\n            }\n            this._gizmosEnabled.rotationGizmo = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GizmoManager.prototype, \"scaleGizmoEnabled\", {\n        get: function () {\n            return this._gizmosEnabled.scaleGizmo;\n        },\n        /**\n         * If the scale gizmo is enabled\n         */\n        set: function (value) {\n            if (value) {\n                this.gizmos.scaleGizmo = this.gizmos.scaleGizmo || new ScaleGizmo(this._defaultUtilityLayer, this._thickness, this);\n                if (this._attachedNode) {\n                    this.gizmos.scaleGizmo.attachedNode = this._attachedNode;\n                }\n                else {\n                    this.gizmos.scaleGizmo.attachedMesh = this._attachedMesh;\n                }\n            }\n            else if (this.gizmos.scaleGizmo) {\n                this.gizmos.scaleGizmo.attachedNode = null;\n            }\n            this._gizmosEnabled.scaleGizmo = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GizmoManager.prototype, \"boundingBoxGizmoEnabled\", {\n        get: function () {\n            return this._gizmosEnabled.boundingBoxGizmo;\n        },\n        /**\n         * If the boundingBox gizmo is enabled\n         */\n        set: function (value) {\n            if (value) {\n                this.gizmos.boundingBoxGizmo = this.gizmos.boundingBoxGizmo || new BoundingBoxGizmo(this._boundingBoxColor, this._defaultKeepDepthUtilityLayer);\n                if (this._attachedMesh) {\n                    this.gizmos.boundingBoxGizmo.attachedMesh = this._attachedMesh;\n                }\n                else {\n                    this.gizmos.boundingBoxGizmo.attachedNode = this._attachedNode;\n                }\n                if (this._attachedMesh) {\n                    this._attachedMesh.removeBehavior(this.boundingBoxDragBehavior);\n                    this._attachedMesh.addBehavior(this.boundingBoxDragBehavior);\n                }\n                else if (this._attachedNode) {\n                    this._attachedNode.removeBehavior(this.boundingBoxDragBehavior);\n                    this._attachedNode.addBehavior(this.boundingBoxDragBehavior);\n                }\n            }\n            else if (this.gizmos.boundingBoxGizmo) {\n                if (this._attachedMesh) {\n                    this._attachedMesh.removeBehavior(this.boundingBoxDragBehavior);\n                }\n                else if (this._attachedNode) {\n                    this._attachedNode.removeBehavior(this.boundingBoxDragBehavior);\n                }\n                this.gizmos.boundingBoxGizmo.attachedNode = null;\n            }\n            this._gizmosEnabled.boundingBoxGizmo = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Builds Gizmo Axis Cache to enable features such as hover state preservation and graying out other axis during manipulation\n     * @param gizmoAxisCache Gizmo axis definition used for reactive gizmo UI\n     */\n    GizmoManager.prototype.addToAxisCache = function (gizmoAxisCache) {\n        var _this = this;\n        if (gizmoAxisCache.size > 0) {\n            gizmoAxisCache.forEach(function (v, k) {\n                _this._gizmoAxisCache.set(k, v);\n            });\n        }\n    };\n    /**\n     * Disposes of the gizmo manager\n     */\n    GizmoManager.prototype.dispose = function () {\n        var _this = this;\n        var _a, _b;\n        this._pointerObservers.forEach(function (observer) {\n            _this._scene.onPointerObservable.remove(observer);\n        });\n        for (var key in this.gizmos) {\n            var gizmo = this.gizmos[key];\n            if (gizmo) {\n                gizmo.dispose();\n            }\n        }\n        if (this._defaultKeepDepthUtilityLayer !== UtilityLayerRenderer._DefaultKeepDepthUtilityLayer) {\n            (_a = this._defaultKeepDepthUtilityLayer) === null || _a === void 0 ? void 0 : _a.dispose();\n        }\n        if (this._defaultUtilityLayer !== UtilityLayerRenderer._DefaultUtilityLayer) {\n            (_b = this._defaultUtilityLayer) === null || _b === void 0 ? void 0 : _b.dispose();\n        }\n        this.boundingBoxDragBehavior.detach();\n        this.onAttachedToMeshObservable.clear();\n    };\n    return GizmoManager;\n}());\nexport { GizmoManager };\n//# sourceMappingURL=gizmoManager.js.map","import { __extends } from \"tslib\";\nimport { Vector3, Quaternion } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { HemisphericLight } from \"../Lights/hemisphericLight.js\";\nimport { DirectionalLight } from \"../Lights/directionalLight.js\";\nimport { CreateSphere } from \"../Meshes/Builders/sphereBuilder.js\";\nimport { CreateHemisphere } from \"../Meshes/Builders/hemisphereBuilder.js\";\nimport { SpotLight } from \"../Lights/spotLight.js\";\nimport { TransformNode } from \"../Meshes/transformNode.js\";\nimport { PointerEventTypes } from \"../Events/pointerEvents.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { CreateCylinder } from \"../Meshes/Builders/cylinderBuilder.js\";\n/**\n * Gizmo that enables viewing a light\n */\nvar LightGizmo = /** @class */ (function (_super) {\n    __extends(LightGizmo, _super);\n    /**\n     * Creates a LightGizmo\n     * @param gizmoLayer The utility layer the gizmo will be added to\n     */\n    function LightGizmo(gizmoLayer) {\n        if (gizmoLayer === void 0) { gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer; }\n        var _this = _super.call(this, gizmoLayer) || this;\n        _this._cachedPosition = new Vector3();\n        _this._cachedForward = new Vector3(0, 0, 1);\n        _this._pointerObserver = null;\n        /**\n         * Event that fires each time the gizmo is clicked\n         */\n        _this.onClickedObservable = new Observable();\n        _this._light = null;\n        _this.attachedMesh = new AbstractMesh(\"\", _this.gizmoLayer.utilityLayerScene);\n        _this._attachedMeshParent = new TransformNode(\"parent\", _this.gizmoLayer.utilityLayerScene);\n        _this.attachedMesh.parent = _this._attachedMeshParent;\n        _this._material = new StandardMaterial(\"light\", _this.gizmoLayer.utilityLayerScene);\n        _this._material.diffuseColor = new Color3(0.5, 0.5, 0.5);\n        _this._material.specularColor = new Color3(0.1, 0.1, 0.1);\n        _this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(function (pointerInfo) {\n            if (!_this._light) {\n                return;\n            }\n            _this._isHovered = !!(pointerInfo.pickInfo && _this._rootMesh.getChildMeshes().indexOf(pointerInfo.pickInfo.pickedMesh) != -1);\n            if (_this._isHovered && pointerInfo.event.button === 0) {\n                _this.onClickedObservable.notifyObservers(_this._light);\n            }\n        }, PointerEventTypes.POINTERDOWN);\n        return _this;\n    }\n    Object.defineProperty(LightGizmo.prototype, \"attachedNode\", {\n        /**\n         * Override attachedNode because lightgizmo only support attached mesh\n         * It will return the attached mesh (if any) and setting an attached node will log\n         * a warning\n         */\n        get: function () {\n            return this.attachedMesh;\n        },\n        set: function (value) {\n            console.warn(\"Nodes cannot be attached to LightGizmo. Attach to a mesh instead.\");\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LightGizmo.prototype, \"light\", {\n        get: function () {\n            return this._light;\n        },\n        /**\n         * The light that the gizmo is attached to\n         */\n        set: function (light) {\n            var _this = this;\n            this._light = light;\n            if (light) {\n                // Create the mesh for the given light type\n                if (this._lightMesh) {\n                    this._lightMesh.dispose();\n                }\n                if (light instanceof HemisphericLight) {\n                    this._lightMesh = LightGizmo._CreateHemisphericLightMesh(this.gizmoLayer.utilityLayerScene);\n                }\n                else if (light instanceof DirectionalLight) {\n                    this._lightMesh = LightGizmo._CreateDirectionalLightMesh(this.gizmoLayer.utilityLayerScene);\n                }\n                else if (light instanceof SpotLight) {\n                    this._lightMesh = LightGizmo._CreateSpotLightMesh(this.gizmoLayer.utilityLayerScene);\n                }\n                else {\n                    this._lightMesh = LightGizmo._CreatePointLightMesh(this.gizmoLayer.utilityLayerScene);\n                }\n                this._lightMesh.getChildMeshes(false).forEach(function (m) {\n                    m.material = _this._material;\n                });\n                this._lightMesh.parent = this._rootMesh;\n                // Add lighting to the light gizmo\n                var gizmoLight = this.gizmoLayer._getSharedGizmoLight();\n                gizmoLight.includedOnlyMeshes = gizmoLight.includedOnlyMeshes.concat(this._lightMesh.getChildMeshes(false));\n                this._lightMesh.rotationQuaternion = new Quaternion();\n                if (!this.attachedMesh.reservedDataStore) {\n                    this.attachedMesh.reservedDataStore = {};\n                }\n                this.attachedMesh.reservedDataStore.lightGizmo = this;\n                if (light.parent) {\n                    this._attachedMeshParent.freezeWorldMatrix(light.parent.getWorldMatrix());\n                }\n                // Get update position and direction if the light has it\n                if (light.position) {\n                    this.attachedMesh.position.copyFrom(light.position);\n                    this.attachedMesh.computeWorldMatrix(true);\n                    this._cachedPosition.copyFrom(this.attachedMesh.position);\n                }\n                if (light.direction) {\n                    this.attachedMesh.setDirection(light.direction);\n                    this.attachedMesh.computeWorldMatrix(true);\n                    this._cachedForward.copyFrom(this.attachedMesh.forward);\n                }\n                this._update();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LightGizmo.prototype, \"material\", {\n        /**\n         * Gets the material used to render the light gizmo\n         */\n        get: function () {\n            return this._material;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @hidden\n     * Updates the gizmo to match the attached mesh's position/rotation\n     */\n    LightGizmo.prototype._update = function () {\n        _super.prototype._update.call(this);\n        if (!this._light) {\n            return;\n        }\n        if (this._light.parent) {\n            this._attachedMeshParent.freezeWorldMatrix(this._light.parent.getWorldMatrix());\n        }\n        // For light position and direction, a dirty flag is set to true in the setter\n        // It means setting values individually or copying values will not call setter and\n        // dirty flag will not be set to true. Hence creating a new Vector3.\n        if (this._light.position) {\n            // If the gizmo is moved update the light otherwise update the gizmo to match the light\n            if (!this.attachedMesh.position.equals(this._cachedPosition)) {\n                // update light to match gizmo\n                var position = this.attachedMesh.position;\n                this._light.position = new Vector3(position.x, position.y, position.z);\n                this._cachedPosition.copyFrom(this.attachedMesh.position);\n            }\n            else {\n                // update gizmo to match light\n                this.attachedMesh.position.copyFrom(this._light.position);\n                this.attachedMesh.computeWorldMatrix(true);\n                this._cachedPosition.copyFrom(this.attachedMesh.position);\n            }\n        }\n        if (this._light.direction) {\n            // If the gizmo is moved update the light otherwise update the gizmo to match the light\n            if (Vector3.DistanceSquared(this.attachedMesh.forward, this._cachedForward) > 0.0001) {\n                // update light to match gizmo\n                var direction = this.attachedMesh.forward;\n                this._light.direction = new Vector3(direction.x, direction.y, direction.z);\n                this._cachedForward.copyFrom(this.attachedMesh.forward);\n            }\n            else if (Vector3.DistanceSquared(this.attachedMesh.forward, this._light.direction) > 0.0001) {\n                // update gizmo to match light\n                this.attachedMesh.setDirection(this._light.direction);\n                this.attachedMesh.computeWorldMatrix(true);\n                this._cachedForward.copyFrom(this.attachedMesh.forward);\n            }\n        }\n    };\n    /**\n     * Disposes of the light gizmo\n     */\n    LightGizmo.prototype.dispose = function () {\n        this.onClickedObservable.clear();\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n        this._material.dispose();\n        _super.prototype.dispose.call(this);\n        this._attachedMeshParent.dispose();\n    };\n    LightGizmo._CreateHemisphericLightMesh = function (scene) {\n        var root = new Mesh(\"hemisphereLight\", scene);\n        var hemisphere = CreateHemisphere(root.name, { segments: 10, diameter: 1 }, scene);\n        hemisphere.position.z = -0.15;\n        hemisphere.rotation.x = Math.PI / 2;\n        hemisphere.parent = root;\n        var lines = this._CreateLightLines(3, scene);\n        lines.parent = root;\n        root.scaling.scaleInPlace(LightGizmo._Scale);\n        root.rotation.x = Math.PI / 2;\n        return root;\n    };\n    LightGizmo._CreatePointLightMesh = function (scene) {\n        var root = new Mesh(\"pointLight\", scene);\n        var sphere = CreateSphere(root.name, { segments: 10, diameter: 1 }, scene);\n        sphere.rotation.x = Math.PI / 2;\n        sphere.parent = root;\n        var lines = this._CreateLightLines(5, scene);\n        lines.parent = root;\n        root.scaling.scaleInPlace(LightGizmo._Scale);\n        root.rotation.x = Math.PI / 2;\n        return root;\n    };\n    LightGizmo._CreateSpotLightMesh = function (scene) {\n        var root = new Mesh(\"spotLight\", scene);\n        var sphere = CreateSphere(root.name, { segments: 10, diameter: 1 }, scene);\n        sphere.parent = root;\n        var hemisphere = CreateHemisphere(root.name, { segments: 10, diameter: 2 }, scene);\n        hemisphere.parent = root;\n        hemisphere.rotation.x = -Math.PI / 2;\n        var lines = this._CreateLightLines(2, scene);\n        lines.parent = root;\n        root.scaling.scaleInPlace(LightGizmo._Scale);\n        root.rotation.x = Math.PI / 2;\n        return root;\n    };\n    LightGizmo._CreateDirectionalLightMesh = function (scene) {\n        var root = new Mesh(\"directionalLight\", scene);\n        var mesh = new Mesh(root.name, scene);\n        mesh.parent = root;\n        var sphere = CreateSphere(root.name, { diameter: 1.2, segments: 10 }, scene);\n        sphere.parent = mesh;\n        var line = CreateCylinder(root.name, {\n            updatable: false,\n            height: 6,\n            diameterTop: 0.3,\n            diameterBottom: 0.3,\n            tessellation: 6,\n            subdivisions: 1,\n        }, scene);\n        line.parent = mesh;\n        var left = line.clone(root.name);\n        left.scaling.y = 0.5;\n        left.position.x += 1.25;\n        var right = line.clone(root.name);\n        right.scaling.y = 0.5;\n        right.position.x += -1.25;\n        var arrowHead = CreateCylinder(root.name, {\n            updatable: false,\n            height: 1,\n            diameterTop: 0,\n            diameterBottom: 0.6,\n            tessellation: 6,\n            subdivisions: 1,\n        }, scene);\n        arrowHead.position.y += 3;\n        arrowHead.parent = mesh;\n        left = arrowHead.clone(root.name);\n        left.position.y = 1.5;\n        left.position.x += 1.25;\n        right = arrowHead.clone(root.name);\n        right.position.y = 1.5;\n        right.position.x += -1.25;\n        mesh.scaling.scaleInPlace(LightGizmo._Scale);\n        mesh.rotation.z = Math.PI / 2;\n        mesh.rotation.y = Math.PI / 2;\n        return root;\n    };\n    // Static helper methods\n    LightGizmo._Scale = 0.007;\n    /**\n     * Creates the lines for a light mesh\n     * @param levels\n     * @param scene\n     */\n    LightGizmo._CreateLightLines = function (levels, scene) {\n        var distFromSphere = 1.2;\n        var root = new Mesh(\"root\", scene);\n        root.rotation.x = Math.PI / 2;\n        // Create the top line, this will be cloned for all other lines\n        var linePivot = new Mesh(\"linePivot\", scene);\n        linePivot.parent = root;\n        var line = CreateCylinder(\"line\", {\n            updatable: false,\n            height: 2,\n            diameterTop: 0.2,\n            diameterBottom: 0.3,\n            tessellation: 6,\n            subdivisions: 1,\n        }, scene);\n        line.position.y = line.scaling.y / 2 + distFromSphere;\n        line.parent = linePivot;\n        if (levels < 2) {\n            return linePivot;\n        }\n        for (var i = 0; i < 4; i++) {\n            var l_1 = linePivot.clone(\"lineParentClone\");\n            l_1.rotation.z = Math.PI / 4;\n            l_1.rotation.y = Math.PI / 2 + (Math.PI / 2) * i;\n            l_1.getChildMeshes()[0].scaling.y = 0.5;\n            l_1.getChildMeshes()[0].scaling.x = l_1.getChildMeshes()[0].scaling.z = 0.8;\n            l_1.getChildMeshes()[0].position.y = l_1.getChildMeshes()[0].scaling.y / 2 + distFromSphere;\n        }\n        if (levels < 3) {\n            return root;\n        }\n        for (var i = 0; i < 4; i++) {\n            var l_2 = linePivot.clone(\"linePivotClone\");\n            l_2.rotation.z = Math.PI / 2;\n            l_2.rotation.y = (Math.PI / 2) * i;\n        }\n        if (levels < 4) {\n            return root;\n        }\n        for (var i = 0; i < 4; i++) {\n            var l_3 = linePivot.clone(\"linePivotClone\");\n            l_3.rotation.z = Math.PI + Math.PI / 4;\n            l_3.rotation.y = Math.PI / 2 + (Math.PI / 2) * i;\n            l_3.getChildMeshes()[0].scaling.y = 0.5;\n            l_3.getChildMeshes()[0].scaling.x = l_3.getChildMeshes()[0].scaling.z = 0.8;\n            l_3.getChildMeshes()[0].position.y = l_3.getChildMeshes()[0].scaling.y / 2 + distFromSphere;\n        }\n        if (levels < 5) {\n            return root;\n        }\n        var l = linePivot.clone(\"linePivotClone\");\n        l.rotation.z = Math.PI;\n        return root;\n    };\n    return LightGizmo;\n}(Gizmo));\nexport { LightGizmo };\n//# sourceMappingURL=lightGizmo.js.map","import { __extends } from \"tslib\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder.js\";\nimport { CreateCylinder } from \"../Meshes/Builders/cylinderBuilder.js\";\nimport { Matrix } from \"../Maths/math.js\";\nimport { CreateLines } from \"../Meshes/Builders/linesBuilder.js\";\nimport { PointerEventTypes } from \"../Events/pointerEvents.js\";\nimport { Observable } from \"../Misc/observable.js\";\n/**\n * Gizmo that enables viewing a camera\n */\nvar CameraGizmo = /** @class */ (function (_super) {\n    __extends(CameraGizmo, _super);\n    /**\n     * Creates a CameraGizmo\n     * @param gizmoLayer The utility layer the gizmo will be added to\n     */\n    function CameraGizmo(gizmoLayer) {\n        if (gizmoLayer === void 0) { gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer; }\n        var _this = _super.call(this, gizmoLayer) || this;\n        _this._pointerObserver = null;\n        /**\n         * Event that fires each time the gizmo is clicked\n         */\n        _this.onClickedObservable = new Observable();\n        _this._camera = null;\n        _this._invProjection = new Matrix();\n        _this._material = new StandardMaterial(\"cameraGizmoMaterial\", _this.gizmoLayer.utilityLayerScene);\n        _this._material.diffuseColor = new Color3(0.5, 0.5, 0.5);\n        _this._material.specularColor = new Color3(0.1, 0.1, 0.1);\n        _this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(function (pointerInfo) {\n            if (!_this._camera) {\n                return;\n            }\n            _this._isHovered = !!(pointerInfo.pickInfo && _this._rootMesh.getChildMeshes().indexOf(pointerInfo.pickInfo.pickedMesh) != -1);\n            if (_this._isHovered && pointerInfo.event.button === 0) {\n                _this.onClickedObservable.notifyObservers(_this._camera);\n            }\n        }, PointerEventTypes.POINTERDOWN);\n        return _this;\n    }\n    Object.defineProperty(CameraGizmo.prototype, \"displayFrustum\", {\n        /** Gets or sets a boolean indicating if frustum lines must be rendered (true by default)) */\n        get: function () {\n            return this._cameraLinesMesh.isEnabled();\n        },\n        set: function (value) {\n            this._cameraLinesMesh.setEnabled(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CameraGizmo.prototype, \"camera\", {\n        get: function () {\n            return this._camera;\n        },\n        /**\n         * The camera that the gizmo is attached to\n         */\n        set: function (camera) {\n            var _this = this;\n            this._camera = camera;\n            this.attachedNode = camera;\n            if (camera) {\n                // Create the mesh for the given camera\n                if (this._cameraMesh) {\n                    this._cameraMesh.dispose();\n                }\n                if (this._cameraLinesMesh) {\n                    this._cameraLinesMesh.dispose();\n                }\n                this._cameraMesh = CameraGizmo._CreateCameraMesh(this.gizmoLayer.utilityLayerScene);\n                this._cameraLinesMesh = CameraGizmo._CreateCameraFrustum(this.gizmoLayer.utilityLayerScene);\n                this._cameraMesh.getChildMeshes(false).forEach(function (m) {\n                    m.material = _this._material;\n                });\n                this._cameraMesh.parent = this._rootMesh;\n                this._cameraLinesMesh.parent = this._rootMesh;\n                if (this.gizmoLayer.utilityLayerScene.activeCamera && this.gizmoLayer.utilityLayerScene.activeCamera.maxZ < camera.maxZ * 1.5) {\n                    this.gizmoLayer.utilityLayerScene.activeCamera.maxZ = camera.maxZ * 1.5;\n                }\n                if (!this.attachedNode.reservedDataStore) {\n                    this.attachedNode.reservedDataStore = {};\n                }\n                this.attachedNode.reservedDataStore.cameraGizmo = this;\n                // Add lighting to the camera gizmo\n                var gizmoLight = this.gizmoLayer._getSharedGizmoLight();\n                gizmoLight.includedOnlyMeshes = gizmoLight.includedOnlyMeshes.concat(this._cameraMesh.getChildMeshes(false));\n                this._update();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CameraGizmo.prototype, \"material\", {\n        /**\n         * Gets the material used to render the camera gizmo\n         */\n        get: function () {\n            return this._material;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @hidden\n     * Updates the gizmo to match the attached mesh's position/rotation\n     */\n    CameraGizmo.prototype._update = function () {\n        _super.prototype._update.call(this);\n        if (!this._camera) {\n            return;\n        }\n        // frustum matrix\n        this._camera.getProjectionMatrix().invertToRef(this._invProjection);\n        this._cameraLinesMesh.setPivotMatrix(this._invProjection, false);\n        this._cameraLinesMesh.scaling.x = 1 / this._rootMesh.scaling.x;\n        this._cameraLinesMesh.scaling.y = 1 / this._rootMesh.scaling.y;\n        this._cameraLinesMesh.scaling.z = 1 / this._rootMesh.scaling.z;\n        // take care of coordinate system in camera scene to properly display the mesh with the good Y axis orientation in this scene\n        this._cameraMesh.parent = null;\n        this._cameraMesh.rotation.y = Math.PI * 0.5 * (this._camera.getScene().useRightHandedSystem ? 1 : -1);\n        this._cameraMesh.parent = this._rootMesh;\n    };\n    /**\n     * Disposes of the camera gizmo\n     */\n    CameraGizmo.prototype.dispose = function () {\n        this.onClickedObservable.clear();\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n        if (this._cameraMesh) {\n            this._cameraMesh.dispose();\n        }\n        if (this._cameraLinesMesh) {\n            this._cameraLinesMesh.dispose();\n        }\n        this._material.dispose();\n        _super.prototype.dispose.call(this);\n    };\n    CameraGizmo._CreateCameraMesh = function (scene) {\n        var root = new Mesh(\"rootCameraGizmo\", scene);\n        var mesh = new Mesh(root.name, scene);\n        mesh.parent = root;\n        var box = CreateBox(root.name, { width: 1.0, height: 0.8, depth: 0.5 }, scene);\n        box.parent = mesh;\n        var cyl1 = CreateCylinder(root.name, { height: 0.5, diameterTop: 0.8, diameterBottom: 0.8 }, scene);\n        cyl1.parent = mesh;\n        cyl1.position.y = 0.3;\n        cyl1.position.x = -0.6;\n        cyl1.rotation.x = Math.PI * 0.5;\n        var cyl2 = CreateCylinder(root.name, { height: 0.5, diameterTop: 0.6, diameterBottom: 0.6 }, scene);\n        cyl2.parent = mesh;\n        cyl2.position.y = 0.5;\n        cyl2.position.x = 0.4;\n        cyl2.rotation.x = Math.PI * 0.5;\n        var cyl3 = CreateCylinder(root.name, { height: 0.5, diameterTop: 0.5, diameterBottom: 0.5 }, scene);\n        cyl3.parent = mesh;\n        cyl3.position.y = 0.0;\n        cyl3.position.x = 0.6;\n        cyl3.rotation.z = Math.PI * 0.5;\n        root.scaling.scaleInPlace(CameraGizmo._Scale);\n        mesh.position.x = -0.9;\n        return root;\n    };\n    CameraGizmo._CreateCameraFrustum = function (scene) {\n        var root = new Mesh(\"rootCameraGizmo\", scene);\n        var mesh = new Mesh(root.name, scene);\n        mesh.parent = root;\n        for (var y = 0; y < 4; y += 2) {\n            for (var x = 0; x < 4; x += 2) {\n                var line = CreateLines(\"lines\", { points: [new Vector3(-1 + x, -1 + y, -1), new Vector3(-1 + x, -1 + y, 1)] }, scene);\n                line.parent = mesh;\n                line.alwaysSelectAsActiveMesh = true;\n                line.isPickable = false;\n                line = CreateLines(\"lines\", { points: [new Vector3(-1, -1 + x, -1 + y), new Vector3(1, -1 + x, -1 + y)] }, scene);\n                line.parent = mesh;\n                line.alwaysSelectAsActiveMesh = true;\n                line.isPickable = false;\n                line = CreateLines(\"lines\", { points: [new Vector3(-1 + x, -1, -1 + y), new Vector3(-1 + x, 1, -1 + y)] }, scene);\n                line.parent = mesh;\n                line.alwaysSelectAsActiveMesh = true;\n                line.isPickable = false;\n            }\n        }\n        return root;\n    };\n    // Static helper methods\n    CameraGizmo._Scale = 0.05;\n    return CameraGizmo;\n}(Gizmo));\nexport { CameraGizmo };\n//# sourceMappingURL=cameraGizmo.js.map","import { __assign } from \"tslib\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { ArcRotateCamera } from \"../Cameras/arcRotateCamera.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3, Color4 } from \"../Maths/math.color.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { BaseTexture } from \"../Materials/Textures/baseTexture.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { MirrorTexture } from \"../Materials/Textures/mirrorTexture.js\";\nimport { CubeTexture } from \"../Materials/Textures/cubeTexture.js\";\nimport { BackgroundMaterial } from \"../Materials/Background/backgroundMaterial.js\";\n\nimport { CreatePlane } from \"../Meshes/Builders/planeBuilder.js\";\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder.js\";\nimport { Plane } from \"../Maths/math.plane.js\";\n/**\n * The Environment helper class can be used to add a fully featured none expensive background to your scene.\n * It includes by default a skybox and a ground relying on the BackgroundMaterial.\n * It also helps with the default setup of your imageProcessing configuration.\n */\nvar EnvironmentHelper = /** @class */ (function () {\n    /**\n     * constructor\n     * @param options Defines the options we want to customize the helper\n     * @param scene The scene to add the material to\n     */\n    function EnvironmentHelper(options, scene) {\n        var _this = this;\n        this._errorHandler = function (message, exception) {\n            _this.onErrorObservable.notifyObservers({ message: message, exception: exception });\n        };\n        this._options = __assign(__assign({}, EnvironmentHelper._GetDefaultOptions()), options);\n        this._scene = scene;\n        this.onErrorObservable = new Observable();\n        this._setupBackground();\n        this._setupImageProcessing();\n    }\n    /**\n     * Creates the default options for the helper.\n     */\n    EnvironmentHelper._GetDefaultOptions = function () {\n        return {\n            createGround: true,\n            groundSize: 15,\n            groundTexture: this._GroundTextureCDNUrl,\n            groundColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\n            groundOpacity: 0.9,\n            enableGroundShadow: true,\n            groundShadowLevel: 0.5,\n            enableGroundMirror: false,\n            groundMirrorSizeRatio: 0.3,\n            groundMirrorBlurKernel: 64,\n            groundMirrorAmount: 1,\n            groundMirrorFresnelWeight: 1,\n            groundMirrorFallOffDistance: 0,\n            groundMirrorTextureType: 0,\n            groundYBias: 0.00001,\n            createSkybox: true,\n            skyboxSize: 20,\n            skyboxTexture: this._SkyboxTextureCDNUrl,\n            skyboxColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\n            backgroundYRotation: 0,\n            sizeAuto: true,\n            rootPosition: Vector3.Zero(),\n            setupImageProcessing: true,\n            environmentTexture: this._EnvironmentTextureCDNUrl,\n            cameraExposure: 0.8,\n            cameraContrast: 1.2,\n            toneMappingEnabled: true,\n        };\n    };\n    Object.defineProperty(EnvironmentHelper.prototype, \"rootMesh\", {\n        /**\n         * Gets the root mesh created by the helper.\n         */\n        get: function () {\n            return this._rootMesh;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EnvironmentHelper.prototype, \"skybox\", {\n        /**\n         * Gets the skybox created by the helper.\n         */\n        get: function () {\n            return this._skybox;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EnvironmentHelper.prototype, \"skyboxTexture\", {\n        /**\n         * Gets the skybox texture created by the helper.\n         */\n        get: function () {\n            return this._skyboxTexture;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EnvironmentHelper.prototype, \"skyboxMaterial\", {\n        /**\n         * Gets the skybox material created by the helper.\n         */\n        get: function () {\n            return this._skyboxMaterial;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EnvironmentHelper.prototype, \"ground\", {\n        /**\n         * Gets the ground mesh created by the helper.\n         */\n        get: function () {\n            return this._ground;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EnvironmentHelper.prototype, \"groundTexture\", {\n        /**\n         * Gets the ground texture created by the helper.\n         */\n        get: function () {\n            return this._groundTexture;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EnvironmentHelper.prototype, \"groundMirror\", {\n        /**\n         * Gets the ground mirror created by the helper.\n         */\n        get: function () {\n            return this._groundMirror;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EnvironmentHelper.prototype, \"groundMirrorRenderList\", {\n        /**\n         * Gets the ground mirror render list to helps pushing the meshes\n         * you wish in the ground reflection.\n         */\n        get: function () {\n            if (this._groundMirror) {\n                return this._groundMirror.renderList;\n            }\n            return null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EnvironmentHelper.prototype, \"groundMaterial\", {\n        /**\n         * Gets the ground material created by the helper.\n         */\n        get: function () {\n            return this._groundMaterial;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Updates the background according to the new options\n     * @param options\n     */\n    EnvironmentHelper.prototype.updateOptions = function (options) {\n        var newOptions = __assign(__assign({}, this._options), options);\n        if (this._ground && !newOptions.createGround) {\n            this._ground.dispose();\n            this._ground = null;\n        }\n        if (this._groundMaterial && !newOptions.createGround) {\n            this._groundMaterial.dispose();\n            this._groundMaterial = null;\n        }\n        if (this._groundTexture) {\n            if (this._options.groundTexture != newOptions.groundTexture) {\n                this._groundTexture.dispose();\n                this._groundTexture = null;\n            }\n        }\n        if (this._skybox && !newOptions.createSkybox) {\n            this._skybox.dispose();\n            this._skybox = null;\n        }\n        if (this._skyboxMaterial && !newOptions.createSkybox) {\n            this._skyboxMaterial.dispose();\n            this._skyboxMaterial = null;\n        }\n        if (this._skyboxTexture) {\n            if (this._options.skyboxTexture != newOptions.skyboxTexture) {\n                this._skyboxTexture.dispose();\n                this._skyboxTexture = null;\n            }\n        }\n        if (this._groundMirror && !newOptions.enableGroundMirror) {\n            this._groundMirror.dispose();\n            this._groundMirror = null;\n        }\n        if (this._scene.environmentTexture) {\n            if (this._options.environmentTexture != newOptions.environmentTexture) {\n                this._scene.environmentTexture.dispose();\n            }\n        }\n        this._options = newOptions;\n        this._setupBackground();\n        this._setupImageProcessing();\n    };\n    /**\n     * Sets the primary color of all the available elements.\n     * @param color the main color to affect to the ground and the background\n     */\n    EnvironmentHelper.prototype.setMainColor = function (color) {\n        if (this.groundMaterial) {\n            this.groundMaterial.primaryColor = color;\n        }\n        if (this.skyboxMaterial) {\n            this.skyboxMaterial.primaryColor = color;\n        }\n        if (this.groundMirror) {\n            this.groundMirror.clearColor = new Color4(color.r, color.g, color.b, 1.0);\n        }\n    };\n    /**\n     * Setup the image processing according to the specified options.\n     */\n    EnvironmentHelper.prototype._setupImageProcessing = function () {\n        if (this._options.setupImageProcessing) {\n            this._scene.imageProcessingConfiguration.contrast = this._options.cameraContrast;\n            this._scene.imageProcessingConfiguration.exposure = this._options.cameraExposure;\n            this._scene.imageProcessingConfiguration.toneMappingEnabled = this._options.toneMappingEnabled;\n            this._setupEnvironmentTexture();\n        }\n    };\n    /**\n     * Setup the environment texture according to the specified options.\n     */\n    EnvironmentHelper.prototype._setupEnvironmentTexture = function () {\n        if (this._scene.environmentTexture) {\n            return;\n        }\n        if (this._options.environmentTexture instanceof BaseTexture) {\n            this._scene.environmentTexture = this._options.environmentTexture;\n            return;\n        }\n        var environmentTexture = CubeTexture.CreateFromPrefilteredData(this._options.environmentTexture, this._scene);\n        this._scene.environmentTexture = environmentTexture;\n    };\n    /**\n     * Setup the background according to the specified options.\n     */\n    EnvironmentHelper.prototype._setupBackground = function () {\n        if (!this._rootMesh) {\n            this._rootMesh = new Mesh(\"BackgroundHelper\", this._scene);\n        }\n        this._rootMesh.rotation.y = this._options.backgroundYRotation;\n        var sceneSize = this._getSceneSize();\n        if (this._options.createGround) {\n            this._setupGround(sceneSize);\n            this._setupGroundMaterial();\n            this._setupGroundDiffuseTexture();\n            if (this._options.enableGroundMirror) {\n                this._setupGroundMirrorTexture(sceneSize);\n            }\n            this._setupMirrorInGroundMaterial();\n        }\n        if (this._options.createSkybox) {\n            this._setupSkybox(sceneSize);\n            this._setupSkyboxMaterial();\n            this._setupSkyboxReflectionTexture();\n        }\n        this._rootMesh.position.x = sceneSize.rootPosition.x;\n        this._rootMesh.position.z = sceneSize.rootPosition.z;\n        this._rootMesh.position.y = sceneSize.rootPosition.y;\n    };\n    /**\n     * Get the scene sizes according to the setup.\n     */\n    EnvironmentHelper.prototype._getSceneSize = function () {\n        var _this = this;\n        var groundSize = this._options.groundSize;\n        var skyboxSize = this._options.skyboxSize;\n        var rootPosition = this._options.rootPosition;\n        if (!this._scene.meshes || this._scene.meshes.length === 1) {\n            // 1 only means the root of the helper.\n            return { groundSize: groundSize, skyboxSize: skyboxSize, rootPosition: rootPosition };\n        }\n        var sceneExtends = this._scene.getWorldExtends(function (mesh) {\n            return mesh !== _this._ground && mesh !== _this._rootMesh && mesh !== _this._skybox;\n        });\n        var sceneDiagonal = sceneExtends.max.subtract(sceneExtends.min);\n        if (this._options.sizeAuto) {\n            if (this._scene.activeCamera instanceof ArcRotateCamera && this._scene.activeCamera.upperRadiusLimit) {\n                groundSize = this._scene.activeCamera.upperRadiusLimit * 2;\n                skyboxSize = groundSize;\n            }\n            var sceneDiagonalLenght = sceneDiagonal.length();\n            if (sceneDiagonalLenght > groundSize) {\n                groundSize = sceneDiagonalLenght * 2;\n                skyboxSize = groundSize;\n            }\n            // 10 % bigger.\n            groundSize *= 1.1;\n            skyboxSize *= 1.5;\n            rootPosition = sceneExtends.min.add(sceneDiagonal.scale(0.5));\n            rootPosition.y = sceneExtends.min.y - this._options.groundYBias;\n        }\n        return { groundSize: groundSize, skyboxSize: skyboxSize, rootPosition: rootPosition };\n    };\n    /**\n     * Setup the ground according to the specified options.\n     * @param sceneSize\n     */\n    EnvironmentHelper.prototype._setupGround = function (sceneSize) {\n        var _this = this;\n        if (!this._ground || this._ground.isDisposed()) {\n            this._ground = CreatePlane(\"BackgroundPlane\", { size: sceneSize.groundSize }, this._scene);\n            this._ground.rotation.x = Math.PI / 2; // Face up by default.\n            this._ground.parent = this._rootMesh;\n            this._ground.onDisposeObservable.add(function () {\n                _this._ground = null;\n            });\n        }\n        this._ground.receiveShadows = this._options.enableGroundShadow;\n    };\n    /**\n     * Setup the ground material according to the specified options.\n     */\n    EnvironmentHelper.prototype._setupGroundMaterial = function () {\n        if (!this._groundMaterial) {\n            this._groundMaterial = new BackgroundMaterial(\"BackgroundPlaneMaterial\", this._scene);\n        }\n        this._groundMaterial.alpha = this._options.groundOpacity;\n        this._groundMaterial.alphaMode = 8;\n        this._groundMaterial.shadowLevel = this._options.groundShadowLevel;\n        this._groundMaterial.primaryColor = this._options.groundColor;\n        this._groundMaterial.useRGBColor = false;\n        this._groundMaterial.enableNoise = true;\n        if (this._ground) {\n            this._ground.material = this._groundMaterial;\n        }\n    };\n    /**\n     * Setup the ground diffuse texture according to the specified options.\n     */\n    EnvironmentHelper.prototype._setupGroundDiffuseTexture = function () {\n        if (!this._groundMaterial) {\n            return;\n        }\n        if (this._groundTexture) {\n            return;\n        }\n        if (this._options.groundTexture instanceof BaseTexture) {\n            this._groundMaterial.diffuseTexture = this._options.groundTexture;\n            return;\n        }\n        this._groundTexture = new Texture(this._options.groundTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\n        this._groundTexture.gammaSpace = false;\n        this._groundTexture.hasAlpha = true;\n        this._groundMaterial.diffuseTexture = this._groundTexture;\n    };\n    /**\n     * Setup the ground mirror texture according to the specified options.\n     * @param sceneSize\n     */\n    EnvironmentHelper.prototype._setupGroundMirrorTexture = function (sceneSize) {\n        var wrapping = Texture.CLAMP_ADDRESSMODE;\n        if (!this._groundMirror) {\n            this._groundMirror = new MirrorTexture(\"BackgroundPlaneMirrorTexture\", { ratio: this._options.groundMirrorSizeRatio }, this._scene, false, this._options.groundMirrorTextureType, Texture.BILINEAR_SAMPLINGMODE, true);\n            this._groundMirror.mirrorPlane = new Plane(0, -1, 0, sceneSize.rootPosition.y);\n            this._groundMirror.anisotropicFilteringLevel = 1;\n            this._groundMirror.wrapU = wrapping;\n            this._groundMirror.wrapV = wrapping;\n            if (this._groundMirror.renderList) {\n                for (var i = 0; i < this._scene.meshes.length; i++) {\n                    var mesh = this._scene.meshes[i];\n                    if (mesh !== this._ground && mesh !== this._skybox && mesh !== this._rootMesh) {\n                        this._groundMirror.renderList.push(mesh);\n                    }\n                }\n            }\n        }\n        var gammaGround = this._options.groundColor.toGammaSpace();\n        this._groundMirror.clearColor = new Color4(gammaGround.r, gammaGround.g, gammaGround.b, 1);\n        this._groundMirror.adaptiveBlurKernel = this._options.groundMirrorBlurKernel;\n    };\n    /**\n     * Setup the ground to receive the mirror texture.\n     */\n    EnvironmentHelper.prototype._setupMirrorInGroundMaterial = function () {\n        if (this._groundMaterial) {\n            this._groundMaterial.reflectionTexture = this._groundMirror;\n            this._groundMaterial.reflectionFresnel = true;\n            this._groundMaterial.reflectionAmount = this._options.groundMirrorAmount;\n            this._groundMaterial.reflectionStandardFresnelWeight = this._options.groundMirrorFresnelWeight;\n            this._groundMaterial.reflectionFalloffDistance = this._options.groundMirrorFallOffDistance;\n        }\n    };\n    /**\n     * Setup the skybox according to the specified options.\n     * @param sceneSize\n     */\n    EnvironmentHelper.prototype._setupSkybox = function (sceneSize) {\n        var _this = this;\n        if (!this._skybox || this._skybox.isDisposed()) {\n            this._skybox = CreateBox(\"BackgroundSkybox\", { size: sceneSize.skyboxSize, sideOrientation: Mesh.BACKSIDE }, this._scene);\n            this._skybox.onDisposeObservable.add(function () {\n                _this._skybox = null;\n            });\n        }\n        this._skybox.parent = this._rootMesh;\n    };\n    /**\n     * Setup the skybox material according to the specified options.\n     */\n    EnvironmentHelper.prototype._setupSkyboxMaterial = function () {\n        if (!this._skybox) {\n            return;\n        }\n        if (!this._skyboxMaterial) {\n            this._skyboxMaterial = new BackgroundMaterial(\"BackgroundSkyboxMaterial\", this._scene);\n        }\n        this._skyboxMaterial.useRGBColor = false;\n        this._skyboxMaterial.primaryColor = this._options.skyboxColor;\n        this._skyboxMaterial.enableNoise = true;\n        this._skybox.material = this._skyboxMaterial;\n    };\n    /**\n     * Setup the skybox reflection texture according to the specified options.\n     */\n    EnvironmentHelper.prototype._setupSkyboxReflectionTexture = function () {\n        if (!this._skyboxMaterial) {\n            return;\n        }\n        if (this._skyboxTexture) {\n            return;\n        }\n        if (this._options.skyboxTexture instanceof BaseTexture) {\n            this._skyboxMaterial.reflectionTexture = this._options.skyboxTexture;\n            return;\n        }\n        this._skyboxTexture = new CubeTexture(this._options.skyboxTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\n        this._skyboxTexture.coordinatesMode = Texture.SKYBOX_MODE;\n        this._skyboxTexture.gammaSpace = false;\n        this._skyboxMaterial.reflectionTexture = this._skyboxTexture;\n    };\n    /**\n     * Dispose all the elements created by the Helper.\n     */\n    EnvironmentHelper.prototype.dispose = function () {\n        if (this._groundMaterial) {\n            this._groundMaterial.dispose(true, true);\n        }\n        if (this._skyboxMaterial) {\n            this._skyboxMaterial.dispose(true, true);\n        }\n        this._rootMesh.dispose(false);\n    };\n    /**\n     * Default ground texture URL.\n     */\n    EnvironmentHelper._GroundTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundGround.png\";\n    /**\n     * Default skybox texture URL.\n     */\n    EnvironmentHelper._SkyboxTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundSkybox.dds\";\n    /**\n     * Default environment texture URL.\n     */\n    EnvironmentHelper._EnvironmentTextureCDNUrl = \"https://assets.babylonjs.com/environments/environmentSpecular.env\";\n    return EnvironmentHelper;\n}());\nexport { EnvironmentHelper };\n//# sourceMappingURL=environmentHelper.js.map","import { __extends } from \"tslib\";\nimport { TransformNode } from \"../Meshes/transformNode.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { BackgroundMaterial } from \"../Materials/Background/backgroundMaterial.js\";\nimport { CreateSphere } from \"../Meshes/Builders/sphereBuilder.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Axis } from \"../Maths/math.js\";\n/**\n * Display a 360/180 degree texture on an approximately spherical surface, useful for VR applications or skyboxes.\n * As a subclass of TransformNode, this allow parenting to the camera or multiple textures with different locations in the scene.\n * This class achieves its effect with a Texture and a correctly configured BackgroundMaterial on an inverted sphere.\n * Potential additions to this helper include zoom and and non-infinite distance rendering effects.\n */\nvar TextureDome = /** @class */ (function (_super) {\n    __extends(TextureDome, _super);\n    /**\n     * Create an instance of this class and pass through the parameters to the relevant classes- Texture, StandardMaterial, and Mesh.\n     * @param name Element's name, child elements will append suffixes for their own names.\n     * @param textureUrlOrElement defines the url(s) or the (video) HTML element to use\n     * @param options An object containing optional or exposed sub element properties\n     * @param options.resolution\n     * @param options.clickToPlay\n     * @param options.autoPlay\n     * @param options.loop\n     * @param options.size\n     * @param options.poster\n     * @param options.faceForward\n     * @param options.useDirectMapping\n     * @param options.halfDomeMode\n     * @param options.crossEyeMode\n     * @param options.generateMipMaps\n     * @param options.mesh\n     * @param scene\n     * @param onError\n     */\n    function TextureDome(name, textureUrlOrElement, options, scene, \n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    onError) {\n        if (onError === void 0) { onError = null; }\n        var _this = _super.call(this, name, scene) || this;\n        _this.onError = onError;\n        _this._halfDome = false;\n        _this._crossEye = false;\n        _this._useDirectMapping = false;\n        _this._textureMode = TextureDome.MODE_MONOSCOPIC;\n        /**\n         * Oberserver used in Stereoscopic VR Mode.\n         */\n        _this._onBeforeCameraRenderObserver = null;\n        /**\n         * Observable raised when an error occurred while loading the texture\n         */\n        _this.onLoadErrorObservable = new Observable();\n        /**\n         * Observable raised when the texture finished loading\n         */\n        _this.onLoadObservable = new Observable();\n        scene = _this.getScene();\n        // set defaults and manage values\n        name = name || \"textureDome\";\n        options.resolution = Math.abs(options.resolution) | 0 || 32;\n        options.clickToPlay = Boolean(options.clickToPlay);\n        options.autoPlay = options.autoPlay === undefined ? true : Boolean(options.autoPlay);\n        options.loop = options.loop === undefined ? true : Boolean(options.loop);\n        options.size = Math.abs(options.size) || (scene.activeCamera ? scene.activeCamera.maxZ * 0.48 : 1000);\n        if (options.useDirectMapping === undefined) {\n            _this._useDirectMapping = true;\n        }\n        else {\n            _this._useDirectMapping = options.useDirectMapping;\n        }\n        if (options.faceForward === undefined) {\n            options.faceForward = true;\n        }\n        _this._setReady(false);\n        if (!options.mesh) {\n            _this._mesh = CreateSphere(name + \"_mesh\", { segments: options.resolution, diameter: options.size, updatable: false, sideOrientation: Mesh.BACKSIDE }, scene);\n        }\n        else {\n            _this._mesh = options.mesh;\n        }\n        // configure material\n        var material = (_this._material = new BackgroundMaterial(name + \"_material\", scene));\n        material.useEquirectangularFOV = true;\n        material.fovMultiplier = 1.0;\n        material.opacityFresnel = false;\n        var texture = _this._initTexture(textureUrlOrElement, scene, options);\n        _this.texture = texture;\n        // configure mesh\n        _this._mesh.material = material;\n        _this._mesh.parent = _this;\n        // create a (disabled until needed) mask to cover unneeded segments of 180 texture.\n        _this._halfDomeMask = CreateSphere(\"\", { slice: 0.5, diameter: options.size * 0.98, segments: options.resolution * 2, sideOrientation: Mesh.BACKSIDE }, scene);\n        _this._halfDomeMask.rotate(Axis.X, -Math.PI / 2);\n        // set the parent, so it will always be positioned correctly AND will be disposed when the main sphere is disposed\n        _this._halfDomeMask.parent = _this._mesh;\n        _this._halfDome = !!options.halfDomeMode;\n        // enable or disable according to the settings\n        _this._halfDomeMask.setEnabled(_this._halfDome);\n        _this._crossEye = !!options.crossEyeMode;\n        // create\n        _this._texture.anisotropicFilteringLevel = 1;\n        _this._texture.onLoadObservable.addOnce(function () {\n            _this._setReady(true);\n        });\n        // Initial rotation\n        if (options.faceForward && scene.activeCamera) {\n            var camera = scene.activeCamera;\n            var forward = Vector3.Forward();\n            var direction = Vector3.TransformNormal(forward, camera.getViewMatrix());\n            direction.normalize();\n            _this.rotation.y = Math.acos(Vector3.Dot(forward, direction));\n        }\n        _this._changeTextureMode(_this._textureMode);\n        return _this;\n    }\n    Object.defineProperty(TextureDome.prototype, \"texture\", {\n        /**\n         * Gets the texture being displayed on the sphere\n         */\n        get: function () {\n            return this._texture;\n        },\n        /**\n         * Sets the texture being displayed on the sphere\n         */\n        set: function (newTexture) {\n            if (this._texture === newTexture) {\n                return;\n            }\n            this._texture = newTexture;\n            if (this._useDirectMapping) {\n                this._texture.wrapU = Texture.CLAMP_ADDRESSMODE;\n                this._texture.wrapV = Texture.CLAMP_ADDRESSMODE;\n                this._material.diffuseTexture = this._texture;\n            }\n            else {\n                this._texture.coordinatesMode = Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE; // matches orientation\n                this._texture.wrapV = Texture.CLAMP_ADDRESSMODE;\n                this._material.reflectionTexture = this._texture;\n            }\n            this._changeTextureMode(this._textureMode);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextureDome.prototype, \"mesh\", {\n        /**\n         * Gets the mesh used for the dome.\n         */\n        get: function () {\n            return this._mesh;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextureDome.prototype, \"fovMultiplier\", {\n        /**\n         * The current fov(field of view) multiplier, 0.0 - 2.0. Defaults to 1.0. Lower values \"zoom in\" and higher values \"zoom out\".\n         * Also see the options.resolution property.\n         */\n        get: function () {\n            return this._material.fovMultiplier;\n        },\n        set: function (value) {\n            this._material.fovMultiplier = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextureDome.prototype, \"textureMode\", {\n        /**\n         * Gets or set the current texture mode for the texture. It can be:\n         * * TextureDome.MODE_MONOSCOPIC : Define the texture source as a Monoscopic panoramic 360.\n         * * TextureDome.MODE_TOPBOTTOM  : Define the texture source as a Stereoscopic TopBottom/OverUnder panoramic 360.\n         * * TextureDome.MODE_SIDEBYSIDE : Define the texture source as a Stereoscopic Side by Side panoramic 360.\n         */\n        get: function () {\n            return this._textureMode;\n        },\n        /**\n         * Sets the current texture mode for the texture. It can be:\n         * * TextureDome.MODE_MONOSCOPIC : Define the texture source as a Monoscopic panoramic 360.\n         * * TextureDome.MODE_TOPBOTTOM  : Define the texture source as a Stereoscopic TopBottom/OverUnder panoramic 360.\n         * * TextureDome.MODE_SIDEBYSIDE : Define the texture source as a Stereoscopic Side by Side panoramic 360.\n         */\n        set: function (value) {\n            if (this._textureMode === value) {\n                return;\n            }\n            this._changeTextureMode(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextureDome.prototype, \"halfDome\", {\n        /**\n         * Is it a 180 degrees dome (half dome) or 360 texture (full dome)\n         */\n        get: function () {\n            return this._halfDome;\n        },\n        /**\n         * Set the halfDome mode. If set, only the front (180 degrees) will be displayed and the back will be blacked out.\n         */\n        set: function (enabled) {\n            this._halfDome = enabled;\n            this._halfDomeMask.setEnabled(enabled);\n            this._changeTextureMode(this._textureMode);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextureDome.prototype, \"crossEye\", {\n        /**\n         * Is it a cross-eye texture?\n         */\n        get: function () {\n            return this._crossEye;\n        },\n        /**\n         * Set the cross-eye mode. If set, images that can be seen when crossing eyes will render correctly\n         */\n        set: function (enabled) {\n            this._crossEye = enabled;\n            this._changeTextureMode(this._textureMode);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextureDome.prototype, \"material\", {\n        /**\n         * The background material of this dome.\n         */\n        get: function () {\n            return this._material;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    TextureDome.prototype._changeTextureMode = function (value) {\n        var _this = this;\n        this._scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n        this._textureMode = value;\n        // Default Setup and Reset.\n        this._texture.uScale = 1;\n        this._texture.vScale = 1;\n        this._texture.uOffset = 0;\n        this._texture.vOffset = 0;\n        this._texture.vAng = 0;\n        switch (value) {\n            case TextureDome.MODE_MONOSCOPIC:\n                if (this._halfDome) {\n                    this._texture.uScale = 2;\n                    this._texture.uOffset = -1;\n                }\n                break;\n            case TextureDome.MODE_SIDEBYSIDE: {\n                // in half-dome mode the uScale should be double of 360 texture\n                // Use 0.99999 to boost perf by not switching program\n                this._texture.uScale = this._halfDome ? 0.99999 : 0.5;\n                var rightOffset_1 = this._halfDome ? 0.0 : 0.5;\n                var leftOffset_1 = this._halfDome ? -0.5 : 0.0;\n                this._onBeforeCameraRenderObserver = this._scene.onBeforeCameraRenderObservable.add(function (camera) {\n                    var isRightCamera = camera.isRightCamera;\n                    if (_this._crossEye) {\n                        isRightCamera = !isRightCamera;\n                    }\n                    if (isRightCamera) {\n                        _this._texture.uOffset = rightOffset_1;\n                    }\n                    else {\n                        _this._texture.uOffset = leftOffset_1;\n                    }\n                });\n                break;\n            }\n            case TextureDome.MODE_TOPBOTTOM:\n                // in half-dome mode the vScale should be double of 360 texture\n                // Use 0.99999 to boost perf by not switching program\n                this._texture.vScale = this._halfDome ? 0.99999 : 0.5;\n                this._onBeforeCameraRenderObserver = this._scene.onBeforeCameraRenderObservable.add(function (camera) {\n                    var isRightCamera = camera.isRightCamera;\n                    // allow \"cross-eye\" if left and right were switched in this mode\n                    if (_this._crossEye) {\n                        isRightCamera = !isRightCamera;\n                    }\n                    _this._texture.vOffset = isRightCamera ? 0.5 : 0.0;\n                });\n                break;\n        }\n    };\n    /**\n     * Releases resources associated with this node.\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\n     */\n    TextureDome.prototype.dispose = function (doNotRecurse, disposeMaterialAndTextures) {\n        if (disposeMaterialAndTextures === void 0) { disposeMaterialAndTextures = false; }\n        this._texture.dispose();\n        this._mesh.dispose();\n        this._material.dispose();\n        this._scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n        this.onLoadErrorObservable.clear();\n        this.onLoadObservable.clear();\n        _super.prototype.dispose.call(this, doNotRecurse, disposeMaterialAndTextures);\n    };\n    /**\n     * Define the source as a Monoscopic panoramic 360/180.\n     */\n    TextureDome.MODE_MONOSCOPIC = 0;\n    /**\n     * Define the source as a Stereoscopic TopBottom/OverUnder panoramic 360/180.\n     */\n    TextureDome.MODE_TOPBOTTOM = 1;\n    /**\n     * Define the source as a Stereoscopic Side by Side panoramic 360/180.\n     */\n    TextureDome.MODE_SIDEBYSIDE = 2;\n    return TextureDome;\n}(TransformNode));\nexport { TextureDome };\n//# sourceMappingURL=textureDome.js.map","import { __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { TextureDome } from \"./textureDome.js\";\n/**\n * Display a 360 degree photo on an approximately spherical surface, useful for VR applications or skyboxes.\n * As a subclass of TransformNode, this allow parenting to the camera with different locations in the scene.\n * This class achieves its effect with a Texture and a correctly configured BackgroundMaterial on an inverted sphere.\n * Potential additions to this helper include zoom and and non-infinite distance rendering effects.\n */\nvar PhotoDome = /** @class */ (function (_super) {\n    __extends(PhotoDome, _super);\n    function PhotoDome() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(PhotoDome.prototype, \"photoTexture\", {\n        /**\n         * Gets or sets the texture being displayed on the sphere\n         */\n        get: function () {\n            return this.texture;\n        },\n        /**\n         * sets the texture being displayed on the sphere\n         */\n        set: function (value) {\n            this.texture = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PhotoDome.prototype, \"imageMode\", {\n        /**\n         * Gets the current video mode for the video. It can be:\n         * * TextureDome.MODE_MONOSCOPIC : Define the texture source as a Monoscopic panoramic 360.\n         * * TextureDome.MODE_TOPBOTTOM  : Define the texture source as a Stereoscopic TopBottom/OverUnder panoramic 360.\n         * * TextureDome.MODE_SIDEBYSIDE : Define the texture source as a Stereoscopic Side by Side panoramic 360.\n         */\n        get: function () {\n            return this.textureMode;\n        },\n        /**\n         * Sets the current video mode for the video. It can be:\n         * * TextureDome.MODE_MONOSCOPIC : Define the texture source as a Monoscopic panoramic 360.\n         * * TextureDome.MODE_TOPBOTTOM  : Define the texture source as a Stereoscopic TopBottom/OverUnder panoramic 360.\n         * * TextureDome.MODE_SIDEBYSIDE : Define the texture source as a Stereoscopic Side by Side panoramic 360.\n         */\n        set: function (value) {\n            this.textureMode = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    PhotoDome.prototype._initTexture = function (urlsOrElement, scene, options) {\n        var _this = this;\n        return new Texture(urlsOrElement, scene, !options.generateMipMaps, !this._useDirectMapping, undefined, function () {\n            _this.onLoadObservable.notifyObservers();\n        }, function (message, exception) {\n            _this.onLoadErrorObservable.notifyObservers(message || \"Unknown error occured\");\n            if (_this.onError) {\n                _this.onError(message, exception);\n            }\n        });\n    };\n    /**\n     * Define the image as a Monoscopic panoramic 360 image.\n     */\n    PhotoDome.MODE_MONOSCOPIC = TextureDome.MODE_MONOSCOPIC;\n    /**\n     * Define the image as a Stereoscopic TopBottom/OverUnder panoramic 360 image.\n     */\n    PhotoDome.MODE_TOPBOTTOM = TextureDome.MODE_TOPBOTTOM;\n    /**\n     * Define the image as a Stereoscopic Side by Side panoramic 360 image.\n     */\n    PhotoDome.MODE_SIDEBYSIDE = TextureDome.MODE_SIDEBYSIDE;\n    return PhotoDome;\n}(TextureDome));\nexport { PhotoDome };\n//# sourceMappingURL=photoDome.js.map","import { Logger } from \"../Misc/logger.js\";\nimport { Scene } from \"../scene.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { PBRMaterial } from \"../Materials/PBR/pbrMaterial.js\";\nimport { HemisphericLight } from \"../Lights/hemisphericLight.js\";\nimport { EnvironmentHelper } from \"./environmentHelper.js\";\nimport { FreeCamera } from \"../Cameras/freeCamera.js\";\nimport { ArcRotateCamera } from \"../Cameras/arcRotateCamera.js\";\nimport { VRExperienceHelper } from \"../Cameras/VR/vrExperienceHelper.js\";\nimport \"../Materials/Textures/Loaders/ddsTextureLoader.js\";\nimport \"../Materials/Textures/Loaders/envTextureLoader.js\";\nimport \"../Materials/Textures/Loaders/ktxTextureLoader.js\";\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder.js\";\nimport { WebXRDefaultExperience } from \"../XR/webXRDefaultExperience.js\";\n/** @hidden */\n// eslint-disable-next-line no-var\nexport var _forceSceneHelpersToBundle = true;\nScene.prototype.createDefaultLight = function (replace) {\n    if (replace === void 0) { replace = false; }\n    // Dispose existing light in replace mode.\n    if (replace) {\n        if (this.lights) {\n            for (var i = 0; i < this.lights.length; i++) {\n                this.lights[i].dispose();\n            }\n        }\n    }\n    // Light\n    if (this.lights.length === 0) {\n        new HemisphericLight(\"default light\", Vector3.Up(), this);\n    }\n};\nScene.prototype.createDefaultCamera = function (createArcRotateCamera, replace, attachCameraControls) {\n    if (createArcRotateCamera === void 0) { createArcRotateCamera = false; }\n    if (replace === void 0) { replace = false; }\n    if (attachCameraControls === void 0) { attachCameraControls = false; }\n    // Dispose existing camera in replace mode.\n    if (replace) {\n        if (this.activeCamera) {\n            this.activeCamera.dispose();\n            this.activeCamera = null;\n        }\n    }\n    // Camera\n    if (!this.activeCamera) {\n        var worldExtends = this.getWorldExtends(function (mesh) { return mesh.isVisible && mesh.isEnabled(); });\n        var worldSize = worldExtends.max.subtract(worldExtends.min);\n        var worldCenter = worldExtends.min.add(worldSize.scale(0.5));\n        var camera = void 0;\n        var radius = worldSize.length() * 1.5;\n        // empty scene scenario!\n        if (!isFinite(radius)) {\n            radius = 1;\n            worldCenter.copyFromFloats(0, 0, 0);\n        }\n        if (createArcRotateCamera) {\n            var arcRotateCamera = new ArcRotateCamera(\"default camera\", -(Math.PI / 2), Math.PI / 2, radius, worldCenter, this);\n            arcRotateCamera.lowerRadiusLimit = radius * 0.01;\n            arcRotateCamera.wheelPrecision = 100 / radius;\n            camera = arcRotateCamera;\n        }\n        else {\n            var freeCamera = new FreeCamera(\"default camera\", new Vector3(worldCenter.x, worldCenter.y, -radius), this);\n            freeCamera.setTarget(worldCenter);\n            camera = freeCamera;\n        }\n        camera.minZ = radius * 0.01;\n        camera.maxZ = radius * 1000;\n        camera.speed = radius * 0.2;\n        this.activeCamera = camera;\n        if (attachCameraControls) {\n            camera.attachControl();\n        }\n    }\n};\nScene.prototype.createDefaultCameraOrLight = function (createArcRotateCamera, replace, attachCameraControls) {\n    if (createArcRotateCamera === void 0) { createArcRotateCamera = false; }\n    if (replace === void 0) { replace = false; }\n    if (attachCameraControls === void 0) { attachCameraControls = false; }\n    this.createDefaultLight(replace);\n    this.createDefaultCamera(createArcRotateCamera, replace, attachCameraControls);\n};\nScene.prototype.createDefaultSkybox = function (environmentTexture, pbr, scale, blur, setGlobalEnvTexture) {\n    if (pbr === void 0) { pbr = false; }\n    if (scale === void 0) { scale = 1000; }\n    if (blur === void 0) { blur = 0; }\n    if (setGlobalEnvTexture === void 0) { setGlobalEnvTexture = true; }\n    if (!environmentTexture) {\n        Logger.Warn(\"Can not create default skybox without environment texture.\");\n        return null;\n    }\n    if (setGlobalEnvTexture) {\n        if (environmentTexture) {\n            this.environmentTexture = environmentTexture;\n        }\n    }\n    // Skybox\n    var hdrSkybox = CreateBox(\"hdrSkyBox\", { size: scale }, this);\n    if (pbr) {\n        var hdrSkyboxMaterial = new PBRMaterial(\"skyBox\", this);\n        hdrSkyboxMaterial.backFaceCulling = false;\n        hdrSkyboxMaterial.reflectionTexture = environmentTexture.clone();\n        if (hdrSkyboxMaterial.reflectionTexture) {\n            hdrSkyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\n        }\n        hdrSkyboxMaterial.microSurface = 1.0 - blur;\n        hdrSkyboxMaterial.disableLighting = true;\n        hdrSkyboxMaterial.twoSidedLighting = true;\n        hdrSkybox.material = hdrSkyboxMaterial;\n    }\n    else {\n        var skyboxMaterial = new StandardMaterial(\"skyBox\", this);\n        skyboxMaterial.backFaceCulling = false;\n        skyboxMaterial.reflectionTexture = environmentTexture.clone();\n        if (skyboxMaterial.reflectionTexture) {\n            skyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\n        }\n        skyboxMaterial.disableLighting = true;\n        hdrSkybox.material = skyboxMaterial;\n    }\n    hdrSkybox.isPickable = false;\n    hdrSkybox.infiniteDistance = true;\n    hdrSkybox.ignoreCameraMaxZ = true;\n    return hdrSkybox;\n};\nScene.prototype.createDefaultEnvironment = function (options) {\n    if (EnvironmentHelper) {\n        return new EnvironmentHelper(options, this);\n    }\n    return null;\n};\nScene.prototype.createDefaultVRExperience = function (webVROptions) {\n    if (webVROptions === void 0) { webVROptions = {}; }\n    return new VRExperienceHelper(this, webVROptions);\n};\nScene.prototype.createDefaultXRExperienceAsync = function (options) {\n    if (options === void 0) { options = {}; }\n    return WebXRDefaultExperience.CreateAsync(this, options).then(function (helper) {\n        return helper;\n    });\n};\n//# sourceMappingURL=sceneHelpers.js.map","import { __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { VideoTexture } from \"../Materials/Textures/videoTexture.js\";\nimport { TextureDome } from \"./textureDome.js\";\nimport { PointerEventTypes } from \"../Events/pointerEvents.js\";\n/**\n * Display a 360/180 degree video on an approximately spherical surface, useful for VR applications or skyboxes.\n * As a subclass of TransformNode, this allow parenting to the camera or multiple videos with different locations in the scene.\n * This class achieves its effect with a VideoTexture and a correctly configured BackgroundMaterial on an inverted sphere.\n * Potential additions to this helper include zoom and and non-infinite distance rendering effects.\n */\nvar VideoDome = /** @class */ (function (_super) {\n    __extends(VideoDome, _super);\n    function VideoDome() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(VideoDome.prototype, \"videoTexture\", {\n        /**\n         * Get the video texture associated with this video dome\n         */\n        get: function () {\n            return this._texture;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(VideoDome.prototype, \"videoMode\", {\n        /**\n         * Get the video mode of this dome\n         */\n        get: function () {\n            return this.textureMode;\n        },\n        /**\n         * Set the video mode of this dome.\n         * @see textureMode\n         */\n        set: function (value) {\n            this.textureMode = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    VideoDome.prototype._initTexture = function (urlsOrElement, scene, options) {\n        var _this = this;\n        var tempOptions = { loop: options.loop, autoPlay: options.autoPlay, autoUpdateTexture: true, poster: options.poster };\n        var texture = new VideoTexture((this.name || \"videoDome\") + \"_texture\", urlsOrElement, scene, options.generateMipMaps, this._useDirectMapping, Texture.TRILINEAR_SAMPLINGMODE, tempOptions);\n        // optional configuration\n        if (options.clickToPlay) {\n            this._pointerObserver = scene.onPointerObservable.add(function (pointerInfo) {\n                if (pointerInfo.type !== PointerEventTypes.POINTERUP) {\n                    _this._texture.video.play();\n                }\n            });\n        }\n        this._textureObserver = texture.onLoadObservable.add(function () {\n            _this.onLoadObservable.notifyObservers();\n        });\n        return texture;\n    };\n    /**\n     * Releases resources associated with this node.\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\n     */\n    VideoDome.prototype.dispose = function (doNotRecurse, disposeMaterialAndTextures) {\n        if (disposeMaterialAndTextures === void 0) { disposeMaterialAndTextures = false; }\n        this._texture.onLoadObservable.remove(this._textureObserver);\n        this._scene.onPointerObservable.remove(this._pointerObserver);\n        _super.prototype.dispose.call(this, doNotRecurse, disposeMaterialAndTextures);\n    };\n    /**\n     * Define the video source as a Monoscopic panoramic 360 video.\n     */\n    VideoDome.MODE_MONOSCOPIC = TextureDome.MODE_MONOSCOPIC;\n    /**\n     * Define the video source as a Stereoscopic TopBottom/OverUnder panoramic 360 video.\n     */\n    VideoDome.MODE_TOPBOTTOM = TextureDome.MODE_TOPBOTTOM;\n    /**\n     * Define the video source as a Stereoscopic Side by Side panoramic 360 video.\n     */\n    VideoDome.MODE_SIDEBYSIDE = TextureDome.MODE_SIDEBYSIDE;\n    return VideoDome;\n}(TextureDome));\nexport { VideoDome };\n//# sourceMappingURL=videoDome.js.map","import { PointerInfoPre, PointerInfo, PointerEventTypes } from \"../Events/pointerEvents.js\";\nimport { AbstractActionManager } from \"../Actions/abstractActionManager.js\";\nimport { PickingInfo } from \"../Collisions/pickingInfo.js\";\nimport { Vector2, Matrix } from \"../Maths/math.vector.js\";\n\nimport { ActionEvent } from \"../Actions/actionEvent.js\";\nimport { KeyboardEventTypes, KeyboardInfoPre, KeyboardInfo } from \"../Events/keyboardEvents.js\";\nimport { DeviceType, PointerInput } from \"../DeviceInput/InputDevices/deviceEnums.js\";\nimport { DeviceSourceManager } from \"../DeviceInput/InputDevices/deviceSourceManager.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n/** @hidden */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nvar _ClickInfo = /** @class */ (function () {\n    function _ClickInfo() {\n        this._singleClick = false;\n        this._doubleClick = false;\n        this._hasSwiped = false;\n        this._ignore = false;\n    }\n    Object.defineProperty(_ClickInfo.prototype, \"singleClick\", {\n        get: function () {\n            return this._singleClick;\n        },\n        set: function (b) {\n            this._singleClick = b;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(_ClickInfo.prototype, \"doubleClick\", {\n        get: function () {\n            return this._doubleClick;\n        },\n        set: function (b) {\n            this._doubleClick = b;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(_ClickInfo.prototype, \"hasSwiped\", {\n        get: function () {\n            return this._hasSwiped;\n        },\n        set: function (b) {\n            this._hasSwiped = b;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(_ClickInfo.prototype, \"ignore\", {\n        get: function () {\n            return this._ignore;\n        },\n        set: function (b) {\n            this._ignore = b;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return _ClickInfo;\n}());\n/**\n * Class used to manage all inputs for the scene.\n */\nvar InputManager = /** @class */ (function () {\n    /**\n     * Creates a new InputManager\n     * @param scene - defines the hosting scene\n     */\n    function InputManager(scene) {\n        /** This is a defensive check to not allow control attachment prior to an already active one. If already attached, previous control is unattached before attaching the new one. */\n        this._alreadyAttached = false;\n        this._meshPickProceed = false;\n        this._currentPickResult = null;\n        this._previousPickResult = null;\n        this._totalPointersPressed = 0;\n        this._doubleClickOccured = false;\n        this._pointerX = 0;\n        this._pointerY = 0;\n        this._startingPointerPosition = new Vector2(0, 0);\n        this._previousStartingPointerPosition = new Vector2(0, 0);\n        this._startingPointerTime = 0;\n        this._previousStartingPointerTime = 0;\n        this._pointerCaptures = {};\n        this._meshUnderPointerId = {};\n        this._deviceSourceManager = null;\n        this._scene = scene || EngineStore.LastCreatedScene;\n        if (!this._scene) {\n            return;\n        }\n    }\n    Object.defineProperty(InputManager.prototype, \"meshUnderPointer\", {\n        /**\n         * Gets the mesh that is currently under the pointer\n         * @returns Mesh that the pointer is pointer is hovering over\n         */\n        get: function () {\n            return this._pointerOverMesh;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * When using more than one pointer (for example in XR) you can get the mesh under the specific pointer\n     * @param pointerId - the pointer id to use\n     * @returns The mesh under this pointer id or null if not found\n     */\n    InputManager.prototype.getMeshUnderPointerByPointerId = function (pointerId) {\n        return this._meshUnderPointerId[pointerId] || null;\n    };\n    Object.defineProperty(InputManager.prototype, \"unTranslatedPointer\", {\n        /**\n         * Gets the pointer coordinates in 2D without any translation (ie. straight out of the pointer event)\n         * @returns Vector with X/Y values directly from pointer event\n         */\n        get: function () {\n            return new Vector2(this._unTranslatedPointerX, this._unTranslatedPointerY);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(InputManager.prototype, \"pointerX\", {\n        /**\n         * Gets or sets the current on-screen X position of the pointer\n         * @returns Translated X with respect to screen\n         */\n        get: function () {\n            return this._pointerX;\n        },\n        set: function (value) {\n            this._pointerX = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(InputManager.prototype, \"pointerY\", {\n        /**\n         * Gets or sets the current on-screen Y position of the pointer\n         * @returns Translated Y with respect to screen\n         */\n        get: function () {\n            return this._pointerY;\n        },\n        set: function (value) {\n            this._pointerY = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    InputManager.prototype._updatePointerPosition = function (evt) {\n        var canvasRect = this._scene.getEngine().getInputElementClientRect();\n        if (!canvasRect) {\n            return;\n        }\n        this._pointerX = evt.clientX - canvasRect.left;\n        this._pointerY = evt.clientY - canvasRect.top;\n        this._unTranslatedPointerX = this._pointerX;\n        this._unTranslatedPointerY = this._pointerY;\n    };\n    InputManager.prototype._processPointerMove = function (pickResult, evt) {\n        var scene = this._scene;\n        var engine = scene.getEngine();\n        var canvas = engine.getInputElement();\n        if (canvas) {\n            canvas.tabIndex = engine.canvasTabIndex;\n            // Restore pointer\n            if (!scene.doNotHandleCursors) {\n                canvas.style.cursor = scene.defaultCursor;\n            }\n        }\n        var isMeshPicked = pickResult && pickResult.hit && pickResult.pickedMesh ? true : false;\n        if (isMeshPicked) {\n            scene.setPointerOverMesh(pickResult.pickedMesh, evt.pointerId, pickResult);\n            if (!scene.doNotHandleCursors && canvas && this._pointerOverMesh) {\n                var actionManager = this._pointerOverMesh._getActionManagerForTrigger();\n                if (actionManager && actionManager.hasPointerTriggers) {\n                    canvas.style.cursor = actionManager.hoverCursor || scene.hoverCursor;\n                }\n            }\n        }\n        else {\n            scene.setPointerOverMesh(null, evt.pointerId, pickResult);\n        }\n        for (var _i = 0, _a = scene._pointerMoveStage; _i < _a.length; _i++) {\n            var step = _a[_i];\n            pickResult = step.action(this._unTranslatedPointerX, this._unTranslatedPointerY, pickResult, isMeshPicked, canvas);\n        }\n        if (pickResult) {\n            var type = evt.type === \"wheel\" || evt.type === \"mousewheel\" || evt.type === \"DOMMouseScroll\" ? PointerEventTypes.POINTERWHEEL : PointerEventTypes.POINTERMOVE;\n            if (scene.onPointerMove) {\n                scene.onPointerMove(evt, pickResult, type);\n            }\n            if (scene.onPointerObservable.hasObservers()) {\n                var pi = new PointerInfo(type, evt, pickResult);\n                this._setRayOnPointerInfo(pi);\n                scene.onPointerObservable.notifyObservers(pi, type);\n            }\n        }\n    };\n    // Pointers handling\n    InputManager.prototype._setRayOnPointerInfo = function (pointerInfo) {\n        var scene = this._scene;\n        if (pointerInfo.pickInfo && !pointerInfo.pickInfo._pickingUnavailable) {\n            if (!pointerInfo.pickInfo.ray) {\n                pointerInfo.pickInfo.ray = scene.createPickingRay(pointerInfo.event.offsetX, pointerInfo.event.offsetY, Matrix.Identity(), scene.activeCamera);\n            }\n        }\n    };\n    InputManager.prototype._checkPrePointerObservable = function (pickResult, evt, type) {\n        var scene = this._scene;\n        var pi = new PointerInfoPre(type, evt, this._unTranslatedPointerX, this._unTranslatedPointerY);\n        if (pickResult) {\n            pi.ray = pickResult.ray;\n            if (pickResult.originMesh) {\n                pi.nearInteractionPickingInfo = pickResult;\n            }\n        }\n        scene.onPrePointerObservable.notifyObservers(pi, type);\n        if (pi.skipOnPointerObservable) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Use this method to simulate a pointer move on a mesh\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n     * @param pickResult - pickingInfo of the object wished to simulate pointer event on\n     * @param pointerEventInit - pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n     */\n    InputManager.prototype.simulatePointerMove = function (pickResult, pointerEventInit) {\n        var evt = new PointerEvent(\"pointermove\", pointerEventInit);\n        evt.inputIndex = PointerInput.Move;\n        if (this._checkPrePointerObservable(pickResult, evt, PointerEventTypes.POINTERMOVE)) {\n            return;\n        }\n        this._processPointerMove(pickResult, evt);\n    };\n    /**\n     * Use this method to simulate a pointer down on a mesh\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n     * @param pickResult - pickingInfo of the object wished to simulate pointer event on\n     * @param pointerEventInit - pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n     */\n    InputManager.prototype.simulatePointerDown = function (pickResult, pointerEventInit) {\n        var evt = new PointerEvent(\"pointerdown\", pointerEventInit);\n        evt.inputIndex = evt.button + 2;\n        if (this._checkPrePointerObservable(pickResult, evt, PointerEventTypes.POINTERDOWN)) {\n            return;\n        }\n        this._processPointerDown(pickResult, evt);\n    };\n    InputManager.prototype._processPointerDown = function (pickResult, evt) {\n        var _this = this;\n        var scene = this._scene;\n        if (pickResult && pickResult.hit && pickResult.pickedMesh) {\n            this._pickedDownMesh = pickResult.pickedMesh;\n            var actionManager_1 = pickResult.pickedMesh._getActionManagerForTrigger();\n            if (actionManager_1) {\n                if (actionManager_1.hasPickTriggers) {\n                    actionManager_1.processTrigger(5, ActionEvent.CreateNew(pickResult.pickedMesh, evt));\n                    switch (evt.button) {\n                        case 0:\n                            actionManager_1.processTrigger(2, ActionEvent.CreateNew(pickResult.pickedMesh, evt));\n                            break;\n                        case 1:\n                            actionManager_1.processTrigger(4, ActionEvent.CreateNew(pickResult.pickedMesh, evt));\n                            break;\n                        case 2:\n                            actionManager_1.processTrigger(3, ActionEvent.CreateNew(pickResult.pickedMesh, evt));\n                            break;\n                    }\n                }\n                if (actionManager_1.hasSpecificTrigger(8)) {\n                    window.setTimeout(function () {\n                        var pickResult = scene.pick(_this._unTranslatedPointerX, _this._unTranslatedPointerY, function (mesh) {\n                            return ((mesh.isPickable &&\n                                mesh.isVisible &&\n                                mesh.isReady() &&\n                                mesh.actionManager &&\n                                mesh.actionManager.hasSpecificTrigger(8) &&\n                                mesh === _this._pickedDownMesh));\n                        }, false, scene.cameraToUseForPointers);\n                        if (pickResult && pickResult.hit && pickResult.pickedMesh && actionManager_1) {\n                            if (_this._totalPointersPressed !== 0 && Date.now() - _this._startingPointerTime > InputManager.LongPressDelay && !_this._isPointerSwiping()) {\n                                _this._startingPointerTime = 0;\n                                actionManager_1.processTrigger(8, ActionEvent.CreateNew(pickResult.pickedMesh, evt));\n                            }\n                        }\n                    }, InputManager.LongPressDelay);\n                }\n            }\n        }\n        else {\n            for (var _i = 0, _a = scene._pointerDownStage; _i < _a.length; _i++) {\n                var step = _a[_i];\n                pickResult = step.action(this._unTranslatedPointerX, this._unTranslatedPointerY, pickResult, evt);\n            }\n        }\n        if (pickResult) {\n            var type = PointerEventTypes.POINTERDOWN;\n            if (scene.onPointerDown) {\n                scene.onPointerDown(evt, pickResult, type);\n            }\n            if (scene.onPointerObservable.hasObservers()) {\n                var pi = new PointerInfo(type, evt, pickResult);\n                this._setRayOnPointerInfo(pi);\n                scene.onPointerObservable.notifyObservers(pi, type);\n            }\n        }\n    };\n    /**\n     * @hidden\n     * @returns Boolean if delta for pointer exceeds drag movement threshold\n     */\n    InputManager.prototype._isPointerSwiping = function () {\n        return (Math.abs(this._startingPointerPosition.x - this._pointerX) > InputManager.DragMovementThreshold ||\n            Math.abs(this._startingPointerPosition.y - this._pointerY) > InputManager.DragMovementThreshold);\n    };\n    /**\n     * Use this method to simulate a pointer up on a mesh\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\n     * @param pickResult - pickingInfo of the object wished to simulate pointer event on\n     * @param pointerEventInit - pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\n     * @param doubleTap - indicates that the pointer up event should be considered as part of a double click (false by default)\n     */\n    InputManager.prototype.simulatePointerUp = function (pickResult, pointerEventInit, doubleTap) {\n        var evt = new PointerEvent(\"pointerup\", pointerEventInit);\n        evt.inputIndex = PointerInput.Move;\n        var clickInfo = new _ClickInfo();\n        if (doubleTap) {\n            clickInfo.doubleClick = true;\n        }\n        else {\n            clickInfo.singleClick = true;\n        }\n        if (this._checkPrePointerObservable(pickResult, evt, PointerEventTypes.POINTERUP)) {\n            return;\n        }\n        this._processPointerUp(pickResult, evt, clickInfo);\n    };\n    InputManager.prototype._processPointerUp = function (pickResult, evt, clickInfo) {\n        var scene = this._scene;\n        if (pickResult && pickResult.hit && pickResult.pickedMesh) {\n            this._pickedUpMesh = pickResult.pickedMesh;\n            if (this._pickedDownMesh === this._pickedUpMesh) {\n                if (scene.onPointerPick) {\n                    scene.onPointerPick(evt, pickResult);\n                }\n                if (clickInfo.singleClick && !clickInfo.ignore && scene.onPointerObservable.hasObservers()) {\n                    var type_1 = PointerEventTypes.POINTERPICK;\n                    var pi = new PointerInfo(type_1, evt, pickResult);\n                    this._setRayOnPointerInfo(pi);\n                    scene.onPointerObservable.notifyObservers(pi, type_1);\n                }\n            }\n            var actionManager = pickResult.pickedMesh._getActionManagerForTrigger();\n            if (actionManager && !clickInfo.ignore) {\n                actionManager.processTrigger(7, ActionEvent.CreateNew(pickResult.pickedMesh, evt, pickResult));\n                if (!clickInfo.hasSwiped && clickInfo.singleClick) {\n                    actionManager.processTrigger(1, ActionEvent.CreateNew(pickResult.pickedMesh, evt, pickResult));\n                }\n                var doubleClickActionManager = pickResult.pickedMesh._getActionManagerForTrigger(6);\n                if (clickInfo.doubleClick && doubleClickActionManager) {\n                    doubleClickActionManager.processTrigger(6, ActionEvent.CreateNew(pickResult.pickedMesh, evt, pickResult));\n                }\n            }\n        }\n        else {\n            if (!clickInfo.ignore) {\n                for (var _i = 0, _a = scene._pointerUpStage; _i < _a.length; _i++) {\n                    var step = _a[_i];\n                    pickResult = step.action(this._unTranslatedPointerX, this._unTranslatedPointerY, pickResult, evt);\n                }\n            }\n        }\n        if (this._pickedDownMesh && this._pickedDownMesh !== this._pickedUpMesh) {\n            var pickedDownActionManager = this._pickedDownMesh._getActionManagerForTrigger(16);\n            if (pickedDownActionManager) {\n                pickedDownActionManager.processTrigger(16, ActionEvent.CreateNew(this._pickedDownMesh, evt));\n            }\n        }\n        var type = 0;\n        if (scene.onPointerObservable.hasObservers()) {\n            if (!clickInfo.ignore && !clickInfo.hasSwiped) {\n                if (clickInfo.singleClick && scene.onPointerObservable.hasSpecificMask(PointerEventTypes.POINTERTAP)) {\n                    type = PointerEventTypes.POINTERTAP;\n                }\n                else if (clickInfo.doubleClick && scene.onPointerObservable.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP)) {\n                    type = PointerEventTypes.POINTERDOUBLETAP;\n                }\n                if (type) {\n                    var pi = new PointerInfo(type, evt, pickResult);\n                    this._setRayOnPointerInfo(pi);\n                    scene.onPointerObservable.notifyObservers(pi, type);\n                }\n            }\n            if (!clickInfo.ignore) {\n                type = PointerEventTypes.POINTERUP;\n                var pi = new PointerInfo(type, evt, pickResult);\n                this._setRayOnPointerInfo(pi);\n                scene.onPointerObservable.notifyObservers(pi, type);\n            }\n        }\n        if (scene.onPointerUp && !clickInfo.ignore) {\n            scene.onPointerUp(evt, pickResult, type);\n        }\n    };\n    /**\n     * Gets a boolean indicating if the current pointer event is captured (meaning that the scene has already handled the pointer down)\n     * @param pointerId - defines the pointer id to use in a multi-touch scenario (0 by default)\n     * @returns true if the pointer was captured\n     */\n    InputManager.prototype.isPointerCaptured = function (pointerId) {\n        if (pointerId === void 0) { pointerId = 0; }\n        return this._pointerCaptures[pointerId];\n    };\n    /**\n     * Attach events to the canvas (To handle actionManagers triggers and raise onPointerMove, onPointerDown and onPointerUp\n     * @param attachUp - defines if you want to attach events to pointerup\n     * @param attachDown - defines if you want to attach events to pointerdown\n     * @param attachMove - defines if you want to attach events to pointermove\n     * @param elementToAttachTo - defines the target DOM element to attach to (will use the canvas by default)\n     */\n    InputManager.prototype.attachControl = function (attachUp, attachDown, attachMove, elementToAttachTo) {\n        var _this = this;\n        if (attachUp === void 0) { attachUp = true; }\n        if (attachDown === void 0) { attachDown = true; }\n        if (attachMove === void 0) { attachMove = true; }\n        if (elementToAttachTo === void 0) { elementToAttachTo = null; }\n        var scene = this._scene;\n        var engine = scene.getEngine();\n        if (!elementToAttachTo) {\n            elementToAttachTo = engine.getInputElement();\n        }\n        if (this._alreadyAttached) {\n            this.detachControl();\n        }\n        if (elementToAttachTo) {\n            this._alreadyAttachedTo = elementToAttachTo;\n        }\n        this._deviceSourceManager = new DeviceSourceManager(engine);\n        // Because this is only called from _initClickEvent, which is called in _onPointerUp, we'll use the pointerUpPredicate for the pick call\n        this._initActionManager = function (act) {\n            if (!_this._meshPickProceed) {\n                var pickResult = scene.skipPointerUpPicking\n                    ? null\n                    : scene.pick(_this._unTranslatedPointerX, _this._unTranslatedPointerY, scene.pointerUpPredicate, false, scene.cameraToUseForPointers);\n                _this._currentPickResult = pickResult;\n                if (pickResult) {\n                    act = pickResult.hit && pickResult.pickedMesh ? pickResult.pickedMesh._getActionManagerForTrigger() : null;\n                }\n                _this._meshPickProceed = true;\n            }\n            return act;\n        };\n        this._delayedSimpleClick = function (btn, clickInfo, cb) {\n            // double click delay is over and that no double click has been raised since, or the 2 consecutive keys pressed are different\n            if ((Date.now() - _this._previousStartingPointerTime > InputManager.DoubleClickDelay && !_this._doubleClickOccured) || btn !== _this._previousButtonPressed) {\n                _this._doubleClickOccured = false;\n                clickInfo.singleClick = true;\n                clickInfo.ignore = false;\n                cb(clickInfo, _this._currentPickResult);\n            }\n        };\n        this._initClickEvent = function (obs1, obs2, evt, cb) {\n            var clickInfo = new _ClickInfo();\n            _this._currentPickResult = null;\n            var act = null;\n            var checkPicking = obs1.hasSpecificMask(PointerEventTypes.POINTERPICK) ||\n                obs2.hasSpecificMask(PointerEventTypes.POINTERPICK) ||\n                obs1.hasSpecificMask(PointerEventTypes.POINTERTAP) ||\n                obs2.hasSpecificMask(PointerEventTypes.POINTERTAP) ||\n                obs1.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP) ||\n                obs2.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP);\n            if (!checkPicking && AbstractActionManager) {\n                act = _this._initActionManager(act, clickInfo);\n                if (act) {\n                    checkPicking = act.hasPickTriggers;\n                }\n            }\n            var needToIgnoreNext = false;\n            if (checkPicking) {\n                var btn = evt.button;\n                clickInfo.hasSwiped = _this._isPointerSwiping();\n                if (!clickInfo.hasSwiped) {\n                    var checkSingleClickImmediately = !InputManager.ExclusiveDoubleClickMode;\n                    if (!checkSingleClickImmediately) {\n                        checkSingleClickImmediately = !obs1.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP) && !obs2.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP);\n                        if (checkSingleClickImmediately && !AbstractActionManager.HasSpecificTrigger(6)) {\n                            act = _this._initActionManager(act, clickInfo);\n                            if (act) {\n                                checkSingleClickImmediately = !act.hasSpecificTrigger(6);\n                            }\n                        }\n                    }\n                    if (checkSingleClickImmediately) {\n                        // single click detected if double click delay is over or two different successive keys pressed without exclusive double click or no double click required\n                        if (Date.now() - _this._previousStartingPointerTime > InputManager.DoubleClickDelay || btn !== _this._previousButtonPressed) {\n                            clickInfo.singleClick = true;\n                            cb(clickInfo, _this._currentPickResult);\n                            needToIgnoreNext = true;\n                        }\n                    }\n                    // at least one double click is required to be check and exclusive double click is enabled\n                    else {\n                        // wait that no double click has been raised during the double click delay\n                        _this._previousDelayedSimpleClickTimeout = _this._delayedSimpleClickTimeout;\n                        _this._delayedSimpleClickTimeout = window.setTimeout(_this._delayedSimpleClick.bind(_this, btn, clickInfo, cb), InputManager.DoubleClickDelay);\n                    }\n                    var checkDoubleClick = obs1.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP) || obs2.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP);\n                    if (!checkDoubleClick && AbstractActionManager.HasSpecificTrigger(6)) {\n                        act = _this._initActionManager(act, clickInfo);\n                        if (act) {\n                            checkDoubleClick = act.hasSpecificTrigger(6);\n                        }\n                    }\n                    if (checkDoubleClick) {\n                        // two successive keys pressed are equal, double click delay is not over and double click has not just occurred\n                        if (btn === _this._previousButtonPressed && Date.now() - _this._previousStartingPointerTime < InputManager.DoubleClickDelay && !_this._doubleClickOccured) {\n                            // pointer has not moved for 2 clicks, it's a double click\n                            if (!clickInfo.hasSwiped && !_this._isPointerSwiping()) {\n                                _this._previousStartingPointerTime = 0;\n                                _this._doubleClickOccured = true;\n                                clickInfo.doubleClick = true;\n                                clickInfo.ignore = false;\n                                if (InputManager.ExclusiveDoubleClickMode && _this._previousDelayedSimpleClickTimeout) {\n                                    clearTimeout(_this._previousDelayedSimpleClickTimeout);\n                                }\n                                _this._previousDelayedSimpleClickTimeout = _this._delayedSimpleClickTimeout;\n                                cb(clickInfo, _this._currentPickResult);\n                            }\n                            // if the two successive clicks are too far, it's just two simple clicks\n                            else {\n                                _this._doubleClickOccured = false;\n                                _this._previousStartingPointerTime = _this._startingPointerTime;\n                                _this._previousStartingPointerPosition.x = _this._startingPointerPosition.x;\n                                _this._previousStartingPointerPosition.y = _this._startingPointerPosition.y;\n                                _this._previousButtonPressed = btn;\n                                if (InputManager.ExclusiveDoubleClickMode) {\n                                    if (_this._previousDelayedSimpleClickTimeout) {\n                                        clearTimeout(_this._previousDelayedSimpleClickTimeout);\n                                    }\n                                    _this._previousDelayedSimpleClickTimeout = _this._delayedSimpleClickTimeout;\n                                    cb(clickInfo, _this._previousPickResult);\n                                }\n                                else {\n                                    cb(clickInfo, _this._currentPickResult);\n                                }\n                            }\n                            needToIgnoreNext = true;\n                        }\n                        // just the first click of the double has been raised\n                        else {\n                            _this._doubleClickOccured = false;\n                            _this._previousStartingPointerTime = _this._startingPointerTime;\n                            _this._previousStartingPointerPosition.x = _this._startingPointerPosition.x;\n                            _this._previousStartingPointerPosition.y = _this._startingPointerPosition.y;\n                            _this._previousButtonPressed = btn;\n                        }\n                    }\n                }\n            }\n            if (!needToIgnoreNext) {\n                cb(clickInfo, _this._currentPickResult);\n            }\n        };\n        this._onPointerMove = function (evt) {\n            // preserve compatibility with Safari when pointerId is not present\n            if (evt.pointerId === undefined) {\n                evt.pointerId = 0;\n            }\n            _this._updatePointerPosition(evt);\n            // PreObservable support\n            if (_this._checkPrePointerObservable(null, evt, evt.type === \"wheel\" || evt.type === \"mousewheel\" || evt.type === \"DOMMouseScroll\" ? PointerEventTypes.POINTERWHEEL : PointerEventTypes.POINTERMOVE)) {\n                return;\n            }\n            if (!scene.cameraToUseForPointers && !scene.activeCamera) {\n                return;\n            }\n            if (scene.skipPointerMovePicking) {\n                _this._processPointerMove(new PickingInfo(), evt);\n                return;\n            }\n            if (!scene.pointerMovePredicate) {\n                scene.pointerMovePredicate = function (mesh) {\n                    return mesh.isPickable &&\n                        mesh.isVisible &&\n                        mesh.isReady() &&\n                        mesh.isEnabled() &&\n                        (mesh.enablePointerMoveEvents || scene.constantlyUpdateMeshUnderPointer || mesh._getActionManagerForTrigger() !== null) &&\n                        (!scene.cameraToUseForPointers || (scene.cameraToUseForPointers.layerMask & mesh.layerMask) !== 0);\n                };\n            }\n            // Meshes\n            var pickResult = scene.pick(_this._unTranslatedPointerX, _this._unTranslatedPointerY, scene.pointerMovePredicate, false, scene.cameraToUseForPointers, scene.pointerMoveTrianglePredicate);\n            _this._processPointerMove(pickResult, evt);\n        };\n        this._onPointerDown = function (evt) {\n            _this._totalPointersPressed++;\n            _this._pickedDownMesh = null;\n            _this._meshPickProceed = false;\n            // preserve compatibility with Safari when pointerId is not present\n            if (evt.pointerId === undefined) {\n                evt.pointerId = 0;\n            }\n            _this._updatePointerPosition(evt);\n            if (scene.preventDefaultOnPointerDown && elementToAttachTo) {\n                evt.preventDefault();\n                elementToAttachTo.focus();\n            }\n            _this._startingPointerPosition.x = _this._pointerX;\n            _this._startingPointerPosition.y = _this._pointerY;\n            _this._startingPointerTime = Date.now();\n            // PreObservable support\n            if (_this._checkPrePointerObservable(null, evt, PointerEventTypes.POINTERDOWN)) {\n                return;\n            }\n            if (!scene.cameraToUseForPointers && !scene.activeCamera) {\n                return;\n            }\n            _this._pointerCaptures[evt.pointerId] = true;\n            if (!scene.pointerDownPredicate) {\n                scene.pointerDownPredicate = function (mesh) {\n                    return (mesh.isPickable &&\n                        mesh.isVisible &&\n                        mesh.isReady() &&\n                        mesh.isEnabled() &&\n                        (!scene.cameraToUseForPointers || (scene.cameraToUseForPointers.layerMask & mesh.layerMask) !== 0));\n                };\n            }\n            // Meshes\n            _this._pickedDownMesh = null;\n            var pickResult;\n            if (scene.skipPointerDownPicking) {\n                pickResult = new PickingInfo();\n            }\n            else {\n                pickResult = scene.pick(_this._unTranslatedPointerX, _this._unTranslatedPointerY, scene.pointerDownPredicate, false, scene.cameraToUseForPointers);\n            }\n            _this._processPointerDown(pickResult, evt);\n        };\n        this._onPointerUp = function (evt) {\n            if (_this._totalPointersPressed === 0) {\n                // We are attaching the pointer up to windows because of a bug in FF\n                return; // So we need to test it the pointer down was pressed before.\n            }\n            _this._totalPointersPressed--;\n            _this._pickedUpMesh = null;\n            _this._meshPickProceed = false;\n            // preserve compatibility with Safari when pointerId is not present\n            if (evt.pointerId === undefined) {\n                evt.pointerId = 0;\n            }\n            _this._updatePointerPosition(evt);\n            if (scene.preventDefaultOnPointerUp && elementToAttachTo) {\n                evt.preventDefault();\n                elementToAttachTo.focus();\n            }\n            _this._initClickEvent(scene.onPrePointerObservable, scene.onPointerObservable, evt, function (clickInfo, pickResult) {\n                // PreObservable support\n                if (scene.onPrePointerObservable.hasObservers()) {\n                    if (!clickInfo.ignore) {\n                        if (!clickInfo.hasSwiped) {\n                            if (clickInfo.singleClick && scene.onPrePointerObservable.hasSpecificMask(PointerEventTypes.POINTERTAP)) {\n                                if (_this._checkPrePointerObservable(null, evt, PointerEventTypes.POINTERTAP)) {\n                                    return;\n                                }\n                            }\n                            if (clickInfo.doubleClick && scene.onPrePointerObservable.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP)) {\n                                if (_this._checkPrePointerObservable(null, evt, PointerEventTypes.POINTERDOUBLETAP)) {\n                                    return;\n                                }\n                            }\n                        }\n                        if (_this._checkPrePointerObservable(null, evt, PointerEventTypes.POINTERUP)) {\n                            return;\n                        }\n                    }\n                }\n                if (!_this._pointerCaptures[evt.pointerId] && evt.buttons > 0) {\n                    return;\n                }\n                _this._pointerCaptures[evt.pointerId] = false;\n                if (!scene.cameraToUseForPointers && !scene.activeCamera) {\n                    return;\n                }\n                if (!scene.pointerUpPredicate) {\n                    scene.pointerUpPredicate = function (mesh) {\n                        return (mesh.isPickable &&\n                            mesh.isVisible &&\n                            mesh.isReady() &&\n                            mesh.isEnabled() &&\n                            (!scene.cameraToUseForPointers || (scene.cameraToUseForPointers.layerMask & mesh.layerMask) !== 0));\n                    };\n                }\n                // Meshes\n                if (!_this._meshPickProceed && ((AbstractActionManager && AbstractActionManager.HasTriggers) || scene.onPointerObservable.hasObservers())) {\n                    _this._initActionManager(null, clickInfo);\n                }\n                if (!pickResult) {\n                    pickResult = _this._currentPickResult;\n                }\n                _this._processPointerUp(pickResult, evt, clickInfo);\n                _this._previousPickResult = _this._currentPickResult;\n            });\n        };\n        this._onKeyDown = function (evt) {\n            var type = KeyboardEventTypes.KEYDOWN;\n            if (scene.onPreKeyboardObservable.hasObservers()) {\n                var pi = new KeyboardInfoPre(type, evt);\n                scene.onPreKeyboardObservable.notifyObservers(pi, type);\n                if (pi.skipOnKeyboardObservable) {\n                    return;\n                }\n            }\n            if (scene.onKeyboardObservable.hasObservers()) {\n                var pi = new KeyboardInfo(type, evt);\n                scene.onKeyboardObservable.notifyObservers(pi, type);\n            }\n            if (scene.actionManager) {\n                scene.actionManager.processTrigger(14, ActionEvent.CreateNewFromScene(scene, evt));\n            }\n        };\n        this._onKeyUp = function (evt) {\n            var type = KeyboardEventTypes.KEYUP;\n            if (scene.onPreKeyboardObservable.hasObservers()) {\n                var pi = new KeyboardInfoPre(type, evt);\n                scene.onPreKeyboardObservable.notifyObservers(pi, type);\n                if (pi.skipOnKeyboardObservable) {\n                    return;\n                }\n            }\n            if (scene.onKeyboardObservable.hasObservers()) {\n                var pi = new KeyboardInfo(type, evt);\n                scene.onKeyboardObservable.notifyObservers(pi, type);\n            }\n            if (scene.actionManager) {\n                scene.actionManager.processTrigger(15, ActionEvent.CreateNewFromScene(scene, evt));\n            }\n        };\n        // If a device connects that we can handle, wire up the observable\n        this._deviceSourceManager.onDeviceConnectedObservable.add(function (deviceSource) {\n            if (deviceSource.deviceType === DeviceType.Mouse) {\n                deviceSource.onInputChangedObservable.add(function (eventData) {\n                    if (eventData.inputIndex === PointerInput.LeftClick || eventData.inputIndex === PointerInput.MiddleClick || eventData.inputIndex === PointerInput.RightClick) {\n                        if (attachDown && deviceSource.getInput(eventData.inputIndex) === 1) {\n                            _this._onPointerDown(eventData);\n                        }\n                        else if (attachUp && deviceSource.getInput(eventData.inputIndex) === 0) {\n                            _this._onPointerUp(eventData);\n                        }\n                    }\n                    else if (attachMove) {\n                        if (eventData.inputIndex === PointerInput.Move) {\n                            _this._onPointerMove(eventData);\n                        }\n                        else if (eventData.inputIndex === PointerInput.MouseWheelX ||\n                            eventData.inputIndex === PointerInput.MouseWheelY ||\n                            eventData.inputIndex === PointerInput.MouseWheelZ) {\n                            _this._onPointerMove(eventData);\n                        }\n                    }\n                });\n            }\n            else if (deviceSource.deviceType === DeviceType.Touch) {\n                deviceSource.onInputChangedObservable.add(function (eventData) {\n                    if (eventData.inputIndex === PointerInput.LeftClick) {\n                        if (attachDown && deviceSource.getInput(eventData.inputIndex) === 1) {\n                            _this._onPointerDown(eventData);\n                        }\n                        else if (attachUp && deviceSource.getInput(eventData.inputIndex) === 0) {\n                            _this._onPointerUp(eventData);\n                        }\n                    }\n                    if (attachMove && eventData.inputIndex === PointerInput.Move) {\n                        _this._onPointerMove(eventData);\n                    }\n                });\n            }\n            else if (deviceSource.deviceType === DeviceType.Keyboard) {\n                deviceSource.onInputChangedObservable.add(function (eventData) {\n                    if (eventData.type === \"keydown\") {\n                        _this._onKeyDown(eventData);\n                    }\n                    else if (eventData.type === \"keyup\") {\n                        _this._onKeyUp(eventData);\n                    }\n                });\n            }\n        });\n        this._alreadyAttached = true;\n    };\n    /**\n     * Detaches all event handlers\n     */\n    InputManager.prototype.detachControl = function () {\n        if (this._alreadyAttached) {\n            this._deviceSourceManager.dispose();\n            this._deviceSourceManager = null;\n            // Cursor\n            if (this._alreadyAttachedTo && !this._scene.doNotHandleCursors) {\n                this._alreadyAttachedTo.style.cursor = this._scene.defaultCursor;\n            }\n            this._alreadyAttached = false;\n            this._alreadyAttachedTo = null;\n        }\n    };\n    /**\n     * Force the value of meshUnderPointer\n     * @param mesh - defines the mesh to use\n     * @param pointerId - optional pointer id when using more than one pointer. Defaults to 0\n     * @param pickResult - optional pickingInfo data used to find mesh\n     */\n    InputManager.prototype.setPointerOverMesh = function (mesh, pointerId, pickResult) {\n        if (pointerId === void 0) { pointerId = 0; }\n        if (this._meshUnderPointerId[pointerId] === mesh) {\n            return;\n        }\n        var underPointerMesh = this._meshUnderPointerId[pointerId];\n        var actionManager;\n        if (underPointerMesh) {\n            actionManager = underPointerMesh._getActionManagerForTrigger(10);\n            if (actionManager) {\n                actionManager.processTrigger(10, ActionEvent.CreateNew(underPointerMesh, undefined, { pointerId: pointerId }));\n            }\n        }\n        if (mesh) {\n            this._meshUnderPointerId[pointerId] = mesh;\n            this._pointerOverMesh = mesh;\n            actionManager = mesh._getActionManagerForTrigger(9);\n            if (actionManager) {\n                actionManager.processTrigger(9, ActionEvent.CreateNew(mesh, undefined, { pointerId: pointerId, pickResult: pickResult }));\n            }\n        }\n        else {\n            delete this._meshUnderPointerId[pointerId];\n            this._pointerOverMesh = null;\n        }\n    };\n    /**\n     * Gets the mesh under the pointer\n     * @returns a Mesh or null if no mesh is under the pointer\n     */\n    InputManager.prototype.getPointerOverMesh = function () {\n        return this._pointerOverMesh;\n    };\n    /**\n     * @param mesh - Mesh to invalidate\n     * @hidden\n     */\n    InputManager.prototype._invalidateMesh = function (mesh) {\n        if (this._pointerOverMesh === mesh) {\n            this._pointerOverMesh = null;\n        }\n        if (this._pickedDownMesh === mesh) {\n            this._pickedDownMesh = null;\n        }\n        if (this._pickedUpMesh === mesh) {\n            this._pickedUpMesh = null;\n        }\n        for (var pointerId in this._meshUnderPointerId) {\n            if (this._meshUnderPointerId[pointerId] === mesh) {\n                delete this._meshUnderPointerId[pointerId];\n            }\n        }\n    };\n    /** The distance in pixel that you have to move to prevent some events */\n    InputManager.DragMovementThreshold = 10; // in pixels\n    /** Time in milliseconds to wait to raise long press events if button is still pressed */\n    InputManager.LongPressDelay = 500; // in milliseconds\n    /** Time in milliseconds with two consecutive clicks will be considered as a double click */\n    InputManager.DoubleClickDelay = 300; // in milliseconds\n    /** If you need to check double click without raising a single click at first click, enable this flag */\n    InputManager.ExclusiveDoubleClickMode = false;\n    return InputManager;\n}());\nexport { InputManager };\n//# sourceMappingURL=scene.inputManager.js.map","import { PerfCounter } from \"../Misc/perfCounter.js\";\n/**\n * This class can be used to get instrumentation data from a Babylon engine\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\n */\nvar EngineInstrumentation = /** @class */ (function () {\n    /**\n     * Instantiates a new engine instrumentation.\n     * This class can be used to get instrumentation data from a Babylon engine\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\n     * @param engine Defines the engine to instrument\n     */\n    function EngineInstrumentation(\n    /**\n     * Define the instrumented engine.\n     */\n    engine) {\n        this.engine = engine;\n        this._captureGPUFrameTime = false;\n        this._captureShaderCompilationTime = false;\n        this._shaderCompilationTime = new PerfCounter();\n        // Observers\n        this._onBeginFrameObserver = null;\n        this._onEndFrameObserver = null;\n        this._onBeforeShaderCompilationObserver = null;\n        this._onAfterShaderCompilationObserver = null;\n    }\n    Object.defineProperty(EngineInstrumentation.prototype, \"gpuFrameTimeCounter\", {\n        // Properties\n        /**\n         * Gets the perf counter used for GPU frame time\n         */\n        get: function () {\n            return this.engine.getGPUFrameTimeCounter();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EngineInstrumentation.prototype, \"captureGPUFrameTime\", {\n        /**\n         * Gets the GPU frame time capture status\n         */\n        get: function () {\n            return this._captureGPUFrameTime;\n        },\n        /**\n         * Enable or disable the GPU frame time capture\n         */\n        set: function (value) {\n            if (value === this._captureGPUFrameTime) {\n                return;\n            }\n            this._captureGPUFrameTime = value;\n            this.engine.captureGPUFrameTime(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EngineInstrumentation.prototype, \"shaderCompilationTimeCounter\", {\n        /**\n         * Gets the perf counter used for shader compilation time\n         */\n        get: function () {\n            return this._shaderCompilationTime;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EngineInstrumentation.prototype, \"captureShaderCompilationTime\", {\n        /**\n         * Gets the shader compilation time capture status\n         */\n        get: function () {\n            return this._captureShaderCompilationTime;\n        },\n        /**\n         * Enable or disable the shader compilation time capture\n         */\n        set: function (value) {\n            var _this = this;\n            if (value === this._captureShaderCompilationTime) {\n                return;\n            }\n            this._captureShaderCompilationTime = value;\n            if (value) {\n                this._onBeforeShaderCompilationObserver = this.engine.onBeforeShaderCompilationObservable.add(function () {\n                    _this._shaderCompilationTime.fetchNewFrame();\n                    _this._shaderCompilationTime.beginMonitoring();\n                });\n                this._onAfterShaderCompilationObserver = this.engine.onAfterShaderCompilationObservable.add(function () {\n                    _this._shaderCompilationTime.endMonitoring();\n                });\n            }\n            else {\n                this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\n                this._onBeforeShaderCompilationObserver = null;\n                this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\n                this._onAfterShaderCompilationObserver = null;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Dispose and release associated resources.\n     */\n    EngineInstrumentation.prototype.dispose = function () {\n        this.engine.onBeginFrameObservable.remove(this._onBeginFrameObserver);\n        this._onBeginFrameObserver = null;\n        this.engine.onEndFrameObservable.remove(this._onEndFrameObserver);\n        this._onEndFrameObserver = null;\n        this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\n        this._onBeforeShaderCompilationObserver = null;\n        this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\n        this._onAfterShaderCompilationObserver = null;\n        this.engine = null;\n    };\n    return EngineInstrumentation;\n}());\nexport { EngineInstrumentation };\n//# sourceMappingURL=engineInstrumentation.js.map","import { Tools } from \"../Misc/tools.js\";\nimport { PerfCounter } from \"../Misc/perfCounter.js\";\n/**\n * This class can be used to get instrumentation data from a Babylon engine\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#sceneinstrumentation\n */\nvar SceneInstrumentation = /** @class */ (function () {\n    /**\n     * Instantiates a new scene instrumentation.\n     * This class can be used to get instrumentation data from a Babylon engine\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#sceneinstrumentation\n     * @param scene Defines the scene to instrument\n     */\n    function SceneInstrumentation(\n    /**\n     * Defines the scene to instrument\n     */\n    scene) {\n        var _this = this;\n        this.scene = scene;\n        this._captureActiveMeshesEvaluationTime = false;\n        this._activeMeshesEvaluationTime = new PerfCounter();\n        this._captureRenderTargetsRenderTime = false;\n        this._renderTargetsRenderTime = new PerfCounter();\n        this._captureFrameTime = false;\n        this._frameTime = new PerfCounter();\n        this._captureRenderTime = false;\n        this._renderTime = new PerfCounter();\n        this._captureInterFrameTime = false;\n        this._interFrameTime = new PerfCounter();\n        this._captureParticlesRenderTime = false;\n        this._particlesRenderTime = new PerfCounter();\n        this._captureSpritesRenderTime = false;\n        this._spritesRenderTime = new PerfCounter();\n        this._capturePhysicsTime = false;\n        this._physicsTime = new PerfCounter();\n        this._captureAnimationsTime = false;\n        this._animationsTime = new PerfCounter();\n        this._captureCameraRenderTime = false;\n        this._cameraRenderTime = new PerfCounter();\n        // Observers\n        this._onBeforeActiveMeshesEvaluationObserver = null;\n        this._onAfterActiveMeshesEvaluationObserver = null;\n        this._onBeforeRenderTargetsRenderObserver = null;\n        this._onAfterRenderTargetsRenderObserver = null;\n        this._onAfterRenderObserver = null;\n        this._onBeforeDrawPhaseObserver = null;\n        this._onAfterDrawPhaseObserver = null;\n        this._onBeforeAnimationsObserver = null;\n        this._onBeforeParticlesRenderingObserver = null;\n        this._onAfterParticlesRenderingObserver = null;\n        this._onBeforeSpritesRenderingObserver = null;\n        this._onAfterSpritesRenderingObserver = null;\n        this._onBeforePhysicsObserver = null;\n        this._onAfterPhysicsObserver = null;\n        this._onAfterAnimationsObserver = null;\n        this._onBeforeCameraRenderObserver = null;\n        this._onAfterCameraRenderObserver = null;\n        // Before render\n        this._onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(function () {\n            if (_this._captureActiveMeshesEvaluationTime) {\n                _this._activeMeshesEvaluationTime.fetchNewFrame();\n            }\n            if (_this._captureRenderTargetsRenderTime) {\n                _this._renderTargetsRenderTime.fetchNewFrame();\n            }\n            if (_this._captureFrameTime) {\n                Tools.StartPerformanceCounter(\"Scene rendering\");\n                _this._frameTime.beginMonitoring();\n            }\n            if (_this._captureInterFrameTime) {\n                _this._interFrameTime.endMonitoring();\n            }\n            if (_this._captureParticlesRenderTime) {\n                _this._particlesRenderTime.fetchNewFrame();\n            }\n            if (_this._captureSpritesRenderTime) {\n                _this._spritesRenderTime.fetchNewFrame();\n            }\n            if (_this._captureAnimationsTime) {\n                _this._animationsTime.beginMonitoring();\n            }\n            _this.scene.getEngine()._drawCalls.fetchNewFrame();\n        });\n        // After render\n        this._onAfterRenderObserver = scene.onAfterRenderObservable.add(function () {\n            if (_this._captureFrameTime) {\n                Tools.EndPerformanceCounter(\"Scene rendering\");\n                _this._frameTime.endMonitoring();\n            }\n            if (_this._captureRenderTime) {\n                _this._renderTime.endMonitoring(false);\n            }\n            if (_this._captureInterFrameTime) {\n                _this._interFrameTime.beginMonitoring();\n            }\n        });\n    }\n    Object.defineProperty(SceneInstrumentation.prototype, \"activeMeshesEvaluationTimeCounter\", {\n        // Properties\n        /**\n         * Gets the perf counter used for active meshes evaluation time\n         */\n        get: function () {\n            return this._activeMeshesEvaluationTime;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"captureActiveMeshesEvaluationTime\", {\n        /**\n         * Gets the active meshes evaluation time capture status\n         */\n        get: function () {\n            return this._captureActiveMeshesEvaluationTime;\n        },\n        /**\n         * Enable or disable the active meshes evaluation time capture\n         */\n        set: function (value) {\n            var _this = this;\n            if (value === this._captureActiveMeshesEvaluationTime) {\n                return;\n            }\n            this._captureActiveMeshesEvaluationTime = value;\n            if (value) {\n                this._onBeforeActiveMeshesEvaluationObserver = this.scene.onBeforeActiveMeshesEvaluationObservable.add(function () {\n                    Tools.StartPerformanceCounter(\"Active meshes evaluation\");\n                    _this._activeMeshesEvaluationTime.beginMonitoring();\n                });\n                this._onAfterActiveMeshesEvaluationObserver = this.scene.onAfterActiveMeshesEvaluationObservable.add(function () {\n                    Tools.EndPerformanceCounter(\"Active meshes evaluation\");\n                    _this._activeMeshesEvaluationTime.endMonitoring();\n                });\n            }\n            else {\n                this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\n                this._onBeforeActiveMeshesEvaluationObserver = null;\n                this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\n                this._onAfterActiveMeshesEvaluationObserver = null;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"renderTargetsRenderTimeCounter\", {\n        /**\n         * Gets the perf counter used for render targets render time\n         */\n        get: function () {\n            return this._renderTargetsRenderTime;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"captureRenderTargetsRenderTime\", {\n        /**\n         * Gets the render targets render time capture status\n         */\n        get: function () {\n            return this._captureRenderTargetsRenderTime;\n        },\n        /**\n         * Enable or disable the render targets render time capture\n         */\n        set: function (value) {\n            var _this = this;\n            if (value === this._captureRenderTargetsRenderTime) {\n                return;\n            }\n            this._captureRenderTargetsRenderTime = value;\n            if (value) {\n                this._onBeforeRenderTargetsRenderObserver = this.scene.onBeforeRenderTargetsRenderObservable.add(function () {\n                    Tools.StartPerformanceCounter(\"Render targets rendering\");\n                    _this._renderTargetsRenderTime.beginMonitoring();\n                });\n                this._onAfterRenderTargetsRenderObserver = this.scene.onAfterRenderTargetsRenderObservable.add(function () {\n                    Tools.EndPerformanceCounter(\"Render targets rendering\");\n                    _this._renderTargetsRenderTime.endMonitoring(false);\n                });\n            }\n            else {\n                this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\n                this._onBeforeRenderTargetsRenderObserver = null;\n                this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\n                this._onAfterRenderTargetsRenderObserver = null;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"particlesRenderTimeCounter\", {\n        /**\n         * Gets the perf counter used for particles render time\n         */\n        get: function () {\n            return this._particlesRenderTime;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"captureParticlesRenderTime\", {\n        /**\n         * Gets the particles render time capture status\n         */\n        get: function () {\n            return this._captureParticlesRenderTime;\n        },\n        /**\n         * Enable or disable the particles render time capture\n         */\n        set: function (value) {\n            var _this = this;\n            if (value === this._captureParticlesRenderTime) {\n                return;\n            }\n            this._captureParticlesRenderTime = value;\n            if (value) {\n                this._onBeforeParticlesRenderingObserver = this.scene.onBeforeParticlesRenderingObservable.add(function () {\n                    Tools.StartPerformanceCounter(\"Particles\");\n                    _this._particlesRenderTime.beginMonitoring();\n                });\n                this._onAfterParticlesRenderingObserver = this.scene.onAfterParticlesRenderingObservable.add(function () {\n                    Tools.EndPerformanceCounter(\"Particles\");\n                    _this._particlesRenderTime.endMonitoring(false);\n                });\n            }\n            else {\n                this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\n                this._onBeforeParticlesRenderingObserver = null;\n                this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\n                this._onAfterParticlesRenderingObserver = null;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"spritesRenderTimeCounter\", {\n        /**\n         * Gets the perf counter used for sprites render time\n         */\n        get: function () {\n            return this._spritesRenderTime;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"captureSpritesRenderTime\", {\n        /**\n         * Gets the sprites render time capture status\n         */\n        get: function () {\n            return this._captureSpritesRenderTime;\n        },\n        /**\n         * Enable or disable the sprites render time capture\n         */\n        set: function (value) {\n            var _this = this;\n            if (value === this._captureSpritesRenderTime) {\n                return;\n            }\n            this._captureSpritesRenderTime = value;\n            if (!this.scene.spriteManagers) {\n                return;\n            }\n            if (value) {\n                this._onBeforeSpritesRenderingObserver = this.scene.onBeforeSpritesRenderingObservable.add(function () {\n                    Tools.StartPerformanceCounter(\"Sprites\");\n                    _this._spritesRenderTime.beginMonitoring();\n                });\n                this._onAfterSpritesRenderingObserver = this.scene.onAfterSpritesRenderingObservable.add(function () {\n                    Tools.EndPerformanceCounter(\"Sprites\");\n                    _this._spritesRenderTime.endMonitoring(false);\n                });\n            }\n            else {\n                this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\n                this._onBeforeSpritesRenderingObserver = null;\n                this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\n                this._onAfterSpritesRenderingObserver = null;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"physicsTimeCounter\", {\n        /**\n         * Gets the perf counter used for physics time\n         */\n        get: function () {\n            return this._physicsTime;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"capturePhysicsTime\", {\n        /**\n         * Gets the physics time capture status\n         */\n        get: function () {\n            return this._capturePhysicsTime;\n        },\n        /**\n         * Enable or disable the physics time capture\n         */\n        set: function (value) {\n            var _this = this;\n            if (value === this._capturePhysicsTime) {\n                return;\n            }\n            if (!this.scene.onBeforePhysicsObservable) {\n                return;\n            }\n            this._capturePhysicsTime = value;\n            if (value) {\n                this._onBeforePhysicsObserver = this.scene.onBeforePhysicsObservable.add(function () {\n                    Tools.StartPerformanceCounter(\"Physics\");\n                    _this._physicsTime.beginMonitoring();\n                });\n                this._onAfterPhysicsObserver = this.scene.onAfterPhysicsObservable.add(function () {\n                    Tools.EndPerformanceCounter(\"Physics\");\n                    _this._physicsTime.endMonitoring();\n                });\n            }\n            else {\n                this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\n                this._onBeforePhysicsObserver = null;\n                this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\n                this._onAfterPhysicsObserver = null;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"animationsTimeCounter\", {\n        /**\n         * Gets the perf counter used for animations time\n         */\n        get: function () {\n            return this._animationsTime;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"captureAnimationsTime\", {\n        /**\n         * Gets the animations time capture status\n         */\n        get: function () {\n            return this._captureAnimationsTime;\n        },\n        /**\n         * Enable or disable the animations time capture\n         */\n        set: function (value) {\n            var _this = this;\n            if (value === this._captureAnimationsTime) {\n                return;\n            }\n            this._captureAnimationsTime = value;\n            if (value) {\n                this._onAfterAnimationsObserver = this.scene.onAfterAnimationsObservable.add(function () {\n                    _this._animationsTime.endMonitoring();\n                });\n            }\n            else {\n                this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\n                this._onAfterAnimationsObserver = null;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"frameTimeCounter\", {\n        /**\n         * Gets the perf counter used for frame time capture\n         */\n        get: function () {\n            return this._frameTime;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"captureFrameTime\", {\n        /**\n         * Gets the frame time capture status\n         */\n        get: function () {\n            return this._captureFrameTime;\n        },\n        /**\n         * Enable or disable the frame time capture\n         */\n        set: function (value) {\n            this._captureFrameTime = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"interFrameTimeCounter\", {\n        /**\n         * Gets the perf counter used for inter-frames time capture\n         */\n        get: function () {\n            return this._interFrameTime;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"captureInterFrameTime\", {\n        /**\n         * Gets the inter-frames time capture status\n         */\n        get: function () {\n            return this._captureInterFrameTime;\n        },\n        /**\n         * Enable or disable the inter-frames time capture\n         */\n        set: function (value) {\n            this._captureInterFrameTime = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"renderTimeCounter\", {\n        /**\n         * Gets the perf counter used for render time capture\n         */\n        get: function () {\n            return this._renderTime;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"captureRenderTime\", {\n        /**\n         * Gets the render time capture status\n         */\n        get: function () {\n            return this._captureRenderTime;\n        },\n        /**\n         * Enable or disable the render time capture\n         */\n        set: function (value) {\n            var _this = this;\n            if (value === this._captureRenderTime) {\n                return;\n            }\n            this._captureRenderTime = value;\n            if (value) {\n                this._onBeforeDrawPhaseObserver = this.scene.onBeforeDrawPhaseObservable.add(function () {\n                    _this._renderTime.beginMonitoring();\n                    Tools.StartPerformanceCounter(\"Main render\");\n                });\n                this._onAfterDrawPhaseObserver = this.scene.onAfterDrawPhaseObservable.add(function () {\n                    _this._renderTime.endMonitoring(false);\n                    Tools.EndPerformanceCounter(\"Main render\");\n                });\n            }\n            else {\n                this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\n                this._onBeforeDrawPhaseObserver = null;\n                this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\n                this._onAfterDrawPhaseObserver = null;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"cameraRenderTimeCounter\", {\n        /**\n         * Gets the perf counter used for camera render time capture\n         */\n        get: function () {\n            return this._cameraRenderTime;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"captureCameraRenderTime\", {\n        /**\n         * Gets the camera render time capture status\n         */\n        get: function () {\n            return this._captureCameraRenderTime;\n        },\n        /**\n         * Enable or disable the camera render time capture\n         */\n        set: function (value) {\n            var _this = this;\n            if (value === this._captureCameraRenderTime) {\n                return;\n            }\n            this._captureCameraRenderTime = value;\n            if (value) {\n                this._onBeforeCameraRenderObserver = this.scene.onBeforeCameraRenderObservable.add(function (camera) {\n                    _this._cameraRenderTime.beginMonitoring();\n                    Tools.StartPerformanceCounter(\"Rendering camera \".concat(camera.name));\n                });\n                this._onAfterCameraRenderObserver = this.scene.onAfterCameraRenderObservable.add(function (camera) {\n                    _this._cameraRenderTime.endMonitoring(false);\n                    Tools.EndPerformanceCounter(\"Rendering camera \".concat(camera.name));\n                });\n            }\n            else {\n                this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n                this._onBeforeCameraRenderObserver = null;\n                this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n                this._onAfterCameraRenderObserver = null;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SceneInstrumentation.prototype, \"drawCallsCounter\", {\n        /**\n         * Gets the perf counter used for draw calls\n         */\n        get: function () {\n            return this.scene.getEngine()._drawCalls;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Dispose and release associated resources.\n     */\n    SceneInstrumentation.prototype.dispose = function () {\n        this.scene.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n        this._onAfterRenderObserver = null;\n        this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\n        this._onBeforeActiveMeshesEvaluationObserver = null;\n        this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\n        this._onAfterActiveMeshesEvaluationObserver = null;\n        this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\n        this._onBeforeRenderTargetsRenderObserver = null;\n        this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\n        this._onAfterRenderTargetsRenderObserver = null;\n        this.scene.onBeforeAnimationsObservable.remove(this._onBeforeAnimationsObserver);\n        this._onBeforeAnimationsObserver = null;\n        this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\n        this._onBeforeParticlesRenderingObserver = null;\n        this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\n        this._onAfterParticlesRenderingObserver = null;\n        if (this._onBeforeSpritesRenderingObserver) {\n            this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\n            this._onBeforeSpritesRenderingObserver = null;\n        }\n        if (this._onAfterSpritesRenderingObserver) {\n            this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\n            this._onAfterSpritesRenderingObserver = null;\n        }\n        this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\n        this._onBeforeDrawPhaseObserver = null;\n        this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\n        this._onAfterDrawPhaseObserver = null;\n        if (this._onBeforePhysicsObserver) {\n            this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\n            this._onBeforePhysicsObserver = null;\n        }\n        if (this._onAfterPhysicsObserver) {\n            this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\n            this._onAfterPhysicsObserver = null;\n        }\n        this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\n        this._onAfterAnimationsObserver = null;\n        this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n        this._onBeforeCameraRenderObserver = null;\n        this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n        this._onAfterCameraRenderObserver = null;\n        this.scene = null;\n    };\n    return SceneInstrumentation;\n}());\nexport { SceneInstrumentation };\n//# sourceMappingURL=sceneInstrumentation.js.map","/**\n * @hidden\n **/\n// eslint-disable-next-line @typescript-eslint/naming-convention\nvar _TimeToken = /** @class */ (function () {\n    function _TimeToken() {\n        this._timeElapsedQueryEnded = false;\n    }\n    return _TimeToken;\n}());\nexport { _TimeToken };\n//# sourceMappingURL=timeToken.js.map","import { __assign, __decorate } from \"tslib\";\nimport { serialize, serializeAsColor4, serializeAsCameraReference } from \"../Misc/decorators.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { MaterialHelper } from \"../Materials/materialHelper.js\";\n\nimport \"../Shaders/glowMapGeneration.fragment.js\";\nimport \"../Shaders/glowMapGeneration.vertex.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\nimport { EffectFallbacks } from \"../Materials/effectFallbacks.js\";\nimport { DrawWrapper } from \"../Materials/drawWrapper.js\";\n/**\n * The effect layer Helps adding post process effect blended with the main pass.\n *\n * This can be for instance use to generate glow or highlight effects on the scene.\n *\n * The effect layer class can not be used directly and is intented to inherited from to be\n * customized per effects.\n */\nvar EffectLayer = /** @class */ (function () {\n    /**\n     * Instantiates a new effect Layer and references it in the scene.\n     * @param name The name of the layer\n     * @param scene The scene to use the layer in\n     */\n    function EffectLayer(\n    /** The Friendly of the effect in the scene */\n    name, scene) {\n        this._vertexBuffers = {};\n        this._maxSize = 0;\n        this._mainTextureDesiredSize = { width: 0, height: 0 };\n        this._shouldRender = true;\n        this._postProcesses = [];\n        this._textures = [];\n        this._emissiveTextureAndColor = { texture: null, color: new Color4() };\n        /**\n         * The clear color of the texture used to generate the glow map.\n         */\n        this.neutralColor = new Color4();\n        /**\n         * Specifies whether the highlight layer is enabled or not.\n         */\n        this.isEnabled = true;\n        /**\n         * Specifies if the bounding boxes should be rendered normally or if they should undergo the effect of the layer\n         */\n        this.disableBoundingBoxesFromEffectLayer = false;\n        /**\n         * An event triggered when the effect layer has been disposed.\n         */\n        this.onDisposeObservable = new Observable();\n        /**\n         * An event triggered when the effect layer is about rendering the main texture with the glowy parts.\n         */\n        this.onBeforeRenderMainTextureObservable = new Observable();\n        /**\n         * An event triggered when the generated texture is being merged in the scene.\n         */\n        this.onBeforeComposeObservable = new Observable();\n        /**\n         * An event triggered when the mesh is rendered into the effect render target.\n         */\n        this.onBeforeRenderMeshToEffect = new Observable();\n        /**\n         * An event triggered after the mesh has been rendered into the effect render target.\n         */\n        this.onAfterRenderMeshToEffect = new Observable();\n        /**\n         * An event triggered when the generated texture has been merged in the scene.\n         */\n        this.onAfterComposeObservable = new Observable();\n        /**\n         * An event triggered when the effect layer changes its size.\n         */\n        this.onSizeChangedObservable = new Observable();\n        this._materialForRendering = {};\n        this.name = name;\n        this._scene = scene || EngineStore.LastCreatedScene;\n        EffectLayer._SceneComponentInitialization(this._scene);\n        this._engine = this._scene.getEngine();\n        this._maxSize = this._engine.getCaps().maxTextureSize;\n        this._scene.effectLayers.push(this);\n        this._mergeDrawWrapper = [];\n        // Generate Buffers\n        this._generateIndexBuffer();\n        this._generateVertexBuffer();\n    }\n    Object.defineProperty(EffectLayer.prototype, \"camera\", {\n        /**\n         * Gets the camera attached to the layer.\n         */\n        get: function () {\n            return this._effectLayerOptions.camera;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EffectLayer.prototype, \"renderingGroupId\", {\n        /**\n         * Gets the rendering group id the layer should render in.\n         */\n        get: function () {\n            return this._effectLayerOptions.renderingGroupId;\n        },\n        set: function (renderingGroupId) {\n            this._effectLayerOptions.renderingGroupId = renderingGroupId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(EffectLayer.prototype, \"mainTexture\", {\n        /**\n         * Gets the main texture where the effect is rendered\n         */\n        get: function () {\n            return this._mainTexture;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Sets a specific material to be used to render a mesh/a list of meshes in the layer\n     * @param mesh mesh or array of meshes\n     * @param material material to use by the layer when rendering the mesh(es). If undefined is passed, the specific material created by the layer will be used.\n     */\n    EffectLayer.prototype.setMaterialForRendering = function (mesh, material) {\n        this._mainTexture.setMaterialForRendering(mesh, material);\n        if (Array.isArray(mesh)) {\n            for (var i = 0; i < mesh.length; ++i) {\n                var currentMesh = mesh[i];\n                if (!material) {\n                    delete this._materialForRendering[currentMesh.uniqueId];\n                }\n                else {\n                    this._materialForRendering[currentMesh.uniqueId] = [currentMesh, material];\n                }\n            }\n        }\n        else {\n            if (!material) {\n                delete this._materialForRendering[mesh.uniqueId];\n            }\n            else {\n                this._materialForRendering[mesh.uniqueId] = [mesh, material];\n            }\n        }\n    };\n    /**\n     * Number of times _internalRender will be called. Some effect layers need to render the mesh several times, so they should override this method with the number of times the mesh should be rendered\n     * @returns Number of times a mesh must be rendered in the layer\n     */\n    EffectLayer.prototype._numInternalDraws = function () {\n        return 1;\n    };\n    /**\n     * Initializes the effect layer with the required options.\n     * @param options Sets of none mandatory options to use with the layer (see IEffectLayerOptions for more information)\n     */\n    EffectLayer.prototype._init = function (options) {\n        // Adapt options\n        this._effectLayerOptions = __assign({ mainTextureRatio: 0.5, alphaBlendingMode: 2, camera: null, renderingGroupId: -1 }, options);\n        this._setMainTextureSize();\n        this._createMainTexture();\n        this._createTextureAndPostProcesses();\n    };\n    /**\n     * Generates the index buffer of the full screen quad blending to the main canvas.\n     */\n    EffectLayer.prototype._generateIndexBuffer = function () {\n        // Indices\n        var indices = [];\n        indices.push(0);\n        indices.push(1);\n        indices.push(2);\n        indices.push(0);\n        indices.push(2);\n        indices.push(3);\n        this._indexBuffer = this._engine.createIndexBuffer(indices);\n    };\n    /**\n     * Generates the vertex buffer of the full screen quad blending to the main canvas.\n     */\n    EffectLayer.prototype._generateVertexBuffer = function () {\n        // VBO\n        var vertices = [];\n        vertices.push(1, 1);\n        vertices.push(-1, 1);\n        vertices.push(-1, -1);\n        vertices.push(1, -1);\n        var vertexBuffer = new VertexBuffer(this._engine, vertices, VertexBuffer.PositionKind, false, false, 2);\n        this._vertexBuffers[VertexBuffer.PositionKind] = vertexBuffer;\n    };\n    /**\n     * Sets the main texture desired size which is the closest power of two\n     * of the engine canvas size.\n     */\n    EffectLayer.prototype._setMainTextureSize = function () {\n        if (this._effectLayerOptions.mainTextureFixedSize) {\n            this._mainTextureDesiredSize.width = this._effectLayerOptions.mainTextureFixedSize;\n            this._mainTextureDesiredSize.height = this._effectLayerOptions.mainTextureFixedSize;\n        }\n        else {\n            this._mainTextureDesiredSize.width = this._engine.getRenderWidth() * this._effectLayerOptions.mainTextureRatio;\n            this._mainTextureDesiredSize.height = this._engine.getRenderHeight() * this._effectLayerOptions.mainTextureRatio;\n            this._mainTextureDesiredSize.width = this._engine.needPOTTextures\n                ? Engine.GetExponentOfTwo(this._mainTextureDesiredSize.width, this._maxSize)\n                : this._mainTextureDesiredSize.width;\n            this._mainTextureDesiredSize.height = this._engine.needPOTTextures\n                ? Engine.GetExponentOfTwo(this._mainTextureDesiredSize.height, this._maxSize)\n                : this._mainTextureDesiredSize.height;\n        }\n        this._mainTextureDesiredSize.width = Math.floor(this._mainTextureDesiredSize.width);\n        this._mainTextureDesiredSize.height = Math.floor(this._mainTextureDesiredSize.height);\n    };\n    /**\n     * Creates the main texture for the effect layer.\n     */\n    EffectLayer.prototype._createMainTexture = function () {\n        var _this = this;\n        this._mainTexture = new RenderTargetTexture(\"EffectLayerMainRTT\", {\n            width: this._mainTextureDesiredSize.width,\n            height: this._mainTextureDesiredSize.height,\n        }, this._scene, false, true, 0);\n        this._mainTexture.activeCamera = this._effectLayerOptions.camera;\n        this._mainTexture.wrapU = Texture.CLAMP_ADDRESSMODE;\n        this._mainTexture.wrapV = Texture.CLAMP_ADDRESSMODE;\n        this._mainTexture.anisotropicFilteringLevel = 1;\n        this._mainTexture.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\n        this._mainTexture.renderParticles = false;\n        this._mainTexture.renderList = null;\n        this._mainTexture.ignoreCameraViewport = true;\n        for (var id in this._materialForRendering) {\n            var _a = this._materialForRendering[id], mesh = _a[0], material = _a[1];\n            this._mainTexture.setMaterialForRendering(mesh, material);\n        }\n        this._mainTexture.customIsReadyFunction = function (mesh, refreshRate) {\n            if (!mesh.isReady(false)) {\n                return false;\n            }\n            if (refreshRate === 0 && mesh.subMeshes) {\n                // full check: check that the effects are ready\n                for (var i = 0; i < mesh.subMeshes.length; ++i) {\n                    var subMesh = mesh.subMeshes[i];\n                    var material = subMesh.getMaterial();\n                    var renderingMesh = subMesh.getRenderingMesh();\n                    if (!material) {\n                        continue;\n                    }\n                    var batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n                    var hardwareInstancedRendering = batch.hardwareInstancedRendering[subMesh._id] || renderingMesh.hasThinInstances;\n                    _this._setEmissiveTextureAndColor(renderingMesh, subMesh, material);\n                    if (!_this._isReady(subMesh, hardwareInstancedRendering, _this._emissiveTextureAndColor.texture)) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        };\n        // Custom render function\n        this._mainTexture.customRenderFunction = function (opaqueSubMeshes, alphaTestSubMeshes, transparentSubMeshes, depthOnlySubMeshes) {\n            _this.onBeforeRenderMainTextureObservable.notifyObservers(_this);\n            var index;\n            var engine = _this._scene.getEngine();\n            if (depthOnlySubMeshes.length) {\n                engine.setColorWrite(false);\n                for (index = 0; index < depthOnlySubMeshes.length; index++) {\n                    _this._renderSubMesh(depthOnlySubMeshes.data[index]);\n                }\n                engine.setColorWrite(true);\n            }\n            for (index = 0; index < opaqueSubMeshes.length; index++) {\n                _this._renderSubMesh(opaqueSubMeshes.data[index]);\n            }\n            for (index = 0; index < alphaTestSubMeshes.length; index++) {\n                _this._renderSubMesh(alphaTestSubMeshes.data[index]);\n            }\n            var previousAlphaMode = engine.getAlphaMode();\n            for (index = 0; index < transparentSubMeshes.length; index++) {\n                _this._renderSubMesh(transparentSubMeshes.data[index], true);\n            }\n            engine.setAlphaMode(previousAlphaMode);\n        };\n        this._mainTexture.onClearObservable.add(function (engine) {\n            engine.clear(_this.neutralColor, true, true, true);\n        });\n        // Prevent package size in es6 (getBoundingBoxRenderer might not be present)\n        if (this._scene.getBoundingBoxRenderer) {\n            var boundingBoxRendererEnabled_1 = this._scene.getBoundingBoxRenderer().enabled;\n            this._mainTexture.onBeforeBindObservable.add(function () {\n                _this._scene.getBoundingBoxRenderer().enabled = !_this.disableBoundingBoxesFromEffectLayer && boundingBoxRendererEnabled_1;\n            });\n            this._mainTexture.onAfterUnbindObservable.add(function () {\n                _this._scene.getBoundingBoxRenderer().enabled = boundingBoxRendererEnabled_1;\n            });\n        }\n    };\n    /**\n     * Adds specific effects defines.\n     * @param defines The defines to add specifics to.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    EffectLayer.prototype._addCustomEffectDefines = function (defines) {\n        // Nothing to add by default.\n    };\n    /**\n     * Checks for the readiness of the element composing the layer.\n     * @param subMesh the mesh to check for\n     * @param useInstances specify whether or not to use instances to render the mesh\n     * @param emissiveTexture the associated emissive texture used to generate the glow\n     * @return true if ready otherwise, false\n     */\n    EffectLayer.prototype._isReady = function (subMesh, useInstances, emissiveTexture) {\n        var _a;\n        var engine = this._scene.getEngine();\n        var mesh = subMesh.getMesh();\n        var renderingMaterial = (_a = mesh._internalAbstractMeshDataInfo._materialForRenderPass) === null || _a === void 0 ? void 0 : _a[engine.currentRenderPassId];\n        if (renderingMaterial) {\n            return renderingMaterial.isReadyForSubMesh(mesh, subMesh, useInstances);\n        }\n        var material = subMesh.getMaterial();\n        if (!material) {\n            return false;\n        }\n        if (this._useMeshMaterial(subMesh.getRenderingMesh())) {\n            return material.isReadyForSubMesh(subMesh.getMesh(), subMesh, useInstances);\n        }\n        var defines = [];\n        var attribs = [VertexBuffer.PositionKind];\n        var uv1 = false;\n        var uv2 = false;\n        // Diffuse\n        if (material) {\n            var needAlphaTest = material.needAlphaTesting();\n            var diffuseTexture = material.getAlphaTestTexture();\n            var needAlphaBlendFromDiffuse = diffuseTexture && diffuseTexture.hasAlpha && (material.useAlphaFromDiffuseTexture || material._useAlphaFromAlbedoTexture);\n            if (diffuseTexture && (needAlphaTest || needAlphaBlendFromDiffuse)) {\n                defines.push(\"#define DIFFUSE\");\n                if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind) && diffuseTexture.coordinatesIndex === 1) {\n                    defines.push(\"#define DIFFUSEUV2\");\n                    uv2 = true;\n                }\n                else if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\n                    defines.push(\"#define DIFFUSEUV1\");\n                    uv1 = true;\n                }\n                if (needAlphaTest) {\n                    defines.push(\"#define ALPHATEST\");\n                    defines.push(\"#define ALPHATESTVALUE 0.4\");\n                }\n                if (!diffuseTexture.gammaSpace) {\n                    defines.push(\"#define DIFFUSE_ISLINEAR\");\n                }\n            }\n            var opacityTexture = material.opacityTexture;\n            if (opacityTexture) {\n                defines.push(\"#define OPACITY\");\n                if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind) && opacityTexture.coordinatesIndex === 1) {\n                    defines.push(\"#define OPACITYUV2\");\n                    uv2 = true;\n                }\n                else if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\n                    defines.push(\"#define OPACITYUV1\");\n                    uv1 = true;\n                }\n            }\n        }\n        // Emissive\n        if (emissiveTexture) {\n            defines.push(\"#define EMISSIVE\");\n            if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind) && emissiveTexture.coordinatesIndex === 1) {\n                defines.push(\"#define EMISSIVEUV2\");\n                uv2 = true;\n            }\n            else if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\n                defines.push(\"#define EMISSIVEUV1\");\n                uv1 = true;\n            }\n            if (!emissiveTexture.gammaSpace) {\n                defines.push(\"#define EMISSIVE_ISLINEAR\");\n            }\n        }\n        // Vertex\n        if (mesh.useVertexColors && mesh.isVerticesDataPresent(VertexBuffer.ColorKind) && mesh.hasVertexAlpha && material.transparencyMode !== Material.MATERIAL_OPAQUE) {\n            attribs.push(VertexBuffer.ColorKind);\n            defines.push(\"#define VERTEXALPHA\");\n        }\n        if (uv1) {\n            attribs.push(VertexBuffer.UVKind);\n            defines.push(\"#define UV1\");\n        }\n        if (uv2) {\n            attribs.push(VertexBuffer.UV2Kind);\n            defines.push(\"#define UV2\");\n        }\n        // Bones\n        var fallbacks = new EffectFallbacks();\n        if (mesh.useBones && mesh.computeBonesUsingShaders) {\n            attribs.push(VertexBuffer.MatricesIndicesKind);\n            attribs.push(VertexBuffer.MatricesWeightsKind);\n            if (mesh.numBoneInfluencers > 4) {\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\n            }\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\n            var skeleton = mesh.skeleton;\n            if (skeleton && skeleton.isUsingTextureForMatrices) {\n                defines.push(\"#define BONETEXTURE\");\n            }\n            else {\n                defines.push(\"#define BonesPerMesh \" + (skeleton ? skeleton.bones.length + 1 : 0));\n            }\n            if (mesh.numBoneInfluencers > 0) {\n                fallbacks.addCPUSkinningFallback(0, mesh);\n            }\n        }\n        else {\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\n        }\n        // Morph targets\n        var manager = mesh.morphTargetManager;\n        var morphInfluencers = 0;\n        if (manager) {\n            if (manager.numInfluencers > 0) {\n                defines.push(\"#define MORPHTARGETS\");\n                morphInfluencers = manager.numInfluencers;\n                defines.push(\"#define NUM_MORPH_INFLUENCERS \" + morphInfluencers);\n                if (manager.isUsingTextureForTargets) {\n                    defines.push(\"#define MORPHTARGETS_TEXTURE\");\n                }\n                MaterialHelper.PrepareAttributesForMorphTargetsInfluencers(attribs, mesh, morphInfluencers);\n            }\n        }\n        // Instances\n        if (useInstances) {\n            defines.push(\"#define INSTANCES\");\n            MaterialHelper.PushAttributesForInstances(attribs);\n            if (subMesh.getRenderingMesh().hasThinInstances) {\n                defines.push(\"#define THIN_INSTANCES\");\n            }\n        }\n        this._addCustomEffectDefines(defines);\n        // Get correct effect\n        var drawWrapper = subMesh._getDrawWrapper(undefined, true);\n        var cachedDefines = drawWrapper.defines;\n        var join = defines.join(\"\\n\");\n        if (cachedDefines !== join) {\n            drawWrapper.setEffect(this._engine.createEffect(\"glowMapGeneration\", attribs, [\n                \"world\",\n                \"mBones\",\n                \"viewProjection\",\n                \"glowColor\",\n                \"morphTargetInfluences\",\n                \"boneTextureWidth\",\n                \"diffuseMatrix\",\n                \"emissiveMatrix\",\n                \"opacityMatrix\",\n                \"opacityIntensity\",\n                \"morphTargetTextureInfo\",\n                \"morphTargetTextureIndices\",\n            ], [\"diffuseSampler\", \"emissiveSampler\", \"opacitySampler\", \"boneSampler\", \"morphTargets\"], join, fallbacks, undefined, undefined, { maxSimultaneousMorphTargets: morphInfluencers }), join);\n        }\n        return drawWrapper.effect.isReady();\n    };\n    /**\n     * Renders the glowing part of the scene by blending the blurred glowing meshes on top of the rendered scene.\n     */\n    EffectLayer.prototype.render = function () {\n        for (var i = 0; i < this._postProcesses.length; i++) {\n            if (!this._postProcesses[i].isReady()) {\n                return;\n            }\n        }\n        var engine = this._scene.getEngine();\n        var numDraws = this._numInternalDraws();\n        // Check\n        var isReady = true;\n        for (var i = 0; i < numDraws; ++i) {\n            var currentEffect = this._mergeDrawWrapper[i];\n            if (!currentEffect) {\n                currentEffect = this._mergeDrawWrapper[i] = new DrawWrapper(this._engine);\n                currentEffect.setEffect(this._createMergeEffect());\n            }\n            isReady = isReady && currentEffect.effect.isReady();\n        }\n        if (!isReady) {\n            return;\n        }\n        this.onBeforeComposeObservable.notifyObservers(this);\n        var previousAlphaMode = engine.getAlphaMode();\n        for (var i = 0; i < numDraws; ++i) {\n            var currentEffect = this._mergeDrawWrapper[i];\n            // Render\n            engine.enableEffect(currentEffect);\n            engine.setState(false);\n            // VBOs\n            engine.bindBuffers(this._vertexBuffers, this._indexBuffer, currentEffect.effect);\n            // Go Blend.\n            engine.setAlphaMode(this._effectLayerOptions.alphaBlendingMode);\n            // Blends the map on the main canvas.\n            this._internalRender(currentEffect.effect, i);\n        }\n        // Restore Alpha\n        engine.setAlphaMode(previousAlphaMode);\n        this.onAfterComposeObservable.notifyObservers(this);\n        // Handle size changes.\n        var size = this._mainTexture.getSize();\n        this._setMainTextureSize();\n        if ((size.width !== this._mainTextureDesiredSize.width || size.height !== this._mainTextureDesiredSize.height) &&\n            this._mainTextureDesiredSize.width !== 0 &&\n            this._mainTextureDesiredSize.height !== 0) {\n            // Recreate RTT and post processes on size change.\n            this.onSizeChangedObservable.notifyObservers(this);\n            this._disposeTextureAndPostProcesses();\n            this._createMainTexture();\n            this._createTextureAndPostProcesses();\n        }\n    };\n    /**\n     * Determine if a given mesh will be used in the current effect.\n     * @param mesh mesh to test\n     * @returns true if the mesh will be used\n     */\n    EffectLayer.prototype.hasMesh = function (mesh) {\n        if (this.renderingGroupId === -1 || mesh.renderingGroupId === this.renderingGroupId) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Returns true if the layer contains information to display, otherwise false.\n     * @returns true if the glow layer should be rendered\n     */\n    EffectLayer.prototype.shouldRender = function () {\n        return this.isEnabled && this._shouldRender;\n    };\n    /**\n     * Returns true if the mesh should render, otherwise false.\n     * @param mesh The mesh to render\n     * @returns true if it should render otherwise false\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    EffectLayer.prototype._shouldRenderMesh = function (mesh) {\n        return true;\n    };\n    /**\n     * Returns true if the mesh can be rendered, otherwise false.\n     * @param mesh The mesh to render\n     * @param material The material used on the mesh\n     * @returns true if it can be rendered otherwise false\n     */\n    EffectLayer.prototype._canRenderMesh = function (mesh, material) {\n        return !material.needAlphaBlendingForMesh(mesh);\n    };\n    /**\n     * Returns true if the mesh should render, otherwise false.\n     * @returns true if it should render otherwise false\n     */\n    EffectLayer.prototype._shouldRenderEmissiveTextureForMesh = function () {\n        return true;\n    };\n    /**\n     * Renders the submesh passed in parameter to the generation map.\n     * @param subMesh\n     * @param enableAlphaMode\n     */\n    EffectLayer.prototype._renderSubMesh = function (subMesh, enableAlphaMode) {\n        var _a, _b;\n        if (enableAlphaMode === void 0) { enableAlphaMode = false; }\n        if (!this.shouldRender()) {\n            return;\n        }\n        var material = subMesh.getMaterial();\n        var ownerMesh = subMesh.getMesh();\n        var replacementMesh = subMesh.getReplacementMesh();\n        var renderingMesh = subMesh.getRenderingMesh();\n        var effectiveMesh = subMesh.getEffectiveMesh();\n        var scene = this._scene;\n        var engine = scene.getEngine();\n        effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\n        if (!material) {\n            return;\n        }\n        // Do not block in blend mode.\n        if (!this._canRenderMesh(renderingMesh, material)) {\n            return;\n        }\n        // Culling\n        var sideOrientation = (_a = renderingMesh.overrideMaterialSideOrientation) !== null && _a !== void 0 ? _a : material.sideOrientation;\n        var mainDeterminant = effectiveMesh._getWorldMatrixDeterminant();\n        if (mainDeterminant < 0) {\n            sideOrientation = sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\n        }\n        var reverse = sideOrientation === Material.ClockWiseSideOrientation;\n        engine.setState(material.backFaceCulling, material.zOffset, undefined, reverse, material.cullBackFaces, undefined, material.zOffsetUnits);\n        // Managing instances\n        var batch = renderingMesh._getInstancesRenderList(subMesh._id, !!replacementMesh);\n        if (batch.mustReturn) {\n            return;\n        }\n        // Early Exit per mesh\n        if (!this._shouldRenderMesh(renderingMesh)) {\n            return;\n        }\n        var hardwareInstancedRendering = batch.hardwareInstancedRendering[subMesh._id] || renderingMesh.hasThinInstances;\n        this._setEmissiveTextureAndColor(renderingMesh, subMesh, material);\n        this.onBeforeRenderMeshToEffect.notifyObservers(ownerMesh);\n        if (this._useMeshMaterial(renderingMesh)) {\n            renderingMesh.render(subMesh, hardwareInstancedRendering, replacementMesh || undefined);\n        }\n        else if (this._isReady(subMesh, hardwareInstancedRendering, this._emissiveTextureAndColor.texture)) {\n            var renderingMaterial = (_b = effectiveMesh._internalAbstractMeshDataInfo._materialForRenderPass) === null || _b === void 0 ? void 0 : _b[engine.currentRenderPassId];\n            var drawWrapper = subMesh._getDrawWrapper();\n            if (!drawWrapper && renderingMaterial) {\n                drawWrapper = renderingMaterial._getDrawWrapper();\n            }\n            if (!drawWrapper) {\n                return;\n            }\n            var effect_1 = drawWrapper.effect;\n            engine.enableEffect(drawWrapper);\n            if (!hardwareInstancedRendering) {\n                var fillMode = scene.forcePointsCloud ? Material.PointFillMode : scene.forceWireframe ? Material.WireFrameFillMode : material.fillMode;\n                renderingMesh._bind(subMesh, effect_1, fillMode);\n            }\n            if (!renderingMaterial) {\n                effect_1.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n                effect_1.setMatrix(\"world\", effectiveMesh.getWorldMatrix());\n                effect_1.setFloat4(\"glowColor\", this._emissiveTextureAndColor.color.r, this._emissiveTextureAndColor.color.g, this._emissiveTextureAndColor.color.b, this._emissiveTextureAndColor.color.a);\n            }\n            else {\n                renderingMaterial.bindForSubMesh(effectiveMesh.getWorldMatrix(), effectiveMesh, subMesh);\n            }\n            if (!renderingMaterial) {\n                var needAlphaTest = material.needAlphaTesting();\n                var diffuseTexture = material.getAlphaTestTexture();\n                var needAlphaBlendFromDiffuse = diffuseTexture && diffuseTexture.hasAlpha && (material.useAlphaFromDiffuseTexture || material._useAlphaFromAlbedoTexture);\n                if (diffuseTexture && (needAlphaTest || needAlphaBlendFromDiffuse)) {\n                    effect_1.setTexture(\"diffuseSampler\", diffuseTexture);\n                    var textureMatrix = diffuseTexture.getTextureMatrix();\n                    if (textureMatrix) {\n                        effect_1.setMatrix(\"diffuseMatrix\", textureMatrix);\n                    }\n                }\n                var opacityTexture = material.opacityTexture;\n                if (opacityTexture) {\n                    effect_1.setTexture(\"opacitySampler\", opacityTexture);\n                    effect_1.setFloat(\"opacityIntensity\", opacityTexture.level);\n                    var textureMatrix = opacityTexture.getTextureMatrix();\n                    if (textureMatrix) {\n                        effect_1.setMatrix(\"opacityMatrix\", textureMatrix);\n                    }\n                }\n                // Glow emissive only\n                if (this._emissiveTextureAndColor.texture) {\n                    effect_1.setTexture(\"emissiveSampler\", this._emissiveTextureAndColor.texture);\n                    effect_1.setMatrix(\"emissiveMatrix\", this._emissiveTextureAndColor.texture.getTextureMatrix());\n                }\n                // Bones\n                if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\n                    var skeleton = renderingMesh.skeleton;\n                    if (skeleton.isUsingTextureForMatrices) {\n                        var boneTexture = skeleton.getTransformMatrixTexture(renderingMesh);\n                        if (!boneTexture) {\n                            return;\n                        }\n                        effect_1.setTexture(\"boneSampler\", boneTexture);\n                        effect_1.setFloat(\"boneTextureWidth\", 4.0 * (skeleton.bones.length + 1));\n                    }\n                    else {\n                        effect_1.setMatrices(\"mBones\", skeleton.getTransformMatrices(renderingMesh));\n                    }\n                }\n                // Morph targets\n                MaterialHelper.BindMorphTargetParameters(renderingMesh, effect_1);\n                if (renderingMesh.morphTargetManager && renderingMesh.morphTargetManager.isUsingTextureForTargets) {\n                    renderingMesh.morphTargetManager._bind(effect_1);\n                }\n                // Alpha mode\n                if (enableAlphaMode) {\n                    engine.setAlphaMode(material.alphaMode);\n                }\n            }\n            // Draw\n            renderingMesh._processRendering(effectiveMesh, subMesh, effect_1, material.fillMode, batch, hardwareInstancedRendering, function (isInstance, world) {\n                return effect_1.setMatrix(\"world\", world);\n            });\n        }\n        else {\n            // Need to reset refresh rate of the main map\n            this._mainTexture.resetRefreshCounter();\n        }\n        this.onAfterRenderMeshToEffect.notifyObservers(ownerMesh);\n    };\n    /**\n     * Defines whether the current material of the mesh should be use to render the effect.\n     * @param mesh defines the current mesh to render\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    EffectLayer.prototype._useMeshMaterial = function (mesh) {\n        return false;\n    };\n    /**\n     * Rebuild the required buffers.\n     * @hidden Internal use only.\n     */\n    EffectLayer.prototype._rebuild = function () {\n        var vb = this._vertexBuffers[VertexBuffer.PositionKind];\n        if (vb) {\n            vb._rebuild();\n        }\n        this._generateIndexBuffer();\n    };\n    /**\n     * Dispose only the render target textures and post process.\n     */\n    EffectLayer.prototype._disposeTextureAndPostProcesses = function () {\n        this._mainTexture.dispose();\n        for (var i = 0; i < this._postProcesses.length; i++) {\n            if (this._postProcesses[i]) {\n                this._postProcesses[i].dispose();\n            }\n        }\n        this._postProcesses = [];\n        for (var i = 0; i < this._textures.length; i++) {\n            if (this._textures[i]) {\n                this._textures[i].dispose();\n            }\n        }\n        this._textures = [];\n    };\n    /**\n     * Dispose the highlight layer and free resources.\n     */\n    EffectLayer.prototype.dispose = function () {\n        var vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\n        if (vertexBuffer) {\n            vertexBuffer.dispose();\n            this._vertexBuffers[VertexBuffer.PositionKind] = null;\n        }\n        if (this._indexBuffer) {\n            this._scene.getEngine()._releaseBuffer(this._indexBuffer);\n            this._indexBuffer = null;\n        }\n        for (var _i = 0, _a = this._mergeDrawWrapper; _i < _a.length; _i++) {\n            var drawWrapper = _a[_i];\n            drawWrapper.dispose();\n        }\n        this._mergeDrawWrapper = [];\n        // Clean textures and post processes\n        this._disposeTextureAndPostProcesses();\n        // Remove from scene\n        var index = this._scene.effectLayers.indexOf(this, 0);\n        if (index > -1) {\n            this._scene.effectLayers.splice(index, 1);\n        }\n        // Callback\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n        this.onBeforeRenderMainTextureObservable.clear();\n        this.onBeforeComposeObservable.clear();\n        this.onBeforeRenderMeshToEffect.clear();\n        this.onAfterRenderMeshToEffect.clear();\n        this.onAfterComposeObservable.clear();\n        this.onSizeChangedObservable.clear();\n    };\n    /**\n     * Gets the class name of the effect layer\n     * @returns the string with the class name of the effect layer\n     */\n    EffectLayer.prototype.getClassName = function () {\n        return \"EffectLayer\";\n    };\n    /**\n     * Creates an effect layer from parsed effect layer data\n     * @param parsedEffectLayer defines effect layer data\n     * @param scene defines the current scene\n     * @param rootUrl defines the root URL containing the effect layer information\n     * @returns a parsed effect Layer\n     */\n    EffectLayer.Parse = function (parsedEffectLayer, scene, rootUrl) {\n        var effectLayerType = Tools.Instantiate(parsedEffectLayer.customType);\n        return effectLayerType.Parse(parsedEffectLayer, scene, rootUrl);\n    };\n    /**\n     * @param _\n     * @hidden\n     */\n    EffectLayer._SceneComponentInitialization = function (_) {\n        throw _WarnImport(\"EffectLayerSceneComponent\");\n    };\n    __decorate([\n        serialize()\n    ], EffectLayer.prototype, \"name\", void 0);\n    __decorate([\n        serializeAsColor4()\n    ], EffectLayer.prototype, \"neutralColor\", void 0);\n    __decorate([\n        serialize()\n    ], EffectLayer.prototype, \"isEnabled\", void 0);\n    __decorate([\n        serializeAsCameraReference()\n    ], EffectLayer.prototype, \"camera\", null);\n    __decorate([\n        serialize()\n    ], EffectLayer.prototype, \"renderingGroupId\", null);\n    __decorate([\n        serialize()\n    ], EffectLayer.prototype, \"disableBoundingBoxesFromEffectLayer\", void 0);\n    return EffectLayer;\n}());\nexport { EffectLayer };\n//# sourceMappingURL=effectLayer.js.map","import { Camera } from \"../Cameras/camera.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { EffectLayer } from \"./effectLayer.js\";\nimport { AbstractScene } from \"../abstractScene.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n// Adds the parser to the scene parsers.\nAbstractScene.AddParser(SceneComponentConstants.NAME_EFFECTLAYER, function (parsedData, scene, container, rootUrl) {\n    if (parsedData.effectLayers) {\n        if (!container.effectLayers) {\n            container.effectLayers = new Array();\n        }\n        for (var index = 0; index < parsedData.effectLayers.length; index++) {\n            var effectLayer = EffectLayer.Parse(parsedData.effectLayers[index], scene, rootUrl);\n            container.effectLayers.push(effectLayer);\n        }\n    }\n});\nAbstractScene.prototype.removeEffectLayer = function (toRemove) {\n    var index = this.effectLayers.indexOf(toRemove);\n    if (index !== -1) {\n        this.effectLayers.splice(index, 1);\n    }\n    return index;\n};\nAbstractScene.prototype.addEffectLayer = function (newEffectLayer) {\n    this.effectLayers.push(newEffectLayer);\n};\n/**\n * Defines the layer scene component responsible to manage any effect layers\n * in a given scene.\n */\nvar EffectLayerSceneComponent = /** @class */ (function () {\n    /**\n     * Creates a new instance of the component for the given scene\n     * @param scene Defines the scene to register the component in\n     */\n    function EffectLayerSceneComponent(scene) {\n        /**\n         * The component name helpful to identify the component in the list of scene components.\n         */\n        this.name = SceneComponentConstants.NAME_EFFECTLAYER;\n        this._renderEffects = false;\n        this._needStencil = false;\n        this._previousStencilState = false;\n        this.scene = scene || EngineStore.LastCreatedScene;\n        if (!this.scene) {\n            return;\n        }\n        this._engine = this.scene.getEngine();\n        this.scene.effectLayers = new Array();\n    }\n    /**\n     * Registers the component in a given scene\n     */\n    EffectLayerSceneComponent.prototype.register = function () {\n        this.scene._isReadyForMeshStage.registerStep(SceneComponentConstants.STEP_ISREADYFORMESH_EFFECTLAYER, this, this._isReadyForMesh);\n        this.scene._cameraDrawRenderTargetStage.registerStep(SceneComponentConstants.STEP_CAMERADRAWRENDERTARGET_EFFECTLAYER, this, this._renderMainTexture);\n        this.scene._beforeCameraDrawStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERADRAW_EFFECTLAYER, this, this._setStencil);\n        this.scene._afterRenderingGroupDrawStage.registerStep(SceneComponentConstants.STEP_AFTERRENDERINGGROUPDRAW_EFFECTLAYER_DRAW, this, this._drawRenderingGroup);\n        this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_EFFECTLAYER, this, this._setStencilBack);\n        this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_EFFECTLAYER_DRAW, this, this._drawCamera);\n    };\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    EffectLayerSceneComponent.prototype.rebuild = function () {\n        var layers = this.scene.effectLayers;\n        for (var _i = 0, layers_1 = layers; _i < layers_1.length; _i++) {\n            var effectLayer = layers_1[_i];\n            effectLayer._rebuild();\n        }\n    };\n    /**\n     * Serializes the component data to the specified json object\n     * @param serializationObject The object to serialize to\n     */\n    EffectLayerSceneComponent.prototype.serialize = function (serializationObject) {\n        // Effect layers\n        serializationObject.effectLayers = [];\n        var layers = this.scene.effectLayers;\n        for (var _i = 0, layers_2 = layers; _i < layers_2.length; _i++) {\n            var effectLayer = layers_2[_i];\n            if (effectLayer.serialize) {\n                serializationObject.effectLayers.push(effectLayer.serialize());\n            }\n        }\n    };\n    /**\n     * Adds all the elements from the container to the scene\n     * @param container the container holding the elements\n     */\n    EffectLayerSceneComponent.prototype.addFromContainer = function (container) {\n        var _this = this;\n        if (!container.effectLayers) {\n            return;\n        }\n        container.effectLayers.forEach(function (o) {\n            _this.scene.addEffectLayer(o);\n        });\n    };\n    /**\n     * Removes all the elements in the container from the scene\n     * @param container contains the elements to remove\n     * @param dispose if the removed element should be disposed (default: false)\n     */\n    EffectLayerSceneComponent.prototype.removeFromContainer = function (container, dispose) {\n        var _this = this;\n        if (!container.effectLayers) {\n            return;\n        }\n        container.effectLayers.forEach(function (o) {\n            _this.scene.removeEffectLayer(o);\n            if (dispose) {\n                o.dispose();\n            }\n        });\n    };\n    /**\n     * Disposes the component and the associated resources.\n     */\n    EffectLayerSceneComponent.prototype.dispose = function () {\n        var layers = this.scene.effectLayers;\n        while (layers.length) {\n            layers[0].dispose();\n        }\n    };\n    EffectLayerSceneComponent.prototype._isReadyForMesh = function (mesh, hardwareInstancedRendering) {\n        var currentRenderPassId = this._engine.currentRenderPassId;\n        var layers = this.scene.effectLayers;\n        for (var _i = 0, layers_3 = layers; _i < layers_3.length; _i++) {\n            var layer = layers_3[_i];\n            if (!layer.hasMesh(mesh)) {\n                continue;\n            }\n            var renderTarget = layer._mainTexture;\n            this._engine.currentRenderPassId = renderTarget.renderPassId;\n            for (var _a = 0, _b = mesh.subMeshes; _a < _b.length; _a++) {\n                var subMesh = _b[_a];\n                if (!layer.isReady(subMesh, hardwareInstancedRendering)) {\n                    this._engine.currentRenderPassId = currentRenderPassId;\n                    return false;\n                }\n            }\n        }\n        this._engine.currentRenderPassId = currentRenderPassId;\n        return true;\n    };\n    EffectLayerSceneComponent.prototype._renderMainTexture = function (camera) {\n        this._renderEffects = false;\n        this._needStencil = false;\n        var needRebind = false;\n        var layers = this.scene.effectLayers;\n        if (layers && layers.length > 0) {\n            this._previousStencilState = this._engine.getStencilBuffer();\n            for (var _i = 0, layers_4 = layers; _i < layers_4.length; _i++) {\n                var effectLayer = layers_4[_i];\n                if (effectLayer.shouldRender() &&\n                    (!effectLayer.camera ||\n                        (effectLayer.camera.cameraRigMode === Camera.RIG_MODE_NONE && camera === effectLayer.camera) ||\n                        (effectLayer.camera.cameraRigMode !== Camera.RIG_MODE_NONE && effectLayer.camera._rigCameras.indexOf(camera) > -1))) {\n                    this._renderEffects = true;\n                    this._needStencil = this._needStencil || effectLayer.needStencil();\n                    var renderTarget = effectLayer._mainTexture;\n                    if (renderTarget._shouldRender()) {\n                        this.scene.incrementRenderId();\n                        renderTarget.render(false, false);\n                        needRebind = true;\n                    }\n                }\n            }\n            this.scene.incrementRenderId();\n        }\n        return needRebind;\n    };\n    EffectLayerSceneComponent.prototype._setStencil = function () {\n        // Activate effect Layer stencil\n        if (this._needStencil) {\n            this._engine.setStencilBuffer(true);\n        }\n    };\n    EffectLayerSceneComponent.prototype._setStencilBack = function () {\n        // Restore effect Layer stencil\n        if (this._needStencil) {\n            this._engine.setStencilBuffer(this._previousStencilState);\n        }\n    };\n    EffectLayerSceneComponent.prototype._draw = function (renderingGroupId) {\n        if (this._renderEffects) {\n            this._engine.setDepthBuffer(false);\n            var layers = this.scene.effectLayers;\n            for (var i = 0; i < layers.length; i++) {\n                var effectLayer = layers[i];\n                if (effectLayer.renderingGroupId === renderingGroupId) {\n                    if (effectLayer.shouldRender()) {\n                        effectLayer.render();\n                    }\n                }\n            }\n            this._engine.setDepthBuffer(true);\n        }\n    };\n    EffectLayerSceneComponent.prototype._drawCamera = function () {\n        if (this._renderEffects) {\n            this._draw(-1);\n        }\n    };\n    EffectLayerSceneComponent.prototype._drawRenderingGroup = function (index) {\n        if (!this.scene._isInIntermediateRendering() && this._renderEffects) {\n            this._draw(index);\n        }\n    };\n    return EffectLayerSceneComponent;\n}());\nexport { EffectLayerSceneComponent };\nEffectLayer._SceneComponentInitialization = function (scene) {\n    var component = scene._getComponent(SceneComponentConstants.NAME_EFFECTLAYER);\n    if (!component) {\n        component = new EffectLayerSceneComponent(scene);\n        scene._addComponent(component);\n    }\n};\n//# sourceMappingURL=effectLayerSceneComponent.js.map","import { __assign, __decorate, __extends } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { BlurPostProcess } from \"../PostProcesses/blurPostProcess.js\";\nimport { EffectLayer } from \"./effectLayer.js\";\nimport { AbstractScene } from \"../abstractScene.js\";\n\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport \"../Shaders/glowMapMerge.fragment.js\";\nimport \"../Shaders/glowMapMerge.vertex.js\";\nimport \"../Layers/effectLayerSceneComponent.js\";\nAbstractScene.prototype.getGlowLayerByName = function (name) {\n    for (var index = 0; index < this.effectLayers.length; index++) {\n        if (this.effectLayers[index].name === name && this.effectLayers[index].getEffectName() === GlowLayer.EffectName) {\n            return this.effectLayers[index];\n        }\n    }\n    return null;\n};\n/**\n * The glow layer Helps adding a glow effect around the emissive parts of a mesh.\n *\n * Once instantiated in a scene, by default, all the emissive meshes will glow.\n *\n * Documentation: https://doc.babylonjs.com/how_to/glow_layer\n */\nvar GlowLayer = /** @class */ (function (_super) {\n    __extends(GlowLayer, _super);\n    /**\n     * Instantiates a new glow Layer and references it to the scene.\n     * @param name The name of the layer\n     * @param scene The scene to use the layer in\n     * @param options Sets of none mandatory options to use with the layer (see IGlowLayerOptions for more information)\n     */\n    function GlowLayer(name, scene, options) {\n        var _this = _super.call(this, name, scene) || this;\n        _this._intensity = 1.0;\n        _this._includedOnlyMeshes = [];\n        _this._excludedMeshes = [];\n        _this._meshesUsingTheirOwnMaterials = [];\n        _this.neutralColor = new Color4(0, 0, 0, 1);\n        // Adapt options\n        _this._options = __assign({ mainTextureRatio: GlowLayer.DefaultTextureRatio, blurKernelSize: 32, mainTextureFixedSize: undefined, camera: null, mainTextureSamples: 1, renderingGroupId: -1, ldrMerge: false, alphaBlendingMode: 1 }, options);\n        // Initialize the layer\n        _this._init({\n            alphaBlendingMode: _this._options.alphaBlendingMode,\n            camera: _this._options.camera,\n            mainTextureFixedSize: _this._options.mainTextureFixedSize,\n            mainTextureRatio: _this._options.mainTextureRatio,\n            renderingGroupId: _this._options.renderingGroupId,\n        });\n        return _this;\n    }\n    Object.defineProperty(GlowLayer.prototype, \"blurKernelSize\", {\n        /**\n         * Gets the kernel size of the blur.\n         */\n        get: function () {\n            return this._horizontalBlurPostprocess1.kernel;\n        },\n        /**\n         * Sets the kernel size of the blur.\n         */\n        set: function (value) {\n            this._horizontalBlurPostprocess1.kernel = value;\n            this._verticalBlurPostprocess1.kernel = value;\n            this._horizontalBlurPostprocess2.kernel = value;\n            this._verticalBlurPostprocess2.kernel = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GlowLayer.prototype, \"intensity\", {\n        /**\n         * Gets the glow intensity.\n         */\n        get: function () {\n            return this._intensity;\n        },\n        /**\n         * Sets the glow intensity.\n         */\n        set: function (value) {\n            this._intensity = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get the effect name of the layer.\n     * @return The effect name\n     */\n    GlowLayer.prototype.getEffectName = function () {\n        return GlowLayer.EffectName;\n    };\n    /**\n     * Create the merge effect. This is the shader use to blit the information back\n     * to the main canvas at the end of the scene rendering.\n     */\n    GlowLayer.prototype._createMergeEffect = function () {\n        var defines = \"#define EMISSIVE \\n\";\n        if (this._options.ldrMerge) {\n            defines += \"#define LDR \\n\";\n        }\n        // Effect\n        return this._engine.createEffect(\"glowMapMerge\", [VertexBuffer.PositionKind], [\"offset\"], [\"textureSampler\", \"textureSampler2\"], defines);\n    };\n    /**\n     * Creates the render target textures and post processes used in the glow layer.\n     */\n    GlowLayer.prototype._createTextureAndPostProcesses = function () {\n        var _this = this;\n        var blurTextureWidth = this._mainTextureDesiredSize.width;\n        var blurTextureHeight = this._mainTextureDesiredSize.height;\n        blurTextureWidth = this._engine.needPOTTextures ? Engine.GetExponentOfTwo(blurTextureWidth, this._maxSize) : blurTextureWidth;\n        blurTextureHeight = this._engine.needPOTTextures ? Engine.GetExponentOfTwo(blurTextureHeight, this._maxSize) : blurTextureHeight;\n        var textureType = 0;\n        if (this._engine.getCaps().textureHalfFloatRender) {\n            textureType = 2;\n        }\n        else {\n            textureType = 0;\n        }\n        this._blurTexture1 = new RenderTargetTexture(\"GlowLayerBlurRTT\", {\n            width: blurTextureWidth,\n            height: blurTextureHeight,\n        }, this._scene, false, true, textureType);\n        this._blurTexture1.wrapU = Texture.CLAMP_ADDRESSMODE;\n        this._blurTexture1.wrapV = Texture.CLAMP_ADDRESSMODE;\n        this._blurTexture1.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\n        this._blurTexture1.renderParticles = false;\n        this._blurTexture1.ignoreCameraViewport = true;\n        var blurTextureWidth2 = Math.floor(blurTextureWidth / 2);\n        var blurTextureHeight2 = Math.floor(blurTextureHeight / 2);\n        this._blurTexture2 = new RenderTargetTexture(\"GlowLayerBlurRTT2\", {\n            width: blurTextureWidth2,\n            height: blurTextureHeight2,\n        }, this._scene, false, true, textureType);\n        this._blurTexture2.wrapU = Texture.CLAMP_ADDRESSMODE;\n        this._blurTexture2.wrapV = Texture.CLAMP_ADDRESSMODE;\n        this._blurTexture2.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\n        this._blurTexture2.renderParticles = false;\n        this._blurTexture2.ignoreCameraViewport = true;\n        this._textures = [this._blurTexture1, this._blurTexture2];\n        this._horizontalBlurPostprocess1 = new BlurPostProcess(\"GlowLayerHBP1\", new Vector2(1.0, 0), this._options.blurKernelSize / 2, {\n            width: blurTextureWidth,\n            height: blurTextureHeight,\n        }, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, textureType);\n        this._horizontalBlurPostprocess1.width = blurTextureWidth;\n        this._horizontalBlurPostprocess1.height = blurTextureHeight;\n        this._horizontalBlurPostprocess1.externalTextureSamplerBinding = true;\n        this._horizontalBlurPostprocess1.onApplyObservable.add(function (effect) {\n            effect.setTexture(\"textureSampler\", _this._mainTexture);\n        });\n        this._verticalBlurPostprocess1 = new BlurPostProcess(\"GlowLayerVBP1\", new Vector2(0, 1.0), this._options.blurKernelSize / 2, {\n            width: blurTextureWidth,\n            height: blurTextureHeight,\n        }, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, textureType);\n        this._horizontalBlurPostprocess2 = new BlurPostProcess(\"GlowLayerHBP2\", new Vector2(1.0, 0), this._options.blurKernelSize / 2, {\n            width: blurTextureWidth2,\n            height: blurTextureHeight2,\n        }, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, textureType);\n        this._horizontalBlurPostprocess2.width = blurTextureWidth2;\n        this._horizontalBlurPostprocess2.height = blurTextureHeight2;\n        this._horizontalBlurPostprocess2.externalTextureSamplerBinding = true;\n        this._horizontalBlurPostprocess2.onApplyObservable.add(function (effect) {\n            effect.setTexture(\"textureSampler\", _this._blurTexture1);\n        });\n        this._verticalBlurPostprocess2 = new BlurPostProcess(\"GlowLayerVBP2\", new Vector2(0, 1.0), this._options.blurKernelSize / 2, {\n            width: blurTextureWidth2,\n            height: blurTextureHeight2,\n        }, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, textureType);\n        this._postProcesses = [this._horizontalBlurPostprocess1, this._verticalBlurPostprocess1, this._horizontalBlurPostprocess2, this._verticalBlurPostprocess2];\n        this._postProcesses1 = [this._horizontalBlurPostprocess1, this._verticalBlurPostprocess1];\n        this._postProcesses2 = [this._horizontalBlurPostprocess2, this._verticalBlurPostprocess2];\n        this._mainTexture.samples = this._options.mainTextureSamples;\n        this._mainTexture.onAfterUnbindObservable.add(function () {\n            var internalTexture = _this._blurTexture1.renderTarget;\n            if (internalTexture) {\n                _this._scene.postProcessManager.directRender(_this._postProcesses1, internalTexture, true);\n                var internalTexture2 = _this._blurTexture2.renderTarget;\n                if (internalTexture2) {\n                    _this._scene.postProcessManager.directRender(_this._postProcesses2, internalTexture2, true);\n                }\n                _this._engine.unBindFramebuffer(internalTexture2 !== null && internalTexture2 !== void 0 ? internalTexture2 : internalTexture, true);\n            }\n        });\n        // Prevent autoClear.\n        this._postProcesses.map(function (pp) {\n            pp.autoClear = false;\n        });\n    };\n    /**\n     * Checks for the readiness of the element composing the layer.\n     * @param subMesh the mesh to check for\n     * @param useInstances specify whether or not to use instances to render the mesh\n     * @return true if ready otherwise, false\n     */\n    GlowLayer.prototype.isReady = function (subMesh, useInstances) {\n        var material = subMesh.getMaterial();\n        var mesh = subMesh.getRenderingMesh();\n        if (!material || !mesh) {\n            return false;\n        }\n        var emissiveTexture = material.emissiveTexture;\n        return _super.prototype._isReady.call(this, subMesh, useInstances, emissiveTexture);\n    };\n    /**\n     * Returns whether or not the layer needs stencil enabled during the mesh rendering.\n     */\n    GlowLayer.prototype.needStencil = function () {\n        return false;\n    };\n    /**\n     * Returns true if the mesh can be rendered, otherwise false.\n     * @param mesh The mesh to render\n     * @param material The material used on the mesh\n     * @returns true if it can be rendered otherwise false\n     */\n    GlowLayer.prototype._canRenderMesh = function (mesh, material) {\n        return true;\n    };\n    /**\n     * Implementation specific of rendering the generating effect on the main canvas.\n     * @param effect The effect used to render through\n     */\n    GlowLayer.prototype._internalRender = function (effect) {\n        // Texture\n        effect.setTexture(\"textureSampler\", this._blurTexture1);\n        effect.setTexture(\"textureSampler2\", this._blurTexture2);\n        effect.setFloat(\"offset\", this._intensity);\n        // Cache\n        var engine = this._engine;\n        var previousStencilBuffer = engine.getStencilBuffer();\n        // Draw order\n        engine.setStencilBuffer(false);\n        engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n        // Draw order\n        engine.setStencilBuffer(previousStencilBuffer);\n    };\n    /**\n     * Sets the required values for both the emissive texture and and the main color.\n     * @param mesh\n     * @param subMesh\n     * @param material\n     */\n    GlowLayer.prototype._setEmissiveTextureAndColor = function (mesh, subMesh, material) {\n        var _a;\n        var textureLevel = 1.0;\n        if (this.customEmissiveTextureSelector) {\n            this._emissiveTextureAndColor.texture = this.customEmissiveTextureSelector(mesh, subMesh, material);\n        }\n        else {\n            if (material) {\n                this._emissiveTextureAndColor.texture = material.emissiveTexture;\n                if (this._emissiveTextureAndColor.texture) {\n                    textureLevel = this._emissiveTextureAndColor.texture.level;\n                }\n            }\n            else {\n                this._emissiveTextureAndColor.texture = null;\n            }\n        }\n        if (this.customEmissiveColorSelector) {\n            this.customEmissiveColorSelector(mesh, subMesh, material, this._emissiveTextureAndColor.color);\n        }\n        else {\n            if (material.emissiveColor) {\n                var emissiveIntensity = (_a = material.emissiveIntensity) !== null && _a !== void 0 ? _a : 1;\n                textureLevel *= emissiveIntensity;\n                this._emissiveTextureAndColor.color.set(material.emissiveColor.r * textureLevel, material.emissiveColor.g * textureLevel, material.emissiveColor.b * textureLevel, material.alpha);\n            }\n            else {\n                this._emissiveTextureAndColor.color.set(this.neutralColor.r, this.neutralColor.g, this.neutralColor.b, this.neutralColor.a);\n            }\n        }\n    };\n    /**\n     * Returns true if the mesh should render, otherwise false.\n     * @param mesh The mesh to render\n     * @returns true if it should render otherwise false\n     */\n    GlowLayer.prototype._shouldRenderMesh = function (mesh) {\n        return this.hasMesh(mesh);\n    };\n    /**\n     * Adds specific effects defines.\n     * @param defines The defines to add specifics to.\n     */\n    GlowLayer.prototype._addCustomEffectDefines = function (defines) {\n        defines.push(\"#define GLOW\");\n    };\n    /**\n     * Add a mesh in the exclusion list to prevent it to impact or being impacted by the glow layer.\n     * @param mesh The mesh to exclude from the glow layer\n     */\n    GlowLayer.prototype.addExcludedMesh = function (mesh) {\n        if (this._excludedMeshes.indexOf(mesh.uniqueId) === -1) {\n            this._excludedMeshes.push(mesh.uniqueId);\n        }\n    };\n    /**\n     * Remove a mesh from the exclusion list to let it impact or being impacted by the glow layer.\n     * @param mesh The mesh to remove\n     */\n    GlowLayer.prototype.removeExcludedMesh = function (mesh) {\n        var index = this._excludedMeshes.indexOf(mesh.uniqueId);\n        if (index !== -1) {\n            this._excludedMeshes.splice(index, 1);\n        }\n    };\n    /**\n     * Add a mesh in the inclusion list to impact or being impacted by the glow layer.\n     * @param mesh The mesh to include in the glow layer\n     */\n    GlowLayer.prototype.addIncludedOnlyMesh = function (mesh) {\n        if (this._includedOnlyMeshes.indexOf(mesh.uniqueId) === -1) {\n            this._includedOnlyMeshes.push(mesh.uniqueId);\n        }\n    };\n    /**\n     * Remove a mesh from the Inclusion list to prevent it to impact or being impacted by the glow layer.\n     * @param mesh The mesh to remove\n     */\n    GlowLayer.prototype.removeIncludedOnlyMesh = function (mesh) {\n        var index = this._includedOnlyMeshes.indexOf(mesh.uniqueId);\n        if (index !== -1) {\n            this._includedOnlyMeshes.splice(index, 1);\n        }\n    };\n    /**\n     * Determine if a given mesh will be used in the glow layer\n     * @param mesh The mesh to test\n     * @returns true if the mesh will be highlighted by the current glow layer\n     */\n    GlowLayer.prototype.hasMesh = function (mesh) {\n        if (!_super.prototype.hasMesh.call(this, mesh)) {\n            return false;\n        }\n        // Included Mesh\n        if (this._includedOnlyMeshes.length) {\n            return this._includedOnlyMeshes.indexOf(mesh.uniqueId) !== -1;\n        }\n        // Excluded Mesh\n        if (this._excludedMeshes.length) {\n            return this._excludedMeshes.indexOf(mesh.uniqueId) === -1;\n        }\n        return true;\n    };\n    /**\n     * Defines whether the current material of the mesh should be use to render the effect.\n     * @param mesh defines the current mesh to render\n     */\n    GlowLayer.prototype._useMeshMaterial = function (mesh) {\n        if (this._meshesUsingTheirOwnMaterials.length == 0) {\n            return false;\n        }\n        return this._meshesUsingTheirOwnMaterials.indexOf(mesh.uniqueId) > -1;\n    };\n    /**\n     * Add a mesh to be rendered through its own material and not with emissive only.\n     * @param mesh The mesh for which we need to use its material\n     */\n    GlowLayer.prototype.referenceMeshToUseItsOwnMaterial = function (mesh) {\n        var _this = this;\n        mesh.resetDrawCache(this._mainTexture.renderPassId);\n        this._meshesUsingTheirOwnMaterials.push(mesh.uniqueId);\n        mesh.onDisposeObservable.add(function () {\n            _this._disposeMesh(mesh);\n        });\n    };\n    /**\n     * Remove a mesh from being rendered through its own material and not with emissive only.\n     * @param mesh The mesh for which we need to not use its material\n     */\n    GlowLayer.prototype.unReferenceMeshFromUsingItsOwnMaterial = function (mesh) {\n        var index = this._meshesUsingTheirOwnMaterials.indexOf(mesh.uniqueId);\n        while (index >= 0) {\n            this._meshesUsingTheirOwnMaterials.splice(index, 1);\n            index = this._meshesUsingTheirOwnMaterials.indexOf(mesh.uniqueId);\n        }\n        mesh.resetDrawCache(this._mainTexture.renderPassId);\n    };\n    /**\n     * Free any resources and references associated to a mesh.\n     * Internal use\n     * @param mesh The mesh to free.\n     * @hidden\n     */\n    GlowLayer.prototype._disposeMesh = function (mesh) {\n        this.removeIncludedOnlyMesh(mesh);\n        this.removeExcludedMesh(mesh);\n    };\n    /**\n     * Gets the class name of the effect layer\n     * @returns the string with the class name of the effect layer\n     */\n    GlowLayer.prototype.getClassName = function () {\n        return \"GlowLayer\";\n    };\n    /**\n     * Serializes this glow layer\n     * @returns a serialized glow layer object\n     */\n    GlowLayer.prototype.serialize = function () {\n        var serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"BABYLON.GlowLayer\";\n        var index;\n        // Included meshes\n        serializationObject.includedMeshes = [];\n        if (this._includedOnlyMeshes.length) {\n            for (index = 0; index < this._includedOnlyMeshes.length; index++) {\n                var mesh = this._scene.getMeshByUniqueId(this._includedOnlyMeshes[index]);\n                if (mesh) {\n                    serializationObject.includedMeshes.push(mesh.id);\n                }\n            }\n        }\n        // Excluded meshes\n        serializationObject.excludedMeshes = [];\n        if (this._excludedMeshes.length) {\n            for (index = 0; index < this._excludedMeshes.length; index++) {\n                var mesh = this._scene.getMeshByUniqueId(this._excludedMeshes[index]);\n                if (mesh) {\n                    serializationObject.excludedMeshes.push(mesh.id);\n                }\n            }\n        }\n        return serializationObject;\n    };\n    /**\n     * Creates a Glow Layer from parsed glow layer data\n     * @param parsedGlowLayer defines glow layer data\n     * @param scene defines the current scene\n     * @param rootUrl defines the root URL containing the glow layer information\n     * @returns a parsed Glow Layer\n     */\n    GlowLayer.Parse = function (parsedGlowLayer, scene, rootUrl) {\n        var gl = SerializationHelper.Parse(function () { return new GlowLayer(parsedGlowLayer.name, scene, parsedGlowLayer.options); }, parsedGlowLayer, scene, rootUrl);\n        var index;\n        // Excluded meshes\n        for (index = 0; index < parsedGlowLayer.excludedMeshes.length; index++) {\n            var mesh = scene.getMeshById(parsedGlowLayer.excludedMeshes[index]);\n            if (mesh) {\n                gl.addExcludedMesh(mesh);\n            }\n        }\n        // Included meshes\n        for (index = 0; index < parsedGlowLayer.includedMeshes.length; index++) {\n            var mesh = scene.getMeshById(parsedGlowLayer.includedMeshes[index]);\n            if (mesh) {\n                gl.addIncludedOnlyMesh(mesh);\n            }\n        }\n        return gl;\n    };\n    /**\n     * Effect Name of the layer.\n     */\n    GlowLayer.EffectName = \"GlowLayer\";\n    /**\n     * The default blur kernel size used for the glow.\n     */\n    GlowLayer.DefaultBlurKernelSize = 32;\n    /**\n     * The default texture size ratio used for the glow.\n     */\n    GlowLayer.DefaultTextureRatio = 0.5;\n    __decorate([\n        serialize()\n    ], GlowLayer.prototype, \"blurKernelSize\", null);\n    __decorate([\n        serialize()\n    ], GlowLayer.prototype, \"intensity\", null);\n    __decorate([\n        serialize(\"options\")\n    ], GlowLayer.prototype, \"_options\", void 0);\n    return GlowLayer;\n}(EffectLayer));\nexport { GlowLayer };\nRegisterClass(\"BABYLON.GlowLayer\", GlowLayer);\n//# sourceMappingURL=glowLayer.js.map","import { __assign, __decorate, __extends } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture.js\";\nimport { PostProcess } from \"../PostProcesses/postProcess.js\";\nimport { PassPostProcess } from \"../PostProcesses/passPostProcess.js\";\nimport { BlurPostProcess } from \"../PostProcesses/blurPostProcess.js\";\nimport { EffectLayer } from \"./effectLayer.js\";\nimport { AbstractScene } from \"../abstractScene.js\";\n\nimport { Logger } from \"../Misc/logger.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { Color4, Color3 } from \"../Maths/math.color.js\";\nimport \"../Shaders/glowMapMerge.fragment.js\";\nimport \"../Shaders/glowMapMerge.vertex.js\";\nimport \"../Shaders/glowBlurPostProcess.fragment.js\";\nimport \"../Layers/effectLayerSceneComponent.js\";\nAbstractScene.prototype.getHighlightLayerByName = function (name) {\n    var _a;\n    for (var index = 0; index < ((_a = this.effectLayers) === null || _a === void 0 ? void 0 : _a.length); index++) {\n        if (this.effectLayers[index].name === name && this.effectLayers[index].getEffectName() === HighlightLayer.EffectName) {\n            return this.effectLayers[index];\n        }\n    }\n    return null;\n};\n/**\n * Special Glow Blur post process only blurring the alpha channel\n * It enforces keeping the most luminous color in the color channel.\n */\nvar GlowBlurPostProcess = /** @class */ (function (_super) {\n    __extends(GlowBlurPostProcess, _super);\n    function GlowBlurPostProcess(name, direction, kernel, options, camera, samplingMode, engine, reusable) {\n        if (samplingMode === void 0) { samplingMode = Texture.BILINEAR_SAMPLINGMODE; }\n        var _this = _super.call(this, name, \"glowBlurPostProcess\", [\"screenSize\", \"direction\", \"blurWidth\"], null, options, camera, samplingMode, engine, reusable) || this;\n        _this.direction = direction;\n        _this.kernel = kernel;\n        _this.onApplyObservable.add(function (effect) {\n            effect.setFloat2(\"screenSize\", _this.width, _this.height);\n            effect.setVector2(\"direction\", _this.direction);\n            effect.setFloat(\"blurWidth\", _this.kernel);\n        });\n        return _this;\n    }\n    return GlowBlurPostProcess;\n}(PostProcess));\n/**\n * The highlight layer Helps adding a glow effect around a mesh.\n *\n * Once instantiated in a scene, simply use the addMesh or removeMesh method to add or remove\n * glowy meshes to your scene.\n *\n * !!! THIS REQUIRES AN ACTIVE STENCIL BUFFER ON THE CANVAS !!!\n */\nvar HighlightLayer = /** @class */ (function (_super) {\n    __extends(HighlightLayer, _super);\n    /**\n     * Instantiates a new highlight Layer and references it to the scene..\n     * @param name The name of the layer\n     * @param scene The scene to use the layer in\n     * @param options Sets of none mandatory options to use with the layer (see IHighlightLayerOptions for more information)\n     */\n    function HighlightLayer(name, scene, options) {\n        var _this = _super.call(this, name, scene) || this;\n        _this.name = name;\n        /**\n         * Specifies whether or not the inner glow is ACTIVE in the layer.\n         */\n        _this.innerGlow = true;\n        /**\n         * Specifies whether or not the outer glow is ACTIVE in the layer.\n         */\n        _this.outerGlow = true;\n        /**\n         * An event triggered when the highlight layer is being blurred.\n         */\n        _this.onBeforeBlurObservable = new Observable();\n        /**\n         * An event triggered when the highlight layer has been blurred.\n         */\n        _this.onAfterBlurObservable = new Observable();\n        _this._instanceGlowingMeshStencilReference = HighlightLayer.GlowingMeshStencilReference++;\n        _this._meshes = {};\n        _this._excludedMeshes = {};\n        _this.neutralColor = HighlightLayer.NeutralColor;\n        // Warn on stencil\n        if (!_this._engine.isStencilEnable) {\n            Logger.Warn(\"Rendering the Highlight Layer requires the stencil to be active on the canvas. var engine = new Engine(canvas, antialias, { stencil: true }\");\n        }\n        // Adapt options\n        _this._options = __assign({ mainTextureRatio: 0.5, blurTextureSizeRatio: 0.5, blurHorizontalSize: 1.0, blurVerticalSize: 1.0, alphaBlendingMode: 2, camera: null, renderingGroupId: -1 }, options);\n        // Initialize the layer\n        _this._init({\n            alphaBlendingMode: _this._options.alphaBlendingMode,\n            camera: _this._options.camera,\n            mainTextureFixedSize: _this._options.mainTextureFixedSize,\n            mainTextureRatio: _this._options.mainTextureRatio,\n            renderingGroupId: _this._options.renderingGroupId,\n        });\n        // Do not render as long as no meshes have been added\n        _this._shouldRender = false;\n        return _this;\n    }\n    Object.defineProperty(HighlightLayer.prototype, \"blurHorizontalSize\", {\n        /**\n         * Gets the horizontal size of the blur.\n         */\n        get: function () {\n            return this._horizontalBlurPostprocess.kernel;\n        },\n        /**\n         * Specifies the horizontal size of the blur.\n         */\n        set: function (value) {\n            this._horizontalBlurPostprocess.kernel = value;\n            this._options.blurHorizontalSize = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(HighlightLayer.prototype, \"blurVerticalSize\", {\n        /**\n         * Gets the vertical size of the blur.\n         */\n        get: function () {\n            return this._verticalBlurPostprocess.kernel;\n        },\n        /**\n         * Specifies the vertical size of the blur.\n         */\n        set: function (value) {\n            this._verticalBlurPostprocess.kernel = value;\n            this._options.blurVerticalSize = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get the effect name of the layer.\n     * @return The effect name\n     */\n    HighlightLayer.prototype.getEffectName = function () {\n        return HighlightLayer.EffectName;\n    };\n    HighlightLayer.prototype._numInternalDraws = function () {\n        return 2; // we need two rendering, one for the inner glow and the other for the outer glow\n    };\n    /**\n     * Create the merge effect. This is the shader use to blit the information back\n     * to the main canvas at the end of the scene rendering.\n     */\n    HighlightLayer.prototype._createMergeEffect = function () {\n        // Effect\n        return this._engine.createEffect(\"glowMapMerge\", [VertexBuffer.PositionKind], [\"offset\"], [\"textureSampler\"], this._options.isStroke ? \"#define STROKE \\n\" : undefined);\n    };\n    /**\n     * Creates the render target textures and post processes used in the highlight layer.\n     */\n    HighlightLayer.prototype._createTextureAndPostProcesses = function () {\n        var _this = this;\n        var blurTextureWidth = this._mainTextureDesiredSize.width * this._options.blurTextureSizeRatio;\n        var blurTextureHeight = this._mainTextureDesiredSize.height * this._options.blurTextureSizeRatio;\n        blurTextureWidth = this._engine.needPOTTextures ? Engine.GetExponentOfTwo(blurTextureWidth, this._maxSize) : blurTextureWidth;\n        blurTextureHeight = this._engine.needPOTTextures ? Engine.GetExponentOfTwo(blurTextureHeight, this._maxSize) : blurTextureHeight;\n        var textureType = 0;\n        if (this._engine.getCaps().textureHalfFloatRender) {\n            textureType = 2;\n        }\n        else {\n            textureType = 0;\n        }\n        this._blurTexture = new RenderTargetTexture(\"HighlightLayerBlurRTT\", {\n            width: blurTextureWidth,\n            height: blurTextureHeight,\n        }, this._scene, false, true, textureType);\n        this._blurTexture.wrapU = Texture.CLAMP_ADDRESSMODE;\n        this._blurTexture.wrapV = Texture.CLAMP_ADDRESSMODE;\n        this._blurTexture.anisotropicFilteringLevel = 16;\n        this._blurTexture.updateSamplingMode(Texture.TRILINEAR_SAMPLINGMODE);\n        this._blurTexture.renderParticles = false;\n        this._blurTexture.ignoreCameraViewport = true;\n        this._textures = [this._blurTexture];\n        if (this._options.alphaBlendingMode === 2) {\n            this._downSamplePostprocess = new PassPostProcess(\"HighlightLayerPPP\", this._options.blurTextureSizeRatio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine());\n            this._downSamplePostprocess.externalTextureSamplerBinding = true;\n            this._downSamplePostprocess.onApplyObservable.add(function (effect) {\n                effect.setTexture(\"textureSampler\", _this._mainTexture);\n            });\n            this._horizontalBlurPostprocess = new GlowBlurPostProcess(\"HighlightLayerHBP\", new Vector2(1.0, 0), this._options.blurHorizontalSize, 1, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine());\n            this._horizontalBlurPostprocess.onApplyObservable.add(function (effect) {\n                effect.setFloat2(\"screenSize\", blurTextureWidth, blurTextureHeight);\n            });\n            this._verticalBlurPostprocess = new GlowBlurPostProcess(\"HighlightLayerVBP\", new Vector2(0, 1.0), this._options.blurVerticalSize, 1, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine());\n            this._verticalBlurPostprocess.onApplyObservable.add(function (effect) {\n                effect.setFloat2(\"screenSize\", blurTextureWidth, blurTextureHeight);\n            });\n            this._postProcesses = [this._downSamplePostprocess, this._horizontalBlurPostprocess, this._verticalBlurPostprocess];\n        }\n        else {\n            this._horizontalBlurPostprocess = new BlurPostProcess(\"HighlightLayerHBP\", new Vector2(1.0, 0), this._options.blurHorizontalSize / 2, {\n                width: blurTextureWidth,\n                height: blurTextureHeight,\n            }, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, textureType);\n            this._horizontalBlurPostprocess.width = blurTextureWidth;\n            this._horizontalBlurPostprocess.height = blurTextureHeight;\n            this._horizontalBlurPostprocess.externalTextureSamplerBinding = true;\n            this._horizontalBlurPostprocess.onApplyObservable.add(function (effect) {\n                effect.setTexture(\"textureSampler\", _this._mainTexture);\n            });\n            this._verticalBlurPostprocess = new BlurPostProcess(\"HighlightLayerVBP\", new Vector2(0, 1.0), this._options.blurVerticalSize / 2, {\n                width: blurTextureWidth,\n                height: blurTextureHeight,\n            }, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, textureType);\n            this._postProcesses = [this._horizontalBlurPostprocess, this._verticalBlurPostprocess];\n        }\n        this._mainTexture.onAfterUnbindObservable.add(function () {\n            _this.onBeforeBlurObservable.notifyObservers(_this);\n            var internalTexture = _this._blurTexture.renderTarget;\n            if (internalTexture) {\n                _this._scene.postProcessManager.directRender(_this._postProcesses, internalTexture, true);\n                _this._engine.unBindFramebuffer(internalTexture, true);\n            }\n            _this.onAfterBlurObservable.notifyObservers(_this);\n        });\n        // Prevent autoClear.\n        this._postProcesses.map(function (pp) {\n            pp.autoClear = false;\n        });\n    };\n    /**\n     * Returns whether or not the layer needs stencil enabled during the mesh rendering.\n     */\n    HighlightLayer.prototype.needStencil = function () {\n        return true;\n    };\n    /**\n     * Checks for the readiness of the element composing the layer.\n     * @param subMesh the mesh to check for\n     * @param useInstances specify whether or not to use instances to render the mesh\n     * @return true if ready otherwise, false\n     */\n    HighlightLayer.prototype.isReady = function (subMesh, useInstances) {\n        var material = subMesh.getMaterial();\n        var mesh = subMesh.getRenderingMesh();\n        if (!material || !mesh || !this._meshes) {\n            return false;\n        }\n        var emissiveTexture = null;\n        var highlightLayerMesh = this._meshes[mesh.uniqueId];\n        if (highlightLayerMesh && highlightLayerMesh.glowEmissiveOnly && material) {\n            emissiveTexture = material.emissiveTexture;\n        }\n        return _super.prototype._isReady.call(this, subMesh, useInstances, emissiveTexture);\n    };\n    /**\n     * Implementation specific of rendering the generating effect on the main canvas.\n     * @param effect The effect used to render through\n     * @param renderIndex\n     */\n    HighlightLayer.prototype._internalRender = function (effect, renderIndex) {\n        // Texture\n        effect.setTexture(\"textureSampler\", this._blurTexture);\n        // Cache\n        var engine = this._engine;\n        engine.cacheStencilState();\n        // Stencil operations\n        engine.setStencilOperationPass(7681);\n        engine.setStencilOperationFail(7680);\n        engine.setStencilOperationDepthFail(7680);\n        // Draw order\n        engine.setStencilMask(0x00);\n        engine.setStencilBuffer(true);\n        engine.setStencilFunctionReference(this._instanceGlowingMeshStencilReference);\n        // 2 passes inner outer\n        if (this.outerGlow && renderIndex === 0) {\n            // the outer glow is rendered the first time _internalRender is called, so when renderIndex == 0 (and only if outerGlow is enabled)\n            effect.setFloat(\"offset\", 0);\n            engine.setStencilFunction(517);\n            engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n        }\n        if (this.innerGlow && renderIndex === 1) {\n            // the inner glow is rendered the second time _internalRender is called, so when renderIndex == 1 (and only if innerGlow is enabled)\n            effect.setFloat(\"offset\", 1);\n            engine.setStencilFunction(514);\n            engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n        }\n        // Restore Cache\n        engine.restoreStencilState();\n    };\n    /**\n     * Returns true if the layer contains information to display, otherwise false.\n     */\n    HighlightLayer.prototype.shouldRender = function () {\n        if (_super.prototype.shouldRender.call(this)) {\n            return this._meshes ? true : false;\n        }\n        return false;\n    };\n    /**\n     * Returns true if the mesh should render, otherwise false.\n     * @param mesh The mesh to render\n     * @returns true if it should render otherwise false\n     */\n    HighlightLayer.prototype._shouldRenderMesh = function (mesh) {\n        // Excluded Mesh\n        if (this._excludedMeshes && this._excludedMeshes[mesh.uniqueId]) {\n            return false;\n        }\n        if (!_super.prototype.hasMesh.call(this, mesh)) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Returns true if the mesh can be rendered, otherwise false.\n     * @param mesh The mesh to render\n     * @param material The material used on the mesh\n     * @returns true if it can be rendered otherwise false\n     */\n    HighlightLayer.prototype._canRenderMesh = function (mesh, material) {\n        // all meshes can be rendered in the highlight layer, even transparent ones\n        return true;\n    };\n    /**\n     * Adds specific effects defines.\n     * @param defines The defines to add specifics to.\n     */\n    HighlightLayer.prototype._addCustomEffectDefines = function (defines) {\n        defines.push(\"#define HIGHLIGHT\");\n    };\n    /**\n     * Sets the required values for both the emissive texture and and the main color.\n     * @param mesh\n     * @param subMesh\n     * @param material\n     */\n    HighlightLayer.prototype._setEmissiveTextureAndColor = function (mesh, subMesh, material) {\n        var highlightLayerMesh = this._meshes[mesh.uniqueId];\n        if (highlightLayerMesh) {\n            this._emissiveTextureAndColor.color.set(highlightLayerMesh.color.r, highlightLayerMesh.color.g, highlightLayerMesh.color.b, 1.0);\n        }\n        else {\n            this._emissiveTextureAndColor.color.set(this.neutralColor.r, this.neutralColor.g, this.neutralColor.b, this.neutralColor.a);\n        }\n        if (highlightLayerMesh && highlightLayerMesh.glowEmissiveOnly && material) {\n            this._emissiveTextureAndColor.texture = material.emissiveTexture;\n            this._emissiveTextureAndColor.color.set(1.0, 1.0, 1.0, 1.0);\n        }\n        else {\n            this._emissiveTextureAndColor.texture = null;\n        }\n    };\n    /**\n     * Add a mesh in the exclusion list to prevent it to impact or being impacted by the highlight layer.\n     * @param mesh The mesh to exclude from the highlight layer\n     */\n    HighlightLayer.prototype.addExcludedMesh = function (mesh) {\n        if (!this._excludedMeshes) {\n            return;\n        }\n        var meshExcluded = this._excludedMeshes[mesh.uniqueId];\n        if (!meshExcluded) {\n            this._excludedMeshes[mesh.uniqueId] = {\n                mesh: mesh,\n                beforeBind: mesh.onBeforeBindObservable.add(function (mesh) {\n                    mesh.getEngine().setStencilBuffer(false);\n                }),\n                afterRender: mesh.onAfterRenderObservable.add(function (mesh) {\n                    mesh.getEngine().setStencilBuffer(true);\n                }),\n            };\n        }\n    };\n    /**\n     * Remove a mesh from the exclusion list to let it impact or being impacted by the highlight layer.\n     * @param mesh The mesh to highlight\n     */\n    HighlightLayer.prototype.removeExcludedMesh = function (mesh) {\n        if (!this._excludedMeshes) {\n            return;\n        }\n        var meshExcluded = this._excludedMeshes[mesh.uniqueId];\n        if (meshExcluded) {\n            if (meshExcluded.beforeBind) {\n                mesh.onBeforeBindObservable.remove(meshExcluded.beforeBind);\n            }\n            if (meshExcluded.afterRender) {\n                mesh.onAfterRenderObservable.remove(meshExcluded.afterRender);\n            }\n        }\n        this._excludedMeshes[mesh.uniqueId] = null;\n    };\n    /**\n     * Determine if a given mesh will be highlighted by the current HighlightLayer\n     * @param mesh mesh to test\n     * @returns true if the mesh will be highlighted by the current HighlightLayer\n     */\n    HighlightLayer.prototype.hasMesh = function (mesh) {\n        if (!this._meshes) {\n            return false;\n        }\n        if (!_super.prototype.hasMesh.call(this, mesh)) {\n            return false;\n        }\n        return this._meshes[mesh.uniqueId] !== undefined && this._meshes[mesh.uniqueId] !== null;\n    };\n    /**\n     * Add a mesh in the highlight layer in order to make it glow with the chosen color.\n     * @param mesh The mesh to highlight\n     * @param color The color of the highlight\n     * @param glowEmissiveOnly Extract the glow from the emissive texture\n     */\n    HighlightLayer.prototype.addMesh = function (mesh, color, glowEmissiveOnly) {\n        var _this = this;\n        if (glowEmissiveOnly === void 0) { glowEmissiveOnly = false; }\n        if (!this._meshes) {\n            return;\n        }\n        var meshHighlight = this._meshes[mesh.uniqueId];\n        if (meshHighlight) {\n            meshHighlight.color = color;\n        }\n        else {\n            this._meshes[mesh.uniqueId] = {\n                mesh: mesh,\n                color: color,\n                // Lambda required for capture due to Observable this context\n                observerHighlight: mesh.onBeforeBindObservable.add(function (mesh) {\n                    if (_this.isEnabled) {\n                        if (_this._excludedMeshes && _this._excludedMeshes[mesh.uniqueId]) {\n                            _this._defaultStencilReference(mesh);\n                        }\n                        else {\n                            mesh.getScene().getEngine().setStencilFunctionReference(_this._instanceGlowingMeshStencilReference);\n                        }\n                    }\n                }),\n                observerDefault: mesh.onAfterRenderObservable.add(function (mesh) {\n                    if (_this.isEnabled) {\n                        _this._defaultStencilReference(mesh);\n                    }\n                }),\n                glowEmissiveOnly: glowEmissiveOnly,\n            };\n            mesh.onDisposeObservable.add(function () {\n                _this._disposeMesh(mesh);\n            });\n        }\n        this._shouldRender = true;\n    };\n    /**\n     * Remove a mesh from the highlight layer in order to make it stop glowing.\n     * @param mesh The mesh to highlight\n     */\n    HighlightLayer.prototype.removeMesh = function (mesh) {\n        if (!this._meshes) {\n            return;\n        }\n        var meshHighlight = this._meshes[mesh.uniqueId];\n        if (meshHighlight) {\n            if (meshHighlight.observerHighlight) {\n                mesh.onBeforeBindObservable.remove(meshHighlight.observerHighlight);\n            }\n            if (meshHighlight.observerDefault) {\n                mesh.onAfterRenderObservable.remove(meshHighlight.observerDefault);\n            }\n            delete this._meshes[mesh.uniqueId];\n        }\n        this._shouldRender = false;\n        for (var meshHighlightToCheck in this._meshes) {\n            if (this._meshes[meshHighlightToCheck]) {\n                this._shouldRender = true;\n                break;\n            }\n        }\n    };\n    /**\n     * Remove all the meshes currently referenced in the highlight layer\n     */\n    HighlightLayer.prototype.removeAllMeshes = function () {\n        if (!this._meshes) {\n            return;\n        }\n        for (var uniqueId in this._meshes) {\n            if (Object.prototype.hasOwnProperty.call(this._meshes, uniqueId)) {\n                var mesh = this._meshes[uniqueId];\n                if (mesh) {\n                    this.removeMesh(mesh.mesh);\n                }\n            }\n        }\n    };\n    /**\n     * Force the stencil to the normal expected value for none glowing parts\n     * @param mesh\n     */\n    HighlightLayer.prototype._defaultStencilReference = function (mesh) {\n        mesh.getScene().getEngine().setStencilFunctionReference(HighlightLayer.NormalMeshStencilReference);\n    };\n    /**\n     * Free any resources and references associated to a mesh.\n     * Internal use\n     * @param mesh The mesh to free.\n     * @hidden\n     */\n    HighlightLayer.prototype._disposeMesh = function (mesh) {\n        this.removeMesh(mesh);\n        this.removeExcludedMesh(mesh);\n    };\n    /**\n     * Dispose the highlight layer and free resources.\n     */\n    HighlightLayer.prototype.dispose = function () {\n        if (this._meshes) {\n            // Clean mesh references\n            for (var id in this._meshes) {\n                var meshHighlight = this._meshes[id];\n                if (meshHighlight && meshHighlight.mesh) {\n                    if (meshHighlight.observerHighlight) {\n                        meshHighlight.mesh.onBeforeBindObservable.remove(meshHighlight.observerHighlight);\n                    }\n                    if (meshHighlight.observerDefault) {\n                        meshHighlight.mesh.onAfterRenderObservable.remove(meshHighlight.observerDefault);\n                    }\n                }\n            }\n            this._meshes = null;\n        }\n        if (this._excludedMeshes) {\n            for (var id in this._excludedMeshes) {\n                var meshHighlight = this._excludedMeshes[id];\n                if (meshHighlight) {\n                    if (meshHighlight.beforeBind) {\n                        meshHighlight.mesh.onBeforeBindObservable.remove(meshHighlight.beforeBind);\n                    }\n                    if (meshHighlight.afterRender) {\n                        meshHighlight.mesh.onAfterRenderObservable.remove(meshHighlight.afterRender);\n                    }\n                }\n            }\n            this._excludedMeshes = null;\n        }\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Gets the class name of the effect layer\n     * @returns the string with the class name of the effect layer\n     */\n    HighlightLayer.prototype.getClassName = function () {\n        return \"HighlightLayer\";\n    };\n    /**\n     * Serializes this Highlight layer\n     * @returns a serialized Highlight layer object\n     */\n    HighlightLayer.prototype.serialize = function () {\n        var serializationObject = SerializationHelper.Serialize(this);\n        serializationObject.customType = \"BABYLON.HighlightLayer\";\n        // Highlighted meshes\n        serializationObject.meshes = [];\n        if (this._meshes) {\n            for (var m in this._meshes) {\n                var mesh = this._meshes[m];\n                if (mesh) {\n                    serializationObject.meshes.push({\n                        glowEmissiveOnly: mesh.glowEmissiveOnly,\n                        color: mesh.color.asArray(),\n                        meshId: mesh.mesh.id,\n                    });\n                }\n            }\n        }\n        // Excluded meshes\n        serializationObject.excludedMeshes = [];\n        if (this._excludedMeshes) {\n            for (var e in this._excludedMeshes) {\n                var excludedMesh = this._excludedMeshes[e];\n                if (excludedMesh) {\n                    serializationObject.excludedMeshes.push(excludedMesh.mesh.id);\n                }\n            }\n        }\n        return serializationObject;\n    };\n    /**\n     * Creates a Highlight layer from parsed Highlight layer data\n     * @param parsedHightlightLayer defines the Highlight layer data\n     * @param scene defines the current scene\n     * @param rootUrl defines the root URL containing the Highlight layer information\n     * @returns a parsed Highlight layer\n     */\n    HighlightLayer.Parse = function (parsedHightlightLayer, scene, rootUrl) {\n        var hl = SerializationHelper.Parse(function () { return new HighlightLayer(parsedHightlightLayer.name, scene, parsedHightlightLayer.options); }, parsedHightlightLayer, scene, rootUrl);\n        var index;\n        // Excluded meshes\n        for (index = 0; index < parsedHightlightLayer.excludedMeshes.length; index++) {\n            var mesh = scene.getMeshById(parsedHightlightLayer.excludedMeshes[index]);\n            if (mesh) {\n                hl.addExcludedMesh(mesh);\n            }\n        }\n        // Included meshes\n        for (index = 0; index < parsedHightlightLayer.meshes.length; index++) {\n            var highlightedMesh = parsedHightlightLayer.meshes[index];\n            var mesh = scene.getMeshById(highlightedMesh.meshId);\n            if (mesh) {\n                hl.addMesh(mesh, Color3.FromArray(highlightedMesh.color), highlightedMesh.glowEmissiveOnly);\n            }\n        }\n        return hl;\n    };\n    /**\n     * Effect Name of the highlight layer.\n     */\n    HighlightLayer.EffectName = \"HighlightLayer\";\n    /**\n     * The neutral color used during the preparation of the glow effect.\n     * This is black by default as the blend operation is a blend operation.\n     */\n    HighlightLayer.NeutralColor = new Color4(0, 0, 0, 0);\n    /**\n     * Stencil value used for glowing meshes.\n     */\n    HighlightLayer.GlowingMeshStencilReference = 0x02;\n    /**\n     * Stencil value used for the other meshes in the scene.\n     */\n    HighlightLayer.NormalMeshStencilReference = 0x01;\n    __decorate([\n        serialize()\n    ], HighlightLayer.prototype, \"innerGlow\", void 0);\n    __decorate([\n        serialize()\n    ], HighlightLayer.prototype, \"outerGlow\", void 0);\n    __decorate([\n        serialize()\n    ], HighlightLayer.prototype, \"blurHorizontalSize\", null);\n    __decorate([\n        serialize()\n    ], HighlightLayer.prototype, \"blurVerticalSize\", null);\n    __decorate([\n        serialize(\"options\")\n    ], HighlightLayer.prototype, \"_options\", void 0);\n    return HighlightLayer;\n}(EffectLayer));\nexport { HighlightLayer };\nRegisterClass(\"BABYLON.HighlightLayer\", HighlightLayer);\n//# sourceMappingURL=highlightLayer.js.map","import { Observable } from \"../Misc/observable.js\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { LayerSceneComponent } from \"./layerSceneComponent.js\";\n\nimport { DrawWrapper } from \"../Materials/drawWrapper.js\";\nimport \"../Shaders/layer.fragment.js\";\nimport \"../Shaders/layer.vertex.js\";\n/**\n * This represents a full screen 2d layer.\n * This can be useful to display a picture in the  background of your scene for instance.\n * @see https://www.babylonjs-playground.com/#08A2BS#1\n */\nvar Layer = /** @class */ (function () {\n    /**\n     * Instantiates a new layer.\n     * This represents a full screen 2d layer.\n     * This can be useful to display a picture in the  background of your scene for instance.\n     * @see https://www.babylonjs-playground.com/#08A2BS#1\n     * @param name Define the name of the layer in the scene\n     * @param imgUrl Define the url of the texture to display in the layer\n     * @param scene Define the scene the layer belongs to\n     * @param isBackground Defines whether the layer is displayed in front or behind the scene\n     * @param color Defines a color for the layer\n     */\n    function Layer(\n    /**\n     * Define the name of the layer.\n     */\n    name, imgUrl, scene, isBackground, color) {\n        this.name = name;\n        /**\n         * Define the scale of the layer in order to zoom in out of the texture.\n         */\n        this.scale = new Vector2(1, 1);\n        /**\n         * Define an offset for the layer in order to shift the texture.\n         */\n        this.offset = new Vector2(0, 0);\n        /**\n         * Define the alpha blending mode used in the layer in case the texture or color has an alpha.\n         */\n        this.alphaBlendingMode = 2;\n        /**\n         * Define a mask to restrict the layer to only some of the scene cameras.\n         */\n        this.layerMask = 0x0fffffff;\n        /**\n         * Define the list of render target the layer is visible into.\n         */\n        this.renderTargetTextures = [];\n        /**\n         * Define if the layer is only used in renderTarget or if it also\n         * renders in the main frame buffer of the canvas.\n         */\n        this.renderOnlyInRenderTargetTextures = false;\n        /**\n         * Define if the layer is enabled (ie. should be displayed). Default: true\n         */\n        this.isEnabled = true;\n        this._vertexBuffers = {};\n        /**\n         * An event triggered when the layer is disposed.\n         */\n        this.onDisposeObservable = new Observable();\n        /**\n         * An event triggered before rendering the scene\n         */\n        this.onBeforeRenderObservable = new Observable();\n        /**\n         * An event triggered after rendering the scene\n         */\n        this.onAfterRenderObservable = new Observable();\n        this.texture = imgUrl ? new Texture(imgUrl, scene, true) : null;\n        this.isBackground = isBackground === undefined ? true : isBackground;\n        this.color = color === undefined ? new Color4(1, 1, 1, 1) : color;\n        this._scene = (scene || EngineStore.LastCreatedScene);\n        var layerComponent = this._scene._getComponent(SceneComponentConstants.NAME_LAYER);\n        if (!layerComponent) {\n            layerComponent = new LayerSceneComponent(this._scene);\n            this._scene._addComponent(layerComponent);\n        }\n        this._scene.layers.push(this);\n        var engine = this._scene.getEngine();\n        this._drawWrapper = new DrawWrapper(engine);\n        // VBO\n        var vertices = [];\n        vertices.push(1, 1);\n        vertices.push(-1, 1);\n        vertices.push(-1, -1);\n        vertices.push(1, -1);\n        var vertexBuffer = new VertexBuffer(engine, vertices, VertexBuffer.PositionKind, false, false, 2);\n        this._vertexBuffers[VertexBuffer.PositionKind] = vertexBuffer;\n        this._createIndexBuffer();\n    }\n    Object.defineProperty(Layer.prototype, \"onDispose\", {\n        /**\n         * Back compatibility with callback before the onDisposeObservable existed.\n         * The set callback will be triggered when the layer has been disposed.\n         */\n        set: function (callback) {\n            if (this._onDisposeObserver) {\n                this.onDisposeObservable.remove(this._onDisposeObserver);\n            }\n            this._onDisposeObserver = this.onDisposeObservable.add(callback);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"onBeforeRender\", {\n        /**\n         * Back compatibility with callback before the onBeforeRenderObservable existed.\n         * The set callback will be triggered just before rendering the layer.\n         */\n        set: function (callback) {\n            if (this._onBeforeRenderObserver) {\n                this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\n            }\n            this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"onAfterRender\", {\n        /**\n         * Back compatibility with callback before the onAfterRenderObservable existed.\n         * The set callback will be triggered just after rendering the layer.\n         */\n        set: function (callback) {\n            if (this._onAfterRenderObserver) {\n                this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n            }\n            this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Layer.prototype._createIndexBuffer = function () {\n        var engine = this._scene.getEngine();\n        // Indices\n        var indices = [];\n        indices.push(0);\n        indices.push(1);\n        indices.push(2);\n        indices.push(0);\n        indices.push(2);\n        indices.push(3);\n        this._indexBuffer = engine.createIndexBuffer(indices);\n    };\n    /** @hidden */\n    Layer.prototype._rebuild = function () {\n        var vb = this._vertexBuffers[VertexBuffer.PositionKind];\n        if (vb) {\n            vb._rebuild();\n        }\n        this._createIndexBuffer();\n    };\n    /**\n     * Renders the layer in the scene.\n     */\n    Layer.prototype.render = function () {\n        if (!this.isEnabled) {\n            return;\n        }\n        var engine = this._scene.getEngine();\n        var defines = \"\";\n        if (this.alphaTest) {\n            defines = \"#define ALPHATEST\";\n        }\n        if (this.texture && !this.texture.gammaSpace) {\n            defines += \"\\r\\n#define LINEAR\";\n        }\n        if (this._previousDefines !== defines) {\n            this._previousDefines = defines;\n            this._drawWrapper.effect = engine.createEffect(\"layer\", [VertexBuffer.PositionKind], [\"textureMatrix\", \"color\", \"scale\", \"offset\"], [\"textureSampler\"], defines);\n        }\n        var currentEffect = this._drawWrapper.effect;\n        // Check\n        if (!currentEffect || !currentEffect.isReady() || !this.texture || !this.texture.isReady()) {\n            return;\n        }\n        this.onBeforeRenderObservable.notifyObservers(this);\n        // Render\n        engine.enableEffect(this._drawWrapper);\n        engine.setState(false);\n        // Texture\n        currentEffect.setTexture(\"textureSampler\", this.texture);\n        currentEffect.setMatrix(\"textureMatrix\", this.texture.getTextureMatrix());\n        // Color\n        currentEffect.setFloat4(\"color\", this.color.r, this.color.g, this.color.b, this.color.a);\n        // Scale / offset\n        currentEffect.setVector2(\"offset\", this.offset);\n        currentEffect.setVector2(\"scale\", this.scale);\n        // VBOs\n        engine.bindBuffers(this._vertexBuffers, this._indexBuffer, currentEffect);\n        // Draw order\n        if (!this.alphaTest) {\n            engine.setAlphaMode(this.alphaBlendingMode);\n            engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n            engine.setAlphaMode(0);\n        }\n        else {\n            engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n        }\n        this.onAfterRenderObservable.notifyObservers(this);\n    };\n    /**\n     * Disposes and releases the associated resources.\n     */\n    Layer.prototype.dispose = function () {\n        var vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\n        if (vertexBuffer) {\n            vertexBuffer.dispose();\n            this._vertexBuffers[VertexBuffer.PositionKind] = null;\n        }\n        if (this._indexBuffer) {\n            this._scene.getEngine()._releaseBuffer(this._indexBuffer);\n            this._indexBuffer = null;\n        }\n        if (this.texture) {\n            this.texture.dispose();\n            this.texture = null;\n        }\n        // Clean RTT list\n        this.renderTargetTextures = [];\n        // Remove from scene\n        var index = this._scene.layers.indexOf(this);\n        this._scene.layers.splice(index, 1);\n        // Callback\n        this.onDisposeObservable.notifyObservers(this);\n        this.onDisposeObservable.clear();\n        this.onAfterRenderObservable.clear();\n        this.onBeforeRenderObservable.clear();\n    };\n    return Layer;\n}());\nexport { Layer };\n//# sourceMappingURL=layer.js.map","import { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n/**\n * Defines the layer scene component responsible to manage any layers\n * in a given scene.\n */\nvar LayerSceneComponent = /** @class */ (function () {\n    /**\n     * Creates a new instance of the component for the given scene\n     * @param scene Defines the scene to register the component in\n     */\n    function LayerSceneComponent(scene) {\n        /**\n         * The component name helpful to identify the component in the list of scene components.\n         */\n        this.name = SceneComponentConstants.NAME_LAYER;\n        this.scene = scene || EngineStore.LastCreatedScene;\n        if (!this.scene) {\n            return;\n        }\n        this._engine = this.scene.getEngine();\n        this.scene.layers = new Array();\n    }\n    /**\n     * Registers the component in a given scene\n     */\n    LayerSceneComponent.prototype.register = function () {\n        this.scene._beforeCameraDrawStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERADRAW_LAYER, this, this._drawCameraBackground);\n        this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_LAYER, this, this._drawCameraForeground);\n        this.scene._beforeRenderTargetDrawStage.registerStep(SceneComponentConstants.STEP_BEFORERENDERTARGETDRAW_LAYER, this, this._drawRenderTargetBackground);\n        this.scene._afterRenderTargetDrawStage.registerStep(SceneComponentConstants.STEP_AFTERRENDERTARGETDRAW_LAYER, this, this._drawRenderTargetForeground);\n    };\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    LayerSceneComponent.prototype.rebuild = function () {\n        var layers = this.scene.layers;\n        for (var _i = 0, layers_1 = layers; _i < layers_1.length; _i++) {\n            var layer = layers_1[_i];\n            layer._rebuild();\n        }\n    };\n    /**\n     * Disposes the component and the associated resources.\n     */\n    LayerSceneComponent.prototype.dispose = function () {\n        var layers = this.scene.layers;\n        while (layers.length) {\n            layers[0].dispose();\n        }\n    };\n    LayerSceneComponent.prototype._draw = function (predicate) {\n        var layers = this.scene.layers;\n        if (layers.length) {\n            this._engine.setDepthBuffer(false);\n            for (var _i = 0, layers_2 = layers; _i < layers_2.length; _i++) {\n                var layer = layers_2[_i];\n                if (predicate(layer)) {\n                    layer.render();\n                }\n            }\n            this._engine.setDepthBuffer(true);\n        }\n    };\n    LayerSceneComponent.prototype._drawCameraPredicate = function (layer, isBackground, cameraLayerMask) {\n        return !layer.renderOnlyInRenderTargetTextures && layer.isBackground === isBackground && (layer.layerMask & cameraLayerMask) !== 0;\n    };\n    LayerSceneComponent.prototype._drawCameraBackground = function (camera) {\n        var _this = this;\n        this._draw(function (layer) {\n            return _this._drawCameraPredicate(layer, true, camera.layerMask);\n        });\n    };\n    LayerSceneComponent.prototype._drawCameraForeground = function (camera) {\n        var _this = this;\n        this._draw(function (layer) {\n            return _this._drawCameraPredicate(layer, false, camera.layerMask);\n        });\n    };\n    LayerSceneComponent.prototype._drawRenderTargetPredicate = function (layer, isBackground, cameraLayerMask, renderTargetTexture) {\n        return (layer.renderTargetTextures.length > 0 &&\n            layer.isBackground === isBackground &&\n            layer.renderTargetTextures.indexOf(renderTargetTexture) > -1 &&\n            (layer.layerMask & cameraLayerMask) !== 0);\n    };\n    LayerSceneComponent.prototype._drawRenderTargetBackground = function (renderTarget) {\n        var _this = this;\n        this._draw(function (layer) {\n            return _this._drawRenderTargetPredicate(layer, true, _this.scene.activeCamera.layerMask, renderTarget);\n        });\n    };\n    LayerSceneComponent.prototype._drawRenderTargetForeground = function (renderTarget) {\n        var _this = this;\n        this._draw(function (layer) {\n            return _this._drawRenderTargetPredicate(layer, false, _this.scene.activeCamera.layerMask, renderTarget);\n        });\n    };\n    /**\n     * Adds all the elements from the container to the scene\n     * @param container the container holding the elements\n     */\n    LayerSceneComponent.prototype.addFromContainer = function (container) {\n        var _this = this;\n        if (!container.layers) {\n            return;\n        }\n        container.layers.forEach(function (layer) {\n            _this.scene.layers.push(layer);\n        });\n    };\n    /**\n     * Removes all the elements in the container from the scene\n     * @param container contains the elements to remove\n     * @param dispose if the removed element should be disposed (default: false)\n     */\n    LayerSceneComponent.prototype.removeFromContainer = function (container, dispose) {\n        var _this = this;\n        if (dispose === void 0) { dispose = false; }\n        if (!container.layers) {\n            return;\n        }\n        container.layers.forEach(function (layer) {\n            var index = _this.scene.layers.indexOf(layer);\n            if (index !== -1) {\n                _this.scene.layers.splice(index, 1);\n            }\n            if (dispose) {\n                layer.dispose();\n            }\n        });\n    };\n    return LayerSceneComponent;\n}());\nexport { LayerSceneComponent };\n//# sourceMappingURL=layerSceneComponent.js.map"],"names":["ClipboardEventTypes","COPY","CUT","PASTE","ClipboardInfo","type","event","this","GetTypeFromCharacter","keyCode","DeviceInputEventType","EventConstants","DOM_DELTA_PIXEL","DOM_DELTA_LINE","DOM_DELTA_PAGE","KeyboardEventTypes","KEYDOWN","KEYUP","KeyboardInfo","KeyboardInfoPre","_super","_this","call","skipOnKeyboardObservable","Object","defineProperty","prototype","get","set","value","enumerable","configurable","PointerEventTypes","POINTERDOWN","POINTERUP","POINTERMOVE","POINTERWHEEL","POINTERPICK","POINTERTAP","POINTERDOUBLETAP","PointerInfoBase","PointerInfoPre","localX","localY","ray","skipOnPointerObservable","localPosition","PointerInfo","pickInfo","PoseEnabledControllerType","PoseEnabledControllerHelper","InitiateController","vrGamepad","_i","_a","_ControllerFactories","length","factory","canCreate","create","_DefaultControllerFactory","PoseEnabledController","browserGamepad","id","index","isXR","_deviceRoomPosition","_deviceRoomRotationQuaternion","devicePosition","deviceRotationQuaternion","deviceScaleFactor","_trackPosition","_maxRotationDistFromHeadset","Math","PI","_draggedRoomRotation","_leftHandSystemQuaternion","_deviceToWorld","_pointingPoseNode","_workingMatrix","_meshAttachedObservable","controllerType","GENERIC","position","rotationQuaternion","_calculatedPosition","_calculatedRotation","_disableTrackPosition","fixedPosition","copyFrom","update","_updatePoseAndMesh","pose","updateFromDevice","camera","_computeDevicePosition","setTranslation","toEulerAnglesToRef","distanceAway","atan2","sin","cos","abs","rotationAmount","x","z","getRotationMatrixToRef","multiplyInPlace","_mesh","poseData","rawPose","copyFromFloats","getScene","useRightHandedSystem","scaleToRef","addInPlace","orientation","w","multiplyToRef","attachToMesh","mesh","parent","_poseControlledCamera","parents","obj","push","reverse","forEach","p","computeWorldMatrix","notifyObservers","attachToPoseControlledCamera","dispose","getForwardRay","m","getWorldMatrix","origin","getTranslation","forward","forwardWorld","direction","POINTING_POSE","WebVRController","onTriggerStateChangedObservable","onMainButtonStateChangedObservable","onSecondaryButtonStateChangedObservable","onPadStateChangedObservable","onPadValuesChangedObservable","pad","y","_changes","pressChanged","touchChanged","valueChanged","changed","_buttons","Array","buttons","hand","onButtonStateChange","callback","_onButtonStateChange","_defaultModel","_setButtonValue","leftStick","newState","currentState","buttonIndex","pressed","touched","_checkChanges","_handleButtonChange","clear","DualShockButton","DualShockDpad","DualShockPad","gamepad","replace","_leftTrigger","_rightTrigger","onButtonDownObservable","onButtonUpObservable","onPadDownObservable","onPadUpObservable","_buttonCross","_buttonCircle","_buttonSquare","_buttonTriangle","_buttonShare","_buttonOptions","_buttonL1","_buttonR1","_buttonLeftStick","_buttonRightStick","_dPadUp","_dPadDown","_dPadLeft","_dPadRight","onlefttriggerchanged","_onlefttriggerchanged","onrighttriggerchanged","_onrighttriggerchanged","newValue","onbuttondown","_onbuttondown","onbuttonup","_onbuttonup","ondpaddown","_ondpaddown","ondpadup","_ondpadup","currentValue","buttonType","_setDPadValue","Cross","Circle","Square","Triangle","Options","Share","L1","R1","LeftStick","RightStick","Up","Down","Left","Right","buttonCross","buttonCircle","buttonSquare","buttonTriangle","buttonL1","buttonR1","leftTrigger","rightTrigger","buttonShare","buttonOptions","buttonLeftStick","buttonRightStick","dPadUp","dPadDown","dPadLeft","dPadRight","StickValues","Gamepad","leftStickX","leftStickY","rightStickX","rightStickY","_leftStick","_rightStick","_isConnected","_invertLeftStickY","GAMEPAD","_leftStickAxisX","_leftStickAxisY","_rightStickAxisX","_rightStickAxisY","axes","onleftstickchanged","_onleftstickchanged","onrightstickchanged","_onrightstickchanged","newValues","rightStick","XBOX","POSE_ENABLED","DUALSHOCK","GenericPad","GamepadManager","_scene","_babylonGamepads","_oneGamepadConnected","_isMonitoring","onGamepadDisconnectedObservable","_gamepadEventSupported","window","_gamepadSupport","navigator","getGamepads","webkitGetGamepads","msGetGamepads","webkitGamepads","onGamepadConnectedObservable","observer","i","notifyObserver","_onGamepadConnectedEvent","evt","newGamepad","isConnected","_addNewGamepad","_startMonitoringGamepads","_onGamepadDisconnectedEvent","disconnectedGamepad","_updateGamepadObjects","hostWindow","getEngine","getHostWindow","addEventListener","getGamepadByType","removeEventListener","_stopMonitoringGamepads","dualShock","search","xboxOne","_checkGamepadsStatus","_loggedErrors","indexOf","concat","gamepads","_gamepadManager","component","_getComponent","GamepadSystemSceneComponent","_addComponent","add","scene","name","register","_beforeCameraUpdateStage","registerStep","_beforeCameraUpdate","rebuild","gamepadManager","DaydreamController","initControllerMesh","meshLoaded","MODEL_BASE_URL","MODEL_FILENAME","newMeshes","buttonIdx","state","observable","GAMEPAD_ID_PREFIX","gamepadInfo","GearVRController","_buttonIndexToObservableNameMap","GenericController","OculusTouchController","onSecondaryTriggerStateChangedObservable","onThumbRestChangedObservable","meshName","MODEL_LEFT_FILENAME","MODEL_RIGHT_FILENAME","_IsQuest","QUEST_MODEL_BASE_URL","Error","notifyObject","triggerDirection","getChildren","rotation","ViveController","toLowerCase","LoadedMeshInfo","buttonMeshes","axisMeshes","WindowsMotionController","_mapping","buttonMeshNames","trigger","menu","grip","thumbstick","trackpad","buttonObservableNames","axisMeshNames","pointingPoseMeshName","onTrackpadChangedObservable","onTrackpadValuesChangedObservable","_loadedMeshInfo","_updateTrackpad","axis","_lerpAxisTransform","buttonName","_lerpButtonTransform","buttonValue","meshInfo","unpressed","axisValue","min","max","lerpValue","forceDefault","path","filename","device","match","GAMEPAD_ID_PATTERN","meshes","_processModel","rootNode","message","Log","loadedMeshInfo","parentMesh","childMesh","isPickable","setParent","_createMeshInfo","buttonMeshName","buttonMesh","getChildByName","buttonMeshInfo","getImmediateChildByName","axisMeshName","axisMesh","axisMeshInfo","pointingPoseNode","node","n","XRWindowsMotionController","thumbstickValues","onThumbstickStateChangedObservable","onThumbstickValuesChangedObservable","Xbox360Button","Xbox360Dpad","Xbox360Pad","_buttonA","_buttonB","_buttonX","_buttonY","_buttonBack","_buttonStart","_buttonLB","_buttonRB","_isXboxOnePad","A","B","X","Y","Start","Back","LB","RB","buttonA","buttonB","buttonX","buttonY","buttonLB","buttonRB","buttonBack","buttonStart","AxisDragGizmo","dragAxis","color","gizmoLayer","thickness","_pointerObserver","snapDistance","onSnapObservable","_isEnabled","_parent","_dragging","_coloredMaterial","utilityLayerScene","diffuseColor","specularColor","subtract","_hoverMaterial","_disableMaterial","alpha","arrow","_CreateArrow","collider","_gizmoMesh","addChild","lookAt","_rootMesh","scaling","scaleInPlace","currentSnapDragDistance","tmpVector","tmpVector2","tmpSnapEvent","dragBehavior","moveAttached","updateDragPlane","addBehavior","onDragObservable","attachedNode","_handlePivot","matrixChanged","getTranslationToRef","delta","validateDrag","addInPlaceFromFloats","addTranslationFromFloats","updateCache","dragDistance","dragSteps","floor","normalizeToRef","_matrixChanged","onDragStartObservable","onDragEndObservable","light","_getSharedGizmoLight","includedOnlyMeshes","getChildMeshes","cache","gizmoMeshes","colliderMeshes","material","hoverMaterial","disableMaterial","active","addToAxisCache","onPointerObservable","pointerInfo","_customMeshSet","_isHovered","pickedMesh","enabled","_setGizmoMeshMaterial","onEnabledObservable","isCollider","cylinder","diameterTop","height","diameterBottom","tessellation","line","visibility","_CreateArrowInstance","instance","createInstance","_attachedNodeChanged","attachedMesh","remove","detach","matl","Gizmo","_attachedMesh","_attachedNode","_customRotationQuaternion","_scaleRatio","_updateGizmoRotationToMatchAttachedMesh","updateGizmoPositionToMatchAttachedMesh","updateScale","_interactionsEnabled","_tempQuaternion","_tempVector","_tempVector2","_tempMatrix1","_tempMatrix2","_rightHandtoLeftHandMatrix","_beforeRenderObserver","onBeforeRenderObservable","_update","setEnabled","setCustomMesh","c","customRotationQuaternion","effectiveNode","row","getRow","toVector3","updateGizmoRotationToMatchAttachedMesh","transformNode","_isMesh","getClassName","undefined","decompose","PreserveScaling","activeCamera","cameraPosition","globalPosition","subtractToRef","dist","scaleRatio","_getWorldMatrixDeterminant","setAll","attachedNodeTransform","isUsingPivotMatrix","_isCamera","worldMatrix","worldMatrixUC","parentInv","_worldMatrix","invertToRef","targetCamera","toEulerAngles","normalize","transform","localMat","billboardMode","bone","parent_1","getParent","invParent","boneLocalMatrix","getLocalMatrix","markAsDirty","getTypeID","parent_2","nodeLocalMatrix","GizmoAxisPointerObserver","gizmoAxisCache","dragging","_b","isHovered","material_1","has","AxisScaleGizmo","_c","_d","_e","_f","_g","uniformScaling","sensitivity","dragScale","_tmpVector","_tmpMatrix","_tmpMatrix2","_h","_createGizmoMesh","arrowMesh","arrowTail","nodePosition","clone","linePosition","lineScale","increaseGizmoMesh","dragStrength","resetGizmoMesh","snapped","maxScale","e","uniformScaleGizmo","size","useGizmoMaterial","BoundingBoxGizmo","_boundingDimensions","_renderObserver","_scaleDragSpeed","_tmpQuaternion","_tmpRotationMatrix","ignoreChildren","includeChildPredicate","rotationSphereSize","scaleBoxSize","fixedDragMeshScreenSize","fixedDragMeshBoundsSize","fixedDragMeshScreenSizeDistanceFactor","onScaleBoxDragObservable","onScaleBoxDragEndObservable","onRotationSphereDragObservable","onRotationSphereDragEndObservable","scalePivot","_axisFactor","_existingMeshScale","_dragMesh","_pointerDragBehavior","_anchorMesh","disableLighting","_hoverColoredMaterial","_lineBoundingBox","lines","points","l","setColor","_rotateSpheresParent","_loop_1","sphere","diameter","this_1","isNearGrabbable","_dragBehavior","startingTurnDirection","totalTurnAmountOfDrag","originalParent","isNonUniformWithinEpsilon","worldDragDirection","toSub","dragPlaneNormal","scale","normalizeToNew","projectDist","conjugateInPlace","removeChild","updateBoundingBox","_updateDummy","_selectNode","_scaleBoxesParent","j","_loop_2","k","zeroAxisCount","box","this_2","metadata","relativeDragDistance","deltaScale","subtractInPlace","absolutePosition","pointerIds","pointerId","originalScene","equals","_updateRotationSpheres","_updateScaleBoxes","rotateByQuaternionToRef","setAbsolutePosition","factor","scaleBoxes","lengthSquared","emissiveColor","onAfterRenderObservable","addOnce","selectedMesh","isVisible","boundingMinMax","getHierarchyBoundingVectors","rotateSpheres","distanceFromCamera","setEnabledRotationAxis","setEnabledScaling","enable","homogeneousScaling","enableMesh","getAbsolutePosition","enableDragBehavior","useObjectOrientationForDragging","MakeNotPickableAndWrapInBoundingBox","makeNotPickable","root","oldPos","oldRot","PlaneRotationGizmo","planeNormal","useEulerRotation","angle","_angles","rotationMesh","_rotationDisplayPlane","updatable","_RotationGizmoVertexShader","_RotationGizmoFragmentShader","_rotationShaderMaterial","vertex","fragment","attributes","uniforms","backFaceCulling","maxDragAngle","MaxDragAngle","_useAlternatePickedPointAboveMaxDragAngle","lastDragPosition","rotationMatrix","planeNormalTowardsCamera","localPlaneNormalTowardsCamera","dragPlanePoint","setVector3","tmpMatrix","amountToRotate","nodeScale","nodeQuaternion","nodeTranslation","newVector","originalVector","cross","dot","toRotationMatrix","cameraFlipped","camVec","quaternionCoefficient","determinant","RotationGizmo","gizmoManager","options","_observables","_gizmoAxisCache","Map","xColor","xOptions","yColor","yOptions","zColor","zOptions","xGizmo","yGizmo","zGizmo","gizmo","_meshAttached","_nodeAttached","_checkBillboardTransform","isEnabled","hovered","obs","PlaneDragGizmo","_CreatePlane","plane","dragPlane","width","sideOrientation","PositionGizmo","_planarGizmoEnabled","xPlaneGizmo","yPlaneGizmo","zPlaneGizmo","_snapDistance","ScaleGizmo","_sensitivity","_createUniformScaleMesh","_uniformScalingMesh","_octahedron","msh","GizmoManager","utilityLayer","keepDepthUtilityLayer","clearGizmoOnEmptyPointerEvent","enableAutoPicking","onAttachedToMeshObservable","onAttachedToNodeObservable","_gizmosEnabled","positionGizmo","rotationGizmo","scaleGizmo","boundingBoxGizmo","_pointerObservers","_boundingBoxColor","_thickness","boundingBoxDragBehavior","attachableMeshes","attachableNodes","usePointerToAttachGizmos","_defaultUtilityLayer","_defaultKeepDepthUtilityLayer","autoClearDepthAndStencil","gizmos","attachToMeshPointerObserver","_attachToMeshPointerObserver","gizmoAxisPointerObserver","key","node_1","found_1","isDescendantOf","removeBehavior","boundingBoxGizmoEnabled","attachToNode","v","LightGizmo","_cachedPosition","_cachedForward","onClickedObservable","_light","_attachedMeshParent","_material","button","_lightMesh","_CreateHemisphericLightMesh","_CreateDirectionalLightMesh","_CreateSpotLightMesh","_CreatePointLightMesh","gizmoLight","reservedDataStore","lightGizmo","freezeWorldMatrix","setDirection","hemisphere","segments","_CreateLightLines","_Scale","subdivisions","left","right","arrowHead","levels","linePivot","l_1","l_2","l_3","CameraGizmo","_camera","_invProjection","_cameraLinesMesh","_cameraMesh","_CreateCameraMesh","_CreateCameraFrustum","maxZ","cameraGizmo","getProjectionMatrix","setPivotMatrix","depth","cyl1","cyl2","cyl3","alwaysSelectAsActiveMesh","EnvironmentHelper","_errorHandler","exception","onErrorObservable","_options","_GetDefaultOptions","_setupBackground","_setupImageProcessing","createGround","groundSize","groundTexture","_GroundTextureCDNUrl","groundColor","toLinearSpace","groundOpacity","enableGroundShadow","groundShadowLevel","enableGroundMirror","groundMirrorSizeRatio","groundMirrorBlurKernel","groundMirrorAmount","groundMirrorFresnelWeight","groundMirrorFallOffDistance","groundMirrorTextureType","groundYBias","createSkybox","skyboxSize","skyboxTexture","_SkyboxTextureCDNUrl","skyboxColor","backgroundYRotation","sizeAuto","rootPosition","setupImageProcessing","environmentTexture","_EnvironmentTextureCDNUrl","cameraExposure","cameraContrast","toneMappingEnabled","_skybox","_skyboxTexture","_skyboxMaterial","_ground","_groundTexture","_groundMirror","renderList","_groundMaterial","updateOptions","newOptions","setMainColor","groundMaterial","primaryColor","skyboxMaterial","groundMirror","clearColor","r","g","b","imageProcessingConfiguration","contrast","exposure","_setupEnvironmentTexture","sceneSize","_getSceneSize","_setupGround","_setupGroundMaterial","_setupGroundDiffuseTexture","_setupGroundMirrorTexture","_setupMirrorInGroundMaterial","_setupSkybox","_setupSkyboxMaterial","_setupSkyboxReflectionTexture","sceneExtends","getWorldExtends","sceneDiagonal","upperRadiusLimit","sceneDiagonalLenght","isDisposed","onDisposeObservable","receiveShadows","alphaMode","shadowLevel","useRGBColor","enableNoise","diffuseTexture","gammaSpace","hasAlpha","wrapping","ratio","mirrorPlane","anisotropicFilteringLevel","wrapU","wrapV","gammaGround","toGammaSpace","adaptiveBlurKernel","reflectionTexture","reflectionFresnel","reflectionAmount","reflectionStandardFresnelWeight","reflectionFalloffDistance","coordinatesMode","TextureDome","textureUrlOrElement","onError","_halfDome","_crossEye","_useDirectMapping","_textureMode","MODE_MONOSCOPIC","_onBeforeCameraRenderObserver","onLoadErrorObservable","onLoadObservable","resolution","clickToPlay","Boolean","autoPlay","loop","useDirectMapping","faceForward","_setReady","useEquirectangularFOV","fovMultiplier","opacityFresnel","texture","_initTexture","_halfDomeMask","slice","rotate","halfDomeMode","crossEyeMode","_texture","getViewMatrix","acos","_changeTextureMode","newTexture","onBeforeCameraRenderObservable","uScale","vScale","uOffset","vOffset","vAng","MODE_SIDEBYSIDE","rightOffset_1","leftOffset_1","isRightCamera","MODE_TOPBOTTOM","doNotRecurse","disposeMaterialAndTextures","PhotoDome","apply","arguments","textureMode","urlsOrElement","generateMipMaps","_forceSceneHelpersToBundle","lights","createArcRotateCamera","attachCameraControls","worldExtends","worldSize","worldCenter","radius","isFinite","arcRotateCamera","lowerRadiusLimit","wheelPrecision","freeCamera","setTarget","minZ","speed","attachControl","createDefaultLight","createDefaultCamera","pbr","blur","setGlobalEnvTexture","hdrSkybox","hdrSkyboxMaterial","microSurface","twoSidedLighting","infiniteDistance","ignoreCameraMaxZ","webVROptions","then","helper","VideoDome","tempOptions","autoUpdateTexture","poster","video","play","_textureObserver","_ClickInfo","_singleClick","_doubleClick","_hasSwiped","_ignore","InputManager","_alreadyAttached","_meshPickProceed","_currentPickResult","_previousPickResult","_totalPointersPressed","_doubleClickOccured","_pointerX","_pointerY","_startingPointerPosition","_previousStartingPointerPosition","_startingPointerTime","_previousStartingPointerTime","_pointerCaptures","_meshUnderPointerId","_deviceSourceManager","_pointerOverMesh","getMeshUnderPointerByPointerId","_unTranslatedPointerX","_unTranslatedPointerY","_updatePointerPosition","canvasRect","getInputElementClientRect","clientX","clientY","top","_processPointerMove","pickResult","engine","canvas","getInputElement","tabIndex","canvasTabIndex","doNotHandleCursors","style","cursor","defaultCursor","isMeshPicked","hit","setPointerOverMesh","actionManager","_getActionManagerForTrigger","hasPointerTriggers","hoverCursor","_pointerMoveStage","action","onPointerMove","hasObservers","pi","_setRayOnPointerInfo","_pickingUnavailable","createPickingRay","offsetX","offsetY","_checkPrePointerObservable","originMesh","nearInteractionPickingInfo","onPrePointerObservable","simulatePointerMove","pointerEventInit","PointerEvent","inputIndex","simulatePointerDown","_processPointerDown","_pickedDownMesh","actionManager_1","hasPickTriggers","processTrigger","hasSpecificTrigger","setTimeout","pick","isReady","cameraToUseForPointers","Date","now","LongPressDelay","_isPointerSwiping","_pointerDownStage","onPointerDown","DragMovementThreshold","simulatePointerUp","doubleTap","clickInfo","doubleClick","singleClick","_processPointerUp","_pickedUpMesh","onPointerPick","ignore","type_1","hasSwiped","doubleClickActionManager","_pointerUpStage","pickedDownActionManager","hasSpecificMask","onPointerUp","isPointerCaptured","attachUp","attachDown","attachMove","elementToAttachTo","detachControl","_alreadyAttachedTo","_initActionManager","act","skipPointerUpPicking","pointerUpPredicate","_delayedSimpleClick","btn","cb","DoubleClickDelay","_previousButtonPressed","_initClickEvent","obs1","obs2","checkPicking","needToIgnoreNext","checkSingleClickImmediately","ExclusiveDoubleClickMode","_previousDelayedSimpleClickTimeout","_delayedSimpleClickTimeout","bind","checkDoubleClick","clearTimeout","_onPointerMove","skipPointerMovePicking","pointerMovePredicate","enablePointerMoveEvents","constantlyUpdateMeshUnderPointer","layerMask","pointerMoveTrianglePredicate","_onPointerDown","preventDefaultOnPointerDown","preventDefault","focus","pointerDownPredicate","skipPointerDownPicking","_onPointerUp","preventDefaultOnPointerUp","_onKeyDown","onPreKeyboardObservable","onKeyboardObservable","_onKeyUp","onDeviceConnectedObservable","deviceSource","deviceType","onInputChangedObservable","eventData","getInput","underPointerMesh","getPointerOverMesh","_invalidateMesh","EngineInstrumentation","_captureGPUFrameTime","_captureShaderCompilationTime","_shaderCompilationTime","_onBeginFrameObserver","_onEndFrameObserver","_onBeforeShaderCompilationObserver","_onAfterShaderCompilationObserver","getGPUFrameTimeCounter","captureGPUFrameTime","onBeforeShaderCompilationObservable","fetchNewFrame","beginMonitoring","onAfterShaderCompilationObservable","endMonitoring","onBeginFrameObservable","onEndFrameObservable","SceneInstrumentation","_captureActiveMeshesEvaluationTime","_activeMeshesEvaluationTime","_captureRenderTargetsRenderTime","_renderTargetsRenderTime","_captureFrameTime","_frameTime","_captureRenderTime","_renderTime","_captureInterFrameTime","_interFrameTime","_captureParticlesRenderTime","_particlesRenderTime","_captureSpritesRenderTime","_spritesRenderTime","_capturePhysicsTime","_physicsTime","_captureAnimationsTime","_animationsTime","_captureCameraRenderTime","_cameraRenderTime","_onBeforeActiveMeshesEvaluationObserver","_onAfterActiveMeshesEvaluationObserver","_onBeforeRenderTargetsRenderObserver","_onAfterRenderTargetsRenderObserver","_onAfterRenderObserver","_onBeforeDrawPhaseObserver","_onAfterDrawPhaseObserver","_onBeforeAnimationsObserver","_onBeforeParticlesRenderingObserver","_onAfterParticlesRenderingObserver","_onBeforeSpritesRenderingObserver","_onAfterSpritesRenderingObserver","_onBeforePhysicsObserver","_onAfterPhysicsObserver","_onAfterAnimationsObserver","_onAfterCameraRenderObserver","onBeforeAnimationsObservable","_drawCalls","onBeforeActiveMeshesEvaluationObservable","onAfterActiveMeshesEvaluationObservable","onBeforeRenderTargetsRenderObservable","onAfterRenderTargetsRenderObservable","onBeforeParticlesRenderingObservable","onAfterParticlesRenderingObservable","spriteManagers","onBeforeSpritesRenderingObservable","onAfterSpritesRenderingObservable","onBeforePhysicsObservable","onAfterPhysicsObservable","onAfterAnimationsObservable","onBeforeDrawPhaseObservable","onAfterDrawPhaseObservable","onAfterCameraRenderObservable","_TimeToken","_timeElapsedQueryEnded","EffectLayer","_vertexBuffers","_maxSize","_mainTextureDesiredSize","_shouldRender","_postProcesses","_textures","_emissiveTextureAndColor","neutralColor","disableBoundingBoxesFromEffectLayer","onBeforeRenderMainTextureObservable","onBeforeComposeObservable","onBeforeRenderMeshToEffect","onAfterRenderMeshToEffect","onAfterComposeObservable","onSizeChangedObservable","_materialForRendering","_SceneComponentInitialization","_engine","getCaps","maxTextureSize","effectLayers","_mergeDrawWrapper","_generateIndexBuffer","_generateVertexBuffer","_effectLayerOptions","renderingGroupId","_mainTexture","setMaterialForRendering","isArray","currentMesh","uniqueId","_numInternalDraws","_init","mainTextureRatio","alphaBlendingMode","_setMainTextureSize","_createMainTexture","_createTextureAndPostProcesses","indices","_indexBuffer","createIndexBuffer","vertices","vertexBuffer","mainTextureFixedSize","getRenderWidth","getRenderHeight","needPOTTextures","updateSamplingMode","renderParticles","ignoreCameraViewport","customIsReadyFunction","refreshRate","subMeshes","subMesh","getMaterial","renderingMesh","getRenderingMesh","hardwareInstancedRendering","_getInstancesRenderList","_id","getReplacementMesh","hasThinInstances","_setEmissiveTextureAndColor","_isReady","customRenderFunction","opaqueSubMeshes","alphaTestSubMeshes","transparentSubMeshes","depthOnlySubMeshes","setColorWrite","_renderSubMesh","data","previousAlphaMode","getAlphaMode","setAlphaMode","onClearObservable","getBoundingBoxRenderer","boundingBoxRendererEnabled_1","onBeforeBindObservable","onAfterUnbindObservable","_addCustomEffectDefines","defines","useInstances","emissiveTexture","getMesh","renderingMaterial","_internalAbstractMeshDataInfo","_materialForRenderPass","currentRenderPassId","isReadyForSubMesh","_useMeshMaterial","attribs","uv1","uv2","needAlphaTest","needAlphaTesting","getAlphaTestTexture","needAlphaBlendFromDiffuse","useAlphaFromDiffuseTexture","_useAlphaFromAlbedoTexture","isVerticesDataPresent","coordinatesIndex","opacityTexture","useVertexColors","hasVertexAlpha","transparencyMode","fallbacks","useBones","computeBonesUsingShaders","numBoneInfluencers","skeleton","isUsingTextureForMatrices","bones","addCPUSkinningFallback","manager","morphTargetManager","morphInfluencers","numInfluencers","isUsingTextureForTargets","drawWrapper","_getDrawWrapper","cachedDefines","join","setEffect","createEffect","maxSimultaneousMorphTargets","effect","render","numDraws","currentEffect","_createMergeEffect","enableEffect","setState","bindBuffers","_internalRender","getSize","_disposeTextureAndPostProcesses","hasMesh","shouldRender","_shouldRenderMesh","_canRenderMesh","needAlphaBlendingForMesh","_shouldRenderEmissiveTextureForMesh","enableAlphaMode","ownerMesh","replacementMesh","effectiveMesh","getEffectiveMesh","_isActiveIntermediate","overrideMaterialSideOrientation","zOffset","cullBackFaces","zOffsetUnits","batch","mustReturn","effect_1","fillMode","forcePointsCloud","forceWireframe","_bind","bindForSubMesh","setMatrix","getTransformMatrix","setFloat4","a","setTexture","textureMatrix","getTextureMatrix","setFloat","level","boneTexture","getTransformMatrixTexture","setMatrices","getTransformMatrices","_processRendering","isInstance","world","resetRefreshCounter","_rebuild","vb","_releaseBuffer","splice","Parse","parsedEffectLayer","rootUrl","customType","_","parsedData","container","effectLayer","toRemove","newEffectLayer","EffectLayerSceneComponent","_renderEffects","_needStencil","_previousStencilState","_isReadyForMeshStage","_isReadyForMesh","_cameraDrawRenderTargetStage","_renderMainTexture","_beforeCameraDrawStage","_setStencil","_afterRenderingGroupDrawStage","_drawRenderingGroup","_afterCameraDrawStage","_setStencilBack","_drawCamera","layers_1","serialize","serializationObject","layers_2","addFromContainer","o","addEffectLayer","removeFromContainer","removeEffectLayer","layers","layers_3","layer","renderTarget","renderPassId","needRebind","getStencilBuffer","layers_4","cameraRigMode","_rigCameras","needStencil","incrementRenderId","setStencilBuffer","_draw","setDepthBuffer","_isInIntermediateRendering","getEffectName","GlowLayer","EffectName","_intensity","_includedOnlyMeshes","_excludedMeshes","_meshesUsingTheirOwnMaterials","DefaultTextureRatio","blurKernelSize","mainTextureSamples","ldrMerge","_horizontalBlurPostprocess1","kernel","_verticalBlurPostprocess1","_horizontalBlurPostprocess2","_verticalBlurPostprocess2","blurTextureWidth","blurTextureHeight","textureType","textureHalfFloatRender","_blurTexture1","blurTextureWidth2","blurTextureHeight2","_blurTexture2","externalTextureSamplerBinding","onApplyObservable","_postProcesses1","_postProcesses2","samples","internalTexture","postProcessManager","directRender","internalTexture2","unBindFramebuffer","map","pp","autoClear","previousStencilBuffer","drawElementsType","textureLevel","customEmissiveTextureSelector","customEmissiveColorSelector","emissiveIntensity","addExcludedMesh","removeExcludedMesh","addIncludedOnlyMesh","removeIncludedOnlyMesh","referenceMeshToUseItsOwnMaterial","resetDrawCache","_disposeMesh","unReferenceMeshFromUsingItsOwnMaterial","includedMeshes","getMeshByUniqueId","excludedMeshes","parsedGlowLayer","gl","getMeshById","DefaultBlurKernelSize","HighlightLayer","GlowBlurPostProcess","samplingMode","reusable","setFloat2","setVector2","innerGlow","outerGlow","onBeforeBlurObservable","onAfterBlurObservable","_instanceGlowingMeshStencilReference","GlowingMeshStencilReference","_meshes","NeutralColor","isStencilEnable","blurTextureSizeRatio","blurHorizontalSize","blurVerticalSize","_horizontalBlurPostprocess","_verticalBlurPostprocess","isStroke","_blurTexture","_downSamplePostprocess","highlightLayerMesh","glowEmissiveOnly","renderIndex","cacheStencilState","setStencilOperationPass","setStencilOperationFail","setStencilOperationDepthFail","setStencilMask","setStencilFunctionReference","setStencilFunction","restoreStencilState","beforeBind","afterRender","meshExcluded","addMesh","meshHighlight","observerHighlight","_defaultStencilReference","observerDefault","removeMesh","meshHighlightToCheck","removeAllMeshes","hasOwnProperty","NormalMeshStencilReference","asArray","meshId","excludedMesh","parsedHightlightLayer","hl","highlightedMesh","Layer","imgUrl","isBackground","offset","renderTargetTextures","renderOnlyInRenderTargetTextures","layerComponent","_drawWrapper","_createIndexBuffer","_onDisposeObserver","_onBeforeRenderObserver","alphaTest","_previousDefines","LayerSceneComponent","_drawCameraBackground","_drawCameraForeground","_beforeRenderTargetDrawStage","_drawRenderTargetBackground","_afterRenderTargetDrawStage","_drawRenderTargetForeground","predicate","_drawCameraPredicate","cameraLayerMask","_drawRenderTargetPredicate","renderTargetTexture"],"sourceRoot":""}